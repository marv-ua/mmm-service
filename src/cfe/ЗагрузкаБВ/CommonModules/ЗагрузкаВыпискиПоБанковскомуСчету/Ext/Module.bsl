
&Вместо("НайтиПлатежныеПоручения")
Процедура БВ_НайтиПлатежныеПоручения(РаспознаннаяВыписка, Выписка, УчастникиОпераций)
	// Выберем из выписки те строки, что могут быть результатом проведения банком распоряжений владельца счета (платежных поручений).
	// Одновременно определим период, за который эти платежные поручения. 
	// Предполагаем, что выписка содержит документы за непрерывный период.
	// Не используем значения свойств выписки НачалоПериода и КонецПериода, 
	// так как они соответствуют дате исполнения платежки, а не дате ее оформления.
	ОперацииДляПоискаДокументов = Новый Соответствие; // Ключ - ключ поиска; Значение - массив Операций
	НачалоПериода               = Неопределено;
	КонецПериода                = Неопределено;

	Для Каждого Операция Из Выписка.Операции Цикл

		Если Не ОперацияМоглаБытьВыполненаНаОснованииПлатежногоПоручения(Операция) Тогда
			Продолжить;
		КонецЕсли;

		НомерБанковскогоСчетаКонтрагента = Операция.НомерСчетаКонтрагента;

		// ек++
		КлючПоиска = КлючПоискаПлатежногоПоручения(
		НачалоМесяца(Операция.ДатаДокумента),
		Операция.НомерДокумента,
		НомерБанковскогоСчетаКонтрагента);
		// В платежках можно включать в ключ номер счета, но в строках выписки - нет.
		// Потому что контрагент в созданных документах - это не достаточно надежный признак для поиска документов.
		// На него надо опираться, но искать и документы с другими контрагентами (с меньшим приоритетом).
		// Например, потому что пользователь может указать "сводного контрагента" - т.е. не такого, как в файлах выписки.

		ОперацииПоКлючу = ОперацииДляПоискаДокументов[КлючПоиска];
		Если ОперацииПоКлючу = Неопределено Тогда
			ОперацииПоКлючу = Новый Массив;
			ОперацииДляПоискаДокументов.Вставить(КлючПоиска, ОперацииПоКлючу);
		КонецЕсли;

		ОперацииПоКлючу.Добавить(Операция);
		РасширитьПериод(НачалоПериода, КонецПериода, Операция.ДатаДокумента);

	КонецЦикла;

	Если НачалоПериода = Неопределено Или КонецПериода = Неопределено Тогда
		Возврат;
	КонецЕсли;

	// Найдем платежные поручения владельца счета за период

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация",               РаспознаннаяВыписка.ВладелецСчета.Организация);
	Запрос.УстановитьПараметр("БанковскийСчетОрганизации", РаспознаннаяВыписка.ВладелецСчета.БанковскийСчет);
	Запрос.УстановитьПараметр("НачалоПериода",             НачалоМесяца(НачалоПериода));
	Запрос.УстановитьПараметр("КонецПериода",              КонецДня(КонецПериода));
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПлатежноеПоручение.Ссылка КАК ПлатежноеПоручение,
	|	ПлатежноеПоручение.Дата КАК Дата,
	|	ПлатежноеПоручение.Номер КАК Номер,
	|	ПлатежноеПоручение.СчетКонтрагента.НомерСчета КАК НомерБанковскогоСчетаКонтрагента,
	|	ПлатежноеПоручение.Проведен КАК Проведен,
	|	ПлатежноеПоручение.Контрагент КАК Контрагент,
	|	ПлатежноеПоручение.СчетКонтрагента КАК СчетКонтрагента,
	|	ПлатежноеПоручение.ИННПолучателя КАК ИННКонтрагента,
	|	ПлатежноеПоручение.СуммаДокумента КАК Сумма,
	|	ЕСТЬNULL(СписаниеСРасчетногоСчетаПодчиненное.Ссылка, ЕСТЬNULL(СписаниеСРасчетногоСчетаОснование.Ссылка, НЕОПРЕДЕЛЕНО)) КАК ДокументИсполнения,
	|	НАЧАЛОПЕРИОДА(ЕСТЬNULL(СписаниеСРасчетногоСчетаПодчиненное.Дата, ЕСТЬNULL(СписаниеСРасчетногоСчетаОснование.Дата, ДАТАВРЕМЯ(1, 1, 1))), ДЕНЬ) КАК ДатаИсполнения,
	|	ЕСТЬNULL(СписаниеСРасчетногоСчетаПодчиненное.СуммаДокумента, ЕСТЬNULL(СписаниеСРасчетногоСчетаОснование.СуммаДокумента, 0)) КАК СуммаИсполнения
	|ИЗ
	|	Документ.ПлатежноеПоручение КАК ПлатежноеПоручение
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.СписаниеСРасчетногоСчета КАК СписаниеСРасчетногоСчетаОснование
	|		ПО ПлатежноеПоручение.ДокументОснование = СписаниеСРасчетногоСчетаОснование.Ссылка
	|			И (НЕ СписаниеСРасчетногоСчетаОснование.ПометкаУдаления)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.СписаниеСРасчетногоСчета КАК СписаниеСРасчетногоСчетаПодчиненное
	|		ПО ПлатежноеПоручение.Ссылка = СписаниеСРасчетногоСчетаПодчиненное.ДокументОснование
	|			И (НЕ СписаниеСРасчетногоСчетаПодчиненное.ПометкаУдаления)
	|ГДЕ
	|	ПлатежноеПоручение.Дата МЕЖДУ &НачалоПериода И &КонецПериода
	|	И ПлатежноеПоручение.СчетОрганизации = &БанковскийСчетОрганизации
	|	И ПлатежноеПоручение.Организация = &Организация
	|	И НЕ ПлатежноеПоручение.ПометкаУдаления
	|ИТОГИ
	|	СУММА(Сумма),
	|	СУММА(СуммаИсполнения)
	|ПО
	|	ПлатежноеПоручение";

	СоответствиеДокументовБанкаКлиента = НовыйСоответствиеДокументовБанкаКлиента();

	ИдентификаторОперацииКлиент = 0; // Пронумеруем строки результата запроса

	СуммыПлатежныхПоручений = Новый Соответствие;
	ВыборкаПлатежныхПоручений = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаПлатежныхПоручений.Следующий() Цикл

		НомерБезПрефикса                 = СокрЛП(ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(ВыборкаПлатежныхПоручений.Номер, Истина, Истина));
		ДатаПлатежногоПоручения          = НачалоДня(ВыборкаПлатежныхПоручений.Дата);
		НомерБанковскогоСчетаКонтрагента = Строка(ВыборкаПлатежныхПоручений.НомерБанковскогоСчетаКонтрагента);

		// ек++
		КлючПоиска = КлючПоискаПлатежногоПоручения(НачалоМесяца(ДатаПлатежногоПоручения), НомерБезПрефикса, НомерБанковскогоСчетаКонтрагента);

		НомерСПрефиксомИнтеграции = "";
		ЭтоСчетИнтеграции = ИнтеграцияСБанкамиПовтИсп.ИнтеграцияВключена(РаспознаннаяВыписка.ВладелецСчета.БанковскийСчет);
		Если ЭтоСчетИнтеграции Тогда
			НомерСПрефиксомИнтеграции = РегистрыСведений.ДокументыИнтеграцииСБанком.НомерОбъектаСПрефиксомБанкаИнтеграции(
			НомерБезПрефикса,
			РаспознаннаяВыписка.ВладелецСчета.Организация,
			РаспознаннаяВыписка.ВладелецСчета.БанковскийСчет);
		КонецЕсли;

		ОперацииПоКлючуБанк = ОперацииДляПоискаДокументов[КлючПоиска];
		Если ОперацииПоКлючуБанк = Неопределено Тогда
			Продолжить;
		КонецЕсли;

		СуммыПлатежныхПоручений.Вставить(
		ВыборкаПлатежныхПоручений.ПлатежноеПоручение,
		ВыборкаПлатежныхПоручений.Сумма - ВыборкаПлатежныхПоручений.СуммаИсполнения);

		// Каждый элемент выборки содержит "операцию": сочетание документов "Платежное поручение" и "Списание с расчетного счета".
		// Для работы алгоритма ниже, также нужны сочетания всех платежных поручений с незаполненным "Списанием...".
		// Однако, в выборке такие будут только в случае, когда нет ни одного "Списания", соответствующего платежке.
		// Поэтому, при необходимости будем дополнять данные запроса записями с незаполненными "Списаниями".
		ВыбраноПлатежноеПоручениеБезДокументаИсполнения = Ложь;

		ВыборкаОперацийКлиент = ВыборкаПлатежныхПоручений.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);

		Пока ВыборкаОперацийКлиент.Следующий() Цикл

			ВыбраноПлатежноеПоручениеБезДокументаИсполнения = ВыбраноПлатежноеПоручениеБезДокументаИсполнения 
			Или Не ЗначениеЗаполнено(ВыборкаОперацийКлиент.ДокументИсполнения);

			ДобавитьСоответствияПлатежныхПорученийБанкаКлиента(
			СоответствиеДокументовБанкаКлиента,
			ОперацииПоКлючуБанк,
			ИдентификаторОперацииКлиент,
			ВыборкаПлатежныхПоручений,
			НомерБезПрефикса,
			ВыборкаОперацийКлиент,
			УчастникиОпераций,
			НомерСПрефиксомИнтеграции);

		КонецЦикла;

		Если Не ВыбраноПлатежноеПоручениеБезДокументаИсполнения Тогда
			ДобавитьСоответствияПлатежныхПорученийБанкаКлиента(
			СоответствиеДокументовБанкаКлиента,
			ОперацииПоКлючуБанк,
			ИдентификаторОперацииКлиент,
			ВыборкаПлатежныхПоручений,
			НомерБезПрефикса,
			Неопределено,
			УчастникиОпераций,
			НомерСПрефиксомИнтеграции);
		КонецЕсли;

	КонецЦикла;

	ВыбратьЛучшиеСоответствияДокументовОперациям(СоответствиеДокументовБанкаКлиента, СуммыПлатежныхПоручений);

	Для Каждого СоответствиеДокументаОперации Из СоответствиеДокументовБанкаКлиента Цикл

		РаспознаннаяОперация = НайтиПоИдентификатору(РаспознаннаяВыписка.Операции, СоответствиеДокументаОперации.ИдентификаторОперацииБанк);
		РаспознаннаяОперация.ПлатежноеПоручение = СоответствиеДокументаОперации.ПлатежноеПоручение;
		РаспознаннаяОперация.Ссылка 			= СоответствиеДокументаОперации.ДокументИсполнения;

	КонецЦикла;

КонецПроцедуры
