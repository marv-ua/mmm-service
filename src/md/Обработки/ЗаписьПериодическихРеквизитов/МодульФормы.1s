// См. описание обработки.
//
// Обработка предназначена для вызова в модальном режиме 
// из форм элементов справочников.
//
// При открытии обработки должен быть передан параметр - список значений 
// с предпределенными представлениями:
//  "КонтекстФормы"    - "ГрупповойКонтекст" - контекст формы элемента или списка
//                       справочника, откуда вызвана обработка; 
//                       если не передан - обработка не откроется.
//  "СписокРеквизитов" - "СписокЗначений" - список значений периодических реквизитов, 
//                       установленных в диалоге формы справочника:
//                       в представлении - идентификатор периодического реквизита
//                       в значении - значение периодического реквизита.
//  "НоваяДата"        - "дата" - дата, на которую следует записывать не впервые
//                       устанавливаемые значения периодических реквизитов;
//                       если не передана, то КонтекстФормы.ИспользоватьДату().
//  "ПерваяДата"       - "дата" - дата, на которую следует записывать впервые
//                       устанавливаемые значения периодических реквизитов;
//                       если не передана, то КонтекстФормы.ИспользоватьДату().
//  "СвязьРеквизитов"  - 0 - реквизиты нельзя редактировать независимо,
//                       1 - реквизиты можно редактировать независимо;
//                       если не передано - 0.
//
// Если обработка вызвана в модальном режиме, в параметре, переданном при 
// открытии обработки, будет содержаться:
// 0 - если нажата кнопка "Отмена".
// 1 - если нажата кнопка "ОК".
// Для вызова можно использовать функцию глЗаписьПериодическихРеквизитов().
//

////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

// Контекст формы элемента справочника, откуда вызвана обработка.
Перем КонтекстФормы;

//  Список значений периодических реквизитов, измененных пользователем.
Перем СписокРеквизитов;

//  Дата, на которую следует записывать впервые устанавливаемые значения.
Перем ПерваяДата;

// 0 - реквизиты нельзя редактировать независимо,
// 1 - реквизиты можно редактировать независимо;
Перем СвязьРеквизитов;

Процедура ВключитьВыключитьВсеЗначения(Пометка) Далее

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ МОДУЛЯ

//******************************************************************************
// СформироватьЗначениеСтр(Реквизит, Значение)
//
// Параметры:
//  Реквизит - "строка" - идентификатор периодического реквизита.
//  Значение - "неопределенный" - значение периодического реквизита.
//
// Возвращаемое значение:
//  "строка" - представление значения периодического реквизита.
//
// Вызывается из формул элементов диалога:
//
// Описание:
//  Функция формирует представление значения периодического реквизита.
//
Функция СформироватьЗначениеСтр(Реквизит, Значение)
	
	мдРеквизит = Метаданные.Справочник(КонтекстФормы.Вид()).Реквизит(Реквизит);
	
	Если мдРеквизит.Тип = "Число" Тогда
		ЗначениеСтр = СокрЛ(Формат(Значение, "Ч"+мдРеквизит.Длина+"."+мдРеквизит.Точность));
		
	ИначеЕсли мдРеквизит.Тип = "Дата" Тогда
		ЗначениеСтр = Формат(Значение, "ДДДММГГГГ");
		
	ИначеЕсли ПустоеЗначение(Значение) = 1 Тогда
		ЗначениеСтр = "<...>";
		
	Иначе
		ЗначениеСтр = Строка(Значение);
	КонецЕсли;
	
	Возврат ЗначениеСтр;

КонецФункции // СформироватьЗначениеСтр()

//******************************************************************************
// ЗаполнитьТаблицуРеквизитами()
//
// Параметры:
//
// Возвращаемое значение:
//  Нет.
//
// Вызывается из формул элементов диалога:
//
// Описание:
//  Процедура заполняет таблицу новыми значениями периодических реквизитов.
//
Процедура ЗаполнитьТаблицуРеквизитами()
	
	Перем Реквизит;
	
	мдСправочник = Метаданные.Справочник(КонтекстФормы.Вид());
	
	Для Номер = 1 По СписокРеквизитов.РазмерСписка() Цикл
		НовоеЗначение = СписокРеквизитов.ПолучитьЗначение(Номер, Реквизит);
		
		Значения.НоваяСтрока();
		Значения.Идентификатор    = Реквизит;
		Значения.НовоеЗначение    = НовоеЗначение;
		Значения.Представление    = мдСправочник.Реквизит(Реквизит).Представление();
		Значения.НовоеЗначениеСтр = СформироватьЗначениеСтр(Реквизит, Значения.НовоеЗначение);
		Значения.Пометка          = 1;
	КонецЦикла;
	
КонецПроцедуры // ЗаполнитьТаблицуРеквизитами()

//******************************************************************************
// ЗаполнитьТаблицуЗначениями()
//
// Параметры:
//
// Возвращаемое значение:
//  Нет.
//
// Вызывается из формул элементов диалога:
//  Поле НоваяДата.
//
// Описание:
//  Процедура заполняет таблицу старыми значениями периодических реквизитов.
//
Процедура ЗаполнитьТаблицуЗначениями()
	
	Если ПустоеЗначение(КонтекстФормы.ТекущийЭлемент()) = 1 Тогда
		Возврат;
	КонецЕсли;
	
	Периодический = СоздатьОбъект("Периодический");

	Значения.ВыбратьСтроки();
	Пока Значения.ПолучитьСтроку() = 1 Цикл
		Периодический.ИспользоватьОбъект(Значения.Идентификатор, КонтекстФормы.ТекущийЭлемент());
		Периодический.НайтиЗначение(НоваяДата, -1);
		
		Значения.СтароеЗначение    = Периодический.Значение;
		Значения.СтароеЗначениеСтр = СформироватьЗначениеСтр(Значения.Идентификатор, Периодический.Значение);
		Значения.СтараяДатаЗнач    = Периодический.ДатаЗнач;
	КонецЦикла;
	
КонецПроцедуры // ЗаполнитьТаблицуЗначениями()

//******************************************************************************
// ВключитьВыключитьЗначение()
//
// Параметры:
//
// Возвращаемое значение:
//  Нет.
//
// Вызывается из формул элементов диалога:
//  Таблица Значения.
//
// Описание:
//  Устанавливает / снимает пометку у реквизита в текущей строке таблицы.
//
Процедура ВключитьВыключитьЗначение()
	
	Если 0 < Значения.ТекущаяСтрока() Тогда
		Пометка = Значения.ПолучитьЗначение(Значения.ТекущаяСтрока(), "Пометка");
		
		Если СвязьРеквизитов = 0 Тогда
			Значения.УстановитьЗначение(Значения.ТекущаяСтрока(), "Пометка", 3-Пометка);
		Иначе
			ВключитьВыключитьВсеЗначения(3-Пометка);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ВключитьВыключитьЗначение()

//******************************************************************************
// ВключитьВыключитьВсеЗначения(Пометка)
//
// Параметры:
//  Пометка - 1 - снять пометки
//            2 - установить пометки.
//
// Возвращаемое значение:
//  Нет.
//
// Вызывается из формул элементов диалога:
//  Кнопки "Вкл. все" и "Выкл. все".
//
// Описание:
//  Устанавливает / снимает пометки у всех реквизитов.
//
Процедура ВключитьВыключитьВсеЗначения(Пометка)
	
	Значения.ВыбратьСтроки();
	Пока Значения.ПолучитьСтроку() = 1 Цикл
		Значения.Пометка = Пометка;
	КонецЦикла;
	
КонецПроцедуры // ВключитьВыключитьВсеЗначения()

//******************************************************************************
// ВключитьНовыеЗначения()
//
// Параметры:
//
// Возвращаемое значение:
//  Нет.
//
// Вызывается из формул элементов диалога:
//  Кнопка "Вкл. новые".
//
// Описание:
//  Устанавливает пометки только у реквизитов, чьи значения отличаются от ранее 
// действовавших.
//
Процедура ВключитьНовыеЗначения()
	
	Значения.ВыбратьСтроки();
	Пока Значения.ПолучитьСтроку() = 1 Цикл
		Если ТипЗначенияСтр(Значения.НовоеЗначение) <> ТипЗначенияСтр(Значения.СтароеЗначение) Тогда
			Значения.Пометка = 2;
		ИначеЕсли Значения.НовоеЗначение <> Значения.СтароеЗначение Тогда
			Значения.Пометка = 2;
		Иначе
			Значения.Пометка = 1;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры // ВключитьНовыеЗначения()

//******************************************************************************
// ЗаписатьЗначения()
//
// Параметры:
//
// Возвращаемое значение:
//  Нет.
//
// Вызывается из формул элементов диалога:
//  Кнопка "ОК".
//
// Описание:
//  Процедура записывает значения отмеченных реквизитов в информационную базу.
// В случае успешной записи закрывает форму, возвращая 1 в параметр, переданный 
// при открытии формы.
//
Процедура ЗаписатьЗначения()
	
	Периодический = СоздатьОбъект("Периодический");
	
	Попытка
		НачатьТранзакцию();
		
		// При первой записи элемента системой принудительно записываются 
		// первые значения периодических реквизитов - их надо удалить.
		ПерваяЗапись = ПустоеЗначение(КонтекстФормы.ТекущийЭлемент());
		
		КонтекстФормы.Записать();
		
		ТекущийЭлемент = КонтекстФормы.ТекущийЭлемент();
		
		Если ПерваяЗапись = 1 Тогда
			Для Номер = 1 По Метаданные.Справочник(КонтекстФормы.Вид()).Реквизит() Цикл
				мдРеквизит = Метаданные.Справочник(КонтекстФормы.Вид()).Реквизит(Номер);
				
				Если мдРеквизит.Периодический = 0 Тогда
					Продолжить;
				КонецЕсли; 
				
				Если (ТекущийЭлемент.ЭтоГруппа() = 0) И (мдРеквизит.Использование = "ДляГруппы") Тогда
					Продолжить;
				КонецЕсли;
				
				Если (ТекущийЭлемент.Этогруппа() = 1) И (мдРеквизит.Использование = "ДляЭлемента") Тогда
					Продолжить;
				КонецЕсли;
				
				Периодический.ИспользоватьОбъект(мдРеквизит.Идентификатор, ТекущийЭлемент);
				Периодический.ВыбратьЗначения();
				
				Пока Периодический.ПолучитьЗначение() = 1 Цикл
					Периодический.Удалить();
				КонецЦикла;
			КонецЦикла;
		КонецЕсли;
			
		Значения.ВыбратьСтроки();
		Пока Значения.ПолучитьСтроку() = 1 Цикл
			Если Значения.Пометка <> 2 Тогда // пометка выключена
				Продолжить;
			КонецЕсли;
			
			Если Периодический.ИспользоватьОбъект(Значения.Идентификатор, ТекущийЭлемент) = 1 Тогда
				ТипВид = ТипЗначенияСтр(Значения.НовоеЗначение); Длина = 0; Точность = 0;
				
				Если      (ТипВид = "Число") Тогда
					Длина    = СтрДлина(Значения.НовоеЗначение);
					Точность = Длина-Мин(Длина, Найти(Строка(Значения.НовоеЗначение)+".", "."));
					
				ИначеЕсли (ТипВид = "Строка") Тогда
					Длина    = СтрДлина(Значения.НовоеЗначение);

				ИначеЕсли (ТипВид = "Справочник") ИЛИ (ТипВид = "Документ") ИЛИ
				          (ТипВид = "Перечисление") ИЛИ (ТипВид = "Счет") ИЛИ (ТипВид = "Календарь") Тогда
					ТипВид   = ТипВид+"."+Значения.НовоеЗначение.Вид();
				КонецЕсли;
				
				Периодический.НазначитьТип(ТипВид, Длина, Точность);
				Периодический.Значение = Значения.НовоеЗначение;
				
				Если (Значения.СтараяДатаЗнач = '00.00.0000') И (ПерваяДата <> '00.00.0000') Тогда
					// Первые значения периодических реквизитов в некоторых 
					// случаях следует записывать на заведомо давнюю дату.
					Периодический.ДатаЗнач = ПерваяДата;
				Иначе
					Периодический.ДатаЗнач = НоваяДата;
				КонецЕсли;
				
				Периодический.Записать();
			КонецЕсли;
		КонецЦикла;
		
		ЗафиксироватьТранзакцию();
		
		// Признак успешной записи.
		Форма.Параметр = 1;
		Форма.Закрыть();
	
	Исключение
		Сообщить(ОписаниеОшибки(), "!");
	КонецПопытки;
	
КонецПроцедуры // ЗаписатьЗначения()

////////////////////////////////////////////////////////////////////////////////
// ПРЕДОПРЕДЕЛЕННЫЕ ПРОЦЕДУРЫ

//******************************************************************************
// Предопределенная процедура.
//
Процедура ПриОткрытии()
	
	Если ТипЗначенияСтр(Форма.Параметр) = "СписокЗначений" Тогда
		КонтекстФормы    = Форма.Параметр.Получить("КонтекстФормы");
		СписокРеквизитов = Форма.Параметр.Получить("СписокРеквизитов");
		НоваяДата        = Дата(Форма.Параметр.Получить("НоваяДата"));
		ПерваяДата       = Дата(Форма.Параметр.Получить("ПерваяДата"));
		СвязьРеквизитов  = Число(Форма.Параметр.Получить("СвязьРеквизитов"));
	КонецЕсли;
	
	Форма.Параметр = 0;
	
	Если (ТипЗначенияСтр(КонтекстФормы) <> "Справочник") И
	     (ТипЗначенияСтр(КонтекстФормы) <> "ГрупповойКонтекст") Тогда
		Сообщить("Не определен справочник для записи значений периодических реквизитов!", "I");
		СтатусВозврата(0);
		Возврат;
	КонецЕсли;
	
	Если ТипЗначенияСтр(СписокРеквизитов) <> "СписокЗначений" Тогда
		СписокРеквизитов = СоздатьОбъект("СписокЗначений");
	КонецЕсли;
	
	Если НоваяДата = '00.00.0000' Тогда // реквизит диалога - всегда дата
		НоваяДата  = КонтекстФормы.ИспользоватьДату();
	КонецЕсли;
	
	ЗаполнитьТаблицуРеквизитами();
	ЗаполнитьТаблицуЗначениями();
	
	Если СвязьРеквизитов = 0 Тогда
		ВключитьНовыеЗначения();
	Иначе
		ВключитьВыключитьВсеЗначения(2);
		Форма.кнВклНовые.Доступность(0);
	КонецЕсли;
	
	Активизировать("кнОк");
	
КонецПроцедуры // ПриОткрытии()

//******************************************************************************

Значения.НоваяКолонка("Идентификатор"    , "Строка");
Значения.НоваяКолонка("НовоеЗначение");
Значения.НоваяКолонка("СтароеЗначение");
Значения.НоваяКолонка("Пометка"          , "Число" , 1, 0, ""               , 4);
Значения.НоваяКолонка("Представление"    , "Строка",  ,  , "Реквизит"       , 33);
Значения.НоваяКолонка("НовоеЗначениеСтр" , "Строка",  ,  , "Новое значение" , 33);
Значения.НоваяКолонка("СтароеЗначениеСтр", "Строка",  ,  , "Старое значение", 33);
Значения.НоваяКолонка("СтараяДатаЗнач"   , "Дата"  ,  ,  , "Назначено"      , 14, "ДДДММГГГГ");

Значения.ВидимостьКолонки("Идентификатор, НовоеЗначение, СтароеЗначение", 0);
Значения.ВыводитьПиктограммы("Пометка", 1);
