////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ
//
Перем Структура;          // Таблица со структурой путеводителя.
Перем ВысотаТаблицы;      // Текущая высота таблицы Таблица.
Перем КолонкаОтступ;      // Номер колонки таблиц Таблица и Структура, в которй хранится отступ строки.
Перем КолонкаСсылка;      // Номер колонки таблиц Таблица и Структура, в которй хранится ссылка.
Перем КолонкаЗнак;        // Номер первой колонки области таблицы Таблица, в которй отображается знак "+", "-". 
Перем КолонкаТекст;       // Номер колонки таблицы Структура, в которй хранится текст.
Перем КолонкаРасшифровка; // Номер колонки таблицы Структура, в которй хранится расшифровка.
Перем ДлинаТекста;        // Количество колонок области таблица Таблица, в которой выводится текст.
Перем ЗнакПлюс;           // Символ, обозначающий свернутые строки.
Перем ЗнакМинус;          // Символ, обозначающий развернутые строки.
Перем Показатели, Статьи, СвязьСтатей, Бюджеты, ВариантыБюджетов;
Перем СписокЗагруженныхЭлементов;
Перем Бюджет;


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ МОДУЛЯ
//
//******************************************************************************
// ВывестиЗнак(СтрокаТаблицы, Знак)
//
// Параметры:
//
// Возвращаемое значение:
//  Нет.
//
// Вызывается из формул элементов диалога:
//
// Описание:
//  Выводит знак в указанную строку таблицы.
//  Форматирует ячейку.
//
Процедура ВывестиЗнак(СтрокаТаблицы, Знак)
	
	Приемник = Таблица.Область(СтрокаТаблицы, КолонкаЗнак);
	
	Приемник.Текст =                 Знак;
	Приемник.Расшифровка            (Знак, 1);
	Приемник.Шрифт                  ("Wingdings, 204");
	Приемник.РазмерШрифта           (14-КолонкаЗнак);
	Приемник.Полужирный             (1);
	Приемник.Курсив                 (0);
	Приемник.Подчеркнутый           (0);
	Приемник.ВертикальноеПоложение  (3);
	Приемник.ГоризонтальноеПоложение(2);
	Приемник.Контроль               (1);
	Приемник.РамкаСверху            (0);
	Приемник.РамкаСнизу             (0);
	Приемник.РамкаСлева             (0);
	Приемник.РамкаСправа            (0);
	Приемник.ЦветФона               (255, 255, 255);
	Приемник.ЦветРамки              (255, 255, 255);
	Приемник.ЦветТекста             (236,55,23);
	
КонецПроцедуры // ВывестиЗнак()

//******************************************************************************
// СкопироватьОбласть(Приемник, Источник, ГоризонтальноеПоложение = 1)
//
// Параметры:
//
// Возвращаемое значение:
//  Нет.
//
// Вызывается из формул элементов диалога:
//
// Описание:
//  Копирует одну область таблицы в другую.
//
Процедура СкопироватьОбласть(Приемник, Источник, ГоризонтальноеПоложение = 4)
	
	РежимРасшифровки = ?(ПустоеЗначение(Источник.Расшифровка()) = 1, 2, 0);
	
	Приемник.Текст =                 Источник.Текст;
	Приемник.Расшифровка            (Источник.Расшифровка(), РежимРасшифровки);
	Приемник.Шрифт                  (Источник.Шрифт());
	Приемник.РазмерШрифта           (Источник.РазмерШрифта());
	Приемник.Полужирный             (Источник.Полужирный());
	Приемник.Курсив                 (Источник.Курсив());
	Приемник.Подчеркнутый           (0);
	Приемник.ВертикальноеПоложение  (3);                       // ВертикальноеПоложение()=0
	Приемник.ГоризонтальноеПоложение(ГоризонтальноеПоложение); // ГоризонтальноеПоложение()=0
	Приемник.Контроль               (Источник.Контроль());
	Приемник.РамкаСверху            (Источник.РамкаСверху());
	Приемник.РамкаСнизу             (Источник.РамкаСнизу());
	Приемник.РамкаСлева             (Источник.РамкаСлева());
	Приемник.РамкаСправа            (Источник.РамкаСправа());
	Приемник.ЦветФона               (Источник.ЦветФона());
	Приемник.ЦветРамки              (Источник.ЦветРамки());
	Приемник.ЦветТекста             (Источник.ЦветТекста());
	
КонецПроцедуры // СкопироватьОбласть()

//******************************************************************************
// ОчиститьОбласть(Приемник)
//
// Параметры:
//
// Возвращаемое значение:
//  Нет.
//
// Вызывается из формул элементов диалога:
//
// Описание:
//  Очищает область таблицы.
//
Процедура ОчиститьОбласть(Приемник)
	
	Приемник.Текст =                 "";
	Приемник.Расшифровка            ("", 2);
	Приемник.РазмерШрифта           (8);
	Приемник.РамкаСверху            (0);
	Приемник.РамкаСнизу             (0);
	Приемник.РамкаСлева             (0);
	Приемник.РамкаСправа            (0);
	Приемник.ЦветФона               (255, 255, 255);
	Приемник.ЦветРамки              (255, 255, 255);
	Приемник.ЦветТекста             (0);
	
КонецПроцедуры // ОчиститьОбласть()

//******************************************************************************
// ВывестиСтроки(Знач СтрокаТаблицы, ОтступСтроки, Знач СтрокаСтруктуры, ОтступСтруктуры)
//
// Параметры:
//
// Возвращаемое значение:
//  Нет.
//
// Вызывается из формул элементов диалога:
//
// Описание:
//  Выводит строки таблицы Структура соответствующего уровня в таблицу Таблица.
//
Процедура ВывестиСтроки(Знач СтрокаТаблицы, ОтступСтроки, Знач СтрокаСтруктуры, ОтступСтруктуры)
	
	Для СтрокаСтруктуры = СтрокаСтруктуры По Структура.ВысотаТаблицы() Цикл
		ТекущийОтступ = Число(Структура.Область(СтрокаСтруктуры, КолонкаОтступ).Текст);
		
		Если ТекущийОтступ < ОтступСтруктуры Тогда
			Прервать;
		ИначеЕсли ОтступСтруктуры < ТекущийОтступ Тогда
			Продолжить;
		КонецЕсли;
		
		// Отступ строки.
		Приемник = Таблица.  Область(СтрокаТаблицы,   КолонкаОтступ);
		Приемник.Расшифровка(ОтступСтроки, 2);
		
		// Ссылка.
		Приемник = Таблица.  Область(СтрокаТаблицы,   КолонкаСсылка);
		Источник = Структура.Область(СтрокаСтруктуры, КолонкаСсылка);
		Приемник.Расшифровка(Число(Источник.Текст), 2);
		
		// Знак.
		Приемник = Таблица. Область(СтрокаТаблицы,    КолонкаЗнак,    СтрокаТаблицы, ОтступСтроки);
		Приемник.Объединить();
		Если ПустаяСтрока(Источник.Текст) = 0 Тогда
			ВывестиЗнак(СтрокаТаблицы, ЗнакПлюс);
		Иначе
			ВывестиЗнак(СтрокаТаблицы, "");
		КонецЕсли;
		
		// Текст.
		Приемник = Таблица.  Область(СтрокаТаблицы,   ОтступСтроки+1, СтрокаТаблицы, ОтступСтроки+1+ДлинаТекста);
		Источник = Структура.Область(СтрокаСтруктуры, КолонкаТекст);
		СкопироватьОбласть(Приемник, Источник);
		Приемник.Объединить();
		Приемник.РазмерШрифта(14-ТекущийОтступ);
		Приемник.Полужирный(1);
		Если Источник.Подчеркнутый()=0 тогда 
			Приемник.РазмерШрифта(10); 
			Приемник.Полужирный(0);
			Приемник.Курсив(1);
		КонецЕсли;
		
		// Расшифровка.
		Источник = Структура.Область(СтрокаСтруктуры, КолонкаРасшифровка);
		Если ПустаяСтрока(Источник.Текст) = 0 Тогда
			Приемник.Расшифровка(Источник.Текст, 0);
		КонецЕсли;
		
		СтрокаТаблицы = СтрокаТаблицы+1;
	КонецЦикла;
	
КонецПроцедуры // ВывестиСтроки()

//******************************************************************************
// ОчиститьСтроку(СтрокаТаблицы)
//
// Параметры:
//
// Возвращаемое значение:
//  Нет.
//
// Вызывается из формул элементов диалога:
//
// Описание:
//  Очтищает строку таблицы Таблица.
//
Процедура ОчиститьСтроку(СтрокаТаблицы)
	
	// Отступ строки, которая очищается.
	ОтступСтроки = Таблица.Область(СтрокаТаблицы, КолонкаОтступ).Расшифровка();
	
	// Отступ и ссылка.
	Приемник = Таблица.Область(СтрокаТаблицы, КолонкаОтступ, СтрокаТаблицы, КолонкаСсылка);
	Приемник.Расшифровка("", 2);
	
	// Знак и текст.
	Приемник = Таблица.Область(СтрокаТаблицы, КолонкаЗнак, СтрокаТаблицы, ОтступСтроки+1);
	ОчиститьОбласть(Приемник);
	
КонецПроцедуры // ОчиститьСтроку()

//******************************************************************************
// СдвинутьСтроку(СтрокаТаблицы, Сдвиг)
//
// Параметры:
//
// Возвращаемое значение:
//  Нет.
//
// Вызывается из формул элементов диалога:
//
// Описание:
//  Сдвигает строку таблицы Таблица на указанное количество позиций.
//  Очищает исходную строку.
//
Процедура СдвинутьСтроку(СтрокаТаблицы, Сдвиг)
	
	// Отступ строки, которая сдвигается.
	ОтступСтроки = Таблица.Область(СтрокаТаблицы, КолонкаОтступ).Расшифровка();
	
	// Отступ.
	Приемник = Таблица.Область(СтрокаТаблицы+Сдвиг, КолонкаОтступ);
	Источник = Таблица.Область(СтрокаТаблицы,       КолонкаОтступ);
	Приемник.Расшифровка(Источник.Расшифровка(), 2);
	
	// Ссылка.
	Приемник = Таблица.Область(СтрокаТаблицы+Сдвиг, КолонкаСсылка);
	Источник = Таблица.Область(СтрокаТаблицы,       КолонкаСсылка);
	Приемник.Расшифровка(Источник.Расшифровка(), 2);
	
	// Знак.
	Приемник = Таблица.Область(СтрокаТаблицы+Сдвиг, КолонкаЗнак,    СтрокаТаблицы+Сдвиг, ОтступСтроки);
	Источник = Таблица.Область(СтрокаТаблицы,       КолонкаЗнак);
	СкопироватьОбласть(Приемник, Источник, 2);
	Приемник.Объединить();
	
	// Текст.
	Приемник = Таблица.Область(СтрокаТаблицы+Сдвиг, ОтступСтроки+1, СтрокаТаблицы+Сдвиг, ОтступСтроки+1+ДлинаТекста);
	Источник = Таблица.Область(СтрокаТаблицы,       ОтступСтроки+1);
	СкопироватьОбласть(Приемник, Источник);
	Приемник.Объединить();
	
	ОчиститьСтроку(СтрокаТаблицы);
	
КонецПроцедуры // СдвинутьСтроку()

//******************************************************************************
// ПосчитатьСтрокиСтруктуры(Знач СтрокаСтруктуры, ОтступСтруктуры)
//
// Параметры:
//
// Возвращаемое значение:
//  Здесь описывается возвращаемое значение.
//
// Вызывается из формул элементов диалога:
//
// Описание:
//  Подсчитывает количество строк, на которые надо раздвинуть таблицу Таблица.
//
Функция ПосчитатьСтрокиСтруктуры(Знач СтрокаСтруктуры, ОтступСтруктуры)
	
	Сдвиг = 0;
	
	Для СтрокаСтруктуры = СтрокаСтруктуры По Структура.ВысотаТаблицы() Цикл
		ТекущийОтступ = Число(Структура.Область(СтрокаСтруктуры, КолонкаОтступ).Текст);
		
		Если ТекущийОтступ < ОтступСтруктуры Тогда
			Прервать;
		ИначеЕсли ОтступСтруктуры < ТекущийОтступ Тогда
			Продолжить;
		КонецЕсли;
		
		Сдвиг = Сдвиг+1;
	КонецЦикла;
	
	Возврат Сдвиг;
	
КонецФункции // ПосчитатьСтрокиСтруктуры()

//******************************************************************************
// РазвернутьСтроку(СтрокаТаблицы)
//
// Параметры:
//
// Возвращаемое значение:
//  Нет.
//
// Вызывается из формул элементов диалога:
//
// Описание:
//  Разворачивает строку таблицы Таблица.
//
Процедура РазвернутьСтроку(СтрокаТаблицы)
	
	// Строка структуры, которая разворачивается.
	СтрокаСтруктуры  = Таблица.Область(СтрокаТаблицы, КолонкаСсылка).Расшифровка();
	
	// Отступ таблицы, который разворачивается.
	ОтступСтроки     = Таблица.Область(СтрокаТаблицы, КолонкаОтступ).Расшифровка();
	
	// Отступ структуры, который разворачивается.
	ОтступСтруктуры = Число(Структура.Область(СтрокаСтруктуры, КолонкаОтступ).Текст);
	
	// Количество строк, на которые надо развинуть таблицу.
	Сдвиг = ПосчитатьСтрокиСтруктуры(СтрокаСтруктуры+1, ОтступСтруктуры+1);
	
	Если 0 < Сдвиг Тогда
		// Перенос строк таблицы, начиная с последней.
		Для Стр = -ВысотаТаблицы По -(СтрокаТаблицы+1) Цикл
			СдвинутьСтроку(-Стр, Сдвиг);
		КонецЦикла;
		
		// Новая высота таблицы.
		ВысотаТаблицы = ВысотаТаблицы+Сдвиг;
		
		// Вывод строк структуры нужного уровня.
		ВывестиСтроки(СтрокаТаблицы+1, ОтступСтроки+1, СтрокаСтруктуры+1, ОтступСтруктуры+1);
	КонецЕсли;
	
	// Знак.
	ВывестиЗнак(СтрокаТаблицы, ЗнакМинус);
	
	Таблица.Показать();
	
КонецПроцедуры // РазвернутьСтроку()

//******************************************************************************
// ПосчитатьСтрокиТаблицы(Знач СтрокаТаблицы, ОтступСтроки)
//
// Параметры:
//
// Возвращаемое значение:
//  Здесь описывается возвращаемое значение.
//
// Вызывается из формул элементов диалога:
//
// Описание:
//  Подсчитывает количество строк, на которые надо сдвинуть таблицу Таблица.
//
Функция ПосчитатьСтрокиТаблицы(Знач СтрокаТаблицы, ОтступСтроки)
	
	Сдвиг = 0;
	
	Для СтрокаТаблицы = СтрокаТаблицы По ВысотаТаблицы Цикл
		ТекущийОтступ = Таблица.Область(СтрокаТаблицы, КолонкаОтступ).Расшифровка();
		
		Если ТекущийОтступ < ОтступСтроки Тогда
			Прервать;
		КонецЕсли;
		
		Сдвиг = Сдвиг+1;
	КонецЦикла;
	
	Возврат Сдвиг;
	
КонецФункции // ПосчитатьСтрокиТаблицы()

//******************************************************************************
// СвернутьСтроку(СтрокаТаблицы)
//
// Параметры:
//
// Возвращаемое значение:
//  Нет.
//
// Вызывается из формул элементов диалога:
//
// Описание:
//  Сворачивает строку таблицы Таблица.
//
Процедура СвернутьСтроку(СтрокаТаблицы)
	
	// Отступ таблицы, который сворачивается.
	ОтступСтроки = Таблица.Область(СтрокаТаблицы, КолонкаОтступ).Расшифровка();
	
	// Количество строк, на которые надо сдвинуть таблицу.
	Сдвиг = ПосчитатьСтрокиТаблицы(СтрокаТаблицы+1, ОтступСтроки+1);
	
	Если 0 < Сдвиг Тогда
		// Очистка строк таблицы
		Для Стр = СтрокаТаблицы+1 По СтрокаТаблицы+Сдвиг Цикл
			ОчиститьСтроку(Стр);
		КонецЦикла;
		
		// Перенос строк таблицы.
		Для Стр = СтрокаТаблицы+1+Сдвиг По ВысотаТаблицы Цикл
			СдвинутьСтроку(Стр, -Сдвиг);
		КонецЦикла;
		
		// Новая высота таблицы.
		ВысотаТаблицы = ВысотаТаблицы-Сдвиг;
	КонецЕсли;
	
	// Знак.
	ВывестиЗнак(СтрокаТаблицы, ЗнакПлюс);
	
	Таблица.Показать();
	
КонецПроцедуры // СвернутьСтроку()

//******************************************************************************
//	СообщитьОбОшибке(Справочник, Действие)
//
//	Параметры:
//	Справочник - элемент справочника в который нужно записать или удалить.
//	Действие - "записать" или "удалить".
//
//	Описание:  

Процедура СообщитьОбОшибке(Справочник, Действие)
	
	Сообщить("Не удалось " + Действие + " элемент """ + 
	СокрЛП(Справочник.Наименование) + """ " + 
	" справочника """ + Справочник.ПредставлениеВида() + """:" + РазделительСтрок + 
	ОписаниеОшибки());
	
КонецПроцедуры // СообщитьОбОшибке()

//******************************************************************************
//	УдалитьЭлементыСправочника(ИДСправочника, ГруппаСправочника = "")
//
//	Параметры:
//	ИДСправочника (строка) - идентификатор справочника.
//	ГруппаСправочника (Справочник) - Группа справочника в которой удаляются элементы .
//
//	Описание:
//	Проверяет наличие ссылок на элементы и группы справочника, все элементы не имеющие
//	ссылок из других объектов удаляются, остальные помечаются на удаление.

Процедура УдалитьЭлементыСправочника(ИДСправочника, ГруппаСправочника = "")
	
	Состояние("Удаляются элементы справочника """ + Метаданные.Справочник(ИДСправочника)+"""");
	
	СписокОбъектов = СоздатьОбъект("СписокЗначений");
	ТаблицаСсылок  = СоздатьОбъект("ТаблицаЗначений");
	
	Справочник = СоздатьОбъект("Справочник." + ИДСправочника);
	Если ПустоеЗначение(ГруппаСправочника) = 1 Тогда
		ГруппаСправочника = ПолучитьПустоеЗначение("Справочник." + ИДСправочника);
	КонецЕсли;
	
	Если ГруппаСправочника.Выбран() = 1 Тогда
		Если Метаданные.Справочник(ИДСправочника).Владелец.Выбран() = 1 Тогда
			Справочник.ИспользоватьВладельца(ГруппаСправочника.Владелец);
		КонецЕсли;
	КонецЕсли;
	
	Справочник.ИспользоватьРодителя(ГруппаСправочника);
	Справочник.ВыбратьЭлементы(ГруппаСправочника.Выбран());
	Пока Справочник.ПолучитьЭлемент(1 - ГруппаСправочника.Выбран()) = 1 Цикл
		Если Справочник.ЭтоГруппа() = 1 Тогда
			УдалитьЭлементыСправочника(ИДСправочника, Справочник.ТекущийЭлемент());
		КонецЕсли;
		СписокОбъектов.ДобавитьЗначение(Справочник.ТекущийЭлемент());
	КонецЦикла;
	
	Если СписокОбъектов.РазмерСписка() > 0 Тогда
		
		НайтиСсылки(СписокОбъектов, ТаблицаСсылок);
		
		Состояние("Удаляются элементы справочника """ + Метаданные.Справочник(ИДСправочника)+"""");
		
		Справочник.ВыбратьЭлементы(ГруппаСправочника.Выбран());
		Пока Справочник.ПолучитьЭлемент(1 - ГруппаСправочника.Выбран()) = 1 Цикл
			Попытка
				Если (ТаблицаСсылок.НайтиЗначение(Справочник.ТекущийЭлемент(),,1) = 0) Тогда
					Справочник.Удалить(1);
				Иначе
					Справочник.Удалить(0);
				КонецЕсли;
			Исключение
				СообщитьОбОшибке(Справочник, "удалить");
			КонецПопытки;
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры // УдалитьЭлементыСправочника()

//******************************************************************************
//	ПолучитьЯчейку(Таблица, Стр, Кол)
//
//	Параметры:
//	Таблица (Таблица формы) - таблица или секция формы из которой надо получить значение ячейки.
//	Стр (число) - Номер строки ячейки таблицы формы или секции.
//	Кол (число) - Номер колонки ячейки таблицы формы или секции.
//
//	Описание:  
//	Возвращает текстовое значение из ячейки таблицы формы или секции таблицы формы 
//	по переданным номерам строки и колонки.

Функция ПолучитьЯчейку(Таблица, Стр, Кол)
	
	Возврат СокрЛП(Таблица.Область(Стр, Кол, Стр, Кол).Текст);
	
КонецФункции // ПолучитьЯчейку()

//******************************************************************************
//	НовыйКод(Справочник,Код)
//
//	Описание:
//	Возвращает новый код для существующего элемента справочника при автоматической 
//  загрузке структуры из списка

Функция НовыйКод(Справочник,Код,Сдвиг)
	
	СвободныйКод=СокрЛП(Строка(Сдвиг+Число(Код)));
	
	Если Справочник.НайтиПоКоду(СвободныйКод,0)=1 тогда
		СвободныйКод=НовыйКод(Справочник,Справочник.Код,Сдвиг+1);
	КонецЕсли;
	
	Возврат СвободныйКод;

КонецФункции // НовыйКод()

//******************************************************************************
//	ПолучитьЯчейку(Таблица, Стр, Кол)
//
//	Параметры:
//	Таблица (Таблица формы) - таблица или секция формы из которой надо получить значение ячейки.
//	Стр (число) - Номер строки ячейки таблицы формы или секции.
//	Кол (число) - Номер колонки ячейки таблицы формы или секции.
//
//	Описание:  
//	Возвращает текстовое значение из ячейки таблицы формы или секции таблицы формы 
//	по переданным номерам строки и колонки.

Функция ПолучитьЯчейкуПравил(Таблица, Стр, Кол)
	
	Возврат СокрЛП(Таблица.Область(Стр, Кол, Стр, Кол).Текст);
	
КонецФункции // ПолучитьЯчейкуПравил()

//******************************************************************************
//	ЗагрузитьПравила()
//
//
//	Описание:
//  Загружает правила отбора итогов и оборотов 
//  для справочников "Показатели" и "Статьи"

Процедура ЗагрузитьПравила()
	
	СпрОтбор=СоздатьОбъект("Справочник.ФП_ОтборДанных");
	СпрСправочникФП=СоздатьОбъект("Справочник.ФП_Справочники");
	СпрВыгрузкаФП=СоздатьОбъект("Справочник.ФП_ВыгрузкаДанных");
	
	ВалютаБазовая="";
	ВалютаРасчетная="";
	СуммаФакт="";
	Примечание="";
	КолонкаРасчетаСуммы=8;
	
	Если СпрСправочникФП.НайтиПоНаименованию("Финансовые показатели")=0 тогда
		
		Предупреждение("Не загружены справочники аналитики фин. планирования!");
		Возврат;
	
	Иначе 
		
		Показатели=СпрСправочникФП.ТекущийЭлемент();
		
	КонецЕсли;
	
	СпрСправочникФП.НайтиПоНаименованию("Статьи оборотов");
	Статьи=СпрСправочникФП.ТекущийЭлемент();
	
	СпрСправочникФП.НайтиПоНаименованию("Проекты");
	Проекты=СпрСправочникФП.ТекущийЭлемент();
	
	СпрСправочникФП.НайтиПоНаименованию("Варианты бюджетов");
	ВариантыБюджетов=СпрСправочникФП.ТекущийЭлемент();

	СпрСправочникФП.НайтиПоНаименованию("Подразделения");
	Подразделения=СпрСправочникФП.ТекущийЭлемент();

	СпрСправочникФП.НайтиПоНаименованию("Валюты");
	Валюты=СпрСправочникФП.ТекущийЭлемент();
		
	СписокОтбора=СоздатьОбъект("СписокЗначений");
	ТекстОтбора="";
	
	Если (Метаданные.ПланСчетов()>0) и (Метаданные.Регистр()>0) тогда
		
		Если Найти(Метаданные.Идентификатор,"Производство+Услуги+Бухгалтерия")=0 тогда // Комплексная конфигурация
			
			Меню=СоздатьОбъект("СписокЗначений");
			Меню.ДобавитьЗначение("Все","Настройка отбора по оперативным и бухгалтерским данным");
			Меню.ДобавитьЗначение("Опер","Настройка отбора по оперативным данным");
			Меню.ДобавитьЗначение("Бухг","Настройка отбора по бухгалтерским данным"); 
			
			Если Меню.ВыбратьЗначение(ТекстОтбора,,,10,1)=0 Тогда
				Возврат;
			Иначе
				
				Если ТекстОтбора="Опер" тогда
					СписокОтбора.ДобавитьЗначение("Опер");
				ИначеЕсли  ТекстОтбора="Бухг" тогда
					СписокОтбора.ДобавитьЗначение("Бухг");
				Иначе
					СписокОтбора.ДобавитьЗначение("Опер");
					СписокОтбора.ДобавитьЗначение("Бухг");
				КонецЕсли; 
				
				КолЗагрузок=2;
				ТаблицаОтбора="ОтборКомпл";
				
			КонецЕсли;
			
		Иначе
			
			СписокОтбора.ДобавитьЗначение("Бухг");
			КолЗагрузок=1;
			ТаблицаОтбора="ОтборПУБ";
			
		КонецЕсли;
		
	ИначеЕсли Метаданные.ПланСчетов()>0 тогда
		
		Если Найти(Метаданные.Идентификатор,"Упрощенная система налогообложения")>0 тогда
			
			СписокОтбора.ДобавитьЗначение("БухгУСН");
			КолЗагрузок=1;
			ТаблицаОтбора="ОтборБухУСН";
			
		Иначе
			
			СписокОтбора.ДобавитьЗначение("Бухг");
			КолЗагрузок=1;
			ТаблицаОтбора="ОтборБух";
			
		КонецЕсли;
		

	ИначеЕсли Метаданные.Регистр()>0 тогда
		
		Если Найти(Метаданные.Идентификатор,"Учет и отчетность предпринимателя")>0 тогда
			
			СписокОтбора.ДобавитьЗначение("ПБОЮЛ"); 
			КолЗагрузок=1;
			ТаблицаОтбора="ОтборПБОЮЛ";
			
		ИначеЕсли Найти(Метаданные.Идентификатор,"1С:Аспект-Ювелир")>0 тогда
			
			СписокОтбора.ДобавитьЗначение("Аспект"); 
			КолЗагрузок=1;
			ТаблицаОтбора="ОтборАспект";
			
		Иначе
			
			СписокОтбора.ДобавитьЗначение("Опер"); 
			КолЗагрузок=1;
			ТаблицаОтбора="ОтборОпер";
			
		КонецЕсли;
		
	Иначе
		
		Предупреждение("В конфигурации нет источников для выгрузки!");
		СтатусВозврата(0);Возврат;
		
	КонецЕсли;
		 
	Для ОтборПравил=1 по СписокОтбора.РазмерСписка() цикл 
		
		АналитикаФП = СоздатьОбъект("Таблица");
		ОтборФП = СоздатьОбъект("Таблица"); 
		
		Если СписокОтбора.ПолучитьЗначение(ОтборПравил)="Бухг" тогда
						
			АналитикаФП.ИсходнаяТаблица("АналитикаФПБух");
			
		ИначеЕсли СписокОтбора.ПолучитьЗначение(ОтборПравил)="БухгУСН" тогда	
			
			АналитикаФП.ИсходнаяТаблица("АналитикаФПБухУСН");
		
		ИначеЕсли СписокОтбора.ПолучитьЗначение(ОтборПравил)="ПБОЮЛ" тогда	
			
			АналитикаФП.ИсходнаяТаблица("АналитикаФППБОЮЛ");
			
		ИначеЕсли СписокОтбора.ПолучитьЗначение(ОтборПравил)="Аспект" тогда	
			
			АналитикаФП.ИсходнаяТаблица("АналитикаФПАспект");
			
		ИначеЕсли СписокОтбора.ПолучитьЗначение(ОтборПравил)="Опер" тогда 
			
			АналитикаФП.ИсходнаяТаблица("АналитикаОпер");
			
			Меню=СоздатьОбъект("СписокЗначений");
			Меню.ДобавитьЗначение(8,"Остатки и движение ТМЦ выводятся без учета НДС и НП");
			Меню.ДобавитьЗначение(13,"Остатки и движение ТМЦ выводятся с учетом НДС и НП");
			Если Меню.ВыбратьЗначение(КолонкаРасчетаСуммы,,,10,1)=0 Тогда
				КолонкаРасчетаСуммы=8;
			КонецЕсли;
			
		КонецЕсли;
		
	ОтборФП.ИсходнаяТаблица(ТаблицаОтбора);		
	ТекстОтбора=?(КолЗагрузок=2," "+СписокОтбора.ПолучитьЗначение(ОтборПравил),"");
	
	АналитикаФП.ВывестиСекцию("Список");
	ОтборФП.ВывестиСекцию("Список");
	
	СпрСправочникФП.ИспользоватьРодителя(Валюты,0);
	СпрСправочникФП.ВыбратьЭлементы(1);
	Пока СпрСправочникФП.ПолучитьЭлемент(1) = 1 Цикл 
		Если СпрСправочникФП.Валюта.Выбран() = 1 Тогда
			Если (СпрСправочникФП.Валюта.Курс.Получить(РабочаяДата()) = 1) и 
			(СпрСправочникФП.Валюта.Кратность.Получить(РабочаяДата()) = 1) Тогда
				ВалютаБазовая=СпрСправочникФП.ТекущийЭлемент();
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Если СпрВыгрузкаФП.НайтиПоНаименованию("Остатки"+ТекстОтбора,0)=0 тогда 
		СпрВыгрузкаФП.ИспользоватьРодителя(ПолучитьПустоеЗначение("Справочник.ФП_ВыгрузкаДанных"));
		СпрВыгрузкаФП.НоваяГруппа();
		СпрВыгрузкаФП.Наименование="Остатки"+ТекстОтбора;
		СпрВыгрузкаФП.Записать();
	КонецЕсли;
	
	ГруппаОстатков=СпрВыгрузкаФП.ТекущийЭлемент();
	
	Если СпрВыгрузкаФП.НайтиПоНаименованию("Обороты"+ТекстОтбора,0)=0 тогда 
		СпрВыгрузкаФП.ИспользоватьРодителя(ПолучитьПустоеЗначение("Справочник.ФП_ВыгрузкаДанных"));
		СпрВыгрузкаФП.НоваяГруппа();
		СпрВыгрузкаФП.Наименование="Обороты"+ТекстОтбора;
		СпрВыгрузкаФП.Записать();
	КонецЕсли; 
	
	ГруппаОборотов=СпрВыгрузкаФП.ТекущийЭлемент();
	
	Для Индекс=1 по АналитикаФП.ВысотаТаблицы() цикл 
		
		СпрСправочникФП.ИспользоватьРодителя(ПолучитьПустоеЗначение("Справочник.ФП_Справочники"));
		
		Наименование=ПолучитьЯчейкуПравил(АналитикаФП, Индекс, 2)+ТекстОтбора; 
		Код=ПолучитьЯчейкуПравил(АналитикаФП, Индекс, 1);
		
		Если СпрВыгрузкаФП.НайтиПоНаименованию(Наименование,0,1)=0 тогда
			Если СокрЛП(ПолучитьЯчейкуПравил(АналитикаФП, Индекс, 3))<>"" тогда
				
				СпрСправочникФП.ИспользоватьРодителя(Показатели);
				Если СпрСправочникФП.НайтиПоНаименованию(СокрЛП(ПолучитьЯчейкуПравил(АналитикаФП, Индекс, 3)),0,1)=0 тогда
					Сообщить("Не найден финансовый показатель с кодом "+СокрЛП(ПолучитьЯчейкуПравил(АналитикаФП, Индекс, 3)));
					Продолжить;
				Иначе
					СпрВыгрузкаФП.ИспользоватьРодителя(ГруппаОстатков);
					СпрВыгрузкаФП.Новый();
					СпрВыгрузкаФП.Показатель=СпрСправочникФП.ТекущийЭлемент();
				КонецЕсли;
			ИначеЕсли СокрЛП(ПолучитьЯчейкуПравил(АналитикаФП, Индекс, 4))<>"" тогда
				СпрСправочникФП.ИспользоватьРодителя(Статьи);
				Если СпрСправочникФП.НайтиПоНаименованию(СокрЛП(ПолучитьЯчейкуПравил(АналитикаФП, Индекс, 4)),0,1)=0 тогда
					Сообщить("Не найдена статья оборотов с кодом "+СокрЛП(ПолучитьЯчейкуПравил(АналитикаФП, Индекс, 4)));
					Продолжить;
				Иначе
					СпрВыгрузкаФП.ИспользоватьРодителя(ГруппаОборотов);
					СпрВыгрузкаФП.Новый();
					СпрВыгрузкаФП.Статья=СпрСправочникФП.ТекущийЭлемент(); 
					СпрВыгрузкаФП.ПоказательДебет=СпрСправочникФП.ТекущийЭлемент().ПоказательДебет; 
					СпрВыгрузкаФП.ПоказательКредит=СпрСправочникФП.ТекущийЭлемент().ПоказательКредит; 
				КонецЕсли;
			КонецЕсли;
			
			СпрВыгрузкаФП.Наименование=Наименование;
			СпрВыгрузкаФП.Код=Код;
			
			Если СокрЛП(ПолучитьЯчейкуПравил(АналитикаФП, Индекс, 9))<>"" тогда
				СпрСправочникФП.ИспользоватьРодителя(Подразделения);
				Если СпрСправочникФП.НайтиПоНаименованию(СокрЛП(ПолучитьЯчейкуПравил(АналитикаФП, Индекс, 9)),0,1)=0 тогда
					Сообщить("Не найдено подразделение с кодом "+СокрЛП(ПолучитьЯчейкуПравил(АналитикаФП, Индекс, 9)));
				Иначе
					СпрВыгрузкаФП.Подразделение=СпрСправочникФП.ТекущийЭлемент();
				КонецЕсли;
			КонецЕсли; 
			
			Если СокрЛП(ПолучитьЯчейкуПравил(АналитикаФП, Индекс, 10))<>"" тогда
				СпрСправочникФП.ИспользоватьРодителя(Проекты);
				Если СпрСправочникФП.НайтиПоНаименованию(СокрЛП(ПолучитьЯчейкуПравил(АналитикаФП, Индекс, 10)),0,1)=0 тогда
					Сообщить("Не найден проект с кодом "+СокрЛП(ПолучитьЯчейкуПравил(АналитикаФП, Индекс, 10)));
				Иначе
					СпрВыгрузкаФП.Проект=СпрСправочникФП.ТекущийЭлемент();
				КонецЕсли;
			КонецЕсли; 
			
			СпрВыгрузкаФП.ВидОбъекта=СокрЛП(ПолучитьЯчейкуПравил(АналитикаФП, Индекс, 7));
			
			Если СокрЛП(ПолучитьЯчейкуПравил(АналитикаФП, Индекс, 5))<>"" тогда
				СпрСправочникФП.ИспользоватьРодителя(Валюты);
				Если СпрСправочникФП.НайтиПоНаименованию(СокрЛП(ПолучитьЯчейкуПравил(АналитикаФП, Индекс, 5)),0)=0 тогда
					Сообщить("Не найдена валюта с кодом "+СокрЛП(ПолучитьЯчейкуПравил(АналитикаФП, Индекс, 5)));
				Иначе
					СпрВыгрузкаФП.ВалютаБазовая=СпрСправочникФП.ТекущийЭлемент();
				КонецЕсли;;
			КонецЕсли; 
			
			СпрВыгрузкаФП.ВалютаРасчетная=СокрЛП(ПолучитьЯчейкуПравил(АналитикаФП, Индекс, 6));
			СпрВыгрузкаФП.СуммаФакт=СокрЛП(ПолучитьЯчейкуПравил(АналитикаФП, Индекс, КолонкаРасчетаСуммы)); 
			СпрВыгрузкаФП.Примечание=СокрЛП(ПолучитьЯчейкуПравил(АналитикаФП, Индекс, 11));
			СпрВыгрузкаФП.Коэффициент=Число(СокрЛП(ПолучитьЯчейкуПравил(АналитикаФП, Индекс, 12)));
			СпрВыгрузкаФП.Записать();
			
		КонецЕсли;
		
		СпрОтбор.ИспользоватьВладельца(СпрВыгрузкаФП.ТекущийЭлемент());
		
	    Попытка
		
		Для ИндексОтбор=1 по ОтборФП.ВысотаТаблицы() цикл
			
				Если СокрЛП(ПолучитьЯчейкуПравил(ОтборФП, ИндексОтбор, 1))=СпрВыгрузкаФП.ТекущийЭлемент().Код тогда
					СпрОтбор.Новый();
					СпрОтбор.Атрибут=СокрЛП(ПолучитьЯчейкуПравил(ОтборФП, ИндексОтбор, 2));
					
					ВидОбъекта = СтрЗаменить(СтрЗаменить(СпрВыгрузкаФП.ТекущийЭлемент().ВидОбъекта,"Регистр.",""),"ПланСчетов.",".");
					Атрибут = СпрОтбор.Атрибут;
					Если Найти(СпрВыгрузкаФП.ТекущийЭлемент().ВидОбъекта,"Регистр.") > 0 Тогда
						Если СокрП(Атрибут) = "ТекущийДокумент" Тогда
							СпрОтбор.НазначитьТип("Значение", "Документ");
						ИначеЕсли Найти(Атрибут,".Вид()") > 0 Тогда
							СпрОтбор.НазначитьТип("Значение", "Строка", 100);
						Иначе
							Если Метаданные.Регистр(ВидОбъекта).Измерение(СокрП(Атрибут)).Выбран() = 1 Тогда
								МДАтрибут = Метаданные.Регистр(ВидОбъекта).Измерение(СокрП(Атрибут));
							Иначе
								МДАтрибут = Метаданные.Регистр(ВидОбъекта).Реквизит(СокрП(Атрибут));
							КонецЕсли;
							СпрОтбор.НазначитьТип("Значение", МДАтрибут.Тип + ?(ПустоеЗначение(МДАтрибут.Вид) = 0, "." + МДАтрибут.Вид,""), МДАтрибут.Длина, МДАтрибут.Точность);
						КонецЕсли;
					Иначе
						СпрОтбор.НазначитьТип("Значение",ТипЗначенияСтр(ЗначениеИзСтрокиВнутр(СокрЛП(ПолучитьЯчейкуПравил(ОтборФП, ИндексОтбор, 3))))+"."+ЗначениеИзСтрокиВнутр(СокрЛП(ПолучитьЯчейкуПравил(ОтборФП, ИндексОтбор, 3))).Вид());
					КонецЕсли;
					СпрОтбор.Значение=ЗначениеИзСтрокиВнутр(СокрЛП(ПолучитьЯчейкуПравил(ОтборФП, ИндексОтбор, 3)));
					СпрОтбор.ДополнительныеУсловия=СокрЛП(ПолучитьЯчейкуПравил(ОтборФП, ИндексОтбор, 4));
					СпрОтбор.Представление=СокрЛП(ПолучитьЯчейкуПравил(ОтборФП, ИндексОтбор, 5));
					СпрОтбор.Операнд=СокрЛП(ПолучитьЯчейкуПравил(ОтборФП, ИндексОтбор, 6));
					СпрОтбор.Записать();
				КонецЕсли;
				
			КонецЦикла;
			
			Сообщить("Настроены правила отбора данных для "+СокрЛП(СпрВыгрузкаФП.Наименование),".");
			
		Исключение
			
			Сообщить("Ошибка при настройке правил отбора для "+СпрВыгрузкаФП.ТекущийЭлемент().Наименование+".
			|Структура метаданных отличается от типовой.","!");
			
		КонецПопытки
		
	КонецЦикла;
	
КонецЦикла;

	
		Сообщить(РазделительСтрок+" Загрузка правил отбора завершена. 
		|Рекомендуется просмотреть и при необходимости отредактировать
		|элементы справочников отбора данных вручную.",".");
	
КонецПроцедуры // ЗагрузитьПравила()

//******************************************************************************
// ДействияЗагрузка()
//
// Параметры:
//
// Возвращаемое значение:
//  Нет.
//
// Вызывается из формул элементов диалога:
//
// Описание:
//  Выполняет действия по выбору пользователя

Функция ДействияЗагрузка()
	
	Перем Действие;
	
	Расшифровка=СоздатьОбъект("СписокЗначений");
	Меню=СоздатьОбъект("СписокЗначений");
	Меню.ДобавитьЗначение("Открыть","Открыть справочник ""Настройка выгрузки данных для планирования""");
	Меню.ДобавитьЗначение("Заполнить","Заполнить правила отбора данных автоматически (только для типовых конфигураций)");
	Если Меню.ВыбратьЗначение(Действие,,,10,1)>0 Тогда
		
		Если Действие="Открыть" тогда
			ОткрытьФорму("Справочник.ФП_ВыгрузкаДанных");
		ИначеЕсли Действие="Заполнить" тогда
			ЗагрузитьПравила(); 
			ОткрытьФорму("Справочник.ФП_ВыгрузкаДанных");
		КонецЕсли;
	КонецЕсли;
	
	Возврат 0;
	
КонецФункции // ДействияЗагрузка()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ РАСШИФРОВКИ
//
//******************************************************************************
// Расшифровка(СтрокаТаблицы, КолонкаТаблицы, Расшифровка)
//
// Параметры:
//
// Возвращаемое значение:
//  Нет.
//
// Вызывается из формул элементов диалога:
//
// Описание:
//  Здесь описывается процедура.
//
Процедура Расшифровка(СтрокаТаблицы, КолонкаТаблицы, Расшифровка)
	
Если Расшифровка = "2" Тогда ОткрытьФорму("Справочник.ФП_Справочники");
ИначеЕсли Расшифровка = "3" Тогда ОткрытьФорму("Справочник.ФП_ВыгрузкаДанных");
ИначеЕсли Расшифровка = "4" Тогда ДействияЗагрузка();
ИначеЕсли Расшифровка = "5" Тогда ОткрытьФорму("Справочник.ФП_ОтборДанных");
ИначеЕсли Расшифровка = "6" Тогда ОткрытьФорму("Обработка.ФП_ВыгрузкаДанных");
КонецЕсли;

КонецПроцедуры // Расшифровка()

////////////////////////////////////////////////////////////////////////////////
// ПРЕДОПРЕДЕЛЕННЫЕ ПРОЦЕДУРЫ
//
//******************************************************************************
// Предопределенная процедура.
//
Процедура ПриОткрытии()
	
	// Таблица Таблица.
	Таблица.ИсходнаяТаблица("Таблица");
	Таблица.Вывести();
	Таблица.Опции(0, 0, 0, 0, "Справочник функций", "Справочник функций");
	
	// Таблица Структура.
	Если ТипЗначенияСтр(Форма.Параметр) = "Таблица" Тогда
		Структура = Форма.Параметр;
	Иначе
		Структура = СоздатьОбъект("Таблица");
		Структура.ИсходнаяТаблица("Структура");
		Структура.Вывести();
	КонецЕсли;
	
	// Вывод первого уровня.
	ВывестиСтроки(2, КолонкаЗнак+1, 1, 1);
	
	// Инициализация высоты таблицы.
	ВысотаТаблицы = Таблица.ВысотаТаблицы();
	
	Таблица.Показать();
	
КонецПроцедуры // ПриОткрытии()

//******************************************************************************
// Предопределенная процедура.
//
Процедура ПриПовторномОткрытии()
	
	Если ТипЗначенияСтр(Форма.Параметр) = "Таблица" Тогда
		// Таблица Таблица.
		Таблица.Очистить();
		Таблица.Вывести();
		
		// Таблица Структура.
		Структура = Форма.Параметр;
		
		// Вывод первого уровня.
		ВывестиСтроки(2, КолонкаЗнак+1, 1, 1);
		
		// Инициализация высоты таблицы.
		ВысотаТаблицы = Таблица.ВысотаТаблицы();
		
		Таблица.Показать();
	КонецЕсли;
	
КонецПроцедуры // ПриПовторномОткрытии()

//******************************************************************************
// Предопределенная процедура.
//
Процедура ОбработкаЯчейкиТаблицы(Расшифровка, ФлагПродолжения, Таблица, Адрес);
	
	Адр1 = Лев(Адрес, Найти(Адрес+":", ":")-1); 
	Стр1 = Найти(Адр1, "R");                  Кол1 = Найти(Адр1, "C");
	Стр1 = Число(Сред(Адр1, Стр1+1, Кол1-1)); Кол1 = Число(Сред(Адр1, Кол1+1));
	
	//	Адр2 = Сред(Адрес, Найти(Адрес+":", ":")+1);
	//	Стр2 = Найти(Адр2, "R");                  Кол2 = Найти(Адр2, "C");
	//	Стр2 = Число(Сред(Адр2, Стр2+1, Кол2-1)); Кол2 = Число(Сред(Адр2, Кол2+1));
	
	Если      Расшифровка = ЗнакПлюс Тогда
		РазвернутьСтроку(Стр1);
		
	ИначеЕсли Расшифровка = ЗнакМинус Тогда
		СвернутьСтроку(Стр1);
		
	Иначе
		
		Расшифровка(Стр1, Кол1, Расшифровка);
		
	КонецЕсли;
	
КонецПроцедуры // ОбработкаЯчейкиТаблицы()

////////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ

// Инициализация переменных.
КолонкаОтступ      = 1; 
КолонкаСсылка      = 2; 
КолонкаЗнак        = 3; 
КолонкаТекст       = 3;
КолонкаРасшифровка = 4;
ДлинаТекста        = 35;
ЗнакПлюс           = "0"; 
ЗнакМинус          = "1";

