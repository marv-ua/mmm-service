Перем ФлагиИзмененияСписков;

//******************************************************************************
// ПредставлениеЭлемента(Элемент)
//
Функция ПредставлениеЭлемента(Элемент)
	
	Если ТипЗначенияСтр(Элемент) = "Справочник" Тогда
	    Возврат СокрП(Элемент.Наименование);
		
	Иначе
		Возврат Элемент.Код + " """ + Элемент.ПолнНаименование + """";
	КонецЕсли;
	
КонецФункции // ПредставлениеЭлемента()

//******************************************************************************
// РасставитьФлагиРаспределенияЗатрат(ВидСпр)
//
Процедура РасставитьФлагиРаспределенияЗатрат(ВидСпр)
	
	Спр = СоздатьОбъект("Справочник."+ВидСпр);
	Спр.ВыбратьЭлементы();
	Пока Спр.ПолучитьЭлемент() = 1 Цикл
		Если (Спр.ЭтоГруппа() = 1) или (Спр.ПометкаУдаления() = 1) Тогда
			Продолжить;
		КонецЕсли;
		Список = ?(ВидСпр = "СтатьиЗатратНаПроизводство" ,СтатьиЗатратНаПроизводство ,СтатьиИздержекОбращения);
		Входит = ?(Список.НайтиЗначение(Спр.ТекущийЭлемент()) > 0, 1, 0);
		Входит = ?(Список.НайтиЗначение(Спр.Родитель) > 0, 1, Входит);
		Если ВидСпр = "СтатьиЗатратНаПроизводство" Тогда
			Спр.СтатьяВходитВБазуРаспределенияКосвенныхЗатрат.Установить(ДатаИстории, Входит);
		Иначе
			Спр.СписыватьИздержкиПропорциональноОстаткуТоваров.Установить(ДатаИстории, Входит);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры // РасставитьФлагиРаспределенияЗатрат()

//******************************************************************************
// ОбновитьФорму()
//
// Параметры:
//  Нет.
//
// Вызывается из формул элементов диалога:
//  Нет.
//
// Описание:
//  Здесь описывается процедура.
//
Процедура ОбновитьФорму()
	
	МетодОпределенияВыручки            = Константа.МетодОпределенияВыручки.Получить(ДатаИстории);
	БазаРаспределенияКосвенныхРасходов = Константа.БазаРаспределенияКосвенныхРасходов.Получить(ДатаИстории);
	ДиректКостинг                      = Константа.ДиректКостинг.Получить(ДатаИстории);
	ДиректКостингВидыПродукции         = Константа.ДиректКостингВидыПродукции.Получить(ДатаИстории).ПорядковыйНомер();
	ДиректКостингБазаРаспределения     = Константа.ДиректКостингБазаРаспределения.Получить(ДатаИстории).ПорядковыйНомер();
	БазаРаспределенияПрямыхРасходов    = Константа.БазаРаспределенияПрямыхРасходов.Получить(ДатаИстории);
	МетодРасчетаСебестоимостиМатериалов= Константа.МетодРасчетаСебестоимостиМатериалов.Получить(ДатаИстории);
	МетодРасчетаСебестоимостиТоваров   = Константа.МетодРасчетаСебестоимостиТоваров.Получить(ДатаИстории);
	ПрименяетсяПБУ18                   = Константа.ПрименяетсяПБУ18.Получить(ДатаИстории);
	РаздельныйУчетТоваровОптРозница    = Константа.РаздельныйУчетТоваровОптРозница.Получить(ДатаИстории);
	ОсобенностиИсчисленияНДФЛ		   = Константа.ОсобенностиИсчисленияНДФЛ.Получить(ДатаИстории);
	НалоговыйПериодПоНДС               = Константа.НалоговыйПериодПоНДС.Получить(ДатаИстории);
	СпособБухгалтерскогоУчетаСуммовыхРазницВСтоимостиМПЗ	= Константа.СпособБухгалтерскогоУчетаСуммовыхРазницВСтоимостиМПЗ.Получить(ДатаИстории);
	УчитыватьПоложительныеСуммовыеРазницыПриНачисленииНДС	= ?(Константа.УчитыватьПоложительныеСуммовыеРазницыПриНачисленииНДС.Получить(ДатаИстории) = Да, 1, 0);
	УчитыватьОтрицательныеСуммовыеРазницыПриНачисленииНДС	= ?(Константа.УчитыватьОтрицательныеСуммовыеРазницыПриНачисленииНДС.Получить(ДатаИстории) = Да, 1, 0);
	УчитыватьПоложительныеСуммовыеРазницыПриОпределенииВычетовПоНДС	= ?(Константа.УчитыватьПоложительныеСуммовыеРазницыПриОпределенииВычетовПоНДС.Получить(ДатаИстории) = Да, 1, 0);
	УчитыватьОтрицательныеСуммовыеРазницыПриОпределенииВычетовПоНДС	= ?(Константа.УчитыватьОтрицательныеСуммовыеРазницыПриОпределенииВычетовПоНДС.Получить(ДатаИстории) = Да, 1, 0);
	МетодРаспределенияКосвенныхРасходовПоВидамДеятельности  = Константа.МетодРаспределенияКосвенныхРасходовПоВидамДеятельности.Получить(ДатаИстории);
	БазаРаспределенияКосвенныхРасходовПоВидамДеятельности   = Константа.БазаРаспределенияКосвенныхРасходовПоВидамДеятельности.Получить(ДатаИстории);
	ОтражатьПоложительныеСуммовыеРазницыВДопЛисте			= ?(Константа.ОтражатьПоложительныеСуммовыеРазницыВДопЛисте.Получить(ДатаИстории) = Да, 1, 0);
	ОтражатьОтрицательныеСуммовыеРазницыВДопЛисте			= ?(Константа.ОтражатьОтрицательныеСуммовыеРазницыВДопЛисте.Получить(ДатаИстории) = Да, 1, 0);
	ФормироватьСчетФактуруПоУЕвРублях						= ?(Константа.ФормироватьСчетФактуруПоУЕвРублях.Получить(ДатаИстории) = Да, 1, 0);
	ВыписыватьОтдельныеСчетаФактурыНаСуммовыеРазницы		= ?(Константа.ВыписыватьОтдельныеСчетаФактурыНаСуммовыеРазницы.Получить(ДатаИстории) = Да, 1, 0);
	МетодНачисленияАмортизацииНУ		= Константа.МетодНачисленияАмортизацииНУ.Получить(ДатаИстории);
	
	СтатьиЗатратНаПроизводство.УдалитьВсе();
	Спр = СоздатьОбъект("Справочник.СтатьиЗатратНаПроизводство");
	Спр.ВыбратьЭлементы();
	Пока Спр.ПолучитьЭлемент() = 1 Цикл
		Если Спр.СтатьяВходитВБазуРаспределенияКосвенныхЗатрат.Получить(ДатаИстории) = 1 Тогда
			СтатьиЗатратНаПроизводство.ДобавитьЗначение(Спр.ТекущийЭлемент(), ПредставлениеЭлемента(Спр.ТекущийЭлемент()));
		КонецЕсли;
	КонецЦикла;

	СтатьиИздержекОбращения.УдалитьВсе();
	Спр = СоздатьОбъект("Справочник.СтатьиИздержекОбращения");
	Спр.ВыбратьЭлементы();
	Пока Спр.ПолучитьЭлемент() = 1 Цикл
		Если Спр.СписыватьИздержкиПропорциональноОстаткуТоваров.Получить(ДатаИстории) = 1 Тогда
			СтатьиИздержекОбращения.ДобавитьЗначение(Спр.ТекущийЭлемент(), ПредставлениеЭлемента(Спр.ТекущийЭлемент()));
		КонецЕсли;
	КонецЦикла;
	
	Основной.УдалитьВсе();
	Счет = СоздатьОбъект("Счет.Основной");
	СписокСчетов = СоздатьОбъект("СписокЗначений");
	СписокСчетов.ИзСтрокиСРазделителями(Константа.СчетаПереоцениваемыеВОсобомПорядке.Получить(ДатаИстории));
	Для а = 1 по СписокСчетов.РазмерСписка() Цикл
		Если Счет.НайтиПоКоду(СписокСчетов.ПолучитьЗначение(а)) = 1 Тогда
		    Основной.ДобавитьЗначение(Счет.ТекущийСчет(), ПредставлениеЭлемента(Счет.ТекущийСчет()));
		КонецЕсли;
	КонецЦикла;
	
	Форма.МетодОпределенияВыручки.Доступность(?(ДатаИстории >= '01.01.2006', 0, 1));
	Форма.НалоговыйПериодПоНДС.Доступность(?(ДатаИстории >= '01.01.2008', 0, 1));
		
	Форма.УчитыватьОтрицательныеСуммовыеРазницыПриНачисленииНДС.Доступность(?(ДатаИстории >= '01.01.2007', 0, 1));
	Форма.УчитыватьПоложительныеСуммовыеРазницыПриОпределенииВычетовПоНДС.Доступность(?(ДатаИстории >= '01.01.2007', 0, 1));
	Форма.УчитыватьОтрицательныеСуммовыеРазницыПриОпределенииВычетовПоНДС.Доступность(?(ДатаИстории >= '01.01.2007', 0, 1));
	Форма.ОтражатьПоложительныеСуммовыеРазницыВДопЛисте.Доступность(?(ДатаИстории >= '01.01.2007', 0, 1));
	Форма.ОтражатьОтрицательныеСуммовыеРазницыВДопЛисте.Доступность(?(ДатаИстории >= '01.01.2007', 0, 1));
	Форма.РамкаСуммовыеРазницыПриОпределенииВычетовПоНДС.Доступность(?(ДатаИстории >= '01.01.2007', 0, 1));
	Форма.МетодНачисленияАмортизацииНУ.Доступность(?(ДатаИстории >= '01.01.2009', 1, 0));
	
КонецПроцедуры // ОбновитьФорму() 

//******************************************************************************
// Установить()
//
// Параметры:
//  Нет.
//
// Вызывается из формул элементов диалога:
//  Нет.
//
// Описание:
//  Здесь описывается процедура.
//
Процедура Установить()
	
	СписокИзменений = СоздатьОбъект("СписокЗначений");

	Если Константа.МетодОпределенияВыручки.Получить(ДатаИстории) <> МетодОпределенияВыручки Тогда
		СписокИзменений.ДобавитьЗначение(МетодОпределенияВыручки, "МетодОпределенияВыручки");
	КонецЕсли;
	Если Константа.БазаРаспределенияКосвенныхРасходов.Получить(ДатаИстории) <> БазаРаспределенияКосвенныхРасходов Тогда
		СписокИзменений.ДобавитьЗначение(БазаРаспределенияКосвенныхРасходов, "БазаРаспределенияКосвенныхРасходов");
	КонецЕсли;
	Если Константа.ДиректКостинг.Получить(ДатаИстории) <> ДиректКостинг Тогда
		СписокИзменений.ДобавитьЗначение(ДиректКостинг, "ДиректКостинг");
	КонецЕсли;
	Если Константа.ДиректКостингВидыПродукции.Получить(ДатаИстории) <> Перечисление.ДиректКостингВидыПродукции.ЗначениеПоНомеру(ДиректКостингВидыПродукции) Тогда
		СписокИзменений.ДобавитьЗначение(ДиректКостингВидыПродукции, "ДиректКостингВидыПродукции");
	КонецЕсли;
	Если Константа.ДиректКостингБазаРаспределения.Получить(ДатаИстории) <> Перечисление.ДиректКостингБазаРаспределения.ЗначениеПоНомеру(ДиректКостингБазаРаспределения) Тогда
		СписокИзменений.ДобавитьЗначение(ДиректКостингБазаРаспределения, "ДиректКостингБазаРаспределения");
	КонецЕсли;
	Если Константа.БазаРаспределенияПрямыхРасходов.Получить(ДатаИстории) <> БазаРаспределенияПрямыхРасходов Тогда
		СписокИзменений.ДобавитьЗначение(БазаРаспределенияПрямыхРасходов, "БазаРаспределенияПрямыхРасходов");
	КонецЕсли;
	Если Константа.РаздельныйУчетТоваровОптРозница.Получить(ДатаИстории) <> РаздельныйУчетТоваровОптРозница Тогда
		СписокИзменений.ДобавитьЗначение(РаздельныйУчетТоваровОптРозница, "РаздельныйУчетТоваровОптРозница");
	КонецЕсли;
	Если Константа.МетодРасчетаСебестоимостиМатериалов.Получить(ДатаИстории) <> МетодРасчетаСебестоимостиМатериалов Тогда
		СписокИзменений.ДобавитьЗначение(МетодРасчетаСебестоимостиМатериалов, "МетодРасчетаСебестоимостиМатериалов");
	КонецЕсли;
	Если Константа.МетодРасчетаСебестоимостиТоваров.Получить(ДатаИстории) <> МетодРасчетаСебестоимостиТоваров Тогда
		СписокИзменений.ДобавитьЗначение(МетодРасчетаСебестоимостиТоваров, "МетодРасчетаСебестоимостиТоваров");
	КонецЕсли;
	Если Константа.ПрименяетсяПБУ18.Получить(ДатаИстории) <> ПрименяетсяПБУ18 Тогда
		СписокИзменений.ДобавитьЗначение(ПрименяетсяПБУ18, "ПрименяетсяПБУ18");
	КонецЕсли;
	Если Константа.ОсобенностиИсчисленияНДФЛ.Получить(ДатаИстории) <> ОсобенностиИсчисленияНДФЛ Тогда
		СписокИзменений.ДобавитьЗначение(ОсобенностиИсчисленияНДФЛ, "ОсобенностиИсчисленияНДФЛ");
	КонецЕсли;
	Если Константа.СпособБухгалтерскогоУчетаСуммовыхРазницВСтоимостиМПЗ.Получить(ДатаИстории) <> СпособБухгалтерскогоУчетаСуммовыхРазницВСтоимостиМПЗ Тогда
		СписокИзменений.ДобавитьЗначение(СпособБухгалтерскогоУчетаСуммовыхРазницВСтоимостиМПЗ, "СпособБухгалтерскогоУчетаСуммовыхРазницВСтоимостиМПЗ");
	КонецЕсли;
	Если Константа.НалоговыйПериодПоНДС.Получить(ДатаИстории) <> НалоговыйПериодПоНДС Тогда
		СписокИзменений.ДобавитьЗначение(НалоговыйПериодПоНДС, "НалоговыйПериодПоНДС");
	КонецЕсли; 
	Если Константа.МетодРаспределенияКосвенныхРасходовПоВидамДеятельности.Получить(ДатаИстории) <> МетодРаспределенияКосвенныхРасходовПоВидамДеятельности Тогда
		СписокИзменений.ДобавитьЗначение(МетодРаспределенияКосвенныхРасходовПоВидамДеятельности, "МетодРаспределенияКосвенныхРасходовПоВидамДеятельности");
	КонецЕсли;
	Если Константа.БазаРаспределенияКосвенныхРасходовПоВидамДеятельности.Получить(ДатаИстории) <> БазаРаспределенияКосвенныхРасходовПоВидамДеятельности Тогда
		СписокИзменений.ДобавитьЗначение(БазаРаспределенияКосвенныхРасходовПоВидамДеятельности, "БазаРаспределенияКосвенныхРасходовПоВидамДеятельности");
	КонецЕсли;
		
	ЗначениеБулево = ?(УчитыватьПоложительныеСуммовыеРазницыПриНачисленииНДС = 1, Да, Нет);
	Если Константа.УчитыватьПоложительныеСуммовыеРазницыПриНачисленииНДС.Получить(ДатаИстории) <> ЗначениеБулево Тогда
		СписокИзменений.ДобавитьЗначение(ЗначениеБулево, "УчитыватьПоложительныеСуммовыеРазницыПриНачисленииНДС");
	КонецЕсли;
	
	ЗначениеБулево = ?(УчитыватьОтрицательныеСуммовыеРазницыПриНачисленииНДС = 1, Да, Нет);
	Если Константа.УчитыватьОтрицательныеСуммовыеРазницыПриНачисленииНДС.Получить(ДатаИстории) <> ЗначениеБулево Тогда
		СписокИзменений.ДобавитьЗначение(ЗначениеБулево, "УчитыватьОтрицательныеСуммовыеРазницыПриНачисленииНДС");
	КонецЕсли;
	
	ЗначениеБулево = ?(УчитыватьПоложительныеСуммовыеРазницыПриОпределенииВычетовПоНДС = 1, Да, Нет);
	Если Константа.УчитыватьПоложительныеСуммовыеРазницыПриОпределенииВычетовПоНДС.Получить(ДатаИстории) <> ЗначениеБулево Тогда
		СписокИзменений.ДобавитьЗначение(ЗначениеБулево, "УчитыватьПоложительныеСуммовыеРазницыПриОпределенииВычетовПоНДС");
	КонецЕсли;
	
	ЗначениеБулево = ?(УчитыватьОтрицательныеСуммовыеРазницыПриОпределенииВычетовПоНДС = 1, Да, Нет);
	Если Константа.УчитыватьОтрицательныеСуммовыеРазницыПриОпределенииВычетовПоНДС.Получить(ДатаИстории) <> ЗначениеБулево Тогда
		СписокИзменений.ДобавитьЗначение(ЗначениеБулево, "УчитыватьОтрицательныеСуммовыеРазницыПриОпределенииВычетовПоНДС");
	КонецЕсли;
	
	ЗначениеБулево = ?(ОтражатьПоложительныеСуммовыеРазницыВДопЛисте = 1, Да, Нет);
	Если Константа.ОтражатьПоложительныеСуммовыеРазницыВДопЛисте.Получить(ДатаИстории) <> ЗначениеБулево Тогда
		СписокИзменений.ДобавитьЗначение(ЗначениеБулево, "ОтражатьПоложительныеСуммовыеРазницыВДопЛисте");
	КонецЕсли;
	
	ЗначениеБулево = ?(ОтражатьОтрицательныеСуммовыеРазницыВДопЛисте = 1, Да, Нет);
	Если Константа.ОтражатьОтрицательныеСуммовыеРазницыВДопЛисте.Получить(ДатаИстории) <> ЗначениеБулево Тогда
		СписокИзменений.ДобавитьЗначение(ЗначениеБулево, "ОтражатьОтрицательныеСуммовыеРазницыВДопЛисте");
	КонецЕсли; 
	
	ЗначениеБулево = ?(ФормироватьСчетФактуруПоУЕвРублях = 1, Да, Нет);
	Если Константа.ФормироватьСчетФактуруПоУЕвРублях.Получить(ДатаИстории) <> ЗначениеБулево Тогда
		СписокИзменений.ДобавитьЗначение(ЗначениеБулево, "ФормироватьСчетФактуруПоУЕвРублях");
	КонецЕсли; 
	
	ЗначениеБулево = ?(ВыписыватьОтдельныеСчетаФактурыНаСуммовыеРазницы = 1, Да, Нет);
	Если Константа.ВыписыватьОтдельныеСчетаФактурыНаСуммовыеРазницы.Получить(ДатаИстории) <> ЗначениеБулево Тогда
		СписокИзменений.ДобавитьЗначение(ЗначениеБулево, "ВыписыватьОтдельныеСчетаФактурыНаСуммовыеРазницы");
	КонецЕсли; 

	Если БазаРаспределенияКосвенныхРасходов = Перечисление.БазаРаспределенияКосвенныхРасходов.ОтдельныеСтатьиПрямыхЗатрат Тогда
		Если ФлагиИзмененияСписков.Получить("СтатьиЗатратНаПроизводство") = 1 Тогда
			СписокИзменений.ДобавитьЗначение("СтатьиЗатратНаПроизводство", "Состав затрат на производство");
		КонецЕсли;
	КонецЕсли;

	Если ФлагиИзмененияСписков.Получить("СтатьиИздержекОбращения") = 1 Тогда
		СписокИзменений.ДобавитьЗначение("СтатьиИздержекОбращения", "Порядок списания издержек");
	КонецЕсли;
	
	Если ФлагиИзмененияСписков.Получить("Основной") = 1 Тогда
		СписокИзменений.ДобавитьЗначение("Основной", "СчетаПереоцениваемыеВОсобомПорядке");
	КонецЕсли;
	
	Если Константа.МетодНачисленияАмортизацииНУ.Получить(ДатаИстории) <> МетодНачисленияАмортизацииНУ Тогда
		СписокИзменений.ДобавитьЗначение(МетодНачисленияАмортизацииНУ, "МетодНачисленияАмортизацииНУ");
	КонецЕсли;
	
	Если СписокИзменений.РазмерСписка() = 0 Тогда
		Предупреждение("Не изменен ни один параметр учетной политики");
	Иначе
		ВопросСтр = "На " + Формат(ДатаИстории, "Д ДДММГГГГ") + " изменены следующие элементы учетной политики:" + РазделительСтрок;
		Для х = 1 по СписокИзменений.РазмерСписка() Цикл
			ИмяКонстанты = "";
			СписокИзменений.ПолучитьЗначение(х, ИмяКонстанты);
			Если ИмяКонстанты = "Состав затрат на производство" Тогда
				ВопросСтр = ВопросСтр + """Состав затрат на производство"""+ РазделительСтрок;
			ИначеЕсли ИмяКонстанты = "Порядок списания издержек" Тогда
				ВопросСтр = ВопросСтр + """Порядок списания издержек"""+ РазделительСтрок;
			Иначе
				ВопросСтр = ВопросСтр + """"+ Метаданные.Константа(ИмяКонстанты).Синоним + """"+ РазделительСтрок;
			КонецЕсли;
		КонецЦикла;
		ВопросСтр = ВопросСтр + РазделительСтрок + "Вы подтверждаете это изменение?";
		Если Вопрос(ВопросСтр, "Да+Нет") = "Да" Тогда
			П = СоздатьОбъект("Периодический");
			Для х = 1 по СписокИзменений.РазмерСписка() Цикл
				ИмяКонстанты = "";
				ЗначениеКонстанты = СписокИзменений.ПолучитьЗначение(х, ИмяКонстанты);
				Если ИмяКонстанты = "Состав затрат на производство" Тогда
					Спр = СоздатьОбъект("Справочник.СтатьиЗатратНаПроизводство");
					Спр.ВыбратьЭлементы();
					Пока Спр.ПолучитьЭлемент() = 1 Цикл
						Если (Спр.ЭтоГруппа() = 1) или (Спр.ПометкаУдаления() = 1) Тогда
							Продолжить;
						КонецЕсли;
						Входит = ?(СтатьиЗатратНаПроизводство.НайтиЗначение(Спр.ТекущийЭлемент()) > 0, 1, 0);
						Входит = ?(СтатьиЗатратНаПроизводство.НайтиЗначение(Спр.Родитель) > 0, 1, Входит);
						Спр.СтатьяВходитВБазуРаспределенияКосвенныхЗатрат.Установить(ДатаИстории, Входит);
					КонецЦикла;
					
				ИначеЕсли ИмяКонстанты = "Порядок списания издержек" Тогда
					Спр = СоздатьОбъект("Справочник.СтатьиИздержекОбращения");
					Спр.ВыбратьЭлементы();
					Пока Спр.ПолучитьЭлемент() = 1 Цикл
						Если (Спр.ЭтоГруппа() = 1) или (Спр.ПометкаУдаления() = 1) Тогда
							Продолжить;
						КонецЕсли;
						Входит = ?(СтатьиИздержекОбращения.НайтиЗначение(Спр.ТекущийЭлемент()) > 0, 1, 0);
						Входит = ?(СтатьиИздержекОбращения.НайтиЗначение(Спр.Родитель) > 0, 1, Входит);
						Спр.СписыватьИздержкиПропорциональноОстаткуТоваров.Установить(ДатаИстории, Входит);
					КонецЦикла;
					
				ИначеЕсли ИмяКонстанты = "СчетаПереоцениваемыеВОсобомПорядке" Тогда
					Константа.СчетаПереоцениваемыеВОсобомПорядке.Установить(ДатаИстории, Основной.ВСтрокуСРазделителями());

				Иначе
					Если ИмяКонстанты = "ДиректКостингВидыПродукции" Тогда
					    ЗначениеКонстанты = Перечисление.ДиректКостингВидыПродукции.ЗначениеПоНомеру(ЗначениеКонстанты);

					ИначеЕсли ИмяКонстанты = "ДиректКостингБазаРаспределения" Тогда
					    ЗначениеКонстанты = Перечисление.ДиректКостингБазаРаспределения.ЗначениеПоНомеру(ЗначениеКонстанты);
					КонецЕсли;
					
					П.ИспользоватьОбъект(ИмяКонстанты);
					П.ДатаЗнач = ДатаИстории;
					П.Значение = ЗначениеКонстанты;
					П.Записать();
				КонецЕсли;
			КонецЦикла;
			
		Иначе
			ОбновитьФорму();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // Установить() 

//******************************************************************************
// ПроверитьВыбранноеЗначение(Элемент, ИдентификаторКонстанты)
//
// Параметры:
//  Элмент - идентификатор элемента диалога значение которого над проверить
//  ИдентификаторКонстанты - идентификатор  константы, значение которой отражает
//                           переданный в эту процедуру реквизит диалога (Элемент).
//
// Вызывается из формул элементов диалога:
//  Да.
//
// Описание:
//  Запрещается установка пустых значений.
//
Функция ПроверитьВыбранноеЗначение(Элемент, ИдентификаторКонстанты)
	
	Если ПустоеЗначение(Элемент) = 1  Тогда
		Элемент = Константа.ПолучитьАтрибут(ИдентификаторКонстанты).Получить(ДатаИстории);
	КонецЕсли;
	
Конецфункции // ПроверитьВыбранноеЗначение()

//******************************************************************************
// ПриВыбореБазыРаспределенияКосвенныхРасходов()
//
// Параметры:
//  Нет.
//
// Вызывается из формул элементов диалога:
//  Нет.
//
// Описание:
//  Здесь описывается процедура.
//
Процедура ПриВыбореБазыРаспределенияКосвенныхРасходов()
    
	ПроверитьВыбранноеЗначение(БазаРаспределенияКосвенныхРасходов, "БазаРаспределенияКосвенныхРасходов");
	
	Позиция = Форма.Закладки.НайтиЗначение("Статьи затрат на производство");
	Если БазаРаспределенияКосвенныхРасходов = Перечисление.БазаРаспределенияКосвенныхРасходов.ОтдельныеСтатьиПрямыхЗатрат Тогда
		Если Позиция = 0 Тогда
		    Позиция = Форма.Закладки.НайтиЗначение("Общая");
			Позиция = Позиция + 1;
			Форма.Закладки.ВставитьЗначение(Позиция, "Статьи затрат на производство", "Статьи затрат на производство");
		КонецЕсли;
		
	Иначе
		Если Позиция <> 0 Тогда
			Форма.Закладки.УдалитьЗначение(Позиция);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ПриВыбореБазыРаспределенияКосвенныхРасходов()

//******************************************************************************
// ПриВыбореДиректКостинга()
//
// Параметры:
//  Нет.
//
// Вызывается из формул элементов диалога:
//  Нет.
//
// Описание:
//  Здесь описывается процедура.
//
Процедура ПриВыбореДиректКостинга()
	
	ПроверитьВыбранноеЗначение(ДиректКостинг, "ДиректКостинг");
	
	Позиция = Форма.Закладки.НайтиЗначение("Директ-костинг");
	Если ДиректКостинг = Да Тогда
		Если Позиция = 0 Тогда
		    Позиция = Форма.Закладки.НайтиЗначение("Списание издержек");
			Форма.Закладки.ВставитьЗначение(Позиция, "Директ-костинг", "Директ-костинг");
		КонецЕсли;
		
	Иначе
		Если Позиция <> 0 Тогда
			Форма.Закладки.УдалитьЗначение(Позиция);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ПриВыбореДиректКостинга() 

//******************************************************************************
// ПриУстановкеФлагаУчитыватьПоложительныеСуммовыеРазницыПриНачисленииНДС()
//
// Параметры:
//  Нет.
//
// Вызывается из формул элементов диалога:
//  Нет.
//
// Описание:
//  Здесь описывается процедура.
//
Процедура ПриУстановкеФлагаУчитыватьПоложительныеСуммовыеРазницыПриНачисленииНДС()             
	Если УчитыватьПоложительныеСуммовыеРазницыПриНачисленииНДС = 0 Тогда
		Форма.ВыписыватьОтдельныеСчетаФактурыНаСуммовыеРазницы.Доступность(0);
		Если ВыписыватьОтдельныеСчетаФактурыНаСуммовыеРазницы = 1 Тогда
			ВыписыватьОтдельныеСчетаФактурыНаСуммовыеРазницы = 0;			
		КонецЕсли;
	ИначеЕсли УчитыватьПоложительныеСуммовыеРазницыПриНачисленииНДС = 1 Тогда
		Форма.ВыписыватьОтдельныеСчетаФактурыНаСуммовыеРазницы.Доступность(1);
	КонецЕсли;	
КонецПроцедуры // ПриУстановкеФлагаУчитыватьПоложительныеСуммовыеРазницыПриНачисленииНДС() 

//******************************************************************************
// Предопределенная процедура
//
Процедура ПриВыбореЗакладки(Номер, Значение)
	
	Если Значение = "Общая" Тогда
		Форма.ИспользоватьСлой("Основной, Общая", 2);
		
	ИначеЕсли Значение = "Статьи затрат на производство" Тогда
		Форма.ИспользоватьСлой("Основной, БазаЗатрат", 2);
		
	ИначеЕсли Значение = "Директ-костинг" Тогда
		Форма.ИспользоватьСлой("Основной, ДиректКостинг", 2);

	ИначеЕсли Значение = "Списание издержек" Тогда
		Форма.ИспользоватьСлой("Основной, БазаИздержек", 2);
		
	ИначеЕсли Значение = "Переоценка счетов" Тогда
		Форма.ИспользоватьСлой("Основной, ИсключенияПриПереоценке", 2);
	
	ИначеЕсли Значение = "Налоговый учет" Тогда
		Форма.ИспользоватьСлой("Основной, НалоговыйУчет", 2);
		
	ИначеЕсли Значение = "НДС" Тогда
		Форма.ИспользоватьСлой("Основной, НДС", 2);

	КонецЕсли;
	
КонецПроцедуры // ПриВыбореЗакладки()

//******************************************************************************
// Предопределенная процедура
//
Процедура ПриОткрытии()
	
	ДатаИстории = РабочаяДата();
	ОбновитьФорму();
	ПриУстановкеФлагаУчитыватьПоложительныеСуммовыеРазницыПриНачисленииНДС();
	Форма.ИспользоватьЗакладки(1);
	Форма.Закладки.ДобавитьЗначение("Общая");
	Форма.Закладки.ДобавитьЗначение("Списание издержек");
	Форма.Закладки.ДобавитьЗначение("Переоценка счетов");
	Форма.Закладки.ДобавитьЗначение("Налоговый учет");
	Форма.Закладки.ДобавитьЗначение("НДС");
	ПриВыбореБазыРаспределенияКосвенныхРасходов();
	ПриВыбореДиректКостинга();
	ПриВыбореЗакладки(, "Общая");
	
	ФлагиИзмененияСписков = СоздатьОбъект("СписокЗначений");
	ФлагиИзмененияСписков.ДобавитьЗначение(0, "СтатьиИздержекОбращения");
	ФлагиИзмененияСписков.ДобавитьЗначение(0, "СтатьиЗатратНаПроизводство");
	ФлагиИзмененияСписков.ДобавитьЗначение(0, "Основной");
	
КонецПроцедуры // ПриОткрытии()

//******************************************************************************
// ВыбранныйЭлемент(ВидСпр)
//
Функция ВыбранныйЭлемент(ВидСпр)
	
	Если ВидСпр = "Справочник.СтатьиЗатратНаПроизводство" Тогда
		Список = СтатьиЗатратНаПроизводство;
		
	ИначеЕсли ВидСпр = "Справочник.СтатьиИздержекОбращения" Тогда
		Список = СтатьиИздержекОбращения;
		
	ИначеЕсли ВидСпр = "ПланСчетов.Основной" Тогда
		Список = Основной;
	КонецЕсли;

	Если Список.ТекущаяСтрока() = 0 Тогда
		Если Список.РазмерСписка() > 0 Тогда
			Элемент = Список.ПолучитьЗначение(Список.РазмерСписка());
		Иначе
			Элемент = ПолучитьПустоеЗначение(ВидСпр);
		КонецЕсли;
	Иначе
		Элемент = Список.ПолучитьЗначение(Список.ТекущаяСтрока());
	КонецЕсли;

	Возврат Элемент;
	
КонецФункции // ВыбранныйЭлемент()

//******************************************************************************
// Выбор()
//
// Параметры:
//  Нет.
//
// Вызывается из формул элементов диалога:
//  Нет.
//
// Описание:
//  Здесь описывается процедура.
//
Процедура Выбор(Режим, ВидСпр)
	
	ОткрытьПодбор(ВидСпр, , Форма, Режим, ВыбранныйЭлемент(ВидСпр));
	
КонецПроцедуры // Выбор()

//******************************************************************************
// Удаление()
//
Процедура Удаление(Режим, ВидСпр)
	
	Если ВидСпр = "СтатьиЗатратНаПроизводство" Тогда
		Список = СтатьиЗатратНаПроизводство;
		
	ИначеЕсли ВидСпр = "СтатьиИздержекОбращения" Тогда
		Список = СтатьиИздержекОбращения;
		
	ИначеЕсли ВидСпр = "Основной" Тогда
		Список = Основной;
	КонецЕсли;
		
	Если Режим = 0 Тогда
		Если Список.ТекущаяСтрока() <> 0 Тогда
			Позиция = Список.ТекущаяСтрока();
			Список.УдалитьЗначение(Позиция);
			ФлагиИзмененияСписков.Установить(ВидСпр, 1);

			Если Позиция > Список.РазмерСписка() Тогда
				Список.ТекущаяСтрока(Список.РазмерСписка());
			Иначе
				Список.ТекущаяСтрока(Позиция);
			КонецЕсли;
		КонецЕсли;
		
	Иначе
		Если Список.РазмерСписка() <> 0 Тогда
			Если Вопрос("Удалить все значения списка?", "Да+Нет") = "Да" Тогда
				Список.УдалитьВсе();
				ФлагиИзмененияСписков.Установить(ВидСпр, 1);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // Удаление()

//******************************************************************************
// Предопределенная процедура
//
Процедура ОбработкаПодбора(Элемент)
	
	Если ТипЗначенияСтр(Элемент) = "Справочник" Тогда
	    Список = ?(Элемент.Вид() = "СтатьиЗатратНаПроизводство" ,СтатьиЗатратНаПроизводство ,СтатьиИздержекОбращения);
	Иначе
		Список = Основной;
	КонецЕсли;
	
	Если Список.НайтиЗначение(Элемент) = 0 Тогда
		Если ТипЗначенияСтр(Элемент) = "Счет" Тогда
		    Если Элемент.Валютный = 0 Тогда
		        Предупреждение("На выбраном счете валютный учет не ведется");
				Возврат;
				
			Иначе
				Стр = Основной.ВСтрокуСРазделителями() + Стр + ",""" + Элемент + """";
				Если СтрДлина(Стр) > Метаданные.Константа("СчетаПереоцениваемыеВОсобомПорядке").Длина Тогда
				    Предупреждение("Достигнут максимальный размер списка");
					Возврат;	
				КонецЕсли;
		    КонецЕсли;
		КонецЕсли;
		Список.ДобавитьЗначение(Элемент, ПредставлениеЭлемента(Элемент));
		Список.ТекущаяСтрока(Список.РазмерСписка());
		ФлагиИзмененияСписков.Установить(Элемент.Вид(), 1);
	Иначе
		Предупреждение("Это значение уже есть в списке");
	КонецЕсли;
	
КонецПроцедуры // ОбработкаПодбора()
