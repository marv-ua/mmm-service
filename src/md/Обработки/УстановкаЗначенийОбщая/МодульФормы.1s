//_____________________________________________________________________________ 
Функция ПолучитьКомментарийРежимаПересчета()
	Если ПриИзмененииКоличестваВПриходныхДокументах = 1 Тогда // пересчитывать сумму
		Возврат "При изменении количества в уже " +
		        "введенных строках табличной части приходных документов " +
		        "автоматически пересчитывается сумма, в соответствии с вариантом "
		        "расчета налогов и суммы налогов.";
	Иначе // пересчитывать цену
		Возврат "При изменении количества в уже " +
		        "введенных строках табличной части приходных документов " +
		        "автоматически пересчитывается цена поступления. Введенная " +
		        "сумма и расчитанные налоги остаются неизменны.";
	КонецЕсли;
КонецФункции // ПолучитьКомментарийРежимаПересчета 
//_____________________________________________________________________________
Процедура ОбновитьПрочие()
	РайонныйКоэффициент = Константа.РайонныйКоэффициент;
	СтавкаРефинансирования = Константа.СтавкаРефинансирования.Получить(ДатаИстории);
	ПроцентОбязательнойПродажиВалюты = Константа.ПроцентОбязательнойПродажиВалюты.Получить(ДатаИстории);
КонецПроцедуры // ОбновитьПрочие
//_____________________________________________________________________________
Процедура ПриОткрытии() //предопределенная
	// Начальные значения
	ОсновнаяВалюта = Константа.ОсновнаяВалюта;
	ОсновнаяЕдиницаИзмерения = Константа.ОсновнаяЕдиницаИзмерения;
	ОсновнаяСтавкаНДС = Константа.ОсновнаяСтавкаНДС;
	ОсновнаяСтавкаНП = Константа.ОсновнаяСтавкаНП;
	ОсновноеПодразделение = Константа.ОсновноеПодразделение;
	ОсновнойСклад = Константа.ОсновнойСклад;
	ОсновнойБанковскийСчет = Константа.ОсновнойБанковскийСчет;
	ПорядокХраненияОтпускнойЦены = Константа.ОсновнойВариантОтпускнойЦены;
	ОсновнойВидДоговоров = Константа.ОсновнойВидДоговоров;
	ОсновнойВариантРасчетаНалоговОтгрузки = Константа.ОсновнойВариантРасчетаНалоговОтгрузки;
	ПересчитыватьПокупнуюЦену = Константа.ПересчитыватьПокупнуюЦену;
	ИспользоватьТипыЦен  = ?(Константа.ИспользоватьТипыЦен = Да, 1, 0);
	АвтоКнигаПокупокПродаж = Константа.АвтоКнигаПокупокПродаж;
	
	// Режимы работы
	ИспользоватьСписокКорректныхПроводок = ?(Константа.ИспользоватьСписокКорректныхПроводок = Да, 1, 0);
	ВсеДокументыВЖурналОпераций = ?(Константа.ВсеДокументыВЖурналОпераций = Да, 1, 0);
	КонтрольОтрицательныхОстатков = ?(Константа.КонтрольОтрицательныхОстатков = Да, 1, 0);
	ВалютныйУчет = ?(Константа.ВалютныйУчет = Да, 1, 0);
	УчетЗарплатыВоВнешнейПрограмме = ?(Константа.УчетЗарплатыВоВнешнейПрограмме = Да, 1, 0);
	ДатаЗапретаРедактирования = Константа.ДатаЗапретаРедактирования;
	Если ПустаяСтрока(ТекущаяИБКод()) = 0 Тогда
		ПрефиксИБ = Константа.ПрефиксИБ;
		НеПрименятьПрефиксыИБ = Константа.НеПрименятьПрефиксыИБ;
	КонецЕсли;      
	
	// Режимы работы приходных документов
	ПриИзмененииКоличестваВПриходныхДокументах = ?(Константа.ПриИзмененииКоличестваВПриходныхДокументах = 1, 1, 2);
	ОсновнойВариантРасчетаНалогов = Константа.ОсновнойВариантРасчетаНалогов;
	ОсновнаяЦенаПриобретения = Константа.ОсновнаяЦенаПриобретения;

	// Прочие сведения
	ДатаИстории = РабочаяДата();
	ОбновитьПрочие();

	Форма.ИспользоватьЗакладки(1);
	Форма.Закладки.ДобавитьЗначение(1, "Начальные значения");
	Форма.Закладки.ДобавитьЗначение(2, "Режимы");
	Форма.Закладки.ДобавитьЗначение(3, "Приходные документы");	
	Форма.Закладки.ДобавитьЗначение(4, "Расходные документы");
	Если ПустаяСтрока(ТекущаяИБКод()) = 0 Тогда
		Форма.Закладки.ДобавитьЗначение(5, "УРИБ");	
	КонецЕсли;
	Форма.Закладки.ДобавитьЗначение(6, "Прочее");
	Форма.ИспользоватьСлой("Основной, НачальныеЗначения", 2);
КонецПроцедуры //ПриОткрытии

//_____________________________________________________________________________
Процедура ОК()
	// Прочие сведения
	СписокИзменений = СоздатьОбъект("СписокЗначений");
	Если Константа.СтавкаРефинансирования.Получить(ДатаИстории) <> СтавкаРефинансирования Тогда
		СписокИзменений.ДобавитьЗначение(СтавкаРефинансирования, "СтавкаРефинансирования");
	КонецЕсли;
	Если Константа.ПроцентОбязательнойПродажиВалюты.Получить(ДатаИстории) <> ПроцентОбязательнойПродажиВалюты Тогда
		СписокИзменений.ДобавитьЗначение(ПроцентОбязательнойПродажиВалюты, "ПроцентОбязательнойПродажиВалюты");
	КонецЕсли;
	Если СписокИзменений.РазмерСписка() > 0 Тогда
		ВопросСтр = "На " + Формат(ДатаИстории, "Д ДДММГГГГ") + " изменены следующие значения:" + РазделительСтрок;
		Для х = 1 по СписокИзменений.РазмерСписка() Цикл
			ИмяКонстанты = "";
			СписокИзменений.ПолучитьЗначение(х, ИмяКонстанты);
			ВопросСтр = ВопросСтр + """"+ Метаданные.Константа(ИмяКонстанты).Синоним + """"+ РазделительСтрок;
		КонецЦикла;
		ВопросСтр = ВопросСтр + РазделительСтрок + "Вы подтверждаете это изменение?";
		Если Вопрос(ВопросСтр, "Да+Нет") = "Да" Тогда
			П = СоздатьОбъект("Периодический");
			Для х = 1 по СписокИзменений.РазмерСписка() Цикл
				ИмяКонстанты = "";
				ЗначениеКонстанты = СписокИзменений.ПолучитьЗначение(х, ИмяКонстанты);
				П.ИспользоватьОбъект(ИмяКонстанты);
				П.ДатаЗнач = ДатаИстории;
				П.Значение = ЗначениеКонстанты;
				П.Записать();
			КонецЦикла;
		Иначе
			ОбновитьПрочие();
			Возврат;
		КонецЕсли;
	КонецЕсли;

	// Начальные значения
	Константа.ОсновнаяВалюта = ОсновнаяВалюта;
	Константа.ОсновнаяЕдиницаИзмерения = ОсновнаяЕдиницаИзмерения;
	Константа.ОсновнаяСтавкаНДС = ОсновнаяСтавкаНДС;
	Константа.ОсновнаяСтавкаНП = ОсновнаяСтавкаНП;
	Константа.ОсновнойСклад = ОсновнойСклад;
	Константа.ОсновноеПодразделение = ОсновноеПодразделение;
	Константа.ОсновнойБанковскийСчет = ОсновнойБанковскийСчет;
	Константа.ОсновнойВидДоговоров = ОсновнойВидДоговоров;
	Константа.РайонныйКоэффициент = РайонныйКоэффициент;

	// Режимы работы
	Константа.ИспользоватьСписокКорректныхПроводок = ?(ИспользоватьСписокКорректныхПроводок = 1, Да, Нет);
	Константа.ВсеДокументыВЖурналОпераций = ?(ВсеДокументыВЖурналОпераций = 1, Да, Нет);
	Константа.КонтрольОтрицательныхОстатков = ?(КонтрольОтрицательныхОстатков = 1, Да, Нет);
	Константа.ВалютныйУчет = ?(ВалютныйУчет = 1, Да, Нет);
	Константа.УчетЗарплатыВоВнешнейПрограмме = ?(УчетЗарплатыВоВнешнейПрограмме = 1, Да, Нет);
	Константа.ДатаЗапретаРедактирования = ДатаЗапретаРедактирования;
	Если ПустаяСтрока(ТекущаяИБКод()) = 0 Тогда
		Константа.ПрефиксИБ = ПрефиксИБ;
		Константа.НеПрименятьПрефиксыИБ = НеПрименятьПрефиксыИБ;
	КонецЕсли;   
	
	// Режимы работы документов движения МПЗ
	Константа.ПриИзмененииКоличестваВПриходныхДокументах = ?(ПриИзмененииКоличестваВПриходныхДокументах = 1, 1, 2);
	Константа.ОсновнойВариантРасчетаНалогов = ОсновнойВариантРасчетаНалогов;
	Константа.ОсновнаяЦенаПриобретения = ОсновнаяЦенаПриобретения;
	
	Константа.ОсновнойВариантРасчетаНалоговОтгрузки = ОсновнойВариантРасчетаНалоговОтгрузки;
	Константа.ПересчитыватьПокупнуюЦену = ПересчитыватьПокупнуюЦену;
	Константа.ОсновнойВариантОтпускнойЦены = ПорядокХраненияОтпускнойЦены;
	Константа.АвтоКнигаПокупокПродаж = АвтоКнигаПокупокПродаж;

	Форма.Закрыть();
КонецПроцедуры
//_____________________________________________________________________________
Процедура ПриВыбореЗакладки(НомерЗакладки, ЗначениеЗакладки) 
	Если ЗначениеЗакладки = 1 Тогда
		Форма.ИспользоватьСлой("Основной, НачальныеЗначения", 2);
		
	ИначеЕсли ЗначениеЗакладки = 2 Тогда
		Форма.ИспользоватьСлой("Основной, РежимыРаботы", 2);
		Активизировать("кнЗакрыть");

	ИначеЕсли ЗначениеЗакладки = 3 Тогда
		Форма.ИспользоватьСлой("Основной, РежимПересчетаПрихДок", 2);
		Активизировать("кнЗакрыть");
		
		Форма.ПодписьОсновнаяЦенаПриобретения.Видимость(?(Константа.ИспользоватьТипыЦен = Да, 1, 0));
		Форма.ОсновнаяЦенаПриобретения.Видимость(?(Константа.ИспользоватьТипыЦен = Да, 1, 0));
			
	ИначеЕсли ЗначениеЗакладки = 4 Тогда
		Форма.ИспользоватьСлой("Основной, РежимПересчетаРасхДок", 2);
		
	ИначеЕсли ЗначениеЗакладки = 5 Тогда
		Форма.ИспользоватьСлой("Основной, УРИБ", 2);
		
	ИначеЕсли ЗначениеЗакладки = 6 Тогда
		Форма.ИспользоватьСлой("Основной, ПрочиеСведения", 2);
	КонецЕсли;
КонецПроцедуры
