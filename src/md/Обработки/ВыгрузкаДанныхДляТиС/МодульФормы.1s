////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ
// 

Перем	гСтрПуть;
Перем	гИмяФайла;

Перем	гXMLАнализатор;
Перем	гПравила;
Перем	гТабОбъектов;
 
Перем	гПутьОбъекта_КомпонентаV7plus;
Перем	гПутьОбъекта_УниверсальнаяОбработкаВыгрузки;
Перем	гПутьОбъекта_ПравилаКонвертации;


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ МОДУЛЯ
//

Функция НайтиПервыйСуществующийФайл(СписокВозможныхМест)
	
	Для Сч = 1 По СписокВозможныхМест.РазмерСписка() Цикл
		ПолноеИмя	=	СписокВозможныхМест.ПолучитьЗначение(Сч);
		Если Фс.СуществуетФайл(ПолноеИмя) = 1 Тогда	Возврат(ПолноеИмя)	КонецЕсли;
	КонецЦикла;

	Возврат("");

КонецФункции		//	НайтиПервыйСуществующийФайл()

//******************************************************************************

Функция КаталогРодитель(Знач Стр)
	                            
	Если ПустоеЗначение(Стр) = 1 Тогда Возврат("") КонецЕсли;
	
	Стр	=	СокрЛП(Стр);
	
	Если Прав(Стр, 1) = "\" Тогда
		Стр = Лев(Стр, СтрДлина(Стр)-1);
	КонецЕсли;
	
	Если Найти(Стр, "\") > 0 Тогда
		Пока 1=1 Цикл
			Если Прав(Стр, 1) = "\" Тогда Прервать КонецЕсли;
			Стр = Лев(Стр, СтрДлина(Стр)-1);
		КонецЦикла;
	КонецЕсли;

	Возврат(Стр);
	
КонецФункции

//******************************************************************************

Процедура НачальнаяИнициализация()
	
	РасположениеФайла(гСтрПуть, гИмяФайла);
	
	////////////////////////////////////////////////////////////////////////////////////////////////////
	//	Поиск универсальной обработки выгрузки
	                               
	Если Метаданные.Обработка("ВыгрузкаДанных").Выбран() = 1 Тогда
		гПутьОбъекта_УниверсальнаяОбработкаВыгрузки	=	"Обработка.ВыгрузкаДанных";
	Иначе
		СписокВозможныхМест	=	СоздатьОбъект("СписокЗначений");
		СписокВозможныхМест.ДобавитьЗначение(	гСтрПуть					+	"CDExport.ert"	);
		СписокВозможныхМест.ДобавитьЗначение(	КаталогРодитель(гСтрПуть)	+	"CDExport.ert"	);
		СписокВозможныхМест.ДобавитьЗначение(	КаталогИБ()	+	"ExtForms\"	+	"CDExport.ert"	);
		СписокВозможныхМест.ДобавитьЗначение(	КаталогИБ()					+	"CDExport.ert"	);
		СписокВозможныхМест.ДобавитьЗначение(	КаталогПрограммы()			+	"CDExport.ert"	);
		
		гПутьОбъекта_УниверсальнаяОбработкаВыгрузки	=	НайтиПервыйСуществующийФайл(СписокВозможныхМест);
	КонецЕсли;
	                                                                                                    
	
	////////////////////////////////////////////////////////////////////////////////////////////////////
	//	Поиск внешней компоненты V7Plus.dll
	
	СписокВозможныхМест	=	СоздатьОбъект("СписокЗначений");
	СписокВозможныхМест.ДобавитьЗначение(	КаталогИБ()					+	"v7plus.dll"	);
	СписокВозможныхМест.ДобавитьЗначение(	КаталогПрограммы()			+	"v7plus.dll"	);
	СписокВозможныхМест.ДобавитьЗначение(	КаталогИБ()	+	"ExtForms\"	+	"v7plus.dll"	);
	СписокВозможныхМест.ДобавитьЗначение(	гСтрПуть					+	"v7plus.dll"	);
	
	гПутьОбъекта_КомпонентаV7plus				=	НайтиПервыйСуществующийФайл(СписокВозможныхМест);
	
	
	////////////////////////////////////////////////////////////////////////////////////////////////////
	//	Поиск правил конвертации
	
	СписокВозможныхМест	=	СоздатьОбъект("СписокЗначений");
	СписокВозможныхМест.ДобавитьЗначение(	КаталогИБ() 				+	"ExtForms\RAc4_Tr9.xml"		);
	СписокВозможныхМест.ДобавитьЗначение(	КаталогИБ() 				+	"RAc4_Tr9.xml"				);
	СписокВозможныхМест.ДобавитьЗначение(	гСтрПуть					+	"RAc4_Tr9.xml"				);
	СписокВозможныхМест.ДобавитьЗначение(	КаталогРодитель(гСтрПуть)	+	"RAc4_Tr9.xml"				);
	
	гПутьОбъекта_ПравилаКонвертации				=	НайтиПервыйСуществующийФайл(СписокВозможныхМест);

	
	////////////////////////////////////////////////////////////////////////////////////////////////////
	//	Инициализация модульных переменных и переменных формы

	ФормИмяФайлаДанных	=	КаталогПользователя()	+	"Ac4_Tr9.xml";
	
	гТабОбъектов		=	СоздатьОбъект("ТаблицаЗначений");
	гТабОбъектов.НоваяКолонка("ИдПравила");
	гТабОбъектов.НоваяКолонка("Тип");
	гТабОбъектов.НоваяКолонка("Вид");
	гТабОбъектов.НоваяКолонка("СписокОбъектов");
	
КонецПроцедуры		//	НачальнаяИнициализация()
              
//******************************************************************************

Функция ЗагрузитьПравилаКонвертации()
	                                        
	Состояние("Выполняется загрузка и проверка файла правил конвертации...");
	
	гПравила		=	гXMLАнализатор.СоздатьДокумент();
	
	Попытка
		гПравила.Загрузить(гПутьОбъекта_ПравилаКонвертации);
	Исключение
		Предупреждение(ОписаниеОшибки());
		Возврат(0);
	КонецПопытки;
	
	Возврат(1);
	
КонецФункции		//	ЗагрузитьПравилаКонвертации()
    


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ, ВЫЗЫВАЕЫЕ ИЗ ФОРМУЛ ЭЛЕМЕНТОВ ДИАЛОГА

Процедура ОткрытьФайлДляПросмотра(ИмяФайла)
	
	Если ФС.СуществуетФайл(ИмяФайла) = 1 Тогда 
		ЗапуститьПриложение(ИмяФайла);
	Иначе 
		Предупреждение("Файл с таким именем не существует!");					
	КонецЕсли;    
	
КонецПроцедуры		//	ОткрытьФайлДляПросмотра()

//******************************************************************************

Процедура ВыборФайла(ИмяФайла, Фильтр="xml")
	
	Каталог = "";
	Стр = "Файл данных (*." + Фильтр + ")|*." + Фильтр + "";

	Если ФС.ВыбратьФайл(0, ИмяФайла, Каталог, "Выберите файл", Стр, Фильтр, ) = 1 Тогда
	    ИмяФайла = Каталог + ИмяФайла;
	КонецЕсли;
	
КонецПроцедуры		//	ВыборФайла()

//******************************************************************************

Процедура ПриНачалеВыбораЗначения(ИдЭлементаДиалога, Фл)
    
	Если	ИдЭлементаДиалога = "ФормИмяФайлаДанных"	Тогда
	         
		ВыборФайла(ФормИмяФайлаДанных, "xml");
		
	КонецЕсли;
	
КонецПроцедуры		//	ПриНачалеВыбораЗначения()

//******************************************************************************
                                                                                
Процедура Настройка()
	
	Если ПустоеЗначение(гПравила) = 1 Тогда
		Если ЗагрузитьПравилаКонвертации() = 0 Тогда Возврат КонецЕсли;
	КонецЕсли;
	
	СписокПараметров	=	СоздатьОбъект("СписокЗначений");
	СписокПараметров.Установить("ИмяФайлаПравил",			гПутьОбъекта_ПравилаКонвертации);
	СписокПараметров.Установить("ИмяФайлаДанных",			ФормИмяФайлаДанных);
	СписокПараметров.Установить("ВыгружатьТолькоУказанные",	0);
	СписокПараметров.Установить("ВключатьПравилаВФайл",		0);
	СписокПараметров.Установить("НеОбрабатыватьПроведение",	1);
	СписокПараметров.Установить("БезОткрытияФормы",			0);
	СписокПараметров.Установить("ПравилаКонвертации",		гПравила);
	СписокПараметров.Установить("ФормДатаКон",				РабочаяДата());
	СписокПараметров.Установить("ТаблицаОбъектов",			гТабОбъектов);
	
	
	Если Найти(гПутьОбъекта_УниверсальнаяОбработкаВыгрузки, ".ert") > 0 Тогда
		ОткрытьФорму("Отчет", СписокПараметров, гПутьОбъекта_УниверсальнаяОбработкаВыгрузки);
	Иначе
		ОткрытьФорму(гПутьОбъекта_УниверсальнаяОбработкаВыгрузки, СписокПараметров);
	КонецЕсли;
	
	
	СписокПараметров.Форма.ИспользоватьЗакладки(0);
	СписокПараметров.Форма.ИспользоватьСлой("Период", 0);
	СписокПараметров.Форма.Заголовок("Настройка выгружаемых объектов", 0);
	СписокПараметров.Форма.ПанельИнструментов(0);
	//СписокПараметров.Форма.ФормИмяФайлаПравил.Доступность(0);
	СписокПараметров.Форма.ФормИмяФайлаДанных.Доступность(0);
	СписокПараметров.Форма.ФормРамкаФайлы.Видимость(0);
	СписокПараметров.Форма.кнЗагрузитьПравила.Видимость(0);
	СписокПараметров.Форма.кнВыгрузитьДанные.Видимость(0);

КонецПроцедуры

//******************************************************************************
                                                                                                    
Процедура ВыгрузитьДанные()
	                  
	Если ПустоеЗначение(ФормИмяФайлаДанных) = 1 Тогда
		Предупреждение("Не указано имя файла выгрузки!"); Возврат;
	КонецЕсли;
	               
	Если ПустоеЗначение(гПравила) = 1 Тогда
		Если ЗагрузитьПравилаКонвертации() = 0 Тогда Возврат КонецЕсли;
	КонецЕсли;
	
	
	СписокПараметров	=	СоздатьОбъект("СписокЗначений");
	СписокПараметров.Установить("ИмяФайлаПравил",			гПутьОбъекта_ПравилаКонвертации);
	СписокПараметров.Установить("ИмяФайлаДанных",			ФормИмяФайлаДанных);
	СписокПараметров.Установить("ВыгружатьТолькоУказанные",	0);
	СписокПараметров.Установить("ВключатьПравилаВФайл",		0);
	СписокПараметров.Установить("НеОбрабатыватьПроведение",	1);
	СписокПараметров.Установить("БезОткрытияФормы",			1);
	СписокПараметров.Установить("ПравилаКонвертации",		гПравила);
	СписокПараметров.Установить("ФормДатаКон",				РабочаяДата());
	СписокПараметров.Установить("ТаблицаОбъектов",			гТабОбъектов);
	
	Если Найти(гПутьОбъекта_УниверсальнаяОбработкаВыгрузки, ".ert") > 0 Тогда
		ОткрытьФорму("Отчет", СписокПараметров, гПутьОбъекта_УниверсальнаяОбработкаВыгрузки);
	Иначе
		ОткрытьФорму(гПутьОбъекта_УниверсальнаяОбработкаВыгрузки, СписокПараметров);
	КонецЕсли;
	
КонецПроцедуры		//	ВыгрузитьДанные()

//******************************************************************************
                                                                                
              

////////////////////////////////////////////////////////////////////////////////
// ПРЕДОПРЕДЕЛЕННЫЕ ПРОЦЕДУРЫ
// 

Процедура ПриОткрытии()
	
	Если ЗагрузитьВнешнююКомпоненту(гПутьОбъекта_КомпонентаV7plus) <> 1	Тогда
		Предупреждение("Компонента v7plus.dll не найдена!");
		СтатусВозврата(0);	Возврат;
	КонецЕсли;
	
	гXMLАнализатор		=	СоздатьОбъект("AddIn.XMLParser");
	ВерсияАнализатора	=	гXMLАнализатор.ВерсияАнализатора;
	Если ВерсияАнализатора <> "2.0" Тогда
		Предупреждение("Для работы с программой необходимо обновить внешнюю компоненту v7plus.dll !");
		СтатусВозврата(0);	Возврат;
	КонецЕсли;
	
	Если ПустоеЗначение(гПутьОбъекта_ПравилаКонвертации) = 1 Тогда
		Предупреждение("Не найден файл правил конвертации: RAc4_Tr9.xml!");
		СтатусВозврата(0);	Возврат;
	КонецЕсли;
	
КонецПроцедуры		//	ПриОткрытии()

    

////////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ
// 

НачальнаяИнициализация();
    

//******************************************************************************


