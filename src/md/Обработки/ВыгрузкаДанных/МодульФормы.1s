Перем	гСтрПуть;
Перем	гИмяФайла;

Перем	ТабОбласть1;
Перем	ТабОбласть2;
Перем	ТабОбласть3;
Перем	ТабОбласть4;

Перем	гXMLАнализатор;
Перем	гПравила;
 
Перем	гПутьОбъекта_КомпонентаV7plus;
Перем	гПутьОбъекта_ДаннаяОбработка;
Перем	гПутьОбъекта_Обработка_ПодборОбъектов;

Перем	гПутьОбъекта_УниверсальныйКод;
Перем	гПутьОбъекта_ИсполняющаяОбработка;
Перем	гПутьОбъекта_ИсполняемыйКод;

Перем	гНомерКолонки_Условия;
Перем	гНомерКолонки_ПараметрыОбмена;

Перем	гТабОбъектов;	//	таблица интерактивно заданных объектов выгрузки

Перем	гСписокПараметров;

Перем	гФлаг_ПравилаКонвертацииЗагружены;

//--------------------------------------------------------------------------------------------------

Процедура НачальнаяИнициализация()			Далее

//--------------------------------------------------------------------------------------------------

Функция НайтиПервыйСуществующийФайл(СписокВозможныхМест)
	
	Для Сч = 1 По СписокВозможныхМест.РазмерСписка() Цикл
		ПолноеИмя	=	СписокВозможныхМест.ПолучитьЗначение(Сч);
		Если Фс.СуществуетФайл(ПолноеИмя) = 1 Тогда	Возврат(ПолноеИмя)	КонецЕсли;
	КонецЦикла;

	Возврат("");

КонецФункции		//	НайтиПервыйСуществующийФайл()

//--------------------------------------------------------------------------------------------------
                                                                                                    
Функция ПолучитьЗначениеКолонки(Таб, ИдКолонкиПоиска, ЗнПоиска, ИдКолонкиВозврата)

	НомСтр = "";
	Если Таб.НайтиЗначение(ЗнПоиска, НомСтр, ИдКолонкиПоиска) = 0 Тогда
		Возврат "";
	Иначе
		Возврат Таб.ПолучитьЗначение(НомСтр, ИдКолонкиВозврата);
	КонецЕсли;
	
КонецФункции

//--------------------------------------------------------------------------------------------------

Функция КаталогРодитель(Знач Стр)
	                            
	Если ПустоеЗначение(Стр) = 1 Тогда Возврат("") КонецЕсли;
	
	Стр	=	СокрЛП(Стр);
	
	Если Прав(Стр, 1) = "\" Тогда
		Стр = Лев(Стр, СтрДлина(Стр)-1);
	КонецЕсли;
	
	Если Найти(Стр, "\") > 0 Тогда
		Пока 1=1 Цикл
			Если Прав(Стр, 1) = "\" Тогда Прервать КонецЕсли;
			Стр = Лев(Стр, СтрДлина(Стр)-1);
		КонецЦикла;
	КонецЕсли;

	Возврат(Стр);
	
КонецФункции		//	КаталогРодитель()

//--------------------------------------------------------------------------------------------------

Процедура ОписаниеОбъектовПравила(Правило, ТипИсточника="", ВидИсточника="", ТипПриемника="", ВидПриемника="")
             
	Если ПустоеЗначение(Правило) = 1 Тогда Возврат КонецЕсли;
	
	ОбъектИсточник		=	Правило.ВыбратьУзел("ОбъектИсточник");
	ОбъектПриемник		=	Правило.ВыбратьУзел("ОбъектПриемник");
	
	Если ПустоеЗначение(ОбъектИсточник) = 0 Тогда
		ТипИсточника	=	ОбъектИсточник.ПолучитьАтрибут("Тип");
		ВидИсточника	=	ОбъектИсточник.ПолучитьАтрибут("Вид");
	КонецЕсли;
	Если ПустоеЗначение(ОбъектПриемник) = 0 Тогда
		ТипПриемника	=	ОбъектПриемник.ПолучитьАтрибут("Тип");
		ВидПриемника	=	ОбъектПриемник.ПолучитьАтрибут("Вид");
	КонецЕсли;
	
КонецПроцедуры		//	ОписаниеОбъектовПравила()

//--------------------------------------------------------------------------------------------------

Процедура ПоказатьТаблицу()
	         
	Если ПустоеЗначение(гФлаг_ПравилаКонвертацииЗагружены) = 1 Тогда Возврат КонецЕсли;
	                            
	
	ПравилаОбмена			=	гПравила.ВыбратьУзел("ПравилаОбмена");
	ИмяКонвертации			=	ПравилаОбмена.ПолучитьАтрибут("Имя");
	ПечИмяКонвертации		=	?(ПустоеЗначение(ИмяКонвертации)=1, "Правила конвертации", СокрЛП(ИмяКонвертации));
	ПечИмяКонвертации		=	ПечИмяКонвертации	+	"
								|Правила сформированы:   "	+	СокрЛП(ПравилаОбмена.ПолучитьАтрибут("ДатаВремяОбновления"));
	КомментарийКонвертации	=	ПравилаОбмена.ПолучитьАтрибут("Комментарий");
	
	Таблица.ИсходнаяТаблица("Таблица1");
	Таблица.Очистить();
	Таблица.ВывестиСекцию("Кнопки|" + "Правило_" + ФормПредставлениеПравил);
	Таблица.ПрисоединитьСекцию("Кнопки|Параметры");
	                                                                
	//---------------------------
	    
	ФормТабПараметровОбмена.УдалитьСтроки();
    Выборка	=	гПравила.ВыбратьУзлы("//ПараметрыЗагрузки");
    Для Сч = 0 По Выборка.КоличествоУзлов() - 1 Цикл
    	Параметры	=	Выборка.ПолучитьУзел(Сч);
		
		ФормТабПараметровОбмена.НоваяСтрока();
		
		ФормТабПараметровОбмена.Ид					=	Параметры.ПолучитьАтрибут("Ид");
		ФормТабПараметровОбмена.Имя					=	Параметры.ПолучитьАтрибут("Имя");
		ФормТабПараметровОбмена.ЗамещатьНайденные	=	1 + Параметры.ПолучитьАтрибут("ЗамещатьНайденные");
		ФормТабПараметровОбмена.НовыеНеСоздавать	=	1 + Параметры.ПолучитьАтрибут("НовыеНеСоздавать");
	КонецЦикла;
	
	//---------------------------
	
	СчСтрок	=	9;
	
    ВыборкаПравил		=	гПравила.ВыбратьУзлы("//Правило[(not(@НеПоказывать)) or (@НеПоказывать = 0)]");
    Для СчПравил = 0 По ВыборкаПравил.КоличествоУзлов() - 1 Цикл
    	Правило					=	ВыборкаПравил.ПолучитьУзел(СчПравил);
		    
		Расшифровка				=	Правило.ПолучитьАтрибут("Ид");
		Условия					=	Правило.ВыбратьУзел("Условия");
		ПечКомментарий			=	Правило.ПолучитьАтрибут("Комментарий");
		ПоСсылкам				=	Число(Правило.ПолучитьАтрибут("ПоСсылкам"));
		ПечВыгружать			=	?(ПустоеЗначение(ПоСсылкам)	=1,	"Все",	"По ссылкам");
		ПечУсловие				=	?(ПустоеЗначение(Условия)	=1,	"",		Условия.ПолучитьАтрибут("Имя"));
		
		ИдПараметровОбмена			=	Правило.ПолучитьАтрибут("ПараметрыЗагрузки");
		Если ПустоеЗначение(ИдПараметровОбмена) = 0 Тогда
			ПечПараметрыОбмена	=	ПолучитьЗначениеКолонки(ФормТабПараметровОбмена, "Ид", ИдПараметровОбмена, "Имя");
		КонецЕсли;
		   
		СчСтрок			=	СчСтрок + 1;
		
		Если ФормПредставлениеПравил = 1 Тогда
			ПечПравило				=	Правило.ПолучитьАтрибут("Имя");
			гНомерКолонки_Условия	=	3;
		Иначе
			гНомерКолонки_Условия	=	6;
			ПечТипИсточника="";	ПечВидИсточника="";	ПечТипПриемника="";	ПечВидПриемника="";
			ОписаниеОбъектовПравила(Правило, ПечТипИсточника, ПечВидИсточника, ПечТипПриемника, ПечВидПриемника);
		КонецЕсли;
		
		Таблица.ВывестиСекцию("Правило|" + "Правило_" + ФормПредставлениеПравил);
		Таблица.ПрисоединитьСекцию("Правило|Параметры");
		                                             
		НомерСтр	=	"";
		Если гТабОбъектов.НайтиЗначение(Расшифровка, НомерСтр, "ИдПравила") = 1 Тогда
			гТабОбъектов.ПолучитьСтрокуПоНомеру(НомерСтр);
			Если ПустоеЗначение(гТабОбъектов.СписокОбъектов) = 0 Тогда
				Таблица.Область(СчСтрок, гНомерКолонки_Условия).Текст	=	"Задан список выгружаемых объектов";
				Таблица.Область(СчСтрок, гНомерКолонки_Условия).ЦветТекста(255, 0, 0);
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	//---------------------------
	
	Таблица.Показать();
	Активизировать("Таблица", 0);
	
КонецПроцедуры		//	ПоказатьТаблицу()

//--------------------------------------------------------------------------------------------------

Функция ПроверитьИсходныеДанные(Этап="")
	
	Если Найти("Начало,ЗагрузкаПравил", Этап) > 0 Тогда
		Если	ПустоеЗначение(ФормИмяФайлаПравил)			=	1	Тогда	Предупреждение("Не выбран файл правил конвертации!");
			Возврат(0);
		КонецЕсли;
		
		Если	ФС.СуществуетФайл(ФормИмяФайлаПравил)		=	0	Тогда	Предупреждение("Указанный файл правил не существует!");
			Возврат(0);
		КонецЕсли;
	КонецЕсли;
	
	Если Найти("Начало", Этап) > 0 Тогда
		Если	ПустоеЗначение(ФормИмяФайлаДанных)			=	1	Тогда	Предупреждение("Не выбран файл данных!");
			Возврат(0);
		КонецЕсли;
		
		Если (ФормФлНеВыгружатьБухИтоги = 0) И (Метаданные.ПланСчетов(1).Выбран() = 1) Тогда
			Если КонецРассчитанногоПериодаБИ() < ФормДатаРасчетаБухИтогов Тогда
				СтрВопрос	=	"За указанный период бухгалтерские итоги не расчитаны!
								|Дата конца расчитанного периода БИ: " + КонецРассчитанногоПериодаБИ() + "
								|Выгружать остатки на конец расчитанного периода ?";
				Если Вопрос(СтрВопрос, 4)  <> 6 Тогда
					Возврат(0);
				Иначе
					ФормДатаРасчетаБухИтогов	=	КонецРассчитанногоПериодаБИ();
				КонецЕсли; 
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат(1);
	
КонецФункции

//--------------------------------------------------------------------------------------------------

Функция ЗагрузитьПравилаКонвертации(Обновить=0)
	                                        
	Если ПустоеЗначение(Обновить) = 1 Тогда
		Если гФлаг_ПравилаКонвертацииЗагружены = 1 Тогда Возврат(1) КонецЕсли;
	КонецЕсли;
	
	Если ПроверитьИсходныеДанные("ЗагрузкаПравил") = 0 Тогда Возврат(0) КонецЕсли;
	
	Состояние("Выполняется загрузка и проверка файла правил конвертации...");
	
	
	Если ПустоеЗначение(гПравила) = 1 Тогда
		гПравила		=	гXMLАнализатор.СоздатьДокумент();
		
		Если Число(гXMLАнализатор.ВерсияБазовогоАнализатора) = 4 Тогда
			гПравила.setProperty("NewParser", 1);
			//гПравила.setProperty("SelectionLanguage",	"XPath");
		КонецЕсли;
	КонецЕсли;
	
	
	Попытка
		гПравила.Загрузить(ФормИмяФайлаПравил);
	Исключение
		Предупреждение(ОписаниеОшибки());
		Возврат(0);
	КонецПопытки;
	
	
	гФлаг_ПравилаКонвертацииЗагружены = 1;
	
	ПоказатьТаблицу();
	
	Возврат(1);
	
КонецФункции		//	ЗагрузитьПравилаКонвертации()
    
//--------------------------------------------------------------------------------------------------ь

Процедура ИнициализироватьСистемныеОбластиТаблицы()

	ТабОбласть2	=	Таблица.Область(1, 1, 1, 2);
	ТабОбласть2.Объединить();
	ТабОбласть2.ГоризонтальноеПоложение(3);
	ТабОбласть2.Контроль(1);
	ТабОбласть2.ВысотаСтроки(18);
	ТабОбласть2.РамкаОбвести(2, 2, 2, 2);
	ТабОбласть2.Текст	=	"Начало выгрузки  -  " + ТекущееВремя();
	
	ТабОбласть3	=	Таблица.Область(1, 3, 1, 4);
	ТабОбласть3.Объединить();
	ТабОбласть3.ГоризонтальноеПоложение(3);
	ТабОбласть3.Контроль(1);
	ТабОбласть3.ВысотаСтроки(18);
	ТабОбласть3.РамкаОбвести(2, 2, 2, 2);
	ТабОбласть3.Текст	=	"Конец выгрузки -  ";

	ТабОбласть1	=	Таблица.Область(2, 1, 2, 4);
	ТабОбласть1.Объединить();
	ТабОбласть1.ГоризонтальноеПоложение(3);
	ТабОбласть1.Контроль(1);
	ТабОбласть1.ВысотаСтроки(22);
	ТабОбласть1.Текст	=	"Обрабатывается правило:";
	
	ТабОбласть4	=	Таблица.Область(3, 1, 3, 4);
	ТабОбласть4.Объединить();
	ТабОбласть4.ГоризонтальноеПоложение(3);
	ТабОбласть4.Контроль(1);
	ТабОбласть4.ВысотаСтроки(22);
	ТабОбласть4.Текст	=	"";

	Таблица.Показать();
	
КонецПроцедуры

//--------------------------------------------------------------------------------------------------

Функция ВзятьКонтекст(Конт)
                               
	Возврат(Конт);
	
КонецФункции

//--------------------------------------------------------------------------------------------------

Процедура ВыгрузитьДанные( БезОткрытияФормы=0 )

	ИнициализироватьСистемныеОбластиТаблицы();
	
	Если ПроверитьИсходныеДанные("Начало")	=	0 Тогда	Возврат	КонецЕсли;
	Если ЗагрузитьПравилаКонвертации()		=	0 Тогда	Возврат	КонецЕсли;
	
	ПравилаОбмена	=	гПравила.ВыбратьУзел("ПравилаОбмена");
	
	Обработка		=	ПравилаОбмена.ВыбратьУзел("Инструкция[(@Использование=""ПриВыгрузке"")and(@ВидИнструкции=""Обработка"")]");
	
	Если ПустоеЗначение(Обработка) = 0 Тогда
                                            
		ИмяИсполняющейОбработки	=	СокрЛП(Обработка.ПолучитьАтрибут("Текст"));
		
		СписокВозможныхМест	=	СоздатьОбъект("СписокЗначений");
		СписокВозможныхМест.ДобавитьЗначение(	ИмяИсполняющейОбработки	);
		СписокВозможныхМест.ДобавитьЗначение(	КаталогРодитель(ФормИмяФайлаПравил)	+	ИмяИсполняющейОбработки	);
		СписокВозможныхМест.ДобавитьЗначение(	гСтрПуть							+	ИмяИсполняющейОбработки	);
		СписокВозможныхМест.ДобавитьЗначение(	гСтрПуть	+	"CDRules\"			+	ИмяИсполняющейОбработки	);
		СписокВозможныхМест.ДобавитьЗначение(	КаталогИБ()	+	"ExtForms\"			+	ИмяИсполняющейОбработки	);
		СписокВозможныхМест.ДобавитьЗначение(	КаталогИБ()							+	ИмяИсполняющейОбработки	);
		СписокВозможныхМест.ДобавитьЗначение(	КаталогПрограммы()					+	ИмяИсполняющейОбработки	);
		
		гПутьОбъекта_ИсполняющаяОбработка	=	НайтиПервыйСуществующийФайл(СписокВозможныхМест);
		
		Если ПустоеЗначение(гПутьОбъекта_ИсполняющаяОбработка) = 1 Тогда
			Предупреждение("Не найдена исполняющая обработка выгрузки!");
			Возврат;
		КонецЕсли;
		
	Иначе
		
		Если ПустоеЗначение(гПутьОбъекта_УниверсальныйКод) = 0 Тогда
			
			ДопПеременные		=	ПравилаОбмена.ВыбратьУзел("Инструкция[(@Использование=""ПриВыгрузке"")and(@ВидИнструкции=""Переменные"")]");
			ДопПреобразования	=	ПравилаОбмена.ВыбратьУзел("Инструкция[(@Использование=""ПриВыгрузке"")and(@ВидИнструкции=""Преобразования"")]");
			
			Текст	=	СоздатьОбъект("Текст");
			Текст.Открыть(гПутьОбъекта_УниверсальныйКод);
			Если ПустоеЗначение(ДопПеременные) = 0 Тогда
				Текст.ВставитьСтроку(1, ДопПеременные.ПолучитьАтрибут("Текст"));
			КонецЕсли;
			Если ПустоеЗначение(ДопПреобразования) = 0 Тогда
				Текст.ДобавитьСтроку(ДопПреобразования.ПолучитьАтрибут("Текст"));
			Иначе
				Текст.ДобавитьСтроку("Функция ДополнительныеПреобразования(Вид="""", Ид="""", Источник="""", Приемник="""", СписокПараметровПравила="""")
									|	Возврат(0);
									|КонецФункции");
			КонецЕсли;
			Текст.Записать(гПутьОбъекта_ИсполняемыйКод);
			Текст = "";
			
		КонецЕсли;
		
	КонецЕсли;
	                           
	СписокПараметров	=	СоздатьОбъект("СписокЗначений");
	СписокПараметров.ДобавитьЗначение(ВзятьКонтекст(Контекст),	"Контекст");
	СписокПараметров.ДобавитьЗначение(гПравила,					"гПравила");
	СписокПараметров.ДобавитьЗначение(гТабОбъектов,				"гТабОбъектов");
	
	СписокПараметров.ДобавитьЗначение(БезОткрытияФормы,			"БезОткрытияФормы");
	
	СписокПараметров.ДобавитьЗначение(гСписокПараметров,		"СписокПараметров");
	
	
	Если Найти(Нрег(гПутьОбъекта_ИсполняющаяОбработка), ".ert") > 0 Тогда
		ОткрытьФорму("Отчет", СписокПараметров, гПутьОбъекта_ИсполняющаяОбработка);
	Иначе
		ОткрытьФорму(гПутьОбъекта_ИсполняющаяОбработка, СписокПараметров);
	КонецЕсли;

	
КонецПроцедуры		//	ВыгрузитьДанные()
            
//--------------------------------------------------------------------------------------------------

Процедура ПриВыборе(ЭлементДиалога)
                                  
	Если		ЭлементДиалога = "ФормФлВыгружатьТолькоИнтерактивные" Тогда
	КонецЕсли;

КонецПроцедуры

//--------------------------------------------------------------------------------------------------
//	Расшифровка	-  идентификатор правила конвертации (по щелчку на правиле)

Процедура ОбработкаЯчейкиТаблицы(Расшифровка, СтандартнаяОбработка, Конт, Ячейка)
	
	Если ПустоеЗначение(гПравила) = 1 Тогда Возврат КонецЕсли;
	
	КолПоз					 	=	Найти(Ячейка, "C");
	СтрокаЯчейки				=	Число(Сред(Ячейка, 2, КолПоз-2));
	КолонкаЯчейки				=	Число(Сред(Ячейка, КолПоз+1, СтрДлина(Ячейка)-КолПоз));
	
	
	Если Расшифровка = "СпособВыгрузки" Тогда
		СтандартнаяОбработка	=	0;
		СписокЗначений			=	СоздатьОбъект("СписокЗначений");
		СписокЗначений.ДобавитьЗначение(0, "Установить для всех показываемых правил:   'Выгружать все'");
		СписокЗначений.ДобавитьЗначение(1, "Установить для всех показываемых правил:   'Только по ссылкам'");
		Зн  = "";
		Если СписокЗначений.ВыбратьЗначение(Зн, "", , , 1) = 0 Тогда Возврат КонецЕсли;
	    ВыборкаПравил		=	гПравила.ВыбратьУзлы("//Правило[(not(@НеПоказывать)) or (@НеПоказывать = 0)]");
	    Для СчПравил = 0 По ВыборкаПравил.КоличествоУзлов() - 1 Цикл
	    	Правило			=	ВыборкаПравил.ПолучитьУзел(СчПравил);
			Правило.УстановитьАтрибут("ПоСсылкам", Зн);
		КонецЦикла;
		ПоказатьТаблицу();
		Возврат;
	КонецЕсли;
	
	
	Попытка
		Правило					=	гПравила.ВыбратьУзел("//Правило[@Ид=""" + Расшифровка + """]");
	Исключение
		СтандартнаяОбработка	=	1;
		Возврат;
	КонецПопытки;

	
	СтандартнаяОбработка		=	ПустоеЗначение(Правило);
	
	Если СтандартнаяОбработка = 1 Тогда	Возврат КонецЕсли;
	                                                                                           
	ТипИсточника="";	ВидИсточника="";	ТипПриемника="";	ВидПриемника="";
	ОписаниеОбъектовПравила(Правило, ТипИсточника, ВидИсточника, ТипПриемника, ВидПриемника);
	
	
	Если (КолонкаЯчейки = гНомерКолонки_Условия - 1) И (Найти("Справочник,Документ,Константа,Календарь", ТипПриемника) > 0) Тогда
		ВремПоСсылкам = 1 - Число(Правило.ПолучитьАтрибут("ПоСсылкам"));
		Правило.УстановитьАтрибут("ПоСсылкам", ВремПоСсылкам);
		Таблица.Область(СтрокаЯчейки, КолонкаЯчейки).Текст	=	?(ПустоеЗначение(ВремПоСсылкам)	=1,	"Все",	"По ссылкам");
		Таблица.Показать();
		Возврат;
	КонецЕсли;

                                                       
	//-------	Выбор комбинации параметров обмена из списка	---------
	
	Если (КолонкаЯчейки = гНомерКолонки_ПараметрыОбмена) И (Найти("Справочник,Документ", ТипПриемника) > 0) Тогда
		СписокПараметровОбмена	=	СоздатьОбъект("СписокЗначений");
		ФормТабПараметровОбмена.ВыбратьСтроки();
		Пока ФормТабПараметровОбмена.ПолучитьСтроку() = 1 Цикл
			СписокПараметровОбмена.ДобавитьЗначение(ФормТабПараметровОбмена.Ид, ФормТабПараметровОбмена.Имя);
		КонецЦикла;
		ИдПараметровОбмена  = "";
		Если СписокПараметровОбмена.ВыбратьЗначение(ИдПараметровОбмена, "", , , 1) = 0 Тогда Возврат КонецЕсли;
		Правило.УстановитьАтрибут("ПараметрыЗагрузки", ИдПараметровОбмена);
		Таблица.Область(СтрокаЯчейки, КолонкаЯчейки).Текст	=	ПолучитьЗначениеКолонки(ФормТабПараметровОбмена, "Ид", ИдПараметровОбмена, "Имя");
		Таблица.Показать();
		Возврат;
	КонецЕсли;
	
	
	Если ПустоеЗначение(ТипИсточника) = 1 Тогда Возврат КонецЕсли;


	НомСтр	=	"";
	Если гТабОбъектов.НайтиЗначение(Расшифровка, НомСтр, "ИдПравила") = 0 Тогда
		гТабОбъектов.НоваяСтрока();
		гТабОбъектов.ИдПравила		=	Расшифровка;
		гТабОбъектов.СписокОбъектов	=	СоздатьОбъект("СписокЗначений");
	Иначе
		гТабОбъектов.ПолучитьСтрокуПоНомеру(НомСтр);
	КонецЕсли;
	
	
	СписокОбъектов	=	гТабОбъектов.СписокОбъектов;
	
	     
	Если		ТипИсточника = "Перечисление"	Тогда
		    
		СписокВсехЗначений	=	СоздатьОбъект("СписокЗначений");
		
		ВидПеречисления		=	Перечисление.ПолучитьАтрибут(ВидИсточника);
		ОбъектМД			=	Метаданные.Перечисление(ВидИсточника);
		Для СчЗнач = 1 По ВидПеречисления.КоличествоЗначений() Цикл
			Зн	=	ВидПеречисления.ЗначениеПоНомеру(СчЗнач);
			СписокВсехЗначений.ДобавитьЗначение(Зн, ОбъектМД.Значение(СчЗнач).Представление());
			СписокВсехЗначений.Пометка(СчЗнач, СписокОбъектов.Принадлежит(Зн));
		КонецЦикла;
		
		Если СписокВсехЗначений.ОтметитьЗначения(0, "Отметьте выгружаемые значения") = 0 Тогда Возврат; КонецЕсли;
		
		СписокОбъектов.УдалитьВсе();
		Для Номер = 1 по СписокВсехЗначений.РазмерСписка() Цикл
			Если СписокВсехЗначений.Пометка(Номер) = 1 Тогда
				СписокОбъектов.ДобавитьЗначение(СписокВсехЗначений.ПолучитьЗначение(Номер));
			КонецЕсли;
		КонецЦикла;
		
		Если ПустоеЗначение(СписокОбъектов) = 1 Тогда
			Таблица.Область(СтрокаЯчейки, гНомерКолонки_Условия).Текст	=	"";
		Иначе
			Таблица.Область(СтрокаЯчейки, гНомерКолонки_Условия).Текст	=	"Задан список выгружаемых объектов";
			Таблица.Область(СтрокаЯчейки, гНомерКолонки_Условия).ЦветТекста(255, 0, 0);
		КонецЕсли;
		
		Таблица.Показать();
		
		Возврат;
		
	ИначеЕсли	ТипИсточника = "Счет"			Тогда
		                                                        
		СписокВсехЗначений	=	СоздатьОбъект("СписокЗначений");
		
		Счет = СоздатьОбъект("Счет." + ВидИсточника);
		Счет.ВыбратьСчета();
		Пока Счет.ПолучитьСчет() = 1 Цикл
			Если Счет.ЭтоГруппа() = 1 Тогда Продолжить КонецЕсли;
			Зн	=	Счет.ТекущийСчет();
			СписокВсехЗначений.ДобавитьЗначение(Зн, Счет.Код + " " + Счет.Наименование);
			СписокВсехЗначений.Пометка(СписокВсехЗначений.РазмерСписка(), СписокОбъектов.Принадлежит(Зн));
		КонецЦикла;
		
		Если СписокВсехЗначений.ОтметитьЗначения(0, "Отметьте выгружаемые значения") = 0 Тогда Возврат; КонецЕсли;
		        
		СписокОбъектов.УдалитьВсе();
		Для Номер = 1 по СписокВсехЗначений.РазмерСписка() Цикл
			Если СписокВсехЗначений.Пометка(Номер) = 1 Тогда
				СписокОбъектов.ДобавитьЗначение(СписокВсехЗначений.ПолучитьЗначение(Номер));
			КонецЕсли;
		КонецЦикла;
		
		Если ПустоеЗначение(СписокОбъектов) = 1 Тогда
			Таблица.Область(СтрокаЯчейки, гНомерКолонки_Условия).Текст	=	"";
		Иначе
			Таблица.Область(СтрокаЯчейки, гНомерКолонки_Условия).Текст	=	"Задан список выгружаемых объектов";
			Таблица.Область(СтрокаЯчейки, гНомерКолонки_Условия).ЦветТекста(255, 0, 0);
		КонецЕсли;
		
		Таблица.Показать();
		
		Возврат;
		
	ИначеЕсли		Найти("Справочник,Документ,Операция", ТипИсточника) = 0	Тогда
		Предупреждение("Можно осуществлять интерактивный подбор
						|выгружаемых объектов для следующих типов:
						|
						|""Справочник"",  ""Документ"",  ""Операция"",
						|""Перечисление"", ""Счет""");
		Возврат;
	КонецЕсли;
	                                           
	
	СписокПараметров	=	СоздатьОбъект("СписокЗначений");
	СписокПараметров.ДобавитьЗначение(ТипИсточника,						"Тип");
	СписокПараметров.ДобавитьЗначение(ВидИсточника,						"Вид");
	СписокПараметров.ДобавитьЗначение(1,								"БезГрупп");
	СписокПараметров.ДобавитьЗначение(гТабОбъектов.СписокОбъектов,		"Объекты");
	СписокПараметров.ДобавитьЗначение(СтрокаЯчейки,						"Буфер");
	СписокПараметров.ДобавитьЗначение(гПутьОбъекта_ДаннаяОбработка,		"ИмяВызвавшейФормы");
	
	Если Найти(Нрег(гПутьОбъекта_Обработка_ПодборОбъектов), ".ert") > 0 Тогда
		ОткрытьФорму("Отчет#", СписокПараметров, гПутьОбъекта_Обработка_ПодборОбъектов);
	Иначе
		ОткрытьФорму(гПутьОбъекта_Обработка_ПодборОбъектов + "#", СписокПараметров);
	КонецЕсли;
	
КонецПроцедуры		//	ОбработкаЯчейкиТаблицы()

//--------------------------------------------------------------------------------------------------
                                                                                                    
Процедура ПодготовитьТаблицуВыгружаемыхОбъектов()
    
	Попытка
		гТабОбъектов.ПолучитьПараметрыКолонки("ИдПравила");
	Исключение
		гТабОбъектов.НоваяКолонка("ИдПравила");
	КонецПопытки;
	
	
	Если ПустоеЗначение(гПравила) = 1 Тогда
		Если ЗагрузитьПравилаКонвертации()	=	0 Тогда
			СтатусВозврата(0);
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	
	гТабОбъектов.ВыбратьСтроки();
	Пока гТабОбъектов.ПолучитьСтроку() = 1 Цикл
		              
		Если ПустоеЗначение(гТабОбъектов.ИдПравила) = 0 Тогда Продолжить КонецЕсли;
		
		Тип			=	гТабОбъектов.Тип;
		Вид			=	гТабОбъектов.Вид;
		
		Запрос		=	"//Правило[(ОбъектИсточник/@Тип = """ + Тип + """)";
		
		Если (Найти("Строка,Число,Дата,Операция,Календарь,ВидСубконто,ВидРасчета", Тип) = 0) И (Тип <> "ПланСчетов") Тогда
			Запрос	=	Запрос + "and(ОбъектИсточник/@Вид = """ + Вид + """)";
		КонецЕсли;
		
		Запрос		=	Запрос + "]";
		                     
		ВыбПравило	=	гПравила.ВыбратьУзел(Запрос);
		Если ПустоеЗначение(ВыбПравило) = 0 Тогда
			гТабОбъектов.ИдПравила	=	ВыбПравило.ПолучитьАтрибут("Ид");
		Иначе
			Сообщить("Не найдено правило конвертации объекта: " + Тип + "." + Вид, "!!");
		КонецЕсли;
		
	КонецЦикла;	
	
	//гТабОбъектов.УдалитьКолонку("Тип");
	//гТабОбъектов.УдалитьКолонку("Вид");
	
КонецПроцедуры		//	ПодготовитьТаблицуВыгружаемыхОбъектов()

//--------------------------------------------------------------------------------------------------

Процедура ОткрытьФайлДляПросмотра(ИмяФайла)
	
	Если ФС.СуществуетФайл(ИмяФайла) = 1 Тогда 
		ЗапуститьПриложение(ИмяФайла);
	Иначе 
		Предупреждение("Файл с таким именем не существует!");					
	КонецЕсли;    
	
КонецПроцедуры		//	ОткрытьФайлДляПросмотра()

//--------------------------------------------------------------------------------------------------

Процедура ВыборФайла(ИмяФайла, Фильтр="xml")
	
	Каталог = "";
	Стр = "Файл настройки (*." + Фильтр + ")|*." + Фильтр + "";

	Если ФС.ВыбратьФайл(0, ИмяФайла, Каталог, "Выберите файл", Стр, , ) = 1 Тогда
	    ИмяФайла = Каталог + ИмяФайла;
	КонецЕсли;
	
КонецПроцедуры		//	ВыборФайла()

//--------------------------------------------------------------------------------------------------

Функция ПолучитьИдентификаторКонфигурации()
	
	Ид	=	СокрЛП(Метаданные.Идентификатор);
	
	Возврат(Ид);

КонецФункции		//	ПолучитьИдентификаторКонфигурации()

//--------------------------------------------------------------------------------------------------
                                                                                                    
Функция ВыборИзПеречня()

	Если Фс.СуществуетФайл(ФормИмяФайлаПеречня) = 0 Тогда	Возврат(0)	КонецЕсли;
	        
	СписокДоступныхКонвертаций	=	СоздатьОбъект("СписокЗначений");
	ПереченьКонвертаций			=	гXMLАнализатор.СоздатьДокумент();
	ПереченьКонвертаций.Загрузить(ФормИмяФайлаПеречня);
	
	ИдКонфигурацииИсточника	=	ПолучитьИдентификаторКонфигурации();
	
	Выборка = ПереченьКонвертаций.ВыбратьУзлы("//Конвертация");
	Для Сч = 0 По Выборка.КоличествоУзлов() - 1 Цикл
		Конвертация		=	Выборка.ПолучитьУзел(Сч);
		
		Имя				=	Конвертация.ПолучитьАтрибут("Имя");
		ИдКонфигурации	=	СокрЛП(Конвертация.ПолучитьАтрибут("ИдКонфигурацииИсточника"));
		Каталог			=	Конвертация.ПолучитьАтрибут("Каталог");
		ФайлПравил		=	СокрЛП(Конвертация.ПолучитьАтрибут("ФайлПравил"));
		Описание		=	Конвертация.ПолучитьАтрибут("Описание");
		          
		Если ПустоеЗначение(ФайлПравил) = 1 Тогда Продолжить КонецЕсли;
		
		//--------	Проверяем, предназначена ли конвертация для данной конфигурации	------------
		
		Если	(ПустоеЗначение(ИдКонфигурацииИсточника)	=	0)	И
				(ПустоеЗначение(ИдКонфигурации)				=	0)	И
				(ИдКонфигурации	<>	ИдКонфигурацииИсточника)		Тогда	//	значит конвертация
			Продолжить;														//	не предназначена для данной конфигурации
		КонецЕсли;
		
		
		//--------	Ищем каталог	------------------------------------------------------------
		
		Если ПустоеЗначение(Каталог) = 1 Тогда
			Если Конвертация.Родитель.ИмяТэга = "НаборКонвертаций" Тогда
				Каталог	=	Конвертация.Родитель.ПолучитьАтрибут("Каталог");
			КонецЕсли;
		КонецЕсли;
		
		СписокВозможныхМест	=	СоздатьОбъект("СписокЗначений");
		СписокВозможныхМест.ДобавитьЗначение(	?(ПустоеЗначение(Каталог)=0, Каталог, гСтрПуть)	+	ФайлПравил	);
		СписокВозможныхМест.ДобавитьЗначение(	гСтрПуть										+	ФайлПравил	);
		СписокВозможныхМест.ДобавитьЗначение(	КаталогПрограммы()								+	ФайлПравил	);
		СписокВозможныхМест.ДобавитьЗначение(	КаталогИБ()										+	ФайлПравил	);
		СписокВозможныхМест.ДобавитьЗначение(	КаталогПользователя()							+	ФайлПравил	);
		СписокВозможныхМест.ДобавитьЗначение(	КаталогИБ()					+	"ExtForms\"		+	ФайлПравил	);
		СписокВозможныхМест.ДобавитьЗначение(	КаталогИБ()					+	"CDRules\"		+	ФайлПравил	);
		
		ПолныйПутьФайла		=	НайтиПервыйСуществующийФайл(СписокВозможныхМест);
		             
		Если ПустоеЗначение(ПолныйПутьФайла) = 1 Тогда Продолжить КонецЕсли;
		
		СписокДоступныхКонвертаций.ДобавитьЗначение(ПолныйПутьФайла, Имя);
	КонецЦикла;
	
	Зн  = "";
	Если СписокДоступныхКонвертаций.ВыбратьЗначение(Зн, "", , , 1) = 0 Тогда Возврат(0) КонецЕсли;
	
	ФормИмяФайлаПравил	=	Зн;
	
	Возврат(1);
	
КонецФункции		//	ВыборИзПеречня()

//--------------------------------------------------------------------------------------------------

Процедура ПриНачалеВыбораЗначения(ИдЭлементаДиалога, Фл)
    
	Если		ИдЭлементаДиалога = "ФормИмяФайлаПравил"	Тогда
		
		Если ВыборИзПеречня() = 0 Тогда
			ВыборФайла(ФормИмяФайлаПравил, "xml");
		КонецЕсли;
		
		Если ПроверитьИсходныеДанные("ЗагрузкаПравил") = 1 Тогда
			гФлаг_ПравилаКонвертацииЗагружены = 0;
			ЗагрузитьПравилаКонвертации();
		КонецЕсли;
		
	ИначеЕсли	ИдЭлементаДиалога = "ФормИмяФайлаДанных"	Тогда
	         
		ВыборФайла(ФормИмяФайлаДанных, "xml");
		
	ИначеЕсли	ИдЭлементаДиалога = "ФормИмяФайлаПеречня"	Тогда
	         
		ВыборФайла(ФормИмяФайлаПеречня, "xml");
		
	КонецЕсли;
	
КонецПроцедуры		//	ПриНачалеВыбораЗначения()

//--------------------------------------------------------------------------------------------------

Процедура ЗаполнитьСписокРазделителейУчета()
                    
	Если Метаданные.РазделительУчета.Выбран() = 0 Тогда
		ФормРазделителиУчета.ДобавитьЗначение("<Не используется>");
		ФормРазделителиУчета.Пометка(1, 1);
		Возврат;
	КонецЕсли;
		
	ТипРазделителяУчета = Метаданные.РазделительУчета.Тип;
	Если ТипРазделителяУчета = "Перечисление" Тогда
		ВидПеречисления = Перечисление.ПолучитьАтрибут(Метаданные.РазделительУчета.Вид);
		Для Инд=1 По ВидПеречисления.КоличествоЗначений() Цикл
			ФормРазделителиУчета.ДобавитьЗначение(ВидПеречисления.ЗначениеПоНомеру(Инд));
			ФормРазделителиУчета.Пометка(Инд, 1);
		КонецЦикла;
		Возврат;
	ИначеЕсли ТипРазделителяУчета = "Справочник" Тогда
		Вид = Метаданные.РазделительУчета.Вид;
		Если ПустоеЗначение(Вид) = 0 Тогда
			Если Метаданные.Справочник(Вид).Владелец.Выбран() = 0 Тогда
				Спр = СоздатьОбъект("Справочник."+Вид);
				Спр.ВыбратьЭлементы(0);
				Пока Спр.ПолучитьЭлемент() = 1 Цикл
					Если Спр.ЭтоГруппа() = 1 Тогда Продолжить КонецЕсли;
					ФормРазделителиУчета.ДобавитьЗначение(Спр.ТекущийЭлемент());
					ФормРазделителиУчета.Пометка(ФормРазделителиУчета.РазмерСписка(), 1);
				КонецЦикла;
				Возврат;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	                                                                                   
	// Если не перечисление и не просой справочник, то будем собирать все значения разделителей учета
	СпРазделителейУчета = СоздатьОбъект("СписокЗначений");
	Оп = СоздатьОбъект("Операция");           
	ИдРазделителяУчета = Метаданные.РазделительУчета.Идентификатор;
	Оп.ВыбратьОперации(, ФормДатаКон);
	Пока Оп.ПолучитьОперацию() = 1 Цикл
	    Оп.ВыбратьПроводки();
		Пока Оп.ПолучитьПроводку() = 1 Цикл
		    РазделительУчета = Оп.ПолучитьАтрибут(ИдРазделителяУчета);
			Если ФормРазделителиУчета.НайтиЗначение(РазделительУчета) = 0 Тогда
				ФормРазделителиУчета.ДобавитьЗначение(РазделительУчета);
				ФормРазделителиУчета.Пометка(ФормРазделителиУчета.РазмерСписка(), 1);
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;                                         
	
КонецПроцедуры		//	ЗаполнитьСписокРазделителейУчета()

//--------------------------------------------------------------------------------------------------
      
Процедура ЗаполнитьСписокПлановСчетов()
                      
	Для Сч = 1 По ПланыСчетов.КоличествоЗначений() Цикл
		//ФормПланыСчетов.ДобавитьЗначение(ПланыСчетов.ЗначениеПоНомеру(Сч));
		//ФормПланыСчетов.Пометка(Сч, 1);
		
		ПланСчетов		=	ПланыСчетов.ЗначениеПоНомеру(Сч);
		ИдПланаСчетов	=	ПланСчетов.Идентификатор();
		
		Спис			=	СоздатьОбъект("СписокЗначений");
		Счет			=	СоздатьОбъект("Счет." + ИдПланаСчетов);
		Счет.ВыбратьСчета();
		Пока Счет.ПолучитьСчет() = 1 Цикл
			Если Счет.ЭтоГруппа() = 1 Тогда Продолжить КонецЕсли;
			Спис.ДобавитьЗначение(Счет.ТекущийСчет());
			Спис.Пометка(Спис.РазмерСписка(), 1);
		КонецЦикла;
		
		ФормПланыСчетов.ДобавитьЗначение(Спис, ИдПланаСчетов);
		ФормПланыСчетов.Пометка(Сч, 1);
		
	КонецЦикла;
	
КонецПроцедуры		//	ЗаполнитьСписокПлановСчетов()

//--------------------------------------------------------------------------------------------------
                                                                                                    
Процедура ПриВыборе_ФормПланыСчетов()
    
	ИдПланаСчетов			=	"";
	СписокВыбранныхСчетов	=	ФормПланыСчетов.ПолучитьЗначение(ФормПланыСчетов.ТекущаяСтрока(), ИдПланаСчетов);
	
	Спис					=	СоздатьОбъект("СписокЗначений");
	Счет					=	СоздатьОбъект("Счет." + ИдПланаСчетов);
	Счет.ВыбратьСчета();
	Пока Счет.ПолучитьСчет() = 1 Цикл
		Если Счет.ЭтоГруппа() = 1 Тогда Продолжить КонецЕсли;
		Спис.ДобавитьЗначение(Счет.ТекущийСчет(), Счет.Код + " " + Счет.Наименование);
		Спис.Пометка(Спис.РазмерСписка(), СписокВыбранныхСчетов.Принадлежит(Счет.ТекущийСчет()));
	КонецЦикла;
	   
	ФормПланыСчетов.Установить(ИдПланаСчетов, Спис);
	
	
	СписокПараметров = СоздатьОбъект("СписокЗначений");
	СписокПараметров.ДобавитьЗначение("ПланСчетов",					"Тип");
	СписокПараметров.ДобавитьЗначение(ИдПланаСчетов,				"Вид");
	СписокПараметров.ДобавитьЗначение(1,							"БезГрупп");
	СписокПараметров.ДобавитьЗначение(Спис,							"Объекты");
	//СписокПараметров.ДобавитьЗначение(,							"Владелец");
	//СписокПараметров.ДобавитьЗначение(СписБуфер,					"Буфер");
	//СписокПараметров.ДобавитьЗначение(гИмяДаннойОбработки,		"ИмяВызвавшейФормы");
	СписокПараметров.ДобавитьЗначение("Нет",						"ИспользоватьЗакладки");
	
	
	Если Найти(Нрег(гПутьОбъекта_Обработка_ПодборОбъектов), ".ert") > 0 Тогда
		ОткрытьФорму("Отчет#", СписокПараметров, гПутьОбъекта_Обработка_ПодборОбъектов);
	Иначе
		ОткрытьФорму(гПутьОбъекта_Обработка_ПодборОбъектов + "#", СписокПараметров);
	КонецЕсли;

	СписокПараметров.Форма.Заголовок("Выбор счетов, по которым будут выгружены остатки");
	СписокПараметров.Форма.кнЗакрыть.Видимость(0);
	СписокПараметров.Форма.кнВниз.Видимость(0);
	СписокПараметров.Форма.кнВверх.Видимость(0);
	СписокПараметров.Форма.кнВыбратьОдноЗначение.Видимость(0);
	СписокПараметров.Форма.кнВыбратьНесколькоЗначений.Видимость(0);
	СписокПараметров.Форма.кнУдалитьТекущуюСтроку.Видимость(0);
	СписокПараметров.Форма.кнУдалитьВсе.Видимость(0);
	
	ТабОбъектовДляОтметки	=	СписокПараметров.гТабВыборка;
	
	ТабОбъектовДляОтметки.ВидимостьКолонки("Статус", 0);
	ТабОбъектовДляОтметки.НоваяКолонка("Наименование", , , , "Наименование счета", 60);
	ТабОбъектовДляОтметки.УстановитьПараметрыКолонки("Объект", , , "Код счета", 6);
	ТабОбъектовДляОтметки.ВыбратьСтроки();
	Пока ТабОбъектовДляОтметки.ПолучитьСтроку() = 1 Цикл
		ТабОбъектовДляОтметки.Наименование	=	ТабОбъектовДляОтметки.Объект.Наименование;
	КонецЦикла;
	
КонецПроцедуры		//	ПриВыборе_ФормПланыСчетов()
                                   
//--------------------------------------------------------------------------------------------------

Процедура ПриВыборе_ФормТабПараметровОбмена()

	ТекущаяСтрока		=	ФормТабПараметровОбмена.ТекущаяСтрока();
	ТекущаяКолонка		=	ФормТабПараметровОбмена.ТекущаяКолонка();
	
	Если ПустоеЗначение(ТекущаяСтрока) = 1 Тогда Возврат КонецЕсли;
	    
	УзелПараметров	=	гПравила.ВыбратьУзел("//ПараметрыЗагрузки[@Ид=""" + ФормТабПараметровОбмена.Ид + """]");
	Если ПустоеЗначение(УзелПараметров) = 1 Тогда Возврат КонецЕсли;
	
	
	Если		ТекущаяКолонка = "ЗамещатьНайденные"	Тогда
	                                                
		УзелПараметров.УстановитьАтрибут("ЗамещатьНайденные", 2 - ФормТабПараметровОбмена.ЗамещатьНайденные);
		ФормТабПараметровОбмена.ЗамещатьНайденные	=	3 - ФормТабПараметровОбмена.ЗамещатьНайденные;
		
	ИначеЕсли	ТекущаяКолонка = "НовыеНеСоздавать"		Тогда
		
		УзелПараметров.УстановитьАтрибут("НовыеНеСоздавать", 2 - ФормТабПараметровОбмена.НовыеНеСоздавать);
		ФормТабПараметровОбмена.НовыеНеСоздавать	=	3 - ФормТабПараметровОбмена.НовыеНеСоздавать;
		
	КонецЕсли;
	
КонецПроцедуры		//	ПриВыборе_ФормТабПараметровОбмена()

//--------------------------------------------------------------------------------------------------
    
Процедура ПриВыбореЗакладки(Ном, Значен)
	
	Если		Значен = "Основная"			Тогда
		
		Форма.ИспользоватьСлой("Основной", 2);
		Форма.ИспользоватьСлой("Период", 1);
		
	ИначеЕсли	Значен = "Опции"			Тогда
		
		Форма.ИспользоватьСлой("Опции", 2);
		
	ИначеЕсли	Значен = "Итоги"			Тогда
		
		Форма.ИспользоватьСлой("Итоги", 2);
	
	ИначеЕсли	Значен = "ПараметрыОбмена"	Тогда
		
		Форма.ИспользоватьСлой("ПараметрыОбмена", 2);
		
	КонецЕсли;
	
КонецПроцедуры		//	ПриВыбореЗакладки()

//--------------------------------------------------------------------------------------------------

Процедура ДобавитьЗакладки()
	
	Форма.ИспользоватьЗакладки(1);
	
	Форма.Закладки.УдалитьВсе();
	Форма.Закладки.ДобавитьЗначение("Основная",	"Основная");
	                           
	Если Метаданные.ПланСчетов(1).Выбран() = 1 Тогда
		Форма.Закладки.ДобавитьЗначение("Итоги", "Бух. итоги");
		ЗаполнитьСписокПлановСчетов();
		ЗаполнитьСписокРазделителейУчета();
	КонецЕсли;
	
	Форма.Закладки.ДобавитьЗначение("Опции",			"Опции");
	Форма.Закладки.ДобавитьЗначение("ПараметрыОбмена",	"Параметры обмена");

	
	ПриВыбореЗакладки(1, "Основная");
	
КонецПроцедуры		//	ДобавитьЗакладки()

//--------------------------------------------------------------------------------------------------

Процедура ПриПовторномОткрытии()
                    
	СписокПараметров	=	Форма.Параметр;
	Если ПустоеЗначение(СписокПараметров) = 1 Тогда Возврат КонецЕсли;
	                                  
	СписокОбъектов	=	СписокПараметров.Получить("Объекты");
	Буфер			=	СписокПараметров.Получить("Буфер");
	           
	Если ПустоеЗначение(Буфер) = 1 Тогда Возврат КонецЕсли;
	
	Если ПустоеЗначение(СписокОбъектов) = 1 Тогда
		Таблица.Область(Буфер, гНомерКолонки_Условия).Текст	=	"";
	Иначе
		Таблица.Область(Буфер, гНомерКолонки_Условия).Текст	=	"Задан список выгружаемых объектов";
		Таблица.Область(Буфер, гНомерКолонки_Условия).ЦветТекста(255, 0, 0);
	КонецЕсли;
	
	Таблица.Показать();
			
КонецПроцедуры		//	ПриПовторномОткрытии()

//--------------------------------------------------------------------------------------------------

Процедура ПриОткрытии()
	
	Если ЗагрузитьВнешнююКомпоненту(гПутьОбъекта_КомпонентаV7plus) <> 1	Тогда
		Предупреждение("Компонента v7plus.dll не найдена!");
		СтатусВозврата(0);	Возврат;
	КонецЕсли;
	
	гXMLАнализатор		=	СоздатьОбъект("AddIn.XMLParser");
	
	Если Число(гXMLАнализатор.ВерсияАнализатора) < 2 Тогда
		Предупреждение("Для работы с программой необходимо обновить внешнюю компоненту v7plus.dll !");
		СтатусВозврата(0);	Возврат;
	КонецЕсли;

	//Если Число(гXMLАнализатор.ВерсияБазовогоАнализатора) < 4 Тогда
	//	Сообщить("Для работы с программой рекомендуется установить Microsoft XML Parser версии 4 !");
	//КонецЕсли;
	
	ПечИмяКонвертации		=	"Правила конвертации";
	КомментарийКонвертации	=	"";
	
	Таблица.Очистить();
	Таблица.ИсходнаяТаблица("Таблица1");
	Таблица.ВывестиСекцию("Кнопки|" + "Правило_" + ФормПредставлениеПравил);
	Таблица.ПрисоединитьСекцию("Кнопки|Параметры");
	Таблица.Опции(0, 0, 9, 0, , "CDExport");
	Таблица.Показать();
	
	ДобавитьЗакладки();
	
	//-------------		Прием параметров	---------------
	
	СписокПараметров	=	Форма.Параметр;
	Если ПустоеЗначение(СписокПараметров) = 1 Тогда Возврат КонецЕсли;
	   
	//-------------------------------------
	
	гТабОбъектов						=	СписокПараметров.Получить("ТаблицаОбъектов");
	гСписокПараметров					=	СписокПараметров.Получить("СписокПараметров");
	
	ФормИмяФайлаПравил					=	СписокПараметров.Получить("ИмяФайлаПравил");
	ФормИмяФайлаДанных					=	СписокПараметров.Получить("ИмяФайлаДанных");
	
	ФормФлВыгружатьТолькоИнтерактивные	=	СписокПараметров.Получить("ВыгружатьТолькоУказанные");
	ФормФлНеОбрабатыватьПроведение		=	СписокПараметров.Получить("НеОбрабатыватьПроведение");
	
	ФормДатаРасчетаБухИтогов			=	СписокПараметров.Получить("ФормДатаРасчетаБухИтогов");
	
	ФормФлЗапоминатьСсылки				=	СписокПараметров.Получить("ЗапоминатьСсылки");
	
	БезОткрытияФормы					=	СписокПараметров.Получить("БезОткрытияФормы");
	
	ФормФлНеВыгружатьБухИтоги			=	СписокПараметров.Получить("ФормФлНеВыгружатьБухИтоги");
	
	гПравила							=	СписокПараметров.Получить("ПравилаКонвертации");
	
	ФормДатаНач							=	СписокПараметров.Получить("ФормДатаНач");
	ФормДатаКон							=	СписокПараметров.Получить("ФормДатаКон");
	
	//-------------------------------------
	
	Если		ПустоеЗначение(гТабОбъектов) = 0 Тогда
		ПодготовитьТаблицуВыгружаемыхОбъектов()
	ИначеЕсли	ТипЗначенияСтр(гТабОбъектов) <> "ТаблицаЗначений" Тогда
		гТабОбъектов	=	СоздатьОбъект("ТаблицаЗначений");
		гТабОбъектов.НоваяКолонка("ИдПравила");
		гТабОбъектов.НоваяКолонка("СписокОбъектов");
	КонецЕсли;
	
	//-------------------------------------
	
	Если ПустоеЗначение(гПравила) = 1 Тогда
		Если ЗагрузитьПравилаКонвертации()	=	0 Тогда
			СтатусВозврата(0);
			Возврат;
		КонецЕсли;
	Иначе
		гФлаг_ПравилаКонвертацииЗагружены = 1;
		ПоказатьТаблицу();
	КонецЕсли;
	
	//-------------------------------------
	
	Если БезОткрытияФормы = 1 Тогда
		ВыгрузитьДанные( БезОткрытияФормы );
		Предупреждение("Выгрузка данных завершена!");
		СтатусВозврата(0);
	КонецЕсли;
	
КонецПроцедуры		//	ПриОткрытии()

//--------------------------------------------------------------------------------------------------

Процедура НачальнаяИнициализация()
	
	
	РасположениеФайла(гСтрПуть, гИмяФайла);

	                               
	////////////////////////////////////////////////////////////////////////////////////////////////////
	//	ФормТабПараметровОбмена предназначена для загрузки и модификации параметров обмена правил
	
	ФормТабПараметровОбмена.НоваяКолонка("Ид");
	ФормТабПараметровОбмена.НоваяКолонка("Имя", , , ,				"Имя", 20);
	                                                        
	ФормТабПараметровОбмена.НоваяКолонка("ЗамещатьНайденные", , , ,	"Замещать найденные объекты",	20);
	ФормТабПараметровОбмена.НоваяКолонка("НовыеНеСоздавать", , , ,	"Новые объекты не создавать",	20);

	//ФормТабПараметровОбмена.НоваяКолонка("ЗагружатьОперации", , , ,	"Выгружать операции",	12);
	//ФормТабПараметровОбмена.НоваяКолонка("ЗагружатьЗаписиЖР", , , ,	"Выгружать записи ЖР",	12);
	
	//ФормТабПараметровОбмена.НоваяКолонка("СтатусУдаления");
	//ФормТабПараметровОбмена.НоваяКолонка("СтатусПроводок");
	//ФормТабПараметровОбмена.НоваяКолонка("СтатусПроведения");
	
	//ФормТабПараметровОбмена.НоваяКолонка("СпособЗагрузки");
	//ФормТабПараметровОбмена.НоваяКолонка("Дата");                                 
	
	//ФормТабПараметровОбмена.НоваяКолонка("НеУдалятьСтроки");
	
	//ФормТабПараметровОбмена.НоваяКолонка("СтатусРасчетныхДокументов");
	//ФормТабПараметровОбмена.НоваяКолонка("ДатаТекущегоПериодаЖР");
    
	//ФормТабПараметровОбмена.НоваяКолонка("ПравилоОпераций");
	
	ФормТабПараметровОбмена.ВидимостьКолонки("Ид", 0);
	                        
	ФормТабПараметровОбмена.ВыводитьПиктограммы("ЗамещатьНайденные");
	ФормТабПараметровОбмена.ВыводитьПиктограммы("НовыеНеСоздавать");
	
	////////////////////////////////////////////////////////////////////////////////////////////////////
	//	гТабОбъектов предназначена для хранения интерактивно отобранных выгружаемых объектов	
	
	гТабОбъектов	=	СоздатьОбъект("ТаблицаЗначений");
	гТабОбъектов.НоваяКолонка("ИдПравила");
	гТабОбъектов.НоваяКолонка("СписокОбъектов");
	
	
	////////////////////////////////////////////////////////////////////////////////////////////////////
	//	Проверяем не встроена ли данная обработка в конфигурацию
	
	гПутьОбъекта_ДаннаяОбработка	=	гСтрПуть	+	гИмяФайла;
	Если ПустоеЗначение(гПутьОбъекта_ДаннаяОбработка) = 1 Тогда
		гПутьОбъекта_ДаннаяОбработка =	"Обработка.ВыгрузкаДанных";
	КонецЕсли;
	                                                                                                    
	
	////////////////////////////////////////////////////////////////////////////////////////////////////
	//	Поиск текстового файла с универсальным программным кодом
	
	СписокВозможныхМест	=	СоздатьОбъект("СписокЗначений");
	СписокВозможныхМест.ДобавитьЗначение(	гСтрПуть					+	"CDExport.txt"	);
	СписокВозможныхМест.ДобавитьЗначение(	КаталогИБ()	+	"ExtForms\"	+	"CDExport.txt"	);
	СписокВозможныхМест.ДобавитьЗначение(	КаталогИБ()					+	"CDExport.txt"	);
	СписокВозможныхМест.ДобавитьЗначение(	КаталогПрограммы()			+	"CDExport.txt"	);
	
	гПутьОбъекта_УниверсальныйКод				=	НайтиПервыйСуществующийФайл(СписокВозможныхМест);
	                                                                                                    
	
	////////////////////////////////////////////////////////////////////////////////////////////////////
	//	Поиск исполняющей обработки
	
	Если Метаданные.Обработка("ВыгрузкаДанныхИсполняющая").Выбран() = 1 Тогда
		гПутьОбъекта_ИсполняющаяОбработка	=	"Обработка.ВыгрузкаДанныхИсполняющая";
	Иначе
		СписокВозможныхМест	=	СоздатьОбъект("СписокЗначений");
		СписокВозможныхМест.ДобавитьЗначение(	гСтрПуть					+	"CDExpVar.ert"	);
		СписокВозможныхМест.ДобавитьЗначение(	КаталогИБ()	+	"ExtForms\"	+	"CDExpVar.ert"	);
		СписокВозможныхМест.ДобавитьЗначение(	КаталогИБ()					+	"CDExpVar.ert"	);
		СписокВозможныхМест.ДобавитьЗначение(	КаталогПрограммы()			+	"CDExpVar.ert"	);
		
		гПутьОбъекта_ИсполняющаяОбработка			=	НайтиПервыйСуществующийФайл(СписокВозможныхМест);
	КонецЕсли;
	                                                                                                    
	
	////////////////////////////////////////////////////////////////////////////////////////////////////
	//	Поиск внешней компоненты V7Plus.dll
	
	СписокВозможныхМест	=	СоздатьОбъект("СписокЗначений");
	СписокВозможныхМест.ДобавитьЗначение(	КаталогИБ()					+	"v7plus.dll"	);
	СписокВозможныхМест.ДобавитьЗначение(	КаталогПрограммы()			+	"v7plus.dll"	);
	СписокВозможныхМест.ДобавитьЗначение(	КаталогИБ()	+	"ExtForms\"	+	"v7plus.dll"	);
	СписокВозможныхМест.ДобавитьЗначение(	гСтрПуть					+	"v7plus.dll"	);
	
	гПутьОбъекта_КомпонентаV7plus				=	НайтиПервыйСуществующийФайл(СписокВозможныхМест);
	
	
	////////////////////////////////////////////////////////////////////////////////////////////////////
	//	Поиск универсальной обработки подбора объектов
	
	Если Метаданные.Обработка("ПодборОбъектов").Выбран() = 1 Тогда
		гПутьОбъекта_Обработка_ПодборОбъектов	=	"Обработка.ПодборОбъектов";
	Иначе
		СписокВозможныхМест	=	СоздатьОбъект("СписокЗначений");
		СписокВозможныхМест.ДобавитьЗначение(	гСтрПуть	+	"UChoice\UChoice.ert"			);
		СписокВозможныхМест.ДобавитьЗначение(	гСтрПуть 	+	"UChoice.ert"					);
		СписокВозможныхМест.ДобавитьЗначение(	КаталогИБ() +	"ExtForms\UChoice.ert"			);
		СписокВозможныхМест.ДобавитьЗначение(	КаталогИБ()	+	"ExtForms\UChoice\UChoice.ert"	);
		
		гПутьОбъекта_Обработка_ПодборОбъектов	=	НайтиПервыйСуществующийФайл(СписокВозможныхМест);
		
		Если ПустоеЗначение(гПутьОбъекта_Обработка_ПодборОбъектов) = 1 Тогда
			Предупреждение("Не найдена универсальная обработка подбора объектов UChoice.ert !
							|Интерактивный выбор выгружаемых объектов невозможен !
							|Скопируйте данную обработку в каталог ExtForms информационной базы !");
		КонецЕсли;
	КонецЕсли;
	 
	
	////////////////////////////////////////////////////////////////////////////////////////////////////
	//	Поиск файла - перечня конвертаций
	
	СписокВозможныхМест	=	СоздатьОбъект("СписокЗначений");
	СписокВозможныхМест.ДобавитьЗначение(	гСтрПуть			+	"CDList.xml"				);
	СписокВозможныхМест.ДобавитьЗначение(	КаталогИБ() 		+	"ExtForms\CDList.xml"		);
	СписокВозможныхМест.ДобавитьЗначение(	КаталогИБ() 		+	"CDList.xml"				);
	СписокВозможныхМест.ДобавитьЗначение(	КаталогПрограммы()	+	"CDList.xml"				);
	
	ФормИмяФайлаПеречня		=	НайтиПервыйСуществующийФайл(	СписокВозможныхМест	);
	
	
	////////////////////////////////////////////////////////////////////////////////////////////////////
	//	Инициализация модульных переменных и переменных формы

	ФормДатаНач							=	ПолучитьПустоеЗначение();
	ФормДатаКон							=	РабочаяДата();
	ФормДатаРасчетаБухИтогов			=	?(Метаданные.ПланСчетов(1).Выбран()=1, КонецРассчитанногоПериодаБИ(), ФормДатаКон);
	
	ФормИмяФайлаДанных					=	КаталогПользователя()	+	"CDData.xml";
	ФормИмяФайлаПравил					=	"";
	
	гПутьОбъекта_ИсполняемыйКод			=	КаталогИБ() + "CDExpVar.txt";
	
	ФормПредставлениеПравил				=	2;
	гНомерКолонки_Условия				=	6;
	гНомерКолонки_ПараметрыОбмена		=	7;
	
	ФормКолвоБуферизуемыхОбъектов		=	50;
	ФормФлВыгружатьТолькоИнтерактивные	=	0;
	
	ФормФлЗапоминатьСсылки				=	1;
	ФормФлВключатьПравилаВФайл			=	1;
	ФормФлНеВыгружатьБухИтоги			=	1;
	ФормФлНеОбрабатыватьПроведение		=	1;
	ФормКодСчетаДляВводаОстатков		=	"00";
	ФормМаксКолвоПроводок				=	100;
	
КонецПроцедуры		//	НачальнаяИнициализация()

//--------------------------------------------------------------------------------------------------

НачальнаяИнициализация();

//--------------------------------------------------------------------------------------------------


