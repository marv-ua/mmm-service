////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ
// 
Перем ТаблицаДокументов, ОбязательныеАтрибуты, АтрибутыДокументов, ВидыОпераций;
Перем НачДатаВыгрузки, КонДатаВыгрузки;
Перем ЗагрРасчетныеСчета, ЗагрВидыДокументов, ЗагрДокументы;
Перем НачДатаЗагрузки, КонДатаЗагрузки;
Перем ВидыДокументовДляПоиска;

Функция ИзменитьАтрибут(Объект, Имя, Значение) Далее
Функция ЗаписатьДокумент(Объект) Далее

//******************************************************************************
// ПолучитьИНН(ИННКПП)
//
// Параметры:
//  ИННКПП  - строка, написанные вместе ИНН и КПП юр лица.
//
// Возвращаемое значение:
//  значение ИНН юр лица.
//  
// Описание:
//  Функция возращает ИНН из переданной строки 
//  ИНН - первые 10 цифр для Юр Лиц
//        первые 12 цифр для Физ Лиц
// 
Функция ПолучитьИНН(ИННКПП)
	
	Стр = СокрЛП(ИННКПП);
	
	Если СтрДлина(Стр) = 10 Тогда // только ИНН Юр Лица
		Возврат Стр;
		
	ИначеЕсли СтрДлина(Стр) = 12 Тогда // только ИНН ФизЛица 
		Возврат Стр;
		
	Иначе
		
		РазделительИННКПП = Сред(Стр,11,1);
		
		Если Найти("1234567890", РазделительИННКПП) = 0 Тогда
			Возврат Лев(Стр, 10);

		Иначе
			Возврат Лев(ИННКПП, 12);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецФункции // ПолучитьИНН()

//******************************************************************************
// ПолучитьВидОплатыДокумента(Докум)
//
// Параметры:
//  Докум  - Документ, вид оплаты по которому необходимо получить.
//
// Возвращаемое значение:
//  Строка, цифровое значение вида оплаты документа в соответсвии с "2-П".
//  
// Описание:
//  Функция возращает цифровое значение вида оплаты документа в соответсвии с "2-П".
// 
Функция ПолучитьВидОплатыДокумента(Докум)
	
	Если  Докум.Выбран() = 0 Тогда
		Возврат "00";
	КонецЕсли;

	Если Докум.Вид() = "ЗаявлениеНаАккредитив" Тогда
		Возврат "08";

	ИначеЕсли Докум.Вид() = "ИнкассовоеПоручение" Тогда
		Возврат "06";

	ИначеЕсли Докум.Вид() = "ПлатежноеТребование" Тогда
		Возврат "02";

	КонецЕсли;

	Возврат "01";
	
КонецФункции // ПолучитьВидОплатыДокумента()

//******************************************************************************
// ПустоеЗначениеНалоговогоРеквизита(Реквизит)
//
// Параметры:
//  Реквизит  - значение для проверки.
//
// Возвращаемое значение:
//  1 - пустое значение
//  0 - не пустое.
//  
// Описание:
//  Функция проверяет налоговый реквизит на предмет 
//  содержания пустого значения в нем
// 
Функция ПустоеЗначениеНалоговогоРеквизита(Реквизит)
                             
	Если ПустоеЗначение(Реквизит) = 1 Тогда
		Возврат 1;                                
		
	ИначеЕсли СокрЛП(Строка(Реквизит)) = "0" Тогда
		Возврат 1;
		
	Иначе
		Возврат ПустаяСтрока(СокрЛП(СтрЗаменить(Реквизит, ".", "")));
 
	КонецЕсли;
	
КонецФункции // ПустоеЗначениеНалоговогоРеквизита()

//******************************************************************************
// ПолучитьПредставлениеНалоговогоРеквизита(Реквизит)
//
// Параметры:
//  ИННКПП  - строка, написанные вместе ИНН и КПП юр лица.
//
// Возвращаемое значение:
//  значение ИНН юр лица.
//  
// Описание:
//  Функция возращает ИНН из переданной строки 
//  ИНН - первые 10 цифр для Юр Лиц
//        первые 12 цифр для Физ Лиц
// 
Функция ПолучитьПредставлениеНалоговогоРеквизита(Реквизит)
	
	Если  ПустоеЗначениеНалоговогоРеквизита(Реквизит) = 1 Тогда
		Возврат "0";
	Иначе
		Если ТипЗначенияСтр(Реквизит) = "Дата" Тогда
			Возврат Формат(Реквизит, "ДДДММГГГГ");
		Иначе
			Возврат Строка(Реквизит);
		КонецЕсли;
	КонецЕсли;
	
КонецФункции // ПолучитьПредставлениеНалоговогоРеквизита()

////////////////////////////////////////////////////////////////////////////////
// ИНДИВИДУАЛЬНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ МОДУЛЯ
// Настраиваются под конкретную конфигурацию
//
//******************************************************************************
// ПолучитьДанные(Параметр, Документ)
//
// Параметры:
//  Параметр - строка, вид вычисляемого значения.
//  Документ - документ – документ на основании которго вычисляется значение.  
//
// Возвращаемое значение:
//  значение данного параметра.
//  
// Описание:
//  Функция вычисляет значение по переданному параметру.
// Например: 1. Реквизиты собственной организации в конфигурации "Бухгалтерский учет" 
//           определяются на основании констант, а в Комплексной конфигурации
//           на основании общего реквизита документов "Фирма".
//           2. Номер документа в конфигурации "Бухгалтерский учет" имеет тип "Числовой",
//           а в Комплексной конфигурации "Текстовый" и формируется при этом с префиксом
//           по фирме, в связи с этим в комплексной конфигурации существует специальная
//           функция "глНомерНаПечать()" которая возвращает Номер документа без префикса. 
//
Функция ПолучитьДанные(Параметр, Документ)
	
    Результат = "";
	
	Если (Параметр = "НазваниеОрганизации") ИЛИ (Параметр = "Организация") Тогда                                                            
		Плательщик = "";БанкПлательщика = "";НомерСчетаПлательщика = "";БИКБанкаПлательщика = "";СчетБанкаПлательщика = "";ИННплательщика="";
		
		Если Метаданные.Документ(Документ.Вид()).РеквизитШапки("ПеречислениеНалога").Выбран() = 1 Тогда
			Плательщик = ?(Документ.ПеречислениеНалога=1, Константа.НаименованиеПлательщикаПриПеречисленииНалогов, "");
		КонецЕсли;

		глПлатежныеРеквизиты(Документ.РасчетныйСчет, Плательщик, БанкПлательщика, НомерСчетаПлательщика, БИКБанкаПлательщика, СчетБанкаПлательщика, ИННплательщика,, 2);
		Результат = Плательщик;
        
		ПозицияРС = Найти(Результат, " р/с ");
		Если ПозицияРС > 0 Тогда
			ПозицияВ = Найти(Сред(Результат, ПозицияРС), " в ");
			Если ПозицияВ > 0 Тогда
				Результат = Лев(Результат, ПозицияРС);
			КонецЕсли;
		КонецЕсли;

	ИначеЕсли Параметр = "ИННОрганизации" Тогда
		глПлатежныеРеквизиты(Документ.РасчетныйСчет,,,,,,Результат,,2);
		
	ИначеЕсли Параметр = "КППОрганизации" Тогда
		глПлатежныеРеквизиты(Документ.РасчетныйСчет,,,,,,,Результат,2);
		Если (ПустоеЗначение(Документ.РасчетныйСчет.Корреспондент) = 1)
		 или (ПустаяСтрока(Результат) = 1) Тогда
			 Результат = ?(Документ.ПеречислениеНалога=1,?(ПустаяСтрока(Результат)=1,"0", Результат),"");
		КонецЕсли;
		
	ИначеЕсли Параметр = "НазваниеКонтрагента" Тогда
		Результат = Документ.Контрагент.ПолнНаименование;
		
	ИначеЕсли Параметр = "ИННКонтрагента" Тогда
		глПлатежныеРеквизиты(Документ.СчетКонтрагента,,,,,,Результат,,2);
		
	ИначеЕсли Параметр = "КППКонтрагента" Тогда
		
		глПлатежныеРеквизиты(Документ.СчетКонтрагента,,,,,,,Результат,2);
		Если (ПустоеЗначение(Документ.СчетКонтрагента.Корреспондент) = 1)
			 или (ПустаяСтрока(Результат) = 1) Тогда
			 Результат = ?(Документ.ПеречислениеНалога=1,?(ПустаяСтрока(Результат)=1,"0", Результат),"");
		КонецЕсли;
	
	ИначеЕсли Параметр = "БанковскийСчетОрганизации" Тогда
		Результат = Документ.РасчетныйСчет;               	
	
	ИначеЕсли Параметр = "Контрагент" Тогда
		Результат = Документ.Контрагент;
	
	ИначеЕсли Параметр = "БанковскийСчетКонтрагента" Тогда
		Результат = Документ.СчетКонтрагента;
		
	ИначеЕсли Параметр = "НомерДокумента" Тогда
		Результат = Строка(Число(Прав(СокрЛП(глПреобразоватьНомерДок(Документ.НомерДок, 0, 0)),5))); //NDline Результат = Строка(Число(Прав(СокрЛП(глПреобразоватьНомерДок(Документ.НомерДок, 0, 0)),3)));
		
		Если Число(Результат) = 0 Тогда
			Сообщить("У документа с номером """ + Документ.НомерДок + """ номер должен оканчиваться на три цифры и не на ""000""", "!");
		КонецЕсли;
			
	КонецЕсли;
	
    Возврат Результат;
	
КонецФункции // ПолучитьДанные()

//******************************************************************************
// ПровестиДокументПоСчету(Документ, Счет, ДатаОперации='00.00.0000', Приход=0, Расход=0)
//
// Параметры:
//  Документ     - Документ, документ на основании которого формируется строка выписки.
//  Счет         - Справочник.БанковскиеСчета, по которому формируется строка выписки.
//  ДатаОперации - Дата, дата на которую формируется строка выписки.
//  Приход       - Число, сумма операции по банку, приход на счет.
//  Расход       - Число, сумма операции по банку, расход со счета.
//
// Описание:
//  В данной процедуре, на основании загруженного платежного документа или документа
// "ОперацияПоРасчСчету", формируется документ "Выписка".
//  
Процедура ПровестиДокументПоСчету(Документ, Счет, ДатаОперации='00.00.0000', Приход=0, Расход=0)
	
	Если ПустоеЗначение(Счет)=1 Тогда Возврат; КонецЕсли;
	
	Объект=СоздатьОбъект("Документ");

	Объект.ВыбратьПодчиненныеДокументы(, , Документ);
	Пока Объект.ПолучитьДокумент()=1 Цикл
		Если Объект.Вид()<>"Выписка" Тогда Продолжить; 
		ИначеЕсли Объект.БанковскийСчет<>Счет Тогда Продолжить; 
		КонецЕсли;

		Замены=0;
		Объект.ВыбратьСтроки();
		Пока Объект.ПолучитьСтроку()=1 Цикл
			Если Объект.ПервичныйДокумент<>Документ Тогда
				
			ИначеЕсли Объект.ДатаДок<>ДатаОперации Тогда
				Замены=Замены+ИзменитьАтрибут(Объект, "Приход", 0);
				Замены=Замены+ИзменитьАтрибут(Объект, "Расход", 0);
			
			Иначе
				Замены=Замены+ИзменитьАтрибут(Объект, "Приход", Мин(Объект.Приход, Приход));
				Замены=Замены+ИзменитьАтрибут(Объект, "Расход", Мин(Объект.Расход, Расход));

				Приход=Приход-Объект.Приход;
				Расход=Расход-Объект.Расход;
			КонецЕсли;
		КонецЦикла;

		Если 0<Замены Тогда
			ЗаписатьДокумент(Объект);
		КонецЕсли;
	КонецЦикла;
		
	Если ПустоеЗначение(ДатаОперации)=1 Тогда Возврат; КонецЕсли;
	Если (Приход=0) и (Расход=0) Тогда Возврат; КонецЕсли;
	
	Объект=СоздатьОбъект("Документ.Выписка");

	Объект.ВыбратьДокументы(ДатаОперации, ДатаОперации);
	Пока Объект.ПолучитьДокумент()=1 Цикл
		Если Объект.БанковскийСчет=Счет Тогда
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если Объект.Выбран()=0 Тогда
		Объект.Новый();
		Объект.ДатаДок=ДатаОперации;
		Объект.БанковскийСчет=Счет;
		Сообщить("Создан документ: "+Объект.Вид()+" "+Объект.НомерДок+" ("+Объект.ДатаДок+")", " ");
	КонецЕсли;

		Объект.НоваяСтрока();                                     
		Объект.ПервичныйДокумент = Документ; 
		
		Если ПустоеЗначение(Документ) = 0 Тогда 
			
			Если Метаданные.Документ(Объект.Вид()).РеквизитТабличнойЧасти("НомерДокВходящий").Выбран() = 1 Тогда
				Объект.НомерДокВходящий = Документ.НомерДок;
			КонецЕСли;
			
			Если Метаданные.Документ(Объект.Вид()).РеквизитТабличнойЧасти("ДатаДокВходящий").Выбран() = 1 Тогда
				Объект.ДатаДокВходящий  = Документ.ДатаДок;    
			КонецЕсли;
			
		КонецЕсли;
		
		глЗаполнитьСтрокуВыпискиПоПлатежномуДокументу(Объект, Документ, Приход + Расход);
	
	ЗаписатьДокумент(Объект);
	
КонецПроцедуры // ПровестиДокументПоСчету()

//******************************************************************************
// СинхронизироватьДокументыПоСчетам()
//
// Описание:
//  Процедура осуществляет синхронизацию документов "Выписка" с загруженными 
// платежными документами и документами "ОперацияПоРасчСчету".
//
Процедура СинхронизироватьДокументыПоСчетам()
	
	Объект=СоздатьОбъект("Документ.Выписка");
	Объект.ВыбратьДокументы(НачДатаЗагрузки, КонДатаЗагрузки);
	Пока Объект.ПолучитьДокумент()=1 Цикл

		Если Объект.БанковскийСчет.Выбран()=0 Тогда 
			Продолжить;
		ИначеЕсли ЗагрРасчетныеСчета.Принадлежит(Объект.БанковскийСчет.Номер)=0 Тогда
			Продолжить;
		КонецЕсли;

		Замены=0;
		Объект.ВыбратьСтроки();
		Пока Объект.ПолучитьСтроку()=1 Цикл
			Если ЗагрДокументы.Принадлежит(Объект.ПервичныйДокумент)=0 Тогда 
				Замены=Замены+ИзменитьАтрибут(Объект, "Приход", 0);
				Замены=Замены+ИзменитьАтрибут(Объект, "Расход", 0);
			КонецЕсли;
		КонецЦикла;

		Если 0<Замены Тогда
			ЗаписатьДокумент(Объект);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры // СинхронизироватьДокументыПоСчетам()

////////////////////////////////////////////////////////////////////////////////
// ОБЩИЕ ПРОЦЕДУРЫ И ФУНКЦИИ МОДУЛЯ
//
//******************************************************************************
// ИзменитьАтрибут(Объект, Имя, Значение)
//
// Параметры:
//  Объект   - справочник, документ, операция
//  Имя      - строка, идентификатор атрибута справочника, документа, операции.
//  Значение - неопределенный – новое значение атрибута.
//
// Возвращаемое значение:
//  1 - атрибут изменен,
//  0 - атрибут не изменялся
//
// Описание:
//  Функция устанавливает новое значение атрибута объекта, если изменяется атрибут
// существующего объекта выдается сообщение.
//
Функция ИзменитьАтрибут(Объект, Имя, Значение)
	
	Атрибут=Объект.ПолучитьАтрибут(Имя);
	
	Если ТипЗначенияСтр(Значение)="Строка" Тогда
		Атрибут=СокрП(Атрибут); Значение=СокрП(Значение);
	КонецЕсли;

	Если Атрибут=Значение Тогда
		Возврат(0);
	КонецЕсли;

	Объект.УстановитьАтрибут(Имя, Значение);
	
	Если Объект.ТекущийДокумент().Выбран()=1 Тогда
		Стр=?(0<Объект.НомерСтроки, ", строка "+Объект.НомерСтроки, "");
		Сообщить("Изменен атрибут документа: "+Объект+Стр+": "+Имя+" = "+Значение, "!");
	КонецЕсли;

	Возврат(1);
	
КонецФункции // ИзменитьАтрибут()

//******************************************************************************
// ИзменитьНалоговыйАтрибут(Объект, Имя, Значение)
//
// Параметры:
//  Объект   - справочник, документ, операция
//  Имя      - строка, идентификатор атрибута справочника, документа, операции.
//  Значение - неопределенный – новое значение атрибута.
//
// Возвращаемое значение:
//  1 - атрибут изменен,
//  0 - атрибут не изменялся
//
// Описание:
//  Функция устанавливает новое значение атрибута объекта, если изменяется атрибут
// существующего объекта выдается сообщение.
//
Функция ИзменитьНалоговыйАтрибут(Объект, Имя, Значение)
	
	Если (ПустоеЗначениеНалоговогоРеквизита(Объект.ПолучитьАтрибут(Имя)) = 1)
	   И (ПустоеЗначениеНалоговогоРеквизита(Объект.ПолучитьАтрибут(Имя)) = 1) Тогда
		Возврат 0;

	КонецЕсли;
	
	Возврат ИзменитьАтрибут(Объект, Имя, Значение);
	
КонецФункции // ИзменитьНалоговыйАтрибут()

//******************************************************************************
// УдалитьДокумент(Объект)
//
// Параметры:
//  Объект - документ
//
// Описание:
//  Пытается пометить документ на удаление.
//
Процедура УдалитьДокумент(Объект)
	
	Попытка
		Если Объект.ПометкаУдаления()=0 Тогда
			Объект.Удалить(0);
			Сообщить("Помечен на удаление документ: "+Объект, " ");
		КонецЕсли;
	
	Исключение
		Сообщить("Неудачная попытка удаления документа: "+Объект+": "+ОписаниеОшибки(), "!!!");
	КонецПопытки;
	
КонецПроцедуры // УдалитьДокумент()

//******************************************************************************
// СнятьПометкуУдаления(Объект)
//
// Параметры:
//  Объект - документ
//
// Описание:
//  Пытается снять пометку удаления документа.
//
Процедура СнятьПометкуУдаления(Объект)
	
	Попытка
		Если Объект.ПометкаУдаления()=1 Тогда
			Объект.СнятьПометкуУдаления();
			Сообщить("Отменено удаление документа: "+Объект, " ");
		КонецЕсли;
	
	Исключение
		Сообщить("Неудачная попытка отмены удаления: "+Объект+": "+ОписаниеОшибки(), "!!!");
	КонецПопытки;
	
КонецПроцедуры // СнятьПометкуУдаления()

//******************************************************************************
// ЗаписатьДокумент(Объект)
//
// Параметры:
//  Объект - документ
//
// Возвращаемое значение:
//  1 - в случае успешной попытки записи, 
//  0 - иначе
//
// Описание:
//  Пытается записать документ.
//
Функция ЗаписатьДокумент(Объект)
	            
	Результат = 1;
	
	Попытка
		Объект.Записать(); 
		Сообщить("Записан документ: "+Объект, " ");
		
		Если      Объект.ПометкаУдаления()=1 Тогда
			Объект.СнятьПометкуУдаления();
		ИначеЕсли Объект.Проведен()=1 Тогда
			Объект.СделатьНеПроведенным();
		КонецЕсли;
		
	Исключение
		Сообщить("Неудачная попытка записи документа: "+Объект+": "+ОписаниеОшибки(), "!!!");
		Результат = 0;
	КонецПопытки;
	
	Возврат Результат ;
	
КонецФункции // ЗаписатьДокумент() 

//******************************************************************************
// ЗаполнитьРасчетныеСчета()
//
// Описание:
//  Процедура формирует список банковских счетов, по которым выгружаются документы.
// 
Процедура ЗаполнитьРасчетныеСчета()
	
	Список=СоздатьОбъект("СписокЗначений");
	
	БанкСчет=СоздатьОбъект("Справочник.БанковскиеСчета");
	БанкСчет.ВыбратьЭлементы(0); К=0;
	Пока 1=БанкСчет.ПолучитьЭлемент() Цикл
		Если Метаданные.Справочник("БанковскиеСчета").Владелец.Выбран() = 1 Тогда
			Список.ДобавитьЗначение(БанкСчет.ТекущийЭлемент(), СокрЛП(БанкСчет) + " (" + СокрЛП(БанкСчет.Владелец) + ")");
		Иначе
			Список.ДобавитьЗначение(БанкСчет.ТекущийЭлемент(), СокрЛП(БанкСчет));
		КонецЕсли;
        
		К=К+1;
		Н=ВыгрРасчетныеСчета.НайтиЗначение(БанкСчет.ТекущийЭлемент());
		
		Если 0<Н Тогда 
			Список.Пометка(К, ВыгрРасчетныеСчета.Пометка(Н)); 
		КонецЕсли;
	КонецЦикла;
	
	Список.Выгрузить(ВыгрРасчетныеСчета);
	
КонецПроцедуры // ЗаполнитьРасчетныеСчета()

//******************************************************************************
// ЗаполнитьВыгрВидыДок()
//
// Описание:
//  Процедура формирует список видов выгружаемых платежных документов.
//
Процедура ЗаполнитьВыгрВидыДок()
	
	Список=СоздатьОбъект("СписокЗначений");
	ВидыДокументовДляПоиска = СоздатьОбъект("СписокЗначений");
	
	Таб = СоздатьОбъект("Таблица");
	Таб.ИсходнаяТаблица("ВидыДокументов");
	Таб.Вывести();
	Для Индекс = 1 По Таб.ВысотаТаблицы() Цикл
		Если Метаданные.Документ(СокрЛП(Таб.Область(Индекс, 1).Текст)).Выбран() = 1 Тогда
			Список.ДобавитьЗначение(СокрЛП(Таб.Область(Индекс, 1).Текст), СокрЛП(Таб.Область(Индекс, 2).Текст));
			ВидыДокументовДляПоиска.ДобавитьЗначение(СокрЛП(Таб.Область(Индекс, 1).Текст), Врег(СокрЛП(Таб.Область(Индекс, 2).Текст)));
		КонецЕсли;
	КонецЦикла;
	
	Для К=1 По Список.РазмерСписка() Цикл
		Н=ВыгрВидыДокументов.НайтиЗначение(Список.ПолучитьЗначение(К));
		Если 0<Н Тогда Список.Пометка(К, ВыгрВидыДокументов.Пометка(Н)); КонецЕсли;
	КонецЦикла;
	
	Список.Выгрузить(ВыгрВидыДокументов);
	
КонецПроцедуры // ЗаполнитьВыгрВидыДок()

//******************************************************************************
// КаталогИмяФайла(ПолноеИмяФайла, Каталог, Файл)
//
// Параметры:
//  ПолноеИмяФайла - строка: каталог и имя файла.
//  Каталог        - если передан, в него будет возвращено имя каталога.
//  Файл           - если передан, в него будет возвращено имя файла.
//
// Возвращаемое значение:
//  0 - если указанного каталога не существует
//  1 - если указанный каталог существует
//
// Описание:
//  Если каталог не существует, то пользователю предлагается его создать.
//
Функция КаталогИмяФайла(ПолноеИмяФайла, Каталог, Файл)
	
	Каталог=""; Файл=ПолноеИмяФайла; Разд=Найти(Файл, "\");
	
	Пока 0<Разд Цикл 
		Каталог=Каталог+Лев(Файл, Разд); Файл=Сред(Файл, Разд+1); Разд=Найти(Файл, "\");
	КонецЦикла;
	Каталог=Каталог+".";

	//Если СтрДлина(Каталог)<5 Тогда NDline
	//ИначеЕсли ФС.СуществуетФайл(Каталог)=1 Тогда
	//ИначеЕсли "Да"=Вопрос(Каталог+"
	//                      |Указанный каталог не существует! Создать?","Да+Нет") Тогда 
	//	ФС.СоздатьКаталог(Каталог);
	//Иначе 
	//	Каталог=""; Возврат(0);
	//КонецЕсли; NDline
	
	Возврат(1);
	
КонецФункции // КаталогИмяФайла()

//******************************************************************************
// РазбитьСтрокуНаСтроки(ОднаСтрока)
//
// Параметры:
//  ОднаСтрока - строка, строка разбиваемая на многострочную.
//
// Возвращаемое значение:
//  строка - многострочная строка.
//  
// Описание:
//  Функция разбивает строку на несколько строк максимальной длиной 50 знаков.
//
Функция РазбитьСтрокуНаСтроки(БольшаяСтрока)
	
	МинДлина=40; МаксДлина=50;
	МногоСтрок=""; ДлинаСтроки=0;
	
	ЧислоСтрок = СтрКоличествоСтрок(БольшаяСтрока); 
	
	Для Сч =1 По ЧислоСтрок Цикл
		
		ОднаСтрока = СтрЗаменить(СтрЗаменить(СтрПолучитьСтроку(БольшаяСтрока, Сч), Симв(10), ""), Симв(13), "");
		
		Пока 0<СтрДлина(ОднаСтрока) Цикл
			ДлинаСлова=Найти(ОднаСтрока, " "); 
			Если ДлинаСлова=0 Тогда 
				ДлинаСлова=СтрДлина(ОднаСтрока); 
			КонецЕсли;
			
			Если ДлинаСтроки+ДлинаСлова<=МаксДлина Тогда
				МногоСтрок=МногоСтрок+Лев(ОднаСтрока, ДлинаСлова);
				ОднаСтрока=Сред(ОднаСтрока, ДлинаСлова+1);
				
				ДлинаСтроки=ДлинаСтроки+ДлинаСлова;
				Продолжить;
				
			ИначеЕсли ДлинаСтроки<МинДлина Тогда
				МногоСтрок=МногоСтрок+Лев(ОднаСтрока, МаксДлина-ДлинаСтроки);
				ОднаСтрока=Сред(ОднаСтрока, МаксДлина-ДлинаСтроки+1);
			КонецЕсли;
			
			Если 0<СтрДлина(ОднаСтрока) Тогда
				МногоСтрок=МногоСтрок+РазделительСтрок;
			КонецЕсли;
			
			ДлинаСтроки=0;
		КонецЦикла;
	КонецЦикла;
			
	Возврат(МногоСтрок);
	
КонецФункции // РазбитьСтрокуНаСтроки()

//******************************************************************************
// ДоступностьКнопок()
//
// Возвращаемое значение:
//  Нет.
//
// Вызывается из формул элементов диалога:
//  Невидимый статик "ДоступностьКнопок()" на слое "Основной".
//
// Описание:
//  Определяет доступность кнопок "кнЗагрузить", "кнПросмотрЗагрузки" и "кнПросмотрВыгрузки".
//
Функция ДоступностьКнопок()
	
	ЕстьФайл=ФС.СуществуетФайл(ИмяФайлаВыгрузки);
	Форма.кнПросмотрВыгрузки.Доступность(ЕстьФайл);

	ЕстьФайл=ФС.СуществуетФайл(ИмяФайлаЗагрузки);
	Форма.кнЗагрузить.Доступность(ЕстьФайл);
	Форма.кнПросмотрЗагрузки.Доступность(ЕстьФайл);
	
КонецФункции // ДоступностьКнопок()

//******************************************************************************
// ТекстФайла(ИмяФайла, Заголовок = "")
//
// Параметры:
//  ИмяФайла  - строка, имя текстового файла. 
//  Заголовок - строка, заголовок окна редактирования текста.
//
// Возвращаемое значение:
//  текст - объект вида "Текст", файла обмена данными.
//
// Вызывается из формул элементов диалога:
//  Кнопка "кнПросмотрВыгрузки", "кнПросмотрЗагрузки".
//
// Описание:
//  Процедура открывает текстовый файл обмена данными, в случае если задан заголовок 
// (по кнопкам "Просмотр") файл открывается в окне редактирования.
//
Функция ТекстФайла(ИмяФайла, Заголовок = "")
	
	ЗагрРасчетныеСчета.УдалитьВсе(); ЗагрВидыДокументов.УдалитьВсе();

	Если ФС.СуществуетФайл(ИмяФайла)=0 Тогда
		Предупреждение("Указанный файл не существует!", 5);
		Возврат(ПолучитьПустоеЗначение());
	КонецЕсли;
		
	Текст=СоздатьОбъект("Текст");
	Текст.КодоваяСтраница(Кодировка.ПолучитьЗначение(Кодировка.ТекущаяСтрока()));
	Текст.Открыть(ИмяФайла);

	Если Текст.КоличествоСтрок()<1 Тогда
		Предупреждение("Указанный файл не является файлом обмена!", 5);
		Возврат(ПолучитьПустоеЗначение());

	ИначеЕсли СокрЛП(Текст.ПолучитьСтроку(1))<>"1CClientBankExchange" Тогда
		Предупреждение("Указанный файл не является файлом обмена!", 5);
		Возврат(ПолучитьПустоеЗначение());
	КонецЕсли;
	
	Если ПустаяСтрока(Заголовок) = 0 Тогда 
		Текст.Показать(Заголовок + ":", ИмяФайла);
	КонецЕсли;
	
	Возврат(Текст);
	
КонецФункции // ТекстФайла()

//******************************************************************************
// Печать()
//
// Описание:
//  Процедура осуществляет вывод печатной формы отчета о загрузке данных из 
// системы "Клиент банка".
//
Процедура Печать()
	
	Отчет=СоздатьОбъект("Таблица");
	Отчет.ИсходнаяТаблица("Отчет");
	Отчет.ВывестиСекцию("Шапка");
	
	Для Индекс=1 По ЗагрДокументы.РазмерСписка() Цикл
        Документ=ЗагрДокументы.ПолучитьЗначение(Индекс);
		
		Если ПустоеЗначение(Документ)=0 Тогда
	
			Если (Документ.Вид()="ОперацияПоРасчСчету") Тогда
				Плательщик=Документ.Плательщик;
				ПлательщикСчет=Документ.ПлательщикСчет;
				Получатель=Документ.Получатель;
				ПолучательСчет=Документ.ПолучательСчет;
				
			Иначе
				Таб = СоздатьОбъект("Таблица");
				Таб.ИсходнаяТаблица("ВидыДокументов");
				Таб.Вывести();
				
				Для Номер = 1 По Таб.ВысотаТаблицы() Цикл
					Если Врег(СокрЛП(Таб.Область(Номер, 1).Текст)) = Врег(Документ.Вид()) Тогда
						Корреспондент = СокрЛП(Таб.Область(Номер, 3).Текст);
						Прервать;
					КонецЕсли;
				КонецЦикла;
				
				Если Корреспондент  = "Получатель" Тогда
					Плательщик     = ПолучитьДанные("Организация", Документ);
					ПлательщикСчет = ПолучитьДанные("БанковскийСчетОрганизации", Документ);
					Получатель     = ПолучитьДанные("Контрагент", Документ);
					ПолучательСчет = ПолучитьДанные("БанковскийСчетКонтрагента", Документ);
					
				ИначеЕсли Корреспондент  = "Плательщик" Тогда
					Получатель     = ПолучитьДанные("Организация", Документ);
					ПолучательСчет = ПолучитьДанные("БанковскийСчетОрганизации", Документ);
					Плательщик     = ПолучитьДанные("Контрагент", Документ);
					ПлательщикСчет = ПолучитьДанные("БанковскийСчетКонтрагента", Документ);
					
				КонецЕсли;
			
			КонецЕсли;
			
			Сумма=Документ.Сумма;
			Отчет.ВывестиСекцию("Строка");
			
		КонецЕсли;
	КонецЦикла;
	
	Отчет.ВывестиСекцию("Подвал");
	Отчет.ТолькоПросмотр(1);
	Отчет.Показать("Отчет","");

КонецПроцедуры // Печать()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ЭКСПОРТА (ВЫГРУЗКИ)
//
//******************************************************************************
// ВыгрузитьПлатежныеРеквизиты(Счет, Слово, Документ ="")
//
// Параметры:
//  Счет  - справочник, элемент справочника "Банковские счета" или "Расчетные счета".
//  Слово - строка, "Плательщик" или "Получатель" часть идентификатора колонки таблицы.
//
// Описание:
//	Процедура выгружает поля документов, представляющие платежные реквизиты
// собственной организации или контрагента, в таблицу передаваемых документов.
//
Процедура ВыгрузитьПлатежныеРеквизиты(Счет, Слово, Документ = "")
	
	Стр=ТаблицаДокументов.НомерСтроки;
	ТаблицаДокументов.УстановитьЗначение(Стр, Слово+"Счет", Счет.Номер);

	Если Счет.БанкДляРасчетов.Выбран()=1 Тогда
		ТаблицаДокументов.УстановитьЗначение(Стр, Слово+"2",		Счет.Номер);
		ТаблицаДокументов.УстановитьЗначение(Стр, Слово+"3", 		Счет.БанкОрганизации.Наименование);
		ТаблицаДокументов.УстановитьЗначение(Стр, Слово+"4", 		Счет.БанкОрганизации.Местонахождение);

		ТаблицаДокументов.УстановитьЗначение(Стр, Слово+"РасчСчет",	Счет.БанкОрганизации.КоррСчет);
		ТаблицаДокументов.УстановитьЗначение(Стр, Слово+"Банк1", 	Счет.БанкДляРасчетов.Наименование);
		ТаблицаДокументов.УстановитьЗначение(Стр, Слово+"Банк2",	Счет.БанкДляРасчетов.Местонахождение);
		ТаблицаДокументов.УстановитьЗначение(Стр, Слово+"БИК",		Счет.БанкДляРасчетов.Код);
		ТаблицаДокументов.УстановитьЗначение(Стр, Слово+"Корсчет",	Счет.БанкДляРасчетов.КоррСчет);

	Иначе
		ТаблицаДокументов.УстановитьЗначение(Стр, Слово+"РасчСчет",	Счет.Номер);
		ТаблицаДокументов.УстановитьЗначение(Стр, Слово+"Банк1", 	Счет.БанкОрганизации.Наименование);
		ТаблицаДокументов.УстановитьЗначение(Стр, Слово+"Банк2",	Счет.БанкОрганизации.Местонахождение);
		ТаблицаДокументов.УстановитьЗначение(Стр, Слово+"БИК",		Счет.БанкОрганизации.Код);
		ТаблицаДокументов.УстановитьЗначение(Стр, Слово+"Корсчет",	Счет.БанкОрганизации.КоррСчет);
		
	КонецЕсли;


	Если Документ = "" Тогда
		Текст = "";

	Иначе
		Текст=СтрЗаменить(ПолучитьДанные("НазваниеОрганизации", Документ), РазделительСтрок, " ");

	КонецЕсли;     

	глПлатежныеРеквизиты(Счет, Текст);
	Текст=СтрЗаменить(Текст, РазделительСтрок, " ");

	ТаблицаДокументов.УстановитьЗначение(Стр, Слово, Текст);
	
КонецПроцедуры // ВыгрузитьПлатежныеРеквизиты()

//******************************************************************************
// ВыгрузитьПлатежныйДокумент(Документ)
//
// Параметры:
//  Документ - документ – выгружаемый документ.
//
// Описание:
//  Процедура осуществляет выгрузку значений атрибутов переданного документа в 
// таблицу выгружаемых документов.
//
Процедура ВыгрузитьПлатежныйДокумент(Документ)
	
	Перем ВидДокумента, Корреспондент;
	
	Таб = СоздатьОбъект("Таблица");
	Таб.ИсходнаяТаблица("ВидыДокументов");
	Таб.Вывести();
	
	Для Индекс = 1 По Таб.ВысотаТаблицы() Цикл
		Если Врег(СокрЛП(Таб.Область(Индекс, 1).Текст)) = Врег(Документ.Вид()) Тогда
			ВидДокумента  = СокрЛП(Таб.Область(Индекс, 2).Текст);
			Корреспондент = СокрЛП(Таб.Область(Индекс, 3).Текст);
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если Корреспондент  = "Получатель" Тогда
		Организация="Плательщик";
		
	ИначеЕсли Корреспондент  = "Плательщик" Тогда
		Организация="Получатель";
		
	Иначе
		Сообщить("ВыгрузитьДокументы(): выгрузка не описана");
		Возврат; 
		
	КонецЕсли;

	Если Метаданные.Документ(Документ.Вид()).РеквизитШапки("СтатусСоставителяПлДок").Выбран() = 1 Тогда
		СтатусСоставителяПлДок =  "<" + Документ.СтатусСоставителяПлДок + ">";
	Иначе
		СтатусСоставителяПлДок =  "<>";
	КонецЕсли;
	
	Если Метаданные.Документ(Документ.Вид()).РеквизитШапки("ПеречислениеНалога").Выбран() = 1 Тогда
	    ПеречислениеНалога = Документ.ПеречислениеНалога;
	Иначе
	    ПеречислениеНалога = 0;
	КонецЕсли;

	Поз=ВыгрРасчетныеСчета.НайтиЗначение(ПолучитьДанные("БанковскийСчетОрганизации", Документ));

	Если Поз=0 Тогда
		Сообщить("Не выбран расчетный счет: "+Документ+" - документ не выгружен", "!!"); 
		Возврат;

	ИначеЕсли ВыгрРасчетныеСчета.Пометка(Поз)=0 Тогда
		Возврат;

	ИначеЕсли ПолучитьДанные("Контрагент", Документ).Выбран()=0 Тогда
		Сообщить("Не выбран контрагент: "+Документ+" - документ не выгружен", "!!"); 
		Возврат;

	ИначеЕсли ПолучитьДанные("БанковскийСчетКонтрагента", Документ).Выбран()=0 Тогда
		Сообщить("Не выбран счет контрагента: "+Документ+" - документ не выгружен", "!!"); 
		Возврат; 
		
	ИначеЕсли СтрДлина(СокрЛП(ПолучитьДанные("БанковскийСчетКонтрагента", Документ).Номер)) > 20 Тогда
		Сообщить("Длина счета контрагента более 20 разрядов: "+Документ+" - документ не выгружен", "!!"); 
		Возврат; 
		
	ИначеЕсли (Найти("<01><02><03><04><05><06><07><08><09><10><11><12><13><14><15>", СтатусСоставителяПлДок) = 0) И (ПеречислениеНалога = 1) Тогда
		Сообщить("В статусе составителя указано недопустимое значение """ + СтатусСоставителяПлДок + """: "+Документ+" - документ не выгружен", "!!"); 
		Возврат; 		

	КонецЕсли;

	ТаблицаДокументов.НоваяСтрока(); Стр=ТаблицаДокументов.НомерСтроки;

	// шапка платежного документа
	ТаблицаДокументов.СекцияДокумент = ВидДокумента;
	ТаблицаДокументов.Номер          = ПолучитьДанные("НомерДокумента", Документ.ТекущийДокумент());
	ТаблицаДокументов.Дата           = Документ.ДатаДок;
	ТаблицаДокументов.Сумма          = Документ.Сумма;

	// реквизиты организации
	ТаблицаДокументов.УстановитьЗначение(Стр, Организация + "ИНН", ПолучитьДанные("ИННОрганизации", Документ));
	
	Если Метаданные.Документ(Документ.Вид()).РеквизитШапки("КППплательщика").Выбран() = 1 Тогда
		ТаблицаДокументов.УстановитьЗначение(Стр, Организация + "КПП", Документ.КППплательщика);
	КонецЕсли;
	
	ТаблицаДокументов.УстановитьЗначение(Стр, Организация+"1",   ПолучитьДанные("НазваниеОрганизации", Документ));
	ВыгрузитьПлатежныеРеквизиты(ПолучитьДанные("БанковскийСчетОрганизации", Документ), Организация,Документ);

	// реквизиты контрагента
	ТаблицаДокументов.УстановитьЗначение(Стр, Корреспондент + "ИНН", ПолучитьДанные("ИННКонтрагента", Документ));
	
	Если Метаданные.Документ(Документ.Вид()).РеквизитШапки("КППполучателя").Выбран() = 1 Тогда
		ТаблицаДокументов.УстановитьЗначение(Стр, Корреспондент + "КПП", Документ.КППполучателя);
	КонецЕсли;
	
	ТаблицаДокументов.УстановитьЗначение(Стр, Корреспондент + "1",   ПолучитьДанные("НазваниеКонтрагента", Документ));
	ВыгрузитьПлатежныеРеквизиты(ПолучитьДанные("БанковскийСчетКонтрагента", Документ), Корреспондент);
	
	// реквизиты платежа
	ТаблицаДокументов.ВидПлатежа=Строка(Документ.ВидПлатежа);
	ТаблицаДокументов.ВидОплаты=ПолучитьВидОплатыДокумента(Документ);
	ТаблицаДокументов.СрокПлатежа=Документ.СрокПлатежа;
	
	// реквизиты налогового платежа
	Если Метаданные.Документ(Документ.Вид()).РеквизитШапки("ПеречислениеНалога").Выбран() = 1 Тогда
		Если (Документ.ПеречислениеНалога > 0) Тогда

			ТаблицаДокументов.СтатусСоставителя   = ПолучитьПредставлениеНалоговогоРеквизита(Документ.СтатусСоставителяПлДок);
			ТаблицаДокументов.ПоказательКБК 	  = ПолучитьПредставлениеНалоговогоРеквизита(Документ.КодБК);
			ТаблицаДокументов.ОКАТО 			  = ПолучитьПредставлениеНалоговогоРеквизита(Документ.КодОКАТО);
			ТаблицаДокументов.ПоказательОснования = ПолучитьПредставлениеНалоговогоРеквизита(Документ.ПоказательОснования);
			ТаблицаДокументов.ПоказательПериода	  = ПолучитьПредставлениеНалоговогоРеквизита(Документ.ПоказательПериода);
			ТаблицаДокументов.ПоказательНомера	  = ПолучитьПредставлениеНалоговогоРеквизита(Документ.ПоказательНомера);
			ТаблицаДокументов.ПоказательДаты	  = ПолучитьПредставлениеНалоговогоРеквизита(Документ.ПоказательДаты);
			ТаблицаДокументов.ПоказательТипа	  = ПолучитьПредставлениеНалоговогоРеквизита(Документ.ПоказательТипа);

			ТаблицаДокументов.ПолучательКПП	  	  = ПолучитьПредставлениеНалоговогоРеквизита(ТаблицаДокументов.ПолучательКПП);
			ТаблицаДокументов.ПлательщикКПП	  	  = ПолучитьПредставлениеНалоговогоРеквизита(ТаблицаДокументов.ПлательщикКПП);

		КонецЕсли;
	КонецЕсли;

	// вид аккредитива
	Если Метаданные.Документ(Документ.Вид()).РеквизитШапки("ВидАккредитива").Выбран() = 1 Тогда
		ТаблицаДокументов.ВидАккредитива=Строка(Документ.ВидАккредитива);
	КонецЕсли;
	
	// платеж по представлению
	Если Метаданные.Документ(Документ.Вид()).РеквизитШапки("ВидДокумента").Выбран() = 1 Тогда
		ТаблицаДокументов.ПлатежПоПредст=Документ.ВидДокумента;
	КонецЕсли;
	
	// дополнительные условия
	Если Метаданные.Документ(Документ.Вид()).РеквизитШапки("ДополнУсловия").Выбран() = 1 Тогда
		ТаблицаДокументов.ДополнУсловия=Документ.ДополнУсловия;
	КонецЕсли;
	
	// номер счета поставщика
	Если Метаданные.Документ(Документ.Вид()).РеквизитШапки("СчетПоставщика").Выбран() = 1 Тогда
		ТаблицаДокументов.НомерСчетаПоставщика=Документ.СчетПоставщика;	
	КонецЕсли;
	
	НДС="";
	Если Метаданные.Документ(Документ.Вид()).РеквизитШапки("АвтоПодстСуммыНДС").Выбран() = 1 Тогда
		НДС=","+ РазделительСтрок+"в т.ч.НДС - "+Документ.НДС;
	КонецЕсли;

	// очередность платежа ФормирСуммаНДС(Документ.АвтоПодстСуммыНДС,Документ.Сумма, Документ.НДС, Документ.СтавкаНДС)
	Если Метаданные.Документ(Документ.Вид()).РеквизитШапки("Очередность").Выбран() = 1 Тогда
		ТаблицаДокументов.Очередность=Строка(Документ.Очередность); 
	КонецЕсли;
    
	Содержание=РазбитьСтрокуНаСтроки(СокрП(Документ.Содержание)+НДС);
	// назначение платежа
	ТаблицаДокументов.НазначениеПлатежа=СтрЗаменить(СокрП(Документ.Содержание)+НДС, РазделительСтрок, " ");
	ТаблицаДокументов.НазначениеПлатежа1=СтрПолучитьСтроку(Содержание, 1);
	ТаблицаДокументов.НазначениеПлатежа2=СтрПолучитьСтроку(Содержание, 2);
	ТаблицаДокументов.НазначениеПлатежа3=СтрПолучитьСтроку(Содержание, 3);
	ТаблицаДокументов.НазначениеПлатежа4=СтрПолучитьСтроку(Содержание, 4);
	ТаблицаДокументов.НазначениеПлатежа5=СтрПолучитьСтроку(Содержание, 5);
	ТаблицаДокументов.НазначениеПлатежа6=СтрПолучитьСтроку(Содержание, 6);

	// условия оплаты
	Если Метаданные.Документ(Документ.Вид()).РеквизитШапки("УсловиеОплаты").Выбран() = 1 Тогда
		УсловиеОплаты=РазбитьСтрокуНаСтроки(СокрП(Документ.УсловиеОплаты));
		ТаблицаДокументов.УсловиеОплаты1=?(Документ.Акцепт=1,"С акцептом ","Без акцепта ");		
		ТаблицаДокументов.УсловиеОплаты2=СтрПолучитьСтроку(УсловиеОплаты, 1);
		ТаблицаДокументов.УсловиеОплаты3=СтрПолучитьСтроку(УсловиеОплаты, 2); 
	КонецЕсли;
	
	// срок акцепта
	Если Метаданные.Документ(Документ.Вид()).РеквизитШапки("СрокАкцепта").Выбран() = 1 Тогда
		ТаблицаДокументов.СрокАкцепта = Строка(Документ.СрокАкцепта);
	КонецЕсли;
	
	// дата отсылки документов
	Если Метаданные.Документ(Документ.Вид()).РеквизитШапки("ДатаОтсылки").Выбран() = 1 Тогда
		ТаблицаДокументов.ДатаОтсылкиДок = Документ.ДатаОтсылки;
	КонецЕсли;
	
	Сообщить("Выгружен документ: "+Документ, " ");

КонецПроцедуры // ВыгрузитьПлатежныйДокумент()

//******************************************************************************
// ВыгрузитьТекст()
//
// Вызывается из формул элементов диалога:
//  Кнопка "кнВыгрузить".
//
// Описание:
//  Процедура формирует файл обмена данными, для экспорта платежных документов 
// в систему типа "Клиент банка".
//
Процедура ВыгрузитьТекст()
	
	Перем Вид, Часы, Минуты, Секунды, Кодир, Тип, Заголовок;
	
	Если КаталогИмяФайла(ИмяФайлаВыгрузки, "", "") = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Текст=СоздатьОбъект("Текст");
	Текст.КодоваяСтраница(Кодировка.ПолучитьЗначение(Кодировка.ТекущаяСтрока(), Кодир));

	ТекущееВремя(Часы, Минуты, Секунды);
    Время=Шаблон("[Часы#Ч(0)2]:[Минуты#Ч(0)2]:[Секунды#Ч(0)2]");

	Текст.ДобавитьСтроку("1CClientBankExchange");
	Текст.ДобавитьСтроку("ВерсияФормата=1.01");
	Текст.ДобавитьСтроку("Кодировка="+Кодир);
	Текст.ДобавитьСтроку("Отправитель="+Метаданные.Представление());
	Текст.ДобавитьСтроку("Получатель="+КлиентБанка);
	Текст.ДобавитьСтроку("ДатаСоздания="+Формат(ТекущаяДата(), "ДДДММГГГГ"));
	Текст.ДобавитьСтроку("ВремяСоздания="+Время);
	Текст.ДобавитьСтроку("ДатаНачала="+Формат(НачДатаВыгрузки, "ДДДММГГГГ"));
	Текст.ДобавитьСтроку("ДатаКонца="+Формат(КонДатаВыгрузки, "ДДДММГГГГ"));
	
	Для К=1 по ВыгрРасчетныеСчета.РазмерСписка() Цикл
		Если ВыгрРасчетныеСчета.Пометка(К)=1 Тогда
			Счет=ВыгрРасчетныеСчета.ПолучитьЗначение(К);
			Текст.ДобавитьСтроку("РасчСчет="+Счет.Номер);
		КонецЕсли;
	КонецЦикла;
	
	Для К=1 по ВыгрВидыДокументов.РазмерСписка() Цикл
		Если ВыгрВидыДокументов.Пометка(К)=1 Тогда
			ВыгрВидыДокументов.ПолучитьЗначение(К, Вид);
			Текст.ДобавитьСтроку("Документ="+Вид);
		КонецЕсли;
	КонецЦикла;

	ТаблицаДокументов.УдалитьСтроки();
	
	Для К=1 по ВыгрВидыДокументов.РазмерСписка() Цикл
		Если ВыгрВидыДокументов.Пометка(К)=0 Тогда Продолжить; КонецЕсли;

		Объект=СоздатьОбъект("Документ."+ВыгрВидыДокументов.ПолучитьЗначение(К, Вид)); 
		Состояние("Обработка: "+Вид);

		Объект.ВыбратьДокументы(НачДатаВыгрузки, КонДатаВыгрузки);
		Пока Объект.ПолучитьДокумент()=1 Цикл
			Если Объект.ПометкаУдаления()=1 Тогда Продолжить; КонецЕсли;
			Если Найти(Объект.Комментарий, "#Выгружен")>0 Тогда Продолжить КонецЕсли; //NDline
			ВыгрузитьПлатежныйДокумент(Объект);
			Объект.Комментарий = Объект.Комментарий + "#Выгружен " + ТекущаяДата() + " " + ТекущееВремя(); //NDline
			Попытка Объект.Записать() Исключение КонецПопытки; //NDline
		КонецЦикла;
	КонецЦикла;

	Для Стр=1 по ТаблицаДокументов.КоличествоСтрок() Цикл

		Для Кол=1 по ТаблицаДокументов.КоличествоКолонок() Цикл
			Значение=ТаблицаДокументов.ПолучитьЗначение(Стр, Кол);
			Имя=ТаблицаДокументов.ПолучитьПараметрыКолонки(Кол, Тип, , , Заголовок);
			
			Если ПустоеЗначение(Значение)=1 Тогда
				Если ОбязательныеАтрибуты.Принадлежит(Имя)=1 Тогда
					ТаблицаДокументов.ПолучитьСтрокуПоНомеру(Стр);
					
					Сообщить(ТаблицаДокументов.ПолучитьЗначение(Стр, "СекцияДокумент")+
					         " № "+ТаблицаДокументов.ПолучитьЗначение(Стр, "Номер")+
					         " от "+ТаблицаДокументов.ПолучитьЗначение(Стр, "Дата")+
							 ": не заполнено поле """+Заголовок+""".", "!");
							 
				КонецЕсли;
				Продолжить; 
			КонецЕсли;

			Если Тип="Число" Тогда		Значение=Формат(Значение, "Ч.2");
			ИначеЕсли Тип="Дата" Тогда	Значение=Формат(Значение, "ДДДММГГГГ");
			КонецЕсли;
			
			Текст.ДобавитьСтроку(Имя+"="+Значение);
		КонецЦикла;

		Текст.ДобавитьСтроку("КонецДокумента");
	КонецЦикла;

	Текст.ДобавитьСтроку("КонецФайла");
	Текст.Записать(ИмяФайлаВыгрузки);
	
КонецПроцедуры // ВыгрузитьТекст()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ИМПОРТА (ЗАГРУЗКИ)
// 

//******************************************************************************
// НайтиОрганизациюПоИНН(Слово, Вид)
//
// Параметры:
//  ИННКраткий - строка, ИНН по которому надо найти организацию.
//  Вид   - строка – вид справочника.
//  ДлинаИНН  - Число –длина занчащей части реквизита ИНН.
//
// Возвращаемое значение:
//  справочник - найденный элемент справочника.
//  
// Описание:
//  Функция осуществляет поиск в справочниках организацию по ИНН
//
Функция НайтиОрганизациюПоИНН(ИННКраткий, Вид, ДлинаИНН = 10)

	Перем Запрос, ТекстЗапроса;
   
	Запрос = СоздатьОбъект("Запрос");
	ТекстЗапроса = "//{{ЗАПРОС(НайтиЮрЛицо)
					|ТекущийЭлемент = Справочник." + Вид + ".ТекущийЭлемент;
					|ИНН = Справочник." + Вид + ".ИНН;
					|Группировка ТекущийЭлемент без групп;
					|Условие((Лев(ИНН,  " + ДлинаИНН + ") = ИННКраткий) ИЛИ (Лев(ИНН, 12) = ИННКраткий));
					|"//}}ЗАПРОС
	;

	СписокОрганизаций = СоздатьОбъект("СписокЗначений");
	
	// Если ошибка в запросе, то выход из процедуры
	Если Запрос.Выполнить(ТекстЗапроса) <> 0 Тогда
		
		Пока Запрос.Группировка(1) = 1 Цикл
			СписокОрганизаций.ДобавитьЗначение(Запрос.ТекущийЭлемент);  
		КонецЦикла;
	КонецЕсли;
	
	Возврат СписокОрганизаций;

КонецФункции // НайтиОрганизациюПоИНН()

//******************************************************************************
// НайтиОрганизациюПоИННКПП(Слово, Вид)
//
// Параметры:
//  ИННКраткий - строка, ИНН по которому надо найти организацию.
//  КППКраткий - строка, КПП по которому надо найти организацию.
//  Вид   - строка – вид справочника.
//  ДлинаИНН  - Число –длина занчащей части реквизита ИНН.
//
// Возвращаемое значение:
//  справочник - найденный элемент справочника или пустая ссылка на этот справочник.
//  
// Описание:
//  Функция осуществляет поиск в справочниках организацию по ИНН и КПП
//
Функция НайтиОрганизациюПоИННКПП(ИННКраткий,КППКраткий, Вид, ДлинаИНН = 10)

	ВозможныйИНН1 = ИННКраткий + "/" + КППКраткий;
	ВозможныйИНН2 = ИННКраткий + "\" + КППКраткий;
	
	СписокОрганизаций = НайтиОрганизациюПоИНН(ИННКраткий, Вид, ДлинаИНН);
	РазмерСпискаОрганизаций = СписокОрганизаций.РазмерСписка();
		
	Для Сч = 1 По РазмерСпискаОрганизаций Цикл
		Претендент = СписокОрганизаций.ПолучитьЗначение(Сч);
		Если (Претендент.ИНН = ВозможныйИНН1) ИЛИ (Претендент.ИНН = ВозможныйИНН2) Тогда
			Возврат Претендент;	
		КонецЕсли;
	КонецЦикла;
	
	Если РазмерСпискаОрганизаций > 0 Тогда
		Возврат СписокОрганизаций.ПолучитьЗначение(1);
	КонецЕсли;
                                                          
	Возврат СоздатьОбъект("Справочник." + Вид);
	
КонецФункции // НайтиОрганизациюПоИННКПП()


//******************************************************************************
// НайтиОрганизацию(Слово, Вид)
//
// Параметры:
//  Слово - строка, "Плательщик" или "Получатель" часть идентификатора колонки таблицы.
//  Вид   - строка – вид справочника.
//
// Возвращаемое значение:
//  0 - если владельца такого вида не существует в конфигурации (Например: в Комплексной 
//      конфигурации владелец справочника "Банковские счета" справочник "Фирмы", в
//      конфигурации "Бухгалтерский учет" у данного справочника владельца нет, возвращается 0).
//  справочник - найденный элемент справочника.
//  
// Описание:
//  Функция осуществляет поиск в справочнике организацию по ИНН
// из текущей строки таблицы загружаемых документов.
//
Функция НайтиОрганизацию(Слово, Вид)
	
	Если Метаданные.Справочник(Вид).Выбран() = 0 Тогда
		Возврат 0;
	КонецЕсли;
	
	Объект=СоздатьОбъект("Справочник."+Вид);

	ИННКраткий = СокрЛП(ТаблицаДокументов.ПолучитьЗначение(ТаблицаДокументов.НомерСтроки, Слово+"ИНН"));
	КППКраткий = СокрЛП(ТаблицаДокументов.ПолучитьЗначение(ТаблицаДокументов.НомерСтроки, Слово+"КПП"));

    // Ищем по значению ИНН
	Если ПустаяСтрока(ИННКраткий)=0 Тогда 
		Объект.НайтиЭлемент(НайтиОрганизациюПоИННКПП(ИННКраткий, КППКраткий, Вид));	
	КонецЕсли;
	                           
	Возврат Объект.ТекущийЭлемент();
	
КонецФункции // НайтиОрганизацию()

//******************************************************************************
// НайтиРасчетныйСчет(Слово, Вид)
//
// Параметры:
//  Слово - строка, "Плательщик" или "Получатель" часть идентификатора колонки таблицы.
//  Вид   - строка – вид справочника.
//
// Возвращаемое значение:
//  справочник - найденный элемент справочника.
//  
// Описание:
//  Функция осуществляет поиск в справочнике "Банковские счета" или "Расчетные счета"
// расчетный счет по номеру из текущей строки таблицы загружаемых документов.
//
Функция НайтиРасчетныйСчет(Слово, Вид, Владелец)
	
	Объект  = СоздатьОбъект("Справочник." + Вид);
	
	Если ПустоеЗначение(Владелец) = 0 Тогда 
		Объект.ИспользоватьВладельца(Владелец); 
	КонецЕсли;
	
	НомерСчета = СокрЛП(ТаблицаДокументов.ПолучитьЗначение(ТаблицаДокументов.НомерСтроки, Слово+"Счет"));
	
	Если ПустоеЗначение(НомерСчета)=0 Тогда
		Объект.НайтиПоРеквизиту("Номер", НомерСчета, ПустоеЗначение(Владелец));
	КонецЕсли;

	Если (Объект.Выбран()=1) и (ТипЗначенияСтр(Владелец)="Справочник") Тогда 
		Владелец=Объект.Владелец;
	КонецЕсли;

	Возврат Объект.ТекущийЭлемент();
	
КонецФункции // НайтиРасчетныйСчет()
 
//******************************************************************************
// НайтиЗначПеречисления(Вид, Стр)
//
// Параметры:
//  Вид - строка – вид перечисления.
//  Стр - строка, представление значения перечисления.
//
// Возвращаемое значение:
//  значение перечисления
//
// Описание:
//  Определяет значение перечисления по идентификатору перечисления и представлению 
// его значения.
//
Функция НайтиЗначПеречисления(Вид, Стр)
	
	Если Метаданные.Перечисление(Вид).Выбран() = 0 Тогда
		Если (Метаданные.Перечисление("ВидыПлатежей").Выбран() = 1) и (Вид = "ВидыПлатежа") Тогда
			Вид = "ВидыПлатежей";
		Иначе
			Возврат "";
		КонецЕсли;
	КонецЕсли;
	
	Перечисл=Перечисление.ПолучитьАтрибут(Вид);
	Для К=1 по Перечисл.КоличествоЗначений() Цикл
		Значение=Перечисл.ЗначениеПоНомеру(К);

		Если Строка(Значение)=СокрЛП(Стр) Тогда Возврат(Значение); КонецЕсли;
	КонецЦикла;
	
	Возврат(ПолучитьПустоеЗначение("Перечисление."+Вид));
	
КонецФункции // НайтиЗначПеречисления()

//******************************************************************************
// ЗагрузитьПлатежныйДокумент()
//
// Возвращаемое значение:
//  Документ - найденный платежный документ.
//
// Описание:
//  Осуществляет поиск в информационной базе платежного документа, если такой документ
// существует вызывается процедура ПровестиДокументПоСчету(), осуществляющая формирование 
// движений в учете.
//
Функция ЗагрузитьПлатежныйДокумент()
	
	Перем ВидДокумента, Корреспондент, Контрагент;
	
	Таб = СоздатьОбъект("Таблица");
	Таб.ИсходнаяТаблица("ВидыДокументов");
	Таб.Вывести();
	
	Для Индекс = 1 По Таб.ВысотаТаблицы() Цикл
		Если (Врег(СокрЛП(Таб.Область(Индекс, 2).Текст)) = Врег(СокрЛП(ТаблицаДокументов.СекцияДокумент))) и 
		     (Метаданные.Документ(СокрЛП(Таб.Область(Индекс, 1).Текст)).Выбран() = 1) Тогда
			ВидДокумента  = СокрЛП(Таб.Область(Индекс, 1).Текст);
			Корреспондент = СокрЛП(Таб.Область(Индекс, 3).Текст);
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Плательщик     = НайтиОрганизацию("Плательщик", "Фирмы");
	ПлательщикСчет = НайтиРасчетныйСчет("Плательщик", "БанковскиеСчета", Плательщик);
	Получатель     = НайтиОрганизацию("Получатель", "Фирмы");
	ПолучательСчет = НайтиРасчетныйСчет("Получатель", "БанковскиеСчета", Получатель);
	
	Если Корреспондент  = "Получатель" Тогда
		РольОрганизации = "Плательщик";
		Организация     = Плательщик;
		СчетОрганизации = ПлательщикСчет;
		
	ИначеЕсли Корреспондент  = "Плательщик" Тогда
		РольОрганизации = "Получатель";
		Организация     = Получатель;
		СчетОрганизации = ПолучательСчет;
		
	Иначе
		Возврат(ПолучитьПустоеЗначение("Документ"));
		
	КонецЕсли;
		
	Если СчетОрганизации.Выбран() = 0 Тогда
		Возврат ПолучитьПустоеЗначение("Документ");
	КонецЕсли;
	
	Объект=СоздатьОбъект("Документ."+ВидДокумента);
	
	Объект.ВыбратьДокументы(ТаблицаДокументов.Дата, ТаблицаДокументов.Дата);
	Пока Объект.ПолучитьДокумент()=1 Цикл
		
		Номер = ПолучитьДанные("НомерДокумента", Объект.ТекущийДокумент());
		Если Номер <> ТаблицаДокументов.Номер Тогда
			Продолжить;
		КонецЕсли;
		
		Если ТипЗначенияСтр(Организация) = "Справочник" Тогда
			Если ПолучитьДанные("Организация", Объект.ТекущийДокумент()) = Организация Тогда
				Прервать;
			КонецЕсли;
		Иначе
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Если Объект.Выбран()=0 Тогда
		// Необходимо добавить в базу платежные документы, которые оформлены от нашего имени
		// такие документы пользователи могут ввести непосредственно в программе клиента банка.
		// Важно! У таких документов реквизит в таблице РольОрганизации + "ИНН" должен совпадать с 
		// константой "ИННОрганизации"
		ИННОрганизации =  ПолучитьИНН(Константа.ПолучитьАтрибут("ИННОрганизации"));
		Если (ПустаяСтрока(ИННОрганизации) = 0) И  (СокрЛП(ТаблицаДокументов.ПолучитьЗначение(ТаблицаДокументов.НомерСтроки, РольОрганизации + "ИНН")) = ИННОрганизации) Тогда
			Объект.Новый();
	        Объект.НомерДок = Лев(Объект.НомерДок, СтрДлина(Объект.НомерДок) - 3) + Прав("000" + ТаблицаДокументов.Номер, 3);
		Иначе
			Возврат ПолучитьПустоеЗначение("Документ");
			
		КонецЕсли;

	КонецЕсли;
	
	СнятьПометкуУдаления(Объект);
	
	Замены=0;
	// дата документа
	Замены=Замены+ИзменитьАтрибут(Объект, "ДатаДок", ТаблицаДокументов.Дата);
	// сумма документа
	Замены=Замены+ИзменитьАтрибут(Объект, "Сумма", ТаблицаДокументов.Сумма);
	// банковский счет
	Замены=Замены+ИзменитьАтрибут(Объект, "РасчетныйСчет", СчетОрганизации);

	// контрагент и его расчетный счет
	Контрагент    = НайтиОрганизацию(Корреспондент, "Контрагенты");
	РасчетныйСчет = НайтиРасчетныйСчет(Корреспондент, "РасчетныеСчета", Контрагент);
	Замены=Замены+ИзменитьАтрибут(Объект, "Контрагент", Контрагент);
	Замены=Замены+ИзменитьАтрибут(Объект, "СчетКонтрагента", РасчетныйСчет);
	
	// вид платежа
	ВидПлатежа=НайтиЗначПеречисления("ВидыПлатежа", ТаблицаДокументов.ВидПлатежа);
	Замены=Замены+ИзменитьАтрибут(Объект, "ВидПлатежа", ВидПлатежа);
	// срок платежа
	Замены=Замены+ИзменитьАтрибут(Объект, "СрокПлатежа", ТаблицаДокументов.СрокПлатежа);


	// реквизиты налогового платежа
	Если Метаданные.Документ(Объект.Вид()).РеквизитШапки("ПеречислениеНалога").Выбран() = 1 Тогда
		Если (Объект.ПеречислениеНалога > 0) Тогда

			Замены=Замены + ИзменитьНалоговыйАтрибут(Объект, "СтатусСоставителяПлДок", ТаблицаДокументов.СтатусСоставителя);
			Замены=Замены + ИзменитьНалоговыйАтрибут(Объект, "КодБК", 			   	   ТаблицаДокументов.ПоказательКБК);
			Замены=Замены + ИзменитьНалоговыйАтрибут(Объект, "КодОКАТО", 			   ТаблицаДокументов.ОКАТО);
			Замены=Замены + ИзменитьНалоговыйАтрибут(Объект, "ПоказательОснования",    ТаблицаДокументов.ПоказательОснования);
			Замены=Замены + ИзменитьНалоговыйАтрибут(Объект, "ПоказательПериода",      ТаблицаДокументов.ПоказательПериода);
			Замены=Замены + ИзменитьНалоговыйАтрибут(Объект, "ПоказательНомера", 	   ТаблицаДокументов.ПоказательНомера);
			Замены=Замены + ИзменитьНалоговыйАтрибут(Объект, "ПоказательДаты", 	 	   Дата(ТаблицаДокументов.ПоказательДаты));
			Замены=Замены + ИзменитьНалоговыйАтрибут(Объект, "ПоказательТипа", 	 	   ТаблицаДокументов.ПоказательТипа);

			Замены=Замены + ИзменитьНалоговыйАтрибут(Объект, "КППплательщика",
	                              		    		 ТаблицаДокументов.ПолучитьЗначение(ТаблицаДокументов.НомерСтроки, РольОрганизации + "КПП"));

			Замены=Замены + ИзменитьНалоговыйАтрибут(Объект, "КППполучателя", 
	                                      			 ТаблицаДокументов.ПолучитьЗначение(ТаблицаДокументов.НомерСтроки, Корреспондент + "КПП"));
		Иначе
		
			Если Метаданные.Документ(Объект.Вид()).РеквизитШапки("КППплательщика").Выбран() = 1 Тогда
				Замены=Замены+ИзменитьАтрибут(Объект, "КППплательщика",
		                              		  ТаблицаДокументов.ПолучитьЗначение(ТаблицаДокументов.НомерСтроки, РольОрганизации + "КПП"));
			КонецЕсли;
	
			Если Метаданные.Документ(Объект.Вид()).РеквизитШапки("КППполучателя").Выбран() = 1 Тогда
				Замены=Замены+ИзменитьАтрибут(Объект, "КППполучателя", 
		                                      ТаблицаДокументов.ПолучитьЗначение(ТаблицаДокументов.НомерСтроки, Корреспондент + "КПП"));
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;

	// вид аккредитива
	Если Метаданные.Документ(Объект.Вид()).РеквизитШапки("ВидАккредитива").Выбран() = 1 Тогда
		ВидАккредитива=НайтиЗначПеречисления("ВидыАккредитива", ТаблицаДокументов.ВидАккредитива);
		Замены=Замены+ИзменитьАтрибут(Объект, "ВидАккредитива", ВидАккредитива);
	КонецЕсли;

	// платеж по представлению
	Если Метаданные.Документ(Объект.Вид()).РеквизитШапки("ВидДокумента").Выбран() = 1 Тогда
		Замены=Замены+ИзменитьАтрибут(Объект, "ВидДокумента", ТаблицаДокументов.ПлатежПоПредст);
    КонецЕсли;
		
	// дополнительные условия
	Если Метаданные.Документ(Объект.Вид()).РеквизитШапки("ДополнУсловия").Выбран() = 1 Тогда
		Замены=Замены+ИзменитьАтрибут(Объект, "ДополнУсловия", ТаблицаДокументов.ДополнУсловия);
    КонецЕсли;
		
	// номер счета поставщика
	Если Метаданные.Документ(Объект.Вид()).РеквизитШапки("СчетПоставщика").Выбран() = 1 Тогда
		Замены=Замены+ИзменитьАтрибут(Объект, "СчетПоставщика", ТаблицаДокументов.НомерСчетаПоставщика);
    КонецЕсли;
		
	// очередность платежа
	Если Метаданные.Документ(Объект.Вид()).РеквизитШапки("Очередность").Выбран() = 1 Тогда
		Замены=Замены+ИзменитьАтрибут(Объект, "Очередность", Число(ТаблицаДокументов.Очередность));
    КонецЕсли;
		
	// строка содержания
	Если ПустаяСтрока(ТаблицаДокументов.НазначениеПлатежа)=0 Тогда
		Содержание=ТаблицаДокументов.НазначениеПлатежа;
	Иначе
		Содержание=ТаблицаДокументов.НазначениеПлатежа1+ТаблицаДокументов.НазначениеПлатежа2+
		           ТаблицаДокументов.НазначениеПлатежа3+ТаблицаДокументов.НазначениеПлатежа4+
				   ТаблицаДокументов.НазначениеПлатежа5+ТаблицаДокументов.НазначениеПлатежа6;
	КонецЕсли;

	// исключение строки НДС из содержания
	Если Метаданные.Документ(Объект.Вид()).РеквизитШапки("АвтоПодстСуммыНДС").Выбран() = 1 Тогда
		НДС=СтрЗаменить(ФормирСуммаНДС(Объект.АвтоПодстСуммыНДС, Объект.Сумма, Объект.НДС, Объект.СтавкаНДС), РазделительСтрок, " ");
		Если ПустаяСтрока(НДС) = 0 Тогда
			НДС=Найти(Содержание, НДС); 
			Если 0<НДС Тогда Содержание=Лев(Содержание, НДС-1); КонецЕсли;
		КонецЕсли;
    КонецЕсли;
		
	// содержание платежа
	ЗамененоСодержание = ИзменитьАтрибут(Объект, "Содержание", Содержание); 
	Замены=Замены + ЗамененоСодержание;
	Если ЗамененоСодержание = 1 Тогда
		Если Метаданные.Документ(Объект.Вид()).РеквизитШапки("АвтоПодстСуммыНДС").Выбран() = 1 Тогда
			ИзменитьАтрибут(Объект, "АвтоПодстСуммыНДС", Перечисление.ПодстановкаСуммыНДС.БезСуммыБезНДС); 
		КонецЕсли;
	КонецЕсли;
		
	Если Метаданные.Документ(Объект.Вид()).РеквизитШапки("УсловиеОплаты").Выбран() = 1 Тогда
		
		УсловиеОплаты=ТаблицаДокументов.УсловиеОплаты1+ТаблицаДокументов.УсловиеОплаты2+
		              ТаблицаДокументов.УсловиеОплаты3;
		// акцепт
		Если      0<Найти(УсловиеОплаты, "С акцептом ") Тогда
			Замены=Замены+ИзменитьАтрибут(Объект, "Акцепт", 1);
			УсловиеОплаты=СтрЗаменить(УсловиеОплаты, "С акцептом ", "");
		
		ИначеЕсли 0<Найти(УсловиеОплаты, "Без акцепта ") Тогда
			Замены=Замены+ИзменитьАтрибут(Объект, "Акцепт", 0);
			УсловиеОплаты=СтрЗаменить(УсловиеОплаты, "Без акцепта ", "");
		КонецЕсли;
	
		// условия оплаты
		Замены=Замены+ИзменитьАтрибут(Объект, "УсловиеОплаты", УсловиеОплаты);
    КонецЕсли;

	// срок акцепта
	Если Метаданные.Документ(Объект.Вид()).РеквизитШапки("СрокАкцепта").Выбран() = 1 Тогда
		Замены=Замены+ИзменитьАтрибут(Объект, "СрокАкцепта", Число(ТаблицаДокументов.СрокАкцепта));
	КонецЕсли;
	
	// дата отсылки документов
	Если Метаданные.Документ(Объект.Вид()).РеквизитШапки("ДатаОтсылки").Выбран() = 1 Тогда
		Замены=Замены+ИзменитьАтрибут(Объект, "ДатаОтсылки", ТаблицаДокументов.ДатаОтсылкиДок);
	КонецЕсли;
	
	// запись при необходимости
	Если 0<Замены Тогда
		Если ЗаписатьДокумент(Объект) = 0 Тогда
			Возврат ПолучитьПустоеЗначение("Документ");
		КонецЕсли;
		
	Иначе	
		Сообщить("Обработан документ: "+Объект, " ");
	
	КонецЕсли;
	
	// включение документа в банковские выписки
	ПровестиДокументПоСчету(Объект.ТекущийДокумент(), ПлательщикСчет, 
	                        ТаблицаДокументов.ДатаСписано, 0, Объект.Сумма);
	ПровестиДокументПоСчету(Объект.ТекущийДокумент(), ПолучательСчет, 
	                        ТаблицаДокументов.ДатаПоступило, Объект.Сумма, 0);
	
	Возврат(Объект.ТекущийДокумент());
	
КонецФункции // ЗагрузитьПлатежныйДокумент()

//******************************************************************************
// ЗагрузитьОперациюПоРасчетномуСчету()
//
// Возвращаемое значение:
//  Документ - найденный (созданный) документ "ОперацияПоРасчСчету".
//
// Описание:
//  Осуществляет поиск в информационной базе документа "ОперацияПоРасчСчету", если 
// такой документ несуществует добавляется новый. Затем вызывается процедура  
// ПровестиДокументПоСчету(), осуществляющая формирование движений в учете.
//
Функция ЗагрузитьОперациюПоРасчетномуСчету()
	
	Перем Синоним;
	
	// строка, идентифицирующая документ
	Идентификатор=СокрЛП(ТаблицаДокументов.СекцияДокумент)+
	              " с "+СокрЛП(ТаблицаДокументов.ПлательщикСчет)+
	              " на "+СокрЛП(ТаблицаДокументов.ПолучательСчет);
				  
	// поиск ранее загруженного документа
	Объект=СоздатьОбъект("Документ.ОперацияПоРасчСчету");
	Объект.ВыбратьПоНомеру(ТаблицаДокументов.Номер, ТаблицаДокументов.Дата);
	Пока Объект.ПолучитьДокумент()=1 Цикл
		Если Объект.Идентификатор=Идентификатор Тогда 
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	// обработка найденного или создание нового документа
	Если Объект.Выбран()=1 Тогда
		СнятьПометкуУдаления(Объект);
 	Иначе
		Объект.Новый(); 
		Объект.НомерДок=ТаблицаДокументов.Номер;
		Объект.ДатаДок=ТаблицаДокументов.Дата;
		Объект.Идентификатор=Идентификатор;
		Сообщить("Создан документ: "+Объект.Вид()+" "+Объект.НомерДок+" ("+Объект.ДатаДок+")", " ");
	КонецЕсли;

	Замены=0;
	// дата документа
	Замены=Замены+ИзменитьАтрибут(Объект, "ДатаДок", ТаблицаДокументов.Дата);
	// сумма документа
	Замены=Замены+ИзменитьАтрибут(Объект, "Сумма", ТаблицаДокументов.Сумма);
	
	// плательщик и его расчетный счет - элементы справочников
	Плательщик     = НайтиОрганизацию("Плательщик", "Фирмы");
	ПлательщикСчет = НайтиРасчетныйСчет("Плательщик", "БанковскиеСчета",Плательщик);
	Если ПлательщикСчет.Выбран()=0 Тогда
		Плательщик     = НайтиОрганизацию("Плательщик", "Контрагенты");
		ПлательщикСчет = НайтиРасчетныйСчет("Плательщик", "РасчетныеСчета", Плательщик);
		
	ИначеЕсли ТипЗначенияСтр(Плательщик) <> "Справочник" Тогда
		Плательщик = ПолучитьПустоеЗначение("Справочник.Контрагенты");
		
	КонецЕсли;

	// плательщик
	Замены=Замены+ИзменитьАтрибут(Объект, "Плательщик", Плательщик);
	// расчетный счет плательщика
	Замены=Замены+ИзменитьАтрибут(Объект, "ПлательщикСчет", ПлательщикСчет);
	
	// получатель и его расчетный счет - элементы справочников
	Получатель     = НайтиОрганизацию("Получатель", "Фирмы");
	ПолучательСчет = НайтиРасчетныйСчет("Получатель", "БанковскиеСчета",Получатель);
	Если ПолучательСчет.Выбран()=0 Тогда
		Получатель     = НайтиОрганизацию("Получатель", "Контрагенты");
		ПолучательСчет = НайтиРасчетныйСчет("Получатель", "РасчетныеСчета", Получатель);
		
	ИначеЕсли ТипЗначенияСтр(Получатель) <> "Справочник" Тогда
		Получатель = ПолучитьПустоеЗначение("Справочник.Контрагенты");
		
	КонецЕсли;

	// получатель
	Замены=Замены+ИзменитьАтрибут(Объект, "Получатель", Получатель);
	// расчетный счет получателя
	Замены=Замены+ИзменитьАтрибут(Объект, "ПолучательСчет", ПолучательСчет);
	
	// таблица всех реквизитов документа
	Реквизиты=СоздатьОбъект("ТаблицаЗначений");
	Реквизиты.НоваяКолонка("Имя", "Строка", 25);
	Реквизиты.НоваяКолонка("Синоним", "Строка", 50);
	Реквизиты.НоваяКолонка("Значение", "Строка", 100);
	
	// отбор всех непустых реквизитов
	Стр=ТаблицаДокументов.НомерСтроки;
	Для Кол=1 по ТаблицаДокументов.КоличествоКолонок() Цикл
		Значение=ТаблицаДокументов.ПолучитьЗначение(Стр, Кол);
        Если ПустоеЗначение(Значение)=1 Тогда Продолжить; КонецЕсли;
		Имя=ТаблицаДокументов.ПолучитьПараметрыКолонки(Кол, "", 0, 0, Синоним);
		Реквизиты.НоваяСтрока();
		Реквизиты.Имя=Имя; Реквизиты.Синоним=Синоним; Реквизиты.Значение=Строка(Значение);
	КонецЦикла;

	// установка значений ранее записанных реквизитов документа
	Объект.ВыбратьСтроки();
	Пока Объект.ПолучитьСтроку()=1 Цикл
		Стр=0;
		Если 1=Реквизиты.НайтиЗначение(Объект.Имя, Стр, "Имя") Тогда
			Значение=Реквизиты.ПолучитьЗначение(Стр, "Значение");
			Замены=Замены+ИзменитьАтрибут(Объект, "Значение", Значение);
			Реквизиты.УдалитьСтроку(Стр);
		КонецЕсли;
	КонецЦикла;
	
	// запись новых реквизитов документа
	Реквизиты.ВыбратьСтроки();
	Пока Реквизиты.ПолучитьСтроку()=1 Цикл
		Объект.НоваяСтрока();
		Объект.Имя=Реквизиты.Имя; Объект.Синоним=Реквизиты.Синоним;
		Замены=Замены+ИзменитьАтрибут(Объект, "Значение", Реквизиты.Значение);
	КонецЦикла;
	
	// запись документа при необходимости
	Если 0<Замены Тогда
		ЗаписатьДокумент(Объект);
	Иначе	
		Сообщить("Обработан документ: "+Объект, " ");
	КонецЕсли;
	
	// включение документа в банковские выписки
	ПровестиДокументПоСчету(Объект.ТекущийДокумент(), ПлательщикСчет, 
	                        ТаблицаДокументов.ДатаСписано, 0, Объект.Сумма);
	ПровестиДокументПоСчету(Объект.ТекущийДокумент(), ПолучательСчет, 
	                        ТаблицаДокументов.ДатаПоступило, Объект.Сумма, 0);

	Возврат(Объект.ТекущийДокумент());
	
КонецФункции // ЗагрузитьОперациюПоРасчетномуСчету()

//******************************************************************************
// ЗагрузитьТаблицуДокументов()
//
// Описание:
//  Процедура осуществляет последовательный вызов процедур поиска (создания) 
// платежных документов на основании сформированной таблицы загружаемых 
// документов, при этом формируется список загруженных документов.
//
Процедура ЗагрузитьТаблицуДокументов()
	ЗагрДокументы.УдалитьВсе();
	
	ТаблицаДокументов.ВыбратьСтроки();
	Пока ТаблицаДокументов.ПолучитьСтроку()=1 Цикл

        Документ=ЗагрузитьПлатежныйДокумент();
		Если ПустоеЗначение(Документ)=1 Тогда
			Документ=ЗагрузитьОперациюПоРасчетномуСчету();

			Если ПустоеЗначение(Документ)=1 Тогда
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		
		Если 0=ЗагрДокументы.НайтиЗначение(Документ) Тогда
			ЗагрДокументы.ДобавитьЗначение(Документ);
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры // ЗагрузитьТаблицуДокументов()

//******************************************************************************
// СинхронизироватьДокументы(Вид, Атрибут1, Атрибут2)
//
// Параметры:
//  Вид      - строка, вид (идентификатор) документа.
//  Атрибут1 - строка, вид (идентификатор) атрибута 1 документа (банковский счет).
//  Атрибут2 - строка, вид (идентификатор) атрибута 2 документа (банковский счет).
//
// Описание:
//  Процедура синхронизирует документ определенного вид за загружаемый период.
// При этом документ, не вошедший в список загруженных, помечается на удаление,
// при условии что документы данного вида загружались.
//
Процедура СинхронизироватьДокументы(Вид, Атрибут1, Атрибут2)
	
	Объект=СоздатьОбъект("Документ."+Вид);
	Объект.ВыбратьДокументы(НачДатаЗагрузки, КонДатаЗагрузки);
	Пока Объект.ПолучитьДокумент()=1 Цикл
		Счет1=Объект.ПолучитьАтрибут(Атрибут1); 
		Счет2=Объект.ПолучитьАтрибут(Атрибут2);
		
		Если ЗагрДокументы.Принадлежит(Объект.ТекущийДокумент())=1 Тогда
			
		ИначеЕсли Счет1.Выбран()=0 Тогда
		ИначеЕсли ЗагрРасчетныеСчета.Принадлежит(Счет1.Номер)=1 Тогда
			УдалитьДокумент(Объект);

		ИначеЕсли Счет2.Выбран()=0 Тогда
		ИначеЕсли ЗагрРасчетныеСчета.Принадлежит(Счет2.Номер)=1 Тогда
			УдалитьДокумент(Объект);
			
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры // СинхронизироватьДокументы()

//******************************************************************************
// СинхронизироватьСчета()
//
// Описание:
//  Процедура осуществляет синхронизацию платежных документов и документов 
// формирующих движения в учете по расчетным счетам.
//
Процедура СинхронизироватьСчета()
	
	СинхронизироватьДокументыПоСчетам();
	
	Для Н=1 По ЗагрВидыДокументов.РазмерСписка() Цикл
		ВидДокумента=ЗагрВидыДокументов.ПолучитьЗначение(Н);
		СинхронизироватьДокументы(ВидДокумента, "РасчетныйСчет", "СчетКонтрагента");
	КонецЦикла;
	СинхронизироватьДокументы("ОперацияПоРасчСчету", "ПлательщикСчет", "ПолучательСчет");
	
КонецПроцедуры // СинхронизироватьСчета()

//******************************************************************************
// ОшибкаЗагрузкиТекста(Ном, СтрТекста, СтрОшибки)
//
//  Ном       - число, номер текущей строки файла обмена данными.
//  СтрТекста - строка, строка файла обмена данными.
//  СтрОшибки - строка, строка описания ошибки.
//
// Описание:
//  Процедура сообщает об ошибки загрузки данных из файла обмена даннами.
//
Процедура ОшибкаЗагрузкиТекста(Ном, СтрТекста, СтрОшибки)
	
	Стр="Ошибка: ";
	Если 0<Ном Тогда Стр=Стр+"строка "+Ном+", "; КонецЕсли;
	Если ПустаяСтрока(СтрТекста)=0 Тогда Стр=Стр+""""+СтрТекста+""", "; КонецЕсли;
	
	Сообщить(Стр+СтрОшибки, "!!");
	
КонецПроцедуры // ОшибкаЗагрузкиТекста()

//******************************************************************************
// ЗагрузитьСтрокуЗаголовка(Стр, Ном)
//
// Параметры:
//  Стр - строка, строка файла обмена данными.
//  Ном - число, номер текущей строки файла обмена данными.
//
// Описание:
//  Процедура осуществляет загрузку строки заголовка файла обмена даннами.
//
Процедура ЗагрузитьСтрокуЗаголовка(Стр, Ном)
	
	Равно=Найти(Стр, "=");
	Имя=Врег(СокрЛП(Лев(Стр, Равно-1))); Значение=Сред(Стр, Равно+1);

	Если Равно=0 Тогда
		ОшибкаЗагрузкиТекста(Ном, Стр, "не найден символ ""=""");

	ИначеЕсли Имя="ВЕРСИЯФОРМАТА" Тогда
// 	ДобавитьПараметрЗагрузки(Значение, "Версия формата файла:");
	ИначеЕсли Имя="КОДИРОВКА" Тогда
// 	ДобавитьПараметрЗагрузки(Значение, "Кодировка файла:");
	ИначеЕсли Имя="ОТПРАВИТЕЛЬ" Тогда
// 	ДобавитьПараметрЗагрузки(Значение, "Программа-экспортер:");
	ИначеЕсли Имя="ПОЛУЧАТЕЛЬ" Тогда
// 	ДобавитьПараметрЗагрузки(Значение, "Программа-импортер:");
	ИначеЕсли Имя="ДАТАСОЗДАНИЯ" Тогда
// 	ДобавитьПараметрЗагрузки(Значение, "Дата создания файла:");
	ИначеЕсли Имя="ВРЕМЯСОЗДАНИЯ" Тогда
// 	ДобавитьПараметрЗагрузки(Значение, "Время создания файла:");

	ИначеЕсли Имя="ДАТАНАЧАЛА" Тогда
		НачДатаЗагрузки=Дата(СокрЛП(Значение));
// 	ДобавитьПараметрЗагрузки(Значение, "Начало интервала:");
			
	ИначеЕсли Имя="ДАТАКОНЦА" Тогда
		КонДатаЗагрузки=Дата(СокрЛП(Значение));
// 	ДобавитьПараметрЗагрузки(Значение, "Конец интервала:");

	ИначеЕсли Имя="РАСЧСЧЕТ" Тогда
		Значение=СокрЛП(Значение);
		ЗагрРасчетныеСчета.Установить(Значение, Значение);
// 	ТекстРасчСчетаЗагрузки=ТекстРасчСчетаЗагрузки+Значение+РазделительСтрок;

	ИначеЕсли Имя="ДОКУМЕНТ" Тогда
		Значение = Врег(СокрЛП(Значение)); 
		ВидДокумента = ВидыДокументовДляПоиска.Получить(Значение);
		
		Если ПустаяСтрока(ВидДокумента) = 0 Тогда
			ЗагрВидыДокументов.Установить(ВидДокумента, ВидДокумента);
			
		Иначе
			Таб = СоздатьОбъект("Таблица");
			Таб.ИсходнаяТаблица("ВидыДокументов");
			Таб.Вывести();
			Для Индекс = 1 По Таб.ВысотаТаблицы() Цикл
				Если  Врег(СокрЛП(Таб.Область(Индекс, 2).Текст)) = Значение Тогда
					Прервать;
				КонецЕсли;
			КонецЦикла;
			
			Если Индекс > Таб.ВысотаТаблицы() Тогда
				Сообщить("Внимание: строка " + Ном + ", """ + Стр + """, неверный вид документа: " + Значение + " !");
	
			КонецЕсли;
			
		КонецЕсли;
	
	Иначе
		ОшибкаЗагрузкиТекста(Ном, Стр, "неверный идентификатор: """+Имя+"""");
		
	КонецЕсли;
	
КонецПроцедуры // ЗагрузитьСтрокуЗаголовка()

//******************************************************************************
// ЗагрузитьСтрокуДокумента(Стр, Ном)
//
//  Стр - строка, строка файла обмена данными.
//  Ном - число, номер текущей строки файла обмена данными.
//
// Описание:
//  Процедура осуществляет запись строки секции "Секция платежного документа"
//  файла обмена даннами, в таблицу значений загружаемых документов.
//
Процедура ЗагрузитьСтрокуДокумента(Стр, Ном)
	
	Перем Тип, Длина;
	
	Равно=Найти(Стр, "=");
	Имя=Врег(СокрЛП(Лев(Стр, Равно-1))); Значение=Сред(Стр, Равно+1);
	Колонка=АтрибутыДокументов.Получить(Имя);

	Если Равно=0 Тогда
		ОшибкаЗагрузкиТекста(Ном, Стр, "не найден символ ""=""");

	ИначеЕсли ПустоеЗначение(Колонка)=0 Тогда
		ТаблицаДокументов.ПолучитьПараметрыКолонки(Колонка, Тип, Длина);
		Если      Тип="Число" Тогда
			Значение=Число(СокрЛП(Значение));
			Если Значение < 0 Тогда
				Значение = - Значение;
			КонецЕсли;
			
		ИначеЕсли Тип="Дата"  Тогда
			Значение=Дата(СокрЛП(Значение));
			
		ИначеЕсли Длина<>0    Тогда
			Значение=СокрЛП(Значение);
			
		КонецЕсли;

		Если ((Имя = "ПЛАТЕЛЬЩИКИНН") ИЛИ (Имя = "ПОЛУЧАТЕЛЬИНН")) И (СтрДлина(Значение) < 10) Тогда
			Сообщить("Значение поля """ + Имя + """  """ + Значение + """ имеет недопустимо малую длину!", "!");
		КонецЕсли;
		
		НомерСтроки=ТаблицаДокументов.НомерСтроки;
		ТаблицаДокументов.УстановитьЗначение(НомерСтроки, Колонка, Значение);
	
	Иначе
		ОшибкаЗагрузкиТекста(Ном, Стр, "неверный идентификатор: """+Имя+"""");
	КонецЕсли;
	
КонецПроцедуры // ЗагрузитьСтрокуДокумента()

//******************************************************************************
// ЗагрузитьСекциюДокумента(Текст, К)
//
// Параметры:
//  Текст - текст, текст файла обмена данными.
//  К     - число, номер текущей строки файла обмена данными.
//
// Описание:
//  Процедура осуществляет обход секции "Секция платежного документа"
//  файла обмена даннами.
//
Процедура ЗагрузитьСекциюДокумента(Текст, К)
	
	ТаблицаДокументов.НоваяСтрока();
	
	Для К=К по Текст.КоличествоСтрок() Цикл
		Состояние("Обработка: строка "+К);
		Стр=Текст.ПолучитьСтроку(К);
		
		Если ПустоеЗначение(Стр)=1 Тогда 
			Продолжить;
		ИначеЕсли Врег(Лев(СокрЛП(Стр), 5))="КОНЕЦ" Тогда 
			Прервать; 
		КонецЕсли;

		ЗагрузитьСтрокуДокумента(Стр, К);
	КонецЦикла;
    
	Если ОпределятьПоВидуОплаты = 1 Тогда
		    
		ВидДокумента=ВидыОпераций.Получить(ТаблицаДокументов.ВидОплаты);
		Если ПустоеЗначение(ВидДокумента)=0 Тогда
			ТаблицаДокументов.СекцияДокумент=ВидДокумента;
		КонецЕсли;
	
	КонецЕсли;
	
КонецПроцедуры // ЗагрузитьСекциюДокумента()

//******************************************************************************
// ЗагрузитьСекциюРасчСчета(Текст, К)
//
// Параметры:
//  Текст - текст, текст файла обмена данными.
//  К     - число, номер текущей строки файла обмена данными.
//
// Описание:
//  Процедура осуществляет обход секции "Секция передачи остатков по расчетному счету"
//  файла обмена даннами.
//
Процедура ЗагрузитьСекциюРасчСчета(Текст, К)
	
	Для К=К+1 по Текст.КоличествоСтрок() Цикл
		Состояние("Обработка: строка "+К);
		Стр=Текст.ПолучитьСтроку(К);
		
		Если ПустоеЗначение(Стр)=1 Тогда 
			Продолжить;
		ИначеЕсли Врег(Лев(СокрЛП(Стр), 5))="КОНЕЦ" Тогда 
			Прервать; 
		КонецЕсли;

	КонецЦикла;
	
КонецПроцедуры // ЗагрузитьСекциюРасчСчета()

//******************************************************************************
// ЗагрузитьТекст()
//
// Вызывается из формул элементов диалога:
//  Кнопка "кнЗагрузить".
//
// Описание:
//  Осуществляется загрузка файла обмена данными из системы "Клиент банка",
// в соответствии с принятым форматом.
//
Процедура ЗагрузитьТекст()
	
	Если КаталогИмяФайла(ИмяФайлаЗагрузки, "", "") = 0 Тогда
		Возврат;
	КонецЕсли;
		
	ТаблицаДокументов.УдалитьСтроки();

	Текст=ТекстФайла(ИмяФайлаЗагрузки);
	Если ПустоеЗначение(Текст)=1 Тогда Возврат; КонецЕсли;
	
	Для К=2 по Текст.КоличествоСтрок() Цикл
		Состояние("Обработка: строка "+К);
		Стр=Текст.ПолучитьСтроку(К);
		
		Если ПустаяСтрока(Стр)=1 Тогда
			Продолжить;
			
		ИначеЕсли Лев(Врег(СокрЛП(Стр)), 10)="КОНЕЦФАЙЛА" Тогда 
			Прервать; 
		
		ИначеЕсли Лев(Врег(СокрЛП(Стр)), 14)="СЕКЦИЯДОКУМЕНТ" Тогда 
            ЗагрузитьСекциюДокумента(Текст, К);
			
		ИначеЕсли Лев(Врег(СокрЛП(Стр)), 14)="СЕКЦИЯРАСЧСЧЕТ" Тогда 
			ЗагрузитьСекциюРасчСчета(Текст, К);
			
		Иначе
			ЗагрузитьСтрокуЗаголовка(Стр, К);
			
		КонецЕсли;
		
	КонецЦикла;
	
	ЗагрузитьТаблицуДокументов();
	СинхронизироватьСчета();
	
	Если ВыводитьОтчет=1 Тогда 
		Печать();
	КонецЕсли;
	
КонецПроцедуры // ЗагрузитьТекст()

////////////////////////////////////////////////////////////////////////////////
// ПРЕДОПРЕДЕЛЕННЫЕ ПРОЦЕДУРЫ
// 
//******************************************************************************
// Предопределенная процедура
//
Процедура ПриОткрытии(Настройка) 
	
	Если Настройка=0 Тогда
		ИмяФайлаВыгрузки=КаталогПользователя()+"1c_to_kl.txt";
		ИмяФайлаЗагрузки=КаталогПользователя()+"kl_to_1c.txt";
	КонецЕсли;

	ЗаполнитьРасчетныеСчета(); ЗаполнитьВыгрВидыДок();
	НачДатаВыгрузки=РабочаяДата(); КонДатаВыгрузки=РабочаяДата();
	КлиентБанка = ВосстановитьЗначение("ПрограммаКлиентБанка");

	Форма.ИспользоватьСлой(Форма.Закладки.ПолучитьЗначение(1), 2);
	ИмяФайлаВыгрузки = "D:\1\1c_to_k.txt"; //NDline
КонецПроцедуры // ПриОткрытии()

//******************************************************************************
// Предопределенная процедура
//
Процедура ПриЗакрытии()

	СохранитьЗначение("ПрограммаКлиентБанка",КлиентБанка);

КонецПроцедуры // ПриЗакрытии()

//******************************************************************************
// Предопределенная процедура
//
Процедура ПриВыбореЗакладки(НомерЗакладки, ЗначениеЗакладки)
	
	Форма.ИспользоватьСлой(ЗначениеЗакладки, 2);

КонецПроцедуры // ПриВыбореЗакладки()

//******************************************************************************
// Предопределенная процедура
//
Процедура ПриНачалеВыбораЗначения(ЭлементДиалога, ФлагОбработки)
	
	Перем Каталог, Файл; 
	
	Если ЭлементДиалога="ИмяФайлаВыгрузки" Тогда
		КаталогИмяФайла(ИмяФайлаВыгрузки, Каталог, Файл);
		Если ФС.ВыбратьФайл(0, Файл, Каталог, "Файл выгрузки", 
		                    "Текстовые (*.txt)|*.txt", "txt")=1 Тогда
			ИмяФайлаВыгрузки=Каталог+Файл; 
		КонецЕсли;

	ИначеЕсли ЭлементДиалога="ИмяФайлаЗагрузки" Тогда
		КаталогИмяФайла(ИмяФайлаЗагрузки, Каталог, Файл);
		Если ФС.ВыбратьФайл(0, Файл, Каталог, "Файл загрузки", 
		                    "Текстовые (*.txt)|*.txt", "txt")=1 Тогда
			ИмяФайлаЗагрузки=Каталог+Файл; 
		КонецЕсли;

	ИначеЕсли ЭлементДиалога="КлиентБанка" Тогда
		Список=СоздатьОбъект("СписокЗначений");
		Список.ДобавитьЗначение("DiasoftCLIENT 4x4 for Windows Диасофт");
		Список.ДобавитьЗначение("Клиент-Банк РФК");
		Список.ДобавитьЗначение("LanVisit DOS 4.90 Ланит");
		Список.ДобавитьЗначение("ДБО BS-Client v.3 BSS");
		Список.ДобавитьЗначение("Система клиент-банк TIVAL");
		Список.ДобавитьЗначение("Клиент банка InterBank v.5.1 R-Style Software Lab");
		Список.ДобавитьЗначение("""Электронный клиент"" АКБ Автобанк");
		Список.ДобавитьЗначение("""Клиент-ТЕЛЕБАНК"" АОЗТ Степ Ап");
		Список.ДобавитьЗначение("ИНИСТ Банк-Клиент ЗАО ИНИСТ");
		Список.ДобавитьЗначение("Клиент-банк МИБ");
		Список.ДобавитьЗначение("Система Клиент-Банк ""BClient""");
		Список.ДобавитьЗначение("Система электронных расчетов QuickPay ЗАО АО Кворум");
		Список.ДобавитьЗначение("Комплекс обмена платежными документами Курьер. АОЗТ АстраСофт");
		Список.ДобавитьЗначение("WinClient фирмы МПИ-Банк");
		Список.ДобавитьЗначение("Система ""Клиент-Банк Плюс"" ОАО ""Уралвнешторгбанка""");
		Список.ДобавитьЗначение("Система ""MailBank"" фирмы ""Системные технологии"" Минск");
		Список.ДобавитьЗначение("On-Soft Клиент-Банк КБ ""ЛОКО-Банк""");
        Список.ДобавитьЗначение("АРМ ""Клиент"" АС ""Клиент-Сбербанк"" Сбербанка России");
		Список.ДобавитьЗначение("Система  ""iBank 2"" ООО ""БИФИТ""");
		Список.ДобавитьЗначение("""Yugo-Vostok Online"" ОАО БАНК ""ЮГО-ВОСТОК""");
		Список.ДобавитьЗначение("Банк-клиент АКБ ""Лефко-Банк""");
		Список.ДобавитьЗначение("Клиент-банк ""BARS"" фирмы ""Оникс Капитал""");
		Список.ДобавитьЗначение("Система Банк-Клиент АКБ ""София""");
		Список.ДобавитьЗначение("Система ""Электронный Офис"" ОАО ""ИМПЭКСБАНК""");
		
		Список.ВыбратьЗначение(КлиентБанка, "", , , 2);
		
	КонецЕсли;
	
КонецПроцедуры // ПриНачалеВыбораЗначения()

//******************************************************************************

Форма.ИспользоватьЗакладки(1);
Форма.Закладки.ДобавитьЗначение("Основной", "Экспорт и импорт");
Форма.Закладки.ДобавитьЗначение("Настройка", "Настройка обмена");

Кодировка.ДобавитьЗначение(0, "Windows");
Кодировка.ДобавитьЗначение(1, "DOS");

ТаблицаДокументов=СоздатьОбъект("ТаблицаЗначений");

// шапка платежного документа
ТаблицаДокументов.НоваяКолонка("Документ",				"Строка",	,	,	"Вид документа");
ТаблицаДокументов.НоваяКолонка("СекцияДокумент",		"Строка",	,	,	"Вид документа");
ТаблицаДокументов.НоваяКолонка("Номер",					"Строка",	,	,	"Номер документа");
ТаблицаДокументов.НоваяКолонка("Дата",					"Дата",		,	,	"Дата документа");
ТаблицаДокументов.НоваяКолонка("Сумма",					"Число",	15, 2,	"Сумма платежа");

// Квитанция по платежному документу
ТаблицаДокументов.НоваяКолонка("КвитанцияДата",			"Дата",		,	,	"Дата формирования квитанции");
ТаблицаДокументов.НоваяКолонка("КвитанцияВремя",		"Строка",	8,	,	"Время формирования квитанции");
ТаблицаДокументов.НоваяКолонка("КвитанцияСодержание",	"Строка",	,	,	"Содержание квитанции");

ТаблицаДокументов.НоваяКолонка("ПлательщикСчет",		,			,	,	"Номер р/с плательщика в его банке");	// Номер р/с плательщика в его банке
ТаблицаДокументов.НоваяКолонка("ДатаСписано",			"Дата",		,	,	"Дата списания средств с р/с");
// реквизиты плательщика																							   в случае непрямых расчетов:
ТаблицаДокументов.НоваяКолонка("ПлательщикИНН", 		"Строка",	12,	,	"ИНН плательщика");						// ИНН плательщика
ТаблицаДокументов.НоваяКолонка("ПлательщикКПП", 		"Строка",	9,	,	"КПП плательщика");						// КПП плательщика
ТаблицаДокументов.НоваяКолонка("Плательщик",			"Строка",	,	,	"Плательщик");							// Плательщик
ТаблицаДокументов.НоваяКолонка("Плательщик1",			"Строка",	,	,	"Наименование плательщика");			// Наименование плательщика
ТаблицаДокументов.НоваяКолонка("Плательщик2",			"Строка",	,	,	"Наименование плательщика, стр. 2");	// Расчетный счет плательщика
ТаблицаДокументов.НоваяКолонка("Плательщик3",			"Строка",	,	,	"Наименование плательщика, стр. 3");	// Банк плательщика
ТаблицаДокументов.НоваяКолонка("Плательщик4",			"Строка",	,	,	"Наименование плательщика, стр. 4");	// Город банка плательщика
ТаблицаДокументов.НоваяКолонка("ПлательщикРасчСчет",	"Строка",	20,	,	"Расчетный счет плательщика");			// Корсчет банка плательщика
// реквизиты банка плательщика
ТаблицаДокументов.НоваяКолонка("ПлательщикБанк1",		"Строка",	,	,	"Банк плательщика");					// РЦ банка плательщика
ТаблицаДокументов.НоваяКолонка("ПлательщикБанк2",		"Строка",	,	,	"Город банка плательщика");				// Город РЦ банка плательщика
ТаблицаДокументов.НоваяКолонка("ПлательщикБИК",			"Строка",	9,	,	"БИК банка плательщика");				// БИК РЦ банка плательщика
ТаблицаДокументов.НоваяКолонка("ПлательщикКорсчет",		"Строка",	20,	,	"Корсчет банка плательщика");			// Корсчет РЦ банка плательщика

ТаблицаДокументов.НоваяКолонка("ПолучательСчет",		"Строка",	20,	,	"Номер р/с получателя в его банке");	// Номер р/с получателя в его банке
ТаблицаДокументов.НоваяКолонка("ДатаПоступило",			"Дата",		,	,	"Дата поступления средств на р/с");
// реквизиты получателя (поставщика)
ТаблицаДокументов.НоваяКолонка("ПолучательИНН", 		"Строка",	12,	,	"ИНН получателя");						// ИНН получателя
ТаблицаДокументов.НоваяКолонка("ПолучательКПП", 		"Строка",	9,	,	"КПП получателя");						// КПП получателя
ТаблицаДокументов.НоваяКолонка("Получатель",			"Строка",	,	,	"Получатель");							// Получатель
ТаблицаДокументов.НоваяКолонка("Получатель1",			"Строка",	,	,	"Наименование получателя");				// Наименование получателя
ТаблицаДокументов.НоваяКолонка("Получатель2",			"Строка",	,	,	"Наименование получателя, стр. 2");		// Расчетный счет получателя
ТаблицаДокументов.НоваяКолонка("Получатель3",			"Строка",	,	,	"Наименование получателя, стр. 3");		// Банк получателя
ТаблицаДокументов.НоваяКолонка("Получатель4",			"Строка",	,	,	"Наименование получателя, стр. 4");		// Город банка получателя
ТаблицаДокументов.НоваяКолонка("ПолучательРасчСчет", 	"Строка",	20,	,	"Расчетный счет получателя");			// Корсчет банка получателя

// реквизиты банка получателя (поставщика)																		   в случае непрямых расчетов:
ТаблицаДокументов.НоваяКолонка("ПолучательБанк1",		"Строка",	,	,	"Банк получателя");						// РЦ банка получателя
ТаблицаДокументов.НоваяКолонка("ПолучательБанк2",		"Строка",	,	,	"Город банка получателя");				// Город РЦ банка получателя
ТаблицаДокументов.НоваяКолонка("ПолучательБИК",			"Строка",	9,	,	"БИК банка получателя");				// БИК РЦ банка получателя
ТаблицаДокументов.НоваяКолонка("ПолучательКорсчет", 	"Строка",	20,	,	"Корсчет банка получателя");			// Корсчет РЦ банка получателя

// реквизиты платежа
ТаблицаДокументов.НоваяКолонка("ВидПлатежа",			"Строка",	,	,	"Вид платежа");                         // "Почтой". "Телеграфом", "Электронно"
ТаблицаДокументов.НоваяКолонка("ВидОплаты", 			"Строка",	2,	,	"Вид операции");
ТаблицаДокументов.НоваяКолонка("СрокПлатежа",			"Дата",		,	,	"Срок платежа (аккредитива)");
ТаблицаДокументов.НоваяКолонка("Очередность", 			"Строка",	2,	,	"Очередность платежа");

// реквизиты налогового платежа
ТаблицаДокументов.НоваяКолонка("СтатусСоставителя",		"Строка",	2,	,	"Статус составителя платежного документа");
ТаблицаДокументов.НоваяКолонка("ПоказательКБК",			"Строка",	20,	,	"Показатель кода бюджетной классификации");
ТаблицаДокументов.НоваяКолонка("ОКАТО",					"Строка",	11,	,	"ОКАТО");
ТаблицаДокументов.НоваяКолонка("ПоказательОснования",	"Строка",	2,	,	"Показатель основания налогового платежа");
ТаблицаДокументов.НоваяКолонка("ПоказательПериода",		"Строка",	10,	,	"Показатель налогового периода");
ТаблицаДокументов.НоваяКолонка("ПоказательНомера",		"Строка",	20,	,	"Показатель номера налогового документа");
ТаблицаДокументов.НоваяКолонка("ПоказательДаты",		"Строка",	10,	,	"Показатель даты налогового документа");
ТаблицаДокументов.НоваяКолонка("ПоказательТипа",		"Строка",	2,	,	"Показатель типа налогового платежа");

// назначение платежа и пр.																						   
ТаблицаДокументов.НоваяКолонка("НазначениеПлатежа",		"Строка",	,	,	"Назначение платежа");
ТаблицаДокументов.НоваяКолонка("НазначениеПлатежа1",	"Строка",	,	,	"Назначение платежа, стр. 1");
ТаблицаДокументов.НоваяКолонка("НазначениеПлатежа2",	"Строка",	,	,	"Назначение платежа, стр. 2");
ТаблицаДокументов.НоваяКолонка("НазначениеПлатежа3",	"Строка",	,	,	"Назначение платежа, стр. 3");
ТаблицаДокументов.НоваяКолонка("НазначениеПлатежа4",	"Строка",	,	,	"Назначение платежа, стр. 4");
ТаблицаДокументов.НоваяКолонка("НазначениеПлатежа5",	"Строка",	,	,	"Назначение платежа, стр. 5");			
ТаблицаДокументов.НоваяКолонка("НазначениеПлатежа6",	"Строка",	,	,	"Назначение платежа, стр. 6");			

// прочее
ТаблицаДокументов.НоваяКолонка("СрокАкцепта",			"Строка",	,	,	"Срок акцепта");
ТаблицаДокументов.НоваяКолонка("ВидАккредитива",		"Строка",	,	,	"Вид аккредитива");
ТаблицаДокументов.НоваяКолонка("УсловиеОплаты1",		"Строка",	,	,	"Условие оплаты, стр. 1");
ТаблицаДокументов.НоваяКолонка("УсловиеОплаты2",		"Строка",	,	,	"Условие оплаты, стр. 2");
ТаблицаДокументов.НоваяКолонка("УсловиеОплаты3",		"Строка",	,	,	"Условие оплаты, стр. 3");
ТаблицаДокументов.НоваяКолонка("ПлатежПоПредст",		"Строка",	,	,	"Платеж по представлению");
ТаблицаДокументов.НоваяКолонка("ДополнУсловия"	,		"Строка",	,	,	"Дополнительные условия");
ТаблицаДокументов.НоваяКолонка("НомерСчетаПоставщика",	"Строка",	,	,	"№ счета поставщика");
ТаблицаДокументов.НоваяКолонка("ДатаОтсылкиДок",		"Дата",		,	,	"Дата отсылки документов");

ОбязательныеАтрибуты=СоздатьОбъект("СписокЗначений");
ОбязательныеАтрибуты.ДобавитьЗначение("СекцияДокумент");
ОбязательныеАтрибуты.ДобавитьЗначение("Номер");
ОбязательныеАтрибуты.ДобавитьЗначение("Дата");
ОбязательныеАтрибуты.ДобавитьЗначение("Сумма");
ОбязательныеАтрибуты.ДобавитьЗначение("ПлательщикСчет");
ОбязательныеАтрибуты.ДобавитьЗначение("ПлательщикИНН");
ОбязательныеАтрибуты.ДобавитьЗначение("Плательщик");
ОбязательныеАтрибуты.ДобавитьЗначение("ПлательщикРасчСчет");
ОбязательныеАтрибуты.ДобавитьЗначение("ПлательщикБанк1");
ОбязательныеАтрибуты.ДобавитьЗначение("ПлательщикБанк2");
ОбязательныеАтрибуты.ДобавитьЗначение("ПлательщикБИК");
ОбязательныеАтрибуты.ДобавитьЗначение("ПолучательСчет");
ОбязательныеАтрибуты.ДобавитьЗначение("ПолучательИНН");
ОбязательныеАтрибуты.ДобавитьЗначение("Получатель");
ОбязательныеАтрибуты.ДобавитьЗначение("ПолучательРасчСчет");
ОбязательныеАтрибуты.ДобавитьЗначение("ПолучательБанк1");
ОбязательныеАтрибуты.ДобавитьЗначение("ПолучательБанк2");
ОбязательныеАтрибуты.ДобавитьЗначение("ПолучательБИК");
ОбязательныеАтрибуты.ДобавитьЗначение("НазначениеПлатежа");

АтрибутыДокументов=СоздатьОбъект("СписокЗначений");
Для К=1 по ТаблицаДокументов.КоличествоКолонок() Цикл
	Колонка=ТаблицаДокументов.ПолучитьПараметрыКолонки(К);
	АтрибутыДокументов.ДобавитьЗначение(Колонка, Врег(Колонка));
КонецЦикла;

ВидыОпераций=СоздатьОбъект("СписокЗначений");
ВидыОпераций.ДобавитьЗначение("Платежное поручение",			"01"); // 01 - Списано, зачислено по платежному поручению
ВидыОпераций.ДобавитьЗначение("Платежное требование",			"02"); // 02 - Оплачено, зачислено по платежному требованию
ВидыОпераций.ДобавитьЗначение("Денежный чек",					"03"); // 03 - Оплачен наличными денежный чек
ВидыОпераций.ДобавитьЗначение("Объявление на взнос наличными",	"04"); // 04 - Поступило наличными по объявлению на взнос наличными
ВидыОпераций.ДобавитьЗначение("Платежное требование-поручение",	"05"); // 05 - Оплачено, зачислено по требованию-поручению
ВидыОпераций.ДобавитьЗначение("Инкассовое поручение",			"06"); // 06 - Оплачено, зачислено по инкассовому поручению
ВидыОпераций.ДобавитьЗначение("Расчетный чек",					"07"); // 07 - Оплачено, поступило по расчетному чеку
ВидыОпераций.ДобавитьЗначение("Аккредитив",						"08"); // 08 - Открытие аккредитива, зачисление сумм
                                                  			   		   //      неиспользованного, аннулированного аккредитива
ВидыОпераций.ДобавитьЗначение("Мемориальный ордер",				"09"); // 09 - Списано, зачислено по мемориальному
                                             				 		   //      (расходному, приходному кассовому) ордеру
ВидыОпераций.ДобавитьЗначение("Погашение кредита",				"10"); // 10 - Документы по погашению кредита, кроме поименованных выше
ВидыОпераций.ДобавитьЗначение("Выдача кредита",					"11"); // 11 - Документы по выдаче кредита, зачислению
                                         					       	   //      кредита на счет, кроме поименованных выше
ВидыОпераций.ДобавитьЗначение("Авизо",							"12"); // 12 - Зачислено на основании авизо
ВидыОпераций.ДобавитьЗначение("Банковская карта",				"13"); // 13 - Расчеты с применением банковских карт

ЗагрРасчетныеСчета=СоздатьОбъект("СписокЗначений");
ЗагрВидыДокументов=СоздатьОбъект("СписокЗначений");
ЗагрДокументы=СоздатьОбъект("СписокЗначений");

ОпределятьПоВидуОплаты = 1;