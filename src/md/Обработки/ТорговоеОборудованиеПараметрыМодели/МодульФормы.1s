////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ
// 
//******************************************************************************
Перем Парам;
Перем ИзмененияЗаписаны;
Перем Вид;
Перем СписокОбработок;


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ МОДУЛЯ
// 
//******************************************************************************
// ПредставлениеВида()
//
// Параметры: 
//  Нет 
//
// Возвращаемое значение:
//  Нет
//
// Описание:
//  Формирует полное название вида оборудования на основе краткого
//
Функция ПредставлениеВида()
	
	ВидНРег = НРег(Вид);
	Если ВидНРег = "сканер" Тогда
		Рез = "Сканер штрих-кода";
	ИначеЕсли ВидНРег = "фр" Тогда
		Рез = "Фискальный регистратор";
	ИначеЕсли ВидНРег = "дп" Тогда
		Рез = "Дисплей покупателя";
	ИначеЕсли ВидНРег = "весы" Тогда
		Рез = "Электронные весы";
	ИначеЕсли ВидНРег = "терминал" Тогда
		Рез = "Терминал сбора данных";
	ИначеЕсли ВидНРег = "offline" Тогда
		Рез = "ККМ в режиме Off-Line";
	ИначеЕсли ВидНРег = "online" Тогда
		Рез = "ККМ в режиме On-Line";
	Иначе
		Рез = "Неизвестный вид оборудования";
	КонецЕсли;
	
	Возврат Рез;
	
КонецФункции // ПредставлениеВида()

//******************************************************************************
// ИзмененияВнесены()
//
// Параметры: 
//  Нет 
//
// Возвращаемое значение:
//  1 - в форме делали изменения, 0 - нет
//
// Описание:
//  Проверяет, были ли изменены интерактивно реквизиты формы.
//
Функция ИзмененияВнесены()
	// изначально считаем, что изменения внесены
	Рез = 1;
	
	ИспОбработка = Обработка;
	
	Если      Модель        <> Парам.Получить("Модель")     Тогда
	ИначеЕсли Компонента    <> Парам.Получить("Компонента") Тогда
	ИначеЕсли ПрогИд        <> Парам.Получить("ПрогИд")     Тогда
	ИначеЕсли ИспОбработка  <> Парам.Получить("Обработка")  Тогда
	Иначе
	    Рез = 0;
	КонецЕсли;
	
	Возврат Рез;

КонецФункции // ИзмененияВнесены()

//******************************************************************************
// СохранитьИзменения()
//
// Параметры: 
//  Нет 
//
// Возвращаемое значение:
//  Нет
//
// Описание:
//  Из значений реквизитов формы формирует список значений для их возврата в 
//  качестве результата через параметр формы.
//
Процедура СохранитьИзменения()

	Парам.Установить("Модель"    , Модель);
	Парам.Установить("Компонента", Компонента);
	Парам.Установить("ПрогИд"    , ПрогИд);
    Парам.Установить("Обработка" , Обработка);
	Парам.Установить("Изменено"  , 1);
	
КонецПроцедуры // СохранитьИзменения()

//******************************************************************************
// ПоКнопкеОК()
//
// Параметры: 
//  Нет 
//
// Возвращаемое значение:
//  Нет
//
// Описание:
//  Выполняет действия при нажатии на кнопку ОК
//
Процедура ПоКнопкеОК()
	Если ИзмененияВнесены() = 1 Тогда
		СохранитьИзменения();
	КонецЕсли;
	ИзмененияЗаписаны = 1;
	
КонецПроцедуры // ПоКнопкеОК()

//******************************************************************************
// ПроверкаРасположенияКомпоненты(ИмяФайла)
//
// Параметры: 
//  ИмяФайла
//
// Возвращаемое значение:
//  1 - внешняя компонента находится в каталоге, из которого ее можно загрузить.
//  0 - внешняя компонента отсутствует каталогах, из которых ее можно загрузить.
//
// Описание:
//  Ищет по имени файл внешней компонеты в каталогах (ИБ, 1С:Предприятия, Windows)
//  Если файл ИмяФайла есть хотя бы в одном из указнных каталогов, то функция
//  возвращает 1, иначе 0.
//
Функция ПроверкаРасположенияКомпоненты(ИмяФайла)
	Рез = 1;
	
	Если (ФС.СуществуетФайл(КаталогИБ() + ИмяФайла) = 1)
	 или (ФС.СуществуетФайл(КаталогПрограммы() + ИмяФайла) = 1)
	 или (ФС.СуществуетФайл(ФС.WindowsКаталог() + "\" + ИмяФайла) = 1)
	Тогда
		Рез = 1;
	Иначе
		Рез = 0;
	КонецЕсли;
	
	Возврат Рез;
КонецФункции // ПроверкаРасположенияКомпоненты()

////////////////////////////////////////////////////////////////////////////////
// ПРЕДОПРЕДЕЛЕННЫЕ ПРОЦЕДУРЫ
// 
//******************************************************************************
// Предопределенная процедура
//
Процедура ПриОткрытии()
	Парам = Форма.Параметр;
	
	Если ТипЗначенияСтр(Парам) <> "СписокЗначений" Тогда
	    Возврат;
	КонецЕсли;
	
	Вид        = Парам.Получить("Вид");
	Компонента = Парам.Получить("Компонента");
	ПрогИд     = Парам.Получить("ПрогИд");
	Обработка  = Парам.Получить("Обработка");
	Модель     = Парам.Получить("Модель");
	
	Если ПустоеЗначение(Модель) = 1 Тогда
	    Модель = ПредставлениеВида();
	КонецЕсли;
	
	СписокОбработок = Парам.Получить("СписокОбработок");
КонецПроцедуры // ПриОткрытии()

//******************************************************************************
// Предопределенная процедура
//
Процедура ПриНачалеВыбораЗначения(ИдентЭлемДиалога, ФлагСтандОбр)
	Перем ВыбЗнач;
	
	Если ИдентЭлемДиалога = "Компонента" Тогда
		Если ФС.ВыбратьФайл(0, ВыбЗнач, КаталогИБ(), "", "Внешние компоненты (*.dll)|*.dll", 60) = 1 Тогда
		    Если ПроверкаРасположенияКомпоненты(ВыбЗнач) = 0 Тогда
				Предупреждение("Файл внешней компоненты должен быть расположен в одном из следущих каталогов:" +
				               РазделительСтрок + "- каталог информационной базы" +
							   РазделительСтрок + "- каталог 1С:Предприятия" +
							   РазделительСтрок + "- системный каталог Windows",
							   60);
			Иначе
				Компонента = ВыбЗнач;
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли ИдентЭлемДиалога = "Обработка" Тогда
	    СтатусВозврата(0);
		Если СписокОбработок.ВыбратьЗначение(ВыбЗнач, , , , 2) = 1 Тогда
		    Обработка = ВыбЗнач;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ПриНачалеВыбораЗначения()

//******************************************************************************
// Предопределенная процедура
//
Процедура ПриЗакрытии()
	
	Если ИзмененияЗаписаны = 0 Тогда
		Если ИзмененияВнесены() = 1 Тогда
			// внесли изменения и нажали Закрыть
			
			НеЗаполненоПоле = 1;
			
			// проверка заполнения реквизитов
			Если ПустоеЗначение(Модель) = 1 Тогда
			    ТекстПредупр = "Не задана модель.";
			ИначеЕсли ПустоеЗначение(Обработка) = 1 Тогда
				ТекстПредупр = "Не задана модель.";
			КонецЕсли;
			
			// 3 - "Да+Нет+Отмена"
			Рез = Вопрос("Записать изменения?", 3, 60);
			Если Рез = 6 Тогда
				// Да
				СохранитьИзменения();
			ИначеЕсли Рез = 2 Тогда
				// Отмена
				СтатусВозврата(0);
			ИначеЕсли Рез = -1 Тогда
				// вышел таймаут. также, как и при отмене
				СтатусВозврата(0);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ПриЗакрытии()

////////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ
// 
//******************************************************************************
ИзмененияЗаписаны = 0;