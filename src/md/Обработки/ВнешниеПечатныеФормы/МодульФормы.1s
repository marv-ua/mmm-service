////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ
// 
Перем Текст;
Перем ТекущийТипФормы, ТекущийВидФормы;

// идентификаторы документов, для которые не печатаются
Перем ДокИсключения;

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ МОДУЛЯ
// 
//******************************************************************************
// УстРасширение(ИмяФайла,Расширение)
//
// Параметры: 
//  ИмяФайла   - строковое имя файла с (или без) расширения
//  Расширение - строковое наименование расширения файла
//
// Возвращаемое значение:
//  Строку Наименования файла вместе с расширением
//
// Описание:
//  Предназначена для замены расширения у строки имени файла 
//
Функция УстРасширение(ИмяФайла,Расширение)
	Возврат Лев(ИмяФайла,СтрДлина(ИмяФайла)-4)+"."+Расширение;
КонецФункции // УстРасширение()
 

//******************************************************************************
// СформироватьТекущийВид()
//
// Параметры: 
//  Нет
//
// Возвращаемое значение:
//  Сформированное строковое представление текущего вида объекта,
//  для которого задаются внешние печатные формы
//
// Описание:
//  Формирует значение модульной переменной ТекущийВидОбъекта
//  например "Документ.ПоступлениеТМЦ"
//
Функция СформироватьТекущийВид()
	Перем ВидОбъекта;
	
	Если ТекущийТипФормы = 1 Тогда
		ВидОбъекта = "Документ.";
	ИначеЕсли ТекущийТипФормы = 2 Тогда
		ВидОбъекта = "Справочник.";
	Иначе
		ВидОбъекта = "Элемент.";
	КонецЕсли;
	
	Возврат ("""" + ВидОбъекта + СписокВидов.ПолучитьЗначение(ТекущийВидФормы, "") + """");
	
КонецФункции // СформироватьТекущийВид()

//******************************************************************************
// ЗаписатьИнформациюПоСтроке()
//
// Параметры: 
//  Нет
//
// Возвращаемое значение:
//  Нет
//
// Описание:
//  Записывает информацию из текущей строки таблицы значений "ТаблицаОбработок" 
//  диалога обработки в файл описания (с расширением efd)
//
Процедура ЗаписатьИнформациюПоСтроке()

	СтрОбъекта = "";
	ТекущийВидОбъекта = СформироватьТекущийВид();

	Если ФС.СуществуетФайл(глКаталогПечФорм+ТаблицаОбработок.ФайлОписания) = 1 Тогда
		Текст.Открыть(глКаталогПечФорм+ТаблицаОбработок.ФайлОписания);
		
		// Считываем строку про объект. Она должна быть первой!
		Стр=Текст.ПолучитьСтроку(1);
		СтрОбъекта = "";
		Поз=Найти(Стр,"=");
		Если Поз>0 Тогда
			Имя=Лев(Стр,Поз-1);
			Стр=Сред(Стр,Поз+1);
			Если Имя="Объект" Тогда
				
				// Найдем в этой строке запись про текущий объект
				Если Найти(Стр,ТекущийВидОбъекта) = 0 Тогда;
					СтрОбъекта = Стр +", "+ ТекущийВидОбъекта;// Не нашли - добавляем;
				Иначе 
					СтрОбъекта = Стр;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	// Если в файле описания нет вообще записей с ключом "Объект"
	Если ПустоеЗначение(СтрОбъекта) = 1  Тогда
		СтрОбъекта = ТекущийВидОбъекта;
	КонецЕсли;
	
	// После этого перезаписываем весь файл
	Текст.Очистить();
	Текст.ДобавитьСтроку("Объект="+ СтрОбъекта);
	Текст.ДобавитьСтроку("Название="+ТаблицаОбработок.Название);
	Текст.ДобавитьСтроку("Кнопка="+ТаблицаОбработок.Кнопка);
	Текст.Записать(глКаталогПечФорм+ТаблицаОбработок.ФайлОписания);
	
КонецПроцедуры // ЗаписатьИнформациюПоСтроке()

//******************************************************************************
// УдалитьИнформациюПоСтроке()
//
// Параметры: 
//  Нет
//
// Возвращаемое значение:
//  Нет
//
// Описание:
//  Удаляет информацию о регистрации формы по текущей строке из файла описания
//
Процедура УдалитьИнформациюПоСтроке()
	Текст.Открыть(глКаталогПечФорм+ТаблицаОбработок.ФайлОписания);
	ТекущийВидОбъекта = СформироватьТекущийВид();
	
	// Считываем строку про объект. Она должна быть первой!
	Стр=Текст.ПолучитьСтроку(1);
	СтрОбъекта = Стр;
	Поз=Найти(Стр,"=");
	Если Поз>0 Тогда
		Имя=Лев(Стр,Поз-1);
		Стр=СокрЛ(Сред(Стр,Поз+1));
		Если Имя="Объект" Тогда
			
			// Найдем в этой строке запись про текущий объект
			Поз = Найти(Стр,ТекущийВидОбъекта);  
			Если Поз > 0 Тогда;                              
				
				// Суммируем то, что было слева от записи про объект, с тем что было справа,
				// надо учитывать разделители ", "
				СтрОбъекта = Лев(Стр, Поз-3); // Это было слева
				Стр=СокрЛ(Сред(Стр, Поз + 1 + СтрДлина(ТекущийВидОбъекта))); //А это справа
				
				// Теперь, склеим, если надо
				Если ПустоеЗначение(Стр) = 0 Тогда
				    СтрОбъекта = СтрОбъекта + ", "+ Стр;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

	// Если других объектов не осталось в строке про объект, то файл надо удалять
	Если ПустоеЗначение(СтрОбъекта) = 1 Тогда
		ФС.УдалитьФайл(глКаталогПечФорм + ТаблицаОбработок.ФайлОписания);
	Иначе

		// Иначе перезаписываем весь файл
		Текст.Очистить();
		Текст.ДобавитьСтроку("Объект=" + СтрОбъекта);
		Текст.ДобавитьСтроку("Название="+ТаблицаОбработок.Название);
		Текст.ДобавитьСтроку("Кнопка="+ТаблицаОбработок.Кнопка);
		Текст.Записать(глКаталогПечФорм+ТаблицаОбработок.ФайлОписания);
		
	КонецЕсли;                           
	
КонецПроцедуры // УдалитьИнформациюПоСтроке()


//******************************************************************************
// ЗаполнитьСписокФорм()
//
// Параметры: 
//  Нет
//
// Возвращаемое значение:
//  Нет
//
// Описание:
//  Заполняет таблицу значений списком внешних печатных форм для данного вида объектов
//
Процедура ЗаполнитьСписокФорм()
	Перем Название, Кнопка;
	
	ТекущийВидОбъекта = СформироватьТекущийВид();
	ТаблицаОбработок.УдалитьСтроки();
	ФайлОписания=ФС.НайтиПервыйФайл(глКаталогПечФорм+"*.efd");
	Пока ПустаяСтрока(ФайлОписания)=0 Цикл
	
		Текст.Открыть(глКаталогПечФорм+ФайлОписания);
		
	    
		// Устанавливаем расширение 
		Файл=УстРасширение(ФайлОписания,"ert");
			
		Если ФС.СуществуетФайл(глКаталогПечФорм+Файл)=1 Тогда
				
			// Внешний файл, соответствующий файлу описания, найден.
			// Проверим, в нем что есть запись про текущий объект
			Если глНайтиВнешнююПечФорму(Текст, ТекущийВидОбъекта, Название, Кнопка) = 1 Тогда
			    
				// Добавляем строку в список внешних файлов
				ТаблицаОбработок.НоваяСтрока();
				ТаблицаОбработок.Название     = Название;
				ТаблицаОбработок.Кнопка       = Кнопка;
				ТаблицаОбработок.Файл         = Файл;
				ТаблицаОбработок.ФайлОписания = (ФайлОписания);
				
			КонецЕсли;
			
		КонецЕсли;
		
		ФайлОписания=ФС.НайтиСледующийФайл();
		
	КонецЦикла;
	
	ТаблицаОбработок.Сортировать("Название");
КонецПроцедуры // ЗаполнитьСписокФорм()

//******************************************************************************
// ЗаполнитьСписокВидов()
//
// Параметры: 
//  Нет
//
// Возвращаемое значение:
//  Нет
//
// Описание:
//  Заполняет список "СписокВидов" диалога 
//
Процедура ЗаполнитьСписокВидов()
	
	СписокВидов.УдалитьВсе();
	Если ТекущийТипФормы = 1 Тогда //"Документ" 
		// Надо получить список видов документов
		Для Сч=1 по Метаданные.Документ() Цикл
			ТекИд = Метаданные.Документ(Сч).Идентификатор;
			Если Найти(ДокИсключения, ТекИд) = 0 Тогда
				// документ отсутствует среди непечатаемых
				СписокВидов.ДобавитьЗначение(ТекИд, Метаданные.Документ(Сч).Представление());
			КонецЕсли;
		КонецЦикла;
	Иначе              
		
		Для Сч=1 по Метаданные.Справочник() Цикл          
			СписокВидов.ДобавитьЗначение(Метаданные.Справочник(Сч).Идентификатор,Метаданные.Справочник(Сч).Представление());
		КонецЦикла;
	КонецЕсли;
	
    СписокВидов.ТекущаяСтрока(1);
	ТекущийВидФормы = 1;
	
КонецПроцедуры // ЗаполнитьСписокВидов()

//******************************************************************************
// ПриСменеТипаФормы()
//
// Параметры: 
//  Нет
//  
// Возвращаемое значение:
//  Нет
//
// Вызывается из формул диалога
//  при смене положения переключателя ТипФормы
//
// Описание:
//  Отрабатывает изменения типа объекта выбора внешней печатной формы
//
Процедура ПриСменеТипаФормы()
	Перем ЗаполнитьСписокВидов;
	
	ЗаполнитьСписокВидов = 0;
	
	Если ТипФормы = 1 Тогда
		
		//Проверим надо ли перерисовывать
		Если ТекущийТипФормы <> 1 Тогда // "Документ" 
			ЗаполнитьСписокВидов = 1;
		КонецЕсли;
	ИначеЕсли ТипФормы = 2 Тогда
		
		Если ТекущийТипФормы = 1 Тогда //"Документ" 
			ЗаполнитьСписокВидов = 1;
		КонецЕсли;
	Иначе
		
		Если ТекущийТипФормы = 1 Тогда  //"Документ" 
			ЗаполнитьСписокВидов = 1;
		КонецЕсли;
	КонецЕсли;
	
		
    ТекущийТипФормы = ТипФормы;

	Если ЗаполнитьСписокВидов = 1 Тогда
		ЗаполнитьСписокВидов();
	КонецЕсли;
	
	ЗаполнитьСписокФорм();
	
КонецПроцедуры // ПриСменеТипаФормы()         

//******************************************************************************
// ПриСменеВидаФормы()
//
// Параметры: 
//  Нет
//
// Возвращаемое значение:
//  Нет
//
// Вызывается из формул диалога
//  при смене текущей строки списка "СписокВидов"диалога
//
// Описание:
//  Отрабатывает изменения текущего вида объекта выбора внешней печатной формы
//
Процедура ПриСменеВидаФормы()
	
	ТекущийВидФормы = СписокВидов.ТекущаяСтрока();
	ЗаполнитьСписокФорм();

КонецПроцедуры // ПриСменеВидаФормы()


//******************************************************************************
// ОткрытьФормуОбработки()
//
// Параметры: 
//  Нет
//
// Возвращаемое значение:
//  Нет
//
// Вызывается из формул диалога
//  по кнопке открыть
//
// Описание:
//  Запускает текущую обработку на выполнение
//
Процедура ОткрытьФормуОбработки()
	Если ТаблицаОбработок.ТекущаяСтрока()=0 Тогда
		Возврат;
	КонецЕсли;
	Если ФС.СуществуетФайл(глКаталогПечФорм+ТаблицаОбработок.Файл)=1 Тогда
		ОткрытьФорму("Отчет",,глКаталогПечФорм+ТаблицаОбработок.Файл);
	Иначе
		Предупреждение("Выбранная обработка в каталоге внешних обработок печатных форм отсутствует!", 60 );
	КонецЕсли;
КонецПроцедуры // ОткрытьФормуОбработки()

//******************************************************************************
// РедактироватьНазвание()
//
// Параметры: 
//  Нет
//
// Возвращаемое значение:
//  1- название было отредактировано пользователем, 0 - нет
//
// Описание:
//  Служит для редактирования строки названия внешней печатной формы.
//  Если заголовок кнопки печати оказывается пустым, то прописывает ему
//  значение по умолчанию ("Печать")
//
Функция РедактироватьНазвание()
	Перем Стр;
	
	Стр = ТаблицаОбработок.Название;
	Если ВвестиСтроку(Стр,"Введите название " + ТаблицаОбработок.Файл, 60)=1 Тогда
		ТаблицаОбработок.Название = Стр;					    
		Если ПустоеЗначение(ТаблицаОбработок.Кнопка) = 1 Тогда
			ТаблицаОбработок.Кнопка = "Печать";					    
		КонецЕсли; 
		ЗаписатьИнформациюПоСтроке();
		Возврат 1;
	КонецЕсли; 
	
	Возврат 0;
КонецФункции // РедактироватьНазвание()

//******************************************************************************
// РедактироватьЗаголовок()
//
// Параметры: 
//  Нет
//
// Возвращаемое значение:
//  1- заголовок был отредактирован пользователем, 0 - нет
//
// Описание:
//  Служит для редактирования заголовка кнопки вызова внешней печатной формы
//
Функция РедактироватьЗаголовок()
	Перем Стр;
	
	Стр = ТаблицаОбработок.Кнопка;
	Если ВвестиСтроку(Стр,"Введите заголовок кнопки печати " + ТаблицаОбработок.Файл, 60)=1 Тогда
		ТаблицаОбработок.Кнопка = Стр;					    
		ЗаписатьИнформациюПоСтроке();
		Возврат 1;
	КонецЕсли; 
	
	Возврат 0;
КонецФункции // РедактироватьЗаголовок()

//******************************************************************************
// ОбработкаКликаПоТаблице()
//
// Параметры:
//  Нет
//
// Возвращаемое значение:
//  Нет
//
// Вызывается из формул элементов диалога:
//  Вызывается при двойном щелчке мыши и нажатии Enter на таблице значений.
//
// Описание:
// Если текущая колонка:
//	"Название" - редактируем название обработки внешней печатной формы
// 	"Файл"     - Открываем обработку
// 	"Кнопка"   - редактируем заголовок кнопки 
//
Процедура ОбработкаКликаПоТаблице()
	
	Если ТаблицаОбработок.ТекущаяСтрока()=0 Тогда
		Возврат;
	КонецЕсли;
	
	Если ТаблицаОбработок.ТекущаяКолонка()="Название" Тогда
		РедактироватьНазвание();
	ИначеЕсли ТаблицаОбработок.ТекущаяКолонка()="Кнопка" Тогда
		РедактироватьЗаголовок();
	Иначе
		ОткрытьФормуОбработки();
	КонецЕсли;
	
КонецПроцедуры	// ОбработкаКликаПоТаблице()

//******************************************************************************
// ПоКнопкеИзменить()
//
// Параметры:
//  Нет
//
// Возвращаемое значение:
//  Нет
//
// Вызывается из формул элементов диалога:
//  по кнопке "Изменить"
//
// Описание:
// Формирует и обрабатывает меню возможных действий:
//   Удалить из списка, Добавить в Список, Изменить название, Изменить заголовок кнопки печати
//
//******************************************************************************
Процедура ПоКнопкеИзменить()
	Перем ФЛ;
	
	Меню=СоздатьОбъект("СписокЗначений");
	Меню.ДобавитьЗначение("Название","Изменить название");
	Меню.ДобавитьЗначение("Кнопка","Изменить заголовок кнопки");
	Меню.ДобавитьЗначение("Добавить","Внести в список");
	Меню.ДобавитьЗначение("Удалить","Удалить из списка");
	Выбор="";
	Меню.ВыбратьЗначение(Выбор,,,,1);
	
	
	Если Выбор="Добавить" Тогда
		
		СписокФайлов = СоздатьОбъект("ТаблицаЗначений");
		СписокФайлов.НоваяКолонка("Файл", "Строка", , , , 20);
		СписокФайлов.НоваяКолонка("ФайлОписаний");
		СписокФайлов.НоваяКолонка("Название", "Строка", , , , 50);
		
		Файл = ФС.НайтиПервыйФайл(глКаталогПечФорм+"*.ert");
		Пока ПустаяСтрока(Файл)=0 Цикл
			
			// Файл есть, проверим его на отсутствие в списке
			ИмяФайлаОписаний = УстРасширение(Файл,"efd");
			Название         = "";
			
			// в этом списке не показываем внешние формы, которые зарегистрированны на текущий объект
			
			Если ФС.СуществуетФайл(глКаталогПечФорм + ИмяФайлаОписаний) = 1 Тогда
				Если ТаблицаОбработок.НайтиЗначение(Врег(ИмяФайлаОписаний),,"ФайлОписания")=0 Тогда
					Текст.Открыть(глКаталогПечФорм + ИмяФайлаОписаний);
					СтрНазвания = Текст.ПолучитьСтроку(2);
					Поз = Найти(СтрНазвания, "=");
					
					Если Поз <> 0 Тогда
						Название = Сред(СтрНазвания, Поз + 1);
					КонецЕсли;
					
				КонецЕсли;
			КонецЕсли;
			
		    СписокФайлов.НоваяСтрока();
			СписокФайлов.Файл = Файл;
			СписокФайлов.ФайлОписаний = ИмяФайлаОписаний;
			СписокФайлов.Название = СокрЛП(Название);
			
			Файл = ФС.НайтиСледующийФайл();
		КонецЦикла;                                     
		
		Если СписокФайлов.КоличествоСтрок()=0 Тогда
			Предупреждение("В каталоге внешних отчетов нет файлов для добавления в список!", 60);
		    Возврат;
		КонецЕсли;
		
		СписокФайлов.ВидимостьКолонки("ФайлОписаний", 0);
		
		Поз = 0;
		Если СписокФайлов.ВыбратьСтроку(Поз, "Выбор обработки печати", 60) <> 1 Тогда
		    Возврат;
		КонецЕсли;
		
		Файл			= СписокФайлов.ПолучитьЗначение(Поз, "Файл");
		ФайлОписаний	= СписокФайлов.ПолучитьЗначение(Поз, "ФайлОписаний");
		
        //Вначале добавим строку, если пользователь откажется от дабавления, то удалим ее
		ТаблицаОбработок.НоваяСтрока();
		ТаблицаОбработок.Файл         = Файл; 
		ТаблицаОбработок.ФайлОписания = Врег(ФайлОписаний);
		
		// Если файл уже существует, то считывам из него информацию
		Если ФС.СуществуетФайл(глКаталогПечФорм+ТаблицаОбработок.ФайлОписания) = 1 Тогда
			
			Текст.Открыть(глКаталогПечФорм+ТаблицаОбработок.ФайлОписания);
			
			//Считает название и заголовок кнопки
			Название = "";
			Кнопка   = "Печать";        
			глНайтиВнешнююПечФорму(Текст, "", Название, Кнопка);
			ТаблицаОбработок.Название = Название;
			ТаблицаОбработок.Кнопка   = Кнопка;
			ЗаписатьИнформациюПоСтроке();
		Иначе
		    
			Если РедактироватьНазвание() = 0 Тогда
				ТаблицаОбработок.УдалитьСтроку();
			КонецЕсли;  
		КонецЕсли;
		
	ИначеЕсли Выбор="Удалить" Тогда  
		Если ТаблицаОбработок.ТекущаяСтрока()=0 Тогда
		    Возврат;
		КонецЕсли;
		Если Вопрос("Удалить регистрацию внешней печатной формы для данного объекта?","Да+Нет", 60)="Да" Тогда
			
			УдалитьИнформациюПоСтроке();
			ТаблицаОбработок.УдалитьСтроку();
		КонецЕсли;
	ИначеЕсли Выбор="Название" Тогда    
		Если ТаблицаОбработок.ТекущаяСтрока()=0 Тогда
		    Возврат;
		КонецЕсли;   
		
		РедактироватьНазвание();
		
	ИначеЕсли Выбор="Кнопка" Тогда    
		Если ТаблицаОбработок.ТекущаяСтрока()=0 Тогда
		    Возврат;
		КонецЕсли;   
		
		РедактироватьЗаголовок();
		
	КонецЕсли;
КонецПроцедуры // ПоКнопкеИзменить()

//******************************************************************************
// Обновить()
//
// Параметры:
//  Нет
//
// Возвращаемое значение:
//  Нет
//
// Вызывается из формул элементов диалога:
// по кнопке "Обновить".
// 
// Описание
//  При нажатии кнопки "Обновить" выполняется повторный анализ каталога ExtForms\PrnForms
//  и заполненяется список обработок внешних печатных форм для объектов текущего типа и вида.
//  Предназначена для обновления списка после установки новых отчетов (обработок),
//  например, с диска ИТС.
//
Процедура Обновить()
	ЗаполнитьСписокФорм();
КонецПроцедуры // Обновить()

////////////////////////////////////////////////////////////////////////////////
// ПРЕДОПРЕДЕЛЕННЫЕ ПРОЦЕДУРЫ
// 
//******************************************************************************
Процедура ПриОткрытии() // Предопределенная процедура
	ТаблицаОбработок.НоваяКолонка("Название","Строка",,,,30);
	ТаблицаОбработок.НоваяКолонка("Файл","Строка",,,"Файл",10);
	ТаблицаОбработок.НоваяКолонка("Кнопка","Строка",,,,10);
	ТаблицаОбработок.НоваяКолонка("ФайлОписания","Строка");
	ТаблицаОбработок.ВидимостьКолонки("ФайлОписания",0);
	
	ТекущийТипФормы = ВосстановитьЗначение("ТекущийТипФормы");
	ТекущийТипФормы = Макс(1, ТекущийТипФормы);
	ТипФормы        = ТекущийТипФормы;
	
	ЗаполнитьСписокВидов();
	
	ТекущийВидФормы = ВосстановитьЗначение("ТекущийВидФормы");
	ТекущийВидФормы = Макс(1, ТекущийВидФормы);      
	СписокВидов.ТекущаяСтрока(ТекущийВидФормы);
	
	ЗаполнитьСписокФорм();   
	
КонецПроцедуры // ПриОткрытии

//******************************************************************************
// Предопределенная процедура.
//
Процедура ПриЗакрытии()
	
	СохранитьЗначение("ТекущийТипФормы", ТекущийТипФормы );
	СохранитьЗначение("ТекущийВидФормы", ТекущийВидФормы  );
	
КонецПроцедуры // ПриЗакрытии()
////////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ
// 
Текст=СоздатьОбъект("Текст");