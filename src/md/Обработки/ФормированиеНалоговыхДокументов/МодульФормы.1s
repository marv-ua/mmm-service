///////////////////////////////////////////////////////////////////////////////                                                                            
// ПЕРЕМЕННЫЕ МОДУЛЯ
//

Перем ТабОпер; // таблица хозяйственных операций определенного вида
Перем СчетаДтСтр, СчетаКтСтр; // списки кодов счетов, разделенных запятыми
Перем СписокЭлементовРасходов; 
Перем ПереченьСтатейЗатрат;

///////////////////////////////////////////////////////////////////////////////                                                                            
// ПРОЦЕДУРЫ И ФУНКЦИИ МОДУЛЯ
//

//*****************************************************************************
// НайтиСчетВСтроке(ИсхСтрока, КодСчета)
//
// Параметры:
//  ИсхСтрока - Строка. Строка кодов счетов, раздяленных запятыми.
//  КодСчета  - Строка. Код счета.
//
// Возвращаемое значение:
//  0 - код счета в строке не найден.
//  1 - код счета в строке найден.
//
// Описание:
//  Определяет, указан ли переданный код счета или код группы этого счета
// в переданной строке.
//
Функция НайтиСчетВСтроке(ИсхСтрока, КодСчета)
	
	КодБезПробелов = СтрЗаменить(КодСчета, " ", "");
	
	СтрокаДляПоиска = ИсхСтрока + ",";
	СчетДляПоиска = КодБезПробелов + ",";
	ГруппаДляПоиска = Лев(КодБезПробелов, 2) + ",";
	
	Если Найти(СтрокаДляПоиска, СчетДляПоиска) > 0 Тогда
	    // Найдено точное соответствие кода счета.
		Возврат 1;
		
	ИначеЕсли Найти(СтрокаДляПоиска, ГруппаДляПоиска) > 0 Тогда
	    // Найдено точное соответствие кода группы счета.
		Возврат 1;
	
	Иначе
		Возврат 0;
	КонецЕсли;
	
КонецФункции // НайтиСчетВСтроке()

//******************************************************************************
// ПолучитьЭлементРасхода()
//
// Описание:
//  Устанавливает в таблице операций элемент расхода в зависимости
// от вида расхода, полученного по данным бухгалтерского учета.
//
Процедура ПолучитьЭлементРасхода(ВидРасходов, СписокРасходов)
	
	ТабОпер.ВидРасхода = Перечисление.ВидыРасходов.КосвенныеРасходы;
	Если СписокРасходов.НайтиЗначение(ВидРасходов) <> 0 Тогда
		ТабОпер.ЭлементРасхода = ВидРасходов;                      
	КонецЕсли;
	                                                                                                  
КонецПроцедуры // ПолучитьЭлементРасхода()   

//******************************************************************************
// ВидЗадолженностиПоСч76(Опер, БухИт, Контрагент, Договор, Сумма)
//
// Параметры:
//  Опер       - Операция,
//  БухИт      - БухгалтерскиеИтоги,
//  Контрагент - Справочник.Контрагенты,
//  Договор    - Справочник.Договоры,
//  Сумма      - Число. В этот параметр возвращаетя сумма задолженности.
// 
// Возвращаемое значение:
//  Перечисление.ПризнакЗадолженности
//
// Описание:
//  Определяет вид задолженности по счету 76: дебиторскую или кредиторскую.
//
Функция ВидЗадолженностиПоСч76(Опер, БухИт, Контрагент, Договор, Сумма = 0)

	Если БухИт.ПолучитьСубконто(ВидыСубконто.Контрагенты,, Контрагент) = 1 Тогда
		Если БухИт.ПолучитьСубконто(ВидыСубконто.Договоры,, Договор) = 1 Тогда
			БухИт.ВыбратьПериоды();
			Пока БухИт.ПолучитьПериод() = 1 Цикл
				Если (БухИт.Операция.Документ = Опер.Документ) и (БухИт.Операция.НомерПроводки() = Опер.НомерПроводки()) Тогда
				    Если БухИт.СНД() > 0 Тогда
						Сумма = БухИт.СНД();
						Возврат Перечисление.ПризнакЗадолженности.Дебиторская;
						
					ИначеЕсли БухИт.СНК() > 0 Тогда
						Сумма = БухИт.СНК();
						Возврат Перечисление.ПризнакЗадолженности.Кредиторская;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;

	Сумма = 0;
	Возврат "";
	
КонецФункции // ВидЗадолженностиПоСч76()

//******************************************************************************
// ОтобратьСтрокиТаблицы(Таб, СписокКолонок)
//
// Параметры:
//  Таб           - ТаблицаЗначений. Обрабатываемая таблица.
//  СписокКолонок - СписокЗначений. Идентификаторы колонок таблицы и значения, 
//                  которые следует отбирать. Значения передаются, как значения 
//                  списка, идентификаторы, как их представления.
//
// Возвращаемое значение:
//  Таблица значений.
//
// Описание:
//  Функция выделяет из таблицы значений строки, содержащие 
// определенные значения в определенных колонках и формирует 
// из них отдельную таблицу значений.
//
Функция ОтобратьСтрокиТаблицы(Таб, СписокКолонок)
	
	// Создадим отдельную таблицу для обработки данных.
	Т = СоздатьОбъект("ТаблицаЗначений");
	Таб.Выгрузить(Т);
	Результат = СоздатьОбъект("ТаблицаЗначений");
	
	Если Т.КоличествоСтрок() = 0 Тогда
		Возврат Т;
	КонецЕсли;
	
	Если СписокКолонок.РазмерСписка() = 0 Тогда
		Возврат Т;
	КонецЕсли;
	
	// Отсортируем полученную таблицу по переданным в функцию колонкам
	ИменаКолонок = "";
	ИмяКолонки = "";
	Для а = 1 по СписокКолонок.РазмерСписка() Цикл
		СписокКолонок.ПолучитьЗначение(а, ИмяКолонки);
		ИменаКолонок = ИменаКолонок + ?(ИменаКолонок="","",",") + ИмяКолонки;
	КонецЦикла;
	Т.Сортировать(ИменаКолонок);
	
	// Определим начальную и конечную строки таблицы, в которых есть указанные
	// значения.
	НачСтрока = 0;
	КонСтрока = 0;
	
	// Пропустим первые ненужные строки таблицы.
	НачСтрокаПоиска = 0;
	ИмяПервойКолонки = "";
	Если Т.НайтиЗначение(СписокКолонок.ПолучитьЗначение(1, ИмяПервойКолонки),
						 НачСтрокаПоиска, ИмяПервойКолонки) = 0 Тогда

		Т.УдалитьСтроки();
		Возврат Т;
	КонецЕсли;
	
	Для а = НачСтрокаПоиска по Т.КоличествоСтрок() Цикл
		СтрокаУдовлетворяетУсловиям = 1;
		Для б = 1 по СписокКолонок.РазмерСписка() Цикл
			ИмяКолонки = "";
			ЗначениеЯчейки = СписокКолонок.ПолучитьЗначение(б, ИмяКолонки);
			Если (Т.ПолучитьЗначение(а, ИмяКолонки) <> ЗначениеЯчейки) Тогда
				СтрокаУдовлетворяетУсловиям = 0;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		Если СтрокаУдовлетворяетУсловиям = 1 Тогда
			Если НачСтрока = 0 Тогда // начальная строка пока не найдена
				НачСтрока = а;
			КонецЕсли;
		Иначе
			Если НачСтрока > 0 Тогда // начальная строка уже была найдена
				КонСтрока = а - 1;
				Прервать;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Если НачСтрока = 0 Тогда // ни одной строки не найдено
		Т.УдалитьСтроки();
		Возврат Т;
	КонецЕсли;
	
	Если КонСтрока = 0 Тогда // последняя строка таблицы удовлетворяла условиям
		КонСтрока = Т.КоличествоСтрок();
	КонецЕсли;
	
	Результат = СоздатьОбъект("ТаблицаЗначений");
	Т.Выгрузить(Результат, НачСтрока, КонСтрока);
	Возврат Результат;
	
КонецФункции // ОтобратьСтрокиТаблицы()


///////////////////////////////////////////////////////////////////////////////                                                                            
// ФОРМИРОВАНИЕ ТАБЛИЦЫ ОПЕРАЦИЙ ПОСТУПЛЕНИЯ ДЕНЕЖНЫХ СРЕДСТВ
//

//*****************************************************************************
// ПолучитьОперацииПоступленияДенежныхСредств()
//
// Описание:
//  Формирует таблицу операций поступления денежных средств за период,
// указанный в полях ввода НачДата и КонДата.
//
Процедура ПолучитьОперацииПоступленияДенежныхСредств()
	
	ТабОпер = СоздатьОбъект("ТаблицаЗначений");
	ТабОпер.НоваяКолонка("День","Дата");
	ТабОпер.НоваяКолонка("ДокументБУ","Документ");
	ТабОпер.НоваяКолонка("НаименованиеОперации","Строка");
	ТабОпер.НоваяКолонка("УсловиеИлиВидПоступления","Перечисление.УсловияИлиВидыПоступлений");
	ТабОпер.НоваяКолонка("Контрагент","Справочник.Контрагенты");
	ТабОпер.НоваяКолонка("Договор","Справочник.Договоры");
	ТабОпер.НоваяКолонка("Сумма","Число");
	ТабОпер.НоваяКолонка("НДС","Число");
	ТабОпер.НоваяКолонка("ВалСумма","Число");
	ТабОпер.НоваяКолонка("Валюта","Справочник.Валюты");
	
	БухИт = СоздатьОбъект("БухгалтерскиеИтоги");
	БухИт.ИспользоватьСубконто(ВидыСубконто.Контрагенты);
	БухИт.ИспользоватьСубконто(ВидыСубконто.Договоры);
	БухИт.ВыполнитьЗапрос(НачДата, КонДата, "76.5,76.6,76.55",,,, "Проводка", "С");
	
	// Выборка операций поступления денежных средств по бухгалтерским проводкам.
	Фильтр = "50.1,*;50.2,*;50.11,*;51,*;52,*;55.1,*;55.4,*;55.11,*;55.44,*";

	Опер = СоздатьОбъект("Операция");  
	Опер.ВыбратьОперацииСПроводками(НачДата, КонДата, Фильтр,,,);
	Пока Опер.ПолучитьПроводку() = 1 Цикл
		КодКоррСчета = СокрЛП(Опер.Кредит.Счет.Код);
		Если (Найти(";" + Фильтр, ";" + КодКоррСчета + ",") <> 0) 
			или (Найти(",57,71,75,", "," + Лев(КодКоррСчета, 2) + ",") <> 0) Тогда
			Продолжить;
				
		ИначеЕсли НайтиСчетВСтроке("91.1", КодКоррСчета) = 1 Тогда
			Если Опер.Кредит.ПрочиеДоходыИРасходы.ВидПрочихДоходовИРасходов = Перечисление.ВидыПрочихДоходовИРасходов.КурсовыеРазницы Тогда
			    Продолжить;
				
			ИначеЕсли Опер.Кредит.ПрочиеДоходыИРасходы.ВидПрочихДоходовИРасходов = Перечисление.ВидыПрочихДоходовИРасходов.КупляПродажаИностраннойВалюты Тогда
				Продолжить;
			КонецЕсли;
			
		ИначеЕсли КодКоррСчета = "90.1.2" Тогда
			Продолжить;	
		КонецЕсли;
		
	    Если ПустоеЗначение(Опер.Дебет.ДвиженияДенежныхСредств) = 0 Тогда
	        ВидДвижения = Опер.Дебет.ДвиженияДенежныхСредств.ВидДвижения;
		Иначе
			ВидДвижения = "";
		КонецЕсли;

		Если (ВидДвижения = Перечисление.ВидыДвиженийДенежныхСредств.СданоВБанкНаличными)
			или (ВидДвижения = Перечисление.ВидыДвиженийДенежныхСредств.ПолученоИзБанкаНаличными) Тогда
			Продолжить;
		КонецЕсли;

		Если Опер.Документ.Вид() = "Выписка" Тогда
			НаименованиеОперации = Опер.СодержаниеПроводки;
			
		Иначе
			НаименованиеОперации = Опер.Содержание;
		КонецЕсли;
		ТабОпер.НоваяСтрока();
		ТабОпер.День = Опер.ДатаОперации;
		ТабОпер.ДокументБУ = Опер.Документ;
		ТабОпер.НаименованиеОперации = НаименованиеОперации;
		ТабОпер.Сумма = Опер.Сумма;
		ТабОпер.ВалСумма = Опер.ВалСумма;
		ТабОпер.Валюта = Опер.Валюта;
		
		КоличествоСубконто = Опер.Кредит.Счет.КоличествоСубконто();
		Для СчетчикЦикла = 1 По КоличествоСубконто Цикл
			Если Опер.Кредит.Счет.ВидСубконто(СчетчикЦикла) = ВидыСубконто.Контрагенты Тогда
			    ТабОпер.Контрагент = Опер.Кредит.Контрагенты;
				
			ИначеЕсли Опер.Кредит.Счет.ВидСубконто(СчетчикЦикла) = ВидыСубконто.Договоры Тогда
				Если Опер.Кредит.Договоры.Владелец = ТабОпер.Контрагент Тогда
				    ТабОпер.Договор = Опер.Кредит.Договоры;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		Если НайтиСчетВСтроке("60,66,67", КодКоррСчета) = 1 Тогда
			ТабОпер.УсловиеИлиВидПоступления = Перечисление.УсловияИлиВидыПоступлений.ПрочиеПоступленияСвязанныеСВозникновениемЗадолженности;
		
		ИначеЕсли (ВидДвижения = Перечисление.ВидыДвиженийДенежныхСредств.ВыручкаПоОбычнымВидамДеятельности) или
		     (ВидДвижения = Перечисление.ВидыДвиженийДенежныхСредств.ВыручкаПоПрочимОперациям) Тогда

			Если НайтиСчетВСтроке("62.1,62.6,62.11,62.4,62.8,62.44", КодКоррСчета) = 1 Тогда
				ТабОпер.УсловиеИлиВидПоступления = Перечисление.УсловияИлиВидыПоступлений.Оплата;
	
			ИначеЕсли НайтиСчетВСтроке("62.2,62.7,62.22", КодКоррСчета) = 1 Тогда
				ТабОпер.УсловиеИлиВидПоступления = Перечисление.УсловияИлиВидыПоступлений.Аванс;
				
			ИначеЕсли НайтиСчетВСтроке("76.5,76.6,76.55", КодКоррСчета) = 1 Тогда
				СуммаЗадолженности = 0;
				ВидЗадолженности = ВидЗадолженностиПоСч76(Опер, БухИт, ТабОпер.Контрагент, ТабОпер.Договор, СуммаЗадолженности);
				Если ПустоеЗначение(ВидЗадолженности) = 1 Тогда
					ТабОпер.УсловиеИлиВидПоступления = Перечисление.УсловияИлиВидыПоступлений.Аванс;
					
				ИначеЕсли ВидЗадолженности = Перечисление.ПризнакЗадолженности.Дебиторская Тогда
					ТабОпер.УсловиеИлиВидПоступления = Перечисление.УсловияИлиВидыПоступлений.Оплата;
					Если СуммаЗадолженности < ТабОпер.Сумма Тогда
					    СуммаАванса = ТабОпер.Сумма - СуммаЗадолженности;
						ВалСуммаАванса = (СуммаАванса / ТабОпер.Сумма) * ТабОпер.ВалСумма;
						ТабОпер.Сумма = СуммаЗадолженности;
						ТабОпер.ВалСумма = ТабОпер.ВалСумма - ВалСуммаАванса;
						
						ТабОпер.НоваяСтрока();
						ТабОпер.День = Опер.ДатаОперации;
						ТабОпер.ДокументБУ = Опер.Документ;
						ТабОпер.НаименованиеОперации = Опер.Содержание;
						ТабОпер.Сумма = СуммаАванса;
						ТабОпер.ВалСумма = ВалСуммаАванса;
						ТабОпер.Валюта = Опер.Валюта;
						ТабОпер.Контрагент = Опер.Кредит.Контрагенты;
						ТабОпер.Договор = Опер.Кредит.Договоры;
						ТабОпер.УсловиеИлиВидПоступления = Перечисление.УсловияИлиВидыПоступлений.Аванс;
					КонецЕсли;
				
				ИначеЕсли ВидЗадолженности = Перечисление.ПризнакЗадолженности.Кредиторская Тогда
					ТабОпер.УсловиеИлиВидПоступления = Перечисление.УсловияИлиВидыПоступлений.Аванс;
				КонецЕсли;
				
			ИначеЕсли (КодКоррСчета = "90.1.1") или (КодКоррСчета = "90.1.2") Тогда
				ТабОпер.УсловиеИлиВидПоступления = Перечисление.УсловияИлиВидыПоступлений.ПрочиеПоступления;
			КонецЕсли;

		ИначеЕсли (ВидДвижения = Перечисление.ВидыДвиженийДенежныхСредств.ПрочиеПоступления) Тогда

			Если (КодКоррСчета = "58.3") Тогда
				ТабОпер.УсловиеИлиВидПоступления = Перечисление.УсловияИлиВидыПоступлений.ПолучениеСредствПереданныхРанееНаУсловияхВозврата;
				
			ИначеЕсли (Лев(КодКоррСчета, 2) = "76") Тогда
				ТабОпер.УсловиеИлиВидПоступления = Перечисление.УсловияИлиВидыПоступлений.ПрочиеПоступленияСвязанныеСВозникновениемЗадолженности;
				
			ИначеЕсли КодКоррСчета = "91.1" Тогда
				ТабОпер.УсловиеИлиВидПоступления = Перечисление.УсловияИлиВидыПоступлений.ПрочиеПоступления;
			КонецЕсли;

		ИначеЕсли (ВидДвижения = Перечисление.ВидыДвиженийДенежныхСредств.БезвозмездныеПоступления) Тогда

			Если (КодКоррСчета = "91.1") Тогда
				ТабОпер.УсловиеИлиВидПоступления = Перечисление.УсловияИлиВидыПоступлений.БезвозмездноеПолучение;
			КонецЕсли;

		ИначеЕсли (ВидДвижения = Перечисление.ВидыДвиженийДенежныхСредств.ЦелевоеФинансирование) Тогда

			Если (Лев(КодКоррСчета, 2) = "76") или (КодКоррСчета = "86") Тогда
				ТабОпер.УсловиеИлиВидПоступления = Перечисление.УсловияИлиВидыПоступлений.ЦелевоеФинансирование;
			КонецЕсли;
			
		ИначеЕсли (Лев(КодКоррСчета, 2) = "76") Тогда
			ТабОпер.УсловиеИлиВидПоступления = Перечисление.УсловияИлиВидыПоступлений.ПрочиеПоступленияСвязанныеСВозникновениемЗадолженности;
		КонецЕсли;
	КонецЦикла;
	
	// При получении аванса возникает НДС с кредиторской задолженности.
	// Определим величину НДС с авансов, выделенную в течении дня и распределим
	// ее между строками документа, вид поступления которых - аванс.
	// Распределение выполняется в разрезе договоров.
	БИ76_АВ = СоздатьОбъект("БухгалтерскиеИтоги");
	БИ76_АВ.ИспользоватьСубконто(ВидыСубконто.СчетаФактурыВыданные);
	БИ76_АВ.ВыполнитьЗапрос(НачДата, КонДата, "76.АВ",,,, "День");
	
	НомСтроки = 0;
	ТаблицаНДС_АВ = СоздатьОбъект("ТаблицаЗначений");
	ТаблицаНДС_АВ.НоваяКолонка("Договор");
	ТаблицаНДС_АВ.НоваяКолонка("НДС");
	
	Для ДеньПериода = НачДата по КонДата Цикл
		ПерваяСтрокаДня = 0; // первая строка ТабОпер, соответствующая текущему дню периода
		Если ТабОпер.НайтиЗначение(ДеньПериода, ПерваяСтрокаДня, "День") = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		ТаблицаНДС_АВ.УдалитьСтроки();
		
		Если БИ76_АВ.ПолучитьПериод(, ДеньПериода) = 1 Тогда
			БИ76_АВ.ВыбратьСубконто();	
			Пока БИ76_АВ.ПолучитьСубконто() = 1 Цикл
				Если БИ76_АВ.Субконто().Выбран() = 1 Тогда
					ТаблицаНДС_АВ.НоваяСтрока();
					ТаблицаНДС_АВ.Договор = БИ76_АВ.Субконто().Договор;
					ТаблицаНДС_АВ.НДС = БИ76_АВ.ДО();
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		Если ТаблицаНДС_АВ.КоличествоСтрок() = 0 Тогда
		    Продолжить; //  не было НДС, нечего распределять
		КонецЕсли;
		
		ТаблицаНДС_АВ.Свернуть("Договор", "НДС");
		ТаблицаНДС_АВ.НоваяКолонка("Сумма", "Число"); // сумма аванса, полученного по договору
		ТаблицаНДС_АВ.НоваяКолонка("РаспределенныйНДС", "Число");
		ТаблицаНДС_АВ.НоваяКолонка("НомерСтрокиДокумента", "Число"); // номер стр. с таким же договором
		
		// По сформированным ранее строкам документа дополним таблицу НДС с авансов
		// сведениями о суммах собственно авансов.
		Для СтрокаДня = ПерваяСтрокаДня по ТабОпер.КоличествоСтрок() Цикл
			ТабОпер.ПолучитьСтрокуПоНомеру(СтрокаДня);
			Если ТабОпер.День <> ДеньПериода Тогда
			    Прервать;
			КонецЕсли;
			Если ТабОпер.УсловиеИлиВидПоступления = Перечисление.УсловияИлиВидыПоступлений.Аванс Тогда
				НомСтроки = 0;
				Если ТаблицаНДС_АВ.НайтиЗначение(ТабОпер.Договор, НомСтроки, "Договор") = 1 Тогда
					ТаблицаНДС_АВ.ПолучитьСтрокуПоНомеру(НомСтроки);
					ТаблицаНДС_АВ.Сумма = ТаблицаНДС_АВ.Сумма + ТабОпер.Сумма;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		// Заполним таблицу документа суммами НДС.
		Для СтрокаДня = ПерваяСтрокаДня по ТабОпер.КоличествоСтрок() Цикл
			ТабОпер.ПолучитьСтрокуПоНомеру(СтрокаДня);
			Если ТабОпер.День <> ДеньПериода Тогда
			    Прервать;
			КонецЕсли;
		    Если ТабОпер.УсловиеИлиВидПоступления = Перечисление.УсловияИлиВидыПоступлений.Аванс Тогда
				НомСтроки = 0;
				Если ТаблицаНДС_АВ.НайтиЗначение(ТабОпер.Договор, НомСтроки, "Договор") = 1 Тогда
					ТаблицаНДС_АВ.ПолучитьСтрокуПоНомеру(НомСтроки);
					ТабОпер.НДС = ТаблицаНДС_АВ.НДС * (ТабОпер.Сумма / ТаблицаНДС_АВ.Сумма);
					ТаблицаНДС_АВ.РаспределенныйНДС = ТаблицаНДС_АВ.РаспределенныйНДС + ТабОпер.НДС;
					ТаблицаНДС_АВ.НомерСтрокиДокумента = СтрокаДня;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		// Заполним документ нераспределенным НДС.
		ТаблицаНДС_АВ.ВыбратьСтроки();
		Пока ТаблицаНДС_АВ.ПолучитьСтроку() = 1 Цикл
		    Если (ТаблицаНДС_АВ.НДС <> ТаблицаНДС_АВ.РаспределенныйНДС) и (ТаблицаНДС_АВ.НомерСтрокиДокумента > 0) Тогда
			    ТабОпер.ПолучитьСтрокуПоНомеру(ТаблицаНДС_АВ.НомерСтрокиДокумента);
	        	ТабОпер.НДС = ТабОпер.НДС + ТаблицаНДС_АВ.НДС - ТаблицаНДС_АВ.РаспределенныйНДС;
		    КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры // ПолучитьОперацииПоступленияДенежныхСредств()

///////////////////////////////////////////////////////////////////////////////                                                                            
// ФОРМИРОВАНИЕ ТАБЛИЦЫ ОПЕРАЦИЙ РАСХОДА ДЕНЕЖНЫХ СРЕДСТВ
//

//*****************************************************************************
// ПолучитьОперацииРасходаДенежныхСредств()
//
// Описание:
//  Формирует таблицу операций расхода денежных средств за период,
// указанный в полях ввода НачДата и КонДата.
//
Процедура ПолучитьОперацииРасходаДенежныхСредств()
	
	ТабОпер = СоздатьОбъект("ТаблицаЗначений");
	ТабОпер.НоваяКолонка("День","Дата");
	ТабОпер.НоваяКолонка("ДокументБУ","Документ");
	ТабОпер.НоваяКолонка("НаименованиеОперации","Строка");
	ТабОпер.НоваяКолонка("УсловиеИлиВидРасхода","Перечисление.УсловияИлиВидыРасходов");
	ТабОпер.НоваяКолонка("Контрагент","Справочник.Контрагенты");
	ТабОпер.НоваяКолонка("Договор","Справочник.Договоры");
	ТабОпер.НоваяКолонка("Сумма","Число");
	ТабОпер.НоваяКолонка("НДС","Число");
	ТабОпер.НоваяКолонка("ВалСумма","Число");
	ТабОпер.НоваяКолонка("Валюта","Справочник.Валюты");
	ТабОпер.НоваяКолонка("СтатьяРасходовНаСтрахование","Справочник.РасходыБудущихПериодов");
	ТабОпер.НоваяКолонка("Сотрудник","Справочник.Сотрудники");
	
	БухИт = СоздатьОбъект("БухгалтерскиеИтоги");
	БухИт.ИспользоватьСубконто(ВидыСубконто.Контрагенты);
	БухИт.ИспользоватьСубконто(ВидыСубконто.Договоры);
	БухИт.ВыполнитьЗапрос(НачДата, КонДата, "76.5,76.6,76.55",,,, "Проводка", "С");
	
	// Выборка операций расхода денежных средств по бухгалтерским проводкам.
	Фильтр = "*,50.1;*,50.2;*,50.11;*,51;*,52;*,55.2;*,55.4;*,55.44;*,71.1;*,71.11";

	Опер = СоздатьОбъект("Операция");  
	Опер.ВыбратьОперацииСПроводками(НачДата, КонДата, Фильтр,,,);
	Пока Опер.ПолучитьПроводку() = 1 Цикл
		КодСчета = СокрЛП(Опер.Кредит.Счет.Код);
		КодКоррСчета = СокрЛП(Опер.Дебет.Счет.Код);
		Если НайтиСчетВСтроке("71", КодСчета) = 1 Тогда
			Если НайтиСчетВСтроке("60,76", КодКоррСчета) = 0 Тогда
			    Продолжить; // по сч. 71 должны остаться только оплаты поставщику
			КонецЕсли;
				
		ИначеЕсли НайтиСчетВСтроке("50,51,52,55,57,70,71,75", КодКоррСчета)  = 1 Тогда
			Продолжить;
			
		ИначеЕсли НайтиСчетВСтроке("91.2", Опер.Дебет.Счет.Код) = 1 Тогда
			Если Опер.Дебет.ПрочиеДоходыИРасходы.ВидПрочихДоходовИРасходов = Перечисление.ВидыПрочихДоходовИРасходов.КурсовыеРазницы Тогда
			    Продолжить;
				
			ИначеЕсли Опер.Дебет.ПрочиеДоходыИРасходы.ВидПрочихДоходовИРасходов = Перечисление.ВидыПрочихДоходовИРасходов.КупляПродажаИностраннойВалюты Тогда
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		
	    Если ПустоеЗначение(Опер.Кредит.ДвиженияДенежныхСредств) = 0 Тогда
	        ВидДвижения = Опер.Кредит.ДвиженияДенежныхСредств.ВидДвижения;
		
		ИначеЕсли НайтиСчетВСтроке("71", КодСчета) = 1 Тогда
			ВидДвижения = Перечисление.ВидыДвиженийДенежныхСредств.ПриобретениеТоваровПродукцииРаботИУслуг;
			
		Иначе
			ВидДвижения = "";
		КонецЕсли;

		Если (ВидДвижения = Перечисление.ВидыДвиженийДенежныхСредств.СданоВБанкНаличными)
			или (ВидДвижения = Перечисление.ВидыДвиженийДенежныхСредств.ПолученоИзБанкаНаличными) Тогда
			Продолжить;
		КонецЕсли;

		Если Опер.Документ.Вид() = "Выписка" Тогда
			НаименованиеОперации = Опер.СодержаниеПроводки;
			
		Иначе
			НаименованиеОперации = Опер.Содержание;
		КонецЕсли;
		ТабОпер.НоваяСтрока();
		ТабОпер.День = Опер.ДатаОперации;
		ТабОпер.ДокументБУ = Опер.Документ;
		ТабОпер.НаименованиеОперации = НаименованиеОперации;
		ТабОпер.Сумма = Опер.Сумма;
		ТабОпер.ВалСумма = Опер.ВалСумма;
		ТабОпер.Валюта = Опер.Валюта;

		КоличествоСубконто = Опер.Дебет.Счет.КоличествоСубконто();
		Для СчетчикЦикла = 1 По КоличествоСубконто Цикл
			Если Опер.Дебет.Счет.ВидСубконто(СчетчикЦикла) = ВидыСубконто.Контрагенты Тогда
			    ТабОпер.Контрагент = Опер.Дебет.Контрагенты;
				
			ИначеЕсли Опер.Дебет.Счет.ВидСубконто(СчетчикЦикла) = ВидыСубконто.Договоры Тогда
				Если Опер.Дебет.Договоры.Владелец = ТабОпер.Контрагент Тогда
				    ТабОпер.Договор = Опер.Дебет.Договоры;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;

		Если (ВидДвижения = Перечисление.ВидыДвиженийДенежныхСредств.ПриобретениеТоваровПродукцииРаботИУслуг) или
		     (ВидДвижения = Перечисление.ВидыДвиженийДенежныхСредств.ПриобретениеМашинОборудованияИТранспортныхСредств) или
		     (ВидДвижения = Перечисление.ВидыДвиженийДенежныхСредств.ДолевоеУчастиеВСтроительстве) Тогда

			Если (КодКоррСчета = "60.1") или (КодКоррСчета = "60.6") или (КодКоррСчета = "60.11") Тогда
				ТабОпер.УсловиеИлиВидРасхода = Перечисление.УсловияИлиВидыРасходов.Оплата;
	
			ИначеЕсли (КодКоррСчета = "60.2") или (КодКоррСчета = "60.7") или (КодКоррСчета = "60.22") Тогда
				ТабОпер.УсловиеИлиВидРасхода = Перечисление.УсловияИлиВидыРасходов.Аванс;
				
			ИначеЕсли НайтиСчетВСтроке("76.5,76.6,76.55", КодКоррСчета) = 1 Тогда
				СуммаЗадолженности = 0;
				ВидЗадолженности = ВидЗадолженностиПоСч76(Опер, БухИт, ТабОпер.Контрагент, ТабОпер.Договор, СуммаЗадолженности);
				Если ПустоеЗначение(ВидЗадолженности) = 1 Тогда
					ТабОпер.УсловиеИлиВидРасхода = Перечисление.УсловияИлиВидыРасходов.Аванс;
					
				ИначеЕсли ВидЗадолженности = Перечисление.ПризнакЗадолженности.Дебиторская Тогда
					ТабОпер.УсловиеИлиВидРасхода = Перечисление.УсловияИлиВидыРасходов.Аванс;
				
				ИначеЕсли ВидЗадолженности = Перечисление.ПризнакЗадолженности.Кредиторская Тогда
					ТабОпер.УсловиеИлиВидРасхода = Перечисление.УсловияИлиВидыРасходов.Оплата;
					Если СуммаЗадолженности < ТабОпер.Сумма Тогда
					    СуммаАванса = ТабОпер.Сумма - СуммаЗадолженности;
						ВалСуммаАванса = (СуммаАванса / ТабОпер.Сумма) * ТабОпер.ВалСумма;
						ТабОпер.Сумма = СуммаЗадолженности;
						ТабОпер.ВалСумма = ТабОпер.ВалСумма - ВалСуммаАванса;
						
						ТабОпер.НоваяСтрока();
						ТабОпер.День = Опер.ДатаОперации;
						ТабОпер.ДокументБУ = Опер.Документ;
						ТабОпер.НаименованиеОперации = Опер.Содержание;
						ТабОпер.Сумма = СуммаАванса;
						ТабОпер.ВалСумма = ВалСуммаАванса;
						ТабОпер.Валюта = Опер.Валюта;
						ТабОпер.Контрагент = Опер.Дебет.Контрагенты;
						ТабОпер.Договор = Опер.Дебет.Договоры;
						ТабОпер.УсловиеИлиВидРасхода = Перечисление.УсловияИлиВидыРасходов.Аванс;
					КонецЕсли;
					
				КонецЕсли;
			КонецЕсли;

		ИначеЕсли (ВидДвижения = Перечисление.ВидыДвиженийДенежныхСредств.ПрочиеВыплатыИПеречисления) Тогда

			Если (КодКоррСчета = "58.3") Тогда
				ТабОпер.УсловиеИлиВидРасхода = Перечисление.УсловияИлиВидыРасходов.ПредоставлениеСредствНаУсловияхВозврата;
	
			ИначеЕсли КодКоррСчета = "76.1.2" Тогда
				ТабОпер.УсловиеИлиВидРасхода = Перечисление.УсловияИлиВидыРасходов.ВзносыПоДобровольномуСтрахованию;
				ТабОпер.Сотрудник = Опер.Дебет.Сотрудники;
				
			ИначеЕсли КодКоррСчета = "76.1.3" Тогда
				ТабОпер.УсловиеИлиВидРасхода = Перечисление.УсловияИлиВидыРасходов.ВзносыПоДобровольномуСтрахованиюНаОплатуМедицинскихРасходов;
				ТабОпер.Сотрудник = Опер.Дебет.Сотрудники;
				
			ИначеЕсли КодКоррСчета = "76.1.4" Тогда
				ТабОпер.УсловиеИлиВидРасхода = Перечисление.УсловияИлиВидыРасходов.ВзносыПоДобровольномуСтрахованиюНаСлучайСмерти;
				ТабОпер.Сотрудник = Опер.Дебет.Сотрудники;
				
			ИначеЕсли КодКоррСчета = "91.2" Тогда
				Если ПустоеЗначение(Опер.Дебет.ПрочиеДоходыИРасходы) = 0 Тогда
					Если Опер.Дебет.ПрочиеДоходыИРасходы.ВидПрочихДоходовИРасходов = Перечисление.ВидыПрочихДоходовИРасходов.УслугиБанков Тогда
				    	ТабОпер.УсловиеИлиВидРасхода = Перечисление.УсловияИлиВидыРасходов.УслугиБанков;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;

		ИначеЕсли (ВидДвижения = Перечисление.ВидыДвиженийДенежныхСредств.ПлатежиВСоциальныеФонды) или
		          (ВидДвижения = Перечисление.ВидыДвиженийДенежныхСредств.ПлатежиВБюджет) Тогда
			Если (Лев(КодКоррСчета, 2) = "68") или (Лев(КодКоррСчета, 2) = "69") Тогда
				ТабОпер.УсловиеИлиВидРасхода = Перечисление.УсловияИлиВидыРасходов.ВзносыВкладыОбязательныеПлатежи;
			КонецЕсли;

		ИначеЕсли (ВидДвижения = Перечисление.ВидыДвиженийДенежныхСредств.ВыручкаПоОбычнымВидамДеятельности) или
		          (ВидДвижения = Перечисление.ВидыДвиженийДенежныхСредств.ВыручкаПоПрочимОперациям) Тогда
			Если (КодКоррСчета = "62.1") или (КодКоррСчета = "62.6") или (КодКоррСчета = "62.11") Тогда
				ТабОпер.УсловиеИлиВидРасхода = Перечисление.УсловияИлиВидыРасходов.ВозвратАвансов;
			КонецЕсли;
			
			Если (КодКоррСчета = "62.2") или (КодКоррСчета = "62.7") или (КодКоррСчета = "62.22") Тогда
				ТабОпер.УсловиеИлиВидРасхода = Перечисление.УсловияИлиВидыРасходов.ВозвратАвансов;
			КонецЕсли;                                                                                        
			
		ИначеЕсли ВидДвижения = Перечисление.ВидыДвиженийДенежныхСредств.ЦелевоеФинансирование Тогда                               
			Если НайтиСчетВСтроке("76", КодКоррСчета) = 1 Тогда
				ТабОпер.УсловиеИлиВидРасхода = Перечисление.УсловияИлиВидыРасходов.РасходованиеЦелевыхСредств;
			КонецЕсли;	
		КонецЕсли;	
		
		Если НайтиСчетВСтроке("60,62,66,67,76", КодКоррСчета) = 1 Тогда
			Если ПустоеЗначение(ТабОпер.УсловиеИлиВидРасхода) = 1 Тогда
				ТабОпер.УсловиеИлиВидРасхода = Перечисление.УсловияИлиВидыРасходов.ПрочиеРасходыСвязанныеСПогашениемЗадолженности;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	// Сформируем таблицу НДС с авансов и НДС зачтенного, выделенного за день.
	НомСтроки = 0;
	ТаблицаНДС = СоздатьОбъект("ТаблицаЗначений");
	ТаблицаНДС.НоваяКолонка("Договор");
	ТаблицаНДС.НоваяКолонка("НДС_АВ", "Число");
	ТаблицаНДС.НоваяКолонка("НДС_ОПЛ", "Число");
		
	БИ76_АВ = СоздатьОбъект("БухгалтерскиеИтоги");
	БИ76_АВ.ИспользоватьСубконто(ВидыСубконто.СчетаФактурыВыданные);
	БИ76_АВ.ВыполнитьЗапрос(НачДата, КонДата, "76.АВ",,,, "День");
	
	БИ19 = СоздатьОбъект("БухгалтерскиеИтоги");
	БИ19.ИспользоватьСубконто(ВидыСубконто.СчетаФактурыПолученные);
	БИ19.ВыполнитьЗапрос(НачДата, КонДата, "19",,,, "День");
	
	Для ДеньПериода = НачДата по КонДата Цикл
		ПерваяСтрокаДня = 0; // первая строка ТабОпер, соответствующая текущему дню периода
		Если ТабОпер.НайтиЗначение(ДеньПериода, ПерваяСтрокаДня, "День") = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		ТаблицаНДС.УдалитьСтроки();
		
		Если БИ76_АВ.ПолучитьПериод(, ДеньПериода) = 1 Тогда
		    БИ76_АВ.ВыбратьСубконто();
			Пока БИ76_АВ.ПолучитьСубконто() = 1 Цикл
				Если БИ76_АВ.Субконто().Выбран() = 1 Тогда
					ТаблицаНДС.НоваяСтрока();
					ТаблицаНДС.Договор = БИ76_АВ.Субконто().Договор;
					ТаблицаНДС.НДС_АВ = БИ76_АВ.КО(); // сторнирование НДС с ав. в книге продаж
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		Если БИ19.ПолучитьПериод(, ДеньПериода) = 1 Тогда
			БИ19.ВыбратьСубконто();
			Пока БИ19.ПолучитьСубконто() = 1 Цикл
				Если БИ19.Субконто().Выбран() = 1 Тогда
					ТаблицаНДС.НоваяСтрока();
					ТаблицаНДС.Договор = БИ19.Субконто().Договор;
					ТаблицаНДС.НДС_ОПЛ = БИ19.КО();
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		Если ТаблицаНДС.КоличествоСтрок() = 0 Тогда
		    Продолжить; //  не было НДС, нечего распределять
		КонецЕсли;
	
		ТаблицаНДС.Свернуть("Договор", "НДС_АВ, НДС_ОПЛ");
		ТаблицаНДС.НоваяКолонка("СуммаАВ", "Число"); // сумма аванса, полученного по договору
		ТаблицаНДС.НоваяКолонка("СуммаОПЛ", "Число"); // сумма оплаты по договору
		ТаблицаНДС.НоваяКолонка("РаспределенныйНДС_АВ", "Число");
		ТаблицаНДС.НоваяКолонка("РаспределенныйНДС_ОПЛ", "Число");
		ТаблицаНДС.НоваяКолонка("НомерСтрокиДокументаАВ", "Число");
		ТаблицаНДС.НоваяКолонка("НомерСтрокиДокументаОПЛ", "Число");
	
		// По сформированным ранее строкам документа дополним таблицу НДС
		// сведениями о суммах собственно авансов и оплат.
	    Для СтрокаДня = ПерваяСтрокаДня по ТабОпер.КоличествоСтрок() Цикл
			ТабОпер.ПолучитьСтрокуПоНомеру(СтрокаДня);
			Если ТабОпер.День <> ДеньПериода Тогда
			    Прервать;
			КонецЕсли;
			
			НомСтроки = 0;
			Если ТаблицаНДС.НайтиЗначение(ТабОпер.Договор, НомСтроки, "Договор") = 1 Тогда
				Если ТабОпер.УсловиеИлиВидРасхода = Перечисление.УсловияИлиВидыРасходов.Аванс Тогда
					ТаблицаНДС.ПолучитьСтрокуПоНомеру(НомСтроки);
					ТаблицаНДС.СуммаАВ = ТаблицаНДС.СуммаАВ + ТабОпер.Сумма;
					
				ИначеЕсли ТабОпер.УсловиеИлиВидРасхода = Перечисление.УсловияИлиВидыРасходов.Оплата Тогда
					ТаблицаНДС.ПолучитьСтрокуПоНомеру(НомСтроки);
					ТаблицаНДС.СуммаОПЛ = ТаблицаНДС.СуммаОПЛ + ТабОпер.Сумма;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		// Заполним таблицу документа суммами НДС.
		Для СтрокаДня = ПерваяСтрокаДня по ТабОпер.КоличествоСтрок() Цикл
			ТабОпер.ПолучитьСтрокуПоНомеру(СтрокаДня);
			Если ТабОпер.День <> ДеньПериода Тогда
			    Прервать;
			КонецЕсли;
			
			НомСтроки = 0;
			Если ТаблицаНДС.НайтиЗначение(ТабОпер.Договор, НомСтроки, "Договор") = 1 Тогда
		    	Если ТабОпер.УсловиеИлиВидРасхода = Перечисление.УсловияИлиВидыРасходов.Аванс Тогда
					ТаблицаНДС.ПолучитьСтрокуПоНомеру(НомСтроки);
					ТабОпер.НДС = ТаблицаНДС.НДС_АВ * (ТабОпер.Сумма / ТаблицаНДС.СуммаАВ);
					ТаблицаНДС.РаспределенныйНДС_АВ = ТаблицаНДС.РаспределенныйНДС_АВ + ТабОпер.НДС;
					ТаблицаНДС.НомерСтрокиДокументаАВ = СтрокаДня;
					
				ИначеЕсли ТабОпер.УсловиеИлиВидРасхода = Перечисление.УсловияИлиВидыРасходов.Оплата Тогда
					ТаблицаНДС.ПолучитьСтрокуПоНомеру(НомСтроки);
					ТабОпер.НДС = ТаблицаНДС.НДС_ОПЛ * (ТабОпер.Сумма / ТаблицаНДС.СуммаОПЛ);
					ТаблицаНДС.РаспределенныйНДС_ОПЛ = ТаблицаНДС.РаспределенныйНДС_ОПЛ + ТабОпер.НДС;
					ТаблицаНДС.НомерСтрокиДокументаОПЛ = СтрокаДня;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	
		// Заполним документ нераспределенным НДС.
		ТаблицаНДС.ВыбратьСтроки();
		Пока ТаблицаНДС.ПолучитьСтроку() = 1 Цикл
		    Если (ТаблицаНДС.НДС_АВ <> ТаблицаНДС.РаспределенныйНДС_АВ) и (ТаблицаНДС.НомерСтрокиДокументаАВ > 0) Тогда
				ТабОпер.ПолучитьСтрокуПоНомеру(ТаблицаНДС.НомерСтрокиДокументаАВ);
		        ТабОпер.НДС = ТабОпер.НДС + ТаблицаНДС.НДС_АВ - ТаблицаНДС.РаспределенныйНДС_АВ;
			КонецЕсли;
			
			Если (ТаблицаНДС.НДС_ОПЛ <> ТаблицаНДС.РаспределенныйНДС_ОПЛ) и (ТаблицаНДС.НомерСтрокиДокументаОПЛ > 0) Тогда
				ТабОпер.ПолучитьСтрокуПоНомеру(ТаблицаНДС.НомерСтрокиДокументаОПЛ);
		        ТабОпер.НДС = ТабОпер.НДС + ТаблицаНДС.НДС_ОПЛ - ТаблицаНДС.РаспределенныйНДС_ОПЛ;
		    КонецЕсли;
		КонецЦикла;
	КонецЦикла;
		
КонецПроцедуры // ПолучитьОперацииРасходаДенежныхСредств()

///////////////////////////////////////////////////////////////////////////////                                                                            
// ФОРМИРОВАНИЕ ТАБЛИЦЫ ОПЕРАЦИЙ ПРИОБРЕТЕНИЯ ИМУЩЕСТВА, РАБОТ, УСЛУГ, ПРАВ
//

//******************************************************************************
// ПолучитьВнереализационныйРасход(ВидПрочихДоходовИРасходов)
//
// Параметры:
//  ВидПрочихДоходовИРасходов - Перечисление.ВидыПрочихДоходовИРасходов
//
// Описание:
//  Получение внереализационного расхода по виду прочих расходов.
//
Процедура ПолучитьВнереализационныйРасход(ВидПрочихДоходовИРасходов)
	
	Если ВидПрочихДоходовИРасходов = Перечисление.ВидыПрочихДоходовИРасходов.АктивыПереданныеВПользование Тогда
		ТабОпер.ВидРасхода = Перечисление.ВидыРасходов.ВнереализационныеРасходы;
		ТабОпер.ЭлементРасхода = Перечисление.ВнереализационныеРасходы.СодержаниеИмуществаПереданногоВАренду;
		
	ИначеЕсли ВидПрочихДоходовИРасходов = Перечисление.ВидыПрочихДоходовИРасходов.УслугиБанков Тогда
		ТабОпер.ВидРасхода = Перечисление.ВидыРасходов.ВнереализационныеРасходы;
		ТабОпер.ЭлементРасхода = Перечисление.ВнереализационныеРасходы.УслугиБанков;
		
	ИначеЕсли ВидПрочихДоходовИРасходов = Перечисление.ВидыПрочихДоходовИРасходов.ПрибыльУбыткиПрошлыхЛет Тогда
		ТабОпер.ВидРасхода = Перечисление.ВидыРасходов.ВнереализационныеРасходы;
		ТабОпер.ЭлементРасхода = Перечисление.ВнереализационныеРасходы.УбыткиПрошлыхЛет;
		
	ИначеЕсли ВидПрочихДоходовИРасходов = Перечисление.ВидыПрочихДоходовИРасходов.ПрочиеВнереализационныеДоходыРасходы Тогда
		ТабОпер.ВидРасхода = Перечисление.ВидыРасходов.ВнереализационныеРасходы;
		ТабОпер.ЭлементРасхода = Перечисление.ВнереализационныеРасходы.ПрочиеВнереализационныеРасходы;
		
	ИначеЕсли ВидПрочихДоходовИРасходов = Перечисление.ВидыПрочихДоходовИРасходов.НеПринимаемыеДляЦелейНалогообложения Тогда
		ТабОпер.ВидРасхода = Перечисление.ВидыРасходов.НеПринимаемые;
	КонецЕсли;
	
КонецПроцедуры // ПолучитьВнереализационныйРасход()

//*****************************************************************************
// ДобавитьОперациюПриобретения(Опер)
//
// Параметры:
//  Опер - Проводка.
//
// Возвращаемое значение:
//  0 - проводка не добавлена,
//  1 - проводка добавлена.           ъ
//
// Описание:
//  Добавляет проводку в таблицу операций.
//
Функция ДобавитьОперациюПриобретения(Опер)
	
	ПроводкаДобавлена = 0;
	Если (НайтиСчетВСтроке(СчетаКтСтр, Опер.Кредит.Счет.Код) = 1) и
		 (НайтиСчетВСтроке(СчетаДтСтр, Опер.Дебет.Счет.Код) = 1) Тогда

		// Из проводок по счету 91.2 исключаем курсовые разницы, операции купли-продажи иностранной валюты, штрафы и пени.
		Если НайтиСчетВСтроке("91.2", Опер.Дебет.Счет.Код) = 1 Тогда
			Если Опер.Дебет.ПрочиеДоходыИРасходы.ВидПрочихДоходовИРасходов = Перечисление.ВидыПрочихДоходовИРасходов.КурсовыеРазницы Тогда
			    Возврат ПроводкаДобавлена;
				
			ИначеЕсли Опер.Дебет.ПрочиеДоходыИРасходы.ВидПрочихДоходовИРасходов = Перечисление.ВидыПрочихДоходовИРасходов.ШтрафыПоДоговорам Тогда
				Возврат ПроводкаДобавлена;
				
			ИначеЕсли Опер.Дебет.ПрочиеДоходыИРасходы.ВидПрочихДоходовИРасходов = Перечисление.ВидыПрочихДоходовИРасходов.КупляПродажаИностраннойВалюты Тогда
				Возврат ПроводкаДобавлена;
			КонецЕсли;
		КонецЕсли;
		
		ТабОпер.НоваяСтрока();
		ПроводкаДобавлена = 1;
		ТабОпер.День = Опер.ДатаОперации;
		ТабОпер.ДокументБУ = Опер.Документ;
		ТабОпер.НомерПроводки = Опер.НомерПроводки();
		ТабОпер.НаименованиеОперации = Опер.Содержание;
		ТабОпер.Сумма = Опер.Сумма;
		ТабОпер.Количество = Опер.Количество;
		ТабОпер.ДатаПризнания = Опер.ДатаОперации;
		ТабОпер.ОснованиеПризнания = "" + Опер.Документ;
		
		Если Опер.Кредит.Счет.ВидСубконто(1) = ВидыСубконто.Контрагенты Тогда
			ТабОпер.Контрагент = Опер.Кредит.Контрагенты;
			ТабОпер.Договор = Опер.Кредит.Договоры;
		КонецЕсли;
		
		СчетДт = Опер.Дебет.Счет.Код;
		СчетКт = Опер.Кредит.Счет.Код;
		Дебет = Опер.Дебет;
		Кредит = Опер.Кредит;
		
		// Получения условия поступления по корр. счету.
		Если НайтиСчетВСтроке("60,76.5,76.6,76.55", СчетКт) = 1 Тогда
			ТабОпер.УсловиеПолучения = Перечисление.УсловияПолученияИмущества.СПоследующейОплатой;
			Если НайтиСчетВСтроке("58.2,58.5", СчетДт) = 1 Тогда
				ТабОпер.Задолженность = Опер.Сумма;
				
			ИначеЕсли НайтиСчетВСтроке("91.2", СчетДт) = 1 Тогда
				Если Опер.Дебет.ПрочиеДоходыИРасходы.ВидПрочихДоходовИРасходов = Перечисление.ВидыПрочихДоходовИРасходов.УслугиБанков Тогда
					ТабОпер.Задолженность = Опер.Сумма;
				КонецЕсли;
			КонецЕсли;
		ИначеЕсли НайтиСчетВСтроке("62", СчетКт) = 1 Тогда
			Если НайтиСчетВСтроке("58.2,58.5", СчетДт) = 1 Тогда
				ТабОпер.УсловиеПолучения = Перечисление.УсловияПолученияИмущества.ВСчетРанееВыданныхАвансов;
				ТабОпер.Задолженность = Опер.Сумма;
			КонецЕсли;
			
		ИначеЕсли НайтиСчетВСтроке("66,67", СчетКт) = 1 Тогда
			ТабОпер.УсловиеПолучения = Перечисление.УсловияПолученияИмущества.ПоДоговоруЗайма;
			
		ИначеЕсли НайтиСчетВСтроке("71", СчетКт) = 1 Тогда
			ТабОпер.УсловиеПолучения = Перечисление.УсловияПолученияИмущества.Другие;
			
		ИначеЕсли НайтиСчетВСтроке("86", СчетКт) = 1 Тогда
			ТабОпер.УсловиеПолучения = Перечисление.УсловияПолученияИмущества.ВРамкахЦелевогоФинансирования;
			Возврат ПроводкаДобавлена;
			
		ИначеЕсли НайтиСчетВСтроке("91.1", СчетКт) = 1 Тогда
			Если Кредит.ПрочиеДоходыИРасходы.ВидПрочихДоходовИРасходов = Перечисление.ВидыПрочихДоходовИРасходов.АктивыПолученныеБезвозмездно Тогда
				ТабОпер.УсловиеПолучения = Перечисление.УсловияПолученияИмущества.Безвозмездно;
				
			Иначе
				ТабОпер.УсловиеПолучения = Перечисление.УсловияПолученияИмущества.Другие;
			КонецЕсли;
			
		ИначеЕсли НайтиСчетВСтроке("98", СчетКт) = 1 Тогда
			ТабОпер.УсловиеПолучения = Перечисление.УсловияПолученияИмущества.Безвозмездно;
			
		КонецЕсли;
		
		// Получение объекта и вида расходов по корр. счету.
		Если НайтиСчетВСтроке("07", СчетДт) = 1 Тогда
			ТабОпер.ВидРасхода = Перечисление.ВидыРасходов.ПриобретениеОсновныхСредств;
			ТабОпер.Объект = Дебет.Оборудование;
			
		ИначеЕсли НайтиСчетВСтроке("08.1,08.2,08.3,08.4", СчетДт) = 1 Тогда
			ТабОпер.ВидРасхода = Перечисление.ВидыРасходов.ПриобретениеОсновныхСредств;	
			ТабОпер.Объект = Дебет.ОбъектыСтроительства;
			
		ИначеЕсли НайтиСчетВСтроке("08.5", СчетДт) = 1 Тогда
			ТабОпер.ВидРасхода = Перечисление.ВидыРасходов.ПриобретениеНематериальныхАктивов;
			ТабОпер.Объект = Дебет.ОбъектыСтроительства;
			
		ИначеЕсли (НайтиСчетВСтроке("10", СчетДт) = 1) и (НайтиСчетВСтроке("10.7", СчетДт) = 0) Тогда
			ТабОпер.ВидРасхода = Перечисление.ВидыРасходов.ПриобретениеМатериалов;
			ТабОпер.Объект = Дебет.Материалы;
			
		ИначеЕсли НайтиСчетВСтроке("15.1", СчетДт) = 1 Тогда
			ТабОпер.ВидРасхода = Перечисление.ВидыРасходов.ПриобретениеМатериалов;
			
		ИначеЕсли НайтиСчетВСтроке("15.2", СчетДт) = 1 Тогда
			ТабОпер.ВидРасхода = Перечисление.ВидыРасходов.ПриобретениеТоваров;
			
		ИначеЕсли НайтиСчетВСтроке("15.3", СчетДт) = 1 Тогда
			ТабОпер.ВидРасхода = Перечисление.ВидыРасходов.ПриобретениеОсновныхСредств;
			
		ИначеЕсли НайтиСчетВСтроке("20", СчетДт) = 1 Тогда
			Если Дебет.СтатьиЗатратНаПроизводство.ВидРасходовДляНалоговогоУчета = Перечисление.ГруппыВидыРасходов.ГарантийныйРемонтИОбслуживание Тогда
				ТабОпер.ВидРасхода = Перечисление.ВидыРасходов.ГарантийныйРемонтИОбслуживание;
				
			ИначеЕсли Дебет.СтатьиЗатратНаПроизводство.ВидРасходовДляНалоговогоУчета = Перечисление.ГруппыВидыРасходов.РасходыНаРекламу Тогда
				ТабОпер.ВидРасхода = Перечисление.ВидыРасходов.РасходыНаРекламу;
				
			ИначеЕсли Дебет.СтатьиЗатратНаПроизводство.ВидРасходовДляНалоговогоУчета = Перечисление.ГруппыВидыРасходов.НИОКР Тогда
				ТабОпер.ВидРасхода = Перечисление.ВидыРасходов.НИОКР;
				
			Иначе   
				
				ПолучитьЭлементРасхода(Дебет.СтатьиЗатратНаПроизводство.ВидРасходовДляНалоговогоУчета, СписокЭлементовРасходов);
			КонецЕсли;
			
		ИначеЕсли НайтиСчетВСтроке("25", СчетДт) = 1 Тогда
			Если Дебет.СтатьиОбщепроизводственныхЗатрат.ВидРасходовДляНалоговогоУчета = Перечисление.ГруппыВидыРасходов.ГарантийныйРемонтИОбслуживание Тогда
				ТабОпер.ВидРасхода = Перечисление.ВидыРасходов.ГарантийныйРемонтИОбслуживание;
				
			ИначеЕсли Дебет.СтатьиОбщепроизводственныхЗатрат.ВидРасходовДляНалоговогоУчета = Перечисление.ГруппыВидыРасходов.РасходыНаРекламу Тогда
				ТабОпер.ВидРасхода = Перечисление.ВидыРасходов.РасходыНаРекламу;
				
			ИначеЕсли Дебет.СтатьиОбщепроизводственныхЗатрат.ВидРасходовДляНалоговогоУчета = Перечисление.ГруппыВидыРасходов.НИОКР Тогда
				ТабОпер.ВидРасхода = Перечисление.ВидыРасходов.НИОКР;
				
			Иначе   
				
				ПолучитьЭлементРасхода(Дебет.СтатьиОбщепроизводственныхЗатрат.ВидРасходовДляНалоговогоУчета, СписокЭлементовРасходов);
			КонецЕсли;
			
		ИначеЕсли НайтиСчетВСтроке("26", СчетДт) = 1 Тогда
			Если Дебет.СтатьиОбщехозяйственныхЗатрат.ВидРасходовДляНалоговогоУчета = Перечисление.ГруппыВидыРасходов.ГарантийныйРемонтИОбслуживание Тогда
				ТабОпер.ВидРасхода = Перечисление.ВидыРасходов.ГарантийныйРемонтИОбслуживание;
				
			ИначеЕсли Дебет.СтатьиОбщехозяйственныхЗатрат.ВидРасходовДляНалоговогоУчета = Перечисление.ГруппыВидыРасходов.ПредставительскиеРасходы Тогда
				ТабОпер.ВидРасхода = Перечисление.ВидыРасходов.ПредставительскиеРасходы;
				
			ИначеЕсли Дебет.СтатьиОбщехозяйственныхЗатрат.ВидРасходовДляНалоговогоУчета = Перечисление.ГруппыВидыРасходов.РасходыНаРекламу Тогда
				ТабОпер.ВидРасхода = Перечисление.ВидыРасходов.РасходыНаРекламу;
				
			ИначеЕсли Дебет.СтатьиОбщехозяйственныхЗатрат.ВидРасходовДляНалоговогоУчета = Перечисление.ГруппыВидыРасходов.НИОКР Тогда
				ТабОпер.ВидРасхода = Перечисление.ВидыРасходов.НИОКР;
				
			Иначе   
				
				ПолучитьЭлементРасхода(Дебет.СтатьиОбщехозяйственныхЗатрат.ВидРасходовДляНалоговогоУчета, СписокЭлементовРасходов);
			КонецЕсли;
			
		ИначеЕсли НайтиСчетВСтроке("44.1.1", СчетДт) = 1 Тогда
			Если Дебет.СтатьиИздержекОбращения.ВидРасходовДляНалоговогоУчета = Перечисление.ГруппыВидыРасходов.ГарантийныйРемонтИОбслуживание Тогда
				ТабОпер.ВидРасхода = Перечисление.ВидыРасходов.ГарантийныйРемонтИОбслуживание;
				
			ИначеЕсли Дебет.СтатьиИздержекОбращения.ВидРасходовДляНалоговогоУчета = Перечисление.ГруппыВидыРасходов.ПредставительскиеРасходы Тогда
				ТабОпер.ВидРасхода = Перечисление.ВидыРасходов.ПредставительскиеРасходы;
				
			ИначеЕсли Дебет.СтатьиИздержекОбращения.ВидРасходовДляНалоговогоУчета = Перечисление.ГруппыВидыРасходов.РасходыНаРекламу Тогда
				ТабОпер.ВидРасхода = Перечисление.ВидыРасходов.РасходыНаРекламу;
				
			ИначеЕсли Дебет.СтатьиИздержекОбращения.ВидРасходовДляНалоговогоУчета = Перечисление.ГруппыВидыРасходов.НИОКР Тогда
				ТабОпер.ВидРасхода = Перечисление.ВидыРасходов.НИОКР;
				
			ИначеЕсли Дебет.СтатьиИздержекОбращения.СписыватьИздержкиПропорциональноОстаткуТоваров.Получить(ТабОпер.День) = 1 Тогда
				ТабОпер.ВидРасхода = Перечисление.ВидыРасходов.ТранспортныеРасходы;
				
			Иначе   
				
				ПолучитьЭлементРасхода(Дебет.СтатьиИздержекОбращения.ВидРасходовДляНалоговогоУчета, СписокЭлементовРасходов);
			КонецЕсли;
		ИначеЕсли НайтиСчетВСтроке("44.1.2", СчетДт) = 1 Тогда
			ТабОпер.ВидРасхода = Перечисление.ВидыРасходов.НеПринимаемые;
			
		ИначеЕсли НайтиСчетВСтроке("44.1.3", СчетДт) = 1 Тогда
			ТабОпер.ВидРасхода = Перечисление.ВидыРасходов.НеПринимаемые;
			
		ИначеЕсли НайтиСчетВСтроке("44.2", СчетДт) = 1 Тогда
			Если Дебет.СтатьиКоммерческихРасходов.ВидРасходовДляНалоговогоУчета = Перечисление.ГруппыВидыРасходов.РасходыНаРекламу Тогда
				ТабОпер.ВидРасхода = Перечисление.ВидыРасходов.РасходыНаРекламу;
				
			ИначеЕсли Дебет.СтатьиКоммерческихРасходов.ВидРасходовДляНалоговогоУчета = Перечисление.ГруппыВидыРасходов.НИОКР Тогда
				ТабОпер.ВидРасхода = Перечисление.ВидыРасходов.НИОКР;
				
			Иначе   
				
				ПолучитьЭлементРасхода(Дебет.СтатьиКоммерческихРасходов.ВидРасходовДляНалоговогоУчета, СписокЭлементовРасходов);
			КонецЕсли;
			
		ИначеЕсли НайтиСчетВСтроке("44.3", СчетДт) = 1 Тогда
			Если Дебет.СтатьиРасходовНаПродажу.ВидРасходовДляНалоговогоУчета = Перечисление.ГруппыВидыРасходов.РасходыНаРекламу Тогда
				ТабОпер.ВидРасхода = Перечисление.ВидыРасходов.РасходыНаРекламу;
				
			ИначеЕсли Дебет.СтатьиРасходовНаПродажу.ВидРасходовДляНалоговогоУчета = Перечисление.ГруппыВидыРасходов.НИОКР Тогда
				ТабОпер.ВидРасхода = Перечисление.ВидыРасходов.НИОКР;
				
			Иначе   
				
				ПолучитьЭлементРасхода(Дебет.СтатьиРасходовНаПродажу.ВидРасходовДляНалоговогоУчета, СписокЭлементовРасходов);
			КонецЕсли;
			
		ИначеЕсли НайтиСчетВСтроке("21", СчетДт) = 1 Тогда
			ТабОпер.Объект = Дебет.Номенклатура;
			
		ИначеЕсли НайтиСчетВСтроке("41", СчетДт) = 1 Тогда
			ТабОпер.ВидРасхода = Перечисление.ВидыРасходов.ПриобретениеТоваров;
			ТабОпер.Объект = Дебет.Номенклатура;
			
		ИначеЕсли НайтиСчетВСтроке("58.2", СчетДт) = 1 Тогда
			ТабОпер.ВидРасхода = Перечисление.ВидыРасходов.ПриобретениеЦенныхБумаг;
			ТабОпер.Объект = Дебет.ЦенныеБумаги;
			
		ИначеЕсли НайтиСчетВСтроке("58.5", СчетДт) = 1 Тогда
			ТабОпер.ВидРасхода = Перечисление.ВидыРасходов.ПриобретениеПрав;
			ТабОпер.Объект = Дебет.Договоры;
			
		ИначеЕсли НайтиСчетВСтроке("91.2", СчетДт) = 1 Тогда
			ПолучитьВнереализационныйРасход(Дебет.ПрочиеДоходыИРасходы.ВидПрочихДоходовИРасходов);
			
		ИначеЕсли НайтиСчетВСтроке("97", СчетДт) = 1 Тогда
			ТабОпер.ВидРасхода = Перечисление.ВидыРасходов.РасходыБудущихПериодов;
			ТабОпер.Объект = Дебет.РасходыБудущихПериодов;
		КонецЕсли;        
		
		Если ТабОпер.ЭлементРасхода = Перечисление.ГруппыВидыРасходов.НеПринимаемые Тогда
			ТабОпер.ВидРасхода = Перечисление.ВидыРасходов.НеПринимаемые;
			ТабОпер.ЭлементРасхода = 0;
			
		ИначеЕсли ТабОпер.УсловиеПолучения = Перечисление.УсловияПолученияИмущества.Безвозмездно Тогда
		    ТабОпер.ВидРасхода = 0;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ПроводкаДобавлена;
	
КонецФункции // ДобавитьОперациюПриобретения()

//*****************************************************************************
// ПолучитьОперацииПриобретенияИмущества()
//
// Описание:
//  Формирует таблицу операций приобретения имущества, работ, услуг, прав за период,
// указанный в полях ввода НачДата и КонДата.
//
Процедура ПолучитьОперацииПриобретенияИмущества()
	
	ТабОпер = СоздатьОбъект("ТаблицаЗначений");
	ТабОпер.НоваяКолонка("День","Дата");
	ТабОпер.НоваяКолонка("ДокументБУ","Документ");
	ТабОпер.НоваяКолонка("НомерПроводки","Число");
	ТабОпер.НоваяКолонка("УсловиеПолучения");
	ТабОпер.НоваяКолонка("ВидРасхода");
	ТабОпер.НоваяКолонка("ЭлементРасхода");
	ТабОпер.НоваяКолонка("НаименованиеОперации","Строка");
	ТабОпер.НоваяКолонка("Сумма","Число");
	ТабОпер.НоваяКолонка("Количество","Число");
	ТабОпер.НоваяКолонка("Объект","Справочник");
	ТабОпер.НоваяКолонка("ДатаПризнания","Дата");
	ТабОпер.НоваяКолонка("ОснованиеПризнания","Строка");
	ТабОпер.НоваяКолонка("Контрагент","Справочник");
	ТабОпер.НоваяКолонка("Договор","Справочник");
	ТабОпер.НоваяКолонка("Задолженность","Число");
	ТабОпер.НоваяКолонка("НДС","Число");
	
	СчетаДтСтр = "07,08,10,15,20,21,23,25,26,28,29,41,44,45,58.2,58.5,91.2,97,99";
	СчетаКтСтр = "60,62,66,67,71,76.5,76.6,76.55,86,91.1,98";
	
	// список видов косвенных расходов
	СписокЭлементовРасходов.УдалитьВсе();
	СписокЭлементовРасходов.ДобавитьЗначение(Перечисление.ГруппыВидыРасходов.МатериальныеРасходы);
	СписокЭлементовРасходов.ДобавитьЗначение(Перечисление.ГруппыВидыРасходов.НалогиИСборы);
	СписокЭлементовРасходов.ДобавитьЗначение(Перечисление.ГруппыВидыРасходов.ПользованиеПравамиНаРезультатыИнтеллектуальнойДеятельности);
	СписокЭлементовРасходов.ДобавитьЗначение(Перечисление.ГруппыВидыРасходов.РасходыНаКомандировки);
	СписокЭлементовРасходов.ДобавитьЗначение(Перечисление.ГруппыВидыРасходов.РасходыНаРекламуБезНорм);
	СписокЭлементовРасходов.ДобавитьЗначение(Перечисление.ГруппыВидыРасходов.ИнформационныеУслуги);
	СписокЭлементовРасходов.ДобавитьЗначение(Перечисление.ГруппыВидыРасходов.ИзучениеКонъюнктурыРынка);
	СписокЭлементовРасходов.ДобавитьЗначение(Перечисление.ГруппыВидыРасходов.РемонтОсновныхСредств);
	СписокЭлементовРасходов.ДобавитьЗначение(Перечисление.ГруппыВидыРасходов.ПодготовкаИПереподготовкаКадров);
	СписокЭлементовРасходов.ДобавитьЗначение(Перечисление.ГруппыВидыРасходов.ОхранаИмущества);
	СписокЭлементовРасходов.ДобавитьЗначение(Перечисление.ГруппыВидыРасходов.УслугиПоУправлению);
	СписокЭлементовРасходов.ДобавитьЗначение(Перечисление.ГруппыВидыРасходов.АудиторскиеУслуги);
	СписокЭлементовРасходов.ДобавитьЗначение(Перечисление.ГруппыВидыРасходов.ПредоставлениеРаботниковСтороннимиОрганизациями);
	СписокЭлементовРасходов.ДобавитьЗначение(Перечисление.ГруппыВидыРасходов.СоциальнаяЗащитаИнвалидов);
	СписокЭлементовРасходов.ДобавитьЗначение(Перечисление.ГруппыВидыРасходов.ДругиеРасходы);
	СписокЭлементовРасходов.ДобавитьЗначение(Перечисление.ГруппыВидыРасходов.НеПринимаемые); // это элемент вспомогательный
	
	Опер = СоздатьОбъект("Операция");
	
	// Получение данных из документов поступления МПЗ.
	Запрос = СоздатьОбъект("Запрос");
	ТекстЗапроса = 
	"//{{ЗАПРОС(ДокументыПриобретенияИмущества)
	|Период с НачДата по КонДата;
	|ОбрабатыватьДокументы Проведенные;
	|ТекДок = Документ.ПоступлениеНМА.ТекущийДокумент,
	|         Документ.ПоступлениеМатериалов.ТекущийДокумент,
	|         Документ.ПоступлениеОС.ТекущийДокумент,
	|         Документ.ПоступлениеТоваров.ТекущийДокумент,
	|         Документ.ПоступлениеОборудования.ТекущийДокумент,
	|         Документ.УслугиСтороннихОрганизаций.ТекущийДокумент;
	|Группировка ТекДок;
	|"//}}ЗАПРОС
	;
	Если Запрос.Выполнить(ТекстЗапроса) = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Пока Запрос.Группировка("ТекДок") = 1 Цикл
		Док = Запрос.ТекДок;
		ДокВид = Запрос.ТекДок.Вид();
		
		Если ДокВид = "ПоступлениеМатериалов" Тогда
			Если Док.ВидПоступления = 1 Тогда // поступление материалов из переработки
			    Продолжить;
			КонецЕсли;
		КонецЕсли;
		
		Если ПустоеЗначение(Док.Договор.ВалютаДоговора) = 1 Тогда
		    Курс = 1;
			
		Иначе
			Курс = Док.Курс;
			Кратность = Док.Договор.ВалютаДоговора.Кратность.Получить(Док.ДатаДок);
			Курс = Курс / ?(Кратность = 0, 1, Кратность);
		КонецЕсли;
		
		Если ДокВид = "УслугиСтороннихОрганизаций" Тогда
			ИтогНДС = Док.Итог("НДС") * Курс;
			ИтогВсего = Док.Итог("Всего") * Курс;
			ИтогСтоимость = ?(Док.НДСвключатьВСтоимость = 1, ИтогВсего, ИтогВсего - ИтогНДС);
			РаспределенныйНДС = 0;
			РаспределеннаяЗадолженность = 0;
			
			ДобавленыПроводки = 0;
			Опер.НайтиОперацию(Док);
			Опер.ВыбратьПроводки();
			Пока Опер.ПолучитьПроводку() = 1 Цикл
			    Если ДобавитьОперациюПриобретения(Опер) = 1 Тогда
					ДобавленыПроводки = 1;
					К = ТабОпер.Сумма / ИтогСтоимость;
					ТабОпер.НДС = ?(Док.НДСвключатьВСтоимость = 1, 0, К * ИтогНДС);
					ТабОпер.Задолженность = К * ИтогВсего;
					ТабОпер.УсловиеПолучения = Перечисление.УсловияПолученияИмущества.СПоследующейОплатой;
					РаспределенныйНДС = РаспределенныйНДС + ТабОпер.НДС;
					РаспределеннаяЗадолженность = РаспределеннаяЗадолженность + ТабОпер.Задолженность;
				КонецЕсли;
			КонецЦикла;
			
			Если ДобавленыПроводки = 1 Тогда
				Если РаспределенныйНДС <> ИтогНДС Тогда
					ТабОпер.НДС = ТабОпер.НДС +  ИтогНДС - РаспределенныйНДС;
				КонецЕсли;
				
				Если РаспределеннаяЗадолженность <> ИтогВсего Тогда
					ТабОпер.Задолженность = ТабОпер.Задолженность + ИтогВсего - РаспределеннаяЗадолженность;
				КонецЕсли;
			КонецЕсли;
		
		Иначе // все прочие документы поступления
			Док.ВыбратьСтроки();
			Пока Док.ПолучитьСтроку() = 1 Цикл
				Если ДокВид = "ПоступлениеТоваров" Тогда
					Если Док.Товар.ТипТовара = Перечисление.ТипыТоваров.НаКомиссии Тогда
					    Продолжить;
					КонецЕсли;
				КонецЕсли;
				
			    ТабОпер.НоваяСтрока();
				
				// Общие реквизиты для всех документов.
				ТабОпер.День = Док.ДатаДок;
				ТабОпер.ДокументБУ = Док;
				ТабОпер.НаименованиеОперации = Док.Операция.Содержание;
				ТабОпер.ОснованиеПризнания = "" + Док;
				ТабОпер.Количество = ?(ДокВид = "ПоступлениеНМА", 1, Док.Количество);
				ТабОпер.НДС = ?(Док.НДСвключатьВСтоимость = 1, 0, Док.НДС * Курс);
				ТабОпер.Сумма = ?(Док.НДСвключатьВСтоимость = 1, Док.Всего, Док.Всего - Док.НДС) * Курс;
				ТабОпер.Контрагент = Док.Контрагент;
				ТабОпер.Договор = Док.Договор;
				ТабОпер.Задолженность = Док.Всего * Курс;
				ТабОпер.УсловиеПолучения = Перечисление.УсловияПолученияИмущества.СПоследующейОплатой;
				ТабОпер.ДатаПризнания = Док.ДатаДок;
				
				// Поиск первой проводки по поступлению имущества.
				Опер.НайтиОперацию(Док);
				Опер.ВыбратьПроводки();
				Пока Опер.ПолучитьПроводку() = 1 Цикл
   					Если (НайтиСчетВСтроке(СчетаКтСтр, Опер.Кредит.Счет.Код) = 1) и
			 			 (НайтиСчетВСтроке(СчетаДтСтр, Опер.Дебет.Счет.Код) = 1) Тогда
			 			ТабОпер.НомерПроводки = Опер.НомерПроводки();
			 			Прервать;
                    КонецЕсли;
				КонецЦикла;
				
				Если ДокВид = "ПоступлениеТоваров" Тогда
				    ТабОпер.ВидРасхода = Перечисление.ВидыРасходов.ПриобретениеТоваров;
					ТабОпер.Объект = Док.Товар;
				
				ИначеЕсли ДокВид = "ПоступлениеМатериалов" Тогда
					ТабОпер.ВидРасхода = Перечисление.ВидыРасходов.ПриобретениеМатериалов;
					ТабОпер.Объект = Док.Материал;
					
				ИначеЕсли ДокВид = "ПоступлениеОС" Тогда
					ТабОпер.ВидРасхода = Перечисление.ВидыРасходов.ПриобретениеОсновныхСредств;
					ТабОпер.Объект = Док.ОбъектВнеоборотныхАктивов;
					
				ИначеЕсли ДокВид = "ПоступлениеОборудования" Тогда
						ТабОпер.ВидРасхода = Перечисление.ВидыРасходов.ПриобретениеОсновныхСредств;
					ТабОпер.Объект = Док.Оборудование;
					
				ИначеЕсли ДокВид = "ПоступлениеНМА" Тогда
					ТабОпер.ВидРасхода = Перечисление.ВидыРасходов.ПриобретениеНематериальныхАктивов;
					ТабОпер.Объект = Док.ОбъектВнеоборотныхАктивов;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	// Добавление операций, введенных вручную.
	// Получение данных из документов поступления МПЗ.
	Запрос = СоздатьОбъект("Запрос");
	ТекстЗапроса = 
	"//{{ЗАПРОС(РучныеОперацииПриобретенияИмущества)
	|Период с НачДата по КонДата;
	|ОбрабатыватьДокументы Проведенные;
	|ТекДок = Документ.АвансовыйОтчет.ТекущийДокумент,
	|         Документ.Выписка.ТекущийДокумент,
	|         Документ.Операция.ТекущийДокумент;
	|Группировка ТекДок;
	|"//}}ЗАПРОС
	;
	Если Запрос.Выполнить(ТекстЗапроса) = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Пока Запрос.Группировка("ТекДок") = 1 Цикл
		Опер.НайтиОперацию(Запрос.ТекДок);
		Если Опер.ВключитьПроводки() = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Опер.ВыбратьПроводки();
		Пока Опер.ПолучитьПроводку() = 1 Цикл
	        ДобавитьОперациюПриобретения(Опер);
		КонецЦикла;
	КонецЦикла;
	
	// Разделение условий поступления "С последующей оплатой" на условия
	// "В счет авансов" и "С последующей оплатой".
	// Получим итоги для определения сумм авансов.
	ТаблицаАвансов = СоздатьОбъект("ТаблицаЗначений");
	ТаблицаАвансов.НоваяКолонка("Документ");
	ТаблицаАвансов.НоваяКолонка("НомерПроводки");
	ТаблицаАвансов.НоваяКолонка("Аванс", "Число");
	
	СписокДоговоров = СоздатьОбъект("СписокЗначений");
	ТабОпер.Выгрузить(СписокДоговоров,,, "Договор");
	
	БухИт = СоздатьОбъект("БухгалтерскиеИтоги");
	БухИт.ИспользоватьСубконто(ВидыСубконто.Договоры, СписокДоговоров);
	БухИт.ВключатьСубсчета(0);
	БухИт.ВыполнитьЗапрос(НачДата, КонДата, "60,76.5,76.6,76.55",,,, "Проводка", "С");
	БухИт.ВыбратьПериоды(, 2);
	Пока БухИт.ПолучитьПериод() = 1 Цикл
		Если БухИт.ПолучитьСубконто(ВидыСубконто.Договоры,, БухИт.Операция.Кредит.Договоры) = 1 Тогда
			ТаблицаАвансов.НоваяСтрока();
			ТаблицаАвансов.Документ = БухИт.Операция.Документ;
			ТаблицаАвансов.НомерПроводки = БухИт.Операция.НомерПроводки();
			ТаблицаАвансов.Аванс = БухИт.СНД();
		КонецЕсли;
	КонецЦикла;
	
	НомСтроки = 1;
	ТекДокумент = ПолучитьПустоеЗначение("Документ");
	Пока НомСтроки <= ТабОпер.КоличествоСтрок() Цикл 
		ТабОпер.ПолучитьСтрокуПоНомеру(НомСтроки);
		Если ТабОпер.УсловиеПолучения <> Перечисление.УсловияПолученияИмущества.СПоследующейОплатой Тогда
			НомСтроки = НомСтроки + 1;
		    Продолжить;
		КонецЕсли;
		
		Если (ТекДокумент <> ТабОпер.ДокументБУ) или (ТабОпер.ДокументБУ.Вид() = "Операция") Тогда
			ТекДокумент = ТабОпер.ДокументБУ;
			// Получение суммы аванса на момент проводки.
			ОстатокАванса = 0;
			НомСтрокиАванса = 0;
			Если ТаблицаАвансов.НайтиЗначение(ТекДокумент, НомСтрокиАванса, "Документ") = 1 Тогда
				Для а = НомСтрокиАванса по ТаблицаАвансов. КоличествоСтрок() Цикл
					ТаблицаАвансов.ПолучитьСтрокуПоНомеру(а);
					Если ТаблицаАвансов.НомерПроводки = ТабОпер.НомерПроводки Тогда
					    ОстатокАванса = ТаблицаАвансов.Аванс;
						Прервать;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;	
		КонецЕсли;
		
		СуммаЗачтенногоАванса = Мин(ТабОпер.Задолженность, ОстатокАванса);
		ТабОпер.Задолженность = ТабОпер.Задолженность - СуммаЗачтенногоАванса;
		ОстатокАванса = ОстатокАванса - СуммаЗачтенногоАванса;
		
		Если СуммаЗачтенногоАванса = 0 Тогда // аванса не было совсем
		ИначеЕсли ТабОпер.Задолженность = 0 Тогда // зачли всю задолженность
			ТабОпер.Задолженность = СуммаЗачтенногоАванса;
			ТабОпер.УсловиеПолучения = Перечисление.УсловияПолученияИмущества.ВСчетРанееВыданныхАвансов;
			
		Иначе // зачли задолженность частично
			// Сохраним текущую строку ТабОпер в отдельной таблице.
			ТекСтрока = СоздатьОбъект("ТаблицаЗначений");
			ТабОпер.Выгрузить(ТекСтрока, НомСтроки, НомСтроки);
			
			// Распределим суммы пропорционально зачтенному авансу.
			К = ТекСтрока.Задолженность / (ТекСтрока.Задолженность + СуммаЗачтенногоАванса);
			ТабОпер.Количество = К * ТабОпер.Количество;
			ТабОпер.Сумма = К * ТабОпер.Сумма;
			ТабОпер.НДС = К * ТабОпер.НДС;
			
			// В ТекСтрока установим числа "под зачет аванса".
			ТекСтрока.ПолучитьСтрокуПоНомеру(1);
			ТекСтрока.Задолженность = СуммаЗачтенногоАванса;
			ТекСтрока.Количество = ТекСтрока.Количество - ТабОпер.Количество;
			ТекСтрока.Сумма = ТекСтрока.Сумма - ТабОпер.Сумма;
			ТекСтрока.НДС = ТекСтрока.НДС - ТабОпер.НДС;
			ТекСтрока.УсловиеПолучения = Перечисление.УсловияПолученияИмущества.ВСчетРанееВыданныхАвансов;
			
			// Добавим новую строку в ТабОпер и скопируем в нее сохраненной в ТекСтрока строки.
			НомСтроки = НомСтроки + 1;
			ТабОпер.НоваяСтрока(НомСтроки);
			Для НомКолонки = 1 по ТекСтрока.КоличествоКолонок() Цикл
				ЗначениеКолонки = ТекСтрока.ПолучитьЗначение(1, НомКолонки);
				ТабОпер.УстановитьЗначение(НомСтроки, НомКолонки, ЗначениеКолонки);
			КонецЦикла;
		КонецЕсли;
		НомСтроки = НомСтроки + 1;
	КонецЦикла;
	
КонецПроцедуры // ПолучитьОперацииПриобретенияИмущества()

///////////////////////////////////////////////////////////////////////////////                                                                            
// ФОРМИРОВАНИЕ ТАБЛИЦЫ ОПЕРАЦИЙ ВЫБЫТИЯ ИМУЩЕСТВА, РАБОТ, УСЛУГ, ПРАВ
//

//*****************************************************************************
// ЭтоПроводкаВыбытияИмущества(Опер)
// 
// Параметры:
//  Опер - Проводка.
// 
// Возвращаемое значение:
//  0 - это не выбытие имущества,
//  1 - это выбытие имущества.
//
// Описание:
//  Определяет, является ли указанная проводка операцией выбытия имущества.
//
Функция ЭтоПроводкаВыбытияИмущества(Опер)

	Если ((НайтиСчетВСтроке(СчетаКтСтр, Опер.Кредит.Счет.Код) = 1) и
		  (НайтиСчетВСтроке(СчетаДтСтр, Опер.Дебет.Счет.Код) = 1)) или
		  
		 ((НайтиСчетВСтроке("10", Опер.Кредит.Счет.Код) = 1) и
		  (НайтиСчетВСтроке("60", Опер.Дебет.Счет.Код) = 1)) или
		  
		 ((НайтиСчетВСтроке("41", Опер.Кредит.Счет.Код) = 1) и
		  (НайтиСчетВСтроке("60", Опер.Дебет.Счет.Код) = 1)) или
		  
		 ((НайтиСчетВСтроке("01.2", Опер.Кредит.Счет.Код) = 1) и
		  (НайтиСчетВСтроке("91.2", Опер.Дебет.Счет.Код) = 1)) или
		  
		 ((НайтиСчетВСтроке("04.1", Опер.Кредит.Счет.Код) = 1) и
		  (НайтиСчетВСтроке("91.2", Опер.Дебет.Счет.Код) = 1)) Тогда
		  
		Если НайтиСчетВСтроке("91.1", Опер.Кредит.Счет.Код) = 1 Тогда
			ВидПрочихДоходовРасходов = Опер.Кредит.ПрочиеДоходыИРасходы.ВидПрочихДоходовИРасходов;
			Если (ВидПрочихДоходовРасходов <> Перечисление.ВидыПрочихДоходовИРасходов.ВыбытиеОС)
			   и (ВидПрочихДоходовРасходов <> Перечисление.ВидыПрочихДоходовИРасходов.ВыбытиеНМА)
			   и (ВидПрочихДоходовРасходов <> Перечисление.ВидыПрочихДоходовИРасходов.ВыбытиеАктивов)
			   и (ВидПрочихДоходовРасходов <> Перечисление.ВидыПрочихДоходовИРасходов.ОсуществлениеФинансовыхУслуг)
			   и (ВидПрочихДоходовРасходов <> Перечисление.ВидыПрочихДоходовИРасходов.УступкиПраваТребования)
			   и (ВидПрочихДоходовРасходов <> Перечисление.ВидыПрочихДоходовИРасходов.ОперацииСФинансовымиИнструментами) Тогда
			    Возврат 0;
			КонецЕсли;
		КонецЕсли; 
		  
		Возврат 1;
		
	Иначе
		Возврат 0;
	КонецЕсли;
		 	
КонецФункции // ЭтоПроводкаВыбытияИмущества()

//*****************************************************************************
// ПолучитьОперацииВыбытияИмущества()
//
// Описание:
//  Формирует таблицу операций приобретения имущества, работ, услуг, прав, за период
// указанный в полях ввода НачДата и КонДата.
//
Процедура ПолучитьОперацииВыбытияИмущества()
	
	ТабОпер = СоздатьОбъект("ТаблицаЗначений");
	ТабОпер.НоваяКолонка("День","Дата");
	ТабОпер.НоваяКолонка("ДокументБУ","Документ");
	ТабОпер.НоваяКолонка("НомерПроводки","Число");
	ТабОпер.НоваяКолонка("Объект","Справочник");
	ТабОпер.НоваяКолонка("Контрагент","Справочник");
	ТабОпер.НоваяКолонка("Договор","Справочник");
	ТабОпер.НоваяКолонка("НаименованиеОперации","Строка");
	ТабОпер.НоваяКолонка("Количество","Число");
	ТабОпер.НоваяКолонка("Сумма","Число");
	ТабОпер.НоваяКолонка("НДС","Число");
	ТабОпер.НоваяКолонка("Задолженность","Число");
	ТабОпер.НоваяКолонка("УсловиеВыбытия");
	ТабОпер.НоваяКолонка("ВидДохода");
	ТабОпер.НоваяКолонка("ЭлементДохода");
	
	СчетаДтСтр = "46,50,51,57,58.3,62,76.5,76.6,76.55";
	СчетаКтСтр = "90.1.1,91.1";
	Опер = СоздатьОбъект("Операция");
	
	// Получение данных из документов поступления МПЗ.
	Запрос = СоздатьОбъект("Запрос");
	ТекстЗапроса = 
	"//{{ЗАПРОС(ДокументыПриобретенияИмущества)
	|Период с НачДата по КонДата;
	|ОбрабатыватьДокументы Проведенные;
	|ТекДок = Документ.ВыполнениеЭтапаРабот.ТекущийДокумент,
	|         Документ.ОказаниеУслуг.ТекущийДокумент,
	|         Документ.РасходнаяНакладная.ТекущийДокумент,
	|         Документ.РеализацияОтгруженнойПродукции.ТекущийДокумент,
	|         Документ.ОтпускМатериаловНаСторону.ТекущийДокумент,
	|         Документ.ПродажаВРозницу.ТекущийДокумент,
	|         Документ.ПрекращениеСрокаДействияНМА.ТекущийДокумент,
	|         Документ.СписаниеОС.ТекущийДокумент,
	|         Документ.ПередачаНМА.ТекущийДокумент,
	|         Документ.ПередачаОС.ТекущийДокумент;
	|Группировка ТекДок;
	|"//}}ЗАПРОС
	;
	Если Запрос.Выполнить(ТекстЗапроса) = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Пока Запрос.Группировка("ТекДок") = 1 Цикл	
	    Док = Запрос.ТекДок;
		ДокВид = Запрос.ТекДок.Вид();
		
		// Поиск первой проводки по выбытию имущества.
		НомерПервойПроводки = 1;
		Опер.НайтиОперацию(Док);
		Опер.ВыбратьПроводки();
		Пока Опер.ПолучитьПроводку() = 1 Цикл
			Если ((НайтиСчетВСтроке(СчетаКтСтр, Опер.Кредит.Счет.Код) = 1) и
				  (НайтиСчетВСтроке(СчетаДтСтр, Опер.Дебет.Счет.Код) = 1)) Тогда
		  
				// Из проводок по счету 91.1 исключаем проводки, относящиеся к внереализационным доходам.
				Если НайтиСчетВСтроке("91.1", Опер.Кредит.Счет.Код) = 1 Тогда
					ВидПрочихДоходовРасходов = Опер.Кредит.ПрочиеДоходыИРасходы.ВидПрочихДоходовИРасходов;
					Если (ВидПрочихДоходовРасходов <> Перечисление.ВидыПрочихДоходовИРасходов.ВыбытиеОС)
					   и (ВидПрочихДоходовРасходов <> Перечисление.ВидыПрочихДоходовИРасходов.ВыбытиеНМА)
					   и (ВидПрочихДоходовРасходов <> Перечисление.ВидыПрочихДоходовИРасходов.ВыбытиеАктивов)
					   и (ВидПрочихДоходовРасходов <> Перечисление.ВидыПрочихДоходовИРасходов.ОсуществлениеФинансовыхУслуг)
					   и (ВидПрочихДоходовРасходов <> Перечисление.ВидыПрочихДоходовИРасходов.УступкиПраваТребования)
					   и (ВидПрочихДоходовРасходов <> Перечисление.ВидыПрочихДоходовИРасходов.ОперацииСФинансовымиИнструментами) Тогда
						Продолжить;
					КонецЕсли;
				КонецЕсли; 
				  
	 			НомерПервойПроводки = Опер.НомерПроводки();
	 			Прервать;
            КонецЕсли;
		КонецЦикла;
		
		Если (ДокВид = "ПродажаВРозницу") или
			 (ДокВид = "ПрекращениеСрокаДействияНМА") или
			 (ДокВид = "СписаниеОС") Тогда
		    Курс = 1;
			
		ИначеЕсли ПустоеЗначение(Док.Договор.ВалютаДоговора) = 1 Тогда
		    Курс = 1;
			
		Иначе
			Курс = Док.Курс;
			Кратность = Док.Договор.ВалютаДоговора.Кратность.Получить(Док.ДатаДок);
			Курс = Курс / ?(Кратность = 0, 1, Кратность);
		КонецЕсли;
		
		Если (ДокВид = "ВыполнениеЭтапаРабот") или 
			 (ДокВид = "ОказаниеУслуг") или
			 (ДокВид = "ОтпускМатериаловНаСторону") или
			 (ДокВид = "ПродажаВРозницу") или
			 (ДокВид = "РеализацияОтгруженнойПродукции") или
			 (ДокВид = "РасходнаяНакладная") Тогда
			
			Если ДокВид = "ВыполнениеЭтапаРабот" Тогда
			    Если Док.ЗавершитьРаботы = 1 Тогда
			        Продолжить;
				КонецЕсли;
			
			ИначеЕсли ДокВид = "ПродажаВРозницу" Тогда
			    Если Док.ПродажаОблагаетсяЕНВД = 1 Тогда
			        Продолжить;
				КонецЕсли;
				
			ИначеЕсли ДокВид = "РасходнаяНакладная" Тогда
			    Если Док.ВидОтгрузки = 2 Тогда
			        Продолжить;
				КонецЕсли;
				
			ИначеЕсли ДокВид = "ОтпускМатериаловНаСторону" Тогда
				Если Док.ВидОтпуска = 1 Тогда // передача материалов в переработку на сторону
					Продолжить;
				КонецЕсли;	
			КонецЕсли;
			 	
			Док.ВыбратьСтроки();
			Пока Док.ПолучитьСтроку() = 1 Цикл
				Если (ДокВид = "РасходнаяНакладная") или
					 (ДокВид = "РеализацияОтгруженнойПродукции") или
					 (ДокВид = "ПродажаВРозницу") Тогда
					Если Док.Товар.ТипТовара = Перечисление.ТипыТоваров.НаКомиссии Тогда
					    Продолжить;
					КонецЕсли;
				КонецЕсли;
				
			    ТабОпер.НоваяСтрока();
				
				// Общие реквизиты для всех документов.
				ТабОпер.День = Док.ДатаДок;
				ТабОпер.ДокументБУ = Док;
				ТабОпер.НаименованиеОперации = Док.Операция.Содержание;
				Если ДокВид = "ОтпускМатериаловНаСторону" Тогда
				    ТабОпер.Количество = Док.КоличествоОтпущено;
				Иначе
					ТабОпер.Количество = Док.Количество;
				КонецЕсли;
				ТабОпер.Сумма = (Док.Всего - Док.НДС - Док.НП)*Курс;
	 			ТабОпер.НомерПроводки = НомерПервойПроводки;
				
				// Определим вид объекта учета и вид дохода.
				Если ДокВид = "ВыполнениеЭтапаРабот" Тогда
					ТабОпер.Объект = Док.Работа;
					ТабОпер.ВидДохода = Перечисление.ВидыДоходов.РеализацияПродукции;
					
				ИначеЕсли ДокВид = "ОказаниеУслуг" Тогда
					ТабОпер.Объект = Док.Услуга;
					ТабОпер.ВидДохода = Перечисление.ВидыДоходов.РеализацияПродукции;
					
				ИначеЕсли ДокВид = "ОтпускМатериаловНаСторону" Тогда
					ТабОпер.Объект = Док.Материал;
					ТабОпер.ВидДохода = Перечисление.ВидыДоходов.РеализацияПрочегоИмущества;
					
				ИначеЕсли ДокВид = "РеализацияОтгруженнойПродукции" Тогда
					ТабОпер.Объект = Док.Товар;
				    Если Док.Товар.ТипНоменклатуры = Перечисление.ТипыНоменклатуры.Товар Тогда
				        ТабОпер.ВидДохода = Перечисление.ВидыДоходов.РеализацияТоваровРанееОтгруженных;
						
					Иначе
						ТабОпер.ВидДохода = Перечисление.ВидыДоходов.РеализацияПродукцииРанееОтгруженной;
				    КонецЕсли;
				
				Иначе // РасходнаяНакладная, ПродажаВРозницу
					ТабОпер.Объект = Док.Товар;
				    Если Док.Товар.ТипНоменклатуры = Перечисление.ТипыНоменклатуры.Товар Тогда
				        ТабОпер.ВидДохода = Перечисление.ВидыДоходов.РеализацияТоваров;
						
					Иначе
						ТабОпер.ВидДохода = Перечисление.ВидыДоходов.РеализацияПродукции;
				    КонецЕсли;
				КонецЕсли;
				
				// Определим условие выбытия, суммы и количество.
				Если ДокВид = "ПродажаВРозницу" Тогда
				    ТабОпер.УсловиеВыбытия = Перечисление.УсловияВыбытияИмущества.Другие;
	
				Иначе // другие документы создают дебиторскую задолженность
					ТабОпер.Контрагент = Док.Контрагент;
					ТабОпер.Договор = Док.Договор;
					ТабОпер.Задолженность = Док.Всего*Курс;
					ТабОпер.УсловиеВыбытия = Перечисление.УсловияВыбытияИмущества.СПоследующейОплатой;
					
					Если ДокВид = "ВыполнениеЭтапаРабот" Тогда
						Если Док.ЗавершитьРаботы = 2 Тогда // выполнение этапа оплаченных работ
							ТабОпер.Задолженность = 0;
					        ТабОпер.УсловиеВыбытия = Перечисление.УсловияВыбытияИмущества.Другие;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			
		Иначе // выбытие ОС и НМА
			Если ДокВид = "ПередачаОС" Тогда
				Док.ВыбратьСтроки();
				Пока Док.ПолучитьСтроку() = 1 Цикл
					ТабОпер.НоваяСтрока();
					ТабОпер.День = Док.ДатаДок;
					ТабОпер.НомерПроводки = НомерПервойПроводки;
					ТабОпер.ДокументБУ= Док;
					ТабОпер.НаименованиеОперации = Док.Операция.Содержание;
					ТабОпер.Объект = Док.ОсновноеСредство;
					ТабОпер.Количество = 1;
					Если Док.ПричинаВыбытия = Перечисление.ПричиныВыбытияОС.БезвозмезднаяПередача Тогда
						ТабОпер.УсловиеВыбытия = Перечисление.УсловияВыбытияИмущества.Безвозмездно;
						
					ИначеЕсли Док.ПричинаВыбытия = Перечисление.ПричиныВыбытияОС.ВкладВУставныйКапитал Тогда
						ТабОпер.УсловиеВыбытия = Перечисление.УсловияВыбытияИмущества.Другие;
						
					ИначеЕсли Док.ПричинаВыбытия = Перечисление.ПричиныВыбытияОС.ПередачаПоДоговоруПростогоТоварищества Тогда
						ТабОпер.УсловиеВыбытия = Перечисление.УсловияВыбытияИмущества.Другие;
						
					ИначеЕсли Док.ПричинаВыбытия = Перечисление.ПричиныВыбытияОС.ПередачаВДоверительноеУправление Тогда
						ТабОпер.УсловиеВыбытия = Перечисление.УсловияВыбытияИмущества.Другие;
						
					Иначе // продажа
						ТабОпер.Контрагент = Док.Контрагент;
						ТабОпер.Договор = Док.Договор;
						ТабОпер.УсловиеВыбытия = Перечисление.УсловияВыбытияИмущества.СПоследующейОплатой;
						ТабОпер.Сумма = (Док.Стоимость - Док.НДС - Док.НП)*Курс;
						ТабОпер.Задолженность = Док.Стоимость*Курс;
						ТабОпер.ВидДохода = Перечисление.ВидыДоходов.РеализацияОсновныхСредств;
					КонецЕсли;
				КонецЦикла;
				
			ИначеЕсли (ДокВид = "СписаниеОС") или (ДокВид = "ПрекращениеСрокаДействияНМА") Тогда
				ТабОпер.НоваяСтрока();
				ТабОпер.День = Док.ДатаДок;
				ТабОпер.НомерПроводки = НомерПервойПроводки;
				ТабОпер.ДокументБУ= Док;
				ТабОпер.НаименованиеОперации = Док.Операция.Содержание;
				Если ДокВид = "СписаниеОС" Тогда
					ТабОпер.Объект = Док.ОС;
				
				Иначе
					ТабОпер.Объект = Док.НМА;
				КонецЕсли;
				ТабОпер.Количество = 1;
				ТабОпер.УсловиеВыбытия = Перечисление.УсловияВыбытияИмущества.СписаниеИмущества;
				
			ИначеЕсли ДокВид = "ПередачаНМА" Тогда
				ТабОпер.НоваяСтрока();
				ТабОпер.День = Док.ДатаДок;
				ТабОпер.НомерПроводки = НомерПервойПроводки;
				ТабОпер.ДокументБУ= Док;
				ТабОпер.НаименованиеОперации = Док.Операция.Содержание;
				ТабОпер.Контрагент = Док.Контрагент;
				ТабОпер.Договор = Док.Договор;
				ТабОпер.УсловиеВыбытия = Перечисление.УсловияВыбытияИмущества.СПоследующейОплатой;
				ТабОпер.Объект = Док.НМА;
				ТабОпер.Количество = 1;
				ТабОпер.Сумма = (Док.Стоимость - Док.НДС - Док.НП)*Курс;
				ТабОпер.НДС = Док.НДС*Курс;
				ТабОпер.Задолженность = Док.Стоимость*Курс;
				ТабОпер.ВидДохода = Перечисление.ВидыДоходов.РеализацияНематериальныхАктивов;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	// Добавление операций, введенных вручную.
	Запрос = СоздатьОбъект("Запрос");
	ТекстЗапроса = 
	"//{{ЗАПРОС(РучныеОперацииПриобретенияИмущества)
	|Период с НачДата по КонДата;
	|ОбрабатыватьДокументы Проведенные;
	|Док = Документ.Выписка.ТекущийДокумент,
	|      Документ.Операция.ТекущийДокумент;
	|Группировка Док;
	|"//}}ЗАПРОС
	;
	Если Запрос.Выполнить(ТекстЗапроса) = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Пока Запрос.Группировка("Док") = 1 Цикл
		Опер.НайтиОперацию(Запрос.Док);
		Если Опер.ВключитьПроводки() = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Опер.ВыбратьПроводки();
		Пока Опер.ПолучитьПроводку() = 1 Цикл
			Если ЭтоПроводкаВыбытияИмущества(Опер) = 0 Тогда
			    Продолжить;
			КонецЕсли;
			
			ТабОпер.НоваяСтрока();
			ТабОпер.День = Опер.ДатаОперации;
			ТабОпер.НаименованиеОперации = Опер.Содержание;
			ТабОпер.ДокументБУ = Опер.Документ;
			ТабОпер.НомерПроводки = Опер.НомерПроводки();
			
			СчетКт = Опер.Кредит.Счет.Код;
			СчетДт = Опер.Дебет.Счет.Код;
			
			Если НайтиСчетВСтроке("90.1.1", СчетКт) = 1 Тогда // реализация по основному виду деятельности
				Если Опер.Кредит.ВидыНоменклатуры.ТипНоменклатуры = Перечисление.ТипыНоменклатуры.Товар Тогда
				    ТабОпер.ВидДохода =  Перечисление.ВидыДоходов.РеализацияТоваров;
					
				Иначе
					ТабОпер.ВидДохода =  Перечисление.ВидыДоходов.РеализацияПродукции;
				КонецЕсли;
				
				Если НайтиСчетВСтроке("58.3", СчетДт) = 1 Тогда // по договору займа
					ТабОпер.Контрагент = Опер.Дебет.Контрагенты;
					ТабОпер.Договор = Опер.Дебет.Договоры;
					ТабОпер.Задолженность = Опер.Сумма;
					ТабОпер.УсловиеВыбытия = Перечисление.УсловияВыбытияИмущества.ПоДоговоруЗайма;
					
				ИначеЕсли НайтиСчетВСтроке("46", СчетДт) = 1 Тогда // выполнение этапа оплаченных работ
					ТабОпер.Контрагент = Опер.Дебет.Контрагенты;
					ТабОпер.Договор = Опер.Дебет.Договоры;
					ТабОпер.УсловиеВыбытия = Перечисление.УсловияВыбытияИмущества.Другие;
					ТабОпер.Объект = Опер.Дебет.Номенклатура;
					
				ИначеЕсли Опер.Дебет.Счет.ВидСубконто(1) = ВидыСубконто.Контрагенты Тогда // торговля оптовая
					ТабОпер.Контрагент = Опер.Дебет.Контрагенты;
					ТабОпер.Договор = Опер.Дебет.Договоры;
					ТабОпер.Задолженность = Опер.Сумма;
					ТабОпер.УсловиеВыбытия = Перечисление.УсловияВыбытияИмущества.СПоследующейОплатой;
					
				Иначе // торговля розничная
					ТабОпер.УсловиеВыбытия = Перечисление.УсловияВыбытияИмущества.Другие;
				КонецЕсли;
				
			ИначеЕсли НайтиСчетВСтроке("91.1", СчетКт) = 1 Тогда // реализация ОС, НМА или прочих активов
				ТабОпер.УсловиеВыбытия = Перечисление.УсловияВыбытияИмущества.СПоследующейОплатой;
				ТабОпер.Задолженность = Опер.Сумма;
				ВидПрочихДоходов = Опер.Кредит.ПрочиеДоходыИРасходы.ВидПрочихДоходовИРасходов;
				
				Если ВидПрочихДоходов = Перечисление.ВидыПрочихДоходовИРасходов.ВыбытиеОС Тогда
				    ТабОпер.ВидДохода = Перечисление.ВидыДоходов.РеализацияОсновныхСредств;
					
				ИначеЕсли ВидПрочихДоходов = Перечисление.ВидыПрочихДоходовИРасходов.ВыбытиеНМА Тогда
				    ТабОпер.ВидДохода = Перечисление.ВидыДоходов.РеализацияНематериальныхАктивов;
					
				ИначеЕсли ВидПрочихДоходов = Перечисление.ВидыПрочихДоходовИРасходов.ВыбытиеАктивов Тогда
				    ТабОпер.ВидДохода = Перечисление.ВидыДоходов.РеализацияПрочегоИмущества;
				КонецЕсли;
				
				Если Опер.Дебет.Счет.ВидСубконто(1) = ВидыСубконто.Контрагенты Тогда
					ТабОпер.Контрагент = Опер.Дебет.Контрагенты;
					ТабОпер.Договор = Опер.Дебет.Договоры;
					
					Если НайтиСчетВСтроке("58,62", СчетДт) = 1 Тогда
						Если ВидПрочихДоходов = Перечисление.ВидыПрочихДоходовИРасходов.УступкиПраваТребования Тогда
							Если Опер.Дебет.Договоры.ДатаПогашенияОбязательства >= ТабОпер.День Тогда
								ТабОпер.ВидДохода = Перечисление.ВидыДоходов.РеализацияУступкиПраваТребованияДоНаступленияСрокаПлатежа;
							Иначе
								ТабОпер.ВидДохода = Перечисление.ВидыДоходов.РеализацияУступкиПраваТребованияПослеНаступленияСрокаПлатежа;
							КонецЕсли;
						КонецЕсли;
						Если НайтиСчетВСтроке("58.3", СчетДт) = 1 Тогда // по договору займа
							ТабОпер.УсловиеВыбытия = Перечисление.УсловияВыбытияИмущества.ПоДоговоруЗайма;
						КонецЕсли;	
						
					Иначе
						ТабОпер.ВидДохода = Перечисление.ВидыДоходов.РеализацияПрочихИмущественныхПрав;
					КонецЕсли;
					
					
				КонецЕсли;
				
			ИначеЕсли НайтиСчетВСтроке("10", СчетКт) = 1 Тогда // возврат материалов поставщику
				ТабОпер.УсловиеВыбытия = Перечисление.УсловияВыбытияИмущества.ВозвратМатериаловПоставщику;
				ТабОпер.Контрагент = Опер.Дебет.Контрагенты;
				ТабОпер.Договор = Опер.Дебет.Договоры;
				ТабОпер.Объект = Опер.Кредит.Материалы;
				ТабОпер.Количество = Опер.Количество;
				ТабОпер.Сумма = Опер.Сумма;
				
			ИначеЕсли НайтиСчетВСтроке("41", СчетКт) = 1 Тогда // возврат товаров поставщику
				ТабОпер.УсловиеВыбытия = Перечисление.УсловияВыбытияИмущества.ВозвратТоваровПоставщику;
				ТабОпер.Контрагент = Опер.Дебет.Контрагенты;
				ТабОпер.Договор = Опер.Дебет.Договоры;
				ТабОпер.Объект = Опер.Кредит.Номенклатура;
				ТабОпер.Количество = Опер.Количество;
				ТабОпер.Сумма = Опер.Сумма;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	// Получим итоги для определения сумм авансов.
	ТаблицаАвансов = СоздатьОбъект("ТаблицаЗначений");
	ТаблицаАвансов.НоваяКолонка("Документ");
	ТаблицаАвансов.НоваяКолонка("НомерПроводки");
	ТаблицаАвансов.НоваяКолонка("Аванс", "Число");
	
	СписокДоговоров = СоздатьОбъект("СписокЗначений");
	ТабОпер.Выгрузить(СписокДоговоров,,, "Договор");
	
	БухИт = СоздатьОбъект("БухгалтерскиеИтоги");
	БухИт.ИспользоватьСубконто(ВидыСубконто.Договоры, СписокДоговоров);
	БухИт.ВключатьСубсчета(0);
	БухИт.ВыполнитьЗапрос(НачДата, КонДата, "62,76.5,76.6,76.55",,,, "Проводка", "С");
	БухИт.ВыбратьПериоды(, 1);
	Пока БухИт.ПолучитьПериод() = 1 Цикл
		Если БухИт.ПолучитьСубконто(ВидыСубконто.Договоры,, БухИт.Операция.Дебет.Договоры) = 1 Тогда
			ТаблицаАвансов.НоваяСтрока();
			ТаблицаАвансов.Документ = БухИт.Операция.Документ;
			ТаблицаАвансов.НомерПроводки = БухИт.Операция.НомерПроводки();
			ТаблицаАвансов.Аванс = БухИт.СНК();
		КонецЕсли;
	КонецЦикла;
	
	НомСтроки = 1;
	ТекДокумент = ПолучитьПустоеЗначение("Документ");
	
	Пока НомСтроки <= ТабОпер.КоличествоСтрок() Цикл 
		ТабОпер.ПолучитьСтрокуПоНомеру(НомСтроки);
		Если ТабОпер.УсловиеВыбытия <> Перечисление.УсловияВыбытияИмущества.СПоследующейОплатой Тогда
		    НомСтроки = НомСтроки + 1;
			Продолжить;
		КонецЕсли;
		
		// Имеющийся на момент операции аванс распределяем между проводками операции.
		Если (ТекДокумент <> ТабОпер.ДокументБУ) или (ТабОпер.ДокументБУ.Вид() = "Операция") Тогда
			ТекДокумент = ТабОпер.ДокументБУ;
			ОстатокАванса = 0;
			НомСтрокиАванса = 0;
			Если ТаблицаАвансов.НайтиЗначение(ТекДокумент, НомСтрокиАванса, "Документ") = 1 Тогда
				Для а = НомСтрокиАванса по ТаблицаАвансов. КоличествоСтрок() Цикл
					ТаблицаАвансов.ПолучитьСтрокуПоНомеру(а);
					Если ТаблицаАвансов.НомерПроводки = ТабОпер.НомерПроводки Тогда
					    ОстатокАванса = ТаблицаАвансов.Аванс;
						Прервать;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
		
		СуммаЗачтенногоАванса = Мин(ТабОпер.Задолженность, ОстатокАванса);
		ТабОпер.Задолженность = ТабОпер.Задолженность - СуммаЗачтенногоАванса;
		ОстатокАванса = ОстатокАванса - СуммаЗачтенногоАванса;
		
		Если СуммаЗачтенногоАванса = 0 Тогда // аванса не было совсем
		ИначеЕсли ТабОпер.Задолженность = 0 Тогда // зачли всю задолженность
			ТабОпер.Задолженность = СуммаЗачтенногоАванса;
			ТабОпер.УсловиеВыбытия = Перечисление.УсловияВыбытияИмущества.ВСчетРанееПолученныхАвансов;
			
		Иначе // зачли задолженность частично
			// Сохраним текущую строку ТабОпер в отдельной таблице.
			ТекСтрока = СоздатьОбъект("ТаблицаЗначений");
			ТабОпер.Выгрузить(ТекСтрока, НомСтроки, НомСтроки);
			
			// Распределим суммы пропорционально зачтенному авансу.
			К = ТекСтрока.Задолженность / (ТекСтрока.Задолженность + СуммаЗачтенногоАванса);
			ТабОпер.Количество = К * ТабОпер.Количество;
			ТабОпер.Сумма = К * ТабОпер.Сумма;
			
			// В ТекСтрока установим числа "под зачет аванса".
			ТекСтрока.ПолучитьСтрокуПоНомеру(1);
			ТекСтрока.Задолженность = СуммаЗачтенногоАванса;
			ТекСтрока.Количество = ТекСтрока.Количество - ТабОпер.Количество;
			ТекСтрока.Сумма = ТекСтрока.Сумма - ТабОпер.Сумма;
			ТекСтрока.УсловиеВыбытия = Перечисление.УсловияВыбытияИмущества.ВСчетРанееПолученныхАвансов;
			
			// Добавим новую строку в ТабОпер и скопируем в нее сохраненной в ТекСтрока строки.
			НомСтроки = НомСтроки + 1;
			ТабОпер.НоваяСтрока(НомСтроки);
			Для НомКолонки = 1 по ТекСтрока.КоличествоКолонок() Цикл
				ЗначениеКолонки = ТекСтрока.ПолучитьЗначение(1, НомКолонки);
				ТабОпер.УстановитьЗначение(НомСтроки, НомКолонки, ЗначениеКолонки);
			КонецЦикла;
		КонецЕсли;
		НомСтроки = НомСтроки + 1;
	КонецЦикла;
	
	// Для условия "В счет авансов" укажем суммы зачтенного НДС.
	БИ76_АВ = СоздатьОбъект("БухгалтерскиеИтоги");
	БИ76_АВ.ИспользоватьСубконто(ВидыСубконто.СчетаФактурыВыданные);
	БИ76_АВ.ВыполнитьЗапрос(НачДата, КонДата, "76.АВ",,,, "День");
	
	НомСтроки = 0;
	ТаблицаНДС_АВ = СоздатьОбъект("ТаблицаЗначений");
	ТаблицаНДС_АВ.НоваяКолонка("Договор");
	ТаблицаНДС_АВ.НоваяКолонка("НДС");
	
	Для ДеньПериода = НачДата по КонДата Цикл
		ПерваяСтрокаДня = 0; // первая строка ТабОпер, соответствующая текущему дню периода
		Если ТабОпер.НайтиЗначение(ДеньПериода, ПерваяСтрокаДня, "День") = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		ТаблицаНДС_АВ.УдалитьСтроки();
		
		Если БИ76_АВ.ПолучитьПериод(, ДеньПериода) = 1 Тогда
			БИ76_АВ.ВыбратьСубконто();	
			Пока БИ76_АВ.ПолучитьСубконто() = 1 Цикл
				Если БИ76_АВ.Субконто().Выбран() = 1 Тогда
					ТаблицаНДС_АВ.НоваяСтрока();
					ТаблицаНДС_АВ.Договор = БИ76_АВ.Субконто().Договор;
					ТаблицаНДС_АВ.НДС = БИ76_АВ.КО(); // отберем зачтенный НДС
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		Если ТаблицаНДС_АВ.КоличествоСтрок() = 0 Тогда
		    Продолжить; //  не было НДС, нечего распределять
		КонецЕсли;
		
		ТаблицаНДС_АВ.Свернуть("Договор", "НДС");
		ТаблицаНДС_АВ.НоваяКолонка("Задолженность", "Число"); // сумма аванса, полученного по договору
		ТаблицаНДС_АВ.НоваяКолонка("РаспределенныйНДС", "Число");
		ТаблицаНДС_АВ.НоваяКолонка("НомерСтрокиДокумента", "Число"); // номер стр. с таким же договором
		
		// По сформированным ранее строкам документа дополним таблицу НДС с авансов
		// сведениями о суммах собственно авансов.
		Для СтрокаДня = ПерваяСтрокаДня по ТабОпер.КоличествоСтрок() Цикл
			ТабОпер.ПолучитьСтрокуПоНомеру(СтрокаДня);
			Если ТабОпер.День <> ДеньПериода Тогда
			    Прервать;
			КонецЕсли;
			Если ТабОпер.УсловиеВыбытия = Перечисление.УсловияВыбытияИмущества.ВСчетРанееПолученныхАвансов Тогда
				НомСтроки = 0;
				Если ТаблицаНДС_АВ.НайтиЗначение(ТабОпер.Договор, НомСтроки, "Договор") = 1 Тогда
					ТаблицаНДС_АВ.ПолучитьСтрокуПоНомеру(НомСтроки);
					ТаблицаНДС_АВ.Задолженность = ТаблицаНДС_АВ.Задолженность + ТабОпер.Задолженность;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		// Заполним таблицу документа суммами НДС.
		Для СтрокаДня = ПерваяСтрокаДня по ТабОпер.КоличествоСтрок() Цикл
			ТабОпер.ПолучитьСтрокуПоНомеру(СтрокаДня);
			Если ТабОпер.День <> ДеньПериода Тогда
			    Прервать;
			КонецЕсли;
		    Если ТабОпер.УсловиеВыбытия = Перечисление.УсловияВыбытияИмущества.ВСчетРанееПолученныхАвансов Тогда
				НомСтроки = 0;
				Если ТаблицаНДС_АВ.НайтиЗначение(ТабОпер.Договор, НомСтроки, "Договор") = 1 Тогда
					ТаблицаНДС_АВ.ПолучитьСтрокуПоНомеру(НомСтроки);
					ТабОпер.НДС = ТаблицаНДС_АВ.НДС * (ТабОпер.Задолженность / ТаблицаНДС_АВ.Задолженность);
					ТаблицаНДС_АВ.РаспределенныйНДС = ТаблицаНДС_АВ.РаспределенныйНДС + ТабОпер.НДС;
					ТаблицаНДС_АВ.НомерСтрокиДокумента = СтрокаДня;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		// Заполним документ нераспределенным НДС.
		ТаблицаНДС_АВ.ВыбратьСтроки();
		Пока ТаблицаНДС_АВ.ПолучитьСтроку() = 1 Цикл
		    Если (ТаблицаНДС_АВ.НДС <> ТаблицаНДС_АВ.РаспределенныйНДС) и (ТаблицаНДС_АВ.НомерСтрокиДокумента > 0) Тогда
			    ТабОпер.ПолучитьСтрокуПоНомеру(ТаблицаНДС_АВ.НомерСтрокиДокумента);
	        	ТабОпер.НДС = ТабОпер.НДС + ТаблицаНДС_АВ.НДС - ТаблицаНДС_АВ.РаспределенныйНДС;
		    КонецЕсли;
		КонецЦикла;
	КонецЦикла;
		
КонецПроцедуры // ПолучитьОперацииВыбытияИмущества()

///////////////////////////////////////////////////////////////////////////////                                                                            
// ФОРМИРОВАНИЕ ТАБЛИЦЫ РАСХОДОВ НА ОПЛАТУ ТРУДА
//

//*****************************************************************************
// ПолучитьРасходыНаОплатуТруда()
//
// Описание:
//  Формирует таблицу расходов на оплату труда за период,
// указанный в полях ввода НачДата и КонДата.
//
Процедура ПолучитьРасходыНаОплатуТруда()
	
	ТабОпер = СоздатьОбъект("ТаблицаЗначений");
	ТабОпер.НоваяКолонка("День","Дата");
	ТабОпер.НоваяКолонка("ДокументБУ","Документ");
	ТабОпер.НоваяКолонка("НомерПроводки","Число");
	ТабОпер.НоваяКолонка("Сотрудник","Справочник");
	ТабОпер.НоваяКолонка("ВидПерсонала","Строка");
	ТабОпер.НоваяКолонка("ВидНачисления");
	ТабОпер.НоваяКолонка("ВидРасхода");
	ТабОпер.НоваяКолонка("Объект","Справочник");
	ТабОпер.НоваяКолонка("Сумма","Число");   
	
	Если Константа.МетодРаспределенияКосвенныхРасходовПоВидамДеятельности.Получить(КонДата) = Перечисление.МетодыРаспределенияКосвенныхРасходовПоВидамДеятельности.ЗаМесяц Тогда
		СписокКоэффициентов = глРасчитатьКоэффициентыРаспределения(НачДата,КонДата);
	КонецЕсли;
		
	Фильтр = "*,70";

	Опер = СоздатьОбъект("Операция");  
	Опер.ВыбратьОперацииСПроводками(НачМесяца(НачДата), КонМесяца(КонДата), Фильтр,,,);
	Пока Опер.ПолучитьПроводку() = 1 Цикл
		СчетДтКод = СокрЛП(Опер.Дебет.Счет.Код);
		Если НайтиСчетВСтроке("00,44.1.2,69,84", СчетДтКод) = 1 Тогда
			Продолжить;
			
		ИначеЕсли НайтиСчетВСтроке("97", СчетДтКод) = 1 Тогда
			Если Опер.Дебет.РасходыБудущихПериодов.ВидРасхода.Выбран() = 0 Тогда
			    Продолжить;
			КонецЕсли;
			
		ИначеЕсли Опер.Документ.Вид() = "НачислениеЗП" Тогда
			Если Опер.Документ.ВариантРаспределенияРасходов = 2 Тогда
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		
		Дебет = Опер.Дебет;
		
		Если Константа.МетодРаспределенияКосвенныхРасходовПоВидамДеятельности.Получить(КонДата) = Перечисление.МетодыРаспределенияКосвенныхРасходовПоВидамДеятельности.ЗаМесяц Тогда
			К = СписокКоэффициентов.Получить(Строка(КонМесяца(Опер.ДатаОперации)));
		КонецЕсли;
				
		Если Опер.Дебет.Счет = СчетПоКоду("44.1.1") Тогда // не облагаем ЕНВД
			Сумма = Опер.Сумма;
				
		ИначеЕсли Опер.Документ.Вид() = "НачислениеЗП" Тогда
			Если Опер.Документ.ВариантРаспределенияРасходов = 1 Тогда
				Сумма = Опер.Сумма;
				
			ИначеЕсли Опер.Документ.ВариантРаспределенияРасходов = 2 Тогда
				Продолжить;
					
			ИначеЕсли Опер.Документ.ВариантРаспределенияРасходов = 0 Тогда
				Сумма = К * Опер.Сумма;
			КонецЕсли;
			
		ИначеЕсли Опер.Дебет.Счет = СчетПоКоду("20") Тогда
			Если Опер.Дебет.ВидыНоменклатуры.Выбран() = 1 Тогда
				Если Опер.Дебет.ВидыНоменклатуры.ТипНоменклатуры = Перечисление.ТипыНоменклатуры.УслугаЕНВД Тогда
			        Продолжить;
					
				Иначе
					Сумма = Опер.Сумма;
				КонецЕсли;
				
			Иначе
				Сумма = Опер.Сумма;
			КонецЕсли;
			
		Иначе 
			Если Константа.МетодРаспределенияКосвенныхРасходовПоВидамДеятельности.Получить(КонДата) = Перечисление.МетодыРаспределенияКосвенныхРасходовПоВидамДеятельности.ЗаМесяц Тогда
				// распределение: облагается ЕНВД / не облагается ЕНВД
				Сумма = К * Опер.Сумма;
			Иначе
				//не распределяем      
				Сумма = Опер.Сумма;
			КонецЕсли;
		КонецЕсли;
		
		Если Сумма = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		ТабОпер.НоваяСтрока();
		ТабОпер.День = КонМесяца(Опер.ДатаОперации);
		ТабОпер.ДокументБУ = Опер.Документ;
		ТабОпер.Сотрудник = Опер.Кредит.Сотрудники;
		ТабОпер.ВидПерсонала = "-";
		Подразделение = ТабОпер.Сотрудник.Подразделение.Получить(ТабОпер.День);
		Если (Подразделение.Административное = 1) Тогда
			ТабОпер.ВидПерсонала = "+";
		КонецЕсли;
		ТабОпер.ВидНачисления = Перечисление.ВидыНачисленийПоОплатеТруда.пп1ст255;
		ТабОпер.Сумма = Сумма;
		
		Если СчетДтКод = "20" Тогда 
			Если Дебет.СтатьиЗатратНаПроизводство.ВидРасходовДляНалоговогоУчета = Перечисление.ГруппыВидыРасходов.ОплатаТруда Тогда
				ФлагПрямогоРасхода = глОпределитьПрямыеРасходыПроизводстваБезАналитики(Дебет.СтатьиЗатратНаПроизводство, СчетПоКоду("70"), ПереченьСтатейЗатрат); 
				Если ФлагПрямогоРасхода = 1 Тогда  
					ТабОпер.ВидРасхода = Перечисление.ВидыРасходов.ПрямыеРасходы; 
					ТабОпер.Объект = Дебет.ВидыНоменклатуры;
					
				Иначе
					ТабОпер.ВидРасхода = Перечисление.ВидыРасходов.КосвенныеРасходы;
				КонецЕсли;
				
			ИначеЕсли Дебет.СтатьиЗатратНаПроизводство.ВидРасходовДляНалоговогоУчета = Перечисление.ГруппыВидыРасходов.НеПринимаемые Тогда
				ТабОпер.ВидРасхода = Перечисление.ВидыРасходов.НеПринимаемые;
			КонецЕсли;
	
		ИначеЕсли СчетДтКод = "25" Тогда
			Если Дебет.СтатьиОбщепроизводственныхЗатрат.ВидРасходовДляНалоговогоУчета = Перечисление.ГруппыВидыРасходов.ОплатаТруда Тогда
				ТабОпер.ВидРасхода = Перечисление.ВидыРасходов.КосвенныеРасходы;
				
			ИначеЕсли Дебет.СтатьиОбщепроизводственныхЗатрат.ВидРасходовДляНалоговогоУчета = Перечисление.ГруппыВидыРасходов.НеПринимаемые Тогда
				ТабОпер.ВидРасхода = Перечисление.ВидыРасходов.НеПринимаемые;
			КонецЕсли;
	
		ИначеЕсли СчетДтКод = "26" Тогда
			Если Дебет.СтатьиОбщехозяйственныхЗатрат.ВидРасходовДляНалоговогоУчета = Перечисление.ГруппыВидыРасходов.ОплатаТруда Тогда
				ТабОпер.ВидРасхода = Перечисление.ВидыРасходов.КосвенныеРасходы;
			
			ИначеЕсли Дебет.СтатьиОбщехозяйственныхЗатрат.ВидРасходовДляНалоговогоУчета = Перечисление.ГруппыВидыРасходов.НеПринимаемые Тогда
				ТабОпер.ВидРасхода = Перечисление.ВидыРасходов.НеПринимаемые;
			КонецЕсли;
	
		ИначеЕсли НайтиСчетВСтроке("44", СчетДтКод) = 1 Тогда
			Если Дебет.Субконто(1).ВидРасходовДляНалоговогоУчета = Перечисление.ГруппыВидыРасходов.ОплатаТруда Тогда
				ТабОпер.ВидРасхода = Перечисление.ВидыРасходов.КосвенныеРасходы;
				
			ИначеЕсли Дебет.Субконто(1).ВидРасходовДляНалоговогоУчета = Перечисление.ГруппыВидыРасходов.НеПринимаемые Тогда
				ТабОпер.ВидРасхода = Перечисление.ВидыРасходов.НеПринимаемые;
			КонецЕсли;
	
		ИначеЕсли НайтиСчетВСтроке("10,15.1", СчетДтКод) = 1 Тогда 
			ТабОпер.ВидРасхода = Перечисление.ВидыРасходов.ПриобретениеМатериалов;
			ТабОпер.Объект = Дебет.Материалы;
		
		ИначеЕсли НайтиСчетВСтроке("41,15.2", СчетДтКод) = 1 Тогда 
			ТабОпер.ВидРасхода = Перечисление.ВидыРасходов.ПриобретениеТоваров;
			ТабОпер.Объект = Дебет.Номенклатура;

		ИначеЕсли НайтиСчетВСтроке("08.4", СчетДтКод) = 1 Тогда 
			ТабОпер.ВидРасхода = Перечисление.ВидыРасходов.ПриобретениеОсновныхСредств;
			ТабОпер.Объект = Дебет.ОбъектыСтроительства;
			
		ИначеЕсли НайтиСчетВСтроке("08.1,08.2,08.3", СчетДтКод) = 1 Тогда 
			ТабОпер.ВидРасхода = Перечисление.ВидыРасходов.СтроительствоОсновныхСредств;
			ТабОпер.Объект = Дебет.ОбъектыСтроительства;

		ИначеЕсли СчетДтКод = "08.5" Тогда 
			ТабОпер.ВидРасхода = Перечисление.ВидыРасходов.ПриобретениеНематериальныхАктивов;
			ТабОпер.Объект = Дебет.ОбъектыСтроительства;

		ИначеЕсли СчетДтКод = "91.2" Тогда
			Если Дебет.ПрочиеДоходыИРасходы.ВидПрочихДоходовИРасходов = Перечисление.ВидыПрочихДоходовИРасходов.НеПринимаемыеДляЦелейНалогообложения Тогда
				ТабОпер.ВидРасхода = Перечисление.ВидыРасходов.НеПринимаемые;
				
			Иначе
				ТабОпер.ВидРасхода = Перечисление.ВидыРасходов.ВнереализационныеРасходы;	
			КонецЕсли;
			
		ИначеЕсли СчетДтКод = "97" Тогда
			ТабОпер.ВидРасхода = Перечисление.ВидыРасходов.РасходыБудущихПериодов;
			ТабОпер.Объект = Дебет.РасходыБудущихПериодов;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры // ПолучитьРасходыНаОплатуТруда()


///////////////////////////////////////////////////////////////////////////////                                                                            
// ФОРМИРОВАНИЕ ТАБЛИЦЫ ОПЕРАЦИЙ НАЧИСЛЕНИЯ НАЛОГОВ, ВКЛЮЧАЕМЫХ В СОСТАВ РАСХОДОВ
//

//*****************************************************************************
// РаспределитьПоТаблице(День, ВидНалога, Сумма, БазаРаспределения, ИмяСуммы, НеОтноситьНаПрямыеРасходы = 0, ЗаписатьНалоговуюБазу = 1)
//
// Параметры:
//  День                      - Дата. Последний день текущего месяца.
//  ВидНалога    			  - Срока. Код справочника "Налоги и отчисления".
//  СуммаНалога				  - Число. Распределяемая сумма налога
//  СуммаНалога				  - Число. Распределяемая сумма налоговой базы.
//  БазаРаспределения         - ТаблицаЗначений.
//  ИмяСуммы				  - Строка. Имя колонки в базе распределения (наименование колонки с базой налога).
//  НеОтноситьНаПрямыеРасходы - Число.  1 - признак того, что все распределенное на прямые расходы относить на косвенные.
//
// Описание:
//  Распределяет базу или сумму налога по видам расхода пропорционально
// начисленной зарплате или базе налога, отнесенной к этим видам расхода.
//
Процедура РаспределитьПоТаблице(День, ВидНалога, СуммаНалога, СуммаНалоговойБазы, БазаРаспределения, ИмяСуммы, НеОтноситьНаПрямыеРасходы = 0)
	
	НомСтроки = 0;
	РаспределеноНалога = 0;
	РаспределеноНалоговойБазы = 0;
	ВсегоПоБазе = БазаРаспределения.Итог(ИмяСуммы);
	
	Если (ВсегоПоБазе = 0) или ((СуммаНалога = 0) и (СуммаНалоговойБазы = 0)) Тогда
	    Возврат;
	КонецЕсли;
	
	БазаРаспределения.ВыбратьСтроки();
	Пока БазаРаспределения.ПолучитьСтроку() = 1 Цикл
		СуммаПоБазе = БазаРаспределения.ПолучитьЗначение(БазаРаспределения.НомерСтроки, ИмяСуммы);
		Если СуммаПоБазе <> 0 Тогда
		    ТабОпер.НоваяСтрока();
			ТабОпер.День = День;
			ТабОпер.ДокументБУ = ПолучитьПустоеЗначение("Документ");
			ТабОпер.ВидРасхода = БазаРаспределения.ВидРасхода;
			ТабОпер.Объект = БазаРаспределения.Объект;
			
			Налог = глПолучитьНалог(ВидНалога);
			ТабОпер.ВидНалога = Налог;
			Если БазаРаспределения.ВидРасхода <> Перечисление.ВидыРасходов.НеПринимаемые Тогда
				
				Если БазаРаспределения.ВидРасхода = Перечисление.ВидыРасходов.РасходыБудущихПериодов Тогда
				    // для расходов будущих периодов ставку берем из статьи расходов
					Если ПустоеЗначение(БазаРаспределения.Объект) = 0 Тогда
						ТабОпер.Ставка = БазаРаспределения.Объект.ПолучитьАтрибут("Ставка"+ВидНалога);
					КонецЕсли;
					
				ИначеЕсли Найти(глФондыЕСН, ВидНалога) = 0 Тогда
					ТабОпер.Ставка = Налог.Ставка.Получить(День);
					
				ИначеЕсли (Константа.ИспользоватьРегрессивнуюШкалу.Получить(День) = Да) и 
					      (СокрЛ(Налог.Код) <> "ПФР_страх") и (СокрЛ(Налог.Код) <> "ПФР_нак") и (СокрЛ(Налог.Код) <> "ЕСН_ФБ") Тогда
						  	
			    ИначеЕсли (СокрЛ(Налог.Код) = "ПФР_страх") или (СокрЛ(Налог.Код) = "ПФР_нак") или (СокрЛ(Налог.Код) = "ЕСН_ФБ") Тогда
						  	
				Иначе
					Ставка = СоздатьОбъект("Справочник.СтавкиНалогов");
					Ставка.ИспользоватьВладельца(Налог);
					Ставка.ПорядокКодов();
					Ставка.ВыбратьЭлементы();
					Если Ставка.ПолучитьЭлемент() = 1 Тогда
					    ТабОпер.Ставка = Ставка.Процент.Получить(День);
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
			Если НеОтноситьНаПрямыеРасходы = 1 Тогда
				Если БазаРаспределения.ВидРасхода = Перечисление.ВидыРасходов.ПрямыеРасходы Тогда
					ТабОпер.ВидРасхода = Перечисление.ВидыРасходов.КосвенныеРасходы;
					ТабОпер.Объект = "";
				КонецЕсли;
			КонецЕсли;
			
			РаспределеннаяСумма = СуммаНалога*СуммаПоБазе/ВсегоПоБазе;
			РаспределеноНалога = РаспределеноНалога + РаспределеннаяСумма;
			ТабОпер.СуммаНалога = РаспределеннаяСумма;
			
			РаспределеннаяСумма = СуммаНалоговойБазы*СуммаПоБазе/ВсегоПоБазе;
			РаспределеноНалоговойБазы = РаспределеноНалоговойБазы + РаспределеннаяСумма;
			ТабОпер.БазаНалога =  РаспределеннаяСумма;
		КонецЕсли;
	КонецЦикла;
	
	Если (РаспределеноНалога <> СуммаНалога) и (РаспределеноНалога <> 0) Тогда
		ТабОпер.СуммаНалога = ТабОпер.СуммаНалога + СуммаНалога - РаспределеноНалога;
	КонецЕсли;
	
	Если (РаспределеноНалоговойБазы <> СуммаНалоговойБазы) и (РаспределеноНалоговойБазы <> 0) Тогда
		ТабОпер.БазаНалога = ТабОпер.БазаНалога + СуммаНалоговойБазы - РаспределеноНалоговойБазы;
	КонецЕсли;
	
КонецПроцедуры // РаспределитьПоТаблице()

//*****************************************************************************
// ДобавитьНалогВДокумент()
//
// Описание:
//  Добавляет строки таблицы ТабОпер отдельно для суммы, распределяемых
// пропорционально расчетной базе, и отдельно для сумм, не относящихся к 
// прямым расходам.
//
Процедура ДобавитьНалогВДокумент(День, ВидНалога, СуммаНалога, СуммаНалога_косв, БазаРаспределения, ИмяСуммы)
	
	Если (СуммаНалога + СуммаНалога_косв) = 0 Тогда
		Возврат;
	КонецЕсли;
	
	СуммаНалоговойБазыВсего = БазаРаспределения.Итог(ИмяСуммы);
	
	ДоляКосвенныхРасходов = СуммаНалога / (СуммаНалога + СуммаНалога_косв);
	СуммаНалоговойБазы = ДоляКосвенныхРасходов * СуммаНалоговойБазыВсего;
	СуммаНалоговойБазы_косв = СуммаНалоговойБазыВсего - СуммаНалоговойБазы;
	
	РаспределитьПоТаблице(День, ВидНалога, СуммаНалога, СуммаНалоговойБазы, БазаРаспределения, ИмяСуммы);
	РаспределитьПоТаблице(День, ВидНалога, СуммаНалога_косв, СуммаНалоговойБазы_косв, БазаРаспределения, ИмяСуммы, 1);
	
КонецПроцедуры // ДобавитьНалогВДокумент()

//*****************************************************************************
// ПолучитьОперацииНачисленияНалогов()
//
// Описание:
//  Формирует таблицу операций начисления налогов за период,
// указанный в полях ввода НачДата и КонДата.
//
Процедура ПолучитьОперацииНачисленияНалогов()
	
	// Таблица для передачи данных в документ налогового учета.
	ТабОпер = СоздатьОбъект("ТаблицаЗначений");
	ТабОпер.НоваяКолонка("День","Дата");
	ТабОпер.НоваяКолонка("ДокументБУ","Документ");
	ТабОпер.НоваяКолонка("ВидНалога");
	ТабОпер.НоваяКолонка("Ставка","Число");
	ТабОпер.НоваяКолонка("СрокУплаты","Дата");
	ТабОпер.НоваяКолонка("СуммаНалога", "Число");
	ТабОпер.НоваяКолонка("БазаНалога", "Число");
	ТабОпер.НоваяКолонка("ВидРасхода");
	ТабОпер.НоваяКолонка("Объект","Справочник");
	
	// Таблица распределения налоговой базы по видам расходов
	Начисления = СоздатьОбъект("ТаблицаЗначений");
	Начисления.НоваяКолонка("ВидНачисления");
	Начисления.НоваяКолонка("ВидРасхода");
	Начисления.НоваяКолонка("Объект", "Справочник");
    Начисления.НоваяКолонка("ФСС", "Число");
    Начисления.НоваяКолонка("ЕСН_ФБ", "Число");
    Начисления.НоваяКолонка("ПФР", "Число");
    Начисления.НоваяКолонка("ФОМС", "Число");
	
	// Виды начислений, облагаемые ФСС от НС и ПЗ
	НачисленияФСС_НС = СоздатьОбъект("ТаблицаЗначений");
	НачисленияФСС_НС.НоваяКолонка("ВидНачисления");
	НачисленияФСС_НС.НоваяКолонка("ВидРасхода");
	НачисленияФСС_НС.НоваяКолонка("Объект", "Справочник");
    НачисленияФСС_НС.НоваяКолонка("ФСС_НС", "Число");
	
	// Получение данных о расходах на оплату труда, принимаемых к учету.
	ТабЗарплата = СоздатьОбъект("ТаблицаЗначений");
	ТабЗарплата.НоваяКолонка("Сотрудник");
	ТабЗарплата.НоваяКолонка("ВидНачисления");
	ТабЗарплата.НоваяКолонка("ВидРасхода");
	ТабЗарплата.НоваяКолонка("Объект", "Справочник");
	ТабЗарплата.НоваяКолонка("Сумма", "Число");
	
	ВидыНачисленийОпер = СоздатьОбъект("ТаблицаЗначений");
	ВидыНачисленийОпер.НоваяКолонка("ВидНачисления"); 
	ВидыНачисленийОпер.НоваяКолонка("Сумма", "Число"); 
	
	
	Сч70 = СчетПоКоду("70");
		
	Опер = СоздатьОбъект("Операция");
	Док = СоздатьОбъект("Документ.РасходыНаОплатуТруда");
	Док.ВыбратьДокументы(НачМесяца(НачДата), КонМесяца(КонДата));
	Пока Док.ПолучитьДокумент() = 1 Цикл
	    Если Док.Проведен() = 1 Тогда
	        Док.ВыбратьСтроки();
			Пока Док.ПолучитьСтроку() = 1 Цикл
				Если ПустоеЗначение(Док.ДокументБУ) = 1 Тогда
					ТабЗарплата.НоваяСтрока();
					ТабЗарплата.Сотрудник = Док.Сотрудник;
					ТабЗарплата.ВидНачисления = ПолучитьПустоеЗначение("Справочник.ВидыНачислений");
					ТабЗарплата.ВидРасхода = Док.ВидРасхода;
					ТабЗарплата.Объект = Док.Объект;
					ТабЗарплата.Сумма = Док.Сумма;
					
				ИначеЕсли Док.ДокументБУ.Вид() = "НачислениеЗП" Тогда
					ТабЗарплата.НоваяСтрока();
					ТабЗарплата.Сотрудник = Док.Сотрудник;
					ТабЗарплата.ВидНачисления = Док.ДокументБУ.ВидНачисления;
					ТабЗарплата.ВидРасхода = Док.ВидРасхода;
					ТабЗарплата.Объект = Док.Объект;
					ТабЗарплата.Сумма = Док.Сумма;
					
				Иначе // в документе указана операция, введенная вручную
					Если Опер.НайтиОперацию(Док.ДокументБУ) = 1 Тогда
						ВидыНачисленийОпер.УдалитьСтроки();
					    Опер.ВыбратьПроводки();
						Пока Опер.ПолучитьПроводку() = 1 Цикл
							Если Опер.Кредит.Счет = Сч70 Тогда
							    Если (Док.Сотрудник = Опер.Кредит.Сотрудники) и (Опер.Сумма <> 0) Тогда
								    ВидыНачисленийОпер.НоваяСтрока();
									ВидыНачисленийОпер.ВидНачисления = Опер.Кредит.ВидыНачисленийВыплат;
									ВидыНачисленийОпер.Сумма = Опер.Сумма;
								КонецЕсли;
							КонецЕсли;
						КонецЦикла;
					КонецЕсли;
					
					ВидыНачисленийОпер.Свернуть("ВидНачисления", "Сумма");
					СуммаНачислений = ВидыНачисленийОпер.Итог("Сумма");
					Распределено = 0;
					ВидыНачисленийОпер.ВыбратьСтроки();
					Пока ВидыНачисленийОпер.ПолучитьСтроку() = 1 Цикл
					    ТабЗарплата.НоваяСтрока();
						ТабЗарплата.Сотрудник = Док.Сотрудник;
						ТабЗарплата.ВидНачисления = ВидыНачисленийОпер.ВидНачисления;
						ТабЗарплата.ВидРасхода = Док.ВидРасхода;
						ТабЗарплата.Объект = Док.Объект;
						
						ТекСумма = Окр(Док.Сумма * ВидыНачисленийОпер.Сумма / СуммаНачислений, 2, 1);
						Распределено = Распределено + ТекСумма;
						ТабЗарплата.Сумма = ТекСумма;
					КонецЦикла;
					
					Если (Распределено <> 0) и (ТабЗарплата.КоличествоСтрок() > 0) Тогда
						ТабЗарплата.Сумма = ТабЗарплата.Сумма + Док.Сумма - Распределено;
						
					ИначеЕсли Док.Сумма <> 0 Тогда
					    ТабЗарплата.НоваяСтрока();
						ТабЗарплата.Сотрудник = Док.Сотрудник;
						ТабЗарплата.ВидНачисления = ПолучитьПустоеЗначение("Справочник.ВидыНачислений");
						ТабЗарплата.ВидРасхода = Док.ВидРасхода;
						ТабЗарплата.Объект = Док.Объект;
						ТабЗарплата.Сумма = Док.Сумма;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
	    КонецЕсли;
	КонецЦикла;
	
	СписокКолонок = СоздатьОбъект("СписокЗначений");
	ТабЗарплата.Свернуть("Сотрудник,ВидНачисления,ВидРасхода,Объект", "Сумма");
	
	// Формирование запроса к бухгалтерским итогам и заполнение ТабОпер.
	БухИтЕСН = СоздатьОбъект("БухгалтерскиеИтоги");
	БухИтЕСН.ВключатьСубсчета(, -1);
	БухИтЕСН.ИспользоватьСубконто();
	БухИтЕСН.ИспользоватьСубконто();
	БухИтЕСН.ИспользоватьКорСубконто();
	БухИтЕСН.ИспользоватьКорСубконто();
	БухИтЕСН.ВыполнитьЗапрос(НачМесяца(НачДата), КонМесяца(КонДата), "69.1,69.2.1,69.2.2,69.2.3,69.3.1,69.3.2,69.11",,, 2, "Месяц");
	
	БухИтДФЛ = СоздатьОбъект("БухгалтерскиеИтоги");
	БухИтДФЛ.ИспользоватьСубконто(ВидыСубконто.Сотрудники);
	БухИтДФЛ.ИспользоватьСубконто(ВидыСубконто.ВидыНачисленийВыплат);
	БухИтДФЛ.ВыполнитьЗапрос(НачМесяца(НачДата), КонМесяца(КонДата), "ДФЛ.1,ДФЛ.2",,, 2, "Месяц");
	
	НалогиСФОТ = СоздатьОбъект("Справочник.НалогиИОтчисления"); 
	
	БухИтЕСН.ВыбратьПериоды(1);
	Пока БухИтЕСН.ПолучитьПериод() = 1 Цикл
		
		// Алгоритм для ЕСН_ФБ и взносов в ПФР:
		БухИтЕСН.ВыбратьСубконто(2);
		Пока БухИтЕСН.ПолучитьСубконто(2) = 1 Цикл
		
			// 1. Определим суммы ЕСН, начисленного на доходы работника.
			ФСС = 0;
			ЕСН_ФБ = 0;
			ПФР_страх = 0;
			ПФР_нак = 0;
			ФФОМС = 0;
			ТФОМС = 0;
			
			ФСС_косв = 0;
			ЕСН_ФБ_косв = 0;
			ПФР_страх_косв = 0;
			ПФР_нак_косв = 0;
			ФФОМС_косв = 0;
			ТФОМС_косв = 0;
			
			ПФР_страх_вычет = 0;
			ПФР_нак_вычет = 0; 
	        			
			Если БухИтЕСН.ПолучитьСчет(, СчетПоКоду("69.1")) = 1 Тогда
				Если БухИтЕСН.ПолучитьСубконто(1,, Перечисление.ВидыПлатежейВФонды.Взносы) = 1 Тогда  
					Если НалогиСФОТ.НайтиПоКоду("ФСС") = 1 Тогда
						Если НалогиСФОТ.ПорядокОтраженияВНУ.Получить(КонДата) = Перечисление.ПорядокОтраженияНалоговНУ.ПропорциональноРасчетнойБазе Тогда
							ФСС = БухИтЕСН.КО();
						Иначе
							ФСС_косв = БухИтЕСН.КО();
						КонецЕсли;	
					Иначе
						ФСС_косв = БухИтЕСН.КО();
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
			Если БухИтЕСН.ПолучитьСчет(, СчетПоКоду("69.2.2")) = 1 Тогда
				Если БухИтЕСН.ПолучитьСубконто(1,, Перечисление.ВидыПлатежейВБюджет.Налог) = 1 Тогда
					
					БухИтЕСН.ВыбратьКорСчета();
					Пока БухИтЕСН.ПолучитьКорСчет() = 1 Цикл
						Если БухИтЕСН.КорСчет = СчетПоКоду("69.2.1") Тогда
							ПФР_страх_вычет = ПФР_страх_вычет + БухИтЕСН.КорКО();
						КонецЕсли;
					КонецЦикла;
					
					// Будем распределять только тот ПФР, который относится к расходам (вычет - это всегда непринимаемые расходы)
					Если НалогиСФОТ.НайтиПоКоду("ПФР_страх") = 1 Тогда
						Если НалогиСФОТ.ПорядокОтраженияВНУ.Получить(КонДата) = Перечисление.ПорядокОтраженияНалоговНУ.ПропорциональноРасчетнойБазе Тогда
							ПФР_страх = БухИтЕСН.КО() - ПФР_страх_вычет; 
						Иначе
							ПФР_страх_косв = БухИтЕСН.КО() - ПФР_страх_вычет; 
						КонецЕсли; 
					Иначе
						ПФР_страх_косв = БухИтЕСН.КО() - ПФР_страх_вычет; 
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
			Если БухИтЕСН.ПолучитьСчет(, СчетПоКоду("69.2.3")) = 1 Тогда
				Если БухИтЕСН.ПолучитьСубконто(1,, Перечисление.ВидыПлатежейВБюджет.Налог) = 1 Тогда
					
					БухИтЕСН.ВыбратьКорСчета();
					Пока БухИтЕСН.ПолучитьКорСчет() = 1 Цикл
						Если БухИтЕСН.КорСчет = СчетПоКоду("69.2.1") Тогда
							ПФР_нак_вычет = ПФР_нак_вычет + БухИтЕСН.КорКО();
						КонецЕсли;
					КонецЦикла;
					
					// Будем распределять только тот ПФР, который относится к расходам (вычет - это всегда непринимаемые расходы)
					Если НалогиСФОТ.НайтиПоКоду("ПФР_нак") = 1 Тогда
						Если НалогиСФОТ.ПорядокОтраженияВНУ.Получить(КонДата) = Перечисление.ПорядокОтраженияНалоговНУ.ПропорциональноРасчетнойБазе Тогда
							ПФР_нак = БухИтЕСН.КО() - ПФР_страх_вычет; 
						Иначе
							ПФР_нак_косв =  БухИтЕСН.КО() - ПФР_нак_вычет; 
						КонецЕсли; 
					Иначе
						ПФР_нак_косв = БухИтЕСН.КО() - ПФР_нак_вычет; 
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
			
			Если БухИтЕСН.ПолучитьСчет(, СчетПоКоду("69.2.1")) = 1 Тогда
				Если БухИтЕСН.ПолучитьСубконто(1,, Перечисление.ВидыПлатежейВБюджет.Налог) = 1 Тогда
					// Если ПорядокИсчисленияЕСН = 0 или 2, то ЕСН распределяется пропорционально начислениям со счета ДФЛ.1 (не ЕНВД)
					// иначе тот ЕСН, который относится к начислениям со счета ДФЛ.2 надо относить к непринимаемым расходам.
					// В этом случае будем распределять сумму ЕСН, уменьшенную на сумму вычетов, а сумма вычетов будет приниматься
					// к учету дваэды: один раз относится к непринимаемым расходам, как взн. в ПФР, а другой раз распределяется 
					// по обеим базам ЕСН (фактически по базе ПФР), как будто это ЕСН в ФБ.
					Если Константа.ПорядокИсчисленияЕСН.Получить(БухИтЕСН.КонДата) = 1 Тогда
						Вычеты = ПФР_страх_вычет + ПФР_нак_вычет;
						
					Иначе
						Вычеты = 0;
					КонецЕсли;
					
					Если НалогиСФОТ.НайтиПоКоду("ЕСН_ФБ") = 1 Тогда
						Если НалогиСФОТ.ПорядокОтраженияВНУ.Получить(КонДата) = Перечисление.ПорядокОтраженияНалоговНУ.ПропорциональноРасчетнойБазе Тогда
							ЕСН_ФБ = БухИтЕСН.КО() -  Вычеты;
						Иначе   
							ЕСН_ФБ_косв = БухИтЕСН.КО() -  Вычеты;
						КонецЕсли;
					Иначе   
						ЕСН_ФБ_косв = БухИтЕСН.КО() -  Вычеты;
					КонецЕсли;
					
				КонецЕсли;
			КонецЕсли;
			
			Если БухИтЕСН.ПолучитьСчет(, СчетПоКоду("69.3.1")) = 1 Тогда
				Если БухИтЕСН.ПолучитьСубконто(1,, Перечисление.ВидыПлатежейВБюджет.Налог) = 1 Тогда
					Если НалогиСФОТ.НайтиПоКоду("ФФОМС") = 1 Тогда
						Если НалогиСФОТ.ПорядокОтраженияВНУ.Получить(КонДата) = Перечисление.ПорядокОтраженияНалоговНУ.ПропорциональноРасчетнойБазе Тогда
							ФФОМС = БухИтЕСН.КО();    
						Иначе
							ФФОМС_косв = БухИтЕСН.КО();	
						КонецЕсли;
					Иначе
						ФФОМС_косв = БухИтЕСН.КО();	
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
			Если БухИтЕСН.ПолучитьСчет(, СчетПоКоду("69.3.2")) = 1 Тогда
				Если БухИтЕСН.ПолучитьСубконто(1,, Перечисление.ВидыПлатежейВБюджет.Налог) = 1 Тогда
					Если НалогиСФОТ.НайтиПоКоду("ТФОМС") = 1 Тогда
						Если НалогиСФОТ.ПорядокОтраженияВНУ.Получить(КонДата) = Перечисление.ПорядокОтраженияНалоговНУ.ПропорциональноРасчетнойБазе Тогда
							ТФОМС = БухИтЕСН.КО();    
						Иначе
							ТФОМС_косв = БухИтЕСН.КО();	
						КонецЕсли;
					Иначе
						ТФОМС_косв = БухИтЕСН.КО();	
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
			// 2. Определим сумму доходов работника в разрезе видов начислений
			// и видов расхода для целей налогового учета. Выплаты работникам
			// берем со счета ДФЛ.1, затем по виду начисления ищем строки документа
			// "Расходы на оплату труда" и получаем виды расходов для НУ.
			// Выплаты, отраженные на ДФЛ.2 сразу относим к "Не принимаемым".
			
			Сотрудник = БухИтЕСН.Субконто(2);
			СписокКолонок.Установить("Сотрудник", Сотрудник);
			
			Начисления.УдалитьСтроки();
			
			Если БухИтДФЛ.ПолучитьПериод(, БухИтЕСН.НачДата) = 1 Тогда
				Если БухИтДФЛ.ПолучитьСубконто(ВидыСубконто.Сотрудники,, Сотрудник) = 1 Тогда
					Если БухИтДФЛ.ПолучитьСчет(, СчетПоКоду("ДФЛ.1")) = 1 Тогда
						БухИтДФЛ.ВыбратьСубконто(ВидыСубконто.ВидыНачисленийВыплат);
						Пока БухИтДФЛ.ПолучитьСубконто(ВидыСубконто.ВидыНачисленийВыплат) = 1 Цикл
						    ВидНачисления = БухИтДФЛ.Субконто(ВидыСубконто.ВидыНачисленийВыплат);
							КО_ДФЛ = БухИтДФЛ.КО();
							
							СписокКолонок.Установить("ВидНачисления", ВидНачисления);
							ТабЗарплатаСотр = ОтобратьСтрокиТаблицы(ТабЗарплата, СписокКолонок);
							СуммаНачислений = ТабЗарплатаСотр.Итог("Сумма");
							
							Если ВидНачисления.ЕСН_ФСС = 1 Тогда
								Распределено = 0;
								
								ТабЗарплатаСотр.ВыбратьСтроки();
								Пока ТабЗарплатаСотр.ПолучитьСтроку() = 1 Цикл
								    Начисления.НоваяСтрока();
									Начисления.ВидНачисления = ВидНачисления;
									Начисления.ВидРасхода = ТабЗарплатаСотр.ВидРасхода;
									Начисления.Объект = ТабЗарплатаСотр.Объект;
									
									ТекСумма = Окр(КО_ДФЛ * ТабЗарплатаСотр.Сумма / СуммаНачислений, 2, 1);
									Распределено = Распределено + ТекСумма;
									Начисления.ФСС = ТекСумма;
								КонецЦикла;
								
								Если (Распределено <> 0) и (ТабЗарплатаСотр.КоличествоСтрок() > 0) Тогда
									Начисления.ФСС = Начисления.ФСС + КО_ДФЛ - Распределено;
								КонецЕсли;
							КонецЕсли;
							
							Если ВидНачисления.ЕСН_ФБ = 1 Тогда
							    Распределено = 0;
								
								ТабЗарплатаСотр.ВыбратьСтроки();
								Пока ТабЗарплатаСотр.ПолучитьСтроку() = 1 Цикл
								    Начисления.НоваяСтрока();
									Начисления.ВидНачисления = ВидНачисления;
									Начисления.ВидРасхода = ТабЗарплатаСотр.ВидРасхода;
									Начисления.Объект = ТабЗарплатаСотр.Объект;
									
									ТекСумма = Окр(КО_ДФЛ * ТабЗарплатаСотр.Сумма / СуммаНачислений, 2, 1);
									Распределено = Распределено + ТекСумма;
									Начисления.ЕСН_ФБ = ТекСумма;
								КонецЦикла;
								
								Если (Распределено <> 0) и (ТабЗарплатаСотр.КоличествоСтрок() > 0) Тогда
									Начисления.ЕСН_ФБ = Начисления.ЕСН_ФБ + КО_ДФЛ - Распределено;
								КонецЕсли;
							КонецЕсли;
							
							Если ВидНачисления.ПФР = 1 Тогда
							    Распределено = 0;
								
								ТабЗарплатаСотр.ВыбратьСтроки();
								Пока ТабЗарплатаСотр.ПолучитьСтроку() = 1 Цикл
								    Начисления.НоваяСтрока();
									Начисления.ВидНачисления = ВидНачисления;
									Начисления.ВидРасхода = ТабЗарплатаСотр.ВидРасхода;
									Начисления.Объект = ТабЗарплатаСотр.Объект;
									
									ТекСумма = Окр(КО_ДФЛ * ТабЗарплатаСотр.Сумма / СуммаНачислений, 2, 1);
									Распределено = Распределено + ТекСумма;
									Начисления.ПФР = ТекСумма;
								КонецЦикла;
								
								Если (Распределено <> 0) и (ТабЗарплатаСотр.КоличествоСтрок() > 0) Тогда
									Начисления.ПФР = Начисления.ПФР + КО_ДФЛ - Распределено;
								КонецЕсли;
							КонецЕсли;
							
							Если ВидНачисления.ЕСН_ФОМС = 1 Тогда
							    Распределено = 0;
								
								ТабЗарплатаСотр.ВыбратьСтроки();
								Пока ТабЗарплатаСотр.ПолучитьСтроку() = 1 Цикл
								    Начисления.НоваяСтрока();
									Начисления.ВидНачисления = ВидНачисления;
									Начисления.ВидРасхода = ТабЗарплатаСотр.ВидРасхода;
									Начисления.Объект = ТабЗарплатаСотр.Объект;
									
									ТекСумма = Окр(КО_ДФЛ * ТабЗарплатаСотр.Сумма / СуммаНачислений, 2, 1);
									Распределено = Распределено + ТекСумма;
									Начисления.ФОМС = ТекСумма;
								КонецЦикла;
								
								Если (Распределено <> 0) и (ТабЗарплатаСотр.КоличествоСтрок() > 0) Тогда
									Начисления.ФОМС = Начисления.ФОМС + КО_ДФЛ - Распределено;
								КонецЕсли;
							КонецЕсли;
							
							Если ВидНачисления.ФСС_НС = 1 Тогда
								Распределено = 0;
								ОблагаетсяФСС_НС = ?(Сотрудник.Инвалид.Получить(БухИтДФЛ.КонДата) = 1, 0.6, 1) * КО_ДФЛ;
								
								ТабЗарплатаСотр.ВыбратьСтроки();
								Пока ТабЗарплатаСотр.ПолучитьСтроку() = 1 Цикл
								    НачисленияФСС_НС.НоваяСтрока();
									НачисленияФСС_НС.ВидНачисления = ВидНачисления;
									НачисленияФСС_НС.ВидРасхода = ТабЗарплатаСотр.ВидРасхода;
									НачисленияФСС_НС.Объект = ТабЗарплатаСотр.Объект;
									
									ТекСумма = Окр(ОблагаетсяФСС_НС * ТабЗарплатаСотр.Сумма / СуммаНачислений, 2, 1);
									Распределено = Распределено + ТекСумма;
									НачисленияФСС_НС.ФСС_НС = ТекСумма;
								КонецЦикла;
								
								Если (Распределено <> 0) и (ТабЗарплатаСотр.КоличествоСтрок() > 0) Тогда
									НачисленияФСС_НС.ФСС_НС = НачисленияФСС_НС.ФСС_НС + ОблагаетсяФСС_НС - Распределено;
								КонецЕсли;
							КонецЕсли;
						КонецЦикла;
					КонецЕсли;
					
					Если БухИтДФЛ.ПолучитьСчет(, СчетПоКоду("ДФЛ.2")) = 1 Тогда
						БухИтДФЛ.ВыбратьСубконто(ВидыСубконто.ВидыНачисленийВыплат);
						Пока БухИтДФЛ.ПолучитьСубконто(ВидыСубконто.ВидыНачисленийВыплат) = 1 Цикл
						    ВидНачисления = БухИтДФЛ.Субконто(ВидыСубконто.ВидыНачисленийВыплат);
							КО_ДФЛ = БухИтДФЛ.КО();
							
							Если ВидНачисления.ПФР = 1 Тогда
								Начисления.НоваяСтрока();
								Начисления.ВидНачисления = ВидНачисления;
								Начисления.ВидРасхода = Перечисление.ВидыРасходов.НеПринимаемые;
								Начисления.ПФР = КО_ДФЛ;
							КонецЕсли;
							
							Если ВидНачисления.ФСС_НС = 1 Тогда
								НачисленияФСС_НС.НоваяСтрока();
								НачисленияФСС_НС.ВидНачисления = ВидНачисления;
								НачисленияФСС_НС.ВидРасхода = Перечисление.ВидыРасходов.НеПринимаемые;
								НачисленияФСС_НС.ФСС_НС = ?(Сотрудник.Инвалид.Получить(БухИтДФЛ.КонДата) = 1, 0.6, 1) * КО_ДФЛ;
							КонецЕсли;
							
						КонецЦикла;
					КонецЕсли;
					
					Начисления.Свернуть("ВидНачисления,ВидРасхода,Объект", "ФСС,ЕСН_ФБ,ПФР,ФОМС");
			    КонецЕсли;
			КонецЕсли;
			
			// 3. Суммы налогов просто распределяем по таблице начислений:
		    ДобавитьНалогВДокумент(БухИтЕСН.КонДата, "ФФОМС", ФФОМС, ФФОМС_косв, Начисления, "ФОМС");
			ДобавитьНалогВДокумент(БухИтЕСН.КонДата, "ТФОМС", ТФОМС, ТФОМС_косв, Начисления, "ФОМС");
			ДобавитьНалогВДокумент(БухИтЕСН.КонДата, "ФСС", ФСС, ФСС_косв, Начисления, "ФСС");
			ДобавитьНалогВДокумент(БухИтЕСН.КонДата, "ЕСН_ФБ", ЕСН_ФБ, ЕСН_ФБ_косв, Начисления, "ЕСН_ФБ");
			ДобавитьНалогВДокумент(БухИтЕСН.КонДата, "ПФР_страх", ПФР_страх, ПФР_страх_косв, Начисления, "ПФР");
			ДобавитьНалогВДокумент(БухИтЕСН.КонДата, "ПФР_нак", ПФР_нак, ПФР_нак_косв, Начисления, "ПФР");
			
			// Взносы, учтенные как вычет, принимаются к учету, как расходы на уплату ЕСН, но распределяются по базе ПФР
			// Базу ЕСН не включаем в ТабОпер, так как она уже была отражена раньше, при распределении суммы ЕСН_ФБ
			Если Константа.ПорядокИсчисленияЕСН.Получить(БухИтЕСН.КонДата) = 1 Тогда
			    РаспределитьПоТаблице(БухИтЕСН.КонДата, "ЕСН_ФБ", ПФР_страх_вычет, ?(ЕСН_ФБ = 0, Начисления.Итог("ПФР"), 0), Начисления, "ПФР");
				РаспределитьПоТаблице(БухИтЕСН.КонДата, "ЕСН_ФБ", ПФР_нак_вычет, 0, Начисления, "ПФР");
			КонецЕсли;
			
			// Взносы в ПФР, учтенные как вычет, принимаются к учету, как непринимаемые расходы по уплате взносов в ПФР
			Если ПФР_страх_вычет <> 0 Тогда
			    ТабОпер.НоваяСтрока();
				ТабОпер.День = БухИтЕСН.КонДата;
				ТабОпер.ДокументБУ = ПолучитьПустоеЗначение("Документ");
				ТабОпер.ВидНалога = глПолучитьНалог("ПФР_страх");
				ТабОпер.ВидРасхода = Перечисление.ВидыРасходов.НеПринимаемые;
				ТабОпер.БазаНалога = Начисления.Итог("ПФР");
				ТабОпер.СуммаНалога = ПФР_страх_вычет;
			КонецЕсли;
			
			Если ПФР_нак_вычет <> 0 Тогда
			    ТабОпер.НоваяСтрока();
				ТабОпер.День = БухИтЕСН.КонДата;
				ТабОпер.ДокументБУ = ПолучитьПустоеЗначение("Документ");
				ТабОпер.ВидНалога = глПолучитьНалог("ПФР_нак");
				ТабОпер.ВидРасхода = Перечисление.ВидыРасходов.НеПринимаемые;
				ТабОпер.БазаНалога = Начисления.Итог("ПФР");
				ТабОпер.СуммаНалога = ПФР_нак_вычет;
			КонецЕсли;
		КонецЦикла;
		
		// Принимаем к НУ взносы в ФСС от НС и ПЗ.
		ФСС_НС = 0;
		ФСС_НС_косв = 0;
		Если БухИтЕСН.ПолучитьСчет(, СчетПоКоду("69.11")) = 1 Тогда
			Если БухИтЕСН.ПолучитьСубконто(1,, Перечисление.ВидыПлатежейВФонды.Взносы) = 1 Тогда
				
				Если НалогиСФОТ.НайтиПоКоду("ФСС_НС") = 1 Тогда
					Если НалогиСФОТ.ПорядокОтраженияВНУ.Получить(КонДата) = Перечисление.ПорядокОтраженияНалоговНУ.ПропорциональноРасчетнойБазе Тогда
						ФСС_НС = БухИтЕСН.КО(); 
					Иначе
						ФСС_НС_косв = БухИтЕСН.КО();	
					КонецЕсли;
				Иначе
					ФСС_НС_косв = БухИтЕСН.КО();	
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;		
		НачисленияФСС_НС.Свернуть("ВидНачисления,ВидРасхода,Объект", "ФСС_НС");
		ДобавитьНалогВДокумент(БухИтЕСН.КонДата, "ФСС_НС", ФСС_НС, ФСС_НС_косв, НачисленияФСС_НС, "ФСС_НС");
	КонецЦикла;
	
	ТабОпер.Свернуть("День,ДокументБУ,ВидНалога,Ставка,СрокУплаты,ВидРасхода,Объект", "СуммаНалога,БазаНалога");
	ТабОпер.Сортировать("День,ВидНалога,ВидРасхода,Объект");
	
КонецПроцедуры // ПолучитьОперацииНачисленияНалогов()

///////////////////////////////////////////////////////////////////////////////                                                                            
// ФОРМИРОВАНИЕ ТАБЛИЦЫ ОПЕРАЦИЙ НАЧИСЛЕНИЯ ШТРАФНЫХ САНКЦИЙ
//

//*****************************************************************************
// ПолучитьОперацииНачисленияШтрафныхСанкций()
//
// Описание:
//  Формирует таблицу операций начисления штрафных санкций за период,
// указанный в полях ввода НачДата и КонДата.
//
Процедура ПолучитьОперацииНачисленияШтрафныхСанкций()
	
	ТабОпер = СоздатьОбъект("ТаблицаЗначений");
	ТабОпер.НоваяКолонка("День","Дата");
	ТабОпер.НоваяКолонка("ДокументБУ","Документ");
	ТабОпер.НоваяКолонка("Контрагент","Справочник");
	ТабОпер.НоваяКолонка("Договор","Справочник");
	ТабОпер.НоваяКолонка("ПризнакДоходаРасхода");
	ТабОпер.НоваяКолонка("НачалоПериода", "Дата");
	ТабОпер.НоваяКолонка("ОкончаниеПериода", "Дата");
	ТабОпер.НоваяКолонка("База","Число");
	ТабОпер.НоваяКолонка("Ставка","Число");
	ТабОпер.НоваяКолонка("ВременнаяЕдиницаРасчета", "Строка");
	ТабОпер.НоваяКолонка("Сумма","Число");
	ТабОпер.НоваяКолонка("НаименованиеОперации","Строка");
	
	Контр = СоздатьОбъект("Справочник.Контрагенты");
	Дог   = СоздатьОбъект("Справочник.Договоры");
	
	Контр.ВыбратьЭлементы();
	Пока Контр.ПолучитьЭлемент() = 1 Цикл
		Если Контр.ЭтоГруппа() = 1 Тогда
			Продолжить;
		КонецЕсли;

		Дог.ИспользоватьВладельца(Контр);
		Дог.ВыбратьЭлементы();
	
		Пока Дог.ПолучитьЭлемент() = 1 Цикл
			Если Дог.ЭтоГруппа() = 1 Тогда
				Продолжить;
			КонецЕсли;
			
		    ДатаДок = КонМесяца(НачДата);
			ДатаНач = НачМесяца(НачДата);
			
			Для Месяц = ДатаМесяц(НачДата) по ДатаМесяц(КонДата) Цикл
				ДатаДок = КонМесяца(ДатаДок);
				ДатаНач = НачМесяца(ДатаДок);
			
				Если ПустоеЗначение(Дог.ДатаНачалаНачисленияШтрафныхСанкций) = 0 Тогда
					Если (Дог.ДатаНачалаНачисленияШтрафныхСанкций <= ДатаДок) 
						и ((ПустоеЗначение(Дог.ДатаПрекращенияНачисленияШтрафныхСанкций) = 1) 
						или (Дог.ДатаПрекращенияНачисленияШтрафныхСанкций >= ДатаНач)) Тогда
							
					    ТабОпер.НоваяСтрока();
						ТабОпер.День 		= ДатаДок;
						ТабОпер.ДокументБУ 	= ПолучитьПустоеЗначение("Документ");
						ТабОпер.Контрагент  = Контр.ТекущийЭлемент();
						ТабОпер.Договор     = Дог.ТекущийЭлемент();
						Если ТабОпер.Договор.Выбран() = 1 Тогда
							Если ТабОпер.Договор.ДатаНачалаНачисленияШтрафныхСанкций < ДатаНач Тогда
								ТабОпер.НачалоПериода = ДатаНач;
							Иначе
								ТабОпер.НачалоПериода = ТабОпер.Договор.ДатаНачалаНачисленияШтрафныхСанкций;
							КонецЕсли;
							
							Если (ПустоеЗначение(ТабОпер.Договор.ДатаПрекращенияНачисленияШтрафныхСанкций) = 1) 
								или (ТабОпер.Договор.ДатаПрекращенияНачисленияШтрафныхСанкций > ДатаДок) Тогда
								ТабОпер.ОкончаниеПериода = ДатаДок;
							Иначе
								ТабОпер.ОкончаниеПериода = ТабОпер.Договор.ДатаПрекращенияНачисленияШтрафныхСанкций;
							КонецЕсли;
							
							ТабОпер.Ставка = ТабОпер.Договор.СтавкаШтрафныхСанкций;
						
						  	Если ПустоеЗначение(ТабОпер.Договор.ВременнаяЕдиницаРасчетаШтрафныхСанкций) = 1 Тогда
						  	    ТабОпер.ВременнаяЕдиницаРасчета = "День";
						  	Иначе
						  		ТабОпер.ВременнаяЕдиницаРасчета = ТабОпер.Договор.ВременнаяЕдиницаРасчетаШтрафныхСанкций;
						  	КонецЕсли;
						  КонецЕсли;	
					КонецЕсли;
				КонецЕсли;
				
				ДатаДок = ДобавитьМесяц(ДатаДок, 1);
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры // ПолучитьОперацииНачисленияШтрафныхСанкций()


///////////////////////////////////////////////////////////////////////////////                                                                            
// ФОРМИРОВАНИЕ ТАБЛИЦЫ КОРРЕКТИРОВКИ ЗАДОЛЖЕННОСТИ
//

//*****************************************************************************
// ПолучитьОперацииКорректировкиЗадолженности()
//
// Описание:
//  Формирует таблицу операций зачета задолженностей за период,
// указанный в полях ввода НачДата и КонДата.
//
Процедура ПолучитьОперацииКорректировкиЗадолженности()
	
	ТабОпер = СоздатьОбъект("ТаблицаЗначений");
	ТабОпер.НоваяКолонка("День","Дата");
	ТабОпер.НоваяКолонка("ДокументБУ","Документ");
	ТабОпер.НоваяКолонка("Контрагент","Справочник");
	ТабОпер.НоваяКолонка("Договор","Справочник");
	ТабОпер.НоваяКолонка("ПризнакЗадолженности");
	ТабОпер.НоваяКолонка("ПризнакОперации", "Число"); // 0 - комиссионна торг, 1 - аванс поставщ., 2 - аванс покуп.
	ТабОпер.НоваяКолонка("НомерПроводки", "Число"); // только для комиссионной торговли для раздел. на опл. и аванс
	ТабОпер.НоваяКолонка("ЗачетАвансаПоставщика", "Число");
	ТабОпер.НоваяКолонка("Сумма","Число");
	ТабОпер.НоваяКолонка("НДС","Число");
	ТабОпер.НоваяКолонка("НаименованиеОперации","Строка");
	
	Сч46 = СчетПоКоду("46");
	Сч60 = СчетПоКоду("60");
	Сч62 = СчетПоКоду("62");
	Сч76 = СчетПоКоду("76");
	
	// Найдем проводки по зачету аванса.
	Фильтр = "60.1,60.2; 60.6,60.7; 60.11,60.22; 62.2,62.1; 62.7,62.6; 62.22,62.11; 62.2,62.4; 62.7,62.8; 62.22,62.22; 62.4,76.5; 62.8,76.6; 62.44,76.55; 57,62; 62,46" ;
	Опер = СоздатьОбъект("Операция");
	Опер.ВыбратьОперацииСПроводками(НачДата, КонДата, Фильтр);
	Пока Опер.ПолучитьПроводку() = 1 Цикл
	    Если (Опер.Дебет.Договоры <> Опер.Кредит.Договоры)
		 или (НайтиСчетВСтроке("60,62,76", Опер.Дебет.Счет.Код) = 0)
		 или (НайтиСчетВСтроке("60,62,76", Опер.Кредит.Счет.Код) = 0) Тогда
			Если НайтиСчетВСтроке("60,62,76", Опер.Дебет.Счет.Код) = 1 Тогда
				ТабОпер.НоваяСтрока();
				ТабОпер.День = Опер.ДатаОперации;
				ТабОпер.ДокументБУ = Опер.Документ;
				ТабОпер.НаименованиеОперации = Опер.СодержаниеПроводки;
				ТабОпер.Контрагент = Опер.Дебет.Контрагенты;
				ТабОпер.Договор = Опер.Дебет.Договоры;
				Если Опер.Кредит.Счет = Сч46 Тогда
				    ТабОпер.ПризнакОперации = 0;
					ТабОпер.ПризнакЗадолженности = Перечисление.ПризнакЗадолженности.Дебиторская;
					ТабОпер.НомерПроводки = Опер.НомерПроводки();
					ТабОпер.Сумма = Опер.Сумма;
					
				ИначеЕсли Опер.Кредит.Счет.ПринадлежитГруппе(Сч62) = 1 Тогда
				    ТабОпер.ПризнакОперации = 2;
					ТабОпер.ПризнакЗадолженности = Перечисление.ПризнакЗадолженности.Кредиторская;
					ТабОпер.Сумма = -Опер.Сумма;
					
				ИначеЕсли Опер.Кредит.Счет.ПринадлежитГруппе(Сч60) = 1 Тогда
					ТабОпер.ПризнакОперации = 1;
					ТабОпер.ПризнакЗадолженности = Перечисление.ПризнакЗадолженности.Кредиторская;
					ТабОпер.Сумма = -Опер.Сумма;
				
				ИначеЕсли Опер.Кредит.Счет.ПринадлежитГруппе(Сч76) = 1 Тогда
					ТабОпер.ПризнакОперации = 0;
					ТабОпер.ПризнакЗадолженности = Перечисление.ПризнакЗадолженности.Дебиторская;
					ТабОпер.НомерПроводки = Опер.НомерПроводки();
					ТабОпер.Сумма = Опер.Сумма;
				КонецЕсли;
			КонецЕсли;
			
			Если НайтиСчетВСтроке("60,62,76", Опер.Кредит.Счет.Код) = 1 Тогда
				ТабОпер.НоваяСтрока();
				ТабОпер.День = Опер.ДатаОперации;
				ТабОпер.ДокументБУ = Опер.Документ;
				ТабОпер.НаименованиеОперации = Опер.СодержаниеПроводки;
				ТабОпер.Контрагент = Опер.Кредит.Контрагенты;
				ТабОпер.Договор = Опер.Кредит.Договоры;
				Если Опер.Кредит.Счет.ПринадлежитГруппе(Сч62) = 1 Тогда
				    ТабОпер.ПризнакОперации = 2;
					ТабОпер.ПризнакЗадолженности = Перечисление.ПризнакЗадолженности.Дебиторская;
					ТабОпер.Сумма = -Опер.Сумма;
					
				ИначеЕсли Опер.Кредит.Счет.ПринадлежитГруппе(Сч60) = 1 Тогда
					ТабОпер.ПризнакОперации = 1;
					ТабОпер.ПризнакЗадолженности = Перечисление.ПризнакЗадолженности.Дебиторская;
					ТабОпер.Сумма = -Опер.Сумма;
				
				ИначеЕсли Опер.Кредит.Счет.ПринадлежитГруппе(Сч76) = 1 Тогда
					ТабОпер.ПризнакОперации = 0;
					ТабОпер.ПризнакЗадолженности = Перечисление.ПризнакЗадолженности.Кредиторская;
					ТабОпер.НомерПроводки = Опер.НомерПроводки();
					ТабОпер.Сумма = Опер.Сумма;
				КонецЕсли;
			КонецЕсли;
	    КонецЕсли;
	КонецЦикла;
	ТабОпер.Свернуть("День,ДокументБУ,НомерПроводки,НаименованиеОперации,Контрагент,Договор,ПризнакЗадолженности,ПризнакОперации", "Сумма,НДС");
	
	БИ76_АВ = СоздатьОбъект("БухгалтерскиеИтоги");
	БИ76_АВ.ИспользоватьСубконто(ВидыСубконто.СчетаФактурыВыданные);
	БИ76_АВ.ВыполнитьЗапрос(НачДата, КонДата, "76.АВ",,,, "День");
	
	БИ19 = СоздатьОбъект("БухгалтерскиеИтоги");
	БИ19.ИспользоватьСубконто(ВидыСубконто.СчетаФактурыПолученные);
	БИ19.ВыполнитьЗапрос(НачДата, КонДата, "19",,,, "День");
	
	ТаблицаНДС = СоздатьОбъект("ТаблицаЗначений");
	ТаблицаНДС.НоваяКолонка("Договор");
	ТаблицаНДС.НоваяКолонка("НДС");
	
	// Сформируем таблицу НДС с авансов, восстановленного за день.
	БИ76_АВ.ВыбратьПериоды();
	Пока БИ76_АВ.ПолучитьПериод() = 1 Цикл
		ПерваяСтрокаДня = 0; // первая строка ТабОпер, соответствующая текущему дню периода
		Если ТабОпер.НайтиЗначение(БИ76_АВ.КонДата, ПерваяСтрокаДня, "День") = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		ТаблицаНДС.УдалитьСтроки();
		
		БИ76_АВ.ВыбратьСубконто();
		Пока БИ76_АВ.ПолучитьСубконто() = 1 Цикл
			Если БИ76_АВ.Субконто().Выбран() = 1 Тогда
				ТаблицаНДС.НоваяСтрока();
				ТаблицаНДС.Договор = БИ76_АВ.Субконто().Договор;
				ТаблицаНДС.НДС = БИ76_АВ.КО();
			КонецЕсли;
		КонецЦикла;
		ТаблицаНДС.Свернуть("Договор", "НДС");
		
		// Заполним НДС за данный период БИ.
		Для СтрокаДня = ПерваяСтрокаДня по ТабОпер.КоличествоСтрок() Цикл
			ТабОпер.ПолучитьСтрокуПоНомеру(СтрокаДня);
			Если ТабОпер.День <> БИ76_АВ.КонДата Тогда
			    Прервать;
			КонецЕсли;
			// Для зачетов авансов покупателей укажем сумму восстановленного НДС.
		    Если (ТабОпер.ПризнакОперации = 2) и (ТабОпер.ПризнакЗадолженности = Перечисление.ПризнакЗадолженности.Кредиторская) Тогда
				НомСтрокиТаблицыНДС = 0;
		        ТаблицаНДС.НайтиЗначение(ТабОпер.Договор, НомСтрокиТаблицыНДС, "Договор");
				Если НомСтрокиТаблицыНДС > 0 Тогда
					ТабОпер.НДС = ТаблицаНДС.ПолучитьЗначение(НомСтрокиТаблицыНДС, "НДС");
					ТабОпер.НДС = ?(ТабОпер.Сумма < 0, -1, 1) * ТабОпер.НДС;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	БИ19.ВыбратьПериоды();
	Пока БИ19.ПолучитьПериод() = 1 Цикл
		ПерваяСтрокаДня = 0; // первая строка ТабОпер, соответствующая текущему дню периода
		Если ТабОпер.НайтиЗначение(БИ19.КонДата, ПерваяСтрокаДня, "День") = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		ТаблицаНДС.УдалитьСтроки();
		
		БИ19.ВыбратьСубконто();
		Пока БИ19.ПолучитьСубконто() = 1 Цикл
			Если БИ19.Субконто().Выбран() = 1 Тогда
				ТаблицаНДС.НоваяСтрока();
				ТаблицаНДС.Договор = БИ19.Субконто().Договор;
				ТаблицаНДС.НДС = БИ19.КО();
			КонецЕсли;
		КонецЦикла;
		ТаблицаНДС.Свернуть("Договор", "НДС");
		
		// Заполним НДС за данный период БИ.
		Для СтрокаДня = ПерваяСтрокаДня по ТабОпер.КоличествоСтрок() Цикл
			ТабОпер.ПолучитьСтрокуПоНомеру(СтрокаДня);
			Если ТабОпер.День <> БИ19.КонДата Тогда
			    Прервать;
			КонецЕсли;
			// Для зачетов авансов поставщиков укажем сумму зачтенного НДС.
		    Если (ТабОпер.ПризнакОперации = 1) и (ТабОпер.ПризнакЗадолженности = Перечисление.ПризнакЗадолженности.Кредиторская) Тогда
				НомСтрокиТаблицыНДС = 0;
		        ТаблицаНДС.НайтиЗначение(ТабОпер.Договор, НомСтрокиТаблицыНДС, "Договор");
				Если НомСтрокиТаблицыНДС > 0 Тогда
					ТабОпер.НДС = ТаблицаНДС.ПолучитьЗначение(НомСтрокиТаблицыНДС, "НДС");
					ТабОпер.НДС = ?(ТабОпер.Сумма < 0, -1, 1) * ТабОпер.НДС;
				КонецЕсли;
		    КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	// Получим итоги для определения сумм авансов.
	// Авансы нужно знать для определения признака задолженности при продаже комиссионного товара.
	ТаблицаАвансов = СоздатьОбъект("ТаблицаЗначений");
	ТаблицаАвансов.НоваяКолонка("Документ");
	ТаблицаАвансов.НоваяКолонка("НомерПроводки");
	ТаблицаАвансов.НоваяКолонка("АвансПокупателя", "Число");
	ТаблицаАвансов.НоваяКолонка("АвансПоставщика", "Число");
	
	СписокДоговоров = СоздатьОбъект("СписокЗначений");
	ТабОпер.ВыбратьСтроки();
	Пока ТабОпер.ПолучитьСтроку() = 1 Цикл
	    Если ТабОпер.ПризнакОперации = 0 Тогда
	        СписокДоговоров.ДобавитьЗначение(ТабОпер.Договор);
	    КонецЕсли;
	КонецЦикла;
	
	БухИт = СоздатьОбъект("БухгалтерскиеИтоги");
	БухИт.ИспользоватьСубконто(ВидыСубконто.Договоры, СписокДоговоров);
	БухИт.ВключатьСубсчета(0);
	БухИт.ВыполнитьЗапрос(НачДата, КонДата, "60,62,76.5,76.6,76.55",,,, "Проводка", "С");
	БухИт.ВыбратьПериоды(, 1);
	Пока БухИт.ПолучитьПериод() = 1 Цикл
		Если БухИт.ПолучитьСубконто(ВидыСубконто.Договоры,, БухИт.Операция.Дебет.Договоры) = 1 Тогда
			ТаблицаАвансов.НоваяСтрока();
			ТаблицаАвансов.Документ = БухИт.Операция.Документ;
			ТаблицаАвансов.НомерПроводки = БухИт.Операция.НомерПроводки();
			ТаблицаАвансов.АвансПокупателя = БухИт.СНК();
			ТаблицаАвансов.АвансПоставщика = БухИт.СНД();
		КонецЕсли;
	КонецЦикла;
	
	НомСтроки = 1;
	Пока НомСтроки <= ТабОпер.КоличествоСтрок() Цикл 
		ТабОпер.ПолучитьСтрокуПоНомеру(НомСтроки);
		Если ТабОпер.ПризнакОперации <> 0 Тогда
		    НомСтроки = НомСтроки + 1;
			Продолжить;
		КонецЕсли;
		
		// Имеющийся на момент операции аванс распределяем между проводками операции.
		ОстатокАванса = 0;
		НомСтрокиАванса = 0;
		Если ТаблицаАвансов.НайтиЗначение(ТабОпер.ДокументБУ, НомСтрокиАванса, "Документ") = 1 Тогда
			Для а = НомСтрокиАванса по ТаблицаАвансов.КоличествоСтрок() Цикл
				ТаблицаАвансов.ПолучитьСтрокуПоНомеру(а);
				Если ТаблицаАвансов.НомерПроводки = ТабОпер.НомерПроводки Тогда
					Если ТабОпер.ПризнакЗадолженности = Перечисление.ПризнакЗадолженности.Дебиторская Тогда
					    ОстатокАванса = ТаблицаАвансов.АвансПокупателя;
						
					ИначеЕсли ТабОпер.ПризнакЗадолженности = Перечисление.ПризнакЗадолженности.Кредиторская Тогда
					    ОстатокАванса = ТаблицаАвансов.АвансПоставщика;
					КонецЕсли;
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		СуммаЗачтенногоАванса = Мин(ТабОпер.Сумма, ОстатокАванса);
		ТабОпер.Сумма = ТабОпер.Сумма - СуммаЗачтенногоАванса;
		
		Если СуммаЗачтенногоАванса = 0 Тогда // аванса не было совсем
		ИначеЕсли ТабОпер.Сумма = 0 Тогда // зачли всю задолженность
			ТабОпер.Сумма = -СуммаЗачтенногоАванса; // при зачете аванса задолженность уменьшается, поэтому "-"
			Если ТабОпер.ПризнакЗадолженности = Перечисление.ПризнакЗадолженности.Дебиторская Тогда
				ТабОпер.ПризнакЗадолженности = Перечисление.ПризнакЗадолженности.Кредиторская;
				
			Иначе
				ТабОпер.ПризнакЗадолженности = Перечисление.ПризнакЗадолженности.Дебиторская;
			КонецЕсли;
			
		Иначе // зачли задолженность частично
			// Сохраним текущую строку ТабОпер в отдельной таблице.
			ТекСтрока = СоздатьОбъект("ТаблицаЗначений");
			ТабОпер.Выгрузить(ТекСтрока, НомСтроки, НомСтроки);
			
			// В ТекСтрока установим числа "под зачет аванса".
			ТекСтрока.ПолучитьСтрокуПоНомеру(1);
			ТекСтрока.Сумма = -СуммаЗачтенногоАванса;
			Если ТекСтрока.ПризнакЗадолженности = Перечисление.ПризнакЗадолженности.Дебиторская Тогда
				ТекСтрока.ПризнакЗадолженности = Перечисление.ПризнакЗадолженности.Кредиторская;
				
			Иначе
				ТекСтрока.ПризнакЗадолженности = Перечисление.ПризнакЗадолженности.Дебиторская;
			КонецЕсли;
			
			// Добавим новую строку в ТабОпер и скопируем в нее сохраненной в ТекСтрока строки.
			НомСтроки = НомСтроки + 1;
			ТабОпер.НоваяСтрока(НомСтроки);
			Для НомКолонки = 1 по ТекСтрока.КоличествоКолонок() Цикл
				ЗначениеКолонки = ТекСтрока.ПолучитьЗначение(1, НомКолонки);
				ТабОпер.УстановитьЗначение(НомСтроки, НомКолонки, ЗначениеКолонки);
			КонецЦикла;
		КонецЕсли;
		НомСтроки = НомСтроки + 1;
	КонецЦикла;
	
КонецПроцедуры // ПолучитьОперацииКорректировкиЗадолженности()

///////////////////////////////////////////////////////////////////////////////                                                                            
// ФОРМИРОВАНИЕ ТАБЛИЦЫ ПРОЧИХ ВНЕРЕАЛИЗАЦИОННЫХ ДОХОДОВ И РАСХОДОВ
//

//*****************************************************************************
// ПолучитьПрочиеВнереализационныеДоходыИРасходы()
//
// Описание:
//  Формирует таблицу прочие внереализационных доходов и расходов за период,
// указанный в полях ввода НачДата и КонДата.
//
Процедура ПолучитьПрочиеВнереализационныеДоходыИРасходы()
	
	ТабОпер = СоздатьОбъект("ТаблицаЗначений");
	ТабОпер.НоваяКолонка("День","Дата");
	ТабОпер.НоваяКолонка("ДокументБУ","Документ");
	ТабОпер.НоваяКолонка("Контрагент","Справочник");
	ТабОпер.НоваяКолонка("Договор","Справочник");
	ТабОпер.НоваяКолонка("ПризнакДоходаРасхода");
	ТабОпер.НоваяКолонка("ВидДоходаРасхода");
	ТабОпер.НоваяКолонка("ПризнакЗадолженности");
	ТабОпер.НоваяКолонка("Сумма","Число");
	ТабОпер.НоваяКолонка("НДС","Число");
	ТабОпер.НоваяКолонка("НаименованиеОперации","Строка");
	
	БухИт = СоздатьОбъект("БухгалтерскиеИтоги");
	БухИт.ИспользоватьСубконто(ВидыСубконто.Контрагенты);
	БухИт.ИспользоватьСубконто(ВидыСубконто.Договоры);
	БухИт.ВыполнитьЗапрос(НачДата, КонДата, "76.55",,,, "Проводка", "С");

	Фильтр = 	"*,91.1;91.2,*;*,60.1;*,60.6;62.1,*;62.6,*;62.4,*;62.8,*;76.5;76.6;*,66;*,67";

	Опер = СоздатьОбъект("Операция");  
	Опер.ВыбратьОперацииСПроводками(НачДата, КонДата, Фильтр,,,);
	Пока Опер.ПолучитьПроводку() = 1 Цикл
		КодСчетаДт = СокрЛП(Опер.Дебет.Счет.Код);
		КодСчетаКт = СокрЛП(Опер.Кредит.Счет.Код);
		
		// Внереализационные расходы
		Если КодСчетаДт = "91.2" Тогда
			ВидПрочихДоходов = Опер.Дебет.ПрочиеДоходыИРасходы.ВидПрочихДоходовИРасходов;
			
			Если (ВидПрочихДоходов = Перечисление.ВидыПрочихДоходовИРасходов.КупляПродажаИностраннойВалюты)
			 или (ВидПрочихДоходов = Перечисление.ВидыПрочихДоходовИРасходов.КурсовыеРазницы) Тогда
			 	
			ИначеЕсли (ВидПрочихДоходов = Перечисление.ВидыПрочихДоходовИРасходов.ВыбытиеОС)
			      или (ВидПрочихДоходов = Перечисление.ВидыПрочихДоходовИРасходов.ВыбытиеНМА)
				  или (ВидПрочихДоходов = Перечисление.ВидыПрочихДоходовИРасходов.ВыбытиеАктивов)
				  или (ВидПрочихДоходов = Перечисление.ВидыПрочихДоходовИРасходов.УслугиБанков)
				  или (ВидПрочихДоходов = Перечисление.ВидыПрочихДоходовИРасходов.ОсуществлениеФинансовыхУслуг)
				  или (ВидПрочихДоходов = Перечисление.ВидыПрочихДоходовИРасходов.УступкиПраваТребования)
				  или (ВидПрочихДоходов = Перечисление.ВидыПрочихДоходовИРасходов.ОперацииСФинансовымиИнструментами)
				  или (ВидПрочихДоходов = Перечисление.ВидыПрочихДоходовИРасходов.ШтрафыПоДоговорам)
				  или (ВидПрочихДоходов = Перечисление.ВидыПрочихДоходовИРасходов.НеПринимаемыеДляЦелейНалогообложения) Тогда
				Продолжить;
				  
			ИначеЕсли НайтиСчетВСтроке("01,02,04,05,08,10,41,43,58,60,62,66,67,68,69,70,71,76.5,76.6,76.55,80,81,82,83,84", КодСчетаКт) = 1 Тогда
				Продолжить;
			КонецЕсли;
			
			Если ВидПрочихДоходов = Перечисление.ВидыПрочихДоходовИРасходов.АктивыПереданныеВПользование Тогда
			    ВидДоходаРасхода = Перечисление.ВнереализационныеРасходы.СодержаниеИмуществаПереданногоВАренду;
				
			ИначеЕсли ВидПрочихДоходов =  Перечисление.ВидыПрочихДоходовИРасходов.ПредоставленныеПраваПоНМА Тогда
				ВидДоходаРасхода = Перечисление.ВнереализационныеРасходы.СодержаниеИмуществаПереданногоВАренду;
				
			ИначеЕсли ВидПрочихДоходов =  Перечисление.ВидыПрочихДоходовИРасходов.ПроцентыКУплате Тогда
				ВидДоходаРасхода = Перечисление.ВнереализационныеРасходы.ПроцентыПоДолговымОбязательствам;	
				
			ИначеЕсли ВидПрочихДоходов =  Перечисление.ВидыПрочихДоходовИРасходов.КупляПродажаИностраннойВалюты Тогда
				ВидДоходаРасхода = Перечисление.ВнереализационныеРасходы.КупляПродажаИностраннойВалюты;
				
			ИначеЕсли ВидПрочихДоходов =  Перечисление.ВидыПрочихДоходовИРасходов.РезервыСомнительныхДолгов Тогда
				ВидДоходаРасхода = Перечисление.ВнереализационныеРасходы.ФормированиеРезервовПоСомнительнымДолгам;
				
			ИначеЕсли ВидПрочихДоходов =  Перечисление.ВидыПрочихДоходовИРасходов.ПрочиеОперационныеДоходыРасходы Тогда
				ВидДоходаРасхода = Перечисление.ВнереализационныеРасходы.ПрочиеВнереализационныеРасходы;
				
			ИначеЕсли ВидПрочихДоходов =  Перечисление.ВидыПрочихДоходовИРасходов.ВозмещениеУбытковКУплате Тогда
				ВидДоходаРасхода = Перечисление.ВнереализационныеРасходы.ПрочиеВнереализационныеРасходы;
				
			ИначеЕсли ВидПрочихДоходов =  Перечисление.ВидыПрочихДоходовИРасходов.ПрибыльУбыткиПрошлыхЛет Тогда
				ВидДоходаРасхода = Перечисление.ВнереализационныеРасходы.УбыткиПрошлыхЛет;	
				
			ИначеЕсли ВидПрочихДоходов =  Перечисление.ВидыПрочихДоходовИРасходов.СписаннаяДебиторскаяЗадолженность Тогда
				ВидДоходаРасхода = Перечисление.ВнереализационныеРасходы.ПрочиеВнереализационныеРасходы;	
			
			ИначеЕсли ВидПрочихДоходов = Перечисление.ВидыПрочихДоходовИРасходов.КурсовыеРазницы Тогда
				ВидДоходаРасхода = Перечисление.ВнереализационныеРасходы.КурсовыеРазницы;	
				
			ИначеЕсли ВидПрочихДоходов =  Перечисление.ВидыПрочихДоходовИРасходов.ДооценкаУценкаАктивов Тогда
				ВидДоходаРасхода = Перечисление.ВнереализационныеРасходы.ПереоценкаИмущества;
				                                            
			ИначеЕсли ВидПрочихДоходов =  Перечисление.ВидыПрочихДоходовИРасходов.ОтрицательнаяРазницаОтПереоценкиИмущества Тогда
				ВидДоходаРасхода = Перечисление.ВнереализационныеРасходы.ОтрицательнаяРазницаОтПереоценкиИмущества;
				                                            
			ИначеЕсли ВидПрочихДоходов =  Перечисление.ВидыПрочихДоходовИРасходов.ПрочиеВнереализационныеДоходыРасходы Тогда
				ВидДоходаРасхода = Перечисление.ВнереализационныеРасходы.ПрочиеВнереализационныеРасходы;
				
			Иначе
				Продолжить;
			КонецЕсли;
			
			ТабОпер.НоваяСтрока();
			ТабОпер.День = Опер.ДатаОперации;
			ТабОпер.ДокументБУ = Опер.Документ;
			ТабОпер.ПризнакДоходаРасхода = Перечисление.ПризнакДоходаРасхода.Расход;
			ТабОпер.ВидДоходаРасхода = ВидДоходаРасхода;
			ТабОпер.НаименованиеОперации = Опер.СодержаниеПроводки;
			
			Если (КодСчетаКт = "60.11") или (КодСчетаКт = "62.22") Тогда
				ТабОпер.ПризнакЗадолженности = Перечисление.ПризнакЗадолженности.Кредиторская;
				ТабОпер.Контрагент = Опер.Кредит.Контрагенты;
				ТабОпер.Договор = Опер.Кредит.Договоры;
				ТабОпер.Сумма = Опер.Сумма;
				
			ИначеЕсли (КодСчетаКт = "60.22") или (КодСчетаКт = "62.11") или (КодСчетаКт = "62.44") Тогда
				ТабОпер.ПризнакЗадолженности = Перечисление.ПризнакЗадолженности.Дебиторская;
				ТабОпер.Контрагент = Опер.Кредит.Контрагенты;
				ТабОпер.Договор = Опер.Кредит.Договоры;
				ТабОпер.Сумма = Опер.Сумма;
				
			ИначеЕсли КодСчетаКт = "76.55" Тогда
				ТабОпер.Контрагент = Опер.Кредит.Контрагенты;
				ТабОпер.Договор = Опер.Кредит.Договоры;
				ТабОпер.ПризнакЗадолженности = ВидЗадолженностиПоСч76(Опер, БухИт, ТабОпер.Контрагент, ТабОпер.Договор);
				Если ПустоеЗначение(ТабОпер.ПризнакЗадолженности) = 1 Тогда
				    ТабОпер.ПризнакЗадолженности = Перечисление.ПризнакЗадолженности.Кредиторская;
				КонецЕсли;
				ТабОпер.Сумма = Опер.Сумма;
				
			ИначеЕсли Лев(КодСчетаКт, 2) = "19" Тогда
				ТабОпер.ПризнакЗадолженности = Перечисление.ПризнакЗадолженности.Кредиторская;
				ТабОпер.Контрагент = Опер.Кредит.Контрагенты;
				СчетФактура = Опер.Кредит.СчетаФактурыПолученные;
				ТабОпер.Договор = ?(ПустоеЗначение(СчетФактура) = 0, СчетФактура.Договор, 0);
				ТабОпер.НДС = Опер.Сумма;
				
			ИначеЕсли ВидДоходаРасхода = Перечисление.ВнереализационныеРасходы.КупляПродажаИностраннойВалюты Тогда
				Если КодСчетаКт = "51" Тогда
					ТабОпер.ПризнакЗадолженности = Перечисление.ПризнакЗадолженности.НеИзменяется;
				КонецЕсли;
			
			Иначе
				ТабОпер.ПризнакЗадолженности = Перечисление.ПризнакЗадолженности.НеИзменяется;
				ТабОпер.Сумма = Опер.Сумма;
			КонецЕсли;
			                                                     
		// Внереализационные расходы: проценты по долговым обязательствам
		// (в дебет счета учета МПЗ с кредита 66 или 67).
		ИначеЕсли НайтиСчетВСтроке("66,67", КодСчетаКт) = 1 Тогда
			Если НайтиСчетВСтроке("08,10,41", КодСчетаДт) = 1 Тогда
				ТабОпер.НоваяСтрока();
				ТабОпер.День = Опер.ДатаОперации;
				ТабОпер.ДокументБУ = Опер.Документ;                                           
				// Задолженность движется в документе "Операции приобретения имущества...".
				ТабОпер.ПризнакЗадолженности = Перечисление.ПризнакЗадолженности.НеИзменяется;
				ТабОпер.ПризнакДоходаРасхода = Перечисление.ПризнакДоходаРасхода.Расход;
				ТабОпер.ВидДоходаРасхода = Перечисление.ВнереализационныеРасходы.ПроцентыПоДолговымОбязательствам;	
				ТабОпер.Сумма = Опер.Сумма;
				ТабОпер.НаименованиеОперации = Опер.СодержаниеПроводки;
			КонецЕсли;
		
		// Внереализационные доходы
		ИначеЕсли КодСчетаКт = "91.1" Тогда
			               
			Если КодСчетаДт < "50" Тогда
				Если НайтиСчетВСтроке("19,10,41", КодСчетаДт) = 0 Тогда
					Продолжить;
				КонецЕсли;
				
			ИначеЕсли (КодСчетаДт < "57") Тогда
				ВидДвиженияДенежныхСредств = Опер.Дебет.ДвиженияДенежныхСредств.ВидДвижения;
				Если ВидДвиженияДенежныхСредств = Перечисление.ВидыДвиженийДенежныхСредств.БезвозмездныеПоступления Тогда
			    	Продолжить;
				КонецЕсли;
			КонецЕсли;
			
			ВидПрочихРасходов = Опер.Кредит.ПрочиеДоходыИРасходы.ВидПрочихДоходовИРасходов;
			Если ВидПрочихРасходов = Перечисление.ВидыПрочихДоходовИРасходов.АктивыПереданныеВПользование Тогда
			    ВидДоходаРасхода = Перечисление.ВнереализационныеДоходы.СдачаИмуществаВАренду;
				
			ИначеЕсли ВидПрочихРасходов =  Перечисление.ВидыПрочихДоходовИРасходов.ПредоставленныеПраваПоНМА Тогда
				ВидДоходаРасхода = Перечисление.ВнереализационныеДоходы.ПредоставлениеПравНаРезультатыИнтеллектуальнойДеятельности;
				
			ИначеЕсли ВидПрочихРасходов =  Перечисление.ВидыПрочихДоходовИРасходов.УчастиеВУставныхКапиталах  Тогда
				ВидДоходаРасхода = Перечисление.ВнереализационныеДоходы.ДолевоеУчастиеВРоссийскихОрганизациях;
				
			ИначеЕсли ВидПрочихРасходов =  Перечисление.ВидыПрочихДоходовИРасходов.УчастиеВУставныхКапиталахИностранныхОрганизаций Тогда
				ВидДоходаРасхода = Перечисление.ВнереализационныеДоходы.ДолевоеУчастиеВИностранныхОрганизациях;
			
			ИначеЕсли ВидПрочихРасходов =  Перечисление.ВидыПрочихДоходовИРасходов.ПрибыльПоСовместнойДеятельности Тогда
				ВидДоходаРасхода = Перечисление.ВнереализационныеДоходы.ПрочиеВнереализационныеДоходы;
			
			ИначеЕсли ВидПрочихРасходов =  Перечисление.ВидыПрочихДоходовИРасходов.ПроцентыКПолучению Тогда
				ВидДоходаРасхода = Перечисление.ВнереализационныеДоходы.ПроцентыПоДоговорамЗайма;	
				
			ИначеЕсли ВидПрочихРасходов =  Перечисление.ВидыПрочихДоходовИРасходов.КупляПродажаИностраннойВалюты Тогда
				ВидДоходаРасхода = Перечисление.ВнереализационныеДоходы.КупляПродажаИностраннойВалюты;
			
			ИначеЕсли ВидПрочихРасходов =  Перечисление.ВидыПрочихДоходовИРасходов.ВосстановлениеРезервов Тогда
				ВидДоходаРасхода = Перечисление.ВнереализационныеДоходы.ВосстановлениеРезервов;
				
			ИначеЕсли ВидПрочихРасходов =  Перечисление.ВидыПрочихДоходовИРасходов.РезервыСомнительныхДолгов Тогда
				ВидДоходаРасхода = Перечисление.ВнереализационныеДоходы.ВосстановлениеРезервов;
			                                            
			ИначеЕсли ВидПрочихРасходов =  Перечисление.ВидыПрочихДоходовИРасходов.ПроцентыПоГосударственнымЦеннымБумагам Тогда
				ВидДоходаРасхода = Перечисление.ВнереализационныеДоходы.ПроцентыПоГосударственнымЦеннымБумагам;	
				
			ИначеЕсли ВидПрочихРасходов =  Перечисление.ВидыПрочихДоходовИРасходов.ПроцентыПоГосударственнымЦеннымБумагамПоСтавке0 Тогда
				ВидДоходаРасхода = Перечисление.ВнереализационныеДоходы.ПроцентыПоГосударственнымЦеннымБумагамПоСтавке0;
				
			ИначеЕсли ВидПрочихРасходов =  Перечисление.ВидыПрочихДоходовИРасходов.ПрочиеОперационныеДоходыРасходы Тогда
				ВидДоходаРасхода = Перечисление.ВнереализационныеДоходы.ПрочиеВнереализационныеДоходы;
				
			ИначеЕсли ВидПрочихРасходов =  Перечисление.ВидыПрочихДоходовИРасходов.ВозмещениеУбытковКПолучению Тогда
				ВидДоходаРасхода = Перечисление.ВнереализационныеДоходы.ПрочиеВнереализационныеДоходы;
				
			ИначеЕсли ВидПрочихРасходов =  Перечисление.ВидыПрочихДоходовИРасходов.ПрибыльУбыткиПрошлыхЛет Тогда
				ВидДоходаРасхода = Перечисление.ВнереализационныеДоходы.ДоходыПрошлыхЛет;	
				
			ИначеЕсли ВидПрочихРасходов =  Перечисление.ВидыПрочихДоходовИРасходов.СписаннаяКредиторскаяЗадолженность Тогда
				ВидДоходаРасхода = Перечисление.ВнереализационныеДоходы.ПрочиеВнереализационныеДоходы;	
			
			ИначеЕсли ВидПрочихРасходов = Перечисление.ВидыПрочихДоходовИРасходов.КурсовыеРазницы Тогда
				ВидДоходаРасхода = Перечисление.ВнереализационныеДоходы.КурсовыеРазницы;	
				
			ИначеЕсли ВидПрочихРасходов =  Перечисление.ВидыПрочихДоходовИРасходов.ДооценкаУценкаАктивов Тогда
				ВидДоходаРасхода = Перечисление.ВнереализационныеДоходы.ПрочиеВнереализационныеДоходы;
				                                            
			ИначеЕсли ВидПрочихРасходов =  Перечисление.ВидыПрочихДоходовИРасходов.ОтрицательнаяРазницаОтПереоценкиИмущества Тогда
				ВидДоходаРасхода = Перечисление.ВнереализационныеДоходы.ПрочиеВнереализационныеДоходы;
				                                            
			ИначеЕсли ВидПрочихРасходов =  Перечисление.ВидыПрочихДоходовИРасходов.ПрочиеВнереализационныеДоходыРасходы Тогда
				ВидДоходаРасхода = Перечисление.ВнереализационныеДоходы.ПрочиеВнереализационныеДоходы;
				
			Иначе
				Продолжить;
			КонецЕсли;
				
			ТабОпер.НоваяСтрока();
			ТабОпер.День = Опер.ДатаОперации;
			ТабОпер.ДокументБУ = Опер.Документ;
			ТабОпер.ПризнакДоходаРасхода = Перечисление.ПризнакДоходаРасхода.Доход;
			ТабОпер.ВидДоходаРасхода = ВидДоходаРасхода;
			ТабОпер.НаименованиеОперации = Опер.СодержаниеПроводки;

			Если НайтиСчетВСтроке("60.1,60.6,62.2,62.7,60.11,62.22,66,67", КодСчетаДт) = 1 Тогда
				ТабОпер.ПризнакЗадолженности = Перечисление.ПризнакЗадолженности.Кредиторская;
				ТабОпер.Контрагент = Опер.Дебет.Контрагенты;
				ТабОпер.Договор = Опер.Дебет.Договоры;
				ТабОпер.Сумма = Опер.Сумма;
				
			ИначеЕсли НайтиСчетВСтроке("60.2,60.7,60.22,62.1,62.6,62.8,62.4,62.11,62.44", КодСчетаДт) = 1 Тогда
				ТабОпер.ПризнакЗадолженности = Перечисление.ПризнакЗадолженности.Дебиторская;
				ТабОпер.Контрагент = Опер.Дебет.Контрагенты;
				ТабОпер.Договор = Опер.Дебет.Договоры;
				ТабОпер.Сумма = Опер.Сумма;
				
			ИначеЕсли НайтиСчетВСтроке("76", КодСчетаДт) = 1 Тогда
				ТабОпер.Контрагент = Опер.Дебет.Контрагенты;
				ТабОпер.Договор = Опер.Дебет.Договоры;
				ТабОпер.ПризнакЗадолженности = ВидЗадолженностиПоСч76(Опер, БухИт, ТабОпер.Контрагент, ТабОпер.Договор);
				Если ПустоеЗначение(ТабОпер.ПризнакЗадолженности) = 1 Тогда
				    ТабОпер.ПризнакЗадолженности = Перечисление.ПризнакЗадолженности.Дебиторская;
				КонецЕсли;
				ТабОпер.Сумма = Опер.Сумма;
				
			ИначеЕсли Лев(КодСчетаДт, 2) = "19" Тогда
				ТабОпер.ПризнакЗадолженности = Перечисление.ПризнакЗадолженности.Кредиторская;
				ТабОпер.Контрагент = Опер.Дебет.Контрагенты;
				СчетФактура = Опер.Дебет.СчетаФактурыПолученные;
				ТабОпер.Договор = ?(ПустоеЗначение(СчетФактура) = 0, СчетФактура.Договор, 0);
				ТабОпер.НДС = Опер.Сумма;
				
			ИначеЕсли Опер.Кредит.ПрочиеДоходыИРасходы.ВидПрочихДоходовИРасходов = Перечисление.ВидыПрочихДоходовИРасходов.КупляПродажаИностраннойВалюты Тогда
				Если КодСчетаДт = "51" Тогда
					ТабОпер.ПризнакЗадолженности = Перечисление.ПризнакЗадолженности.НеИзменяется;
				КонецЕсли;
				
			Иначе
				ТабОпер.ПризнакЗадолженности = Перечисление.ПризнакЗадолженности.НеИзменяется;
				ТабОпер.Сумма = Опер.Сумма;	
			КонецЕсли;

		ИначеЕсли Опер.Документ.Вид() = "СуммовыеРазницы" Тогда
			Если (КодСчетаДт = "62.1") или (КодСчетаДт = "62.4") или (КодСчетаДт = "76.5") или (КодСчетаДт = "62.6") или (КодСчетаДт = "62.8") или (КодСчетаДт = "76.6") Тогда
				ТабОпер.НоваяСтрока();
				ТабОпер.День = Опер.ДатаОперации;
				ТабОпер.ДокументБУ = Опер.Документ;
				ТабОпер.Контрагент = Опер.Дебет.Контрагенты;
				ТабОпер.Договор = Опер.Дебет.Договоры;
				ТабОпер.ПризнакЗадолженности = Перечисление.ПризнакЗадолженности.Дебиторская;
				ТабОпер.НаименованиеОперации = Опер.СодержаниеПроводки;
				
				Если Опер.Сумма < 0 Тогда
					ТабОпер.Сумма = - Опер.Сумма;
					ТабОпер.ПризнакДоходаРасхода = Перечисление.ПризнакДоходаРасхода.Расход;
					ТабОпер.ВидДоходаРасхода = Перечисление.ВнереализационныеРасходы.СуммовыеРазницы;
					
				Иначе
					ТабОпер.Сумма = Опер.Сумма;
					ТабОпер.ПризнакДоходаРасхода = Перечисление.ПризнакДоходаРасхода.Доход;
					ТабОпер.ВидДоходаРасхода = Перечисление.ВнереализационныеДоходы.СуммовыеРазницы;
				КонецЕсли;
				
			ИначеЕсли (КодСчетаКт = "60.1") или (КодСчетаКт = "60.6") или (КодСчетаКт = "76.5") или (КодСчетаКт = "76.6") Тогда
				ТабОпер.НоваяСтрока();
				ТабОпер.День = Опер.ДатаОперации;
				ТабОпер.ДокументБУ = Опер.Документ;
				ТабОпер.Контрагент = Опер.Кредит.Контрагенты;
				ТабОпер.Договор = Опер.Кредит.Договоры;
				ТабОпер.ПризнакЗадолженности = Перечисление.ПризнакЗадолженности.Кредиторская;
                ТабОпер.НаименованиеОперации = Опер.СодержаниеПроводки;
				
				Если Опер.Сумма < 0 Тогда
					ТабОпер.Сумма = - Опер.Сумма;
					ТабОпер.ПризнакДоходаРасхода = Перечисление.ПризнакДоходаРасхода.Доход;
					ТабОпер.ВидДоходаРасхода = Перечисление.ВнереализационныеДоходы.СуммовыеРазницы;
					
				Иначе
					ТабОпер.Сумма = Опер.Сумма;
					ТабОпер.ПризнакДоходаРасхода = Перечисление.ПризнакДоходаРасхода.Расход;
					ТабОпер.ВидДоходаРасхода = Перечисление.ВнереализационныеРасходы.СуммовыеРазницы;
				КонецЕсли;
				
				Если Лев(КодСчетаДт, 2) = "19" Тогда
					ТабОпер.НоваяСтрока();
					ТабОпер.День = Опер.ДатаОперации;
					ТабОпер.ДокументБУ = Опер.Документ;
					ТабОпер.Контрагент = Опер.Кредит.Контрагенты;
					ТабОпер.Договор = Опер.Кредит.Договоры;
					ТабОпер.ПризнакЗадолженности = Перечисление.ПризнакЗадолженности.Кредиторская;
					ТабОпер.НаименованиеОперации = Опер.СодержаниеПроводки;
	
					Если Опер.Сумма < 0 Тогда
						ТабОпер.НДС = - Опер.Сумма;
						ТабОпер.ПризнакДоходаРасхода = Перечисление.ПризнакДоходаРасхода.Доход;
						ТабОпер.ВидДоходаРасхода = Перечисление.ВнереализационныеДоходы.СуммовыеРазницы;
						
					Иначе
						ТабОпер.НДС = Опер.Сумма;
						ТабОпер.ПризнакДоходаРасхода = Перечисление.ПризнакДоходаРасхода.Расход;
						ТабОпер.ВидДоходаРасхода = Перечисление.ВнереализационныеРасходы.СуммовыеРазницы;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	ТабОпер.Свернуть("День, ДокументБУ, ВидДоходаРасхода, Контрагент, Договор, ПризнакЗадолженности, ПризнакДоходаРасхода, НаименованиеОперации", "Сумма, НДС");

КонецПроцедуры // ПолучитьПрочиеВнереализационныеДоходыИРасходы()

///////////////////////////////////////////////////////////////////////////////                                                                            
// ФОРМИРОВАНИЕ ТАБЛИЦЫ ОПЕРАЦИЙ СПИСАНИЯ МАТЕРИАЛОВ, ТОВАРОВ, ПРОДУКЦИИ
//

//*****************************************************************************
// ПолучитьОперацииСписания(СчетУчета)
//
// Параметры:
//  СчетУчета - Строка. Код счета учета МПЗ;
//
// Описание:
//  Формирует таблицу операций списания материалов, товаров и продукции.
//
Процедура ПолучитьОперацииСписания(КодСчета)
	
	ТабОпер = СоздатьОбъект("ТаблицаЗначений");
	ТабОпер.НоваяКолонка("День","Дата");
	ТабОпер.НоваяКолонка("ДокументБУ","Документ");
	ТабОпер.НоваяКолонка("ВидРасхода");
	ТабОпер.НоваяКолонка("МПЗ");
	ТабОпер.НоваяКолонка("Количество","Число");
	ТабОпер.НоваяКолонка("Объект");
	ТабОпер.НоваяКолонка("ЭлементРасхода");
	ТабОпер.НоваяКолонка("НаименованиеОперации","Строка");
	
	// список видов косвенных расходов
	СписокЭлементовРасходов.УдалитьВсе();
	СписокЭлементовРасходов.ДобавитьЗначение(Перечисление.ГруппыВидыРасходов.ПользованиеПравамиНаРезультатыИнтеллектуальнойДеятельности);
	СписокЭлементовРасходов.ДобавитьЗначение(Перечисление.ГруппыВидыРасходов.МатериальныеРасходы);
	СписокЭлементовРасходов.ДобавитьЗначение(Перечисление.ГруппыВидыРасходов.РасходыНаКомандировки);
	СписокЭлементовРасходов.ДобавитьЗначение(Перечисление.ГруппыВидыРасходов.РасходыНаРекламуБезНорм);
	СписокЭлементовРасходов.ДобавитьЗначение(Перечисление.ГруппыВидыРасходов.ИнформационныеУслуги);
	СписокЭлементовРасходов.ДобавитьЗначение(Перечисление.ГруппыВидыРасходов.ИзучениеКонъюнктурыРынка);
	СписокЭлементовРасходов.ДобавитьЗначение(Перечисление.ГруппыВидыРасходов.РемонтОсновныхСредств);
	СписокЭлементовРасходов.ДобавитьЗначение(Перечисление.ГруппыВидыРасходов.ПодготовкаИПереподготовкаКадров);
	СписокЭлементовРасходов.ДобавитьЗначение(Перечисление.ГруппыВидыРасходов.ОхранаИмущества);
	СписокЭлементовРасходов.ДобавитьЗначение(Перечисление.ГруппыВидыРасходов.УслугиПоУправлению);
	СписокЭлементовРасходов.ДобавитьЗначение(Перечисление.ГруппыВидыРасходов.АудиторскиеУслуги);
	СписокЭлементовРасходов.ДобавитьЗначение(Перечисление.ГруппыВидыРасходов.ПредоставлениеРаботниковСтороннимиОрганизациями);
	СписокЭлементовРасходов.ДобавитьЗначение(Перечисление.ГруппыВидыРасходов.СоциальнаяЗащитаИнвалидов);
	СписокЭлементовРасходов.ДобавитьЗначение(Перечисление.ГруппыВидыРасходов.ДругиеРасходы);
	СписокЭлементовРасходов.ДобавитьЗначение(Перечисление.ГруппыВидыРасходов.РасходыНаРекламу); // это элемент вспомогательный
	СписокЭлементовРасходов.ДобавитьЗначение(Перечисление.ГруппыВидыРасходов.ПредставительскиеРасходы); // это элемент вспомогательный
	СписокЭлементовРасходов.ДобавитьЗначение(Перечисление.ГруппыВидыРасходов.НеПринимаемые); // это элемент вспомогательный
	
	Опер = СоздатьОбъект("Операция");
	СчетаДтСтр = "07,08,10,20,23,25,26,28,29,41,44,58.2,58.5,91.2,97,99";
	СчетаКтСтр = КодСчета; 
	
	// Получение данных из документов поступления МПЗ.
	Запрос = СоздатьОбъект("Запрос");
	ТекстЗапроса = 
	"//{{ЗАПРОС(ДокументыСписанияМатериалов)
	|Период с НачДата по КонДата;
	|ОбрабатыватьДокументы Проведенные;
	|ТекДок = Документ.ТребованиеНакладная.ТекущийДокумент,
	|         Документ.ПоступлениеМатериалов.ТекущийДокумент,
	|         Документ.Операция.ТекущийДокумент;
	|Группировка ТекДок;
	|"//}}ЗАПРОС
	;
	Если Запрос.Выполнить(ТекстЗапроса) = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Пока Запрос.Группировка("ТекДок") = 1 Цикл
		Опер.НайтиОперацию(Запрос.ТекДок);
		Если Опер.ВключитьПроводки() = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		ДокВид = Запрос.ТекДок.Вид();
		
		Если ДокВид = "ПоступлениеМатериалов" Тогда
			Если Запрос.ТекДок.ВидПоступления <> 1 Тогда // если не поступление материалов из переработки, то пропускаем
			    Продолжить;
			КонецЕсли;
		КонецЕсли;

		Опер.ВыбратьПроводки();
		Пока Опер.ПолучитьПроводку() = 1 Цикл
			Если (НайтиСчетВСтроке(СчетаКтСтр, Опер.Кредит.Счет.Код) = 1) и
			 	 (НайтиСчетВСтроке(СчетаДтСтр, Опер.Дебет.Счет.Код) = 1) Тогда
				
				Если НайтиСчетВСтроке("10,41", Опер.Дебет.Счет.Код) = 1 Тогда
					Если Опер.Кредит.Субконто(1) = Опер.Дебет.Субконто(1) Тогда
						Продолжить;
					КонецЕсли;
				КонецЕсли;
			
				ТабОпер.НоваяСтрока();
				ТабОпер.День = Опер.ДатаОперации;
				ТабОпер.ДокументБУ = Опер.Документ;
				ТабОпер.НаименованиеОперации = Опер.Содержание;
				ТабОпер.Количество = Опер.Количество;
				ТабОпер.МПЗ = Опер.Кредит.Субконто(1);
				
				Счет = Опер.Дебет.Счет.Код;
				СчетКт = Опер.Кредит.Счет.Код;
				
				Если НайтиСчетВСтроке("07", Счет) = 1 Тогда
					ТабОпер.ВидРасхода = Перечисление.ВидыРасходов.ПриобретениеОсновныхСредств;
					ТабОпер.Объект = Опер.Дебет.Оборудование;        
					
				ИначеЕсли НайтиСчетВСтроке("08.1,08.2,08.3,08.4", Счет) = 1 Тогда
					ТабОпер.ВидРасхода = Перечисление.ВидыРасходов.ПриобретениеОсновныхСредств;	
					ТабОпер.Объект = Опер.Дебет.ОбъектыСтроительства;
					
				ИначеЕсли НайтиСчетВСтроке("08.5", Счет) = 1 Тогда
					ТабОпер.ВидРасхода = Перечисление.ВидыРасходов.ПриобретениеНематериальныхАктивов;
					ТабОпер.Объект = Опер.Дебет.ОбъектыСтроительства;
					
				ИначеЕсли НайтиСчетВСтроке("10", Счет) = 1 Тогда
					ТабОпер.ВидРасхода = Перечисление.ВидыРасходов.ПриобретениеМатериалов;
					ТабОпер.Объект = Опер.Дебет.Материалы;
					
				ИначеЕсли НайтиСчетВСтроке("20", Счет) = 1 Тогда // если счет кредита 10.1 или 10.2 (или счет Кт 10.7, а счет учета материала 10.1. или 10.2) и вид расхода - материалальные, то это прямые расходы
					Если СчетКт = "10.7" Тогда
						СчетКт = Опер.Кредит.Субконто(1).СубСчет10;
					КонецЕсли;
						
					Если (НайтиСчетВСтроке("10.1, 10.2, 43", СчетКт) = 1)
						и (Опер.Дебет.СтатьиЗатратНаПроизводство.ВидРасходовДляНалоговогоУчета = Перечисление.ГруппыВидыРасходов.МатериальныеРасходы) Тогда
						ТабОпер.ВидРасхода = Перечисление.ВидыРасходов.ПрямыеРасходы;
						ТабОпер.Объект = Опер.Дебет.ВидыНоменклатуры;     
						
					Иначе
						ПолучитьЭлементРасхода(Опер.Дебет.СтатьиЗатратНаПроизводство.ВидРасходовДляНалоговогоУчета, СписокЭлементовРасходов);
					КонецЕсли;
					
				ИначеЕсли НайтиСчетВСтроке("25", Счет) = 1 Тогда // это всегда косвенные расходы
					ПолучитьЭлементРасхода(Опер.Дебет.СтатьиОбщепроизводственныхЗатрат.ВидРасходовДляНалоговогоУчета, СписокЭлементовРасходов);
					
				ИначеЕсли НайтиСчетВСтроке("26", Счет) = 1 Тогда // это всегда косвенные расходы
					ПолучитьЭлементРасхода(Опер.Дебет.СтатьиОбщехозяйственныхЗатрат.ВидРасходовДляНалоговогоУчета, СписокЭлементовРасходов);
					
				ИначеЕсли НайтиСчетВСтроке("41", Счет) = 1 Тогда
					ТабОпер.ВидРасхода = Перечисление.ВидыРасходов.ПриобретениеТоваров;
					ТабОпер.Объект = Опер.Дебет.Номенклатура;
					                                                                                               
				ИначеЕсли НайтиСчетВСтроке("44.1.1", Счет) = 1 Тогда // это всегда косвенные расходы
					ПолучитьЭлементРасхода(Опер.Дебет.СтатьиИздержекОбращения.ВидРасходовДляНалоговогоУчета, СписокЭлементовРасходов);
					
				ИначеЕсли НайтиСчетВСтроке("44.1.2", Счет) = 1 Тогда // ЕНВД
					ТабОпер.ВидРасхода = Перечисление.ВидыРасходов.НеПринимаемые;
					
				ИначеЕсли НайтиСчетВСтроке("44.2", Счет) = 1 Тогда
					ПолучитьЭлементРасхода(Опер.Дебет.СтатьиКоммерческихРасходов.ВидРасходовДляНалоговогоУчета, СписокЭлементовРасходов);
					
				ИначеЕсли НайтиСчетВСтроке("44.3", Счет) = 1 Тогда
					ПолучитьЭлементРасхода(Опер.Дебет.СтатьиРасходовНаПродажу.ВидРасходовДляНалоговогоУчета, СписокЭлементовРасходов);
					
				ИначеЕсли НайтиСчетВСтроке("58.2", Счет) = 1 Тогда
					ТабОпер.ВидРасхода = Перечисление.ВидыРасходов.ПриобретениеЦенныхБумаг;
					ТабОпер.Объект = Опер.Дебет.ЦенныеБумаги;
					
				ИначеЕсли НайтиСчетВСтроке("58.5", Счет) = 1 Тогда
					ТабОпер.ВидРасхода = Перечисление.ВидыРасходов.ПриобретениеПрав;
					ТабОпер.Объект = Опер.Дебет.Договоры;	                         
					
				ИначеЕсли НайтиСчетВСтроке("91.2", Счет) = 1 Тогда
					Если Опер.Дебет.ПрочиеДоходыИРасходы.ВидПрочихДоходовИРасходов = Перечисление.ВидыПрочихДоходовИРасходов.ВыбытиеОС Тогда
						ТабОпер.ВидРасхода = Перечисление.ВидыРасходов.РеализацияОсновныхСредств;
						
					ИначеЕсли Опер.Дебет.ПрочиеДоходыИРасходы.ВидПрочихДоходовИРасходов = Перечисление.ВидыПрочихДоходовИРасходов.ВыбытиеНМА  Тогда
						ТабОпер.ВидРасхода = Перечисление.ВидыРасходов.РеализацияНематериальныхАктивов;
						
					ИначеЕсли Опер.Дебет.ПрочиеДоходыИРасходы.ВидПрочихДоходовИРасходов = Перечисление.ВидыПрочихДоходовИРасходов.НеПринимаемыеДляЦелейНалогообложения Тогда
						ТабОпер.ВидРасхода = Перечисление.ВидыРасходов.НеПринимаемые;
					КонецЕсли;	
				КонецЕсли;
			КонецЕсли;                                   
			Если ТабОпер.ЭлементРасхода = Перечисление.ГруппыВидыРасходов.ПредставительскиеРасходы Тогда
				ТабОпер.ВидРасхода = Перечисление.ВидыРасходов.ПредставительскиеРасходы;
				ТабОпер.ЭлементРасхода = "";
				ТабОпер.Объект = "";                                                                    
				
			ИначеЕсли ТабОпер.ЭлементРасхода = Перечисление.ГруппыВидыРасходов.РасходыНаРекламу Тогда
				ТабОпер.ВидРасхода = Перечисление.ВидыРасходов.РасходыНаРекламу;
				ТабОпер.ЭлементРасхода = "";
				
			ИначеЕсли ТабОпер.ЭлементРасхода = Перечисление.ГруппыВидыРасходов.НеПринимаемые Тогда
				ТабОпер.ВидРасхода = Перечисление.ВидыРасходов.НеПринимаемые;
				ТабОпер.ЭлементРасхода = "";
				ТабОпер.Объект = "";                     
				
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры // ПолучитьОперацииСписания()

///////////////////////////////////////////////////////////////////////////////                                                                            
// ПРОЦЕДУРЫ И ФУНКЦИИ МОДУЛЯ
//

//*****************************************************************************
// Заполнить(Документ)
//
// Параметры:
//  Документ - Контекст формы или идентификатор документа налогового учета.
//
// Описание:
//  1. В зависимости от вида документа определяет порядок формирования
// таблицы хозяйственных операций.
//  2. При пакетной обработке создает новые документы.
//  3. Полученную таблицу заносит в табличные части документов.
//
Процедура Заполнить(Документ, ВидДокумента = "")  
	
	ПереченьСтатейЗатрат = глПолучитьПереченьСтатейЗатрат(КонДата); 
		
	ДокВид = ?(ТипЗначенияСтр(Документ) = "Строка", Документ, Документ.Вид());
	
	Если ВидДокумента = "" Тогда
	    ВидДокумента = ?(ТипЗначенияСтр(Документ) = "Строка", Документ, ДокВид);
	КонецЕсли;
	
	Если ВидДокумента = "ПоступленияДенежныхСредств" Тогда
		ПолучитьОперацииПоступленияДенежныхСредств();

	ИначеЕсли ВидДокумента = "РасходДенежныхСредств" Тогда
		ПолучитьОперацииРасходаДенежныхСредств();
		
	ИначеЕсли ВидДокумента = "ОперацииПриобретенияИмущества" Тогда
		ПолучитьОперацииПриобретенияИмущества();

	ИначеЕсли ВидДокумента = "ОперацииВыбытияИмущества" Тогда
		ПолучитьОперацииВыбытияИмущества();

	ИначеЕсли ВидДокумента = "РасходыНаОплатуТруда" Тогда
		ПолучитьРасходыНаОплатуТруда();
		
	ИначеЕсли ВидДокумента = "НачислениеНалогов" Тогда
		ПолучитьОперацииНачисленияНалогов();
		
	ИначеЕсли ВидДокумента = "НачислениеШтрафныхСанкций" Тогда
		ПолучитьОперацииНачисленияШтрафныхСанкций();
		
	ИначеЕсли ВидДокумента = "ЗачетЗадолженности" Тогда
		ПолучитьОперацииКорректировкиЗадолженности();
		
	ИначеЕсли ВидДокумента = "РасчетКурсовыхРазниц" Тогда
		ПолучитьПрочиеВнереализационныеДоходыИРасходы();
		
	ИначеЕсли ВидДокумента = "СписаниеМатериалов" Тогда
		ПолучитьОперацииСписания("10");
		ВидОбъектов = 0;
		
	ИначеЕсли ВидДокумента = "СписаниеТоваров" Тогда
		ПолучитьОперацииСписания("41");
		ВидОбъектов = 1;
		
	ИначеЕсли ВидДокумента = "СписаниеПродукции" Тогда
		ПолучитьОперацииСписания("43");
		ВидОбъектов = 2;
	КонецЕсли;
	
	// Сортировка таблицы операций.
	Если ДокВид <> "НачислениеНалогов" Тогда
		ТабОпер.Сортировать("ДокументБУ", 1);
	КонецЕсли;
	
	// Передача полученной таблицы в контекст формы документа или
	// формирование документов налогового учета за период.
	Если ТипЗначенияСтр(Документ) = "Строка" Тогда
		Док = СоздатьОбъект("Документ." + ДокВид);
		
		// Пометим на удаление существующие документы.
		Док.ВыбратьДокументы(НачДата, КонДата);
		Пока Док.ПолучитьДокумент() = 1 Цикл
			Если Док.ПометкаУдаления() = 0 Тогда
				Если ДокВид = "СписаниеМатериаловТоваровПродукции" Тогда
					Если Док.ВидОбъектов <> ВидОбъектов Тогда
					    Продолжить;
					КонецЕсли;
				КонецЕсли;
				
			    Док.Удалить(0);
				Сообщить("Помечен на удаление документ " + Док, "!");
			КонецЕсли;
		КонецЦикла;
		
	Иначе
		Док = Документ;
	КонецЕсли;
	
	Для НомСтроки = 1 по ТабОпер.КоличествоСтрок() Цикл
		// Ввод нового документа.
		Если ТипЗначенияСтр(Документ) = "Строка" Тогда
			Если Док.ДатаДок <> ТабОпер.ПолучитьЗначение(НомСтроки, "День") Тогда
				// Выполним стандартные действия при вводе нового документа.
				Док.Новый();
				Док.ДатаДок = ТабОпер.ПолучитьЗначение(НомСтроки, "День");
				Док.УстановитьНовыйНомер("");
				
				Если ДокВид = "СписаниеМатериаловТоваровПродукции" Тогда
				    Док.ВидОбъектов = ВидОбъектов;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;

		// Добавление строки документа.
		Док.НоваяСтрока();
		Для НомКолонки = 1 по ТабОпер.КоличествоКолонок() Цикл
			ИмяРеквизита = ТабОпер.ПолучитьПараметрыКолонки(НомКолонки);
			ЗначениеРеквизита = ТабОпер.ПолучитьЗначение(НомСтроки, НомКолонки);
			Если Метаданные.Документ(ДокВид).РеквизитТабличнойЧасти(ИмяРеквизита).Выбран() = 1 Тогда
				Если (ТипЗначенияСтр(Док.ПолучитьАтрибут(ИмяРеквизита)) = "") и (ПустоеЗначение(ЗначениеРеквизита) = 0) Тогда
				    Док.НазначитьТип(ИмяРеквизита, ТипЗначенияСтр(ЗначениеРеквизита)+"."+ЗначениеРеквизита.Вид());
				КонецЕсли;
			    Док.УстановитьАтрибут(ИмяРеквизита, ЗначениеРеквизита);
			КонецЕсли;
		КонецЦикла;
		
		// Запись документа.
		Если ТипЗначенияСтр(Документ) = "Строка" Тогда
			Если НомСтроки = ТабОпер.КоличествоСтрок() Тогда
				Записать = 1;
				
			ИначеЕсли Док.ДатаДок <> ТабОпер.ПолучитьЗначение(НомСтроки + 1, "День") Тогда
   				Записать = 1;
   				
   			Иначе
   				Записать = 0;
			КонецЕсли;
			
			Если Записать = 1 Тогда
				// Выполним стандартные действия при записи документа.
				Если (ДокВид = "СписаниеМатериаловТоваровПродукции") или
					 (ДокВид = "ЗачетЗадолженности") Тогда
				
				ИначеЕсли ДокВид = "НачислениеНалогов" Тогда
					Док.Операция.СуммаОперации = Док.Итог("СуммаНалога");
					
				Иначе
					Док.Операция.СуммаОперации = Док.Итог("Сумма");
				КонецЕсли;
				
				Док.Операция.Содержание = Док.ПредставлениеВида();
				Док.Записать();
				Сообщить("Сформирован документ " + Док.ТекущийДокумент());
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры // Заполнить()

//******************************************************************************
//	Установить(Режим) 
//
// Параметры:
//  Режим - Строка. "Все" - пометить все строки,
//                  "Сброс" - снять пометку всех строк,
//                  "" - инвертировать пометку всех строк.
//
// Вызывается из формул элементов диалога:
//  Кнопка ВыделитьВсе,
//  Кнопка Инверсия,
//  Кнопка ОчиститьВсе.
//
// Описание:
//  Устанавливает, снимает или инвертирует пометки у списка документов.
//
Процедура Установить(Режим = "") 
	
	Для а = 1 По СписокДокументов.РазмерСписка() Цикл
		Если Режим="Все" Тогда
			СписокДокументов.Пометка(а, 1);
			
		ИначеЕсли Режим="Сброс" Тогда
			СписокДокументов.Пометка(а,0); 
			
		Иначе
			СписокДокументов.Пометка(а,?(СписокДокументов.Пометка(а) = 1, 0, 1)); 
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры  // Установить()

//*****************************************************************************
// Сформировать()
//
// Вызывается из формул элементов диалога:
//  Кнопка "Сформировать".
//
// Описание:
//  Вызывает процедуру заполнения для каждого, указанного пользователем,
// вида документов.
//
Процедура Сформировать()
	
	Если Константа.ДатаЗапретаРедактирования > НачДата Тогда
		Предупреждение("За выбранный период запрещена запись документов!"+РазделительСтрок+
		               "Дата начала меньше даты запрета редактирования документов.");
	    Возврат;
		
	ИначеЕсли НачДата > КонДата Тогда
		Предупреждение("Неправильно задан период!"+РазделительСтрок+
		               "Дата начала больше даты окончания периода.");
		Возврат;

	ИначеЕсли КонДата > КонецРассчитанногоПериодаБИ() Тогда
		Предупреждение("За выбранный период итоги не рассчитаны!"+РазделительСтрок+
		               "Расчет итогов выполняется в режиме"+РазделительСтрок+
					   """Операции - Управление бухгалтерскими итогами"".");
		Возврат;
		
	ИначеЕсли Вопрос("Сформировать документы за период с " + НачДата + " по " +	КонДата + "?" + РазделительСтрок +
					 "Найденные за указанный период документы будут " + РазделительСтрок +
					 "помечены на удаление.", "Да+Нет") = "Нет" Тогда
		Возврат;
	КонецЕсли;
	

	Для а = 1 по СписокДокументов.РазмерСписка() Цикл
		Если СписокДокументов.Пометка(а) = 1 Тогда
			ДокВид = СписокДокументов.ПолучитьЗначение(а);
			Если ДокВид = "СписаниеМатериаловТоваровПродукции" Тогда
				Заполнить(ДокВид, "СписаниеМатериалов");
				Заполнить(ДокВид, "СписаниеТоваров");
				Заполнить(ДокВид, "СписаниеПродукции");
				
			Иначе
				Заполнить(ДокВид);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры // Сформировать()

//*****************************************************************************
// ДействияПриОткрытии(ФлагЧтенияНастройки)
//
// Параметры:
//  ФлагЧтенияНастройки - Число. 0 - настройка не считана.
//                               1 - настройка считана.
//
// Возвращаемое значение:
//  Число - 1 - открыть форму,
//          0 - не открывать форму.
//
// Описаниие: 
//  Обрабатывает параметры формы. Данная обработка должна получать в качестве
// параметра список значений с определенными представлениями. Допустимы следующие 
// представления значений:
//  КонтекстДокумента - Контекст формы документа налогового учета,
//  ВидыДокументов    - Список значений, содержащий идентификаторы документов,
//
Функция ДействияПриОткрытии(ФлагЧтенияНастройки = 0)
	
	Если ТипЗначенияСтр(Форма.Параметр) = "СписокЗначений" Тогда
		Если ТипЗначенияСтр(Форма.Параметр.Получить("КонтекстДокумента")) = "ГрупповойКонтекст" Тогда
			Док = Форма.Параметр.Получить("КонтекстДокумента"); 
			Если Док.ДатаДок > КонецРассчитанногоПериодаБИ() Тогда
				Предупреждение("За выбранный период итоги не рассчитаны!"+РазделительСтрок+
				"Расчет итогов выполняется в режиме"+РазделительСтрок+
				"""Операции - Управление бухгалтерскими итогами"".");
				Возврат 0;
				
			// Очистим табличную часть документа.
			ИначеЕсли Док.КоличествоСтрок() > 0 Тогда
				Если Вопрос("Заполнить документ автоматически
				            |(перед заполнением табличная часть будет очищена)?", "Да+Нет") = "Нет" Тогда
					Возврат 0;
				КонецЕсли;
				Док.УдалитьСтроки();
			КонецЕсли;
			
			НачДата = Док.ДатаДок;
			КонДата = Док.ДатаДок;
			
			Если Док.Вид() = "СписаниеМатериаловТоваровПродукции" Тогда
				Если Док.ВидОбъектов = 0 Тогда
				    Заполнить(Док, "СписаниеМатериалов");
					
				ИначеЕсли Док.ВидОбъектов = 1 Тогда
				    Заполнить(Док, "СписаниеТоваров");
					
				ИначеЕсли Док.ВидОбъектов = 2 Тогда
				    Заполнить(Док, "СписаниеПродукции");
				КонецЕсли;
				
			Иначе
				 Заполнить(Док);
			КонецЕсли;
	
			Возврат 0 ;
		    
		ИначеЕсли ТипЗначенияСтр(Форма.Параметр.Получить("ВидыДокументов")) = "СписокЗначений" Тогда
			СписокВидов = Форма.Параметр.Получить("ВидыДокументов");
			СписокДокументов.УдалитьВсе();
			НачДата = НачГода(РабочаяДата());
		    Для а = 1 по СписокВидов.РазмерСписка() Цикл
				// Найдем документ этого вида с самой поздней датой.
				Док = СоздатьОбъект("Документ." + СписокВидов.ПолучитьЗначение(а));
				Док.ОбратныйПорядок(1);
				Если Док.ВыбратьДокументы(НачГода(РабочаяДата()), РабочаяДата()) = 1 Тогда
					Док.ПолучитьДокумент();
					ДатаПоследнегоДокумента = Док.ТекущийДокумент().ДатаДок + 1;
				Иначе
					ДатаПоследнегоДокумента = НачГода(РабочаяДата());
				КонецЕсли;
				НачДата = ?(ДатаПоследнегоДокумента > НачДата, ДатаПоследнегоДокумента, НачДата);
				
				// Дополним реквизит формы СписокДокументов документом очередного вида.
				СписокДокументов.ДобавитьЗначение(Док.Вид(), Док.ПредставлениеВида());
				СписокДокументов.Пометка(а, 1);
			КонецЦикла;
			КонДата = Макс(НачДата, РабочаяДата());
			Возврат 1;
		КонецЕсли;
		
	Иначе
		НачДата = НачалоПериодаБИ();
		КонДата = КонецПериодаБИ();
		Если ФлагЧтенияНастройки = 0 Тогда
			СписокВидов = СоздатьОбъект("СписокЗначений");
			СписокВидов.ДобавитьЗначение("ПоступленияДенежныхСредств");
			СписокВидов.ДобавитьЗначение("РасходДенежныхСредств");
			СписокВидов.ДобавитьЗначение("ОперацииПриобретенияИмущества");
			СписокВидов.ДобавитьЗначение("ОперацииВыбытияИмущества");
			СписокВидов.ДобавитьЗначение("РасходыНаОплатуТруда");
			СписокВидов.ДобавитьЗначение("НачислениеНалогов");
			СписокВидов.ДобавитьЗначение("НачислениеШтрафныхСанкций");
			СписокВидов.ДобавитьЗначение("ЗачетЗадолженности");
			СписокВидов.ДобавитьЗначение("РасчетКурсовыхРазниц");
			СписокВидов.ДобавитьЗначение("СписаниеМатериаловТоваровПродукции");
			
			Для а = 1 по СписокВидов.РазмерСписка() Цикл
				ДокВид = СписокВидов.ПолучитьЗначение(а);
				ДокПредставление = Метаданные.Документ(ДокВид).Представление();
				СписокДокументов.ДобавитьЗначение(ДокВид, ДокПредставление);
				СписокДокументов.Пометка(а, 1);
			КонецЦикла;
		КонецЕсли;
		Возврат 1;
	КонецЕсли;
	
	Возврат 0;
	
КонецФункции // ДействияПриОткрытии()


///////////////////////////////////////////////////////////////////////////////
// ПРЕДОПРЕДЕЛЕННЫЕ ПРОЦЕДУРЫ
//

//*****************************************************************************
// Предопределенная процедура
//
Процедура ПриОткрытии(ФлагЧтенияНастройки)
	
	СтатусВозврата(ДействияПриОткрытии(ФлагЧтенияНастройки));

КонецПроцедуры // ПриОткрытии()

//*****************************************************************************
// Предопределенная процедура
//
Процедура ПриПовторномОткрытии()
	
	СтатусВозврата(ДействияПриОткрытии());

КонецПроцедуры // ПриПовторномОткрытии()


///////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ
//

СписокЭлементовРасходов = СоздатьОбъект("СписокЗначений");