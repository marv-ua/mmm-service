Перем КаталогИТС;
Перем ТаблицаИзменений;
Перем ИДСправочника;
Перем Файл;
Перем Именительный;
Перем СпрКлассиф;
Перем КаталогБазы;
Перем ОтображениеГрупп;  // 1 - есть, 0 - нет специальные поля опредаляюще наличие вышестоящего уровня
Перем РС; //  = РазделительСтрок
Перем СписокРеквизитов;

//******************************************************************************
// УстановитьКаталогБазы()
//
// Описание:
//  Определяет в каком каталоге должен находится классификатор.
//
Процедура УстановитьКаталогБазы()
	
	КаталогБазы = "";
	Если Метаданные.Константа("КаталогКлассификаторов").Выбран() = 1 Тогда
		КаталогБазы = СокрЛП(Константа.ПолучитьАтрибут("КаталогКлассификаторов"));
	КонецЕсли;
	
	Если ПустаяСтрока(КаталогБазы) = 1 Тогда
		КаталогБазы = КаталогИБ() + "ExtDb\";
	КонецЕсли;
	
	Если Прав(КаталогБазы, 1) <> "\" Тогда
		КаталогБазы = КаталогБазы + "\";
	КонецЕсли;
	
	КаталогБазы = СокрЛП(КаталогБазы);
	
КонецПроцедуры	//УстановитьКаталогБазы

//*****************************************************************************
// УбратьИзТекстаРазделители()
//
// Параметры: 
//  Текст - передаваемая строка
//
// Возвращаемое значение:
//  Строка без разделителей (" " - пробел, "-" - тире, "." - точка, 
//                           "," - запятая, """ - кавычка, "(", ")" - скобка).
//
// Описание:
//  Возвращает текст без разделителей
// 
//
Функция УбратьИзТекстаРазделители(Текст);
	
	Текст = СтрЗаменить(Текст," ","");
	Текст = СтрЗаменить(Текст,"-","");
	Текст = СтрЗаменить(Текст,".","");
	Текст = СтрЗаменить(Текст,",","");
	Текст = СтрЗаменить(Текст,"""","");
	Текст = СтрЗаменить(Текст,"(","");
	Текст = СтрЗаменить(Текст,")","");
	Возврат Врег(Текст);
	
КонецФункции // УбратьИзТекстаРазделители()

//*****************************************************************************
// ПроверитьИндексныйФайл(БазаКлассиф)
//
// Параметры:
//  БазаКлассиф (объект "XBase").
//
// Описание:
//  Проверяет на существование и на наличие нужных индексов индексный файл.
//  В случае если условия не выполняется осуществляет индексирование.
//
Процедура ПроверитьИндексныйФайл(БазаКлассиф)
	
	ФайлБазы   = КаталогБазы + Файл + ".DBF";
	ФайлИндекс = СтрЗаменить(ФайлБазы, ".DBF", ".CDX");
	Если (ФС.СуществуетФайл(ФайлИндекс) = 1) Тогда
		БазаКлассиф.ОткрытьФайл(ФайлБазы, ФайлИндекс, 0);
		
		Если БазаКлассиф.Открыта() = 1 Тогда
			
			Если ОтображениеГрупп = 0 Тогда
				
				ОтображениеГрупп = 1;
				Для Индекс = 1 По БазаКлассиф.КоличествоПолей() Цикл
					
					НаименованиеПоля = ""; ТипПоля = ""; ДлинаПоля = 0; ТочностьПоля = 0;
					БазаКлассиф.ОписаниеПоля(Индекс, НаименованиеПоля, ТипПоля, ДлинаПоля, ТочностьПоля);
					Если (НаименованиеПоля = "CODEGR") ИЛИ (НаименованиеПоля = "TGROUP") Тогда
						ОтображениеГрупп = ОтображениеГрупп + 1;
					КонецЕсли;
					
				КонецЦикла;
				ОтображениеГрупп = ?(ОтображениеГрупп = 3, 1, 2);
				
			КонецЕсли;
			
			ВсегоИндексовВБазе = ",";
			Для Номер = 1 По БазаКлассиф.КоличествоИндексов() Цикл
				Название = "";Выражение = "";Уникальность = "";Убывание = "";Фильтр = "";
				БазаКлассиф.ОписаниеИндекса(Номер, Название, Выражение, Уникальность, Убывание, Фильтр);
				ВсегоИндексовВБазе = ВсегоИндексовВБазе + Название + ",";
			КонецЦикла;
			
			Индексы =	"CODE," + ?(ОтображениеГрупп = 1, "GROUP,", "");
						
			Для Номер = 1 По СтрЧислоВхождений(Индексы, ",") Цикл
				
				Значение = Индексы;
				Если Найти(Значение, ",") > 0 Тогда
					Значение = Сред(Значение, 1, Найти(Значение, ",") - 1);
					Индексы  = Сред(Индексы, Найти(Индексы, ",") + 1);
				КонецЕсли;
				Если Найти(ВсегоИндексовВБазе, "," + Значение + ",") = 0 Тогда
					// не нашли нужный индекс, базу надо переиндексировать
					БазаКлассиф.ЗакрытьФайл();
					Прервать;
				КонецЕсли;
				
			КонецЦикла;
	
		КонецЕсли;
	КонецЕсли;
		
	Если БазаКлассиф.Открыта() = 0 Тогда
		
		БазаКлассиф.ОткрытьФайл(ФайлБазы, "", 0);
		
		Если БазаКлассиф.Открыта() = 1 Тогда
		
			Если ОтображениеГрупп = 0 Тогда
				
				ОтображениеГрупп = 1;
				Для Индекс = 1 По БазаКлассиф.КоличествоПолей() Цикл
					
					НаименованиеПоля = ""; ТипПоля = ""; ДлинаПоля = 0; ТочностьПоля = 0;
					БазаКлассиф.ОписаниеПоля(Индекс, НаименованиеПоля, ТипПоля, ДлинаПоля, ТочностьПоля);
					Если (НаименованиеПоля = "CODEGR") ИЛИ (НаименованиеПоля = "TGROUP") Тогда
						ОтображениеГрупп = ОтображениеГрупп + 1;
					КонецЕсли;
					
				КонецЦикла;
				ОтображениеГрупп = ?(ОтображениеГрупп = 3, 1, 2);
				
			КонецЕсли;
			
			БазаКлассиф.КодоваяСтраница(1);
			
			Если ОтображениеГрупп = 1 Тогда
				БазаКлассиф.ДобавитьИндекс("GROUP", "CODEGR", 0, 0, "");
			КонецЕсли;
			
			БазаКлассиф.ДобавитьИндекс("CODE",  "CODE",   1, 0, "");
			
			Состояние("Ждите... Индексируется файл - " + ФайлБазы);
			БазаКлассиф.СоздатьИндексныйФайл(ФайлИндекс);
			
			Если БазаКлассиф.Открыта() = 1 Тогда
				БазаКлассиф.ЗакрытьФайл();
				БазаКлассиф.ОткрытьФайл(ФайлБазы, ФайлИндекс, 0);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры // ПроверитьИндексныйФайл()

//*****************************************************************************
// ОткрытьВнешнийФайл(БазаКлассиф)
//
// Параметры:
//  БазаКлассиф (объект "XBase").
//
// Возвращаемое значение:
//  1 - базу открыта, 0 - база не открыта
// 
// Описание:
//  Открывает внешний классификатор (dbf - файл).
//  В случае если файл открыт возвращает 1.
//
Функция ОткрытьВнешнийФайл(БазаКлассиф)
	
	Перем АтрибутыФайла;
	
	ФайлБазы = СокрЛП(КаталогБазы) + Файл + ".DBF";
	
	Если ФС.СуществуетФайл(ФайлБазы) = 1 Тогда
		
		ФС.АтрибутыФайла(ФайлБазы, , АтрибутыФайла);
		Если Число(Сред(АтрибутыФайла, 1, 1)) = 1 Тогда
			Предупреждение("Невозможно открыть файл" + РС + ФайлБазы + РС + 
			"Установлен атрибут только для чтения.", 60);
		
		Иначе
			ПроверитьИндексныйФайл(БазаКлассиф);
			
			Если БазаКлассиф.Открыта() = 0 Тогда
				Предупреждение("Невозможно открыть файл!" + РС +
				"Возможно, он уже открыт другим пользователем.", 60);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат БазаКлассиф.Открыта();

КонецФункции // ОткрытьВнешнийФайл()

//******************************************************************************
// СформироватьПереченьИзменений()
//
// Возвращаемое значение:
//
// Описание:  
//  Формирует перечень измененных реквизитов справочника.
//
Функция СформироватьПереченьИзменений()
	
	ПереченьИзменений = "";
	Если СписокКлассиф.ТекущаяСтрока()<>0 Тогда
		СтрТаб = "";
		ТекЭлем = СписокКлассиф.ПолучитьЗначение(СписокКлассиф.ТекущаяСтрока());
		ТаблицаИзменений.НайтиЗначение(ТекЭлем,СтрТаб,"Элемент");
		
		Если ТаблицаИзменений.ПолучитьЗначение(СтрТаб,"ПометкаУдаления") = 1 Тогда
			ПереченьИзменений = "Элемент будет помечен на удаление";
			
		Иначе
			Для Номер = 1 По СписокРеквизитов.РазмерСписка() Цикл
				Реквизит  = СписокРеквизитов.ПолучитьЗначение(Номер);
				Значение1 = ТаблицаИзменений.ПолучитьЗначение(СтрТаб, Реквизит);
				Значение2 = ТаблицаИзменений.ПолучитьЗначение(СтрТаб, Реквизит + "Старое");
				Если ТипЗначенияСтр(Значение2) = "Строка" Тогда
					Значение1 = СокрЛП(Значение1);
					Значение2 = СокрЛП(Значение2);
				КонецЕсли;
				
				Если Значение1 <> Значение2 Тогда
					Если Реквизит <> "Наименование" Тогда
						Представление = Метаданные.Справочник(ИДСправочника).Реквизит(Реквизит).Представление();
					Иначе
						Представление = Реквизит;
					КонецЕсли;
					
					Стр = """" + СокрЛП(Представление) + """:" + РС + 
					    "старое значение:" + РС + Значение2 + РС + 
					    "новое значение:" + РС + Значение1 + РС;
					ПереченьИзменений = ПереченьИзменений + Стр + РС;
				КонецЕсли;
				
			КонецЦикла;

		КонецЕсли;
	КонецЕсли;
	
КонецФункции // СформироватьПереченьИзменений()

//******************************************************************************
// ОткрытьСправочник()
//
// Описание:  
//  Открывает форму элемента справочника для просмотра.
//
Процедура ОткрытьСправочник()
	
	ОткрытьФорму(СписокКлассиф.ПолучитьЗначение(СписокКлассиф.ТекущаяСтрока()),,1);
	
КонецПроцедуры // ОткрытьСправочник()

//******************************************************************************
// Установить(Режим = "") 
//
// Параметры: 
//  Режим - строка, режим работы: 
//          "Все" - отметить все строки
//          "Сброс" - снять отметку всех строк
//          "" - инвертировать отметку всех строк
//
// Описание: 
//  Устанавливает, снимает или инвертирует отметки выбора строк.
//
Процедура Установить(Режим = "") 
	
	Для Н = 1 По СписокКлассиф.РазмерСписка() Цикл
		Если Режим = "Все" Тогда
			СписокКлассиф.Пометка(Н, 1);
		ИначеЕсли Режим = "Сброс" Тогда
			СписокКлассиф.Пометка(Н, 0); 
		Иначе
			СписокКлассиф.Пометка(Н, ?(СписокКлассиф.Пометка(Н) = 1, 0, 1)); 
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры // Установить()

//*****************************************************************************
// ОбновитьЭлемент(БазаКлассиф)
//
// Параметры:
//  БазаКлассиф (объект "XBase").
//
// Описание:
//  Добавляет в список измененных элементов
//  Элемент реквизиты которого изменились
//
Процедура ОбновитьЭлемент(БазаКлассиф)
	
	Состояние("Формирование списка изменений элементов справочника " + ИДСправочника);
	Если СписокРеквизитов.НайтиЗначение("ПолнНаименование") > 0 Тогда
		СписокКлассиф.ДобавитьЗначение(СпрКлассиф.ТекущийЭлемент(),"     " + СокрЛП(СпрКлассиф.ПолнНаименование)); 
	Иначе
		СписокКлассиф.ДобавитьЗначение(СпрКлассиф.ТекущийЭлемент(),"     " + СокрЛП(СпрКлассиф.Наименование)); 
	КонецЕсли;
	
	ТаблицаИзменений.НоваяСтрока();
	ТаблицаИзменений.ПометкаУдаления = 0;
	ТаблицаИзменений.Элемент         = СпрКлассиф.ТекущийЭлемент();
	СтрТаб = ТаблицаИзменений.КоличествоСтрок();
	
	Для Номер = 1 По СписокРеквизитов.РазмерСписка() Цикл
		
		Поле     = "";
		Реквизит = СписокРеквизитов.ПолучитьЗначение(Номер, Поле);
		ЗначРеквизита = СпрКлассиф.ПолучитьАтрибут(Реквизит);
		ЗначПоля      = БазаКлассиф.ПолучитьЗначениеПоля(Поле);
		
		ТаблицаИзменений.УстановитьЗначение(СтрТаб, Реквизит + "Старое", ЗначРеквизита);
		Если (Поле = "ADRES") и (ПустаяСтрока(ЗначПоля) = 1) Тогда
			ТаблицаИзменений.УстановитьЗначение(СтрТаб, Реквизит, ЗначРеквизита);
		Иначе
			ТаблицаИзменений.УстановитьЗначение(СтрТаб, Реквизит, ЗначПоля);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры // ОбновитьЭлемент()

//*****************************************************************************
// ФормированиеСпискаИзмененийЭлементовСправочника(БазаКлассиф)
//
// Параметры:
//  БазаКлассиф (объект "XBase").
//
// Описание:
//  Выполняет формирование списка изменений элементов справочника.
//
Процедура ФормированиеСпискаИзмененийЭлементовСправочника(БазаКлассиф)
	
	Состояние("Формирование списка изменений элементов справочника " + ИДСправочника);
	ТаблицаИзменений = СоздатьОбъект("ТаблицаЗначений");
	ТаблицаИзменений.НоваяКолонка("Элемент");
	ТаблицаИзменений.НоваяКолонка("ПометкаУдаления");
	
	Для Номер = 1 По СписокРеквизитов.РазмерСписка() Цикл
		Реквизит = СписокРеквизитов.ПолучитьЗначение(Номер);
		ТаблицаИзменений.НоваяКолонка(Реквизит);
		ТаблицаИзменений.НоваяКолонка(Реквизит + "Старое");
	КонецЦикла;
	
	СпрКлассиф.ПорядокКодов();
	СпрКлассиф.ВыбратьЭлементы(0);
	БазаКлассиф.ТекущийИндекс("CODE");
	Состояние("Формирование списка изменений элементов справочника " + ИДСправочника);
	
	Пока СпрКлассиф.ПолучитьЭлемент() = 1 Цикл
		
		Код = Формат(СпрКлассиф.Код,"С" + Метаданные.Справочник(ИДСправочника).ДлинаКода);
		Если СпрКлассиф.ПометкаУдаления() = 1 Тогда
			Продолжить;
		КонецЕсли;
		
		Если БазаКлассиф.Найти(Код) = 1 Тогда
			
			Для Номер = 1 По СписокРеквизитов.РазмерСписка() Цикл
				Поле     = "";
				Реквизит = СписокРеквизитов.ПолучитьЗначение(Номер, Поле);
				ЗначРеквизита = СпрКлассиф.ПолучитьАтрибут(Реквизит);
				ЗначПоля      = БазаКлассиф.ПолучитьЗначениеПоля(Поле);
				
				Если ТипЗначенияСтр(ЗначРеквизита) = "Строка" Тогда
					ЗначРеквизита = УбратьИзТекстаРазделители(СокрЛП(ЗначРеквизита));
					ЗначПоля      = УбратьИзТекстаРазделители(СокрЛП(ЗначПоля));
				КонецЕсли;
				
				Если (Поле = "ADRES") и (ПустаяСтрока(ЗначПоля) = 1) Тогда
					Продолжить;
				КонецЕсли;
				
				Если ЗначРеквизита <> ЗначПоля Тогда
					ОбновитьЭлемент(БазаКлассиф);
					СписокКлассиф.Пометка(СписокКлассиф.РазмерСписка(),1);
					Прервать;
				КонецЕсли;
				
			КонецЦикла;
			
		Иначе
			//Если ПомечатьНаУдаление = 1 Тогда
			Если СписокРеквизитов.НайтиЗначение("ПолнНаименование") > 0 Тогда
				СписокКлассиф.ДобавитьЗначение(СпрКлассиф.ТекущийЭлемент(),"     " + СокрЛП(СпрКлассиф.ПолнНаименование)); 
			Иначе
				СписокКлассиф.ДобавитьЗначение(СпрКлассиф.ТекущийЭлемент(),"     " + СокрЛП(СпрКлассиф.Наименование)); 
			КонецЕсли;
			СписокКлассиф.Пометка(СписокКлассиф.РазмерСписка(), 0);
			ТаблицаИзменений.НоваяСтрока();
			ТаблицаИзменений.ПометкаУдаления = 1;
			ТаблицаИзменений.Элемент         = СпрКлассиф.ТекущийЭлемент();
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры // ФормированиеСпискаИзмененийЭлементовСправочника()

//*****************************************************************************
// ОбновлениеСправочника()
//
// Описание:
//  Выполняет окончательное обновление справочника 
//  для которых установлена отметка об обновлении.
//
Процедура ОбновлениеСправочника()
	
	Перем СтрТаб;
	
	Для Н = 1 По СписокКлассиф.РазмерСписка() Цикл 
		Если СписокКлассиф.Пометка(Н) = 0 Тогда
			Продолжить;
		КонецЕсли;    
		
		Если СпрКлассиф.НайтиЭлемент(СписокКлассиф.ПолучитьЗначение(Н)) = 1 Тогда
			ТекЭлем  = СпрКлассиф.ТекущийЭлемент();
			Описание = """" + СокрЛП(ТекЭлем.Наименование) + """, код """ + СокрЛП(ТекЭлем.Код) + """.";
			СтрТаб   = 0;
			ТаблицаИзменений.НайтиЗначение(ТекЭлем, СтрТаб, "Элемент");
			
			Если ТаблицаИзменений.ПолучитьЗначение(СтрТаб, "ПометкаУдаления") = 0 Тогда
				
				Для Номер = 1 По СписокРеквизитов.РазмерСписка() Цикл
					Реквизит = СписокРеквизитов.ПолучитьЗначение(Номер);
					СпрКлассиф.УстановитьАтрибут(Реквизит, ТаблицаИзменений.ПолучитьЗначение(СтрТаб, Реквизит));
				КонецЦикла;
				
				Попытка
					СпрКлассиф.Записать();
					Сообщить("Изменен элемент " + Описание);
				Исключение
					Сообщить("Неудачная попытка записи элемента " + Описание + ОписаниеОшибки());
				КонецПопытки;
				
			Иначе
				Попытка
					СпрКлассиф.Удалить(0);
					Сообщить("Помечен на удаление элемент " + Описание);
				Исключение
					Сообщить("Неудачная попытка удаления элемента " + Описание + ОписаниеОшибки());
				КонецПопытки;
			
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;

	Форма.Закрыть();
	
КонецПроцедуры // ОбновлениеСправочника()

//*****************************************************************************
// ПриВыбореТипаОбновления()
//
// Описание:
//  Определяет доступность реквизитов диалога.
//
Процедура ПриВыбореТипаОбновления()
	
	Если (ОбновитьКлассификатор = 0) и (ОбновитьСправочник = 0) Тогда
		Форма.кнПродолжить.Доступность(0);
	Иначе
		Форма.кнПродолжить.Доступность(1);
	КонецЕсли; 
	
	Если ОбновитьКлассификатор = 0 Тогда
		Форма.ВариантЗагрузки.Доступность(0);
		Форма.ВариантЗагрузки1.Доступность(0);
	Иначе
		Форма.ВариантЗагрузки.Доступность(1);
		Форма.ВариантЗагрузки1.Доступность(1);
	КонецЕсли;   

КонецПроцедуры // ПриВыбореТипаОбновления()

//*****************************************************************************
// ОбновитьКлассификатор()
//
// Описание:
//  Обновление внешнего классификатора с диска ИТС.
//
Процедура ОбновитьКлассификатор()
	
	Состояние("Обновляется """ + Именительный + """");
	
	Если ФС.СуществуетФайл(КаталогБазы + "*.*") = 0 Тогда
		ФС.СоздатьКаталог(КаталогБазы);
	КонецЕсли;
	
	Если (ФС.СуществуетФайл(КаталогИТС + Файл + ".EXE") = 1) Тогда
		ФайлИТС = КаталогИТС + Файл + ".EXE";
	Иначе
		ФайлИТС = КаталогИТС + Файл + ".ERT";
	КонецЕсли;
	
	Параметры = СоздатьОбъект("СписокЗначений");
	Параметры.ДобавитьЗначение(КаталогБазы, "Каталог базы");
	Параметры.ДобавитьЗначение(КаталогИТС,  "Каталог загрузки");
	
	Если ВариантЗагрузки = 2 Тогда
		
		ОткрытьФормуМодально("Обработка.ИППБИКсРБК", Параметры);
		
	ИначеЕсли ФС.СуществуетФайл(ФайлИТС) = 1 Тогда
		
		Если Прав(ФайлИТС, 4) = ".EXE" Тогда
			
			Если ФС.СуществуетФайл(КаталогВременныхФайлов() + Файл + ".DBF") = 1 Тогда
				//Для начала проверим нет ли загружаемого файла в каталоге временных файлов
				ФС.УдалитьФайл(КаталогВременныхФайлов() + Файл + ".DBF");
			КонецЕсли;
			
			//Разархивируем файл классификатор в каталог временных файлов
			ТекКаталог = ФС.ТекКаталог();
			ФС.УстТекКаталог(КаталогВременныхФайлов());
			КомандаСистемы(ФайлИТС);
			ФС.УстТекКаталог(ТекКаталог);
			
			Если ФС.СуществуетФайл(КаталогВременныхФайлов() + Файл + ".DBF") = 1 Тогда
				//Если файл классификатор удачно разархивировался скопируем его из каталога временных файлов
				// в каталог где распологаются классификаторы
				ФС.КопироватьФайл(КаталогВременныхФайлов() + Файл + ".DBF", 
				                  КаталогБазы + Файл + ".DBF", 0);
				ФС.УдалитьФайл(КаталогВременныхФайлов() + Файл + ".DBF");
			КонецЕсли;
			
			Параметры.УдалитьВсе();
			Параметры.ДобавитьЗначение(1, "Классификатор обновлен"); 
			
		Иначе
			
			ОткрытьФормуМодально("Отчет", Параметры, ФайлИТС);
			
		КонецЕсли;
		
	Иначе
		Предупреждение("Файл """ + ФайлИТС + """ не найден!", 60);
		 
	КонецЕсли;

	ОбновленКлассификатор = 0;
	Если ТипЗначенияСтр(Параметры) = "СписокЗначений" Тогда
		ОбновленКлассификатор = Параметры.ПолучитьЗначение(1);
	КонецЕсли;
	
	Если ОбновленКлассификатор = 1 Тогда
		Форма.Параметр = 1;
		Если ФС.СуществуетФайл(КаталогБазы + Файл + ".CDX") = 1 Тогда
			ФС.УдалитьФайл(КаталогБазы + Файл + ".CDX");
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ОбновитьКлассификатор()

//*****************************************************************************
// ОбновлениеИБ()
//
// Описание:
//  Обновление внешнего классификатора и справочников.
//  Подготавливает диалог для обновления справочника.
//  Либо, в случае если зэлементы не изменялись закрывает диалог.
//
Процедура ОбновлениеИБ()
	
	Если ОбновитьКлассификатор = 1 Тогда
		
		Если ВариантЗагрузки = 1 Тогда
			// Загрузка классификатора с диска ИТС
			Пока 1 = 1 Цикл
				КаталогИТС = "";
				Для Индекс = 68 По 90 Цикл      
					Если (ФС.СуществуетФайл(Симв(Индекс) + ":\1CITS\EXE\EXTDB\" + Файл + ".ERT") = 1) ИЛИ 
					     (ФС.СуществуетФайл(Симв(Индекс) + ":\1CITS\EXE\EXTDB\" + Файл + ".EXE") = 1) Тогда
						КаталогИТС = Симв(Индекс) + ":\1CITS\EXE\EXTDB\";
						Прервать;
					КонецЕсли;
				КонецЦикла;
				Если ПустаяСтрока(КаталогИТС) = 0 Тогда
					ОбновитьКлассификатор();
					Прервать;
				ИначеЕсли Вопрос("Не найден загружаемый классификатор!
				                 |Возможно, не установлен диск ИТС. Загрузка
								 |с диска ИТС возможна, начиная с октября 2000 года.",5) = 2 Тогда
					Возврат;
				КонецЕсли;
			КонецЦикла;
			
		ИначеЕсли ВариантЗагрузки = 2 Тогда
			ОбновитьКлассификатор();
			
		КонецЕсли;
		
	КонецЕсли;
	
	БазаКлассиф = СоздатьОбъект("XBase");
	Если ОбновитьСправочник = 1 Тогда
		Если ОткрытьВнешнийФайл(БазаКлассиф) = 1 Тогда
			
			СписокКлассиф.УдалитьВсе(); 
			ФормированиеСпискаИзмененийЭлементовСправочника(БазаКлассиф);
			Форма.ИспользоватьСлой("ОбновлениеСправочника",2);
			Если СписокКлассиф.РазмерСписка() = 0 Тогда
				Форма.Закрыть();
			КонецЕсли;
			
		КонецЕсли;
		
	ИначеЕсли (ОбновитьКлассификатор = 1) и (ОткрытьВнешнийФайл(БазаКлассиф) = 1) Тогда
		Форма.Закрыть();
		
	КонецЕсли;
	
КонецПроцедуры // ОбновлениеИБ()

//******************************************************************************
// Предопределенная процедура
//
Процедура ПриОткрытии()
	
	ИДСправочника      = Форма.Параметр;
	ВариантЗагрузкиИТС = 1;
	ВариантЗагрузкиРБК = 0;
	ДополСлой          = "";
	СписокРеквизитов = СоздатьОбъект("СписокЗначений");
	СписокРеквизитов.ДобавитьЗначение("Наименование", "NAME");
	
	Если ИДСправочника = "Банки" Тогда
		Файл = "BIK";
		ВариантЗагрузкиРБК = 1;
		ДопПредставление  = "банков РФ";
		ДополСлой = ",ВариантЗагрузкиРБК";
		СписокРеквизитов.ДобавитьЗначение("КоррСчет",        "KORSHET");
		СписокРеквизитов.ДобавитьЗначение("Адрес",           "ADRES");
		СписокРеквизитов.ДобавитьЗначение("Местонахождение", "GOR");
		
	ИначеЕсли ИДСправочника = "Валюты" Тогда
		Файл = "VAL";
		ДопПредставление  = "валют";
		СписокРеквизитов.ДобавитьЗначение("ПолнНаименование", "PNAME");
		
	ИначеЕсли (ИДСправочника = "ОКЕИ") ИЛИ (ИДСправочника = "ЕдиницыИзмерений") Тогда
		Файл = "OKEI";
		ДопПредставление  = "единиц измерения";
		СписокРеквизитов.ДобавитьЗначение("ПолнНаименование", "PNAME");
		
	Иначе
		СтатусВозврата(0);
		Возврат; 
		
	КонецЕсли; 
	
	Именительный = "Классификатор "  + ДопПредставление; 
	Родительный  = "Классификатора " + ДопПредставление; 
	Дательный    = "Классификатору " + ДопПредставление;
	
	Стр = "Вы можете загрузить (обновить) """ + Именительный + """";
	Если ВариантЗагрузкиИТС = 1 Тогда
		Стр = Стр + РС + "с диска ""Информационно-технологическое сопровождение программ ""1С:Предприятие"".";
	КонецЕсли; 
	
	Если ВариантЗагрузкиРБК = 1 Тогда
		Стр = Стр + РС + "или с web-сайта агентства ""РосБизнесКонсалтинг"" (www.rbc.ru).";
	КонецЕсли; 
		
	Справочник = Метаданные.Справочник(ИДСправочника).Представление();
	Форма.Заголовок("Обновление """ + Родительный + """", 0);
	
	Форма.Текст1.Заголовок(Стр);
	
	Стр = "Загрузить """ + Именительный + """";
	Форма.ОбновитьКлассификатор.Заголовок(Стр);
	
	Стр = "Вы можете обновить существующие элементы справочника """ + Справочник + """,
		|приведя их в соответствие """ + Дательный + """.";
	Форма.Текст2.Заголовок(Стр);
		   
	Стр = "Указанные элементы справочника """ + Справочник + """ не соответствуют 
		|""" + Дательный + """ (или отсутствуют в нем).
		|Отметьте элементы справочника, которые следует обновить (или удалить).";
	Форма.Текст3.Заголовок(Стр);
	
	Стр = "Обновить  элементы справочника """ + Справочник + """";
	Форма.ОбновитьСправочник.Заголовок(Стр);
	
	СпрКлассиф = СоздатьОбъект("Справочник." + ИДСправочника);
	УстановитьКаталогБазы();
	
	ОбновитьКлассификатор = 1;
	Если ФС.СуществуетФайл(КаталогБазы + Файл + ".DBF") = 0 Тогда
		Форма.ОбновитьКлассификатор.Доступность(0);
	Иначе
		Форма.ОбновитьКлассификатор.Доступность(1);
	КонецЕсли;
	
	Если СпрКлассиф.ВыбратьЭлементы(0) = 0 Тогда
		Форма.Текст2.Доступность(0);
		Форма.ОбновитьСправочник.Доступность(0);
		ОбновитьСправочник = 0;
	Иначе
		Форма.Текст2.Доступность(1);
		Форма.ОбновитьСправочник.Доступность(1);
		ОбновитьСправочник = 1;
	КонецЕсли;
		
	Форма.ИспользоватьСлой("ОбновлениеКлассификатора" + ДополСлой,2);
	ПриВыбореТипаОбновления();
	
	Форма.Параметр = 0;

КонецПроцедуры // ПриОткрытии()

ВариантЗагрузки  = 1;	
ОтображениеГрупп = 0;
РС = РазделительСтрок;
