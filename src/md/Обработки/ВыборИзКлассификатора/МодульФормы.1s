// При вызове передаются параметры в виде списка значений:
//  1-й элемент списка содержит "Идентификатор вызвавшего справочника"
//  2-й элемент списка содержит код группы (Код элемента справочника "Родитель")
//      в случае, если вызов произошел из какойто группы справочника
//  3-й элемент списка содержит тип вызова  обработки типа число:
//      0 - для выбора 1 элемента
//      1 - для подбора элементов.
//	
// КНОПКА ПО УМОЛЧАНИЮ "Выбрать".

//******************************************************************************

Перем СписокРеквизитов;
Перем ТипВыбора;         // Вариант открытия диалога, передается из вызывающей формы
                         // (0 - для выбора одного значения,1 - для подбора нескольких значений)
Перем ВремТаблица;       // Временная таблица для заполнения 
Перем ИДСправочника;     // Идентификатор справочника для которого открываем классификатор
Перем НаименованиеФайла; // Наименование внешнего файла (это и есть классификатор)
Перем СпрКлассиф;        // Справочник 
Перем КаталогБазы;       // Непосредственно XBase таблица
Перем ТекущийУровень;    // Номер текущего уровня вложенности классификатора
Перем ОтображениеГрупп;  // 1 - есть, 0 - нет специальные поля опредаляюще наличие вышестоящего уровня

//******************************************************************************
// УстановитьКаталогБазы()
//
// Описание:
//  Определяет в каком каталоге должен находится классификатор.
//
Процедура УстановитьКаталогБазы()
	
	КаталогБазы = "";
	Если Метаданные.Константа("КаталогКлассификаторов").Выбран() = 1 Тогда
		КаталогБазы=СокрЛП(Константа.ПолучитьАтрибут("КаталогКлассификаторов"));
	КонецЕсли;
	
	Если ПустаяСтрока(КаталогБазы) = 1 Тогда
		КаталогБазы = КаталогИБ() + "ExtDb\";
	КонецЕсли;
	
	Если Прав(КаталогБазы, 1) <> "\" Тогда
		КаталогБазы = КаталогБазы + "\";
	КонецЕсли;
	
	КаталогБазы = СокрЛП(КаталогБазы);
	
КонецПроцедуры	//УстановитьКаталогБазы

//******************************************************************************
// УстановитьЗначениеСправочника(Реквизит, Стр)
//
// Параметры:
//  Реквизит - Идентификатор поля справочника.
//  Стр      - число, номер строки таблицы значений
//
// Описание:
//  Определяет есть ли поле в базе и колонка таблицы по переданному
//  идентификатору, если есть то значение из таблицы записывается в
//  справочник.
//
Процедура УстановитьЗначениеСправочника(Реквизит, Стр)
	
	МДРеквизит = Метаданные.Справочник(ИДСправочника).Реквизит(Реквизит);
	Установить = 1;
	
	Если МДРеквизит.Выбран() = 1 Тогда 
		Если (СпрКлассиф.ЭтоГруппа() = 1) и (МДРеквизит.Использование = "ДляЭлемента") Тогда
			Установить = 0;
		ИначеЕсли (СпрКлассиф.ЭтоГруппа() = 0) и (МДРеквизит.Использование	= "ДляГруппы") Тогда
			Установить = 0;
		КонецЕсли;
		
	ИначеЕсли (Реквизит <> "Наименование") и (Реквизит <> "Код") Тогда 
		Установить = 0;
		
	КонецЕсли;
	
	Если Установить = 1 Тогда
		СпрКлассиф.УстановитьАтрибут(Реквизит, ТаблицаКлассиф.ПолучитьЗначение(Стр, Реквизит));
	КонецЕсли;
		
КонецПроцедуры // УстановитьЗначениеСправочника()

//******************************************************************************
// ВывестиПолноеНаименование()
//
// Возвращаемое значение:
//   Полное наименование элемента.
//
Функция ВывестиПолноеНаименование()
	
	Если ТаблицаКлассиф.ТекущаяСтрока() > 0 Тогда
		Если СписокРеквизитов.НайтиЗначение("ПолнНаименование") > 0 Тогда
			Возврат ТаблицаКлассиф.ПолнНаименование;
		Иначе
			Возврат ТаблицаКлассиф.Наименование;
		КонецЕсли;
	КонецЕсли;
	
КонецФункции // ВывестиПолноеНаименование()

//*****************************************************************************
// ПриВыбореТипаСортировки(КодЭлемента = "")
//
// Параметры:
//  КодЭлемента (строка) - код текущего элемента таблицы значений при вызове из диалога.
//
// Вызывается из формул элементов диалога:
//  СписокСортировки.
//
// Описание:
//  Производит сортировку таблицы классификатора по выбранной колонке.
//
Процедура ПриВыбореТипаСортировки(КодЭлемента = "")

	Позиция = СписокСортировки.ТекущаяСтрока();

	Если Позиция = 0 Тогда
		Позиция = СписокСортировки.НайтиЗначение(ВосстановитьЗначение("ТипСортировкиКлассификатора"+ИДСправочника));
	КонецЕсли;
	
	Позиция = ?(Позиция = 0, 1, Позиция);
	СписокСортировки.ТекущаяСтрока(Позиция);
	
	Если ПустаяСтрока(СписокСортировки.ПолучитьЗначение(Позиция)) = 0 Тогда
		ТаблицаКлассиф.Сортировать("Уровень," + СписокСортировки.ПолучитьЗначение(Позиция));
	Иначе
		ТаблицаКлассиф.Сортировать("Уровень");
	КонецЕсли;
	
	Если ПустоеЗначение(КодЭлемента) = 0 Тогда 
		ТекСтрока = 0;
		ТаблицаКлассиф.НайтиЗначение(КодЭлемента,ТекСтрока,"Код");
		ТаблицаКлассиф.ТекущаяСтрока(ТекСтрока);
	КонецЕсли;
	
КонецПроцедуры // ПриВыбореТипаСортировки()

//*****************************************************************************
// ПриВыбореЭлементаКлассиф()
//
// Описание:
//  Вызывается из элемента диалога КнопкаВыбор.
//  Записывает в выбранный справочник классификатора
//  элемент со всей структурой вложенности (группы)
//  в соответствии со структурой внешнего классификатора
//  и количеством уровней предусмотренном в справочнике.
//
Процедура ПриВыбореЭлементаКлассиф()
	
	Если (ТаблицаКлассиф.НомерСтроки = 0) Тогда
		Возврат;
	КонецЕсли; 
		
	Если СпрКлассиф.НайтиПоКоду(ТаблицаКлассиф.Код, 0) = 0 Тогда
		
		Уровень = Мин(Метаданные.Справочник(ИДСправочника).КоличествоУровней, ТекущийУровень);
		СпрКлассиф.ИспользоватьРодителя(ПолучитьПустоеЗначение("Справочник." + ИДСправочника));
		
		Для Индекс = 1 По Уровень Цикл
			
			Стр = ?(Индекс = Уровень, ТаблицаКлассиф.ТекущаяСтрока(), Индекс);
			
			КодРеквизита = ТаблицаКлассиф.ПолучитьЗначение(Стр, "Код");
			
			Если СпрКлассиф.НайтиПоКоду(КодРеквизита, 0) = 0 Тогда
				
				Если (ТаблицаКлассиф.ПолучитьЗначение(Стр, "ЭтоГруппа") = 1) И 
				     (Индекс < Метаданные.Справочник(ИДСправочника).КоличествоУровней) Тогда
					СпрКлассиф.НоваяГруппа();
				Иначе
					СпрКлассиф.Новый();
				КонецЕсли;
				
				Для Номер = 1 По СписокРеквизитов.РазмерСписка() Цикл
					Реквизит = СписокРеквизитов.ПолучитьЗначение(Номер);
					УстановитьЗначениеСправочника(Реквизит, Стр);
				КонецЦикла; 
				
				СпрКлассиф.Записать();
				
			КонецЕсли;
			
			Если СпрКлассиф.ЭтоГруппа() = 1 Тогда
				СпрКлассиф.ИспользоватьРодителя(СпрКлассиф.ТекущийЭлемент());
			КонецЕсли;
			
		КонецЦикла;
			
	КонецЕсли;

	Форма.Параметр = СпрКлассиф.ТекущийЭлемент();
		
	Если ТипВыбора=0 Тогда
		// Если форма открыта для выбора 1-го значения, закроем форму.
		Форма.Закрыть();
		
	КонецЕсли;
	
КонецПроцедуры // ПриВыбореЭлементаКлассиф()

//*****************************************************************************
// ПроверитьИндексныйФайл(БазаКлассиф)
//
// Параметры:
//  БазаКлассиф (объект "XBase").
//
// Описание:
//  Проверяет на существование и на наличие нужных индексов индексный файл.
//  В случае если условия не выполняется осуществляет индексирование.
//
Процедура ПроверитьИндексныйФайл(БазаКлассиф)
	
	ФайлБазы   = КаталогБазы + НаименованиеФайла + ".DBF";
	ФайлИндекс = СтрЗаменить(ФайлБазы, ".DBF", ".CDX");
	Если (ФС.СуществуетФайл(ФайлИндекс) = 1) Тогда
		БазаКлассиф.ОткрытьФайл(ФайлБазы, ФайлИндекс, 0);
		
		Если БазаКлассиф.Открыта() = 1 Тогда
			
			Если ОтображениеГрупп = 0 Тогда
				
				ОтображениеГрупп = 1;
				Для Индекс = 1 По БазаКлассиф.КоличествоПолей() Цикл
					
					Поле = ""; ТипПоля = ""; ДлинаПоля = 0; ТочностьПоля = 0;
					БазаКлассиф.ОписаниеПоля(Индекс, Поле, ТипПоля, ДлинаПоля, ТочностьПоля);
					Если (Поле = "CODEGR") или (Поле = "TGROUP") Тогда
						ОтображениеГрупп = ОтображениеГрупп + 1;
					КонецЕсли;
					
				КонецЦикла;
				ОтображениеГрупп = ?(ОтображениеГрупп = 3, 1, 2);
				
			КонецЕсли;
			
			ВсегоИндексовВБазе = ",";
			Для Номер = 1 По БазаКлассиф.КоличествоИндексов() Цикл
				Название = "";Выражение = "";Уникальность = "";Убывание = "";Фильтр = "";
				БазаКлассиф.ОписаниеИндекса(Номер, Название, Выражение, Уникальность, Убывание, Фильтр);
				ВсегоИндексовВБазе = ВсегоИндексовВБазе + Название + ",";
			КонецЦикла;
			
			Индексы =	"CODE," + ?(ОтображениеГрупп = 1, "GROUP,", "");
						
			Для Номер = 1 По СтрЧислоВхождений(Индексы, ",") Цикл
				
				Значение = Индексы;
				Если Найти(Значение, ",") > 0 Тогда
					Значение = Сред(Значение, 1, Найти(Значение, ",") - 1);
					Индексы  = Сред(Индексы, Найти(Индексы, ",") + 1);
				КонецЕсли;
				Если Найти(ВсегоИндексовВБазе, "," + Значение + ",") = 0 Тогда
					// не нашли нужный индекс, базу надо переиндексировать
					БазаКлассиф.ЗакрытьФайл();
					Прервать;
				КонецЕсли;
				
			КонецЦикла;
	
		КонецЕсли;
	КонецЕсли;
		
	Если БазаКлассиф.Открыта() = 0 Тогда
		
		БазаКлассиф.ОткрытьФайл(ФайлБазы, "", 0);
		
		Если БазаКлассиф.Открыта() = 1 Тогда
		
			Если ОтображениеГрупп = 0 Тогда
				
				ОтображениеГрупп = 1;
				Для Индекс = 1 По БазаКлассиф.КоличествоПолей() Цикл
					
					Поле = ""; ТипПоля = ""; ДлинаПоля = 0; ТочностьПоля = 0;
					БазаКлассиф.ОписаниеПоля(Индекс, Поле, ТипПоля, ДлинаПоля, ТочностьПоля);
					Если (Поле = "CODEGR") или (Поле = "TGROUP") Тогда
						ОтображениеГрупп = ОтображениеГрупп + 1;
					КонецЕсли;
					
				КонецЦикла;
				ОтображениеГрупп = ?(ОтображениеГрупп = 3, 1, 2);
				
			КонецЕсли;
			
			БазаКлассиф.КодоваяСтраница(1);
			
			Если ОтображениеГрупп = 1 Тогда
				БазаКлассиф.ДобавитьИндекс("GROUP", "CODEGR", 0, 0, "");
			КонецЕсли;
			
			БазаКлассиф.ДобавитьИндекс("CODE",  "CODE",   1, 0, "");
			
			Состояние("Ждите... Индексируется файл - " + ФайлБазы);
			БазаКлассиф.СоздатьИндексныйФайл(ФайлИндекс);
			
			Если БазаКлассиф.Открыта() = 1 Тогда
				БазаКлассиф.ЗакрытьФайл();
				БазаКлассиф.ОткрытьФайл(ФайлБазы, ФайлИндекс, 0);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры // ПроверитьИндексныйФайл()

//*****************************************************************************
// ОткрытьВнешнийФайл(БазаКлассиф)
//
// Параметры:
//  БазаКлассиф (объект "XBase").
//
// Возвращаемое значение:
//  1 - базу открыта, 0 - база не открыта
// 
// Описание:
//  Открывает внешний классификатор (dbf - файл).
//  В случае если файл открыт возвращает 1.
//
Функция ОткрытьВнешнийФайл(БазаКлассиф)
	
	Перем АтрибутыФайла;
	
	ФайлБазы = СокрЛП(КаталогБазы) + НаименованиеФайла + ".DBF";
	
	Если ФС.СуществуетФайл(ФайлБазы) = 1 Тогда
		
		ФС.АтрибутыФайла(ФайлБазы, , АтрибутыФайла);
		Если Число(Сред(АтрибутыФайла, 1, 1)) = 1 Тогда
			Предупреждение("Невозможно открыть файл" + РазделительСтрок +
			ФайлБазы + РазделительСтрок + 
			"Установлен атрибут только для чтения.", 60);
		
		Иначе
			ПроверитьИндексныйФайл(БазаКлассиф);
			
			Если БазаКлассиф.Открыта() = 0 Тогда
				Предупреждение("Невозможно открыть файл!" + РазделительСтрок +
				"Возможно, он уже открыт другим пользователем.", 60);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат БазаКлассиф.Открыта();

КонецФункции // ОткрытьВнешнийФайл()

//*****************************************************************************
// ДобавитьСтрокуВТаблицуКлассиф(БазаКлассиф)
//
// Параметры:
//  БазаКлассиф (объект "XBase").
//
// Описание:
//  Добавляет элемент в таблицу значений.
//
Процедура ДобавитьСтрокуВТаблицуКлассиф(БазаКлассиф)
	
	ВремТаблица.НоваяСтрока();
	
	ВремТаблица.Уровень      = ТекущийУровень;
	ВремТаблица.ЭтоГруппа    = 2;
	
	Если ОтображениеГрупп = 1 Тогда
		ВремТаблица.КодГруппы    = СокрЛП(БазаКлассиф.CODEGR);
		ВремТаблица.ЭтоГруппа    = БазаКлассиф.TGROUP;
	КонецЕсли; 
	
	ВремТаблица.Картинка     = ?(ВремТаблица.ЭтоГруппа = 1, 1, 3);
	
	Для Номер = 1 По СписокРеквизитов.РазмерСписка() Цикл
		Поле     = "";
		Реквизит = СписокРеквизитов.ПолучитьЗначение(Номер, Поле);
		ЗначПоля = БазаКлассиф.ПолучитьЗначениеПоля(Поле);
		ВремТаблица.УстановитьЗначение(ВремТаблица.КоличествоСтрок(), Реквизит, СокрЛП(ЗначПоля));
	КонецЦикла;
	
КонецПроцедуры // ДобавитьСтрокуВТаблицуКлассиф()

//*****************************************************************************
// ЗаполнитьШапкуТаблицы(БазаКлассиф, КодРодителя)
//
// Параметры:
//  БазаКлассиф (объект "XBase").
//  КодРодителя (строка) - код родителя, из которого производится вызов обработки.
//
// Описание:
//  Заполняет шапку таблицы значений.
//
Процедура ЗаполнитьШапкуТаблицы(БазаКлассиф, КодРодителя)
	
	Для Индекс = 1 По БазаКлассиф.КоличествоПолей() Цикл
		Поле = ""; ТипПоля = ""; ДлинаПоля = 0; ТочностьПоля = 0;
		БазаКлассиф.ОписаниеПоля(Индекс, Поле, ТипПоля, ДлинаПоля, ТочностьПоля);
		Реквизит = СписокРеквизитов.Получить(Поле);
		
		Если Поле = "CODEGR" Тогда
			ТаблицаКлассиф.НоваяКолонка("КодГруппы", "Строка", ДлинаПоля, , "Код группы");
			ТаблицаКлассиф.ВидимостьКолонки("КодГруппы", 0);
			
		ИначеЕсли ПустаяСтрока(Реквизит) = 0 Тогда
			Представление = Реквизит;
			Если Метаданные.Справочник(ИДСправочника).Реквизит(Реквизит).Выбран() = 1 Тогда
				Представление = Метаданные.Справочник(ИДСправочника).Реквизит(Реквизит).Представление();
			КонецЕсли;
			
			ТаблицаКлассиф.НоваяКолонка(Реквизит, "Строка", ДлинаПоля, , Представление, Мин(ДлинаПоля + 3, 30));
			Если СписокСортировки.НайтиЗначение(Реквизит) = 0 Тогда
				ТаблицаКлассиф.ВидимостьКолонки(Реквизит, 0);
			КонецЕсли;
			
			Если (Реквизит = "Код") И (ПустаяСтрока(КодРодителя) = 0) Тогда
				КодРодителя = Формат(СокрЛП(КодРодителя), "С" + ДлинаПоля);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ВремТаблица.Загрузить(ТаблицаКлассиф);
	
	ТаблицаКлассиф.ВыводитьПиктограммы("Картинка",1);
	
КонецПроцедуры // ЗаполнитьШапкуТаблицы()

//*****************************************************************************
// ВыгрузитьВремТаблицуВОсновную()
//
// Описание:
//  Вызывается после заполнения временной таблици.
//  чтобы элементы из нее выгрузить в ТаблицаКлассиф
//
Процедура ВыгрузитьВремТаблицуВОсновную()
	
	Если (ВремТаблица.КоличествоСтрок() = 0) Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаКлассиф.КоличествоСтрок(ВремТаблица.КоличествоСтрок());
	ТаблицаКлассиф.Заполнить(ВремТаблица);
	ПриВыбореТипаСортировки();
	
	Для Индекс = 1 По ТекущийУровень - 1 Цикл
		ТаблицаКлассиф.УстановитьЗначение(Индекс, "Картинка", 2);
	КонецЦикла;
	
	ТаблицаКлассиф.Фиксировать(ТекущийУровень - 1, 0);
	ВремТаблица.УдалитьСтроки();

КонецПроцедуры // ВыгрузитьВремТаблицуВОсновную()

//*****************************************************************************
// ЗаполнитьТаблицуКлассификатора(КодРодителя = "")
//
// Параметры:
//  КодРодителя (строка) - код родителя, из которого производится вызов обработки.
//
// Описание:
//  Вызывается из элемента диалога ТаблицаКлассиф.
//  Формирует таблицу значений по выбранной группе
//  и выполняет выбор значения.
//
Процедура ЗаполнитьТаблицуКлассификатора(КодРодителя = "")

	Перем ТекКол;
	
	Если (ТаблицаКлассиф.НомерСтроки = 0) и (ТаблицаКлассиф.КоличествоСтрок() > 0) Тогда
		Возврат;
	КонецЕсли; 
		
	Если ТаблицаКлассиф.КоличествоСтрок() > 0 Тогда
		Если ТаблицаКлассиф.ЭтоГруппа = 2 Тогда
			ПриВыбореЭлементаКлассиф();Возврат;
		КонецЕсли; 
	КонецЕсли; 
	
	БазаКлассиф = СоздатьОбъект("XBase");
	Если ОткрытьВнешнийФайл(БазаКлассиф) = 1 Тогда
		// Если нам удалось открыть внешний файл 
		// начинаем заполнять таблицу
		Если (ТаблицаКлассиф.КоличествоКолонок() < 4) Тогда
			ЗаполнитьШапкуТаблицы(БазаКлассиф, КодРодителя);
		КонецЕсли; 
		
		ТаблицаКлассиф.ТекущаяКолонка(,ТекКол);
		ТекКол = Макс(ТекКол,4);
		
		КодВерхнегоУровня = "";
		
		Если (ТаблицаКлассиф.КоличествоСтрок() > 0) Тогда
			// Здесь в случае если мы выбрали вышестоящую группу таблицы
			// определим какой уровень на открыть для заполнения
			Если ТекущийУровень > ТаблицаКлассиф.Уровень Тогда
				КодВерхнегоУровня = ТаблицаКлассиф.Код;
				
				Если ТаблицаКлассиф.Уровень = 1 Тогда
					ТаблицаКлассиф.УдалитьСтроки();
				Иначе
					ТекущийУровень = ТаблицаКлассиф.Уровень;
				КонецЕсли;
				
			КонецЕсли;
		КонецЕсли;
		
		Если (ПустаяСтрока(КодРодителя) = 0) и (ОтображениеГрупп = 1) Тогда
			// Если мы впервые вызвали данную обработку из некой группы справочника 
			// попробуем в классификаторе открыть эту же группу
			// Для начала пропишем все вышестоящие группы
			КодРодит = КодРодителя;
			БазаКлассиф.ТекущийИндекс("CODE");
			
			Пока 1 = 1 Цикл
				Если (БазаКлассиф.Найти(КодРодит) = 0) или (ПустаяСтрока(КодРодит) = 1) Тогда
					Прервать;
				Иначе
					Если БазаКлассиф.TGROUP = 1  Тогда
						ДобавитьСтрокуВТаблицуКлассиф(БазаКлассиф);
						КодРодит = БазаКлассиф.CODEGR;
					Иначе
						Прервать;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			
			Если ВремТаблица.КоличествоСтрок() > 0 Тогда
				Для Индекс = 1 По ВремТаблица.КоличествоСтрок() Цикл
					ВремТаблица.УстановитьЗначение(Индекс, "Уровень", ВремТаблица.КоличествоСтрок() + 1 - Индекс)
				КонецЦикла;
				
				ВремТаблица.Сортировать("Уровень");
				ТаблицаКлассиф.КоличествоСтрок(ВремТаблица.КоличествоСтрок());
				ТаблицаКлассиф.Заполнить(ВремТаблица);
				ТекущийУровень = ТаблицаКлассиф.КоличествоСтрок();
				ТаблицаКлассиф.ПолучитьСтрокуПоНомеру(ТекущийУровень);
				ТаблицаКлассиф.ТекущаяСтрока(ТекущийУровень);
			КонецЕсли;
			
		КонецЕсли;
		
		Если ОтображениеГрупп = 1 Тогда
			БазаКлассиф.ТекущийИндекс("GROUP");
		КонецЕсли;
		
		Если (ТаблицаКлассиф.КоличествоСтрок() > 0) и (ОтображениеГрупп = 1) Тогда
			// Если мы выбрали группу таблицы 
			// заполним таблицу элементами и группами вошедшими в нее
			// Но сохраним перед этим все вышестоящии группы 
			
			ВремТаблица.КоличествоСтрок(ТекущийУровень);
			ВремТаблица.Заполнить(ТаблицаКлассиф, 1, ТекущийУровень);
			Для Индекс = 1 По ТаблицаКлассиф.КоличествоКолонок() Цикл
				ВремТаблица.УстановитьЗначение(ТекущийУровень, Индекс, ТаблицаКлассиф.ПолучитьЗначение(ТаблицаКлассиф.ТекущаяСтрока(), Индекс));
			КонецЦикла;
			
			ТекущийУровень = ТекущийУровень + 1;
			КодГруппы = ТаблицаКлассиф.Код;
			БазаКлассиф.Найти(КодГруппы);
			
		Иначе
			// Если таблица классификатора пустая
			// заполним ее самый верхний уровень там где код группы пустой
			ТекущийУровень = 1;
			КодГруппы = "";
			БазаКлассиф.Первая();
			
		КонецЕсли;
			
		Пока БазаКлассиф.ВКонце() = 0 Цикл
			Если ОтображениеГрупп = 1 Тогда
				Если СокрЛП(БазаКлассиф.CODEGR) <> СокрЛП(КодГруппы) Тогда
					Прервать;
				КонецЕсли;
			КонецЕсли;
			ДобавитьСтрокуВТаблицуКлассиф(БазаКлассиф);
			БазаКлассиф.Следующая();
		КонецЦикла;
		
		ВыгрузитьВремТаблицуВОсновную();
			
		НомерСтроки = ТекущийУровень;
		Если ПустоеЗначение(КодВерхнегоУровня) = 0 Тогда
			// После отката вверх по уровням установим курсор на той группе на которой мы щелкнули мышкой
			НомерСтроки = 0;
			ТаблицаКлассиф.НайтиЗначение(КодВерхнегоУровня, НомерСтроки, "Код");
		КонецЕсли;
		
		Если НомерСтроки > 0 Тогда
			ТаблицаКлассиф.ТекущаяСтрока(НомерСтроки);
		КонецЕсли;
	
		ТаблицаКлассиф.ТекущаяКолонка(ТекКол);
		
	КонецЕсли;

КонецПроцедуры // ЗаполнитьТаблицуКлассификатора()


//*****************************************************************************
// ОбновлениеКлассификатора()
//
// Описание:
//  Вызывается из элемента диалога Обновить.
//  Открывает обработку ОбновленияКлассификатора.
//
Процедура ОбновлениеКлассификатора()
	
	Если (ИДСправочника = "Банки") ИЛИ 
			(ИДСправочника = "Валюты") ИЛИ 
			(ИДСправочника = "ОКЕИ") ИЛИ
			(ИДСправочника = "ЕдиницыИзмерений") Тогда
		Параметр = ИДСправочника;
		ОткрытьФормуМодально("Обработка.ОбновлениеКлассификатора", Параметр);
		
		Если Параметр = 1 Тогда
			ТаблицаКлассиф.УдалитьСтроки();
			ЗаполнитьТаблицуКлассификатора();
		КонецЕсли;
		
	ИначеЕсли ПустоеЗначение(ИДСправочника) = 0 Тогда
		Предупреждение(СокрЛП(Форма.Заголовок()) + РазделительСтрок + " Файл: """ + НаименованиеФайла + ".DBF"" - отсутствует", 60);
		
	КонецЕсли;
	
КонецПроцедуры // ОбновлениеКлассификатора()

//******************************************************************************
// Предопределенная процедура
//
Процедура ПриЗакрытии()
	
	СохранитьЗначение("ТипСортировкиКлассификатора" + ИДСправочника, СписокСортировки.ПолучитьЗначение(СписокСортировки.ТекущаяСтрока()));
	
КонецПроцедуры // ПриЗакрытии()

//******************************************************************************
// Предопределенная процедура
//
Процедура ПриОткрытии()
	
	Параметры=Форма.Параметр;
	Если ТипЗначенияСтр(Параметры) = "СписокЗначений" Тогда
		ИДСправочника = Параметры.Получить("Вид справочника");
		КодРодителя   = Параметры.Получить("Код родителя");
		ТипВыбора     = Параметры.Получить("Способ выбора");
		//	ТипВыбора 	0 - Выбор элемента
		//				1 - Подбор
	КонецЕсли;
	
	Заголовок=""; 
	СписокРеквизитов = СоздатьОбъект("СписокЗначений");
	СписокРеквизитов.ДобавитьЗначение("Код",          "CODE");
	СписокРеквизитов.ДобавитьЗначение("Наименование", "NAME");
	
	СписокСортировки.ДобавитьЗначение("",             "Без сортировки");
	СписокСортировки.ДобавитьЗначение("Код",          "По коду");
	СписокСортировки.ДобавитьЗначение("Наименование", "По наименованию");
	
	Если ИДСправочника = "Банки" Тогда
		НаименованиеФайла = "BIK";
		Заголовок = "Классификатор банков РФ"; 
		СписокРеквизитов.ДобавитьЗначение("Адрес",           "ADRES");
		СписокРеквизитов.ДобавитьЗначение("КоррСчет",        "KORSHET");
		СписокРеквизитов.ДобавитьЗначение("Местонахождение", "GOR");
		
		СписокСортировки.ДобавитьЗначение("КоррСчет",        "По корр. счету");
		СписокСортировки.ДобавитьЗначение("Местонахождение", "По городу");
		
	ИначеЕсли ИДСправочника = "Валюты" Тогда
		НаименованиеФайла = "Val";
		Заголовок = "Классификатор валют"; 
		СписокРеквизитов.ДобавитьЗначение("ПолнНаименование", "PNAME");
		
		СписокСортировки.ДобавитьЗначение("ПолнНаименование", "По полному наименованию");
		
	ИначеЕсли (ИДСправочника = "ОКЕИ") ИЛИ (ИДСправочника = "ЕдиницыИзмерений") Тогда
		НаименованиеФайла = "OKEI";
		Заголовок = "Классификатор единиц измерения"; 
		СписокРеквизитов.ДобавитьЗначение("ПолнНаименование", "PNAME");
		
		СписокСортировки.ДобавитьЗначение("ПолнНаименование", "По полному наименованию");
		
	Иначе 
		СтатусВозврата(0);
		Возврат;
		
	КонецЕсли; 
    
	Если Метаданные.Справочник(ИДСправочника).Выбран() = 1 Тогда
		СпрКлассиф = СоздатьОбъект("Справочник."+ИДСправочника);   
		
	Иначе
		СтатусВозврата(0);
		Возврат;
		
	КонецЕсли; 
	
	Форма.Заголовок(Заголовок, 0);
	
	УстановитьКаталогБазы();
	
	ТекущийУровень = 0;
	ТаблицаКлассиф.НоваяКолонка("Уровень",	"Число",	6,	,	"",);
	ТаблицаКлассиф.НоваяКолонка("ЭтоГруппа","Число",	1,	,	"",3); 
	ТаблицаКлассиф.НоваяКолонка("Картинка",	"Строка",	1,	,	"",5); 
	
	ТаблицаКлассиф.ВидимостьКолонки("Уровень",   0);
	ТаблицаКлассиф.ВидимостьКолонки("ЭтоГруппа", 0);
	
	Если ФС.СуществуетФайл(КаталогБазы + НаименованиеФайла + ".DBF") = 0 Тогда
		ОбновлениеКлассификатора();
		Если ФС.СуществуетФайл(КаталогБазы + НаименованиеФайла + ".DBF") = 0 Тогда
			СтатусВозврата(0);Возврат;
		КонецЕсли; 
	Иначе
		ЗаполнитьТаблицуКлассификатора(КодРодителя);
	КонецЕсли;
	
	Активизировать("ТаблицаКлассиф");
	
КонецПроцедуры // ПриОткрытии()  

//******************************************************************************

ТипВыбора = 0;
ВремТаблица = СоздатьОбъект("ТаблицаЗначений");
ОтображениеГрупп = 0;
