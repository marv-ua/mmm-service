////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ
// 

Перем	гСтрПуть;
Перем	гИмяФайла;

Перем	гXMLАнализатор;
Перем	гПравила;
Перем	гТабОбъектов;
Перем	СписокВыгружаемыхСчетов;
 
Перем	гПутьОбъекта_КомпонентаV7plus;
Перем	гПутьОбъекта_УниверсальнаяОбработкаВыгрузки;
Перем	гПутьОбъекта_ПравилаКонвертации;

Перем	Текст2;


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ МОДУЛЯ
//

Функция НайтиПервыйСуществующийФайл(СписокВозможныхМест)
	
	Для Сч = 1 По СписокВозможныхМест.РазмерСписка() Цикл
		ПолноеИмя	=	СписокВозможныхМест.ПолучитьЗначение(Сч);
		Если Фс.СуществуетФайл(ПолноеИмя) = 1 Тогда	Возврат(ПолноеИмя)	КонецЕсли;
	КонецЦикла;

	Возврат("");

КонецФункции		//	НайтиПервыйСуществующийФайл()

//******************************************************************************

Функция КаталогРодитель(Знач Стр)
	                            
	Если ПустоеЗначение(Стр) = 1 Тогда Возврат("") КонецЕсли;
	
	Стр	=	СокрЛП(Стр);
	
	Если Прав(Стр, 1) = "\" Тогда
		Стр = Лев(Стр, СтрДлина(Стр)-1);
	КонецЕсли;
	
	Если Найти(Стр, "\") > 0 Тогда
		Пока 1=1 Цикл
			Если Прав(Стр, 1) = "\" Тогда Прервать КонецЕсли;
			Стр = Лев(Стр, СтрДлина(Стр)-1);
		КонецЦикла;
	КонецЕсли;

	Возврат(Стр);
	
КонецФункции

//******************************************************************************

Процедура НачальнаяИнициализация()
	
	РасположениеФайла(гСтрПуть, гИмяФайла);
	
	////////////////////////////////////////////////////////////////////////////////////////////////////
	//	Поиск универсальной обработки выгрузки
	
	Если Метаданные.Обработка("ВыгрузкаДанных").Выбран() = 1 Тогда
		гПутьОбъекта_УниверсальнаяОбработкаВыгрузки	=	"Обработка.ВыгрузкаДанных";
	Иначе
		СписокВозможныхМест	=	СоздатьОбъект("СписокЗначений");
		СписокВозможныхМест.ДобавитьЗначение(	гСтрПуть					+	"CDExport.ert"	);
		СписокВозможныхМест.ДобавитьЗначение(	КаталогРодитель(гСтрПуть)	+	"CDExport.ert"	);
		СписокВозможныхМест.ДобавитьЗначение(	КаталогИБ()	+	"ExtForms\"	+	"CDExport.ert"	);
		СписокВозможныхМест.ДобавитьЗначение(	КаталогИБ()					+	"CDExport.ert"	);
		СписокВозможныхМест.ДобавитьЗначение(	КаталогПрограммы()			+	"CDExport.ert"	);
		
		гПутьОбъекта_УниверсальнаяОбработкаВыгрузки	=	НайтиПервыйСуществующийФайл(СписокВозможныхМест);
	КонецЕсли;
	                                                                                                    
	
	////////////////////////////////////////////////////////////////////////////////////////////////////
	//	Поиск внешней компоненты V7Plus.dll
	
	СписокВозможныхМест	=	СоздатьОбъект("СписокЗначений");
	СписокВозможныхМест.ДобавитьЗначение(	КаталогИБ()					+	"v7plus.dll"	);
	СписокВозможныхМест.ДобавитьЗначение(	КаталогПрограммы()			+	"v7plus.dll"	);
	СписокВозможныхМест.ДобавитьЗначение(	КаталогИБ()	+	"ExtForms\"	+	"v7plus.dll"	);
	СписокВозможныхМест.ДобавитьЗначение(	гСтрПуть					+	"v7plus.dll"	);
	
	гПутьОбъекта_КомпонентаV7plus				=	НайтиПервыйСуществующийФайл(СписокВозможныхМест);
	
	
	////////////////////////////////////////////////////////////////////////////////////////////////////
	//	Поиск правил конвертации
	
	СписокВозможныхМест	=	СоздатьОбъект("СписокЗначений");
	СписокВозможныхМест.ДобавитьЗначение(	КаталогИБ() 				+	"ExtForms\RAc4_Pr2.xml"		);
	СписокВозможныхМест.ДобавитьЗначение(	КаталогИБ() 				+	"RAc4_Pr2.xml"				);
	СписокВозможныхМест.ДобавитьЗначение(	гСтрПуть					+	"RAc4_Pr2.xml"				);
	СписокВозможныхМест.ДобавитьЗначение(	КаталогРодитель(гСтрПуть)	+	"RAc4_Pr2.xml"				);
	
	гПутьОбъекта_ПравилаКонвертации				=	НайтиПервыйСуществующийФайл(СписокВозможныхМест);

	
	////////////////////////////////////////////////////////////////////////////////////////////////////
	//	Инициализация модульных переменных и переменных формы

	ФормИмяФайлаДанных					=	КаталогПользователя()	+	"Ac4_Pr2.xml";
	
	гТабОбъектов		=	СоздатьОбъект("ТаблицаЗначений");
	гТабОбъектов.НоваяКолонка("ИдПравила");
	гТабОбъектов.НоваяКолонка("Тип");
	гТабОбъектов.НоваяКолонка("Вид");
	гТабОбъектов.НоваяКолонка("СписокОбъектов");
	
КонецПроцедуры		//	НачальнаяИнициализация()
              
//******************************************************************************

Функция ЗагрузитьПравилаКонвертации()
	                                        
	Состояние("Выполняется загрузка и проверка файла правил конвертации...");
	
	гПравила		=	гXMLАнализатор.СоздатьДокумент();
	
	Попытка
		гПравила.Загрузить(гПутьОбъекта_ПравилаКонвертации);
	Исключение
		Предупреждение(ОписаниеОшибки());
		Возврат(0);
	КонецПопытки;
	
	Возврат(1);
	
КонецФункции		//	ЗагрузитьПравилаКонвертации()
    
//******************************************************************************
                                                                                                    
Функция ОтделитьРазделителем(Стр, Разделитель, Режим=0)

	ПраваяЧасть			=	"";
	ПозРазделителя		=	Найти(Стр, Разделитель);
	ДлинаРазделителя	=	СтрДлина(Разделитель);
	Если ПозРазделителя > 0 Тогда
		ПраваяЧасть	=	Сред(Стр,		ПозРазделителя + ?(Режим=2, 0, ДлинаРазделителя));
		Стр			=	СокрЛП(Лев(Стр,	ПозРазделителя - ?(Режим=1, -ДлинаРазделителя+1, 1)));
	КонецЕсли;

	Возврат(ПраваяЧасть);
	
КонецФункции		//	ОтделитьРазделителем()



////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ, ВЫЗЫВАЕЫЕ ИЗ ФОРМУЛ ЭЛЕМЕНТОВ ДИАЛОГА

Процедура ОткрытьФайлДляПросмотра(ИмяФайла)
	
	Если ФС.СуществуетФайл(ИмяФайла) = 1 Тогда 
		ЗапуститьПриложение(ИмяФайла);
	Иначе 
		Предупреждение("Файл с таким именем не существует!");					
	КонецЕсли;    
	
КонецПроцедуры		//	ОткрытьФайлДляПросмотра()

//******************************************************************************

Процедура ВыборФайла(ИмяФайла, Фильтр="xml")
	
	Каталог = "";
	Стр = "Файл данных (*." + Фильтр + ")|*." + Фильтр + "";

	Если ФС.ВыбратьФайл(0, ИмяФайла, Каталог, "Выберите файл", Стр, Фильтр, ) = 1 Тогда
	    ИмяФайла = Каталог + ИмяФайла;
	КонецЕсли;
	
КонецПроцедуры		//	ВыборФайла()

//******************************************************************************

Процедура ПриНачалеВыбораЗначения(ИдЭлементаДиалога, Фл)
    
	Если	ИдЭлементаДиалога = "ФормИмяФайлаДанных"	Тогда
	         
		ВыборФайла(ФормИмяФайлаДанных, "xml");
		
	КонецЕсли;
	
КонецПроцедуры		//	ПриНачалеВыбораЗначения()

//******************************************************************************

Функция Текст()
	
	Если ФормСписокСчетов.ТекущаяСтрока()=0 Тогда ФормСписокСчетов.ТекущаяСтрока(1); КонецЕсли;

	Счет	=	ФормСписокСчетов.ПолучитьЗначение(ФормСписокСчетов.ТекущаяСтрока());
	Текст1	=	"Счет " + Счет.Код + " " + Счет.ПолнНаименование;
	Текст2	=	"";

	Для Номер = 1 по Счет.КоличествоСубконто() Цикл
		
		Текст2=Текст2+Номер+".";
		ВидСубконто=Метаданные.ВидСубконто(Счет.ВидСубконто(Номер).Идентификатор());

		Если		ВидСубконто.Вид="" Тогда
			
		ИначеЕсли	ВидСубконто.Тип="Справочник" Тогда
			Текст2	=	Текст2 + " " + Метаданные.Справочник(ВидСубконто.Вид).Представление();
			
		ИначеЕсли	ВидСубконто.Тип="Документ" Тогда
			Текст2	=	Текст2 + " " + Метаданные.Документ(ВидСубконто.Вид).Представление();
			
		ИначеЕсли	ВидСубконто.Тип="Перечисление" Тогда
			Текст2	=	Текст2 + " " + Метаданные.Перечисление(ВидСубконто.Вид).Представление();
			
		КонецЕсли;

		Текст2	=	Текст2 + " (" + ВидСубконто.Тип + ")" + РазделительСтрок + РазделительСтрок;
		
	КонецЦикла;
		
	Возврат(Текст1);
	
КонецФункции // Текст()

//******************************************************************************
                                                                                                    
Процедура ВключитьПометки(Режим)
	
    Для Сч = 1 По ФормСписокСчетов.РазмерСписка() Цикл
    	ФормСписокСчетов.Пометка(Сч, Режим);
	КонецЦикла;
	
КонецПроцедуры		//	ВключитьПометки()

//******************************************************************************

Функция ОбработатьПравила()
	
	Если гТабОбъектов.НайтиЗначение("Счет", , "Тип") = 0 Тогда
		гТабОбъектов.НоваяСтрока();
		гТабОбъектов.Тип			=	"Счет";
		гТабОбъектов.Вид			=	"Основной";
		гТабОбъектов.СписокОбъектов	=	СоздатьОбъект("СписокЗначений");
		
		СписокВыгружаемыхСчетов		=	гТабОбъектов.СписокОбъектов;
	КонецЕсли;
	             
	
	Для Сч = 1 По ФормСписокСчетов.РазмерСписка() Цикл
		Счет	=	ФормСписокСчетов.ПолучитьЗначение(Сч);
		
		Если ФормСписокСчетов.Пометка(Сч) = 0 Тогда
			Поз	=	СписокВыгружаемыхСчетов.НайтиЗначение(Счет);
			Если Поз > 0 Тогда
				СписокВыгружаемыхСчетов.УдалитьЗначение(Поз);
			КонецЕсли;
			Продолжить;
		КонецЕсли;
		
		
		Если СписокВыгружаемыхСчетов.Принадлежит(Счет) = 0 Тогда
			СписокВыгружаемыхСчетов.ДобавитьЗначение(Счет);
			
			Для СчСубконто = 1 По Счет.КоличествоСубконто() Цикл
				ВидСубконто		=	Счет.ВидСубконто(СчСубконто);
				ТипВидаСубконто	=	ВидСубконто.ТипСубконто();
				ВидВидаСубконто	=	ОтделитьРазделителем(ТипВидаСубконто, ".");
				Запрос			=	"//Правило[(ОбъектИсточник/@Тип = """ + ТипВидаСубконто + """) and (ОбъектИсточник/@Вид = """ + ВидВидаСубконто + """)]";
				Правило			=	гПравила.ВыбратьУзел(Запрос);
				Если ПустоеЗначение(Правило) = 1 Тогда Продолжить КонецЕсли;
				Если ПустоеЗначение(Число(Правило.ПолучитьАтрибут("НеПоказывать"))) = 0 Тогда
					Правило.УстановитьАтрибут("ПоСсылкам",		0);
				КонецЕсли;
				Если ВидВидаСубконто <> "Договоры" Тогда
					Правило.УстановитьАтрибут("НеПоказывать",	0);
				КонецЕсли;
			КонецЦикла;
			
		КонецЕсли;
	КонецЦикла;
	                            
	
	Если ПустоеЗначение(СписокВыгружаемыхСчетов) = 1 Тогда
		Предупреждение("Не отмечено ни одного счета для выгрузки!"); Возврат(0);
	КонецЕсли;
	                                                 
	Возврат(1);

КонецФункции		//	ОбработатьПравила()

//******************************************************************************
                                                                                
Процедура Настройка()
	
	Если ПустоеЗначение(гПравила) = 1 Тогда
		Если ЗагрузитьПравилаКонвертации() = 0 Тогда Возврат КонецЕсли;
	КонецЕсли;
	
	
	Если ОбработатьПравила() = 0 Тогда Возврат КонецЕсли;
	
	
	СписокПараметров	=	СоздатьОбъект("СписокЗначений");
	СписокПараметров.Установить("ИмяФайлаПравил",			гПутьОбъекта_ПравилаКонвертации);
	СписокПараметров.Установить("ИмяФайлаДанных",			ФормИмяФайлаДанных);
	СписокПараметров.Установить("ВыгружатьТолькоУказанные",	0);
	СписокПараметров.Установить("ВключатьПравилаВФайл",		0);
	СписокПараметров.Установить("НеОбрабатыватьПроведение",	1);
	СписокПараметров.Установить("БезОткрытияФормы",			0);
	СписокПараметров.Установить("ПравилаКонвертации",		гПравила);
	СписокПараметров.Установить("ФормДатаКон",				РабочаяДата());
	СписокПараметров.Установить("ТаблицаОбъектов",			гТабОбъектов);
	
	Если Найти(гПутьОбъекта_УниверсальнаяОбработкаВыгрузки, ".ert") > 0 Тогда
		ОткрытьФорму("Отчет", СписокПараметров, гПутьОбъекта_УниверсальнаяОбработкаВыгрузки);
	Иначе
		ОткрытьФорму(гПутьОбъекта_УниверсальнаяОбработкаВыгрузки, СписокПараметров);
	КонецЕсли;
	
	СписокПараметров.Форма.ИспользоватьЗакладки(0);
	СписокПараметров.Форма.ИспользоватьСлой("Период", 0);
	СписокПараметров.Форма.Заголовок("Настройка выгружаемых объектов аналитики", 0);
	СписокПараметров.Форма.ПанельИнструментов(0);
	//СписокПараметров.Форма.ФормИмяФайлаПравил.Доступность(0);
	СписокПараметров.Форма.ФормИмяФайлаДанных.Доступность(0);
	СписокПараметров.Форма.ФормРамкаФайлы.Видимость(0);
	СписокПараметров.Форма.кнЗагрузитьПравила.Видимость(0);
	СписокПараметров.Форма.кнВыгрузитьДанные.Видимость(0);
	
КонецПроцедуры		//	Настройка()

//******************************************************************************
                                                                                                    
Процедура ВыгрузитьДанные()
	                  
	Если ПустоеЗначение(ФормИмяФайлаДанных) = 1 Тогда
		Предупреждение("Не указано имя файла выгрузки!"); Возврат;
	КонецЕсли;
	
	Если ПустоеЗначение(гПравила) = 1 Тогда
		Если ЗагрузитьПравилаКонвертации() = 0 Тогда Возврат КонецЕсли;
	КонецЕсли;
	                                                     
	
	Если ОбработатьПравила() = 0 Тогда Возврат КонецЕсли;
	
	               
	СписокПараметров	=	СоздатьОбъект("СписокЗначений");
	СписокПараметров.Установить("ТаблицаОбъектов",			гТабОбъектов);
	СписокПараметров.Установить("ИмяФайлаПравил",			гПутьОбъекта_ПравилаКонвертации);
	СписокПараметров.Установить("ИмяФайлаДанных",			ФормИмяФайлаДанных);
	СписокПараметров.Установить("ВыгружатьТолькоУказанные",	0);
	СписокПараметров.Установить("ВключатьПравилаВФайл",		0);
	СписокПараметров.Установить("НеОбрабатыватьПроведение",	1);
	СписокПараметров.Установить("БезОткрытияФормы",			1);
	СписокПараметров.Установить("ПравилаКонвертации",		гПравила);
	СписокПараметров.Установить("ФормДатаКон",				РабочаяДата());
	
	Если Найти(гПутьОбъекта_УниверсальнаяОбработкаВыгрузки, ".ert") > 0 Тогда
		ОткрытьФорму("Отчет", СписокПараметров, гПутьОбъекта_УниверсальнаяОбработкаВыгрузки);
	Иначе
		ОткрытьФорму(гПутьОбъекта_УниверсальнаяОбработкаВыгрузки, СписокПараметров);
	КонецЕсли;
	
КонецПроцедуры		//	ВыгрузитьДанные()

//******************************************************************************
                                                                                
              

////////////////////////////////////////////////////////////////////////////////
// ПРЕДОПРЕДЕЛЕННЫЕ ПРОЦЕДУРЫ
// 

Процедура ПриОткрытии()
	
	Если ЗагрузитьВнешнююКомпоненту(гПутьОбъекта_КомпонентаV7plus) <> 1	Тогда
		Предупреждение("Компонента v7plus.dll не найдена!");
		СтатусВозврата(0);	Возврат;
	КонецЕсли;
	
	гXMLАнализатор		=	СоздатьОбъект("AddIn.XMLParser");
	ВерсияАнализатора	=	гXMLАнализатор.ВерсияАнализатора;
	Если ВерсияАнализатора <> "2.0" Тогда
		Предупреждение("Для работы с программой необходимо обновить внешнюю компоненту v7plus.dll !");
		СтатусВозврата(0);	Возврат;
	КонецЕсли;
	
	Если ПустоеЗначение(гПутьОбъекта_ПравилаКонвертации) = 1 Тогда
		Предупреждение("Не найден файл правил конвертации: RAc4_Pr2.xml!");
		СтатусВозврата(0);	Возврат;
	КонецЕсли;
	
КонецПроцедуры		//	ПриОткрытии()

    

////////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ
// 

НачальнаяИнициализация();
    

//******************************************************************************

// Список счетов, которые возможно выгружать

Стр = "08, 20, 23, 25, 26, 28, 29, 44, 68.1, 68.10, 69, 70, 71.1, 73, 75.2, 76.4, 76.5, 84.1, 84.3, 86, 91.1, 91.2, 94, 96, 97, 99";

                                                                                
//******************************************************************************

ФормСписокСчетов.ИзСтрокиСРазделителями(""""+СтрЗаменить(Стр, ", ", """,""")+"""");

Субсчет=СоздатьОбъект("Счет");
// заполнение списка возможных счетов на основании кодов
Номер=1; Пока Номер<=ФормСписокСчетов.РазмерСписка() Цикл
	Счет=ФормСписокСчетов.ПолучитьЗначение(Номер); Счет=СчетПоКоду(Счет);

	Если Счет.Выбран()=0 Тогда
		Сообщить("Неверный код счета "+ФормСписокСчетов.ПолучитьЗначение(Номер));
		ФормСписокСчетов.УдалитьЗначение(Номер);
		
	ИначеЕсли Счет.ЭтоГруппа()=0 Тогда
		ФормСписокСчетов.УстановитьЗначение(Номер, Счет, Счет.Код+" "+Счет.Наименование);
		Номер = Номер + 1;
		
	Иначе // Если Счет.ЭтоГрупа()=1 Тогда
		ФормСписокСчетов.УдалитьЗначение(Номер);
		// подстановка субсчетов счета-группы
		Субсчет.ИспользоватьРодителя(Счет);
		Субсчет.ВыбратьСчета();
		Пока Субсчет.ПолучитьСчет()=1 Цикл
			Счет=Субсчет.ТекущийСчет();
			
			Если (Счет.ЭтоГруппа()=0) и (Счет.Валютный=0) Тогда
				ФормСписокСчетов.ВставитьЗначение(Номер, Счет, Счет.Код+" "+Счет.Наименование);
				Номер=Номер+1;
			КонецЕсли;
			
		КонецЦикла;
	КонецЕсли;
КонецЦикла;

// добавление субсчетов 68 счета, введенных вручную
//Субсчет.ИспользоватьРодителя(СчетПоКоду("68")); Субсчет.ВыбратьСчета();
//Пока Субсчет.ПолучитьСчет()=1 Цикл
//	Счет=Субсчет.ТекущийСчет();
//	
//	Если (Счет.ЗаданВКонфигурации()=0) и (Счет.ЭтоГруппа()=0) и (Счет.Валютный=0) Тогда
//		ФормСписокСчетов.ДобавитьЗначение(Счет, Счет.Код+" "+Счет.Наименование);
//	КонецЕсли;
//КонецЦикла;
//ФормСписокСчетов.Сортировать();

//******************************************************************************




