////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ
// 
// Описание последней ошибки
Перем ОшибкаОписание;

// Модели торгового оборудования
Перем Модели;

// Строка содержит названия параметров модели, разделенные запятыми;
// используется для проверки при чтении файла описания модели
Перем ИменаПараметровМодели;

// Полный путь к файлу, в котором храняться настройки
Перем ИмяФайлаНастройки;

// Количество строк в файле для одной настройки
Перем СтрокВнастройке;

// Для оповещения об успешно подключенном оборудовании
Перем ТаблицаТОДоПодключения, ТаблицаТОПослеПодключения;

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ МОДУЛЯ
// 
//******************************************************************************
// ПолучитьПервуюМодель()
//
// Параметры:
//  Нет
//
// Возвращаемое значение:
//  0 - список моделей пуст
//  
// Описание:
//  Получет позицию первой модели
//
Функция ПолучитьПервуюМодель()
	Модели.ВыбратьСтроки();
	Возврат Модели.ПолучитьСтроку();
КонецФункции // ПолучитьПервуюМодель()

//******************************************************************************
// ПолучитьСледующуюМодель()
//
// Параметры:
//  Нет
//
// Возвращаемое значение:
//  Позиция следующей модели или 0
//  
// Описание:
//  Получет позицию следующей модели. Перед вызовом функции нужно обязательно 
//  вызывать функцию ПолучитьПервуюМодель
//
Функция ПолучитьСледующуюМодель()
	Если Модели.ПолучитьСтроку() = 1 Тогда
		Рез = Модели.НомерСтроки;
	Иначе
		Рез = 0;
	КонецЕсли;
	
	Возврат Рез;
КонецФункции // ПолучитьСледующуюМодель()

//******************************************************************************
// НайтиМодель(Модель)
//
// Параметры:
//  Модель - идентификатор модели
//
// Возвращаемое значение:
//  Позицию модели или 0, если модель не найдена
//  
// Описание:
//  Ищет модель по ее идентификатору
//
Функция НайтиМодель(Модель)
	
	Поз = 0;
	Модели.НайтиЗначение(Модель, Поз, "Модель");
	Возврат Поз;
	
КонецФункции // НайтиМодель()

//******************************************************************************
// ПолучитьПараметрМодели(Поз, Параметр, Значение)
//
// Параметры:
//  Поз      - позиция модели
//  Параметр - идентификатор параметра
//  Значение - значение параметра
//
// Возвращаемое значение:
//  1 - значения переданных параметров верны и через формальный параметр Значение
//  вернулось значение запрашиваемого параметра, 0 - в случае ошибки.
//  Сейчас всегда возвращается 1.
//  
// Описание:
//  для модели с заданной позицией возвращает значение требуемого параметра
//
Функция ПолучитьПараметрМодели(Поз, Параметр, Значение)
	
	Значение = Модели.ПолучитьЗначение(Поз, Параметр);
	Возврат 1;
	
КонецФункции // ПолучитьПараметрМодели()

//******************************************************************************
// УстановитьПараметрМодели(Поз, Параметр, Значение)
//
// Параметры:
//  Поз - позиция модели
//  Параметр - идентификатор параметра
//  Значение - значение параметра
//
// Возвращаемое значение:
//  0, если неверно задан идентификатор параметра или модели в заданной позиции 
//  не существует
//  
// Описание:
//  Для модели с заданной позицией устанавливает значение требуемого параметра
//
Функция УстановитьПараметрМодели(Поз, Параметр, Значение)
	Модели.УстановитьЗначение(Поз, Параметр, Значение);
	Возврат 1;
КонецФункции // УстановитьПараметрМодели()

//******************************************************************************
// ДобавитьМодель(Вид, Модель, Компонента, ПрогИд, Обработка, ФайлОписаний)
//
// Параметры:
//  Вид - вид торгового оборудования
//  Модель - идентификатор модели
//  Компонента - имя файла внешней компонеты
//  ПрогИд - программный идентификатор внешней компоненты
//  Обработка - имя файла обработки обслуживания
//  ФайлОписаний - имя файла описания модели
//
// Возвращаемое значение:
//  Позиция добавленной модели
//  
// Описание:
//  Добавляет описание модели
//
Функция ДобавитьМодель(Вид, Модель, Компонента, ПрогИд, Обработка, ФайлОписаний)
	
	Модели.НоваяСтрока();
		
	Модели.Вид          = Вид;
	Модели.Модель       = Модель;
	Модели.Компонента   = Компонента;
	Модели.ПрогИд       = ПрогИд;
	Модели.Обработка    = Обработка;
	Модели.ФайлОписаний = ФайлОписаний;
	
	Возврат Модели.КоличествоСтрок();
		
КонецФункции // ДобавитьМодель()

//******************************************************************************
// УдалитьМодель(Поз)
//
// Параметры: 
//  Поз - 
//
// Возвращаемое значение:
//  1 - модель удалена, 0 - ошибка 
//
// Описание:
//  Удаляет модель с заданной позицией
//
Функция УдалитьМодель(Поз)
	
	Если (Поз > 0) И (Поз < Модели.КоличествоСтрок()) Тогда
		Модели.УдалитьСтроку(Поз);
		Рез = 1;
	Иначе
	    Рез = 0;
		ОшибкаОписание = "Модель с заданной позицией отсутствует";
	КонецЕсли;
	
	Возврат Рез;
	
КонецФункции // УдалитьМодель()

//******************************************************************************
// ЗагрузитьМодельИзФайла(ИмяФайла, Параметры)
//
// Параметры:
//  ИмяФайла - имя файла описания модели
//  Параметры - список значений с параметрами описания модели
//
// Возвращаемое значение:
//  1 - удалось загрузить описание, 0 - нет
//  
// Описание:
//  Загружает описание модели из файла описаний
//
Функция ЗагрузитьМодельИзФайла(ИмяФайла, Параметры)
	Перем Рез;
	
	
	Если ФС.СуществуетФайл(ИмяФайла) = 0 Тогда
		ОшибкаОписание = "Отсутствет файл " + ИмяФайла;
		Рез = 0;
	Иначе
		ФайлОписаний = СоздатьОбъект("Текст");
		ФайлОписаний.Открыть(ИмяФайла);
		
		// заполним список значениями из файла описаний
		Для Счетчик = 1 по ФайлОписаний.КоличествоСтрок() Цикл
			Стр = ФайлОписаний.ПолучитьСтроку(Счетчик);
			Поз = Найти(Стр, "=");
			Если Поз > 0 Тогда
				Ид = СокрЛП(Лев(Стр, Поз - 1));
				Если Найти(ИменаПараметровМодели, ИД) > 0 Тогда
					// правильный идентификатор параметра
					Параметры.Установить(Ид, СокрЛП(Сред(Стр, Поз + 1)));
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		Рез = 1;
	КонецЕсли;
	
	Возврат Рез;
	
КонецФункции // ЗагрузитьМодельИзФайла()

//******************************************************************************
// СохранитьМодельВфайл(Поз, ИмяФайла)
//
// Параметры:
//  Поз      - позиция модели
//  ИмяФайла - имя файла описания
//
// Возвращаемое значение:
//  1 - удалось сохранить описание в файл, 0 - нет
//  
// Описание:
//  Сохраняет описание модели в файл
//
Функция СохранитьМодельВфайл(Поз, ИмяФайла)
	Перем Зн, Ид;
	
	ФайлОписаний = СоздатьОбъект("Текст");
	
	ПолучитьПараметрМодели(Поз, "Вид", Зн);
	ФайлОписаний.ДобавитьСтроку("Вид=" + Зн);
	
	ПолучитьПараметрМодели(Поз, "Модель", Зн);
	ФайлОписаний.ДобавитьСтроку("Модель=" + Зн);
	
	ПолучитьПараметрМодели(Поз, "Компонента", Зн);
	ФайлОписаний.ДобавитьСтроку("Компонента=" + Зн);
	
	ПолучитьПараметрМодели(Поз, "ПрогИд", Зн);
	ФайлОписаний.ДобавитьСтроку("ПрогИд=" + Зн);
	
	ПолучитьПараметрМодели(Поз, "Обработка", Зн);
	ФайлОписаний.ДобавитьСтроку("Обработка=" + Зн);
	
	Если ФС.СуществуетФайл(глКаталогОписаний + ИмяФайла) = 1 Тогда
		Рез = Вопрос("Файл описаний торгового оборудования " + ИмяФайла + " существует. Переписать?", "Да+Нет+Отмена", 60);
		Если Рез = "Отмена" Тогда
		    Возврат 1;
		ИначеЕсли Рез = "Нет" Тогда
			ИмяФайла = "новое описание.efd";
			Если ВвестиСтроку(ИмяФайла, "Введите имя файла описаний", 25, 0, 60) <> 1 Тогда
				Возврат 1;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Попытка
		ФайлОписаний.Записать(глКаталогОписаний + ИмяФайла);
		Рез = 1;
	Исключение
		ОшибкаОписание = "Не удалось записать описание модели в файл " + ИмяФайла;
		Рез = 0;
	КонецПопытки;
	
	Возврат Рез;
	
КонецФункции // СохранитьМодельВфайл()

//******************************************************************************
// ЗагрузитьВсеМодели()
//
// Параметры:
//  Нет
//
// Возвращаемое значение:
//  1 - удалось выполнить загрузку, 0 - нет
//  
// Описание:
//  Загружает модели из всех файлов описаний
//
Функция ЗагрузитьВсеМодели()
	Перем Рез;
	
	// настройки из внешних файлов
	Кат = Лев(глКаталогОписаний, СтрДлина(глКаталогОписаний) - 1);
	
	Если ФС.СуществуетФайл(Кат) = 0 Тогда
		ОшибкаОписание = "Отсутствуют каталог " + глКаталогОписаний + " c описаниями моделей торгового оборудования";
		Рез = 0;
	Иначе
		Параметры = СоздатьОбъект("СписокЗначений");
		
		ТекКат = ФС.ТекКаталог();
		ФС.УстТекКаталог(глКаталогОписаний);
		
		Имяфайла = ФС.НайтиПервыйФайл("*.efd");
		
		Пока ПустоеЗначение(ИмяФайла) = 0 Цикл
			Параметры.УдалитьВсе();
			ЗагрузитьМодельИзФайла(глКаталогОписаний + ИмяФайла, Параметры);
			Модель = Параметры.Получить("Модель");
			
			// проверка дублей. 
			Если НайтиМодель(Модель) = 0 Тогда
				ДобавитьМодель(Параметры.Получить("Вид"),
				               Модель,
							   Параметры.Получить("Компонента"),
							   Параметры.Получить("ПрогИд"),
							   Параметры.Получить("Обработка"),
							   Имяфайла
							   );
			КонецЕсли;
			
			ИмяФайла = ФС.НайтиСледующийФайл();
		КонецЦикла;
		
		ФС.УстТекКаталог(ТекКат);
		
		Если Модели.КоличествоСтрок() = 0 Тогда
			ОшибкаОписание = "Отсутствуют описания торгового оборудования";
			Рез = 0;
		Иначе
			Рез = 1;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Рез;
		
КонецФункции // ЗагрузитьВсеМодели()

//******************************************************************************
// ДоступностьПолейФР()
//
// Параметры:
//  Нет
//
// Возвращаемое значение:
//  Нет
//  
// Описание:
//  Управляет доступностью полей в форме, связанных с настроками фискального 
//  регистратора
//
Процедура ДоступностьПолейФР()
	
	Форма.ТекстФРМодель.Доступность(ФРВкл);
	Форма.ФРМодель.Доступность(ФРВкл);
	Форма.ТекстФРПарольАдминистратора.Доступность(ФРВкл);
	Форма.ФРПарольАдминистратора.Доступность(ФРВкл);
	Форма.ТекстФРПарольПользователя.Доступность(ФРВкл);
	Форма.ФРПарольПользователя.Доступность(ФРВкл);
		
	Форма.кнФРДобавитьМодель.Доступность(ФРВкл); 
	Форма.кнФРРедактироватьМодель.Доступность(ФРВкл); 
	
КонецПроцедуры // ДоступностьПолейФР()

//******************************************************************************
// ИнициализацияНастройки()
//
// Параметры:
//  Нет
//
// Возвращаемое значение:
//  Нет
//  
// Описание:
//  Инициализирует настройки торгового оборудования
//
Функция ИнициализацияНастройки()
	
	// фискальный регистратор
	
	глФРВкл        = 0;
	глФРМодель     = "";
	глФРОбработка  = "";
	глФРКомпонента = "";
	глФРПрогИд     = "";
	
	глФРПарольАдминистратора = "";
	глФРПарольПользователя   = "";
	глФРДляПриемаНаличныхОтЮрЛиц   = 1;
	
КонецФункции // ИнициализацияНастройки()

//******************************************************************************
// ПоискСохрНастройки()
//
// Параметры:
//  Нет
//
// Возвращаемое значение:
//  Номер строки в файле настроек, или 0, если настройка отсутствует.
//  
// Описание:
//  Ищет в файле настроек торгового оборудования настройки текущей конфигурации
//
Функция ПоискСохрНастройки(Файл)
	Рез        = 0;
	Счетчик    = 1;
	ВсегоСтрок = Файл.КоличествоСтрок();
	 
	Пока Счетчик <= ВсегоСтрок Цикл
		Стр = Файл.ПолучитьСтроку(Счетчик);
		
		Если СокрЛП(Стр) = КаталогИБ() Тогда
			Рез = Счетчик;
		КонецЕсли;
		
		Счетчик = Счетчик + СтрокВнастройке;
	КонецЦикла;
	
	Возврат Рез;
КонецФункции // ПоискСохрНастройки()

//******************************************************************************
// ЗагрузитьНастройку()
//
// Параметры:
//  Нет
//
// Возвращаемое значение:
//  1 - загрузка прошла успешно, 0 - нет
//  
// Описание:
//  Загружает из файла настроек торгового оборудования настройки текущей конфигурации
//
Функция ЗагрузитьНастройку()
	
	Перем ВрОбработка;
	Перем ВрКомпонента;
	Перем ВрПрогИд;
	
	Рез = 1;
	
	Если ФС.СуществуетФайл(ИмяФайлаНастройки) <> 0 Тогда
		ТекстНастройки = СоздатьОбъект("Текст");
		ТекстНастройки.Открыть(ИмяФайлаНастройки);
		НомСтр = ПоискСохрНастройки(ТекстНастройки);
		
		Если НомСтр > 0 Тогда
			Настройка = ЗначениеИзСтроки(ТекстНастройки.ПолучитьСтроку(НомСтр + 1));
			
			Если ТипЗначенияСтр(Настройка) <> "СписокЗначений" Тогда
				Рез = 0;
				ОшибкаОписание = "Неверный формат файла настроек";
			Иначе
				
				// ФР
				глФРВкл    = Настройка.Получить("ФРВкл");
				глФРМодель = Настройка.Получить("ФРМодель");
				глФРПарольАдминистратора = Настройка.Получить("ФРПарольАдминистратора");
				глФРПарольПользователя   = Настройка.Получить("ФРПарольПользователя");
				глФРДляПриемаНаличныхОтЮрЛиц = 1;
				
				Поз = НайтиМодель(глФРМодель);
				Если Поз > 0 Тогда
					ПолучитьПараметрМодели(Поз, "Обработка" , глФРОбработка);
					ПолучитьПараметрМодели(Поз, "Компонента", глФРКомпонента);
					ПолучитьПараметрМодели(Поз, "ПрогИд"    , глФРПрогИд);
				КонецЕсли;
								
			КонецЕсли;
						
		КонецЕсли;
	КонецЕсли;
	
	Возврат Рез;
	
КонецФункции // ЗагрузитьНастройку()

//******************************************************************************
// ДобавитьТОвТаблицу(ТаблицаТО, ТОНаименование, ТОВключено, ТОМодель, ТОПоследняяБуква = "")
//
// Параметры:
//  ТаблицаТО        - ТаблицаЗначений - , в которую будет добавлено торговое оборудование
//  ТОНаименование   - Строка          - наименование торгового оборудования
//  ТОВключено       - флаг            - , 1 - торговое оборудование включено, 0 - нет
//  ТОМодель         - Строка          - модель торгового оборудования
//  ТОПоследняяБуква - Строка          - , которая будет добавлена к слову "включен", при выводе сообщения
//                                       "а", "о", "ы" и пр.
//
// Возвращаемое значение:
//  Нет
//  
// Описание:
//  Добавляет строку в переданную таблицу торгового оборудования
//
Процедура ДобавитьТОвТаблицу(ТаблицаТО, ТОНаименование, ТОВключено, ТОМодель, ТОПоследняяБуква = "")
	
	ТаблицаТО.НоваяСтрока();
	ТаблицаТО.ТОНаименование   = ТОНаименование;
	ТаблицаТО.ТОВключено       = ТОВключено;
	ТаблицаТО.ТОМодель         = ТОМодель;
	ТаблицаТО.ТОПоследняяБуква = ТОПоследняяБуква;
	
КонецПроцедуры // ДобавитьТОвТаблицу()

//******************************************************************************
// ПолучитьНастройку()
//
// Параметры:
//  Нет
//
// Возвращаемое значение:
//  1 - настрайки получены, 0 - нет
//  
// Описание:
//  Получает из файла настроек торгового оборудования настройки текущей конфигурации
//
Функция ПолучитьНастройку()
	
	Рез = 1;
	
	Если ФС.СуществуетФайл(ИмяФайлаНастройки) <> 0 Тогда
		ТекстНастройки = СоздатьОбъект("Текст");
		ТекстНастройки.Открыть(ИмяФайлаНастройки);
		НомСтр = ПоискСохрНастройки(ТекстНастройки);
		
		Если НомСтр > 0 Тогда
			Настройка = ЗначениеИзСтроки(ТекстНастройки.ПолучитьСтроку(НомСтр + 1));
			
			Если ТипЗначенияСтр(Настройка) <> "СписокЗначений" Тогда
				Рез = 0;
				ОшибкаОписание = "Неверный формат файла настроек";
			Иначе
				ТаблицаТОДоПодключения.УдалитьСтроки();
				
				// ФР
				ДобавитьТОвТаблицу(ТаблицаТОДоПодключения, "Фискальный регистратор", Настройка.Получить("ФРВкл")      , Настройка.Получить("ФРМодель"));
			КонецЕсли;
						
		КонецЕсли;
	КонецЕсли;
	
	Возврат Рез;
	
КонецФункции // ПолучитьНастройку()

//******************************************************************************
// СохранитьНастройку()
//
// Параметры:
//  Нет
//
// Возвращаемое значение:
//  1 - сохранение прошло успешно, 0 - нет
//  
// Описание:
//  Сохраняет в файле настроек торгового оборудования настройки текущей конфигурации
//
Функция СохранитьНастройку()
	
	Перем ТекстНастройки;
	
	ТекстНастройки = СоздатьОбъект("Текст");
	Если ФС.СуществуетФайл(ИмяФайлаНастройки) = 0 Тогда
		НомСтр = 0;
	Иначе
		ТекстНастройки.Открыть(ИмяФайлаНастройки);
		НомСтр = ПоискСохрНастройки(ТекстНастройки);
	КонецЕсли;
	
	Настройка = СоздатьОбъект("СписокЗначений");
	
	// параметры фискального регистратора
	
	Настройка.Установить("ФРВкл"        , глФРВкл);
	Настройка.Установить("ФРМодель"     , глФРМодель);
	Настройка.Установить("ФРПарольАдминистратора", глФРПарольАдминистратора);
	Настройка.Установить("ФРПарольПользователя"  , глФРПарольПользователя);
	Настройка.Установить("ФРДляПриемаНаличныхОтЮрЛиц", 1);

	СтрНастройки = ЗначениеВстроку(Настройка);
					
	Если НомСтр = 0 Тогда
		ТекстНастройки.ДобавитьСтроку(КаталогИБ());
		ТекстНастройки.ДобавитьСтроку(СтрНастройки);
	Иначе
		ТекстНастройки.ЗаменитьСтроку(НомСтр + 1, СтрНастройки);
	КонецЕсли;
	
	Рез = 1;
	Попытка
		ТекстНастройки.Записать(ИмяФайлаНастройки);
	Исключение
		Рез = 0;
		ОшибкаОписание = "Не удалось сохранить настройки торгового оборудования";
	КонецПопытки;
	
	Возврат Рез;
	
КонецФункции // СохранитьНастройку()

//******************************************************************************
// ПодключитьОборудование()
//
// Параметры:
//  Нет
//
// Возвращаемое значение:
//  Нет
//  
// Описание:
//  Подключает торговое оборудование
//
Процедура ПодключитьОборудование()
	
	Параметры = СоздатьОбъект("СписокЗначений");
	ТаблицаТОПослеПодключения.УдалитьСтроки();
	
	// подключаем ФР
	Если глФРВкл = 1 Тогда
		Параметры.Установить("Процесс", "подключить");
		Параметры.Установить("Компонента"          , глФРКомпонента);
		Параметры.Установить("ПрогИд"              , глФРПрогИд);
		Параметры.Установить("ПарольПользователя"  , глФРПарольПользователя);
		
		глОборудованиеКоманда("ФР", глФРОбработка, Параметры);
		
		глФРВкл = Параметры.Получить("Результат");
		Если глФРВкл = 1 Тогда
			глФР = Параметры.Получить("Объект");
		Иначе
			Сообщить("Фискальный регистратор: ошибка при подключении", "!");
			Сообщить("    " + Параметры.Получить("ОписаниеРезультата"));
		КонецЕсли;
		ДобавитьТОвТаблицу(ТаблицаТОПослеПодключения, "Фискальный регистратор", глФРВкл, глФРМодель);
	КонецЕсли;
	Параметры.УдалитьВсе();
		
КонецПроцедуры // ПодключитьОборудование()

//******************************************************************************
// ОтключитьОборудование()
//
// Параметры:
//  Нет
//
// Возвращаемое значение:
//  Нет
//  
// Описание:
//  Отключает торговое оборудование
//
Процедура ОтключитьОборудование()
	
	Параметры = СоздатьОбъект("СписокЗначений");
	Параметры.Установить("Процесс", "отключить");
	
	// отключаем фискальный регистратор
	Если глФРВкл = 1 Тогда
		Параметры.Установить("ПарольПользователя", глФРПарольПользователя);
		глОборудованиеКоманда("ФР", глФРОбработка, Параметры);
		глФРВкл = 0;
		глФР    = 0;
	КонецЕсли;
		
КонецПроцедуры // ОтключитьОборудование()

//******************************************************************************
// СообщитьОПодключении()
//
// Параметры:
//  Нет
//
// Возвращаемое значение:
//  Нет
//  
// Описание:
//  Сообщает об успешно подключенном оборудовании.
//
Процедура СообщитьОПодключении()
	
	ПодключилиНовоеТО = 0;
	ТаблицаТОПослеПодключения.ВыбратьСтроки();
	Пока ТаблицаТОПослеПодключения.ПолучитьСтроку() = 1 Цикл
		
		Если ТаблицаТОПослеПодключения.ТОВключено = 1 Тогда
		    
		    СообщитьОПодключении = 1;
			ТаблицаТОДоПодключения.ВыбратьСтроки();
			Пока ТаблицаТОДоПодключения.ПолучитьСтроку() = 1 Цикл
				Если (ТаблицаТОДоПодключения.ТОНаименование = ТаблицаТОПослеПодключения.ТОНаименование) И
					 (ТаблицаТОДоПодключения.ТОМодель       = ТаблицаТОПослеПодключения.ТОМодель) И
					 (ТаблицаТОДоПодключения.ТОВключено = 1) Тогда
				    СообщитьОПодключении = 0;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			
			Если СообщитьОПодключении = 1 Тогда
				ПодключилиНовоеТО = 1;
				Сообщить(ТаблицаТОПослеПодключения.ТОНаименование+
					     " (модель: "+ТаблицаТОПослеПодключения.ТОМодель+") успешно подключен"+ТаблицаТОПослеПодключения.ТОПоследняяБуква+".");
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Если ПодключилиНовоеТО = 1 Тогда
		Предупреждение("Параметры компонент устанавливаются на
					   |соответствующей закладке (меню Сервис\Параметры).", 60);
	КонецЕсли;
	
КонецПроцедуры // СообщитьОПодключении()

//******************************************************************************
// СохранитьИзменения()
//
// Параметры:
//  Нет
//
// Возвращаемое значение:
//  Нет
//  
// Описание:
//  Переносит парметры торгового оборудования из элементов формы в настройки.
//
Процедура СохранитьИзменения()
	
	Перем Компонента, ПрогИд, Обработка;
	
	// отключаем все используемое оборудование
	ОтключитьОборудование();
	
	// фискальный регистратор
	
	ТекСтр = ФРМодель.ТекущаяСтрока();
	Модель = "";
	Если ТекСтр > 0 Тогда
		Модель = ФРМодель.ПолучитьЗначение(ТекСтр);
	КонецЕсли;
			
	Если ПустоеЗначение(Модель) = 0 Тогда
			
		Поз = НайтиМодель(Модель);
		Если Поз = 0 Тогда
			глФРВкл    = 0;
			глФРМодель = "";
		Иначе
			глФРВкл    = ФРВкл;
			глФРМодель = Модель;
			глФРПарольАдминистратора = СокрЛП(ФРПарольАдминистратора);
			глФРПарольПользователя   = СокрЛП(ФРПарольПользователя);
			глФРДляПриемаНаличныхОтЮрЛиц = 1;
			
			ПолучитьПараметрМодели(Поз, "Компонента" , глФРКомпонента);
			ПолучитьПараметрМодели(Поз, "ПрогИд"     , глФРПрогИд);
			ПолучитьПараметрМодели(Поз, "Обработка"  , глФРОбработка);
		КонецЕсли;
	КонецЕсли;
	
	// Получаем настройку до подключения
	ПолучитьНастройку();
		
	// Сохраняем настройки
	СохранитьНастройку();
	
	// Подключаем оборудование
	ПодключитьОборудование();
	
	// Сообщаем об успешно подключенном оборудовании
	СообщитьОПодключении();
	
КонецПроцедуры // СохранитьИзменения()

//******************************************************************************
// ИнициализироватьДиалог()
//
// Параметры:
//  Нет
//
// Возвращаемое значение:
//  Нет
//  
// Описание:
//  Инициализирует элементы диалога формы из настроек торгового оборудования
//
Процедура ИнициализироватьДиалог()
	Перем Вид, Модель, Поз;
	
	// заполним списки моделями
	
	Поз = ПолучитьПервуюМодель();
	Пока Поз <> 0 Цикл
		
		ПолучитьПараметрМодели(Поз, "Вид", Вид);
		
		Если НРег(Вид) = "фр" Тогда
			ПолучитьПараметрМодели(Поз, "Модель", Модель);
			ФРМодель.ДобавитьЗначение(Модель);
		КонецЕсли;
		
		Поз = ПолучитьСледующуюМодель();
	КонецЦикла;
	
	// фискальный регистартор
	Если ФРМодель.РазмерСписка() = 0 Тогда
		// нет модели. делаем недоступными элементы управления
		ФРВкл = 0;
	Иначе
		ФРВкл = глФРВкл;
		ФРПарольАдминистратора = глФРПарольАдминистратора;
		ФРПарольПользователя   = глФРПарольПользователя;
		ФРДляПриемаНаличныхОтЮрЛиц = 1;
		
		Поз   = ФРМодель.НайтиЗначение(глФРМодель);
		Если Поз > 0 Тогда
			ФРМодель.ТекущаяСтрока(Поз);
		КонецЕсли;
	КонецЕсли;

	ДоступностьПолейФР();
		
КонецПроцедуры // ИнициализироватьДиалог()

//******************************************************************************
// СформироватьСписокОбработок(СписокОбработок)
//
// Параметры: 
//  СписокОбработок
//
// Возвращаемое значение:
//  Нет
//
// Описание:
//  Формирует список значений, состоящий из названий файлов обработок
//  для работы с торговым оборудованием
//
Функция СформироватьСписокОбработок(СписОбработок)
	
	// уберем слэш 
	Кат = Лев(глКаталогОписаний, СтрДлина(глКаталогОписаний) - 1);
	
	Если ФС.СуществуетФайл(Кат) = 0 Тогда
		ОшибкаОписание = "Отсутствуют каталог " + Кат;
		Рез = 0;
	Иначе
		СписОбработок = СоздатьОбъект("СписокЗначений");
		ТекКат        = ФС.ТекКаталог();
		
		ФС.УстТекКаталог(глКаталогОписаний);
		Имяфайла = ФС.НайтиПервыйФайл("*.ert");
		
		Пока ПустоеЗначение(ИмяФайла) = 0 Цикл
			СписОбработок.ДобавитьЗначение(Имяфайла);
			Имяфайла = ФС.НайтиСледующийФайл();
		КонецЦикла;
		
		Если СписОбработок.РазмерСписка() = 0 Тогда
			ОшибкаОписание = "В каталоге описаний отсутствуют обработки обслуживания";
			Рез = 0;
		Иначе
			Рез = 1;
		КонецЕсли;
	КонецЕсли;
		
	Возврат Рез;
	
КонецФункции // СформироватьСписокОбработок()

//******************************************************************************
// ДобавитьОписаниеМодели(Вид, СписокМоделей)
//
// Параметры: 
//  Вид - вид модели
//  СписокМоделей - поле со списком в форме
//
// Возвращаемое значение:
//  Нет
//
// Описание:
//  Открывает форму обработки для ввода информации о новой модели
//
Процедура ДобавитьОписаниеМодели(Вид, СписокМоделей)
	Перем Парам, СписОбработок;
	     
	
	Если СформироватьСписокОбработок(СписОбработок) = 0 Тогда
	    Предупреждение(ОшибкаОписание + ". Добавить новое описание модели невозможно!", 60);
	Иначе
		Парам = СоздатьОбъект("СписокЗначений");
		
		Парам.Установить("Вид"       , Вид);
		Парам.Установить("Модель"    , "");
		Парам.Установить("Компонента", "");
		Парам.Установить("ПрогИд"    , "");
		Парам.Установить("Обработка" , "");
		Парам.Установить("СписокОбработок" , СписОбработок);
		
		ОткрытьФормуМодально("Обработка.ТорговоеОборудованиеПараметрыМодели", Парам);
		
		Если Парам.Получить("Изменено") = 1 Тогда
		    Обработка = Парам.Получить("Обработка");
			
			Если ПустоеЗначение(Обработка) = 1 Тогда
				ФайлОписаний = "std_" + Вид + ".efd";
			Иначе
				ФайлОписаний = Лев(Обработка, Найти(Обработка, ".")) + "efd";
			КонецЕсли;
			
			Поз = ДобавитьМодель(Вид, 
			               Парам.Получить("Модель"),
						   Парам.Получить("Компонента"),
						   Парам.Получить("ПрогИд"),
						   Обработка,
						   ФайлОписаний);
						   
			СохранитьМодельВфайл(Поз, ФайлОписаний);
			СписокМоделей.ДобавитьЗначение(Парам.Получить("Модель"));
			СписокМоделей.ТекущаяСтрока(СписокМоделей.РазмерСписка());
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ДобавитьОписаниеМодели()

//******************************************************************************
// РедактироватьОписаниеМодели(СписокМоделей)
//
// Параметры: 
//  СписокМоделей
//
// Возвращаемое значение:
//  Нет
//
// Описание:
//  Открывает форму обработки для редактирования информации о текущей модели
//  в списке СписокМоделей
//
Функция РедактироватьОписаниеМодели(Вид, СписокМоделей)
	Перем ПарамМодели, СписОбработок;
	
	Если СписокМоделей.РазмерСписка() = 0 Тогда
		Предупреждение("Не выбрана модель", 60);
	Иначе
		Если СформироватьСписокОбработок(СписОбработок) = 0 Тогда
		    Предупреждение(ОшибкаОписание + ". Редактировать описание модели невозможно!", 60);
		Иначе
			ТекСтрока = СписокМоделей.ТекущаяСтрока();
			Модель    = СписокМоделей.ПолучитьЗначение(ТекСтрока);
			
			// найдем модель в списке моделей
			Поз = НайтиМодель(Модель);
			Если Поз > 0 Тогда
				Парам = СоздатьОбъект("СписокЗначений");
				
				Парам.Установить("Вид"       , Вид);
				Парам.Установить("Модель"    , Модель);
				
				ПолучитьПараметрМодели(Поз, "Компонента", ПарамМодели);
				Парам.Установить("Компонента", ПарамМодели);
				
				ПолучитьПараметрМодели(Поз, "ПрогИд", ПарамМодели);
				Парам.Установить("ПрогИд", ПарамМодели);
				
				ПолучитьПараметрМодели(Поз, "Обработка", ПарамМодели);
				Парам.Установить("Обработка", ПарамМодели);
				
				ПолучитьПараметрМодели(Поз, "Компонента", ПарамМодели);
				Парам.Установить("СписокОбработок", СписОбработок);
				
				ОткрытьФормуМодально("Обработка.ТорговоеОборудованиеПараметрыМодели", Парам);
				
				Если Парам.Получить("Изменено") = 1 Тогда
				    Обработка    = Парам.Получить("Обработка");
					ФайлОписаний = Лев(Обработка, Найти(Обработка, ".")) + "efd";
					
					// удаляем модель
					УдалитьМодель(Поз);
					// добавляем ее с новыми значениями параметров
					НовПоз = ДобавитьМодель(Вид, 
					               Парам.Получить("Модель"),
								   Парам.Получить("Компонента"),
								   Парам.Получить("ПрогИд"),
								   Обработка,
								   ФайлОписаний);
								   
					СохранитьМодельВфайл(НовПоз, ФайлОписаний);
				КонецЕсли;
				
				СписокМоделей.УстановитьЗначение(ТекСтрока, Парам.Получить("Модель"));
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецФункции // РедактироватьОписаниеМодели()

////////////////////////////////////////////////////////////////////////////////
// ПРЕДОПРЕДЕЛЕННЫЕ ПРОЦЕДУРЫ
// 
//******************************************************************************
// Предопределенная процедура.
//
Процедура ПриОткрытии()
	
	Если ПустоеЗначение(Форма.Параметр) = 0 Тогда
		СтатусВозврата(0);
		
		// только если удалось загрузить модели
		Если НРег(Форма.Параметр) = "подключить" Тогда
			// начало работы
			ИнициализацияНастройки();
			
			Если ЗагрузитьВсеМодели() = 1 Тогда
				Если ЗагрузитьНастройку() = 1 Тогда
					ПодключитьОборудование();
				КонецЕсли;
			КонецЕсли;
		ИначеЕсли НРег(Форма.Параметр) = "отключить" Тогда
			// завершение работы
			ОтключитьОборудование();
		КонецЕсли;
	Иначе
		Если ЗагрузитьВсеМодели() = 0 Тогда
			Сообщить(ОшибкаОписание, "!");
		Конецесли;
		
		ИнициализироватьДиалог();
			
		Форма.ИспользоватьЗакладки(1);
		Форма.Закладки.ДобавитьЗначение("Сведения"  , "Сведения");
		Форма.Закладки.ДобавитьЗначение("ФР"        , "Фискальный регистратор");
			
		Форма.Закладки.ТекущаяСтрока(2);
		Форма.ИспользоватьСлой("Заголовок,Кнопки,ФР", 2);
		Форма.ФРДляПриемаНаличныхОтЮрЛиц.Видимость(0);
	КонецЕсли;
	
КонецПроцедуры // ПриОткрытии()

//******************************************************************************
// Предопределенная процедура.
//
Процедура ПриВыбореЗакладки(НомерЗакладки, ЗначениеЗакладки)
	Форма.ИспользоватьСлой("Заголовок,Кнопки," + ЗначениеЗакладки, 2);
	Форма.ФРДляПриемаНаличныхОтЮрЛиц.Видимость(0);
КонецПроцедуры // ПриВыбреЗакладки()

//******************************************************************************
// Предопределенная процедура.
//
Процедура ПриНачалеВыбораЗначения(ИдентЭлемДиалога, ФлагСтандОбр)
	Перем ИмяКаталога;
	
	Если ИдентЭлемДиалога = "OfflineКаталогОбмена" Тогда
	    СтатусВозврата(0);
		Если ФС.ВыбратьКаталог(ИмяКаталога, "Выбор каталога обмена данными", 60) = 1 Тогда
			OfflineКаталогОбмена = ИмяКаталога;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ПриНачалеВыбораЗначения()

////////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ
// 

ОшибкаОписание        = "";
ИменаПараметровМодели = "Вид,Модель,Компонента,ПрогИд,Обработка";

Модели = СоздатьОбъект("ТаблицаЗначений");
Модели.НоваяКолонка("Вид");
Модели.НоваяКолонка("Модель");
Модели.НоваяКолонка("Компонента");
Модели.НоваяКолонка("ПрогИд");
Модели.НоваяКолонка("Обработка");
Модели.НоваяКолонка("ФайлОписаний");

ИмяФайлаНастройки = ФС.WindowsКаталог() + "\1cBuh.txt";
СтрокВнастройке   = 4;

// Для оповещения о успешно подключенном оборудовании
ТаблицаТОДоПодключения = СоздатьОбъект("ТаблицаЗначений");
ТаблицаТОДоПодключения.НоваяКолонка("ТОНаименование");
ТаблицаТОДоПодключения.НоваяКолонка("ТОВключено");
ТаблицаТОДоПодключения.НоваяКолонка("ТОМодель");
ТаблицаТОДоПодключения.НоваяКолонка("ТОПоследняяБуква");
ТаблицаТОПослеПодключения = СоздатьОбъект("ТаблицаЗначений");
ТаблицаТОПослеПодключения.НоваяКолонка("ТОНаименование");
ТаблицаТОПослеПодключения.НоваяКолонка("ТОВключено");
ТаблицаТОПослеПодключения.НоваяКолонка("ТОМодель");
ТаблицаТОПослеПодключения.НоваяКолонка("ТОПоследняяБуква");