////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

Перем ВидОбъекта;
Перем КаталогБазы;
Перем СписокKladr;
Перем ТекущееНаправление;
Перем КодировкаБД;
Перем Файл;
Перем ФорматКлассификатора;
Перем ПоказыватьТолькоЗначимые; 
Перем ПринудительноПереиндексировать; 


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ МОДУЛЯ
//
//******************************************************************************
// УстановитьКаталогБазы()
//
// Описание:
//  Определяет в каком каталоге должен находится классификатор.
//
Процедура УстановитьКаталогБазы()
	
	КаталогБазы = "";
	Если Метаданные.Константа("КаталогКлассификаторов").Выбран() = 1 Тогда
		КаталогБазы=СокрЛП(Константа.ПолучитьАтрибут("КаталогКлассификаторов"));
	КонецЕсли;
	
	Если ПустаяСтрока(КаталогБазы) = 1 Тогда
		КаталогБазы = КаталогИБ() + "ExtDb\";
	КонецЕсли;
	
	Если Прав(КаталогБазы, 1) <> "\" Тогда
		КаталогБазы = КаталогБазы + "\";
	КонецЕсли;
	
	КаталогБазы = СокрЛП(КаталогБазы);
	
КонецПроцедуры // УстановитьКаталогБазы()

//******************************************************************************
// ВидПоНомеру(Номер)
//
// Параметры:
//  Номер (целое число) - номер объекта (предопределенный) вид которого мы хотим получить.
//
// Возвращаемое значение:
//  (строка) - вид объекта
// 
// Описание:
//  Определяет вид объекта по номеру.
//
Функция ВидПоНомеру(Номер)
	
	Возврат ?(Номер = 1, "Регион", ?(Номер = 2, "Район", ?(Номер = 3, "Город", ?(Номер = 4, "НасПункт", ?(Номер = 5, "Улица", "")))));
	
КонецФункции // ВидПоНомеру()

//******************************************************************************
// НомерПоВиду(Вид)
//
// Параметры:
//  Вид (строка) - вид объекта предопределенный номер которого мы хотим получить.
//
// Возвращаемое значение:
//  (число) - номер объекта
// 
// Описание:
//  Определяет номер объекта по виду.
//
Функция НомерПоВиду(Вид)
	
	Возврат ?(Вид = "Регион", 1, ?(Вид = "Район", 2, ?(Вид = "Город", 3, ?(Вид = "НасПункт", 4, ?(Вид = "Улица", 5, 0)))));
	
КонецФункции // НомерПоВиду()

//******************************************************************************
// ВходитВИнтервал(Номер, Интервал)
//
// Параметры: 
//  Номер - (число, строка) номер дома
//  Интервал - (строка), интервал чисел (домов)
//
// Возвращаемое значение:
//  число 1 если заданное число входит в диапазон, 0 - если не входит
//
// Описание:
//  Функция определяет входимость числа в заданный диапазон
//  При этом диапазон задается как это описано в комментарии к функции ЧислоВИнтервале
//		
Функция ВходитВИнтервал(Номер, Интервал)
	
	Если ТипЗначенияСтр(Номер) = "Строка" Тогда // Дом представлен в виде строки
		// Дом представлен в виде строки
		Возврат ?(Врег(Номер) = Интервал, 1, 0);
			
	ИначеЕсли Найти(Интервал,"Ч") > 0 Тогда		// диапазон четных чисел
		Интервал      = СтрЗаменить(Интервал, "Ч", "");
		Четность = 2;
		
	ИначеЕсли Найти(Интервал,"Н") > 0 Тогда	// диапазон нечетных чисел
		Интервал      = СтрЗаменить(Интервал, "Н", "");
		Четность = 1;
		
	ИначеЕсли (Найти(Интервал, "-") = 0) и (Строка(Число(Интервал)) <> Интервал) Тогда 
		// интервал это дом представленный в виде строки
		Возврат 0;
		
	Иначе
		Четность=0;
		
	КонецЕсли;
	
	Интервал = СтрЗаменить(Интервал, ")", ""); // на всякий случай уберем скобки
	Интервал = СтрЗаменить(Интервал, "(", "");
	Позиция  = Найти(Интервал, "-");
	Попали = 0;
	
	Если Позиция <> 0 Тогда
		МинЗначение  = Число(Лев(Интервал, Позиция - 1));
		МаксЗначение = Число(Сред(Интервал, Позиция + 1));
		Если (Номер >= МинЗначение) И (Номер <= МаксЗначение) Тогда
			Попали = 1;
		КонецЕсли;
		
	Иначе
		Если Номер = Число(Интервал) Тогда
			Попали = 1;
		КонецЕсли;
		
	КонецЕсли;
	
	Если (Попали = 1) И (
	((Четность = 2) И (Номер % 2 = 0)) ИЛИ 
	((Четность = 1) И (Номер % 2 = 1)) ИЛИ 
	 (Четность = 0)) Тогда
		Возврат 1;
		
	КонецЕсли;
	
	Возврат 0;
	
КонецФункции // ВходитВИнтервал()

//******************************************************************************
// НомерДомаВИнтервале(Номер,Интервал)
//
// Параметры: 
//  Номер - (число, строка) номер дома
//  Интервал - (строка), интервал чисел (домов)
//
// Возвращаемое значение:
//  число 1 если заданное число входит в интервал, 0 - если не входит
//
// Описание:
//  Функция определяет входимость:
//  1. Номера дома (представленного в виде строки)
//     где Номер дома, это строка вида:
//     <СтрокаДом> пример: 58А, 32/1, 50А/8
//
//  2. Номера дома и номера корпуса (строения), в виде строки:
//     <СтрокаДом>к<СтрокаКорпус>,   пример: 32к1   это дом 32 корпус 1, 
//     <СтрокаДом>/<СтрокаКорпус>,   пример: 32/1   это дом 32 корпус 1, 
//     <СтрокаДом>стр<СтрокаКорпус>, пример: 32стр1 это дом 32 корпус 1, 
//		
//  3. Числа (номера дома) в заданный интервал чисел
//     При этом интервал задается строкой вида:
//     <Диапазон>[,<Диапазон>]
//     где Диапазон, это строка вида:
//     [Ч/Н]<Число>[-<Число>]
//     Префикс Ч или Н диапазона обозначает четность и нечетность входящих в него чисел
//     Пример: в интервал Ч12-14,Н1-5,20-29 входят числа 1,3,5,12,14 и все с 20 по 29
//
Функция НомерДомаВИнтервале(Номер, Знач Интервал)
	
	Пока 1 = 1 Цикл
		
		Позиция = Найти(Интервал, ",");
		Если Позиция = 0 Тогда
			Возврат ВходитВИнтервал(Номер, Интервал);
		Иначе
			Если ВходитВИнтервал(Номер, СокрЛП(Лев(Интервал, Позиция - 1))) = 1 Тогда
				Возврат 1;
			Иначе
				Интервал = Сред(Интервал, Позиция + 1);
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
КонецФункции // НомерДомаВИнтервале()

//******************************************************************************
// ПолучитьИндексПоНомеруДома(БазаАдреса, КодУлицы, Дом, Корпус)
// 
// Параметры:
//  БазаАдреса (объект "XBase") - объект XBase, в котором производится поиск.
//  КодУлицы (строка) - код улицы по которой расположен дом.
//  Дом (строка) - номер дома индекс по которому нужно определить.
//  Корпус (строка) - номер корпуса дома индекс по которому нужно определить.
//
// Возвращаемое значение:
//  строка - индекс.
//
// Описание:
//
Функция ПолучитьИндексПоНомеруДома(БазаАдреса, КодУлицы, Дом, Корпус)
	
	// в данном случае нужно определить индекс по номеру дома
	БазаАдреса.ТекущийИндекс("DOM");
	
	Если ФорматКлассификатора = 2 Тогда
    	КодУлицы = КодУлицы + "01";
	КонецЕсли;
	
	Если БазаАдреса.Найти(КодУлицы, 0) = 1 Тогда
		
		Если (ПустаяСтрока(Корпус) = 0) или (СокрЛП(Дом) <> Строка(Число(Дом))) Тогда
			
			// проверим для начала по номеру дома и номеру корпуса
			Пока БазаАдреса.ВКонце() = 0 Цикл
				
				Интервал = Врег(СокрЛП(БазаАдреса.NAME));
			    
				Если ФорматКлассификатора = 2 Тогда
					Если Лев(БазаАдреса.CODE, 17) <> Лев(КодУлицы, 17) Тогда
						Прервать;
					КонецЕсли;
	                                                
				Иначе
					Если БазаАдреса.CODE <> КодУлицы Тогда
						Прервать;
					КонецЕсли;
	
				КонецЕсли;
					
				Если (НомерДомаВИнтервале(СокрЛП(Дом) + ?(ПустаяСтрока(Корпус) = 0, "К", "") + СокрЛП(Корпус), Интервал) = 1) Тогда
					Возврат Формат(БазаАдреса.INDEX, "С6");
					
				ИначеЕсли (НомерДомаВИнтервале(СокрЛП(Дом) + ?(ПустаяСтрока(Корпус) = 0, "/", "") + СокрЛП(Корпус), Интервал) = 1) Тогда
					Возврат Формат(БазаАдреса.INDEX, "С6");
					
				ИначеЕсли (НомерДомаВИнтервале(СокрЛП(Дом) + ?(ПустаяСтрока(Корпус) = 0, "стр", "") + СокрЛП(Корпус), Интервал) = 1) Тогда
					Возврат Формат(БазаАдреса.INDEX, "С6");
					
				КонецЕсли;
				
				БазаАдреса.Следующая();
				
			КонецЦикла;
			
			БазаАдреса.Найти(КодУлицы, 0);
			
		КонецЕсли;
		
		// проверим по номеру дома
		Пока БазаАдреса.ВКонце() = 0 Цикл
			
			Интервал = Врег(СокрЛП(БазаАдреса.NAME));
			
			Если ФорматКлассификатора = 2 Тогда
				Если Лев(БазаАдреса.CODE, 17) <> Лев(КодУлицы, 17) Тогда
					Прервать;
				КонецЕсли;
				
			Иначе
				Если БазаАдреса.CODE <> КодУлицы Тогда
					Прервать;
				КонецЕсли;
				
			КонецЕсли;
			
			Если НомерДомаВИнтервале(Число(Дом), Интервал) = 1 Тогда
				Возврат Формат(БазаАдреса.INDEX, "С6");
				
			КонецЕсли;
			
			БазаАдреса.Следующая();
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецФункции // ПолучитьИндексПоНомеруДома()

//*****************************************************************************
// СпозиционироватьОбъект()
//
// Параметры:
//  КодОбъекта (строка) - код объекта, на который мы хотим спозиционироваться.
//  НаименованиеОбъекта (строка) - наименование объекта, на который мы хотим спозиционироваться.
//
// Описание:
//    Производит позиционирование в таблице значений по переданным параметрам, 
//  если позиционирование, не произошло устанавливает текущей первую строку.
//
Процедура СпозиционироватьОбъект(КодОбъекта, НаименованиеОбъекта = "")

	ТаблицаАдреса.Сортировать("Наименование");
	
	НомерСтроки = 0;
	
	Если ПустаяСтрока(КодОбъекта) = 0 Тогда
		ТаблицаАдреса.НайтиЗначение(КодОбъекта, НомерСтроки, "Код");
		
	ИначеЕсли ПустаяСтрока(НаименованиеОбъекта) = 0 Тогда
		ТаблицаАдреса.НайтиЗначение(Врег(НаименованиеОбъекта), НомерСтроки, "ВрегНаименование");
		
	КонецЕсли;
	
	Если ТаблицаАдреса.КоличествоСтрок() > 0 Тогда
		Если НомерСтроки = 0 Тогда
			ТаблицаАдреса.ТекущаяСтрока(1);
		Иначе
			ТаблицаАдреса.ТекущаяСтрока(НомерСтроки);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // СпозиционироватьОбъект()

//******************************************************************************
// ПолучитьНазваниеИндекса(Вид, КодВладельца, ПоКоду = 0)
//
// Параметры:
//  Вид (строка) - вид объекта.
//  КодВладельца (строка) - сокращенный код владельца.
//  ПоКоду (число, необязательный) - 1 - индекс по кодам, 0 - индекс по наименованиям.
//
// Возвращаемое значение:
//  строка - название индекса
//
// Описание:
//
Функция ПолучитьНазваниеИндекса(Вид, КодВладельца, ПоКоду = 0)
	
	Возврат	?(ПоКоду = 1, "", "N") +                                     // "" - по кодам, "N" - по кодам и наименованиям
			?(Вид = "Регион",   "REGION",                                // регионы
			?(Вид = "Район",    "RAION",                                 // районы
	        ?((Вид = "Город") и (СтрДлина(КодВладельца) = 5),    "GOR2", // города по районам
	        ?(Вид = "Город",    "GOR1", // города по регионам
	        ?((Вид = "НасПункт") и (СтрДлина(КодВладельца) = 8), "NP3",  // нас.пункты по городам
	        ?((Вид = "НасПункт") и (СтрДлина(КодВладельца) = 5), "NP2",  // нас.пункты по районам
	        ?(Вид = "НасПункт", "NP1",  // нас.пункты по регионам
			"CODE")))))));                                               // улицы 

КонецФункции // ПолучитьНазваниеИндекса()

//*****************************************************************************
// ПроверитьИндексныйФайл(БазаАдреса, Файл)
//
// Параметры:
//  БазаАдреса (объект "XBase").
//  Файл (строка) - наименование файла, который мы хотим открыть.
//
// Описание:
//  Проверяет на существование и на наличие нужных индексов индексный файл.
//  В случае если условия не выполняется осуществляет индексирование.
//
Процедура ПроверитьИндексныйФайл(БазаАдреса, Файл)
	
	ФайлБазы   = КаталогБазы + Файл + ".DBF";
	ФайлИндекс = КаталогБазы + Лев(Файл, 7) + "1.CDX";
	
	Если (ФС.СуществуетФайл(ФайлИндекс) = 1) Тогда
		Попытка
			БазаАдреса.ОткрытьФайл(ФайлБазы, ФайлИндекс, 1);
		Исключение
		КонецПопытки;
		Если Прав(Файл,1) = "w" Тогда 
			БазаАдреса.КодоваяСтраница(0);	// windows классификатор
		Иначе
			БазаАдреса.КодоваяСтраница(1);
		КонецЕсли;
				
		Если БазаАдреса.Открыта() = 1 Тогда
			
			ВсегоИндексовВБазе = ",";
			Для Номер = 1 По БазаАдреса.КоличествоИндексов() Цикл
				Название = "";Выражение = "";Уникальность = "";Убывание = "";Фильтр = "";
				БазаАдреса.ОписаниеИндекса(Номер, Название, Выражение, Уникальность, Убывание, Фильтр);
				ВсегоИндексовВБазе = ВсегоИндексовВБазе + Название + ",";
			КонецЦикла;
			
			Индексы =	?((Файл = "Kladr") ИЛИ (Файл = "Kladrw"),  "CODE,REGION,RAION,GOR1,GOR2,NP1,NP2,NP3,NREGION,NRAION,NGOR1,NGOR2,NNP1,NNP2,NNP3,", 
						?((Файл = "Street") ИЛИ (Файл = "Streetw"), "CODE,NCODE,DOM,",
						?((Файл = "Doma") ИЛИ (Файл = "Domaw"), "DOM,","NAME,")));
						
			Для Номер = 1 По СтрЧислоВхождений(Индексы, ",") Цикл
				
				Значение = Индексы;
				Если Найти(Значение, ",") > 0 Тогда
					Значение = Сред(Значение, 1, Найти(Значение, ",") - 1);
					Индексы  = Сред(Индексы, Найти(Индексы, ",") + 1);
				КонецЕсли;
				Если Найти(ВсегоИндексовВБазе, "," + Значение + ",") = 0 Тогда
					// не нашли нужный индекс, базу надо переиндексировать
					БазаАдреса.ЗакрытьФайл();
					Прервать;
				КонецЕсли;
				
			КонецЦикла;
	
		КонецЕсли;
	КонецЕсли;
	
	Если ПринудительноПереиндексировать = 1 Тогда
		// принудительно переиндексируем базу
		БазаАдреса.ЗакрытьФайл();
	КонецЕсли;
		
	Если БазаАдреса.Открыта() = 0 Тогда
		
		Если Вопрос("Классификатор необходимо переиндексировать. 
		            |Это может занять некоторое время. Продолжить?", "Да+Нет", 60) <> "Да" Тогда
			Возврат;
		КонецЕсли;
	
		ПринудительноПереиндексировать = 0;
		
		Попытка
			БазаАдреса.ОткрытьФайл(ФайлБазы, "", 0);
		Исключение
	    	Предупреждение("Не удалось получить монопольный доступ к классификатору. 
					       |Индексация не выполнена. Завершите работу с классификатором в других программах и повторите попытку.", 60);
			Возврат;
		КонецПопытки;

		Если Прав(Файл,1) = "w" Тогда 
			БазаАдреса.КодоваяСтраница(0);	// windows классификатор
		Иначе
			БазаАдреса.КодоваяСтраница(1);
		КонецЕсли;
		
		Если БазаАдреса.Открыта() = 0 Тогда
			Возврат;
		КонецЕсли;
		
//		БазаАдреса.КодоваяСтраница(1);
		
		Выражение = "UPPER(TRIM(NAME)+"" ""+TRIM(SOCR))";
		Если (Файл = "Kladr") ИЛИ (Файл = "Kladrw") Тогда
			
			уИ   = ".AND.";
			//уИЛИ = ".OR.";
			
			Район   = "(SUBSTR(CODE, 3, 3) <> ""000"")";
			Район0  = "(SUBSTR(CODE, 3, 3) =  ""000"")";
			
			Город   = "(SUBSTR(CODE, 6, 3) <> ""000"")";
			Город0  = "(SUBSTR(CODE, 6, 3) =  ""000"")";
			//Город1  = "(SUBSTR(CODE, 6, 3) =  ""001"")";
			
			НПункт  = "(SUBSTR(CODE, 9, 3) <> ""000"")";
			НПункт0 = "(SUBSTR(CODE, 9, 3) =  ""000"")";
			//НПункт1 = "(SUBSTR(CODE, 9, 3) =  ""001"")"; 
			
			Если (ПоказыватьТолькоЗначимые = 1) и (ФорматКлассификатора = 2) Тогда
				ТолькоЗначимые = ".AND.(SUBSTR(CODE, 12, 2) = ""00"")";
				ТолькоЗначимыеУлицы = ".AND.(SUBSTR(CODE, 16, 2) = ""00"")";
				
			Иначе
				ТолькоЗначимые = "";
				ТолькоЗначимыеУлицы = "";
				
			КонецЕсли;
			
			//СОРТИРОВКА ПО КОДАМ
			БазаАдреса.ДобавитьИндекс("CODE",   "CODE",                            1, 0, "");
			// все регионы
			БазаАдреса.ДобавитьИндекс("REGION", "CODE",                            1, 0, Район0 + уИ + Город0  + уИ + НПункт0 + ТолькоЗначимые);
			// районы по регионам
			БазаАдреса.ДобавитьИндекс("RAION",  "CODE",                            1, 0, Район  + уИ + Город0  + уИ + НПункт0 + ТолькоЗначимые);
			// города по регионам
			БазаАдреса.ДобавитьИндекс("GOR1",   "CODE",                            1, 0, Город  + уИ + НПункт0 + ТолькоЗначимые);
			//БазаАдреса.ДобавитьИндекс("GOR1",   "CODE",                            1, 0, Город  + уИ + НПункт0 + уИ + "(" + Район0 + уИЛИ + Город1  + ")");
			// города по районам                                                                             
			БазаАдреса.ДобавитьИндекс("GOR2",   "CODE",                            1, 0, Город  + уИ + НПункт0 + уИ + Район + ТолькоЗначимые);
			// нас.пункты по регионам
			БазаАдреса.ДобавитьИндекс("NP1",    "CODE",                            1, 0, НПункт);
			//БазаАдреса.ДобавитьИндекс("NP1",    "CODE",                            1, 0, НПункт + уИ + Город0  + уИ + "(" + Район0 + уИЛИ + НПункт1 + ")");
			// нас.пункты по районам
			БазаАдреса.ДобавитьИндекс("NP2",    "CODE",                            1, 0, НПункт + уИ + Район + ТолькоЗначимые);
			//БазаАдреса.ДобавитьИндекс("NP2",    "CODE",                            1, 0, НПункт + уИ + Город0);
			// нас.пункты по городам
			БазаАдреса.ДобавитьИндекс("NP3",    "CODE",                            1, 0, НПункт + уИ + Город + ТолькоЗначимые);
			
			//СОРТИРОВКА ПО НАИМЕНОВАНИЯМ 
			// все регионы
			БазаАдреса.ДобавитьИндекс("NREGION",   Выражение,                      1, 0, Район0 + уИ + Город0  + уИ + НПункт0 + ТолькоЗначимые);
			// районы по регионам
			БазаАдреса.ДобавитьИндекс("NRAION", "SUBSTR(CODE, 1, 2)+" + Выражение, 1, 0, Район  + уИ + Город0  + уИ + НПункт0 + ТолькоЗначимые);
			// города по регионам
			БазаАдреса.ДобавитьИндекс("NGOR1",  "SUBSTR(CODE, 1, 2)+" + Выражение, 1, 0, Город  + уИ + НПункт0 + ТолькоЗначимые);
			//БазаАдреса.ДобавитьИндекс("NGOR1",  "SUBSTR(CODE, 1, 2)+" + Выражение, 1, 0, Город  + уИ + НПункт0 + уИ + "(" + Район0 + уИЛИ + Город1  + ")");
			// города по районам
			БазаАдреса.ДобавитьИндекс("NGOR2",  "SUBSTR(CODE, 1, 5)+" + Выражение, 1, 0, Город  + уИ + НПункт0 + уИ + Район + ТолькоЗначимые);
			// нас.пункты по регионам
			БазаАдреса.ДобавитьИндекс("NNP1",   "SUBSTR(CODE, 1, 2)+" + Выражение, 1, 0, НПункт + ТолькоЗначимые);
			//БазаАдреса.ДобавитьИндекс("NNP1",   "SUBSTR(CODE, 1, 2)+" + Выражение, 1, 0, НПункт + уИ + Город0  + уИ + "(" + Район0 + уИЛИ + НПункт1 + ")");
			// нас.пункты по районам
			БазаАдреса.ДобавитьИндекс("NNP2",   "SUBSTR(CODE, 1, 5)+" + Выражение, 1, 0, НПункт + уИ + Район + ТолькоЗначимые);
			//БазаАдреса.ДобавитьИндекс("NNP2",   "SUBSTR(CODE, 1, 5)+" + Выражение, 1, 0, НПункт + уИ + Город0);
			// нас.пункты по городам
			БазаАдреса.ДобавитьИндекс("NNP3",   "SUBSTR(CODE, 1, 8)+" + Выражение, 1, 0, НПункт + уИ + Город + ТолькоЗначимые);
			
		ИначеЕсли (Файл = "Street") ИЛИ (Файл = "Streetw")  Тогда
			// по улицам следует индексировать без контроля уникальности
			// так как в Москве много улиц (442) (и еще где-то 40)  с одинаковыми кодами (переименованные)
			ФильтрУлиц    = "(UPPER(TRIM(SOCR))<>""" + AnsiToOem("ДОМ") + """)";
			ФильтрПоДомам = "(UPPER(TRIM(SOCR)) =""" + AnsiToOem("ДОМ") + """)";
			//СОРТИРОВКА ПО КОДАМ
			БазаАдреса.ДобавитьИндекс("CODE",   "CODE",                             0, 0, ФильтрУлиц);
			//СОРТИРОВКА ПО НАИМЕНОВАНИЯМ
			БазаАдреса.ДобавитьИндекс("NCODE",  "SUBSTR(CODE, 1, 11)+" + Выражение, 0, 0, ФильтрУлиц);
			//СОРТИРОВКА ПО ДОМАМ
			БазаАдреса.ДобавитьИндекс("DOM",    "CODE",                             0, 0, ФильтрПоДомам);
			
		ИначеЕсли (Файл = "Doma") ИЛИ (Файл = "Domaw")  Тогда
			// по домам следует индексировать без контроля уникальности
			ФильтрПоДомам = "(UPPER(TRIM(SOCR)) =""" + AnsiToOem("ДОМ") + """)";
			//СОРТИРОВКА ПО ДОМАМ
			БазаАдреса.ДобавитьИндекс("DOM",    "CODE",                             0, 0, ФильтрПоДомам);
			
		Иначе //Если Файл = "Socrbase" Тогда 
			БазаАдреса.ДобавитьИндекс("NAME",   "TRIM(LEVEL)+TRIM(UPPER(SCNAME))",  1, 0, "");
			
		КонецЕсли;
		
		Состояние("Ждите... Индексируется файл - " + ФайлБазы);
		БазаАдреса.СоздатьИндексныйФайл(ФайлИндекс);
		
		Если БазаАдреса.Открыта() = 1 Тогда
			БазаАдреса.ЗакрытьФайл();
			БазаАдреса.ОткрытьФайл(ФайлБазы, ФайлИндекс, 1);
		КонецЕсли;
		
	КонецЕсли;
 
	Если Прав(Файл,1) = "w" Тогда 
		БазаАдреса.КодоваяСтраница(0);	// windows классификатор
	Иначе
		БазаАдреса.КодоваяСтраница(1);
	КонецЕсли;
	
КонецПроцедуры // ПроверитьИндексныйФайл()

//*****************************************************************************
// ОткрытьВнешнийФайл(БазаАдреса, Файл)
//
// Параметры:
//  БазаАдреса (объект "XBase").
//  Файл (строка) - наименование файла, который мы хотим открыть.
//
// Возвращаемое значение:
//	1 - базу открыта, 0 - база не открыта
// 
// Описание:
//  Открывает внешний классификатор (dbf - файл).
//  В случае если файл открыт возвращает 1.
//
Функция ОткрытьВнешнийФайл(БазаАдреса, Файл)
	
	Перем АтрибутыФайла;
	
	ФайлБазы = КаталогБазы + Файл + ".DBF";
	
	Если (ФС.СуществуетФайл(ФайлБазы) = 1) и (БазаАдреса.Открыта() = 0) Тогда
		
		ФС.АтрибутыФайла(ФайлБазы, , АтрибутыФайла);
		Если Число(Сред(АтрибутыФайла, 1, 1)) = 1 Тогда
			Предупреждение("Невозможно открыть файл" + РазделительСтрок +
			ФайлБазы + РазделительСтрок + 
			"Установлен атрибут только для чтения.", 60);
		
		Иначе
			ПроверитьИндексныйФайл(БазаАдреса, Файл);
		
			Если БазаАдреса.Открыта() = 0 Тогда
				Предупреждение("Невозможно открыть файл" + РазделительСтрок +
				ФайлБазы + РазделительСтрок + 
				"Возможно, он уже открыт другим пользователем.", 60);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если Прав(Файл,1) = "w" Тогда 
		БазаАдреса.КодоваяСтраница(0);	// windows классификатор
	Иначе
		БазаАдреса.КодоваяСтраница(1);
	КонецЕсли;

	Возврат БазаАдреса.Открыта();
	
КонецФункции // ОткрытьВнешнийФайл()

//******************************************************************************
// УстановитьВладельца(Вид, Список)
//
// Параметры:
//  Вид (строка) - вид объекта.
//  Список (СписокЗначений) - список уже подобранных владельцев выбранного объекта.
//
// Возвращаемое значение:
//  1 - подтверждает запись владельца
//  0 - запрещает запись владельца
//
// Описание:
//    Определяет если обрабатывается адрес райцентра в районе (в данном случае описывать
//  наименование района не обязательно).
//
Функция УстановитьВладельца(Вид, Список)
	
	Если Вид = "Район" Тогда 
		
		// если не нужны районы для райцентров нужно раскомментарить следующие строки, иначе закомментарьте
		Если ПустоеЗначение(Список.Получить("Город")) = 0 Тогда
			Если Число(Сред(Список.Получить("Город").Получить("Код"), 6, 3)) = 1 Тогда
				// это райцентр - город 
				Возврат 0;
			КонецЕсли;
			
		ИначеЕсли ПустоеЗначение(Список.Получить("НасПункт")) = 0 Тогда
			Если Число(Сред(Список.Получить("НасПункт").Получить("Код"), 9, 3)) = 1 Тогда
				// это райцентр - нас.пункт
				Возврат 0;
			КонецЕсли;
			
		ИначеЕсли (ВидОбъекта = "Город") и (Число(Сред(ТаблицаАдреса.Код, 6, 3)) = 1) Тогда
			// это райцентр - город 
			Возврат 0;
		
		ИначеЕсли (ВидОбъекта = "НасПункт") и (Число(Сред(ТаблицаАдреса.Код, 9, 3)) = 1) Тогда
			// это райцентр - нас.пункт
			Возврат 0;
			
		КонецЕсли;
	
	КонецЕсли;
	
	Возврат 1;
	
КонецФункции // УстановитьВладельца()

//******************************************************************************
// СформироватьСписокВладельцев(Стр = "")
//
// Параметры:
//  Стр (строка) - полный адрес объекта.
//
// Возвращаемое значение:
//  Список родителей, выбираемого объекта.
//
// Описание:
//  Формирует список родителей, выбираемого объекта.
//
Функция СформироватьСписокВладельцев(Стр = "")
	
	БазаАдреса = СоздатьОбъект("XBase");
	КодОбъекта = Лев(ТаблицаАдреса.Код,11);

	ФайлРодителей = "Kladr"; 
	БазаАдреса.КодоваяСтраница(1);
	
	Если ФС.СуществуетФайл(КаталогБазы + "Kladrw.DBF") = 1 Тогда
		ФайлРодителей = "Kladrw";
		БазаАдреса.КодоваяСтраница(0);	// windows классификатор
	КонецЕсли;
	
	Список = СоздатьОбъект("СписокЗначений");
	
	Для Номер = 1 По 4 Цикл
		
		Если ФорматКлассификатора = 1 Тогда
			ПолныйКодОбъекта = Формат(КодОбъекта + "000000000", "С11");
		Иначе
			ПолныйКодОбъекта = Формат(КодОбъекта + "00000000000", "С13");
		КонецЕсли;
		
		Если (Число(Прав(КодОбъекта, 3)) > 0) и (ПолныйКодОбъекта <> СокрП(ТаблицаАдреса.Код)) Тогда
			
			СписокАтрибутов = СоздатьОбъект("СписокЗначений");
			
			Если ПустоеЗначение(СписокKladr.Получить(ПолныйКодОбъекта)) = 0 Тогда
				СписокАтрибутов = СписокKladr.Получить(ПолныйКодОбъекта);
				
			ИначеЕсли ОткрытьВнешнийФайл(БазаАдреса, ФайлРодителей) = 1 Тогда
				БазаАдреса.ТекущийИндекс("CODE");
				Если БазаАдреса.Найти(ПолныйКодОбъекта, 0) = 1 Тогда
					
					Наименование     = СокрП(БазаАдреса.NAME) + " " + СокрП(БазаАдреса.SOCR);
					
					СписокАтрибутов.Установить("Код",          ПолныйКодОбъекта);
					СписокАтрибутов.Установить("Наименование", Наименование); 
					СписокАтрибутов.Установить("Индекс",       СокрП(БазаАдреса.INDEX)); 
					
					СписокKladr.Установить(ПолныйКодОбъекта, СписокАтрибутов);
					
				КонецЕсли;
				
			КонецЕсли;
			
			// если не нужны районы для райцентров нужно раскомментарить следующие строки, иначе закомментарьте
			Если УстановитьВладельца(ВидПоНомеру(5 - Номер), Список) = 0 Тогда
				СписокАтрибутов.УдалитьВсе();
			КонецЕсли;
			
			Если (ПустаяСтрока(Стр) = 0) и (ПустаяСтрока(СписокАтрибутов.Получить("Наименование")) = 0) Тогда
				Стр = СписокАтрибутов.Получить("Наименование") + ", " + Стр;
			КонецЕсли;
			
			Список.Установить(ВидПоНомеру(5 - Номер), СписокАтрибутов); 
			
		КонецЕсли;
				
		Если Номер < 4 Тогда
			КодОбъекта = Сред(КодОбъекта, 1, СтрДлина(КодОбъекта) - 3);
		КонецЕсли;
			
	КонецЦикла;
				
	Возврат ?(ПустаяСтрока(Стр) = 0, Стр, Список);
	
КонецФункции // СформироватьСписокВладельцев()

//******************************************************************************
// АдреснаяПодсказка()
//
// Возвращаемое значение:
//  Строка - полный адрес для текущего элемента
//
// Описание:
//  Возвращает строку - полный адрес от региона до уровня 
//  текущего элемента, наприрмер, для города это регион, район, город
//  Вызывается при отрисовке статика формы
//		
Функция АдреснаяПодсказка()
	
	Стр = ТаблицаАдреса.Наименование;
	
	Возврат СформироватьСписокВладельцев(Стр);
	
КонецФункции // АдреснаяПодсказка()

//*****************************************************************************
// ПриВыбореЭлемента()
//
// Вызывается из формул элементов диалога:
//  ТаблицаАдреса
//
// Описание:
//  Обрабатывает выбор строки в таблице значений.
//
Процедура ПриВыбореЭлемента()
	
	Если (ТаблицаАдреса.НомерСтроки = 0) Тогда
		Возврат;
	КонецЕсли; 
	
	Если Форма.Параметр = 1 Тогда
		Форма.Параметр = СокрЛП(ТаблицаАдреса.Код);
		
	Иначе
		СписокПараметров = СоздатьОбъект("СписокЗначений");
		СписокПараметров.Установить("Код",          СокрЛП(ТаблицаАдреса.Код));
		СписокПараметров.Установить("Наименование", СокрЛП(ТаблицаАдреса.Наименование));
		СписокПараметров.Установить("Индекс",       СокрЛП(ТаблицаАдреса.Индекс));
		
		Если (ВидОбъекта <> "Регион") Тогда
			СписокПараметров.Установить("Родители", СформироватьСписокВладельцев());
		КонецЕсли; 
		
		Форма.Параметр = СписокПараметров;
		
	КонецЕсли; 
	
	Форма.Закрыть();
	
КонецПроцедуры // ПриВыбореЭлемента()

//*****************************************************************************
// ВывестиТаблицуАдреса(БазаАдреса, КодВладельца)
//
// Параметры:
//  БазаАдреса (объект "XBase") - объект XBase, в котором производится перебор.
//  КодВладельца (строка) - сокращенный код самого младшего владельца.
//
// Описание:
//  Перебирает строки объекта XBase, по владельцу.
//  Заполняет таблицу значений.
//
Процедура ВывестиТаблицуАдреса(БазаАдреса, КодВладельца)
		
	Если ВидОбъекта = "Улица" Тогда
		Если (глВладелецСпискаУлиц = КодВладельца) и (ТипЗначенияСтр(глСписокУлиц) = "ТаблицаЗначений") Тогда
			ТаблицаАдреса.КоличествоСтрок(глСписокУлиц.КоличествоСтрок());
			Если глСписокУлиц.КоличествоСтрок() > 0 Тогда
				ТаблицаАдреса.Заполнить(глСписокУлиц, 1, глСписокУлиц.КоличествоСтрок());
			КонецЕсли; 
		Иначе
			глСписокУлиц = СоздатьОбъект("ТаблицаЗначений");
			глСписокУлиц.Загрузить(ТаблицаАдреса);
		КонецЕсли; 
			
	КонецЕсли; 
	
	Если ТаблицаАдреса.КоличествоСтрок() = 0 Тогда 
		БазаАдреса.ТекущийИндекс(ПолучитьНазваниеИндекса(ВидОбъекта, КодВладельца, 1));
		БазаАдреса.Первая();
		
		Если ПустаяСтрока(КодВладельца) = 0 Тогда
			БазаАдреса.Найти(КодВладельца, 1);
		КонецЕсли;
		
		Пока БазаАдреса.ВКонце() = 0 Цикл
			
			Если ПустаяСтрока(КодВладельца) = 0 Тогда
				Если Сред(БазаАдреса.CODE, 1, СтрДлина(КодВладельца))  <> КодВладельца Тогда
					Прервать;
					
				ИначеЕсли БазаАдреса.CODE = КодВладельца Тогда
					БазаАдреса.Следующая();
					Продолжить;
					
				КонецЕсли;
			КонецЕсли;
			
			Наименование = СокрП(БазаАдреса.NAME) + " " + СокрП(БазаАдреса.SOCR);
			
			ТаблицаАдреса.НоваяСтрока();
			ТаблицаАдреса.Код              = СокрП(БазаАдреса.CODE);
			ТаблицаАдреса.Наименование     = Наименование;
			ТаблицаАдреса.ВрегНаименование = Врег(Наименование);
			ТаблицаАдреса.Индекс           = БазаАдреса.INDEX;
			БазаАдреса.Следующая();
			
		КонецЦикла;
		
		Если ВидОбъекта = "Улица" Тогда
			//СохранитьЗначение("КодВладельцаУлицы", КодВладельца);
			//СохранитьЗначение("СписокУлиц",        ТаблицаАдреса);
			глВладелецСпискаУлиц = КодВладельца;
			глСписокУлиц.КоличествоСтрок(ТаблицаАдреса.КоличествоСтрок());
			Если ТаблицаАдреса.КоличествоСтрок() > 0 Тогда
				глСписокУлиц.Заполнить(ТаблицаАдреса, 1, ТаблицаАдреса.КоличествоСтрок());
			КонецЕсли; 
		КонецЕсли; 
		
	КонецЕсли; 

КонецПроцедуры // ВывестиТаблицуАдреса()

//******************************************************************************
// ПолучитьПоследнееСловоИзСтроки(Стр)
// 
// Параметры:
//  Стр (строка) - строка в которой нужно выделить самое последнее слово.
//
// Возвращаемое значение:
//  строка - последнее слово в строке.
//
// Описание:
//
Функция ПолучитьПоследнееСловоИзСтроки(Стр)
	
	Пока СтрЧислоВхождений(СокрЛП(Стр), " ") > 0 Цикл
		Стр = Сред(Стр, Найти(Стр, " ") + 1, СтрДлина(Стр));
	КонецЦикла;
	
	Возврат СокрЛП(Стр);
	
КонецФункции // ПолучитьПоследнееСловоИзСтроки()

//*****************************************************************************
// ПроверитьСокращение(НаименованиеОбъекта)
//
// Параметры:
//  НаименованиеОбъекта (строка) - наименование объекта, сокращение в котором должно быть.
//
// Возвращаемое значение:
//  1 - текущее сокращение не найдено
//  0 - текущее сокращение найдено
// 
// Описание:
//  Проверяет на правильность сокращение объекта (обл, г, д, ул и т.п.).
//  Если сокращение не введено, или введено не правильно, формирует таблицу
//  возможных значений сокращений.
//
Функция ПроверитьСокращение(НаименованиеОбъекта)
	
	Если ПустаяСтрока(НаименованиеОбъекта) = 1 Тогда
		Возврат 0;
	КонецЕсли;
	
	Форма.Параметр = 1;
	Форма.Заголовок("Справочник: Сокращения " + ?(ВидОбъекта = "Улица", "Улиц", ?(ВидОбъекта = "НасПункт", "Населенных пункт", ВидОбъекта) + "ов"), 0);
	БазаАдреса = СоздатьОбъект("XBase");

	Если ОткрытьВнешнийФайл(БазаАдреса, "Socrbase") = 1 Тогда

		БазаАдреса.КодоваяСтраница(1);
		БазаАдреса.ТекущийИндекс("NAME"); 
		БазаАдреса.Первая();
            
		НашлиСловоСквер = 0;
		ПоследняяЗапись = 0;
		НоваяЗапись = 1;
		БазаАдреса.Следующая();
		
		Пока  ПоследняяЗапись <> НоваяЗапись Цикл
		    
			Если БазаАдреса.ВКонце() = 0 Тогда
			Буфер = БазаАдреса.SCNAME;
			Если СокрЛП(Буфер) = "сквер" Тогда
				НашлиСловоСквер = 1;
				Прервать;
			КонецЕсли;                                 
			КонецЕсли;                                 

			БазаАдреса.Следующая();
            ПоследняяЗапись = НоваяЗапись;
			НоваяЗапись = БазаАдреса.НомерЗаписи();

		КонецЦикла;			
		
		Если НашлиСловоСквер = 0 Тогда
			БазаАдреса.КодоваяСтраница(0);	// windows классификатор
		КонецЕсли;
		
		БазаАдреса.Первая();
		Если БазаАдреса.Найти(Строка(НомерПоВиду(ВидОбъекта)) + (Врег(ПолучитьПоследнееСловоИзСтроки(НаименованиеОбъекта))), 0) = 0 Тогда
			// если не нашли сокращение сформируем таблицу сокращений
			БазаАдреса.Найти(НомерПоВиду(ВидОбъекта), 1);
			
			Пока БазаАдреса.ВКонце() = 0 Цикл
				
				Если Число(БазаАдреса.LEVEL) <> НомерПоВиду(ВидОбъекта) Тогда
					Прервать;
				КонецЕсли;
				
				ТаблицаАдреса.НоваяСтрока();
				ТаблицаАдреса.Код          = СокрП(БазаАдреса.SCNAME);
				ТаблицаАдреса.Наименование = СокрП(БазаАдреса.SOCRNAME);
				
				Если СокрЛП(ТаблицаАдреса.Код) = СокрЛП(ПолучитьПоследнееСловоИзСтроки(НаименованиеОбъекта)) Тогда
					ТаблицаАдреса.УдалитьСтроки(); 
					Возврат 0;
				КонецЕсли;
				
				БазаАдреса.Следующая();
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ТаблицаАдреса.КоличествоСтрок() > 0 Тогда
		ТаблицаАдреса.Сортировать("Код");
		ТаблицаАдреса.ВидимостьКолонки("Индекс", 0);
		Возврат 1;
		
	Иначе
		Возврат 0;
		
	КонецЕсли;
	
КонецФункции // ПроверитьСокращение()

//*****************************************************************************
// ПолучитьКодВладельца(БазаАдреса, КодВладельца, Список, НаименованиеОбъекта)
//
// Параметры:
//  БазаАдреса (объект "XBase") - объект XBase, в котором производится поиск.
//  КодВладельца (строка) - сокращенный код владельца, преданный при открытии.
//  Список (СписокЗначений) - список всех владельцев, преданный при открытии.
//  НаименованиеОбъекта (строка) - наименование объекта, преданное при открытии.
//
// Возвращаемое значение:
//  1 - код самого младшего владельца установлен.
//  0 - код самого младшего владельца неустановлен.
//
// Описание:
//  Определяет код самого младшего владельца, из переданных значений при открытии,
//
Функция ПолучитьКодВладельца(БазаАдреса, КодВладельца, Список, НаименованиеОбъекта)
	
	ВидВладельцаПоКоду = ?(СтрДлина(КодВладельца) = 0, "", ?(СтрДлина(КодВладельца) = 2, "Регион", ?(СтрДлина(КодВладельца) = 5, "Район", ?(СтрДлина(КодВладельца) = 8, "Город", "НасПункт"))));

	ФайлРодителей = "Kladr"; 
	БазаАдреса.КодоваяСтраница(1);
	
	Если ФС.СуществуетФайл(КаталогБазы + "Kladrw.DBF") = 1 Тогда
		ФайлРодителей = "Kladrw";
		БазаАдреса.КодоваяСтраница(0);	// windows классификатор
	КонецЕсли;
	
	Если ОткрытьВнешнийФайл(БазаАдреса, ФайлРодителей) = 0 Тогда
		КодВладельца = "";Возврат 1;
	КонецЕсли; 
	
	Для Номер = Макс(1, НомерПоВиду(ВидВладельцаПоКоду)) По НомерПоВиду(ВидОбъекта) - 1 Цикл 
		Если Номер > НомерПоВиду(ВидВладельцаПоКоду) Тогда
			Вид    = ВидПоНомеру(Номер);
			Если ПустаяСтрока(Список.Получить(Вид)) = 0 Тогда
				
				РазмерКода = ?(Вид = "Регион", 2, ?(Вид = "Район", 5, ?(Вид = "Город", 8, 11)));
				БазаАдреса.ТекущийИндекс(ПолучитьНазваниеИндекса(Вид, КодВладельца));
				
				Если БазаАдреса.Найти(КодВладельца + Врег(Список.Получить(Вид)), 0) = 1 Тогда
					КодВладельца = Сред(БазаАдреса.CODE, 1, РазмерКода);
					
				ИначеЕсли (БазаАдреса.Найти(КодВладельца + " ", 1) = 1) Тогда
					Если (Сред(БазаАдреса.CODE, 1, СтрДлина(КодВладельца)) = КодВладельца) Тогда
						// это если Объекты в базе есть
						Предупреждение("Не найден " + ?(Вид = "НасПункт", "Населенный пункт", Вид) + " - """ + Список.Получить(Вид) + """", 60); 
						КодВладельца = "";Возврат 0;
					Иначе
						// значит в базе нет объектов по вышестоящему владельцу
						Возврат ПроверитьСокращение(НаименованиеОбъекта);
					КонецЕсли;
					
				Иначе
					// значит в базе нет объектов по вышестоящему владельцу
					Возврат ПроверитьСокращение(НаименованиеОбъекта);
					
				КонецЕсли;
				
			ИначеЕсли (ВидОбъекта = "НасПункт") и (Вид = "Регион") Тогда
				Предупреждение("Прежде выберите по меньшей мере регион или введите населенный пункт вручную", 60);
				КодВладельца = ""; Возврат 0;
				
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат 1;
	
КонецФункции // ПолучитьКодВладельца()
	
//*****************************************************************************
// НайтиПоНаименованию(БазаАдреса, КодВладельца, НаименованиеОбъекта)
//
// Параметры:
//  БазаАдреса (объект "XBase") - объект XBase, в котором производится поиск.
//  КодВладельца (строка) - сокращенный код владельца, преданный при открытии.
//  НаименованиеОбъекта (строка) - наименование объекта, преданное при открытии.
//
// Описание:
//    Если передали не полное наименование объекта, попробуем найти похожий, 
//  по части наименования в базе. Если найден, спозиционируем его в таблице.
//
Функция НайтиПоНаименованию(БазаАдреса, КодВладельца, НаименованиеОбъекта)
	
	БазаАдреса.ТекущийИндекс(ПолучитьНазваниеИндекса(ВидОбъекта, КодВладельца));
				
	Если БазаАдреса.Найти(КодВладельца + Врег(НаименованиеОбъекта), 1) = 1 Тогда
		Наименование = Врег(СокрП(БазаАдреса.NAME) + " " + СокрП(БазаАдреса.SOCR));
		Если (Сред(Наименование, 1, СтрДлина(НаименованиеОбъекта)) = Врег(НаименованиеОбъекта)) и (ТаблицаАдреса.КоличествоСтрок() > 0) Тогда
			СпозиционироватьОбъект("", Наименование);
			
		КонецЕсли;
		
		Возврат СокрП(БазаАдреса.CODE);
		
	КонецЕсли;
	
КонецФункции // НайтиПоНаименованию()

//******************************************************************************
// ИскатьОбъект(Направление)
//
// Параметры:
//  Направление (строка) - "Вверх" - вверх по таблице, "Вниз" - вниз по таблице.
//
// Вызывается из формул элементов диалога:
//  кнопка кнВверх, кнВниз
//
// Описание:
//    Ищет в таблице значений объектов, в указанном направлении, строку, в которую
//  входит значение реквзита "СтрокаПоиска".
//
Процедура ИскатьОбъект(Направление)
	
	Если ПустаяСтрока(СтрокаПоиска) = 0 Тогда
		
		ТекущееНаправление = Направление;
	
		СписокПоиска = ВосстановитьЗначение("СписокСтрокПоиска");
		
		Если ТипЗначенияСтр(СписокПоиска) <> "СписокЗначений" Тогда
			СписокПоиска = СоздатьОбъект("СписокЗначений");
		КонецЕсли;
		
		Если СписокПоиска.Принадлежит(СокрЛП(СтрокаПоиска)) = 0 Тогда
			СписокПоиска.ВставитьЗначение(1, СокрЛП(СтрокаПоиска));
			
			Если СписокПоиска.РазмерСписка() > 10 Тогда
				СписокПоиска.УдалитьЗначение(СписокПоиска.РазмерСписка());
			КонецЕсли;
			
			СохранитьЗначение("СписокСтрокПоиска", СписокПоиска);
			
		КонецЕсли;
	
		Если Направление = "Вверх" Тогда
			Для Индекс = 1 По ТаблицаАдреса.ТекущаяСтрока() - 1 Цикл
				Если Найти(ТаблицаАдреса.ПолучитьЗначение(ТаблицаАдреса.ТекущаяСтрока() - Индекс, "ВрегНаименование"),  Врег(СокрЛП(СтрокаПоиска))) > 0 Тогда
					ТаблицаАдреса.ТекущаяСтрока(ТаблицаАдреса.ТекущаяСтрока() - Индекс);Возврат;
					
				КонецЕсли;
			КонецЦикла;
			
		Иначе // Если Направление = "Вниз" Тогда
			Для Индекс = ТаблицаАдреса.ТекущаяСтрока() + 1 По ТаблицаАдреса.КоличествоСтрок() Цикл
				Если Найти(ТаблицаАдреса.ПолучитьЗначение(Индекс, "ВрегНаименование"),  Врег(СокрЛП(СтрокаПоиска))) > 0 Тогда
					ТаблицаАдреса.ТекущаяСтрока(Индекс);Возврат; 
					
				КонецЕсли;
			КонецЦикла;
			
		КонецЕсли;
		
		Если Форма.АктивныйЭлемент() <> "СтрокаПоиска" Тогда
			Активизировать("ТаблицаАдреса");
		КонецЕсли;
		
		Предупреждение("Значение " + СокрЛП(СтрокаПоиска) + " не найдено!", 60);
	
	КонецЕсли;

КонецПроцедуры // ИскатьОбъект()

////////////////////////////////////////////////////////////////////////////////
// ПРЕДОПРЕДЕЛЕННЫЕ ПРОЦЕДУРЫ
//
//******************************************************************************
// Предопределенная процедура.
//
Процедура ПриНачалеВыбораЗначения(Элемент)
	
	Если Элемент = "СтрокаПоиска" Тогда
		
		СписокПоиска = ВосстановитьЗначение("СписокСтрокПоиска");
		Если ТипЗначенияСтр(СписокПоиска) = "СписокЗначений" Тогда
			СтрПоиска = "";
			Если СписокПоиска.ВыбратьЗначение(СтрПоиска, , , , 2) = 1 Тогда
				СтрокаПоиска = СтрПоиска;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
		
КонецПроцедуры // ПриНачалеВыбораЗначения()
	
//******************************************************************************
// Предопределенная процедура.
//
Процедура ПриОткрытии()
	
	Параметры = Форма.Параметр;
	Если ТипЗначенияСтр(Параметры) = "СписокЗначений" Тогда
		ВидОбъекта                     = Параметры.Получить("Вид объекта");
		РежимОткрытия                  = Параметры.Получить("Режим открытия");
		КодСтраны                      = Параметры.Получить("Код страны");
		КодОбъекта                     = Параметры.Получить("Код объекта");
		НаименованиеОбъекта            = Параметры.Получить("Имя объекта");
		КодВладельца                   = Параметры.Получить("Код владельца");
		СписокВладельцев               = Параметры.Получить("Список владельцев");
		ПолныйАдрес                    = Параметры.Получить("Полный адрес");
		ФорматКлассификатора           = Параметры.Получить("ФорматКлассификатора");
		ПоказыватьТолькоЗначимые       = Параметры.Получить("ПоказыватьТолькоЗначимые");
		ПринудительноПереиндексировать = Параметры.Получить("ПринудительноПереиндексировать");
		
		Если ПустоеЗначение(ФорматКлассификатора) = 1 Тогда
			СтатусВозврата(0);Возврат;
		КонецЕсли;
			
	Иначе
		СтатусВозврата(0);Возврат;
		
	КонецЕсли;
	
	Форма.Параметр = 0;
	УстановитьКаталогБазы();
	БазаАдреса = СоздатьОбъект("XBase"); 
	
	         
	Если ВидОбъекта = "Улица" Тогда
		Файл = "Street";
	ИначеЕсли Параметры.Получить("Получить индекс") = 1 Тогда
	
		Если ФорматКлассификатора = 1 Тогда
			Файл = "Street"; 
		Иначе
			Файл = "Doma"; 
		КонецЕсли;
	
	Иначе
		Файл = "Kladr"; 
	
	КонецЕсли;

	
	Если ФС.СуществуетФайл(КаталогБазы + Файл + "w.DBF") = 1 Тогда
		Файл = Файл + "w";
	КонецЕсли;
	Форма.Заголовок("Справочник: " + ?(ВидОбъекта = "Улица", "Улицы", ?(ВидОбъекта = "Город", "Города", ?(ВидОбъекта = "НасПункт", "Населенные пункт", ВидОбъекта) + "ы" )), 0);
	
	Если Параметры.Получить("Получить индекс") = 1 Тогда 
		
		Если ОткрытьВнешнийФайл(БазаАдреса, Файл) = 1 Тогда 
			Форма.Параметр = ПолучитьИндексПоНомеруДома(БазаАдреса,
			                                            Параметры.Получить("Код улицы"), 
			                                            Параметры.Получить("Дом"), 
														Параметры.Получить("Корпус"));
		КонецЕсли;
		СтатусВозврата(0); Возврат;
		
	ИначеЕсли (ПустаяСтрока(КодСтраны) = 0) и (КодСтраны <> "643") Тогда
		// не РОССИЯ
		СтатусВозврата(ПроверитьСокращение(НаименованиеОбъекта)); Возврат;
		
	ИначеЕсли РежимОткрытия = 1 Тогда 
		// Получить код региона
		Если ОткрытьВнешнийФайл(БазаАдреса, Файл) = 1 Тогда 
			ВидОбъекта = ВидПоНомеру(1);
			Параметры.Установить("Код региона", НайтиПоНаименованию(БазаАдреса, "", глРазложить(ПолныйАдрес).ПолучитьЗначение(3)));
			Форма.Параметр = Параметры;
		
		Иначе
            Предупреждение("Не загружены классификаторы. Перейдите на закладку ""Классификаторы"" и загрузите классификаторы, например, с диска ИТС!", 60);
			Форма.Параметр = - 1;

		КонецЕсли;
		СтатусВозврата(0); Возврат;
		
	ИначеЕсли ВидОбъекта <> "Регион" Тогда
		Если ПолучитьКодВладельца(БазаАдреса, КодВладельца, СписокВладельцев, НаименованиеОбъекта) = 0 Тогда
			Форма.Параметр = - 1;
			СтатусВозврата(0); Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ВидОбъекта = "Улица" Тогда
		Если (ПустаяСтрока(КодВладельца) = 1) или ((СтрДлина(КодВладельца) =2) и (КодВладельца <> "77") и (КодВладельца <> "78")) Тогда
			Предупреждение("Прежде выберите конкретный город или населенный пункт или введите название улицы вручную", 60);
			СтатусВозврата(0); Возврат;
		КонецЕсли;
		//если снять комментарий улицы будут отбираться по конкретному владельцу
		//КодВладельца = Формат(КодВладельца + "000000000", "С11");
		БазаАдреса.ЗакрытьФайл();
	КонецЕсли;
	
	Если ОткрытьВнешнийФайл(БазаАдреса, Файл) = 0 Тогда
		
		Если ОткрытьВнешнийФайл(БазаАдреса, "Socrbase") = 0 Тогда
            Предупреждение("Не загружены классификаторы. Перейдите на закладку ""Классификаторы"" и загрузите классификаторы, например, с диска ИТС!", 60);
			Форма.Параметр = - 1;
			СтатусВозврата(0);
		Иначе    
			БазаАдреса.ЗакрытьФайл();
			СтатусВозврата(ПроверитьСокращение(НаименованиеОбъекта));
		КонецЕсли;     
		
		Возврат;
		
	ИначеЕсли ТаблицаАдреса.КоличествоСтрок() <> 0 Тогда 
		Возврат;
		
	Иначе
		ВывестиТаблицуАдреса(БазаАдреса, КодВладельца); 
		
	КонецЕсли; 

	
    Если (ТаблицаАдреса.КоличествоСтрок() = 0) и (ПустаяСтрока(НаименованиеОбъекта) = 0) Тогда 
		// если таблица пуста, а наименование заполнено проверим сокращения по объекту
		СтатусВозврата(ПроверитьСокращение(НаименованиеОбъекта)); 
		
	Иначе
		// по улицам следует позиционировать только по наименованиям
		// так как в Москве много улиц (442) (и еще где-то 40)  с одинаковыми кодами
		СпозиционироватьОбъект(?(ВидОбъекта = "Улица", "", КодОбъекта), НаименованиеОбъекта);
		
		Если (ПустаяСтрока(НаименованиеОбъекта) = 0) и (ПустаяСтрока(КодОбъекта) = 1) Тогда
			Если Врег(НаименованиеОбъекта) <> ТаблицаАдреса.ПолучитьЗначение(ТаблицаАдреса.ТекущаяСтрока(), "ВрегНаименование") Тогда
				НайтиПоНаименованию(БазаАдреса, КодВладельца, НаименованиеОбъекта);
			КонецЕсли;
		КонецЕсли;
		
		ТаблицаАдреса.ВидимостьКолонки("Код", 0);
		
	КонецЕсли;
	
	Активизировать("ТаблицаАдреса");
	
КонецПроцедуры // ПриОткрытии()


//******************************************************************************
// Предопределенная процедура.
//
Процедура ПриЗакрытии()
    
	Если Форма.Параметр = 0 Тогда
		Форма.Параметр = - ПринудительноПереиндексировать;
	КонецЕсли;
	
	
КонецПроцедуры // ПриЗакрытии()

////////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ
ТаблицаАдреса.НоваяКолонка("Код",          "Строка", , , "Код", 12);
ТаблицаАдреса.НоваяКолонка("Наименование", "Строка", 50, , "Наименование", 40);
ТаблицаАдреса.НоваяКолонка("Индекс",       "Строка", 6 , , "Индекс", 8);
ТаблицаАдреса.НоваяКолонка("ВрегНаименование");

ТаблицаАдреса.ВидимостьКолонки("ВрегНаименование", 0);

ФорматКлассификатора = 1;
ПоказыватьТолькоЗначимые = 0;
ПринудительноПереиндексировать = 0;
СписокKladr = СоздатьОбъект("СписокЗначений");
