//*******************************************
// Переменные модуля 
//*******************************************
Перем Страница;
Перем ПроверкаВыполнена;
Перем Файл, ИсхКаталог;
Перем ТекДатаНачала, ТекДатаОкончания;  
Перем Соединение,Инфо;
Перем ПарамОбновлений;
Перем ЕстьОбновления,ПолученоОбновление;
Перем ЗакрытьБезЗапроса;
Перем ДатаНачала, ДатаОкончания;
Перем Шагов;
Перем ШагПериода;
Перем КонфигурацияОбновлена;
Перем ВидимостьПравил;
Перем ИмяФайлаПравил, ИмяФайлаВыгрузки;
Перем НетПравил, НетВыгузки;

//*******************************************
// Процедуры и функции модуля
//*******************************************  

//*******************************************   
// СтатикФайловПравилИВыгрузки()
// подпись к статикам, когда не найдены файлы
//
Процедура СтатикФайловПравилИВыгрузки(); 
	
	Если (НетПравил = 1) и (НетВыгузки = 1) Тогда
		Форма.СтатикТиповыеПравилаНеНайдены.Заголовок("Не найдены файлы типовых правил переноса данных и обработки выгрузки данных.");		
	ИначеЕсли НетПравил = 1 Тогда                                                                                   
		Форма.СтатикТиповыеПравилаНеНайдены.Заголовок("Типовые правила переноса данных не найдены.");		
	ИначеЕсли НетВыгузки = 1 Тогда
		Форма.СтатикТиповыеПравилаНеНайдены.Заголовок("Обработка выгрузки данных не найдена.");		
	ИначеЕсли (НетПравил = 0) и (НетВыгузки = 0) Тогда
		Форма.СтатикТиповыеПравилаНеНайдены.Заголовок("");		
	КонецЕсли; 
	Если ВидимостьПравил = 1 Тогда
		Форма.СтатикНетПравил.Заголовок("Укажите каталог с файлами правил и выгрузки:");
	КонецЕсли;
		
КонецПроцедуры

//*******************************************   
// ОстаткиОбороты()
// управление доступностью даты
//
Процедура ОстаткиОбороты()
	
	Если  ОстаткиОбороты = 1 Тогда		
		ШагПериода = 12;		
		ДатаОкончания = КонГода(ДатаНачала);		
	Иначе
		ШагПериода = 1;		
	КонецЕсли;
	
КонецПроцедуры    

//*******************************************
// Процедура НаличиеПравил()
// Управление формой при наличии/отсутствии 
// правил выгрузки
//        
//*******************************************
Процедура НаличиеПравил() 
		
	Форма.СтатикНетПравил.Видимость(ВидимостьПравил);
	Форма.СтатикТиповыеПравилаНеНайдены.Видимость(ВидимостьПравил);	
	Форма.СтатикИмяФайлаПравил.Видимость(ВидимостьПравил);
	Форма.Путь.Видимость(ВидимостьПравил);
	
	Если ВидимостьПравил = 0 Тогда
		Форма.СтатикТиповыеПравила.Видимость(1);				
	Иначе                                               
		Форма.СтатикТиповыеПравила.Видимость(0);				
	КонецЕсли; 
	
КонецПроцедуры

//*******************************************
// Процедура УправлениеДиалогом()
// Управление закладками
//        
//*******************************************
Процедура УправлениеДиалогом()
	
	Форма.Вперед.Доступность(1);
	Форма.Назад.Доступность(1);
	Форма.Закрыть.Видимость(1);
	Форма.Готово.Видимость(0);
	
	Если Страница = 1 Тогда
		Форма.ИспользоватьСлой("Основной,Слой1",2);
		Форма.Назад.Доступность(0);
	ИначеЕсли Страница = 2 Тогда
		Форма.ИспользоватьСлой("Основной,Слой2",2);		 
		ВидимостьКн = ?(ПустоеЗначение(ЕстьОбновления) = 1, 0, 1);
		Форма.ПолучитьРелизКонфигурации.Видимость(ВидимостьКн );
		Форма.СтатикТекстПолученияОбновления.Видимость(ВидимостьКн);		
		Если КонфигурацияОбновлена = 1 Тогда
			Форма.ПроверитьНаличиеОбновлений.Видимость(0);			
		КонецЕсли;		
	ИначеЕсли Страница = 3 Тогда
		Форма.ИспользоватьСлой("Основной,Слой3",2);
		ОстаткиОбороты();				
	ИначеЕсли Страница = 4 Тогда
		Форма.ИспользоватьСлой("Основной,Слой4",2);		
		НаличиеПравил();
		Если (ПустоеЗначение(ИмяФайлаПравил) = 1) или (НетПравил = 1) или (НетВыгузки = 1) Тогда
			Форма.Вперед.Доступность(0);		
		КонецЕсли; 	
	ИначеЕсли Страница = 5 Тогда
		Форма.ИспользоватьСлой("Основной,Слой5",2);				
		Форма.Вперед.Доступность(0); 
		Форма.Закрыть.Видимость(0);
		Форма.Готово.Видимость(1);
	КонецЕсли;                                     
	
	Форма.Шаги.Заголовок("Шаг " + Страница + " из " + Шагов);
	
КонецПроцедуры  // УправлениеДиалогом()   

//*******************************************
// Процедура ПроверкаФайлов()
// проверяет есть ли в каталоге файлы правил и выгрузки
Процедура ПроверкаФайлов(Каталог, ПервыйЗапуск = 0)
	
	ИмяФайлаПравил = "";
	ИмяФайлаВыгрузки = "";
	//Ищем файл правил обмена
	Файл = "Acc77_80.xml";	
	ИмяФайла = Каталог + Файл;	
	Если ФС.СуществуетФайл(ИмяФайла) = 1 Тогда
		ИмяФайлаПравил =ИмяФайла; 		
	КонецЕсли;
	//Ищем файл выгрузки обмена 
	Файл = "V77Exp.ert";
	ИмяФайла = Каталог + Файл;
	Если ФС.СуществуетФайл(ИмяФайла) = 1 Тогда
		ИмяФайлаВыгрузки = ИмяФайла; 
	КонецЕсли;    
	
	НетПравил = ПустоеЗначение(ИмяФайлаПравил);
	НетВыгузки= ПустоеЗначение(ИмяФайлаВыгрузки); 
	
	СтатикФайловПравилИВыгрузки();
	
	Если ПервыйЗапуск = 0 Тогда
		УправлениеДиалогом() 
	КонецЕсли;
	
КонецПроцедуры

//*******************************************
// Процедура ВыгрузитьДанные()
// Совершает выгрузку данных
//
//*******************************************
Процедура ВыгрузитьДанные() 
	
	//проверка возможности конвертации
	Отказ = 0;
	Если ПустаяСтрока(ИмяФайлаДанных) = 1 Тогда
		Предупреждение("Не указано имя файла данных!");		
		Отказ = 1;
	КонецЕсли;
	
	Если ?(ОстаткиОбороты = 1, ДатаНачала, ДатаОкончания) > КонецРассчитанногоПериодаБИ() Тогда
		Предупреждение("За выбранный период итоги не рассчитаны!"+РазделительСтрок+
		"Расчет итогов выполняется в режиме"+РазделительСтрок+
		"""Операции - Управление бухгалтерскими итогами"".");
		Отказ = 1;
	КонецЕсли;
	
	Если Отказ = 0 Тогда 
		ИмяКоманды = "Выгрузить";		
		Конт = СоздатьОбъект("СписокЗначений");
		Конт.ДобавитьЗначение(ДатаНачала, "ДатаНачала"); 
		Конт.ДобавитьЗначение(?(ОстаткиОбороты = 1, ДатаНачала, ДатаОкончания), "ДатаОкончания");
		Конт.ДобавитьЗначение(?(ФС.СуществуетФайл(ИмяФайлаПравил) = 1, ИмяФайлаПравил, ""), "ИмяФайлаПравил");
		Конт.ДобавитьЗначение(ИмяФайлаДанных, "ИмяФайлаДанных"); 	
		Конт.ДобавитьЗначение(ИмяКоманды, "ИмяКоманды"); 
		Конт.ДобавитьЗначение(1, "КомментироватьВыгрузкуОбъектов");
		ТаблицаНастройкиПараметров = СоздатьОбъект("СписокЗначений");
		ТаблицаНастройкиПараметров.ДобавитьЗначение(Перечисление.Булево.Нет, "ВыгружатьКоды                                     ");
		Конт.ДобавитьЗначение(ТаблицаНастройкиПараметров, "ТаблицаНастройкиПараметров");

		ОткрытьФормуМодально("Отчет", Конт, ИмяФайлаВыгрузки);
		
	КонецЕсли;
	
КонецПроцедуры //ВыгрузитьДанные 

//*******************************************
// Процедура Вперед()
// Листаем страницы вперед
//
//*******************************************
Процедура Вперед()
	
	Страница = Страница + 1;
	УправлениеДиалогом();

КонецПроцедуры // Вперед()

//*******************************************
// Процедура Назад()
// Листаем страницы назад  
//
//*******************************************

Процедура Назад() 
	
	Страница = Страница - 1;
	УправлениеДиалогом();
	
КонецПроцедуры // Назад()    

//*******************************************
// Процедура ПоказатьДополнительнуюИнформацию()
// Показать информацию о БП8  
//
//*******************************************
Процедура ПоказатьДополнительнуюИнформацию()  
	
	НомерСтраницы = 1;
	
	ИнформационныйБлок = СоздатьОбъект("Таблица");
	ИнформационныйБлок.ИсходнаяТаблица("ИнформационныйБлок");
	Секция = ИнформационныйБлок.ПолучитьСекцию("Страница");
	ИнформационныйБлок.ВывестиСекцию(Секция);
	ИнформационныйБлок.Опции(0,0,0,0,,"Опции");  
	ИнформационныйБлок.ТолькоПросмотр(1);
	ИнформационныйБлок.Показать("Информационный блок");
    	
КонецПроцедуры
	            
//*******************************************
// ВыборФайла(ИмяФайла, Фильтр = "xml")
//
// Параметры:
//
// Возвращаемое значение:
// 
// Описание:
//
//*******************************************
Процедура ВыборФайла(ТипДиалога = 0, ИмяФайла, ИмяФильтра = "", Фильтр = "xml", ВыбратьКаталог = 0)
	
	Каталог = "";
	Если ВыбратьКаталог = 0 Тогда
		Стр = ИмяФильтра + " (*." + Фильтр + ")|*." + Фильтр + "";
		Если ФС.ВыбратьФайл(ТипДиалога, ИмяФайла, Каталог, "Выберите файл", Стр, , ) = 1 Тогда
			ИмяФайла = Каталог + ИмяФайла;
		КонецЕсли;               
	Иначе
		Если ФС.ВыбратьКаталог(Путь, ИмяФильтра,) = 1 Тогда
			Путь = СокрЛП(Путь) + "\";
			ПроверкаФайлов(Путь);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ВыборФайла()

//*******************************************
// Процедура СформироватьОСВ()
// Формируем ОСВ
//
//*******************************************
Процедура СформироватьОСВ()
	
	Параметры = СоздатьОбъект("СписокЗначений");
	ФормРазворот = СоздатьОбъект("СписокЗначений");
	глФлагРасшифровки = 1;
	глОбновить = 1;
	Параметры.Установить("Дата1", ДатаНачала);
	Параметры.Установить("Дата2", ?(ОстаткиОбороты = 1, ДатаНачала, ДатаОкончания));
	Параметры.Установить("ДанныеПоСубсчетам", 1);
	Параметры.Установить("ДанныеПоВалютам", 0);
	Параметры.Установить("РазвернутоеСальдо", 0);
	Параметры.Установить("ЗабалансовыеСчета", 1);		                                           
	Параметры.Установить("ФормРазворот", ФормРазворот);		                                           
	глРасшифровка = Параметры;		
	ОткрытьФорму("Отчет.ОборотноСальдоваяВедомость");//,Параметры);
	
КонецПроцедуры // СформироватьОСВ()  

//******************************************************************************
Функция УстановитьКомпоненту()
	
	Если ЗагрузитьВнешнююКомпоненту(КаталогИБ()+"ExtForms\v7plus.dll")=0 Тогда
		Если ЗагрузитьВнешнююКомпоненту("v7plus.dll")=0 Тогда
			Сообщить("Не удалось обнаружить компоненту V7Plus.dll!"); 
			Возврат 0;
		КонецЕсли;
	КонецЕсли;
	Попытка
		Соединение = СоздатьОбъект("Addin.V7HttpReader");
		Инфо = СоздатьОбъект("AddIn.V7SysInfo");
		Соединение.КоличествоПопытокАвторизации = 3;
	Исключение 
		Сообщить("Не удалось создать объекты из компоненты V7Plus.dll!"); 
		Возврат 0;
	КонецПопытки; 
	Возврат 1;    
	
КонецФункции  // УстановитьКомпоненту

//********************************************************** 
//Проверка обновлений  через Интернет
//********************************************************** 
//
Процедура ПроверитьНаличиеОбновлений()       
	
	ПарамОбновлений = СоздатьОбъект("СписокЗначений");
	ПарамОбновлений.ДобавитьЗначение(1,"Режим");  
	ОткрытьФормуМодально("Обработка.ИПППроверкаОбновлений",ПарамОбновлений);	
	ЕстьОбновления = ПарамОбновлений.Получить("Конфигурация");                
	Если ПустоеЗначение(ЕстьОбновления) = 1 Тогда
		Форма.СтатикТекстПроверки.Заголовок("Новых релизов конфигурации нет.");
		Форма.СтатикТекстПроверки.Цвет(0,0,128);
	Иначе
		Форма.СтатикТекстПроверки.Заголовок("Вышел новый релиз конфигурации. Рекомендуется обновить информационную базу.");
		Форма.СтатикТекстПроверки.Цвет(255,0,0);  
		ПарамОбновлений.ДобавитьЗначение("КОН_Получить","ПолучитьОбновление");
	КонецЕсли;
	
	ВидимостьКн = ?(ПустоеЗначение(ЕстьОбновления) = 1, 0, 1);
	Форма.ПолучитьРелизКонфигурации.Видимость(ВидимостьКн);
	Форма.СтатикТекстПолученияОбновления.Видимость(ВидимостьКн);
	Форма.ПроверитьНаличиеОбновлений.Доступность(0);
	
КонецПроцедуры //ПроверитьНаличиеОбновлений() 

//********************************************************** 
//Получение обновлений  через Интернет
//********************************************************** 
//
Процедура ПолучитьРелизКонфигурации()

	Конт = ПарамОбновлений;
	ОткрытьФорму("Обработка.ИППГлавная",Конт);	
	ПолученоОбновление = Конт.Получить("Результат");
	Форма.СтатикТекстПолучения.Видимость(1); 
	Если ПолученоОбновление = 1 Тогда 
		Форма.СтатикТекстПолучения.Заголовок("Для обновления конфигурации завершите работу Помощника по кнопке ""Закрыть"" и выйдите из программы. После обновления конфигурации Помощник будет запущен автоматически.");		
		Форма.СтатикТекстПолучения.Цвет(0,0,128);
		Форма.ПолучитьРелизКонфигурации.Доступность(0);
		СохранитьЗначение("НомерРелизаДоОбновления",глНомерРелиза());
	Иначе
		Форма.СтатикТекстПолучения.Заголовок("Не удалось получить релиз конфгурации. Вы можете попытаться получить его позднее и после этого продолжить выгрузку.");
		Форма.СтатикТекстПолучения.Цвет(255,0,0);  
	КонецЕсли;	
	
КонецПроцедуры    

//********************************************************** 
//Выбор периода выгрузки  и его представление в диалоге
//********************************************************** 
Функция ПериодСтрокой(ДатаНач,ДатаКон)
			
	ТекстПериода="Остатки на начало " + ДатаГод(ДатаНач) + " г.";
	Если ШагПериода = 1 Тогда 			
		ТекстПериода = ТекстПериода + Строка (" и обороты за период с 1 Января по "+ Формат(ДатаОкончания,"Д ДДММММГГГГ"));
	КонецЕсли;			
	
	Возврат ТекстПериода;    

КонецФункции

Функция ПериодОтчетаСтр(ДатаНач,ДатаКон) 
		
	СтрПериод="";
	Если НачМесяца(ДатаКон) = ДатаНач Тогда
		СтрПериод = ПериодСтр(ДатаНач,ДатаКон);
	Иначе
		Если ШагПериода = 1 Тогда
			СтрПериод = "Январь - "+ПериодСтр(НачМесяца(ДатаКон),ДатаКон);
		Иначе                                                             
			СтрПериод = ПериодСтр(НачМесяца(ДатаНач),ДатаКон);
		КонецЕсли;			
	КонецЕсли;
	
	Возврат СтрПериод;    
	
КонецФункции // ПериодОтчетаСтр   

//******************************************************************************  
Процедура ИзменитьПериод(Шаг) 
	
	ИсхДата=ДатаНачала;

	ДатаВМесяце=ДобавитьМесяц(ДатаОкончания,Шаг);
	ДатаОкончания=КонМесяца(ДатаВМесяце); 
	ДатаНачала=НачГода(ДатаОкончания);
		
КонецПроцедуры // ИзменитьПериод	


//*******************************************
// Предопределенные процедуры
//*******************************************  
 
//*******************************************  
Процедура ПриНачалеВыбораЗначения(ИдентЭлемДиалога, ФлагСтандОбр)
    
	Если ИдентЭлемДиалога = "Путь" Тогда
		ВыборФайла(, Путь, "Выберите каталог с файлами правил и выгрузки:",,1);  
		УправлениеДиалогом();
	ИначеЕсли ИдентЭлемДиалога = "ИмяФайлаДанных" Тогда
		ВыборФайла(1, ИмяФайлаДанных, "Файл данных",,0); 
		УправлениеДиалогом();
	КонецЕсли;
	
КонецПроцедуры // ПриНачалеВыбораЗначения()
	
//*******************************************
Процедура ПриОткрытии()  

	Форма.ПанельИнструментов(0);
	
	//В каталоге ИБ находим необходимые для работы файлы
	Путь=КаталогИБ() + "ExtForms\";
	
	ПроверкаФайлов(Путь, 1);
	
	ВидимостьПравил = ?((НетПравил = 1) или (НетВыгузки = 1), 1, 0); 
	СтатикФайловПравилИВыгрузки();
	
	Если ФС.СуществуетФайл("C:\v77_v8") = 0 Тогда
		ФС.СоздатьКаталог("C:\v77_v8");
	КонецЕсли;
		
	ИмяФайлаДанных = "C:\v77_v8\Exp77_80.xml";
	
	//ВыгружатьКодыСправочников = 0;
	Страница = 1; 
	
	ДатаНачала = НачГода(ТекущаяДата());	
	ДатаОкончания = КонГода(ДатаНачала);	
	// Период для показа
	ПериодОтчета = Строка (" период с 1 Января по "+ Формат(ДатаОкончания,"Д ДДММММГГГГ"));

	СформироватьОСВ = 1;
	ПолученоОбновление = 0; 
	ОстаткиОбороты = 1;	
	ШагПериода = 12;	
	Шагов = 5;
	
	Если  (ПустоеЗначение(ВосстановитьЗначение("НомерРелизаДоОбновления")) = 0) и (глНомерРелиза() <> ВосстановитьЗначение("НомерРелизаДоОбновления")) Тогда
		Если глНомерРелиза() <> ВосстановитьЗначение("НомерРелизаДоОбновления") Тогда
			КонфигурацияОбновлена = 1;						
			Страница = 3;
		КонецЕсли;		
	КонецЕсли;
	
	УправлениеДиалогом();	
	
КонецПроцедуры // ПриОткрытии() 

//*******************************************
Процедура Готово()

	Форма.Готово.Доступность(0);
	
	ВыгрузитьДанные();
	
	Если СформироватьОСВ = 1 Тогда
		СформироватьОСВ(); 
	КонецЕсли;
	
	ЗакрытьБезЗапроса = 1;
	Форма.Закрыть();

КонецПроцедуры

//*******************************************
Процедура ПриЗакрытии()
	    
	Если  ЗакрытьБезЗапроса <> 1 Тогда
		Если (Вопрос("Закончить работу с помощником?","Да+Нет") = "Нет") Тогда
			СтатусВозврата(0);
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Если КонфигурацияОбновлена = 1 Тогда
		СохранитьЗначение("НомерРелизаДоОбновления","");
	КонецЕсли; 
	
КонецПроцедуры // ПриЗакрытии()              
//******************************************************************************
Процедура ОбработкаЯчейкиТаблицы(Зн,Фл, Табл, Адрес)  // Предопределенная
	Если (НРег(Лев(Зн,3))="www") ИЛИ (НРег(Лев(Зн,4))="http") Тогда
		// показ внешних страниц
		ЗапуститьПриложение(Зн);
	КонецЕсли;
	Фл=0;
КонецПроцедуры  // ОбработкаЯчейкиТаблицы
