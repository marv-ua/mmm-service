// См. описание обработки.
//
// При открытии обработки может быть передан параметр - список значений 
// с предпределенными представлениями:
//  "ТекущийОбъект"    - "Справочник" элемент справочника, значения
//                       периодических реквизитов которого надо показать.
//  "Текущая_Дата"     - "дата" - дата, на которую надо позиционироваться;
//                       если не передана, то РабочаяДата().
//  "НачальнаяДата"    - "дата" - начальная дата отображения значений;
//                       если не передана, то '00.00.0000'.
//  "КонечнаяДата"     - "дата" - конечная дата отображения значений;
//                       если не передана, то '31.12.9999'.
//  "ВидимыеРеквизиты" - "строка" - идентификаторы периодических реквизитов,
//                       значения которых надо показать, разделенные запятыми;
//                       если не передана - показываются все реквизиты.
//  "СвязьРеквизитов"  - 0 - реквизиты нельзя редактировать независимо,
//                       1 - реквизиты можно редактировать независимо;
//                       если не передано - 0.
//
// Обработка может быть вызвана:
// - в обычном режиме - при выборе строки таблицы открывается элемент справочника
// - в режиме выбора или подбора - при выборе строки таблицы выбирается дата.
// Для вызова можно использовать функцию глЗначенияПериодическихРеквизитов().
//

////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

// Элемент справочника, значения периодических реквизитов которго выводятся в таблице.
Перем ТекущийОбъект;

// Дата, начиная с которой в таблице отображаются значения периодических реквизитов.
Перем НачальнаяДата;

// Дата, по которую в таблице отображаются значения периодических реквизитов.
Перем КонечнаяДата;

// Идентификаторы периодических реквизитов, значения отображаются в таблице.
// Разделяются запятыми. Если пустая строка - отображаются все реквизиты.
Перем ВидимыеРеквизиты;

// 0 - реквизиты нельзя редактировать независимо,
// 1 - реквизиты можно редактировать независимо;
Перем СвязьРеквизитов;

// Список справочников, имеющих периодические реквизиты.
Перем СписокСправочников;

// Строка, отображаемая в верхней части диалога.
Перем СтрокаЗаголовка;

// Объект метаданных - тип переданного объекта.
Перем мдСправочник;

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ МОДУЛЯ

//******************************************************************************
// ВидимыйРеквизит(Реквизит)
//
// Параметры:
//  Реквизит - "строка" - идентификатор периодического реквизита.
//
// Возвращаемое значение:
//  0 - значения данного реквизита не отображаются в таблице
//  1 - значения данного реквизита отображаются в таблице.
//
// Вызывается из формул элементов диалога:
//
// Описание:
//  Проверяет, отображается указанный реквизит в таблице, или нет.
//
Функция ВидимыйРеквизит(Реквизит)
	
	Если ПустаяСтрока(ВидимыеРеквизиты) = 1 Тогда
		Возврат 1;
	ИначеЕсли 0 < Найти(ВидимыеРеквизиты+",", Реквизит+",") Тогда
		Возврат 1;
	Иначе
	    Возврат 0;
	КонецЕсли;
	
КонецФункции // ВидимыйРеквизит()

//******************************************************************************
// ДобавитьКолонку(мдРеквизит)
//
// Параметры:
//  мдРеквизит - "Метаданные" - объект метаданных - периодический реквизит.
//
// Возвращаемое значение:
//  Нет.
//
// Вызывается из формул элементов диалога:
//
// Описание:
//  Процедура добавляет колонку для отображения значений периодического реквизита,
// устанавливает ширину колонки и прочие параметры.
//
Процедура ДобавитьКолонку(мдРеквизит)
	
	Если      мдРеквизит.Тип = "Дата" Тогда
		Ширина = 14;
	ИначеЕсли мдРеквизит.Тип = "Счет" Тогда
		Ширина = 14;
	ИначеЕсли мдРеквизит.Длина = 0 Тогда
		Ширина = 40;
	Иначе
		Ширина = мдРеквизит.Длина+4; // "<...>" уместится
	КонецЕсли;
	
	Ширина = Макс(Ширина, СтрДлина(мдРеквизит.Представление())*1.4+4);
	Ширина = Мин(Ширина, 90);
	
	Положение = ?(мдРеквизит.Тип = "Число", 2, 1);
	
	Значения.НоваяКолонка(мдРеквизит.Идентификатор, "Строка", мдРеквизит.Длина, , 
	                      мдРеквизит.Представление(), Ширина, , Положение);
	
КонецПроцедуры // ДобавитьКолонку()

//******************************************************************************
// НастроитьТаблицу()
//
// Параметры:
//
// Возвращаемое значение:
//  Нет.
//
// Вызывается из формул элементов диалога:
//
// Описание:
//  Процедура настраиват таблицу, устанавливая необходимые колонки.
//
Процедура НастроитьТаблицу()
	
	Значения.Очистить();
	
	ВидимыйДокумент = 0;
	
	Для Номер = 1 По мдСправочник.Реквизит() Цикл
		мдРеквизит = мдСправочник.Реквизит(Номер);
		
		Если мдРеквизит.Периодический = 0 Тогда
			Продолжить;
		КонецЕсли;
			
		Если ВидимыйРеквизит(мдРеквизит.Идентификатор) = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Если мдРеквизит.ИзменяетсяДокументами = 1 Тогда
			ВидимыйДокумент = 1;
		КонецЕсли;
		
		ДобавитьКолонку(мдРеквизит);
	КонецЦикла;
	
	// Скрытая колонка, хранит дату значения, установленного вручную, 
	// или документ, установивший значение при проведении.
	Значения.ВставитьКолонку(, 1);
	// Дата значений, указанных в строке.
	Значения.ВставитьКолонку(, 2, "Дата"  , , , "Дата"    , 14, "ДДДММГГГГ");
	// Представление документа, установившего значения.
	Значения.ВставитьКолонку(, 3, "Строка", , , "Установлены документом", 40);
	// Идентификаторы служебным колонкам не присвоены, чтобы не пересекаться 
	// с идентификаторами периодических реквизитов.
	
	Значения.ВидимостьКолонки("1"+?(ВидимыйДокумент = 1, "", ",3"), 0);
	
КонецПроцедуры // НастроитьТаблицу()

//******************************************************************************
// УстановитьЗначение(Стр, Реквизит, Значение)
//
// Параметры:
//  Стр      - "число" - номер строки таблицы.
//  Реквизит - "строка" - идентификатор периодического реквизита.
//  Значение - "неопределенный" - значение периодического реквизита.
//
// Возвращаемое значение:
//  Нет.
//
// Вызывается из формул элементов диалога:
//
// Описание:
//  Процедура формирует представление значения периодического реквизита
// и добавляет его в таблицу.
//
Процедура УстановитьЗначение(Стр, Реквизит, Значение)
	
	мдРеквизит = мдСправочник.Реквизит(Реквизит);
	
	Если мдРеквизит.Тип = "Число" Тогда
		Значение = Формат(Значение, "Ч"+мдРеквизит.Длина+"."+мдРеквизит.Точность);
		
	ИначеЕсли мдРеквизит.Тип = "Дата" Тогда
		Значение = Формат(Значение, "ДДДММГГГГ");
		
	ИначеЕсли ПустоеЗначение(Значение) = 1 Тогда
		Значение = "<...>";
		
	Иначе
		Значение = Строка(Значение);
	КонецЕсли;
	
	Значения.УстановитьЗначение(Стр, Реквизит, Значение);
	
КонецПроцедуры // УстановитьЗначение()

//******************************************************************************
// ЗаполнитьТаблицу(Текущая_Дата=0)
//
// Параметры:
//  Текущая_Дата - "дата" - дата, на которую надо позиционироваться;
//                 если не передана, то РабочаяДата().
//
// Возвращаемое значение:
//  Нет.
//
// Вызывается из формул элементов диалога:
//
// Описание:
//  Процедура заполняет таблицу, добавляя необходимые строки и заполняя ячейки.
//
Процедура ЗаполнитьТаблицу(Текущая_Дата=0)

	Перем ДокументЗначения, ДатаЗначения;

	// Дата, на которой будет спозиционирован курсор.
	Если ТипЗначенияСтр(Текущая_Дата) <> "Дата" Тогда
		Если 0 < Значения.ТекущаяСтрока() Тогда
			Текущая_Дата = Значения.ПолучитьЗначение(Значения.ТекущаяСтрока(), 2);
		Иначе
			Текущая_Дата = РабочаяДата();
		КонецЕсли;
	КонецЕсли;
	
	// Строка, на которой будет спозиционирован курсор.
	ТекущаяСтрока = 0;
	
	Значения.УдалитьСтроки();
	
	Периодический = СоздатьОбъект("Периодический");
	
	// Строка, в которой выводятся начальные значения периодических реквизитов.
	Если '00.00.0000' < НачальнаяДата Тогда
		Значения.НоваяСтрока();
		
		// Начальные значения показываются для всех периодических реквизитов.
		Для Номер = 4 По Значения.КоличествоКолонок()  Цикл
			Реквизит = Значения.ПолучитьПараметрыКолонки(Номер);
			Периодический.ИспользоватьОбъект(Реквизит, ТекущийОбъект);
			УстановитьЗначение(1, Реквизит, Периодический.ЗначениеНаДату(НачальнаяДата-1));
		КонецЦикла;

		// Строка с начальными значениями недоступна.
		Значения.Фиксировать(1, 1);
	Иначе
		Значения.Фиксировать(0, 1);
	КонецЕсли;
	
	Периодический.ИспользоватьОбъект("", ТекущийОбъект);
	Периодический.ВыбратьЗначения(НачальнаяДата, КонечнаяДата);
	
	// Строки, в которых выводятся значения в периоде просмотра.
	Пока Периодический.ПолучитьЗначение() = 1 Цикл
		Стр = Формат(Периодический.ДатаЗнач, "ДДДММГГГГ");
		Состояние("Формирование таблицы значений периодических реквизитов: "+Стр);
		
		Если ВидимыйРеквизит(Периодический.ТекущийРеквизит()) = 0 Тогда
			Продолжить;
		КонецЕсли;

		Стр = Значения.НомерСтроки;

		Если (ДокументЗначения <> Периодический.ТекущийДокумент()) ИЛИ 
		     (ДатаЗначения <> Периодический.ДатаЗнач) Тогда
				
			Значения.НоваяСтрока(); 
			Стр = Значения.НомерСтроки;
			
			ДокументЗначения = Периодический.ТекущийДокумент();
			ДатаЗначения = Периодический.ДатаЗнач;
			
			Значения.УстановитьЗначение(Стр, 1, ДокументЗначения);
			Значения.УстановитьЗначение(Стр, 2, ДатаЗначения);
			
			Если ПустоеЗначение(ДокументЗначения) = 0 Тогда
				// Представление документа, установившего значения.
				Значения.УстановитьЗначение(Стр, 3, ДокументЗначения.ПредставлениеВида()+" № "+СокрЛП(ДокументЗначения.НомерДок));
			КонецЕсли;
			
		КонецЕсли;

		// Надо спозиционироваться на строке, ближайшей к Текущая_Дата.
		Если Периодический.ДатаЗнач <= Текущая_Дата Тогда
			ТекущаяСтрока = Стр;
		КонецЕсли;
		
		УстановитьЗначение(Стр, Периодический.ТекущийРеквизит(), Периодический.Значение);
	КонецЦикла;
	
	// Надо спозиционироваться на строке, ближайшей к Текущая_Дата.
	Если 0 < ТекущаяСтрока Тогда
		Значения.ТекущаяСтрока(ТекущаяСтрока);
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьТаблицу()

//******************************************************************************
// ПроверкаТекущегоОбъекта()
//
// Параметры:
//
// Возвращаемое значение:
//  0 - элемент справочника известен, можно настраивать и заполнять таблицу.
//  0 - элемент справочника неизвестен, нельзя настраивать и заполнять таблицу.
//
// Вызывается из формул элементов диалога:
//
// Описание:
//  Функция проверяет, правидьно ли указан элемент справочника, по которому
// следует настроить и заполнить таблицу.
//  Формирует строку, отображаемую в верхней части диалога.
//
Функция ПроверкаТекущегоОбъекта()
	
	СтрокаЗаголовка = "Не выбран объект!";
	
	Если ТипЗначенияСтр(ТекущийОбъект) <> "Справочник" Тогда
		Возврат 0;
	ИначеЕсли СписокСправочников.Принадлежит(ТекущийОбъект.Вид()) = 0 Тогда
		Возврат 0;
	ИначеЕсли ТекущийОбъект.Выбран() = 0 Тогда
		Возврат 0;
	КонецЕсли;
	
	СтрокаЗаголовка = 
	?('00.00.0000' < НачальнаяДата, " с "+Формат(НачальнаяДата, "ДДДММГГГГ"), "")+
	?(КонечнаяДата < '31.12.9999', " по "+Формат(КонечнаяДата, "ДДДММГГГГ"), "");
	
	СтрокаЗаголовка = 
	ТекущийОбъект.ПредставлениеВида()+": """+ТекущийОбъект+""""+
	?(ПустаяСтрока(СтрокаЗаголовка) = 0, ", период"+СтрокаЗаголовка, "");
	
	Возврат 1;
	
КонецФункции // ПроверкаТекущегоОбъекта()

//******************************************************************************
// ОбновитьТаблицу()
//
// Параметры:
//
// Возвращаемое значение:
//  0 - таблица не перезаполнена
//  1 - таблица перезаполнена.
//
// Вызывается из формул элементов диалога:
//
// Описание:
//  Функция перечитывает Форма.Параметр и перезаполняет таблицу в соответсвии
// с указанными в нем значениями.
// Если обработка вызвана в режиме подбора, ее можно перезаполнить, применяя в форме,
// откуда вызвана обработка, метод ПолучитьЗначениеИзПодбора("ОбновитьТаблицу()").
//
Функция ОбновитьТаблицу()
	
	НастроитьТаблицу = 0;
	
	Если ТипЗначенияСтр(Форма.Параметр) = "СписокЗначений" Тогда
		НовоеЗначение = Форма.Параметр.Получить("ТекущийОбъект");
		Если ТипЗначенияСтр(НовоеЗначение) = "Справочник" Тогда
			Если НовоеЗначение.Вид() <> ТекущийОбъект.Вид() Тогда
				НастроитьТаблицу = 1;
				ВидимыеРеквизиты = "";
				СвязьРеквизитов  = 0;
			КонецЕсли;
			ТекущийОбъект = НовоеЗначение;
			мдСправочник = Метаданные.Справочник(ТекущийОбъект.Вид());
		КонецЕсли;
		
		Текущая_Дата  = Форма.Параметр.Получить("Текущая_Дата");
		
		НовоеЗначение = Форма.Параметр.Получить("НачальнаяДата");
		Если ТипЗначенияСтр(НовоеЗначение) = "Дата" Тогда
			НачальнаяДата = НовоеЗначение;
		КонецЕсли;
		
		НовоеЗначение = Форма.Параметр.Получить("КонечнаяДата");
		Если ТипЗначенияСтр(НовоеЗначение) = "Дата" Тогда
			КонечнаяДата = НовоеЗначение;
		КонецЕсли;
		
		НовоеЗначение = Форма.Параметр.Получить("ВидимыеРеквизиты");
		Если ТипЗначенияСтр(НовоеЗначение) = "Строка" Тогда
			ВидимыеРеквизиты = СтрЗаменить(НовоеЗначение, " ", "");
			НастроитьТаблицу = 1;
		КонецЕсли;
		
		НовоеЗначение = Форма.Параметр.Получить("СвязьРеквизитов");
		Если ТипЗначенияСтр(НовоеЗначение) = "Число" Тогда
			СвязьРеквизитов = НовоеЗначение;
		КонецЕсли;
	КонецЕсли;
	
	Доступность = ?(СвязьРеквизитов = 0, 1, 0);
	Форма.кнРеквизиты.Доступность(Доступность);
	Форма.кнРеквизитыХ.Доступность(Доступность);

	Если ПроверкаТекущегоОбъекта() = 0 Тогда
		Возврат 0;
	КонецЕсли;
		
	Если НастроитьТаблицу = 1 Тогда
		НастроитьТаблицу();
	КонецЕсли;
	
	ЗаполнитьТаблицу(Текущая_Дата);
	
	Возврат 1;
	
КонецФункции // ОбновитьТаблицу()

//******************************************************************************
// ВыбратьОбъект()
//
// Параметры:
//
// Возвращаемое значение:
//  Нет.
//
// Вызывается из формул элементов диалога:
//  Кнопка кнВыбратьОбъект.
//
// Описание:
//  Процедура отрабатывает выбор вида и элемента справочника для просмотра значений
// периодических реквизитов.
//
Процедура ВыбратьОбъект()
	
	СтарыйВид = "";
	
	Если ТипЗначенияСтр(ТекущийОбъект) = "Справочник" Тогда
		СтарыйВид = ТекущийОбъект.Вид(); НовыйВид = СтарыйВид;
	КонецЕсли;
	
	Если СписокСправочников.ВыбратьЗначение(НовыйВид, "Выберите вид справочника", 0, 60, 0) <> 1 Тогда
		Возврат;
	КонецЕсли;
	
	Объект = СоздатьОбъект("Справочник."+НовыйВид);
	Объект.НайтиЭлемент(ТекущийОбъект);
	
	Если Объект.Выбрать("Выберите элемент справочника", "") = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ТекущийОбъект = Объект.ТекущийЭлемент();
	мдСправочник = Метаданные.Справочник(ТекущийОбъект.Вид());
	
	Если СтарыйВид <> НовыйВид Тогда
		ВидимыеРеквизиты = "";
		НастроитьТаблицу();
	КонецЕсли;
	
	ЗаполнитьТаблицу();
	
КонецПроцедуры // ВыбратьОбъект()

//******************************************************************************
// ПриВыбореСтроки()
//
// Параметры:
//
// Возвращаемое значение:
//  Нет.
//
// Вызывается из формул элементов диалога:
//  Таблица Значения.
//
// Описание:
//  Если обработка открыта в обычном режиме - открывается элемент справочника.
//  Если обработка открыта в режиме выбора или подбора - отрабатывает выбор даты.
//
Процедура ПриВыбореСтроки()
	
	Если ПроверкаТекущегоОбъекта() = 0 Тогда
		Возврат;
	ИначеЕсли 0 = Значения.ТекущаяСтрока() Тогда
		Возврат;
	ИначеЕсли Значения.НомерСтроки <> Значения.ТекущаяСтрока() Тогда
		Возврат; // в зафиксированной области таблицы
	КонецЕсли;
	
	Текущая_Дата = Значения.ПолучитьЗначение(Значения.ТекущаяСтрока(), 2);
	
	// В режиме выбора отрабатывает выбор даты.
	Если Форма.РежимВыбора() <> 0 Тогда
		Форма.ВыполнитьВыбор(Текущая_Дата);
		Возврат;
	КонецЕсли;

	// В колонке "Документ" отрабатывает открытие документа.
	Если Значения.ТекущаяКолонка() = "_3" Тогда
		ЗначениеДокумент = Значения.ПолучитьЗначение(Значения.ТекущаяСтрока(), 1);

		Если ПустоеЗначение(ЗначениеДокумент) = 0 Тогда
			ОткрытьФорму(ЗначениеДокумент);
			Возврат;
		КонецЕсли;
	КонецЕсли;
		
	// В остальных случаях открывается элемент справочника.
	Параметры = СоздатьОбъект("СписокЗначений");
	Параметры.Установить("ИспользоватьДату()", Текущая_Дата);
	
	ОткрытьФорму(ТекущийОбъект, Параметры);
	
КонецПроцедуры // ПриВыбореСтроки()

//******************************************************************************
// СтрокаИнформации()
//
// Параметры:
//
// Возвращаемое значение:
//  "строка".
//
// Вызывается из формул элементов диалога:
//  Текст, расположенный под таблицей.
//
// Описание:
//  Функция формирует информационную строку, относящуюся к текущей строке таблицы.
//
Функция СтрокаИнформации()
	
	Стр = "Дата: ";
	
	Если 0 < Значения.ТекущаяСтрока() Тогда
		Текущая_Дата = Значения.ПолучитьЗначение(Значения.ТекущаяСтрока(), 2);
		
		Стр = Стр+Формат(Текущая_Дата, "ДДДММГГГГ");
		СтрДокумент = Значения.ПолучитьЗначение(Значения.ТекущаяСтрока(), 3);
		
		Если ПустаяСтрока(СтрДокумент) = 0 Тогда
			Стр = Стр+", значения установлены документом: "+СтрДокумент;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Стр;
	
КонецФункции // СтрокаИнформации()

//******************************************************************************
// УдалитьЗначенияРеквизита(Реквизит, НачДата, КонДата)
//
// Параметры:
//  Реквизит, НачДата, КонДата
//
// Возвращаемое значение:
//  Нет.
//
// Вызывается из формул элементов диалога:
//
// Описание:
//  Здесь описывается процедура.
//
Процедура УдалитьЗначенияРеквизита(Реквизит, НачДата, КонДата)
	
	Периодический = СоздатьОбъект("Периодический");
	Периодический.ИспользоватьОбъект(Реквизит, ТекущийОбъект);
	Периодический.ВыбратьЗначения(НачДата, КонДата);
	
	Пока Периодический.ПолучитьЗначение() = 1 Цикл
		Если Периодический.ТекущийДокумент().Выбран() = 0 Тогда
			Периодический.Удалить();
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры // УдалитьЗначенияРеквизита()

//******************************************************************************
// УдалитьЗначения()
//
// Параметры:
//  
//
// Возвращаемое значение:
//  Нет.
//
// Вызывается из формул элементов диалога:
//  Кнопка "Удалить..."
//
// Описание:
//  Формирует меню для выбора одного из вариантов удаления значений.
//  Организует удаление значений.
//
Процедура УдалитьЗначения()
	
	Перем Действие, Стр;
	
	Если ПроверкаТекущегоОбъекта() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	// Проверка полномочий пользователя.
	Если (ПравоДоступа("Удаление", "Справочник." + ТекущийОбъект.Вид()) = 0) ИЛИ
		 (ПравоДоступа("Пометканаудаление", "Справочник." + ТекущийОбъект.Вид()) = 0) ИЛИ
		 (ПравоДоступа("Корректировка", "Справочник." + ТекущийОбъект.Вид()) = 0) Тогда
	
		  	Предупреждение("Недостаточно прав для удаления!", 60);
		  	Возврат;
	КонецЕсли;	
	
	// Формирование меню и выбор варианта удаления.

	Меню = СоздатьОбъект("СписокЗначений");
	
	// Можно удалять значения на дату, если они введены не документом.
	Если 0 < Значения.ТекущаяСтрока() Тогда
		Если ПустоеЗначение(Значения.ПолучитьЗначение(Значения.ТекущаяСтрока(), 1)) = 1 Тогда
			Меню.ДобавитьЗначение("Удалить все значения на дату");
		КонецЕсли;
	КонецЕсли;
	
	// Можно редактировать значения реквизитов независимо.
	Если СвязьРеквизитов = 0 Тогда
		мдРеквизит = мдСправочник.Реквизит(Значения.ТекущаяКолонка());
		
		// Можно удалять значения реквизита, если он изменяется вручную.
		Если мдРеквизит.Выбран() = 1 Тогда
			Если мдРеквизит.РучноеИзменение = 1 Тогда
				Меню.ДобавитьЗначение("Удалить все значения реквизита");
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	// Можно удалять значение реквизита на дату, если оно введено вручную.
	Если Меню.РазмерСписка() = 2 Тогда
		Меню.ВставитьЗначение(1, "Удалить значение");
	КонецЕсли;
	
	// Можно очищать историю, если таблица непуста.
	Если 0 < Значения.ТекущаяСтрока() Тогда
		Если 3 < Значения.КоличествоКолонок() Тогда
			Меню.ДобавитьЗначение("Очистить историю");
		КонецЕсли;
	КонецЕсли;
	
	// Выбор варианта удаления из меню.
	Если Меню.ВыбратьЗначение(Действие, "", 0, 60, 1) <> 1 Тогда
		Возврат;
	КонецЕсли;
	
	// Удаление значений.

	Попытка
		НачатьТранзакцию();
		
		// Удаление значения реквизита на дату.
		Если      Действие = "Удалить значение" Тогда
			Текущая_Дата = Значения.ПолучитьЗначение(Значения.ТекущаяСтрока(), 2);
			Реквизит     = Значения.ТекущаяКолонка();
			
			// Текст вопроса.
			Значения.ПолучитьПараметрыКолонки(Реквизит, , , , Стр);
			Стр = "Будет удалено значение реквизита """+Стр+""" на "+
			Формат(Текущая_Дата, "ДДДММГГГГ")+" !";
			
			Если Вопрос(Стр, "ОК+Отмена", 60) <> "ОК" Тогда
				Возврат;
			КонецЕсли;
			
			// Удаление значения реквизита на дату.
			УдалитьЗначенияРеквизита(Реквизит, Текущая_Дата, Текущая_Дата);
			
		// Удаление значений всех реквизитов на дату.
		ИначеЕсли Действие = "Удалить все значения на дату" Тогда
			Текущая_Дата = Значения.ПолучитьЗначение(Значения.ТекущаяСтрока(), 2);
			
			// Текст вопроса.
			Стр = "Будут удалены значения всех видимых реквизитов на "+
			Формат(Текущая_Дата, "ДДДММГГГГ")+" !";
			
			Если Вопрос(Стр, "ОК+Отмена", 60) <> "ОК" Тогда
				Возврат;
			КонецЕсли;
			
			// Удаление значений всех реквизитов на дату.
			Для Кол = 4 По Значения.КоличествоКолонок() Цикл
				Реквизит = Значения.ПолучитьПараметрыКолонки(Кол);
				УдалитьЗначенияРеквизита(Реквизит, Текущая_Дата, Текущая_Дата);
			КонецЦикла;
			
		// Удаление всех значений реквизита.
		ИначеЕсли Действие = "Удалить все значения реквизита" Тогда
			Реквизит = Значения.ТекущаяКолонка();
			
			// Текст вопроса.
			Значения.ПолучитьПараметрыКолонки(Реквизит, , , , Стр);
			Стр = "Будут удалены все значения реквизита """+Стр+""""+
			?('00.00.0000' < НачальнаяДата, " с "+Формат(НачальнаяДата, "ДДДММГГГГ"), "")+
			?(КонечнаяДата < '31.12.9999', " по "+Формат(КонечнаяДата, "ДДДММГГГГ"), "")+" !";
			
			Если Вопрос(Стр, "ОК+Отмена", 60) <> "ОК" Тогда
				Возврат;
			КонецЕсли;
			
			// Удаление всех значений реквизита.
			УдалитьЗначенияРеквизита(Реквизит, НачальнаяДата, КонечнаяДата);
			
		// Удаление всех значений всех реквизитов.
		ИначеЕсли Действие = "Очистить историю" Тогда
			// Текст вопроса.
			Стр = "Будут удалены значения всех видимых реквизитов"+
			?('00.00.0000' < НачальнаяДата, " с "+Формат(НачальнаяДата, "ДДДММГГГГ"), "")+
			?(КонечнаяДата < '31.12.9999', " по "+Формат(КонечнаяДата, "ДДДММГГГГ"), "")+" !";
			
			Если Вопрос(Стр, "ОК+Отмена", 60) <> "ОК" Тогда
				Возврат;
			КонецЕсли;
			
			// Удаление всех значений всех реквизитов.
			Для Кол = 4 По Значения.КоличествоКолонок() Цикл
				Реквизит = Значения.ПолучитьПараметрыКолонки(Кол);
				УдалитьЗначенияРеквизита(Реквизит, НачальнаяДата, КонечнаяДата);
			КонецЦикла;
		КонецЕсли;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		Сообщить("Неудачная попытка удаления значения: "+ОписаниеОшибки(), "!");
	КонецПопытки;
	
	// Обновление таблицы значений.
	ЗаполнитьТаблицу();
	
КонецПроцедуры // УдалитьЗначения()

//******************************************************************************
// ВыбратьПериод()
//
// Параметры:
//  
//
// Возвращаемое значение:
//  Нет.
//
// Вызывается из формул элементов диалога:
//  Кнопка "Период".
//
// Описание:
//  Процедура отрабатывает выбор периода просмотра значений периодических реквизитов.
//
Процедура ВыбратьПериод()
	
	Если ПроверкаТекущегоОбъекта() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если '00.00.0000' < НачальнаяДата Тогда
		НачДата = НачальнаяДата;
	ИначеЕсли 0 < Значения.КоличествоСтрок() Тогда
		НачДата = Значения.ПолучитьЗначение(1, 2);
	КонецЕсли;
		
	Если КонечнаяДата < '31.12.9999' Тогда
		КонДата = КонечнаяДата;
	ИначеЕсли 0 < Значения.КоличествоСтрок() Тогда
		КонДата = Значения.ПолучитьЗначение(Значения.КоличествоСтрок(), 2);
	КонецЕсли;
	
	Если ВвестиПериод(НачДата, КонДата, "Выберите интервал просмотра значений") <> 1 Тогда
		Возврат;
	КонецЕсли;
	
	НачальнаяДата = НачДата; КонечнаяДата = КонДата;
	
	ЗаполнитьТаблицу();
	
КонецПроцедуры // ВыбратьПериод()

//******************************************************************************
// ОчиститьПериод()
//
// Параметры:
//  
//
// Возвращаемое значение:
//  Нет.
//
// Вызывается из формул элементов диалога:
//  Кнопка "Период Х".
//
// Описание:
//  Здесь описывается процедура.
//
Процедура ОчиститьПериод()
	
	Если ПроверкаТекущегоОбъекта() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	НачальнаяДата = '00.00.0000';
	КонечнаяДата  = '31.12.9999';
	
	ЗаполнитьТаблицу();
	
КонецПроцедуры // ОчиститьПериод()

//******************************************************************************
// ВыбратьРеквизиты()
//
// Параметры:
//  
//
// Возвращаемое значение:
//  Нет.
//
// Вызывается из формул элементов диалога:
//
// Описание:
//  Процедура отрабатывает выбор видимых периодических реквизитов.
//
Процедура ВыбратьРеквизиты()
	
	Если ПроверкаТекущегоОбъекта() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Список = СоздатьОбъект("СписокЗначений");
	
	Для Номер = 1 По мдСправочник.Реквизит() Цикл
		мдРеквизит = мдСправочник.Реквизит(Номер);
		
		Если мдРеквизит.Периодический = 0 Тогда
			Продолжить;
		КонецЕсли;
			
		Список.ДобавитьЗначение(мдРеквизит.Идентификатор, мдРеквизит.Представление());
		
		Если ВидимыйРеквизит(мдРеквизит.Идентификатор) = 1 Тогда
			Список.Пометка(Список.РазмерСписка(), 1);
		КонецЕсли;
	КонецЦикла;
	
	Если Список.ОтметитьЗначения(0, "Выберите отображаемые реквизиты", 0, 60) <> 1 Тогда
		Возврат;
	КонецЕсли;
	
	ВидимыеРеквизиты = "";
	
	Для Номер = 1 По Список.РазмерСписка() Цикл
		Если Список.Пометка(Номер) = 1 Тогда
			ВидимыеРеквизиты = ВидимыеРеквизиты+Список.ПолучитьЗначение(Номер)+",";
		КонецЕсли;
	КонецЦикла;
	
	НастроитьТаблицу();
	ЗаполнитьТаблицу();
	
КонецПроцедуры // ВыбратьРеквизиты()

//******************************************************************************
// ОчиститьРеквизиты()
//
// Параметры:
//  
//
// Возвращаемое значение:
//  Нет.
//
// Вызывается из формул элементов диалога:
//  Кнопка "Реквизиты Х".
//
// Описание:
//  Здесь описывается процедура.
//
Процедура ОчиститьРеквизиты()
	
	Если ПроверкаТекущегоОбъекта() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ВидимыеРеквизиты = "";
	
	НастроитьТаблицу();
	ЗаполнитьТаблицу();
	
КонецПроцедуры // ОчиститьРеквизиты()

//******************************************************************************
// Печать()
//
// Параметры:
//  
//
// Возвращаемое значение:
//  Нет.
//
// Вызывается из формул элементов диалога:
//  Кнопка "Печать".
//
// Описание:
//  Выводит печатную форму истории изменения периодических реквизитов.
//
Процедура Печать()
	
	Перем 	ТипРеквизита;
	Перем	Заголовок;
	
	НомерСекции = СоздатьОбъект("СписокЗначений");
	
	ТаблицаПечати = СоздатьОбъект("Таблица");
	ТаблицаПечати.ИсходнаяТаблица("ПечатнаяФорма");
	ТаблицаПечати.ВывестиСекцию("Шапка");
	
	ТаблицаПечати.ВывестиСекцию("Заголовок|ДатыЗначений");
	
	
	Если  Значения.ВидимостьКолонки(3) = 1 Тогда
		НачальнаяКолонка = 4;
		ТаблицаПечати.ПрисоединитьСекцию("Заголовок|ДокументыЗначений");
	КонецЕсли;	
	
	Для Сч2 = 4 По Значения.КоличествоКолонок() Цикл
		
		НазваниеРеквизита = Значения.ПолучитьПараметрыКолонки(Сч2,,,,Заголовок);
		
		Если ВидимыйРеквизит(НазваниеРеквизита) = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		ТипРеквизита = Метаданные.Справочник(ТекущийОбъект.Вид()).Реквизит(НазваниеРеквизита).Тип;
		
		Если ТипРеквизита = "Число" Тогда
			ЧислоЗнаков = Метаданные.Справочник(ТекущийОбъект.Вид()).Реквизит(НазваниеРеквизита).Длина + 1;
		ИначеЕсли ТипРеквизита = "Дата" Тогда
			ЧислоЗнаков = 10;
		ИначеЕсли ТипРеквизита = "Строка" Тогда
			ЧислоЗнаков = Метаданные.Справочник(ТекущийОбъект.Вид()).Реквизит(НазваниеРеквизита).Длина;
		Иначе
			ЧислоЗнаков = 50;
		КонецЕсли;
		     
		НомерСекцииРеквизита = 1; 
		
		Если ЧислоЗнаков > 10 Тогда
			НомерСекцииРеквизита = 2; 
		КонецЕсли;
		
		Если ЧислоЗнаков > 20 Тогда
			НомерСекцииРеквизита = 3; 
		КонецЕсли;
		
		Если ЧислоЗнаков > 30 Тогда
			НомерСекцииРеквизита = 4; 
		КонецЕсли;
		
		Если ЧислоЗнаков > 50 Тогда
			НомерСекцииРеквизита = 5; 
		КонецЕсли;
		
		Если ЧислоЗнаков > 80 Тогда
			НомерСекцииРеквизита = 6; 
		КонецЕсли;

		НомерСекции.ДобавитьЗначение(НомерСекцииРеквизита , НазваниеРеквизита);	           
		ТаблицаПечати.ПрисоединитьСекцию("Заголовок|Секция" + НомерСекцииРеквизита); 
		
	КонецЦикла;
	
	Для Сч = 1 По Значения.КоличествоСтрок() Цикл
		
		ТаблицаПечати.ВывестиСекцию("Строчка|ДатыЗначений");

		Если  Значения.ВидимостьКолонки(3) = 1 Тогда
				ТаблицаПечати.ПрисоединитьСекцию("Строчка|ДокументыЗначений");
		КонецЕсли;	
		
		Для Сч2 = 4 По Значения.КоличествоКолонок() Цикл
			Значение = Значения.ПолучитьЗначение(Сч, Сч2); 
			НазваниеРеквизита = Значения.ПолучитьПараметрыКолонки(Сч2);  
			
			Если ВидимыйРеквизит(НазваниеРеквизита) = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			ТаблицаПечати.ПрисоединитьСекцию("Строчка|Секция" + НомерСекции.Получить(НазваниеРеквизита)); 
		
		КонецЦикла;
		
	КонецЦикла;
	
	ТаблицаПечати.Опции(0,0,4,1,0);
	ТаблицаПечати.ТолькоПросмотр(1);
	ТаблицаПечати.Показать(ТекущийОбъект + ": История периодических реквизитов.");
	
КонецПроцедуры // Печать()

////////////////////////////////////////////////////////////////////////////////
// ПРЕДОПРЕДЕЛЕННЫЕ ПРОЦЕДУРЫ

//******************************************************************************
// Предопределенная процедура.

Процедура ПриОткрытии()
	
	ОбновитьТаблицу();
	
	Форма.кнВыбратьОбъект.Видимость(1-ПроверкаТекущегоОбъекта());
	
КонецПроцедуры // ПриОткрытии()

//******************************************************************************
// Предопределенная процедура.
//
Процедура ПриПовторномОткрытии()
	
	ОбновитьТаблицу();
	
КонецПроцедуры // ПриПовторномОткрытии()

//******************************************************************************

////////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ

ТекущийОбъект    = ПолучитьПустоеЗначение("Справочник");
НачальнаяДата    = '00.00.0000';
КонечнаяДата     = '31.12.9999';
ВидимыеРеквизиты = "";
СвязьРеквизитов  = 0;

СписокСправочников = СоздатьОбъект("СписокЗначений");

Для Справ = 1 По Метаданные.Справочник() Цикл
	мдСправочник = Метаданные.Справочник(Справ);
	
	Для Рекв = 1 По мдСправочник.Реквизит() Цикл
		Если мдСправочник.Реквизит(Рекв).Периодический = 1 Тогда
			СписокСправочников.ДобавитьЗначение(мдСправочник.Идентификатор, мдСправочник.Представление());
			Прервать;
		КонецЕсли;
	КонецЦикла;
КонецЦикла;
