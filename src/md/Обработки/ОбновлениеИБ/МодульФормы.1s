Перем Таб;
Перем Сч, ТаблицаСоответствияСчетов, Сч76_Н;
Перем ОбработкаСчетовВДокументахВыполнена;
Перем ОбработкаСчетовВСправочникахВыполнена;
Перем ТаблицаСчетовП68;
Перем ЗаменаКодовВнеобортныхАктивов;
Перем ДальнейшееОбновлениеНевозможно;
Перем СписокСчетов68;
Перем ТипыЦенНоменклатуры[3];
Перем СпрВидыВычетов;
Перем СпрВидыДоходов;
Перем ИнформацияОРаздельномУчетеВыведена; 

//******************************************************************************
// ОчиститьИсториюЗначений()
//
Процедура ОчиститьИсториюЗначения(ИмяРеквизита, ГраницаИнтервала)

	Периодический = СоздатьОбъект("Периодический");                                                 
	Периодический.ИспользоватьОбъект(ИмяРеквизита);
	Периодический.ОбратныйПорядок(1);
	Периодический.ВыбратьЗначения();
	Пока Периодический.ПолучитьЗначение() = 1 Цикл
		Если Периодический.ДатаЗнач > ГраницаИнтервала Тогда
			Периодический.Удалить();
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры //ОчиститьИсториюЗначений()

//******************************************************************************
// МожноВыбиратьСтатьюОтчислений()
//
Функция МожноВыбиратьСтатьюОтчислений(СчетЗатрат)
	
	Если СчетЗатрат.Выбран() = 1 Тогда
		Для А = 1 По 3 Цикл
			Если (СчетЗатрат.ВидСубконто(А) = ВидыСубконто.СтатьиЗатратНаПроизводство) или
				 (СчетЗатрат.ВидСубконто(А) = ВидыСубконто.СтатьиЗатратОбслуживающихПроизводств) или
				 (СчетЗатрат.ВидСубконто(А) = ВидыСубконто.СтатьиОбщепроизводственныхЗатрат) или
				 (СчетЗатрат.ВидСубконто(А) = ВидыСубконто.СтатьиОбщехозяйственныхЗатрат) или
				 (СчетЗатрат.ВидСубконто(А) = ВидыСубконто.СтатьиИздержекОбращения) или
				 (СчетЗатрат.ВидСубконто(А) = ВидыСубконто.СтатьиКоммерческихРасходов) или
				 (СчетЗатрат.ВидСубконто(А) = ВидыСубконто.СтатьиРасходовНаПродажу) Тогда
				Возврат А;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат 0;
	
КонецФункции // МожноВыбиратьСтатьюОтчислений()

//******************************************************************************
//	УстановитьСтавкуЕСН(Налог,НомерСтавкиОПС,Шкала,НомерПредела,Предел,Процент,ДатаАктуальности)
//
//	Параметры:
//		Налог				- справочник "Налоги и отчисления"
//		Шкала				- справочник "Ставки налогов"
//		НомерПредела		- номер предела ставки
//		НомерСтавкиОПС		- строка, номер ставки взносов на ОПС ("", "2" или "3")
//		Предел				- сумма предела ставки
//		Процент				- ставка в процентах
//		ДатаАктуальности 	- дата актуальности периодических реквизитов
//
//	Описание:
//		Добавляет новый элемент справочника "Ставки налогов".
//
Процедура УстановитьСтавкуЕСН(Налог, НомерСтавкиОПС="", Шкала, НомерПредела=1, Предел=100000, Процент, ДатаАктуальности='01.01.2001')
	
	Шкала.ИспользоватьВладельца(Налог);
	
	Если Шкала.НайтиПоКоду(НомерПредела) = 0 Тогда
		
		Если НомерПредела = 1 Тогда
		    НаименованиеПредела = "1_Первый предел";
			
		ИначеЕсли НомерПредела = 2 Тогда
			НаименованиеПредела = "2_Второй предел";
			
		ИначеЕсли НомерПредела = 3 Тогда
			НаименованиеПредела = "3_Третий предел";
			
		ИначеЕсли НомерПредела = 4 Тогда
			НаименованиеПредела = "4_Четвертый предел";
			
		Иначе
			НаименованиеПредела = "";
		КонецЕсли;
	
		Шкала.Новый();
		Шкала.Код = НомерПредела;
		Шкала.Наименование = НаименованиеПредела;
		Шкала.Записать();
	КонецЕсли;
	
	Шкала.Предел.Установить(ДатаАктуальности, Предел);
	Шкала.ПолучитьАтрибут("Процент" + НомерСтавкиОПС).Установить(ДатаАктуальности, Процент);
	
КонецПроцедуры	// УстановитьСтавкуЕСН 

//******************************************************************************
// ЗаполнитьТарифыСтраховыхВзносов()
//
// Параметры:
//	
//
// 	Вызывается из формул элементов диалога:
//		
//
//	Описание:
//		
//
Процедура ЗаполнитьТарифыСтраховыхВзносов()
	
	Спр = СоздатьОбъект("Справочник.ТарифСтраховыхВзносов");
	
	//значения устанавливаем на конец кода
	
	Спр.ИспользоватьДату('01.01.2010',1);
	ВидТарифа = Перечисление.ТарифыСтраховыхВзносов.ОбщийНалоговыйРежим;
	Если Спр.НайтиПоРеквизиту("ВидТарифа", ВидТарифа, 1)=0 Тогда
		Спр.Новый();
	КонецЕсли;
	Спр.ВидТарифа = ВидТарифа;
	Спр.ПФР 			 = 20;
	Спр.ПФРНакопительный = 6;
	Спр.ФСС 			 = 2.9;
	Спр.ФФОМС			 = 1.1;
	Спр.ТФОМС			 = 2.0;
	Спр.Записать();
	
	Спр.ИспользоватьДату('01.01.2011',1);
	Спр.ПФР 			 = 26;
	Спр.ПФРНакопительный = 6;
	Спр.ФСС 			 = 2.9;
	Спр.ФФОМС			 = 2.1;
	Спр.ТФОМС			 = 3.0;
	Спр.Записать(); 
	
	Спр.ИспользоватьДату('01.01.2010',1);
	ВидТарифа = Перечисление.ТарифыСтраховыхВзносов.ЕНВД;
	Если Спр.НайтиПоРеквизиту("ВидТарифа", ВидТарифа, 1)=0 Тогда
		Спр.Новый();
	КонецЕсли;
	Спр.ВидТарифа = ВидТарифа;
	Спр.ПФР 			 = 14;
	Спр.ПФРНакопительный = 6;
	Спр.ФСС 			 = 0;
	Спр.ФФОМС			 = 0;
	Спр.ТФОМС			 = 0;
	Спр.Записать();
	
	Спр.ИспользоватьДату('01.01.2011',1);
	Спр.ПФР 			 = 26;
	Спр.ПФРНакопительный = 6;
	Спр.ФСС 			 = 2.9;
	Спр.ФФОМС			 = 2.1;
	Спр.ТФОМС			 = 3.0;
	Спр.Записать(); 
	
	Спр.ИспользоватьДату('01.01.2010',1);
	ВидТарифа = Перечисление.ТарифыСтраховыхВзносов.РезидентТехникоВнедренческойЗоны;
	Если Спр.НайтиПоРеквизиту("ВидТарифа", ВидТарифа, 1)=0 Тогда
		Спр.Новый();
	КонецЕсли;
	Спр.ВидТарифа = ВидТарифа;
	Спр.ПФР 			 = 14;
	Спр.ПФРНакопительный = 6;
	Спр.ФСС 			 = 0;
	Спр.ФФОМС			 = 0;
	Спр.ТФОМС			 = 0;
	Спр.Записать();
	
	Спр.ИспользоватьДату('01.01.2011',1);
	Спр.ПФР 			 = 16;
	Спр.ПФРНакопительный = 6;
	Спр.ФСС 			 = 1.9;
	Спр.ФФОМС			 = 1.1;
	Спр.ТФОМС			 = 2.0;
	Спр.Записать();
	
	Спр.ИспользоватьДату('01.01.2013',1);
	Спр.ПФР 			 = 21;
	Спр.ПФРНакопительный = 6;
	Спр.ФСС 			 = 2.2;
	Спр.ФФОМС			 = 1.6;
	Спр.ТФОМС			 = 2.1;
	Спр.Записать();  
	
	Спр.ИспользоватьДату('01.01.2015',1);
	Спр.ПФР 			 = 26;
	Спр.ПФРНакопительный = 6;
	Спр.ФСС 			 = 2.9;
	Спр.ФФОМС			 = 2.1;
	Спр.ТФОМС			 = 3.0;
	Спр.Записать(); 
	
	Спр.ИспользоватьДату('01.01.2010',1);
	ВидТарифа = Перечисление.ТарифыСтраховыхВзносов.ОрганизацияИнвалидов;
	Если Спр.НайтиПоРеквизиту("ВидТарифа", ВидТарифа, 1)=0 Тогда
		Спр.Новый();
	КонецЕсли;
	Спр.ВидТарифа = ВидТарифа;
	Спр.ПФР 			 = 14;
	Спр.ПФРНакопительный = 6;
	Спр.ФСС 			 = 0;
	Спр.ФФОМС			 = 0;
	Спр.ТФОМС			 = 0;
	Спр.Записать();
	
	Спр.ИспользоватьДату('01.01.2011',1);
	Спр.ПФР 			 = 16;
	Спр.ПФРНакопительный = 6;
	Спр.ФСС 			 = 1.9;
	Спр.ФФОМС			 = 1.1;
	Спр.ТФОМС			 = 2.0;
	Спр.Записать();
	
	Спр.ИспользоватьДату('01.01.2013',1);
	Спр.ПФР 			 = 21;
	Спр.ПФРНакопительный = 6;
	Спр.ФСС 			 = 2.2;
	Спр.ФФОМС			 = 1.6;
	Спр.ТФОМС			 = 2.1;
	Спр.Записать();  
	
	Спр.ИспользоватьДату('01.01.2015',1);
	Спр.ПФР 			 = 26;
	Спр.ПФРНакопительный = 6;
	Спр.ФСС 			 = 2.9;
	Спр.ФФОМС			 = 2.1;
	Спр.ТФОМС			 = 3.0;
	Спр.Записать();
	
	
КонецПроцедуры //ЗаполнитьТарифыСтраховыхВзносов 

//******************************************************************************
// УстановитьЗначениеВычета()
//
Процедура УстановитьЗначениеВычета(Код,Сумма = 0, Предел = 0, ДатаАктуальности = 0)

	Если СпрВидыВычетов.НайтиПоКоду(Код,0)=0 Тогда
		Возврат;
	КонецЕсли;
	
	Если ПустоеЗначение(ДатаАктуальности) = 0 Тогда
		СпрВидыВычетов.ИспользоватьДату(ДатаАктуальности,1);
		СпрВидыВычетов.Сумма			= Сумма;
		СпрВидыВычетов.ПределДоходов	= Предел;
		СпрВидыВычетов.Записать();
	КонецЕсли;
	
КонецПроцедуры //УстановитьЗначениеВычета

//******************************************************************************
// ОписатьКодВычетаНДФЛ()
//		
//
Функция ОписатьКодВычетаНДФЛ(КодВычета, НовыйКод, 
			КодДляОтчетности2009, КодДляОтчетности2008, КодДляОтчетности2007,
			Наименование,
			Наименование2009, Наименование2008, Наименование2007)
	
		
		Если СпрВидыВычетов.НайтиПоКоду(КодВычета,0)=0 Тогда
			Если СпрВидыВычетов.НайтиПоКоду(НовыйКод,0)=0 Тогда
				СпрВидыВычетов.Новый();
			КонецЕсли;
		КонецЕсли;
		
		СпрВидыВычетов.Код = НовыйКод;
		
		СпрВидыВычетов.КодДляОтчетности2007 = КодДляОтчетности2007;
		СпрВидыВычетов.КодДляОтчетности2008 = КодДляОтчетности2008;
		СпрВидыВычетов.КодДляОтчетности2009 = КодДляОтчетности2009;
		
		СпрВидыВычетов.Наименование2007 = Наименование2007;
		СпрВидыВычетов.Наименование2008 = Наименование2008;
		СпрВидыВычетов.Наименование2009 = Наименование2009;
		
		СпрВидыВычетов.Наименование = Наименование;
		СпрВидыВычетов.Записать();    
		
		Возврат СпрВидыВычетов.ТекущийЭлемент()
		
    
КонецФункции //ОписатьКодВычетаНДФЛ
	
//******************************************************************************
// ОбработатьСтандартныеВычеты2009()
//
Процедура ОбработатьСтандартныеВычеты2009()
	
	
	ОписатьКодВычетаНДФЛ("101","108\101","108", "101", "101",
	"1000 руб. на каждого ребенка до 18 лет, на уч. очной формы обучения, студента, курсанта до 24 лет",
	"1000 руб. на каждого ребенка до 18 лет, на учащегося очной формы обучения, аспиранта, ординатора, студента, курсанта до 24 лет",
	"600 руб. на каждого ребенка в возрасте до 18 лет на учащегося очной формы обучения, аспиранта, ординатора, студента, курсанта в возрасте до 24 лет родителям, супругам родителей",
	"600 руб. на каждого ребенка в возрасте до 18 лет, на учащегося очной формы обучения, аспиранта, ординатора, студента, курсанта в возрасте до 24 лет родителям, супругам родителей");
	
	ОписатьКодВычетаНДФЛ("106", "109\106", "109", "106", "106",                                  
	"2000 руб. на каждого ребенка-инвалида до 18 лет, на уч. очной формы обучения, студента до 24 лет",
	"2000 руб. на каждого ребенка-инвалида до 18 лет, на учащегося очной формы обучения, студента до 24 лет, явл. инвалидом I или II группы",
	"1200 руб. на каждого ребенка-инвалида в возрасте до 18 лет, на учащегося очной формы обучения, аспиранта, ординатора, студента, курсанта в возрасте до 24 лет, являющегося инвалидом I или II группы, родителям, супругам родителей",
	"1200 руб. на каждого ребенка-инвалида в возрасте до 18 лет, на учащегося очной формы обучения, аспиранта, ординатора, студента, курсанта в возрасте до 24 лет, являющегося инвалидом I или II группы, родителям, супругам родителей");
	
	ОписатьКодВычетаНДФЛ("102","110\102", "110", "102", "102",
	"2000 руб. на каждого ребенка единственному родителю (начиная с доходов 2009 года)",
	"2000 руб. на каждого ребенка единственному родителю (приемному родителю), опекуну, попечителю (начиная с доходов 2009 года)",
	"1200 руб. на каждого ребенка в возрасте до 18 лет, на учащегося очной формы обучения, аспиранта, ординатора, студента, курсанта в возрасте до 24 лет вдове (вдовцу), одинокому родителю, опекуну или попечителю, приемным родителям",
	"1200 руб. на каждого ребенка в возрасте до 18 лет, на учащегося очной формы обучения, аспиранта, ординатора, студента, курсанта в возрасте до 24 лет вдове (вдовцу), одинокому родителю, опекуну или попечителю, приемным родителям");
	
	ОписатьКодВычетаНДФЛ("103","103", "103", "103", "103",
	"400 руб. на налогоплательщика, не относящегося к категориям пп. 1-2 п. 1 ст. 218 НК РФ",
	"400 руб. на налогоплательщика, не относящегося к категориям, перечисленным в пп. 1-2 п. 1 ст. 218 Налогового кодекса Российской Федерации",
	"400 руб. на налогоплательщика, не относящегося к категориям, перечисленным в пп. 1 - 2 п. 1 ст. 218 Налогового кодекса Российской Федерации",
	"400 руб. на налогоплательщика, не относящегося к категориям, перечисленным в пп. 1 - 2 п. 1 ст. 218 Налогового кодекса Российской Федерации");
	
	
	ОписатьКодВычетаНДФЛ("104","104", "104", "104", "104",
	"500 рублей на налогоплательщика, относящегося к категориям пп. 2 п. 1 ст. 218 НК РФ",
	"500 рублей на налогоплательщика, относящегося к категориям, перечисленным в пп. 2 п. 1 ст. 218 Налогового кодекса Российской Федерации",
	"500 рублей на налогоплательщика, относящегося к категориям, перечисленным в пп. 2 п. 1 ст. 218 Налогового кодекса Российской Федерации",
	"500 рублей на налогоплательщика, относящегося к категориям, перечисленным в пп. 2 п. 1 ст. 218 Налогового кодекса Российской Федерации");
	
	
	ОписатьКодВычетаНДФЛ("105","105", "105", "105", "105",
	"3000 рублей на налогоплательщика, относящегося к категориям пп. 1 п. 1 ст. 218 НК РФ",
	"3000 рублей на налогоплательщика, относящегося к категориям, перечисленным в пп. 1 п. 1 ст. 218 Налогового кодекса Российской Федерации",
	"3000 рублей на налогоплательщика, относящегося к категориям, перечисленным в пп. 1 п. 1 ст. 218 Налогового кодекса Российской Федерации",
	"3000 рублей на налогоплательщика, относящегося к категориям, перечисленным в пп. 1 п. 1 ст. 218 Налогового кодекса Российской Федерации");
	
	
	ОписатьКодВычетаНДФЛ("111","111", "111", "-", "-",
	"2000 руб. на каждого ребенка, при условии отказа от вычета второго родителя",
	"2000 руб. на каждого ребенка родителю (в т.ч приемному) при условии отказа второго родителя (в т.ч. приемного) от получения вычета на этого ребенка",
	"не предоставлялся",
	"не предоставлялся");
	
	
	ОписатьКодВычетаНДФЛ("107","112\107", "112", "107", "107",
	"4000 руб. на каждого ребенка-инвалида до 18 лет, единственному родителю и др.",
	"4000 руб. на каждого ребенка-инвалида до 18 лет, на учащегося очной формы обучения до 24 лет, явл. инвалидом, единственному родителю и др.",
	"2400 руб. на каждого ребенка-инвалида в возрасте до 18 лет, на учащегося очной формы обучения, аспиранта, ординатора, студента в возрасте до 24 лет, являющегося инвалидом I или II группы, вдове (вдовцу), одинокому родителю, опекуну или попечителю, приемным родителям",
	"2400 руб. на каждого ребенка-инвалида в возрасте до 18 лет, на учащегося очной формы обучения, аспиранта, ординатора, студента в возрасте до 24 лет, являющегося инвалидом I или II группы, вдове (вдовцу), одинокому родителю, опекуну или попечителю, приемным родителям");
	
	
	ОписатьКодВычетаНДФЛ("113","113", "113", "-", "-",
	"4000 руб. на ребенка-инвалида до 18 лет, при условии отказа от вычета второго родителя",
	"4000 руб. на ребенка-инвалида до 18 лет, на учащегося очной формы обучения до 24 лет, явл. инвалидом, при условии отказа от вычета второго родителя",
	"не предоставлялся",
	"не предоставлялся");
	
	
	ОписатьКодВычетаНДФЛ("305","305", "305", "-", "-",
	"Сумма фактически произведенных и документально подтвержденных расходов, связанных с заключением, исполнением и с прекращением срочных сделок",
	"Сумма фактически произведенных и документально подтвержденных расходов, связанных с заключением, исполнением и с прекращением срочных сделок",
	"не предоставлялся",
	"не предоставлялся");
	
	ОписатьКодВычетаНДФЛ("306","306", "306", "-", "-",
	"Сумма фактически произведенных и документально подтвержденных расходов по приобретению, хранению и реализации паев паевых инвестиционных фондов",
	"Сумма фактически произведенных и документально подтвержденных расходов по приобретению, хранению и реализации паев паевых инвестиционных фондов",
	"не предоставлялся",
	"не предоставлялся");
	
	
	ОписатьКодВычетаНДФЛ("307","307","307", "307", "307",
	"Сумма расходов на приобретение, реализацию и хранение ценных бумаг, обращающихся на организованном рынке ценных бумаг",
	"Сумма расходов на приобретение, реализацию и хранение ценных бумаг, обращающихся на организованном рынке ценных бумаг",
	"Совокупная сумма фактически произведенных налогоплательщиком и документально подтвержденных расходов на приобретение, реализацию и хранение ценных бумаг, включая суммы, с которых был исчислен и уплачен налог при приобретении ценных бумаг в собственность (в том числе получении на безвозмездной основе или с частичной оплатой)",
	"Совокупная сумма фактически произведенных налогоплательщиком и документально подтвержденных расходов на приобретение, реализацию и хранение ценных бумаг, включая суммы, с которых был исчислен и уплачен налог при приобретении ценных бумаг в собственность (в том числе получении на безвозмездной основе или с частичной оплатой)");
	
	ОписатьКодВычетаНДФЛ("308","308", "308", "-", "-",
	"Сумма расходов на приобретение реализацию и хранение ценных бумаг, не обращающихся на организованном рынке ценных бумаг",
	"Сумма расходов на приобретение реализацию и хранение ценных бумаг, не обращающихся на организованном рынке ценных бумаг",
	"не предоставлялся",
	"не предоставлялся");
	
	
	ОписатьКодВычетаНДФЛ("309","309", "309", "-", "-",
	"Сумма расходов на приобретение реализацию и хранение ценных бумаг, не обр-ся на организованном рынке, но при приобретении отвечавших его требованиям",
	"Сумма расходов на приобретение реализацию и хранение ценных бумаг, не обр-ся на организованном рынке, но при приобретении отвечавших его требованиям",
	"не предоставлялся",
	"не предоставлялся");
	
	
	ОписатьКодВычетаНДФЛ("310","310", "310", "-", "-",
	"Убыток, полученный в налоговом периоде по операциям купли-продажи ценных бумаг, обращающихся на организованном рынке ценных бумаг",
	"Убыток, полученный в налоговом периоде по операциям купли-продажи ценных бумаг, обращающихся на организованном рынке ценных бумаг",
	"не предоставлялся",
	"не предоставлялся");
	
	ОписатьКодВычетаНДФЛ("311","313\311", "313", "313", "311",
	"Сумма, израсходованная на новое строительство либо приобретение на территории РФ жилого дома, и т.д.",
	"Сумма, израсходованная налогоплательщиком на новое строительство либо приобретение на территории Российской Федерации жилого дома, квартиры, комнаты или доли (долей) в них (кроме сумм, направленных на погашение процентов по целевым займам (кредитам) и фактически израсходованных на новое строительство или приобретение на территории РФ жилого дома, квартиры, комнаты или доли (долей) в них), в размере фактически произведенных и документально подтвержденных расходов в пределах 2 000 000 руб.",
	"Сумма, израсходованная налогоплательщиком на новое строительство либо приобретение на территории Российской Федерации жилого дома, квартиры, комнаты или доли (долей) в них (кроме сумм, направленных на погашение процентов по целевым займам (кредитам) и фактически израсходованных на новое строительство или приобретение на территории РФ жилого дома, квартиры, комнаты или доли (долей) в них), в размере фактически произведенных и документально подтвержденных расходов в пределах 2 000 000 руб.",
	"Сумма, израсходованная налогоплательщиком на новое строительство либо приобретение на территории Российской Федерации жилого дома, квартиры или доли (долей) в них (кроме сумм, направленных на погашение процентов по целевым займам (кредитам) и фактически израсходованных на новое строительство или приобретение на территории Российской Федерации жилого дома, квартиры или доли (долей) в них), в размере фактически произведенных и документально подтвержденных расходов в пределах 1 000 000 руб.");
	
	ОписатьКодВычетаНДФЛ("312","312", "312", "312", "312",
	"Сумма, направленная на погашение процентов по целевым займам (кредитам) на новое строительство",
	"Сумма, направленная на погашение процентов по целевым займам (кредитам) на новое строительство или приобретение на территории РФ жилого дома, квартиры",
	"Сумма, направленная на погашение процентов по целевым займам (кредитам), полученным от кредитных и иных организаций Российской Федерации и фактически израсходованная налогоплательщиком на новое строительство или приобретение на территории Российской Федерации жилого дома, квартиры или доли (долей) в них",
	"Сумма, направленная на погашение процентов по целевым займам (кредитам), полученным от кредитных и иных организаций Российской Федерации и фактически израсходованная налогоплательщиком на новое строительство или приобретение на территории Российской Федерации жилого дома, квартиры или доли (долей) в них");
	
	
	ОписатьКодВычетаНДФЛ("403","403", "403", "403", "403",
	"Сумма фактически произведенных и документально подтвержденных расходов по договорам ГПХ",
	"Сумма фактически произведенных и документально подтвержденных расходов, связанных с выполнением работ (оказанием услуг) по договорам ГПХ",
	"Сумма фактически произведенных и документально подтвержденных расходов, непосредственно связанных с выполнением работ (оказанием услуг) по договорам гражданско-правового характера",
	"Сумма фактически произведенных и документально подтвержденных расходов, непосредственно связанных с выполнением работ (оказанием услуг) по договорам гражданско-правового характера");
	
	
	ОписатьКодВычетаНДФЛ("404","404", "404", "404", "404",
	"Сумма фактически произведенных расходов, связанных с получением авторских вознаграждений",
	"Сумма фактически произведенных и документально подтвержденных расходов, связанных с получением авторских вознаграждений",
	"Сумма фактически произведенных и документально подтвержденных расходов, связанных с получением авторских вознаграждений или вознаграждений за создание, издание, исполнение или иное использование произведений науки, литературы и искусства, вознаграждений авторам открытий, изобретений и промышленных образцов",
	"Сумма фактически произведенных и документально подтвержденных расходов, связанных с получением авторских вознаграждений или вознаграждений за создание, издание, исполнение или иное использование произведений науки, литературы и искусства, вознаграждений авторам открытий, изобретений и промышленных образцов");
	
	ОписатьКодВычетаНДФЛ("405","405", "405", "405", "405",
	"Сумма в пределах нормативов затрат, связанных с получением авторских вознаграждений",
	"Сумма в пределах нормативов затрат, связанных с получением авторских вознаграждений",
	"Сумма в пределах нормативов затрат, связанных с получением авторских вознаграждений и вознаграждений за создание, исполнение или иное использование произведений науки, литературы и искусства, вознаграждений авторам открытий, изобретений и промышленных образцов (в процентах к сумме начисленного дохода)",
	"Сумма в пределах нормативов затрат, связанных с получением авторских вознаграждений и вознаграждений за создание, исполнение или иное использование произведений науки, литературы и искусства, вознаграждений авторам открытий, изобретений и промышленных образцов (в процентах к сумме начисленного дохода)");
	
	
	ОписатьКодВычетаНДФЛ("501","501", "501", "501", "501",
	"Вычет из стоимости подарков, полученных от организаций и индивидуальных предпринимателей",
	"Вычет из стоимости подарков, полученных от организаций и индивидуальных предпринимателей",
	"Вычет из стоимости подарков, полученных от организаций и индивидуальных предпринимателей",
	"Вычет из стоимости подарков, полученных от организаций и индивидуальных предпринимателей");
	
	
	ОписатьКодВычетаНДФЛ("502","502", "502", "502", "502",
	"Вычет из стоимости призов в денежной и натуральной форме на конкурсах и соревнованиях",
	"Вычет из стоимости призов в денежной и натуральной форме на конкурсах и соревнованиях, проводимых в соотв. с решениями Прав-ва РФ и др. органов власти",
	"Вычет из стоимости призов в денежной и натуральной формах, полученных на конкурсах и соревнованиях, проводимых в соответствии с решениями Правительства Российской Федерации, Законодательных (представительных) органов государственной власти или представительных органов местного самоуправления",
	"Вычет из стоимости призов в денежной и натуральной формах, полученных на конкурсах и соревнованиях, проводимых в соответствии с решениями Правительства Российской Федерации, Законодательных (представительных) органов государственной власти или представительных органов местного самоуправления");
	
	
	ОписатьКодВычетаНДФЛ("503","503", "503", "503", "503",
	"Вычет из суммы материальной помощи, своим работникам, а также бывшим своим работникам-пенсионерам",
	"Вычет из суммы материальной помощи, оказываемой работодателями своим работникам, а также бывшим своим работникам-пенсионерам",
	"Вычет из суммы материальной помощи, оказываемой работодателями своим работникам, а также бывшим своим работникам, уволившимся в связи с выходом на пенсию по инвалидности или по возрасту",
	"Вычет из суммы материальной помощи, оказываемой работодателями своим работникам, а также бывшим своим работникам, уволившимся в связи с выходом на пенсию по инвалидности или по возрасту");
	
	
	ОписатьКодВычетаНДФЛ("504","504", "504", "504", "504",
	"Вычет из суммы возмещения (оплаты) своим работникам, а также инвалидам стоимости медикаментов",
	"Вычет из суммы возмещения (оплаты) работодателями своим работникам, бывшим своим работникам (пенсионерам), а также инвалидам стоимости медикаментов",
	"Вычет из суммы возмещения (оплаты) работодателями своим работникам, их супругам, родителям и детям, бывшим своим работникам (пенсионерам по возрасту), а также инвалидам стоимости приобретенных ими (для них) медикаментов, назначенных им лечащим врачом",
	"Вычет из суммы возмещения (оплаты) работодателями своим работникам, их супругам, родителям и детям, бывшим своим работникам (пенсионерам по возрасту), а также инвалидам стоимости приобретенных ими (для них) медикаментов, назначенных им лечащим врачом");
	
	
	ОписатьКодВычетаНДФЛ("505","505", "505", "505", "505",
	"Вычет из стоимости выигрышей и призов в рекламных акциях",
	"Вычет из стоимости выигрышей и призов, полученных на конкурсах, играх и других мероприятиях в целях рекламы товаров (работ, услуг)",
	"Вычет из стоимости выигрышей и призов, полученных на конкурсах, играх и других мероприятиях в целях рекламы товаров (работ, услуг)",
	"Вычет из стоимости выигрышей и призов, полученных на конкурсах, играх и других мероприятиях в целях рекламы товаров (работ, услуг)");
	
	
	ОписатьКодВычетаНДФЛ("506", "506", "506", "506", "506",
	"Вычет из суммы материальной помощи, оказываемой инвалидам общественными организациями инвалидов",
	"Вычет из суммы материальной помощи, оказываемой инвалидам общественными организациями инвалидов",
	"Вычет из суммы материальной помощи, оказываемой инвалидам общественными организациями инвалидов",
	"Вычет из суммы материальной помощи, оказываемой инвалидам общественными организациями инвалидов");
	
	ОписатьКодВычетаНДФЛ("507","507", "507", "507", "507",
	"Вычет из суммы помощи полученных ветеранами, инвалидами ВОВ и приравненных к ним",
	"Вычет из суммы помощи (в денежной и натуральной формах), а также стоимости подарков, полученных ветеранами, инвалидами ВОВ и приравненных к ним",
	"Вычет из суммы помощи (в денежной и натуральной формах), а также стоимости подарков, полученных ветеранами Великой Отечественной войны, инвалидами Великой Отечественной войны, вдовами военнослужащих, погибших в период войны с Финляндией, Великой Отечественной войны, войны с Японией, вдовами умерших инвалидов Великой Отечественной войны и бывшими узниками нацистских концлагерей, тюрем и гетто и других мест принудительного содержания",
	"Вычет из суммы помощи (в денежной и натуральной формах), а также стоимости подарков, полученных ветеранами Великой Отечественной войны, инвалидами Великой Отечественной войны, вдовами военнослужащих, погибших в период войны с Финляндией, Великой Отечественной войны, войны с Японией, вдовами умерших инвалидов Великой Отечественной войны и бывшими узниками нацистских концлагерей, тюрем и гетто и других мест принудительного содержания");	
	
	ОписатьКодВычетаНДФЛ("508","508", "508", "508", "-",
	"Вычет из суммы материальной помощи, при рождении (усыновлении, удочерении) ребенка",
	"Вычет из суммы единовременной материальной помощи, оказываемой работодателями работникам (родителям, усыновителям, опекунам) при рождении (усыновлении, удочерении) ребенка",
	"Вычет из суммы единовременной материальной помощи, оказываемой работодателями работникам (родителям, усыновителям, опекунам) при рождении (усыновлении, удочерении) ребенка",
	"не предоставлялся");
	
	
	ОписатьКодВычетаНДФЛ("601","601", "601", "601", "601",
	"Сумма, уменьшающая налоговую базу по доходам в виде дивидендов",
	"Сумма, уменьшающая налоговую базу по доходам в виде дивидендов",
	"Сумма, уменьшающая налоговую базу по доходам, полученным в виде дивидендов",
	"Сумма, уменьшающая налоговую базу по доходам, полученным в виде дивидендов");
	
	ОписатьКодВычетаНДФЛ("314","314", "-", "314", "314",
	"не предоставлялся",
	"не предоставлялся",
	"Сумма расходов при уступке прав требования по договору участия в долевом стр-ве",
	"Сумма расходов при уступке прав требования по договору участия в долевом стр-ве"); 
	
	ОписатьКодВычетаНДФЛ("315","315", "-", "315", "315",
	"не предоставлялся",
	"не предоставлялся",
	"Сумма фактически произведенных расходов на приобретение доли в уст. капитале",
	"Сумма фактически произведенных расходов на приобретение доли в уст. капитале"); 
	
	ОписатьКодВычетаНДФЛ("316","316", "316", "316", "316",
	"Сумма фактически произведенных расходов на приобретение доли в уст. капитале",
	"Сумма фактически произведенных расходов на приобретение доли в уст. капитале",
	"Сумма фактически произведенных расходов на приобретение доли в уст. капитале",
	"Сумма фактически произведенных расходов на приобретение доли в уст. капитале");
	
	ОписатьКодВычетаНДФЛ("317","317", "317", "317", "317",
	"Суммы, полученные от продажи ценных бумаг, находившихся в собств. 3 года и более",
	"Суммы, полученные от продажи ценных бумаг, находившихся в собств. 3 года и более",
	"Суммы, полученные от продажи ценных бумаг, находившихся в собств. 3 года и более",
	"Суммы, полученные от продажи ценных бумаг, находившихся в собств. 3 года и более");
	
	ОписатьКодВычетаНДФЛ("620","620", "620", "620", "620",
	"Иные суммы, уменьшающие налоговую базу в соответствии с положениями главы 23 НК РФ",
	"Иные суммы, уменьшающие налоговую базу в соответствии с положениями главы 23 Налогового кодекса Российской Федерации",
	"Иные суммы, уменьшающие налоговую базу",
	"Иные суммы, уменьшающие налоговую базу");
	

	
КонецПроцедуры //ОбработатьСтандартныеВычеты2009


//******************************************************************************
// ПолучитьЦену(Тип, Номенклатура)
//
Функция ПолучитьЦену(Тип, Номенклатура)
	
	Цена = 0;
	
	ПорядокХраненияОтпускнойЦены = Номенклатура.ПорядокХраненияОтпускнойЦены;
	Если ПорядокХраненияОтпускнойЦены = 0 Тогда
	    ПорядокХраненияОтпускнойЦены = 1;
	КонецЕсли;
	
	
	Если ПорядокХраненияОтпускнойЦены = Тип Тогда
	    Цена = Номенклатура.Цена;
		
	Иначе
	    
		СтавкаНДС = Номенклатура.СтавкаНДС.Получить(ТекущаяДата());
		Если ПустоеЗначение(СтавкаНДС) = 0 Тогда
		    СтНДС = СтавкаНДС.Ставка;
		Иначе
			СтНДС = 0;
		КонецЕсли;
		                                                           
		СтавкаНП = Номенклатура.СтавкаНП.Получить(ТекущаяДата());
		Если ПустоеЗначение(СтавкаНП) = 0 Тогда
		    СтНП = СтавкаНП.Ставка;
		Иначе
			СтНП = 0;
		КонецЕсли;
	
		Если ПорядокХраненияОтпускнойЦены = 1 Тогда //Без налогов
			Если (СтНДС = 20) или (СтНДС = 18) или (СтНДС = 10) или (СтНДС = 0) Тогда //установленные налоговые ставки
				ЦенаБезНП = Окр(Номенклатура.Цена*(100+СтНДС)/100, 2, 1);
				ЦенаВключаяНП = Окр(ЦенаБезНП*(100+СтНП)/100, 2, 1);
				
			Иначе //расчетные ставки
				ЦенаБезНП = Окр(Номенклатура.Цена*100/(100-СтНДС), 2, 1);
				ЦенаВключаяНП = Окр(ЦенаБезНП*(100+СтНП)/100, 2, 1);
			КонецЕсли;
	
		ИначеЕсли ПорядокХраненияОтпускнойЦены = 2 Тогда //Без НП
			Если (СтНДС = 20) или (СтНДС = 18) или (СтНДС = 10) или (СтНДС = 0) Тогда //установленные налоговые ставки
				ЦенаБезНалогов = Окр(Номенклатура.Цена*100/(100+СтНДС), 2, 1);
				ЦенаВключаяНП = Окр(Номенклатура.Цена*(100+СтНП)/100, 2, 1);
				
			Иначе //расчетные ставки
				ЦенаБезНалогов = Окр(Номенклатура.Цена*(100-СтНДС)/100, 2, 1);
				ЦенаВключаяНП = Окр(Номенклатура.Цена*(100+СтНП)/100, 2, 1);
			КонецЕсли;
	
		ИначеЕсли ПорядокХраненияОтпускнойЦены = 3 Тогда //Включая НП
			Если (СтНДС = 20) или (СтНДС = 18) или (СтНДС = 10) или (СтНДС = 0) Тогда //установленные налоговые ставки
				ЦенаБезНП = Окр(Номенклатура.Цена*100/(100+СтНП),2,1);
		    	ЦенаБезНалогов = Окр(ЦенаБезНП*100/(100+СтНДС),2,1);
				
			Иначе //расчетные ставки
				ЦенаБезНП = Окр(Номенклатура.Цена*100/(100+СтНП),2,1);
		    	ЦенаБезНалогов = Окр(ЦенаБезНП*(100-СтНДС)/100, 2, 1);
			КонецЕсли;
		КонецЕсли;
		
		Если Тип = 1 Тогда //  без налогов
		    Цена = ЦенаБезНалогов;
			
		ИначеЕсли Тип = 2 Тогда // без НП
			Цена = ЦенаБезНП;
			
		ИначеЕсли Тип = 3 Тогда // включая НП
			Цена = ЦенаВключаяНП;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Цена;
	
КонецФункции // ПолучитьЦену()

//******************************************************************************
// НайтиВидНачисления(СпрВидыНачислений, ТаблицаДоходов, КодВидаДохода)
//
Функция НайтиВидНачисления(СпрВидыНачислений, ТаблицаДоходов, КодВидаДохода = "")
	
	Если ПустоеЗначение(КодВидаДохода) = 1 Тогда
	    КодВидаДохода = ?(ТаблицаДоходов.НДФЛ = 0, "0000", "2000");
	КонецЕсли;
	
	ЕСН = ?(ТаблицаДоходов.ЕСН = 0, 0, 1);
	ФСС = ?(ТаблицаДоходов.ФСС = 0, 0, 1);
	ПФР = ?(ТаблицаДоходов.ПФР = 0, 0, 1);
	ФСС_НС = ?(ТаблицаДоходов.ФСС_НС = 0, 0, 1);
	СО = ?(ТаблицаДоходов.СО = 0, 0, 1);
	
	СпрВидыНачислений.ВыбратьЭлементы();
	Пока СпрВидыНачислений.ПолучитьЭлемент() = 1 Цикл
		Если (СпрВидыНачислений.Код = КодВидаДохода) и
			 (СпрВидыНачислений.ЕСН_ФБ = ЕСН) и
			 (СпрВидыНачислений.ЕСН_ФСС = ФСС) и
			 (СпрВидыНачислений.ПФР = ПФР) и
			 (СпрВидыНачислений.ФСС_НС = ФСС_НС) и
			 (СпрВидыНачислений.СО = СО) Тогда
	        
	    	Возврат СпрВидыНачислений.ТекущийЭлемент();
		КонецЕсли;
	КонецЦикла;
	
	НаименованиеРодителя = "Преобразование итогов по счетам КН и НБ";
	Если СпрВидыНачислений.НайтиПоНаименованию(НаименованиеРодителя, 0, 0) = 0 Тогда
	    СпрВидыНачислений.НоваяГруппа();
		СпрВидыНачислений.Код = "";
		СпрВидыНачислений.Наименование = НаименованиеРодителя;
		СпрВидыНачислений.Записать();
	КонецЕсли;
	
	Родитель = СпрВидыНачислений.ТекущийЭлемент();
	СпрВидыНачислений.ИспользоватьРодителя(Родитель);
	СпрВидыНачислений.Новый();
	Наименование = "";
	
	ВидыДоходов = СоздатьОбъект("Справочник.ВидыДоходов");
	Если (ВидыДоходов.НайтиПоКоду(КодВидаДохода) = 1) и (ПустоеЗначение(КодВидаДохода) = 0) Тогда
		СпрВидыНачислений.ВидДохода = ВидыДоходов.ТекущийЭлемент();
		СпрВидыНачислений.Код = КодВидаДохода;
		Наименование = ?(КодВидаДохода = "0000", "", "НДФЛ");
	КонецЕсли;
	
	СпрВидыНачислений.ЕСН_ФБ = ЕСН;
	глДобавитьРеквизит(Наименование, ?(Наименование = "", "", ", "), ?(ЕСН = 1, "ЕСН_ФБ", ""));
	
	СпрВидыНачислений.ЕСН_ФСС = ФСС;
	глДобавитьРеквизит(Наименование, ?(Наименование = "", "", ", "), ?(ФСС = 1, "ЕСН_ФСС", ""));
	
	СпрВидыНачислений.ЕСН_ФОМС = ЕСН;
	глДобавитьРеквизит(Наименование, ?(Наименование = "", "", ", "), ?(ЕСН = 1, "ЕСН_ФОМС", ""));
	
	СпрВидыНачислений.ПФР = ПФР;
	глДобавитьРеквизит(Наименование, ?(Наименование = "", "", ", "), ?(ПФР = 1, "ПФР", ""));
	
	СпрВидыНачислений.ФСС_НС = ФСС_НС;
	глДобавитьРеквизит(Наименование, ?(Наименование = "", "", ", "), ?(ФСС_НС = 1, "ФСС_НС", ""));
	
	СпрВидыНачислений.СО = СО;
	глДобавитьРеквизит(Наименование, ?(Наименование = "", "", ", "), ?(СО = 1, "СО", ""));
	
	СпрВидыНачислений.Наименование = ?(Наименование = "", "Доход, не облагаемый налогами", "Доход, облагаемый: " + Наименование);
	СпрВидыНачислений.Записать();
	
	Возврат СпрВидыНачислений.ТекущийЭлемент();
	
КонецФункции // НайтиВидНачисления()

//******************************************************************************
//	УстановитьВидВычета(Код,Наименование)
//
//	Параметры:
//		Код			- код вида вычета
//		Наименование- наименвоание вида вычета
//
//	Возвращаемое значение:
//		Текущий (найденный или созданный) вид вычета
//
//	Описание:
//		Если существует старый вид вычета с таким же кодом,
//		то его реквизиты изменяются, если не найден, то создается новый.
//
Функция УстановитьВидВычета(Код,Наименование="")
	
	Если СпрВидыВычетов.НайтиПоКоду(Код,0)=0 Тогда
		СпрВидыВычетов.Новый();
		СпрВидыВычетов.Код = Код;
	КонецЕсли;
	Если (СпрВидыВычетов.Наименование<>Наименование)и(ПустоеЗначение(Наименование)=0) Тогда
		СпрВидыВычетов.Наименование = Наименование;
		СпрВидыВычетов.Записать();
	КонецЕсли;
	Возврат СпрВидыВычетов.ТекущийЭлемент()
	
КонецФункции	// УстановитьВидВычета

//******************************************************************************
//	УстановитьВидДохода(Код,Наименование,КодВычета, Обновить)
//
//	Параметры:
//		Код			- код вида дохода
//		Наименование- наименование вида дохода
//		КодВычета	- код вычета вида дохода
//
//	Описание:
//		Если существует старый вид дохода с таким же кодом,
//		то его реквизиты изменяются, если не найден, то создается новый.
//
Процедура УстановитьВидДохода(Код,Наименование,КодВычета="",Обновить=0)
	
	Если СпрВидыДоходов.НайтиПоКоду(Код,0)=0 Тогда
		Если Обновить = 0 Тогда
		    СпрВидыДоходов.Новый();
			СпрВидыДоходов.Код = Код;
			
		Иначе
			Возврат;
		КонецЕсли;
	КонецЕсли;
	Если (СпрВидыДоходов.Наименование <> Наименование) или (СпрВидыДоходов.ВидВычета.Код <> КодВычета) Тогда
		СпрВидыДоходов.Наименование = Наименование;
		Если ПустоеЗначение(КодВычета) = 0 Тогда
			СпрВидыДоходов.ВидВычета = УстановитьВидВычета(КодВычета);
		КонецЕсли;
		СпрВидыДоходов.Записать();
	КонецЕсли;
	
КонецПроцедуры	// УстановитьВидДохода 

//******************************************************************************
//	УстановитьВидДоходаНДФЛ(Код,Наименование,КодВычета, ПолноеНаименование)
//
//	Параметры:
//		Код			- код вида дохода
//		Наименование- наименование вида дохода
//		КодВычета	- код вычета вида дохода
//		ПолноеНаименование - наименование по классификатору
//
//	Описание:
//		Если существует старый вид дохода с таким же кодом,
//		то его реквизиты изменяются, если не найден, то создается новый.
//
Процедура УстановитьВидДоходаНДФЛ(Код,Наименование,КодВычета="",ПолноеНаименование = "")
	
	Если СпрВидыДоходов.НайтиПоКоду(Код,0)=0 Тогда
		СпрВидыДоходов.Новый();
		СпрВидыДоходов.Код = Код;
	КонецЕсли;
	
	СпрВидыДоходов.Наименование 	  = Наименование;
	СпрВидыДоходов.ПолноеНаименование = ПолноеНаименование;
	Если ПустоеЗначение(КодВычета) = 0 Тогда
		СпрВидыДоходов.ВидВычета = УстановитьВидВычета(КодВычета);
	КонецЕсли;
	СпрВидыДоходов.Записать();
	

КонецПроцедуры	// УстановитьВидДоходаНДФЛ

//******************************************************************************
// ИтогиНаДатуРассчитаны()
//
// Параметры:
//  ДатаРасчета - Дата - дата, на которую необхоимо проверить рассчитанны ли бух. итоги.
//
// Возвращаемое значение:
//  1 - итоги рассчитаны,
//  0 - итоги не рассчитаны.
//
// Вызывается из формул элементов диалога:
//  Нет.
//
// Описание:
//  Проверка рассчитаны ли бухгалтерские итоги на заданную дату.
//
Функция ИтогиНаДатуРассчитаны(ДатаРасчета)
	
	Если КонецРассчитанногоПериодаБИ() < Дата(ДатаРасчета) Тогда
		Предупреждение("Обновление информационной базы не может быть завершено
					   |т.к. не расчитаны бухгалтерские итоги на "+ ДатаРасчета + ".
					   |Расчитайте итоги. После этого нужно выйти из системы и 
					   |повторно войти. Обновление ИБ будет продолжено.
					   |Расчет итогов  выполняется в режиме
					   |""Операции - Управление бухгалтерскими итогами"".", 60);
	
		Возврат 0;

	КонецЕсли;
	
	Возврат 1;
	
КонецФункции // ИтогиНаДатуРассчитаны()

//******************************************************************************
// ПроверитьПоследнийМесяцНК(НК, СтрПоле, ПоследнийМесяц, ТипИмени)
//
// Параметры:
//  НК - СписокЗначений. Список полей налоговой карточки
//	СтрПоле	- Строка. Представление значения списка полей НК (без номера месяца).
//	ПоследнийМесяц	- Число. Номер последнего месяца НК, за который есть данные.
//  ТипИмени - Число. 1 - представление поля НК имеет вид "П000"; 
//                    0 - представление поля НК имеет вид "ОбщСВ", "НИ" и т.п.
//
// Описание:
//	Проверяет, есть ли в налоговой карточки значение с именем СтрПоле за указанный
// месяц. Если такое значение есть и очередной месяц больше текущего последнего 
// месяца, то последний месяц изменяется.
//
Процедура ПроверитьПоследнийМесяцНК(НК, СтрПоле, ПоследнийМесяц, ТипИмени = 0)
	
	Для Месяц = 1 по 12 Цикл
		Если ТипИмени = 0 Тогда
		    СтрМесяц = Формат(Месяц, "Ч(0)2");
			ТекПоле = НК.Получить(СтрПоле + СтрМесяц);
			
		Иначе
			ЧислНомерПоля = Число(Прав(СтрПоле, 3));
			ЧислНомерПоля = ЧислНомерПоля + Месяц - 1;
			ТекПоле = НК.Получить("П" + Строка(ЧислНомерПоля));
		КонецЕсли;
		
		Если ПустоеЗначение(ТекПоле) = 0 Тогда
			Если Месяц > ПоследнийМесяц Тогда
				ПоследнийМесяц = Месяц;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры // ПроверитьПоследнийМесяцНК()

//******************************************************************************
//	УстановитьДокументУдЛичность(КодНДФЛ,КодСЗВ,Наименование)
//
//	Параметры:
//		КодНДФЛ			- код НДФЛ документа
//		КодСЗВ			- код СЗВ документа
//		Наименование	- наименование документа
//
//	Описание:
//		Добавляет новый элемент в справочник Документы
//
Процедура УстановитьДокументУдЛичность(СпрДокументы, КодНДФЛ,КодСЗВ,Наименование)
	
	Если СпрДокументы.НайтиПоНаименованию(Наименование)=0 Тогда
		СпрДокументы.Новый();
		СпрДокументы.КодНДФЛ		= КодНДФЛ;
		СпрДокументы.КодСЗВ			= КодСЗВ;
		СпрДокументы.Наименование	= Наименование;
		СпрДокументы.Записать();
	КонецЕсли;
	
КонецПроцедуры	// УстановитьДокументУдЛичность

//*****************************************************************************
// Процедура ПересчетКолонки(КолПр, КолСф, МесПр)
//
Процедура ПересчетКолонки(Итоги, КолПр, КолСф, МесПр)
	
	НачМесяц = 1;
	КонМесяц = 1;
	ВведеныДанные = 0;
	Для а = 1 по 12 Цикл
		Если (Итоги.Получить(МесПр+Формат(а,"Ч(0)2")+КолСф) = 0) и (ВведеныДанные = 0) Тогда
			НачМесяц = НачМесяц + 1;
		Иначе
			ВведеныДанные = 1;
			КонМесяц = а;
		КонецЕсли;
	КонецЦикла;
			
	ИтогоЗаГод = 0;		
	Для а = 1 по 12 Цикл
		Если (а < НачМесяц) или (а > КонМесяц) Тогда
			Итоги.Установить(КолПр+Формат(а,"Ч(0)2")+КолСф, 0);
		Иначе
			Итоги.Установить(КолПр+Формат(а,"Ч(0)2")+КолСф,	ИтогоЗаГод + Итоги.Получить(МесПр+Формат(а,"Ч(0)2")+КолСф));
			ИтогоЗаГод = Итоги.Получить(КолПр+Формат(а,"Ч(0)2")+КолСф);
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры // ПересчетКолонки()

//******************************************************************************
// СоздатьДокументыЗаПериод(ДокВид)
//
Процедура СоздатьДокументыЗаПериод(ДокВид, ИмяДатыОперации, ИмяОснования)
	
	Контрагент = СоздатьОбъект("Справочник.Контрагенты");
	Договор = СоздатьОбъект("Справочник.Договоры");
	Док = СоздатьОбъект("Документ." + ДокВид);
	Т = СоздатьОбъект("ТаблицаЗначений");
	Для а = 1 по Метаданные.Документ(ДокВид).РеквизитТабличнойЧасти() Цикл
		ИмяРеквизита = Метаданные.Документ(ДокВид).РеквизитТабличнойЧасти(а);
		Т.НоваяКолонка(ИмяРеквизита.Идентификатор);
	КонецЦикла;

	Док.ВыбратьДокументы('01.01.2002',);
	Пока Док.ПолучитьДокумент() = 1 Цикл
		Если Док.ПометкаУдаления() = 1 Тогда
		    Продолжить;
		КонецЕсли;
	    Док.ВыбратьСтроки();
		Пока Док.ПолучитьСтроку() = 1 Цикл
		    Т.НоваяСтрока();
			Для а = 1 по Т.КоличествоКолонок() Цикл
				ЗначениеРеквизита = Док.ПолучитьАтрибут(Т.ПолучитьПараметрыКолонки(а));
				Т.УстановитьЗначение(Т.НомерСтроки, а, ЗначениеРеквизита);
			КонецЦикла;
			Основание = СокрЛП(Т.ПолучитьЗначение(Т.НомерСтроки, ИмяОснования));
			ПозицияЗапятой = Найти(Основание, ",");
			ПозицияЗапятой = ?(ПозицияЗапятой = 0, СтрДлина(Основание) + 1, ПозицияЗапятой);
			ИмяКонтрагента = СокрП(Лев(Основание, ПозицияЗапятой - 1));
			Основание = СокрЛ(Прав(Основание, СтрДлина(Основание) - ПозицияЗапятой));
			ПозицияЗапятой = Найти(Основание, ",");
			ПозицияЗапятой = ?(ПозицияЗапятой = 0, СтрДлина(Основание) + 1, ПозицияЗапятой);
			ИмяДоговора = СокрП(Лев(Основание, ПозицияЗапятой - 1));
			Если Контрагент.НайтиПоНаименованию(ИмяКонтрагента, 0) = 1 Тогда
			    Т.Контрагент = Контрагент.ТекущийЭлемент();
				Договор.ИспользоватьВладельца(Т.Контрагент);
				Если Договор.НайтиПоНаименованию(ИмяДоговора, 0) = 1 Тогда
			    	Т.Договор = Договор.ТекущийЭлемент();
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		Док.Удалить(0);
	КонецЦикла;
	
	ТекДата = Дата(0);
	Док = СоздатьОбъект("Документ." + ДокВид);
	Т.Сортировать(ИмяДатыОперации);
	Т.ВыбратьСтроки();
	Пока Т.ПолучитьСтроку() = 1 Цикл
		ДатаОперации = Т.ПолучитьЗначение(Т.НомерСтроки, ИмяДатыОперации);
		Если ДатаОперации > ТекДата Тогда
			Если Док.КоличествоСтрок() > 0 Тогда
				Док.Записать();
			КонецЕсли;
		    Док.Новый();
			Док.ДатаДок = ДатаОперации;
			Док.УстановитьНовыйНомер("");
			ТекДата = ДатаОперации;
		КонецЕсли;
		Док.НоваяСтрока();
	    Для а = 1 по Т.КоличествоКолонок() Цикл
			ИмяРеквизита = Т.ПолучитьПараметрыКолонки(а);
			ЗначениеРеквизита = Т.ПолучитьЗначение(Т.НомерСтроки, а);
			Док.УстановитьАтрибут(ИмяРеквизита, ЗначениеРеквизита);
		КонецЦикла;
	КонецЦикла;
	
	Если Док.КоличествоСтрок() > 0 Тогда
		Док.Записать();
	КонецЕсли;
	
КонецПроцедуры // СоздатьДокументыЗаПериод()

//******************************************************************************
// ПоискДобавленнойСтатьиЗатрат(ДобавленныеСтатьиЗатрат, Статья)
//
Процедура ПоискДобавленнойСтатьиЗатрат(ДобавленныеСтатьиЗатрат, Статья)

	НомСтроки = 0;
	Если ДобавленныеСтатьиЗатрат.НайтиЗначение(Статья, НомСтроки, "ЕСН") = 0 Тогда
		ДобавленныеСтатьиЗатрат.НоваяСтрока();
		Если (Статья.Вид() <> ВидыСубконто.СтатьиЗатратНаПроизводство) и
			 (Статья.Вид() <> ВидыСубконто.СтатьиЗатратОбслуживающихПроизводств) и
			 (Статья.Вид() <> ВидыСубконто.СтатьиОбщепроизводственныхЗатрат) и
			 (Статья.Вид() <> ВидыСубконто.СтатьиОбщехозяйственныхЗатрат) и
			 (Статья.Вид() <> ВидыСубконто.СтатьиИздержекОбращения) и
			 (Статья.Вид() <> ВидыСубконто.СтатьиКоммерческихРасходов) и
			 (Статья.Вид() <> ВидыСубконто.СтатьиРасходовНаПродажу) Тогда
		    ДобавленныеСтатьиЗатрат.НалогиИСборы = ПолучитьПустоеЗначение("Справочник");
			ДобавленныеСтатьиЗатрат.ЕСН = ПолучитьПустоеЗначение("Справочник");
			
		ИначеЕсли Статья.Выбран() = 0 Тогда
			ДобавленныеСтатьиЗатрат.НалогиИСборы = ПолучитьПустоеЗначение("Справочник."+Статья.Вид());
			ДобавленныеСтатьиЗатрат.ЕСН = ПолучитьПустоеЗначение("Справочник."+Статья.Вид());
			
		Иначе
			СтатьиЗатрат = СоздатьОбъект("Справочник."+Статья.Вид());
			
			СтатьиЗатрат.НайтиЭлемент(Статья);
			СтатьиЗатрат.ВидРасходовДляНалоговогоУчета = Перечисление.ГруппыВидыРасходов.ЕСН;
			СтатьиЗатрат.Записать();
			
			НайденаСтатья = 0;
			СтатьиЗатрат.ВыбратьЭлементыПоРеквизиту("ВидРасходовДляНалоговогоУчета", Перечисление.ГруппыВидыРасходов.НалогиИСборы,, 0);
			Пока СтатьиЗатрат.ПолучитьЭлемент() = 1 Цикл
				Если СтатьиЗатрат.Наименование = Статья.Наименование Тогда
				    НайденаСтатья = 1;
					Прервать;
				КонецЕсли;    
			КонецЦикла;
			
			Если НайденаСтатья = 0 Тогда
				СтатьиЗатрат.Новый();
				СтатьиЗатрат.Наименование = Статья.Наименование;
				СтатьиЗатрат.ВидРасходовДляНалоговогоУчета = Перечисление.ГруппыВидыРасходов.НалогиИСборы;
				СтатьиЗатрат.Записать();
				Если СтатьиЗатрат.Вид() = "СтатьиЗатратНаПроизводство" Тогда
					Флаг = Статья.СтатьяВходитВБазуРаспределенияКосвенныхЗатрат.Получить('01.01.2002');
					СтатьиЗатрат.СтатьяВходитВБазуРаспределенияКосвенныхЗатрат.Установить('01.01.2002', Флаг);
				
				ИначеЕсли СтатьиЗатрат.Вид() = "СтатьиИздержекОбращения" Тогда
					Флаг = Статья.СписыватьИздержкиПропорциональноОстаткуТоваров.Получить('01.01.2002');
					СтатьиЗатрат.СписыватьИздержкиПропорциональноОстаткуТоваров.Установить('01.01.2002', Флаг);
				КонецЕсли;
			КонецЕсли;
			ДобавленныеСтатьиЗатрат.НалогиИСборы = СтатьиЗатрат.ТекущийЭлемент();
			ДобавленныеСтатьиЗатрат.ЕСН = Статья;
		КонецЕсли;
		
	Иначе
		ДобавленныеСтатьиЗатрат.ПолучитьСтрокуПоНомеру(НомСтроки);
	КонецЕсли;
	
КонецПроцедуры // ПоискДобавленнойСтатьиЗатрат()

//******************************************************************************
// ЗаписатьПолноеНаименование(Счет, ПолноеНаименование)
//
Процедура ЗаписатьПолноеНаименование(КодСчета, ПолноеНаименование)

	Если Сч.НайтиПоКоду(КодСчета) = 1 Тогда
		Сч.ПолнНаименование = ПолноеНаименование;
		Сч.Записать();
	КонецЕсли;
		
КонецПроцедуры // ЗаписатьПолноеНаименование()

//******************************************************************************
// ПреобразованиеСчета(ИсхСч)
//
Функция ПреобразованиеСчета(ИсхСч)
	
	НомСтр = 0;
	Если ИсхСч = Сч76_Н Тогда
	    Если Сч.НайтиПоКоду("76.Н.5") = 0 Тогда
			Сч.Новый();
			Сч.Код = "76.Н.5";
			Сч.Наименование = "Прочие отложенные налоги";
			Сч.ПолнНаименование = "Расчеты по прочим налогам, отложенным для уплаты в бюджет";
			Сч.Записать();
		КонецЕсли;
		Возврат Сч.ТекущийСчет();
		
	ИначеЕсли ТаблицаСоответствияСчетов.НайтиЗначение(ИсхСч, НомСтр, "ИсходныйСчет") = 1 Тогда
		Возврат ТаблицаСоответствияСчетов.ПолучитьЗначение(НомСтр, "ЗаменяющийСчет");
		
	Иначе
		Возврат ИсхСч;
	КонецЕсли;
	
КонецФункции // ПреобразованиеСчета()

//******************************************************************************
// ТипРеквизитаСоответствует(Реквизит, ТипОбъекта, ИдентификаторОбъекта)
//
// Параметры:
//  Реквизит - значение, тип которого необходимо проверить на соответствие.
//  ТипОбъекта - тип объекта (справочник, перечисление и т.д.)
//  ИдентификаторОбъекта - идентификатор объекта
//
// Возвращаемое значение:
//  1 - если значение реквизита принадлежит указанному типу;
//  0 - иначе
//
Функция ТипРеквизитаСоответствует(Реквизит, ТипОбъекта, ИдентификаторОбъекта)
	                 
	ТипСоответствует = 0;
	
	Если ТипЗначенияСтр(Реквизит) = ТипОбъекта Тогда
	    Если Реквизит.Вид() = ИдентификаторОбъекта Тогда
	        ТипСоответствует = 1;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ТипСоответствует;
	
КонецФункции // ТипРеквизитаСоответствует()

//******************************************************************************
// ПодставитьВнеоборотныйАктив(Объект, ОВА, ПрефиксКодаЭлемента)
//
Функция ПодставитьВнеоборотныйАктив(Объект, ОВА, ПрефиксКодаЭлемента)
    
	Если ЗаменаКодовВнеобортныхАктивов <> 1 Тогда
		Возврат Объект;
		
	Иначе
		Если ПустоеЗначение(Объект) = 0 Тогда
			КодДляПоиска = Объект.Код;
			Если Лев(КодДляПоиска, 2) <> ПрефиксКодаЭлемента Тогда
				КодДляПоиска = ПрефиксКодаЭлемента+Объект.Код;
			КонецЕсли;
			
			Если ОВА.НайтиПоКоду(КодДляПоиска) = 0 Тогда
				ОВА.Новый();
				ОВА.Код = ПрефиксКодаЭлемента+Объект.Код;
				ОВА.Наименование = Объект.Наименование;
				ОВА.Записать();
			КонецЕсли;
			Возврат ОВА.ТекущийЭлемент();
			
		Иначе
			Возврат ПолучитьПустоеЗначение("Справочник.ОбъектыСтроительства");
		КонецЕсли;
	КонецЕсли;
	
КонецФункции // ПодставитьВнеоборотныйАктив()

//******************************************************************************
// ОбновитьПериодическийРеквизит_Счет(Спр)
//
Процедура ОбновитьПериодическийРеквизит_Счет(Спр)
	
	ОВА = СоздатьОбъект("Справочник.ОбъектыСтроительства");
	Спр.ВыбратьЭлементы();
	Пока Спр.ПолучитьЭлемент() = 1 Цикл
		Если Спр.ЭтоГруппа() = 1 Тогда
			Продолжить;
		КонецЕсли;
	
		ИсторияСчета = СоздатьОбъект("Периодический");
		ИсторияСчета.ИспользоватьОбъект("СчетЗатрат", Спр.ТекущийЭлемент());
		ИсторияСчета.ВыбратьЗначения();
		Запись = 0;
		Пока ИсторияСчета.ПолучитьЗначение() = 1 Цикл
			Если ИсторияСчета.ТекущийДокумент().Выбран() = 1 Тогда
			ИначеЕсли (ИсторияСчета.Значение = СчетПоКоду("08.1")) или
 					  (ИсторияСчета.Значение = СчетПоКоду("08.2")) или
					  (ИсторияСчета.Значение = СчетПоКоду("08.4")) или
					  (ИсторияСчета.Значение = СчетПоКоду("08.5")) Тогда
				Запись = 1;
				
			ИначеЕсли ИсторияСчета.Значение = СчетПоКоду("44.1") Тогда
				ИсторияСчета.Значение = СчетПоКоду("44.1.1");
				ИсторияСчета.Записать();
				Запись = 1;
			КонецЕсли;
		КонецЦикла;
		
		Если Запись = 1 Тогда
			ИсторияСубконто = СоздатьОбъект("Периодический");
			Для а = 1 по 2 Цикл
				ИсторияСубконто.ИспользоватьОбъект("Субконто"+а, Спр.ТекущийЭлемент());
				ИсторияСубконто.ВыбратьЗначения();
				Пока ИсторияСубконто.ПолучитьЗначение() = 1 Цикл
					Если ИсторияСубконто.ТекущийДокумент().Выбран() = 1 Тогда
					    Продолжить;
					КонецЕсли;
					
					Счет = Спр.ПолучитьАтрибут("СчетЗатрат").Получить(ИсторияСубконто.ДатаЗнач);
					
					ТипСубконтоВИстории = ТипЗначенияСтр(ИсторияСубконто.Значение);
					Если ТипСубконтоВИстории = "Справочник" Тогда
					    ТипСубконтоВИстории = ТипСубконтоВИстории + "." + ИсторияСубконто.Значение.Вид();
					КонецЕсли;
					          
					Если ТипСубконтоВИстории = Счет.ВидСубконто(а) Тогда
					Иначе
						Если Счет = СчетПоКоду("44.1.1") Тогда
						Иначе
							ПрефиксКода = ?(Счет = СчетПоКоду("08.5"), "НА", "ОС");
							НовоеЗначение = ПодставитьВнеоборотныйАктив(ИсторияСубконто.Значение, ОВА, ПрефиксКода);
							ИсторияСубконто.НазначитьТип(Счет.ВидСубконто(а));
							ИсторияСубконто.Значение = НовоеЗначение;
						КонецЕсли;
						ИсторияСубконто.Записать();
					КонецЕсли;
				КонецЦикла;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры // ОбновитьПериодическийРеквизит_Счет()

//******************************************************************************
// ОбновитьРеквизит_Счет(Объект, ИмяРеквизитаСчет, ИмяСубконто1, ИмяСубконто2, ИмяСубконто3)
//
Функция ОбновитьРеквизит_Счет(Объект, ИмяРеквизитаСчет, ИмяСубконто1 = "Субконто1", ИмяСубконто2 = "Субконто2", ИмяСубконто3 = "Субконто3")
	
    Счет = Объект.ПолучитьАтрибут(ИмяРеквизитаСчет);
	
	Если (Счет = СчетПоКоду("08.1")) или
		 (Счет = СчетПоКоду("08.2")) или
		 (Счет = СчетПоКоду("08.4")) Тогда
		Если ТипРеквизитаСоответствует(Объект.ПолучитьАтрибут(ИмяСубконто1), "Справочник", "ОбъектыСтроительства") = 0  Тогда
			ОВА = СоздатьОбъект("Справочник.ОбъектыСтроительства");
		    Субконто1 = ПодставитьВнеоборотныйАктив(Объект.ПолучитьАтрибут(ИмяСубконто1), ОВА, "ОС");
			Объект.НазначитьТип(ИмяСубконто1, "Справочник.ОбъектыСтроительства");
			Объект.УстановитьАтрибут(ИмяСубконто1, Субконто1);
			Возврат 1;
		КонецЕсли;
		
			
	ИначеЕсли Счет = СчетПоКоду("08.5") Тогда
		Если ТипРеквизитаСоответствует(Объект.ПолучитьАтрибут(ИмяСубконто1), "Справочник", "ОбъектыСтроительства") = 0  Тогда
			ОВА = СоздатьОбъект("Справочник.ОбъектыСтроительства");
		    Субконто1 = ПодставитьВнеоборотныйАктив(Объект.ПолучитьАтрибут(ИмяСубконто1), ОВА, "НА");
			Объект.НазначитьТип(ИмяСубконто1, "Справочник.ОбъектыСтроительства");
			Объект.УстановитьАтрибут(ИмяСубконто1, Субконто1);
			Возврат 1;
		КонецЕсли;
			
	ИначеЕсли Счет = СчетПоКоду("10.7") Тогда
		Объект.НазначитьТип(ИмяСубконто2, "Справочник.Контрагенты");
		Объект.НазначитьТип(ИмяСубконто3, "Справочник.Договоры");
		Возврат 1;
	
	ИначеЕсли Счет = СчетПоКоду("14") Тогда
		Объект.УстановитьАтрибут(ИмяРеквизитаСчет, СчетПоКоду("14.1"));
		Возврат 1;
		
	ИначеЕсли (Счет = СчетПоКоду("44.1")) или (Счет = СчетПоКоду("44.1.1")) Тогда
		Объект.УстановитьАтрибут(ИмяРеквизитаСчет, СчетПоКоду("44.1.1"));
		Возврат 1;
		
	ИначеЕсли Счет = СчетПоКоду("55.2") Тогда
		ВозвратСтатус = 0;
		
		Если ТипРеквизитаСоответствует(Объект.ПолучитьАтрибут(ИмяСубконто2), "Справочник", "ДвиженияДенежныхСредств") = 0  Тогда
			Объект.НазначитьТип(ИмяСубконто2, "Справочник.ДвиженияДенежныхСредств");
			Объект.УстановитьАтрибут(ИмяСубконто2, Объект.ПолучитьАтрибут(ИмяСубконто1));
			ВозвратСтатус = 1;
		КонецЕсли;
		
		Если ТипРеквизитаСоответствует(Объект.ПолучитьАтрибут(ИмяСубконто1), "Справочник", "БанковскиеСчета") = 0  Тогда
			Объект.НазначитьТип(ИмяСубконто1, "Справочник.БанковскиеСчета");
			ВозвратСтатус = 1;
		КонецЕсли;
		
		Возврат ВозвратСтатус;
		
	ИначеЕсли Счет = СчетПоКоду("58.1") Тогда
		Объект.УстановитьАтрибут(ИмяРеквизитаСчет, СчетПоКоду("58.1.1"));
		Возврат 1;
	
	ИначеЕсли Счет.ПринадлежитГруппе(СчетПоКоду("62")) = 1 Тогда
		Если ТипРеквизитаСоответствует(Объект.ПолучитьАтрибут(ИмяСубконто3), "Перечисление", "ВидыРасчетовСПокупателями") = 1  Тогда
			Объект.НазначитьТип(ИмяСубконто3, "");
			Объект.УстановитьАтрибут(ИмяСубконто3, "");
			Возврат 1;
		КонецЕсли;
		
	ИначеЕсли (Счет.ПринадлежитГруппе(СчетПоКоду("68")) = 1) и (Счет.ЗаданВКонфигурации() = 1) Тогда
		Если Счет = СчетПоКоду("68.4.1") Тогда
			Если ТипРеквизитаСоответствует(Объект.ПолучитьАтрибут(ИмяСубконто2), "Перечисление", "Бюджеты") = 0  Тогда
				Объект.НазначитьТип(ИмяСубконто2, "Перечисление.Бюджеты");
				Объект.УстановитьАтрибут(ИмяСубконто2, Объект.ПолучитьАтрибут(ИмяСубконто1));
			КонецЕсли;
		КонецЕсли;
		Если Счет = СчетПоКоду("68.4.2") Тогда
		ИначеЕсли ТипРеквизитаСоответствует(Объект.ПолучитьАтрибут(ИмяСубконто1), "Перечисление", "ВидыПлатежейВБюджет") = 0  Тогда
			Объект.НазначитьТип(ИмяСубконто1, "Перечисление.ВидыПлатежейВБюджет");
			Объект.УстановитьАтрибут(ИмяСубконто1, Перечисление.ВидыПлатежейВБюджет.Налог);
		КонецЕсли;
		Возврат 1;
		
	ИначеЕсли Счет = СчетПоКоду("69.1") Тогда
		Если ТипРеквизитаСоответствует(Объект.ПолучитьАтрибут(ИмяСубконто1), "Перечисление", "ВидыПлатежейВФонды") = 0  Тогда
			Субконто1 = Объект.ПолучитьАтрибут(ИмяСубконто2);
			Субконто2 = Объект.ПолучитьАтрибут(ИмяСубконто1);
			Объект.НазначитьТип(ИмяСубконто1, "Перечисление.ВидыПлатежейВФонды");
			Объект.НазначитьТип(ИмяСубконто2, "Справочник.Сотрудники");
			Объект.УстановитьАтрибут(ИмяСубконто1, Субконто1);
			Объект.УстановитьАтрибут(ИмяСубконто2, Субконто2);
			Возврат 1;
		КонецЕсли;
	
	ИначеЕсли (Счет = СчетПоКоду("69.2")) или (Счет = СчетПоКоду("69.2.1")) Тогда
		Объект.УстановитьАтрибут(ИмяРеквизитаСчет, СчетПоКоду("69.2.1"));
		Если ТипРеквизитаСоответствует(Объект.ПолучитьАтрибут(ИмяСубконто2), "Справочник", "Сотрудники") = 0  Тогда
			Объект.НазначитьТип(ИмяСубконто2, "Справочник.Сотрудники");
			Объект.УстановитьАтрибут(ИмяСубконто2, Объект.ПолучитьАтрибут(ИмяСубконто1));
		    Объект.Субконто2 = Объект.Субконто1;
		КонецЕсли;
		Если ТипРеквизитаСоответствует(Объект.ПолучитьАтрибут(ИмяСубконто1), "Перечисление", "ВидыПлатежейВБюджет") = 0  Тогда
			Объект.НазначитьТип(ИмяСубконто1, "Перечисление.ВидыПлатежейВБюджет");
			Объект.УстановитьАтрибут(ИмяСубконто1, Перечисление.ВидыПлатежейВБюджет.Налог);
		КонецЕсли;
		Возврат 1
	
	ИначеЕсли Счет = СчетПоКоду("70") Тогда
		Если ТипРеквизитаСоответствует(Объект.ПолучитьАтрибут(ИмяСубконто2), "Справочник", "ВидыНачислений") = 0  Тогда
			Объект.НазначитьТип(ИмяСубконто2, "Справочник.ВидыНачислений");
			Возврат 1;
		КонецЕсли;
		
	ИначеЕсли (Счет = СчетПоКоду("76.1")) или (Счет = СчетПоКоду("76.1.1")) Тогда
		Объект.УстановитьАтрибут(ИмяРеквизитаСчет, СчетПоКоду("76.1.1"));
		Возврат 1;
		
	ИначеЕсли Счет = СчетПоКоду("76.Н.3") Тогда
		Если ТипРеквизитаСоответствует(Объект.ПолучитьАтрибут(ИмяСубконто3), "Перечисление", "ВидыРасчетовСПокупателями") = 1  Тогда
			Объект.НазначитьТип(ИмяСубконто3, "");
			Объект.УстановитьАтрибут(ИмяСубконто3, "");
			Возврат 1;
		КонецЕсли;
		
	ИначеЕсли (Счет = СчетПоКоду("90.1")) или (Счет = СчетПоКоду("90.1.1")) Тогда
		Объект.УстановитьАтрибут(ИмяРеквизитаСчет, СчетПоКоду("90.1.1"));
		Объект.НазначитьТип(ИмяСубконто2, "Справочник.СтавкиНДС");
		Объект.НазначитьТип(ИмяСубконто3, "Справочник.СтавкиНП");
		Возврат 1;
		
	ИначеЕсли Счет = СчетПоКоду("90.2") Тогда
		Объект.УстановитьАтрибут(ИмяРеквизитаСчет, СчетПоКоду("90.2.1"));
		Возврат 1;
		
	ИначеЕсли Счет = СчетПоКоду("90.3") Тогда
		Если ТипРеквизитаСоответствует(Объект.ПолучитьАтрибут(ИмяСубконто2), "Справочник", "СтавкиНДС") = 0  Тогда
			Объект.НазначитьТип(ИмяСубконто2, "Справочник.СтавкиНДС");
			Возврат 1;
		КонецЕсли;
		
	ИначеЕсли Счет = СчетПоКоду("90.6") Тогда
		Если ТипРеквизитаСоответствует(Объект.ПолучитьАтрибут(ИмяСубконто2), "Справочник", "СтавкиНП") = 0  Тогда
			Объект.НазначитьТип(ИмяСубконто2, "Справочник.СтавкиНП");
			Возврат 1;
		КонецЕсли;
		
	ИначеЕсли Счет = СчетПоКоду("90.7") Тогда
		Объект.УстановитьАтрибут(ИмяРеквизитаСчет, СчетПоКоду("90.7.1"));
		Возврат 1;

	ИначеЕсли Счет = СчетПоКоду("90.8") Тогда
		Объект.УстановитьАтрибут(ИмяРеквизитаСчет, СчетПоКоду("90.8.1"));
		Возврат 1;
		
	ИначеЕсли Счет = СчетПоКоду("Н02.04") Тогда
		Объект.УстановитьАтрибут(ИмяРеквизитаСчет, СчетПоКоду("Н02.04.1"));
		Возврат 1;
		
	ИначеЕсли Счет = СчетПоКоду("ВР") Тогда
		Объект.УстановитьАтрибут(ИмяРеквизитаСчет, СчетПоКоду("ВР.1"));
		Возврат 1;
	
	ИначеЕсли Счет = СчетПоКоду("П68.4") Тогда
		Объект.УстановитьАтрибут(ИмяРеквизитаСчет, СчетПоКоду("68.4.1"));
		Возврат 1;
		
	ИначеЕсли Счет = СчетПоКоду("П69.3") Тогда
		Если Объект.ПолучитьАтрибут(ИмяСубконто2) = Перечисление.ФондыОМС.Территориальный Тогда
			Объект.УстановитьАтрибут(ИмяРеквизитаСчет, СчетПоКоду("69.3.2"));
			
		Иначе
			Объект.УстановитьАтрибут(ИмяРеквизитаСчет, СчетПоКоду("69.3.1"));
		КонецЕсли;
		Объект.НазначитьТип(ИмяСубконто2, "Справочник.Сотрудники");
		Объект.УстановитьАтрибут(ИмяСубконто2, Объект.ПолучитьАтрибут(ИмяСубконто3));
		Объект.НазначитьТип(ИмяСубконто3, "");
		Объект.УстановитьАтрибут(ИмяСубконто3, "");
		Возврат 1;
		
	ИначеЕсли Счет = СчетПоКоду("П99") Тогда
		Объект.УстановитьАтрибут(ИмяРеквизитаСчет, СчетПоКоду("99.1"));
		Возврат 1;
		
	ИначеЕсли Счет = СчетПоКоду("П98.2") Тогда
		Объект.УстановитьАтрибут(ИмяРеквизитаСчет, СчетПоКоду("98.2.1"));
		Возврат 1;
		
	ИначеЕсли (Счет.ПринадлежитГруппе(СчетПоКоду("68")) = 1) и (Счет.ЗаданВКонфигурации() = 0) Тогда
		
		Субконто = Объект.ПолучитьАтрибут(ИмяСубконто1);
		Если ПустоеЗначение(Субконто) = 1 Тогда
			Если ТипРеквизитаСоответствует(Субконто, "Перечисление", "ВидыПлатежейВБюджет") = 1  Тогда
				Объект.УстановитьАтрибут(ИмяСубконто1, Перечисление.ВидыПлатежейВБюджет.Налог);
				Возврат 1;
			КонецЕсли;
		КонецЕсли;
		
		Субконто = Объект.ПолучитьАтрибут(ИмяСубконто2);
		Если ПустоеЗначение(Субконто) = 1 Тогда
			Если ТипРеквизитаСоответствует(Субконто, "Перечисление", "ВидыПлатежейВБюджет") = 1  Тогда
				Объект.УстановитьАтрибут(ИмяСубконто2, Перечисление.ВидыПлатежейВБюджет.Налог);
				Возврат 1;
			КонецЕсли;
		КонецЕсли;
		
		Субконто = Объект.ПолучитьАтрибут(ИмяСубконто3);
		Если ПустоеЗначение(Субконто) = 1 Тогда
			Если ТипРеквизитаСоответствует(Субконто, "Перечисление", "ВидыПлатежейВБюджет") = 1  Тогда
				Объект.УстановитьАтрибут(ИмяСубконто3, Перечисление.ВидыПлатежейВБюджет.Налог);
				Возврат 1;
			КонецЕсли;
		КонецЕсли;
		
	Иначе
		НомерСтроки = 0;
		Если ТаблицаСчетовП68.НайтиЗначение(Счет, НомерСтроки, "СчетИсточник") = 1 Тогда
			СчетЗамены = ТаблицаСчетовП68.ПолучитьЗначение(НомерСтроки, "СчетПриемник");
			Если ПустоеЗначение(СчетЗамены) = 0 Тогда
				Объект.УстановитьАтрибут(ИмяРеквизитаСчет, СчетЗамены);
				Возврат 1;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат 0;
	
КонецФункции // ОбновитьРеквизит_Счет()

//******************************************************************************
// ОбработкаСчетовВДокументах()
//
Процедура ОбработкаСчетовВДокументах()
	
	Состояние("Формирование списка документов");
	ТаблицаВидовДокументов = СоздатьОбъект("ТаблицаЗначений");
	ТаблицаВидовДокументов.НоваяКолонка("ВидДокумента");
	ТаблицаВидовДокументов.НоваяКолонка("ИмяРеквизитаСчет");
	ТаблицаВидовДокументов.НоваяКолонка("ИмяРеквизитаСубконто1");
	ТаблицаВидовДокументов.НоваяКолонка("ИмяРеквизитаСубконто2");
	ТаблицаВидовДокументов.НоваяКолонка("ИмяРеквизитаСубконто3");
	ТаблицаВидовДокументов.НоваяКолонка("РеквизитШапки");
	Для а = 1 по Метаданные.Документ() Цикл
		КоличествоРеквизитов = Метаданные.Документ(а).РеквизитШапки();
		Для б = 1 по КоличествоРеквизитов Цикл
			Если Метаданные.Документ(а).РеквизитШапки(б).Тип = "Счет" Тогда
				Если Найти(Метаданные.Документ(а).РеквизитШапки(Мин(б+1,КоличествоРеквизитов)), "Субконто") <> 0 Тогда
					ТаблицаВидовДокументов.НоваяСтрока();
					ТаблицаВидовДокументов.ВидДокумента = Метаданные.Документ(а).Идентификатор;
					ТаблицаВидовДокументов.ИмяРеквизитаСчет = Метаданные.Документ(а).РеквизитШапки(б).Идентификатор;
					ТаблицаВидовДокументов.ИмяРеквизитаСубконто1 = Метаданные.Документ(а).РеквизитШапки(б+1).Идентификатор;
					ТаблицаВидовДокументов.ИмяРеквизитаСубконто2 = Метаданные.Документ(а).РеквизитШапки(б+2).Идентификатор;
					ТаблицаВидовДокументов.ИмяРеквизитаСубконто3 = Метаданные.Документ(а).РеквизитШапки(б+3).Идентификатор;
					ТаблицаВидовДокументов.РеквизитШапки = 1;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		    
		КоличествоРеквизитов = Метаданные.Документ(а).РеквизитТабличнойЧасти();
		Для б = 1 по КоличествоРеквизитов Цикл
			Если Метаданные.Документ(а).РеквизитТабличнойЧасти(б).Тип = "Счет" Тогда
				Если Найти(Метаданные.Документ(а).РеквизитТабличнойЧасти(Мин(б+1,КоличествоРеквизитов)), "Субконто") <> 0 Тогда
					ТаблицаВидовДокументов.НоваяСтрока();
					ТаблицаВидовДокументов.ВидДокумента = Метаданные.Документ(а).Идентификатор;
					ТаблицаВидовДокументов.ИмяРеквизитаСчет      = Метаданные.Документ(а).РеквизитТабличнойЧасти(б).Идентификатор;
					ТаблицаВидовДокументов.ИмяРеквизитаСубконто1 = Метаданные.Документ(а).РеквизитТабличнойЧасти(б+1).Идентификатор;
					ТаблицаВидовДокументов.ИмяРеквизитаСубконто2 = Метаданные.Документ(а).РеквизитТабличнойЧасти(б+2).Идентификатор;
					ТаблицаВидовДокументов.ИмяРеквизитаСубконто3 = Метаданные.Документ(а).РеквизитТабличнойЧасти(б+3).Идентификатор;
					ТаблицаВидовДокументов.РеквизитШапки = 0;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Состояние("Обновление типов реквизитов");
	ТаблицаВидовДокументов.ВыбратьСтроки();
	Пока ТаблицаВидовДокументов.ПолучитьСтроку() = 1 Цикл
	    Док = СоздатьОбъект("Документ."+ТаблицаВидовДокументов.ВидДокумента);
		Док.ВыбратьДокументы(,);
		Пока Док.ПолучитьДокумент() = 1 Цикл
			Обновить = 0;
			Если ТаблицаВидовДокументов.РеквизитШапки = 1 Тогда
			    Обновить = ОбновитьРеквизит_Счет(Док,
												 ТаблицаВидовДокументов.ИмяРеквизитаСчет,
												 ТаблицаВидовДокументов.ИмяРеквизитаСубконто1,
												 ТаблицаВидовДокументов.ИмяРеквизитаСубконто2,
												 ТаблицаВидовДокументов.ИмяРеквизитаСубконто3);
				
			Иначе
				Док.ВыбратьСтроки();
				Пока Док.ПолучитьСтроку() = 1 Цикл
				    Обновить = Обновить + ОбновитьРеквизит_Счет(Док,
															    ТаблицаВидовДокументов.ИмяРеквизитаСчет,
															    ТаблицаВидовДокументов.ИмяРеквизитаСубконто1,
															    ТаблицаВидовДокументов.ИмяРеквизитаСубконто2,
															    ТаблицаВидовДокументов.ИмяРеквизитаСубконто3);
				КонецЦикла;
			КонецЕсли;
			Если Обновить > 0 Тогда
			    Док.Записать();
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	ОбработкаСчетовВДокументахВыполнена = 1;
	
КонецПроцедуры // ОбработкаСчетовВДокументах()


//******************************************************************************
// ОбработкаСчетовВСправочниках()
//
// Параметры:
//  Нет.
//
// Вызывается из формул элементов диалога:
//  Нет.
//
// Описание:
//  Здесь описывается процедура.
//
Процедура ОбработкаСчетовВСправочниках()
	
	ТаблицаСправочников = СоздатьОбъект("ТаблицаЗначений");
	ТаблицаСправочников.НоваяКолонка("ВидСправочника");
	ТаблицаСправочников.НоваяКолонка("ИмяРеквизита");
	ТаблицаСправочников.НоваяКолонка("Периодический");
	Для а = 1 по Метаданные.Справочник() Цикл
		Для б = 1 по Метаданные.Справочник(а).Реквизит() Цикл
			Если (Метаданные.Справочник(а).Реквизит(б).Тип = "Счет")
			 или (Метаданные.Справочник(а).Реквизит(б).Тип = "Неопределенный") Тогда
				ТаблицаСправочников.НоваяСтрока();
				ТаблицаСправочников.ВидСправочника = Метаданные.Справочник(а).Идентификатор;
				ТаблицаСправочников.ИмяРеквизита = Метаданные.Справочник(а).Реквизит(б).Идентификатор;
				ТаблицаСправочников.Периодический = Метаданные.Справочник(а).Реквизит(б).Периодический;

			КонецЕсли;
		КонецЦикла;
		
	КонецЦикла;
	
	ТаблицаСправочников.ВыбратьСтроки();
	Пока ТаблицаСправочников.ПолучитьСтроку() = 1 Цикл
	    Спр = СоздатьОбъект("Справочник."+ТаблицаСправочников.ВидСправочника);
		Спр.ВыбратьЭлементы();
		Пока Спр.ПолучитьЭлемент() = 1 Цикл
			Если Спр.ЭтоГруппа() = 0 Тогда
				Обновить = 0;
				Если ТаблицаСправочников.Периодический = 0 Тогда
					Если Спр.ПолучитьАтрибут(ТаблицаСправочников.ИмяРеквизита) = СчетПоКоду("04") Тогда
						Обновить = 1;
						Спр.УстановитьАтрибут(ТаблицаСправочников.ИмяРеквизита, СчетПоКоду("04.1"));
					    
					КонецЕсли;
					
				Иначе
                    // если периодический реквизит
					ЗначенияСчета = СоздатьОбъект("Периодический");
					ЗначенияСчета.ИспользоватьОбъект(ТаблицаСправочников.ИмяРеквизита, Спр);
                                
					ЗначенияСчета.ВыбратьЗначения();
					Пока ЗначенияСчета.ПолучитьЗначение() = 1 Цикл
						Если ПустоеЗначение(ЗначенияСчета.ТекущийДокумент()) = 0 Тогда
							Продолжить;
						КонецЕсли;

						Если ЗначенияСчета.Значение = СчетПоКоду("04") Тогда
							ЗначенияСчета.Значение = СчетПоКоду("04.1");	
							ЗначенияСчета.Записать();

						КонецЕсли;

					КонецЦикла;

				КонецЕсли;

				Если Обновить > 0 Тогда
				    Спр.Записать();
				КонецЕсли;

			КонецЕсли;

		КонецЦикла;

	КонецЦикла;
		
	ОбработкаСчетовВСправочникахВыполнена = 1;

	
КонецПроцедуры // ОбработкаСчетовВСправочниках()

//******************************************************************************
// ОбработатьПрочиеДоходыРасходы(ТипОбъекта)
//
// Параметры:
//  ТипОбъекта - Строка. Тип и вид документа, разделенные точкой.
//
// Описание:
//  Находит элементы справочника "Прочие доходы и расходы", задействованные
// в качестве значений реквизитов документов, указанного вида. В найденных
// элементах переопределяет вид прочих доходов и расходов.
//
Процедура ОбработатьПрочиеДоходыРасходы(ТипОбъекта)
	
	Док = СоздатьОбъект(ТипОбъекта);
	Спр = СоздатьОбъект("Справочник.ПрочиеДоходыИРасходы");
	Док.ВыбратьДокументы(,);
	Пока Док.ПолучитьДокумент() = 1 Цикл
	    Если Док.СтатьяПрочихДоходовИРасходов.Выбран() = 1 Тогда
	        Спр.НайтиЭлемент(Док.СтатьяПрочихДоходовИРасходов);
			Спр.ВидПрочихДоходовИРасходов = 
				Перечисление.ВидыПрочихДоходовИРасходов.ВыбытиеАктивов;
			Спр.Записать();
	    КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры // ОбработатьПрочиеДоходыРасходы()

//******************************************************************************
// НоваяКорректнаяПроводка(Дт, Кт, Комментарий)
//
Процедура НоваяКорректнаяПроводка(Дт, Кт, Комментарий)
	
	СчетДт = СчетПоКоду(Дт);
	СчетКт = СчетПоКоду(Кт);
	Если (СчетДт.Выбран() = 1) и (СчетКт.Выбран() = 1) Тогда
		Новая = 1;
		КоррПров = СоздатьОбъект("КорректныеПроводки");
		КоррПров.ВыбратьКорректныеПроводкиПоСчету(СчетДт);
		Пока КоррПров.ПолучитьКорректнуюПроводку() = 1 Цикл
			Если (КоррПров.СчетДт = СчетДт) и (КоррПров.СчетКт = СчетКт) Тогда
				Новая = 0;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		Если Новая = 1 Тогда
			КоррПров.Новая();
			КоррПров.СчетДт = СчетДт;
			КоррПров.СчетКт = СчетКт;
			КоррПров.Комментарий = Комментарий;
			КоррПров.Записать();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // НоваяКорректнаяПроводка()

//******************************************************************************
// НаименованиеВариантаРасчетаНалогов()
//
Функция НаименованиеВариантаРасчетаНалогов(ВариантРасчетаНалогов)
	
	Стр = "";
	Если ((ПустоеЗначение(ВариантРасчетаНалогов.СтавкаНДС) = 0) и 
		(ВариантРасчетаНалогов.СтавкаНДС.Ставка <> 0)) 
		или (ПустоеЗначение(ВариантРасчетаНалогов.СтавкаНДС) = 1) Тогда
		Стр = Стр + "НДС ";
		Если ВариантРасчетаНалогов.СуммаВключаетНДС = 1 Тогда
			Стр = Стр + "в сумме";
		Иначе
			Стр = Стр + "сверху";
		КонецЕсли;
		
		Если ВариантРасчетаНалогов.СтавкаНДС.Ставка <> 0 Тогда
			Стр = Стр + " " + глПредставлениеСтавки(ВариантРасчетаНалогов.СтавкаНДС);
		КонецЕсли;
	КонецЕсли;

	Если ((ПустоеЗначение(ВариантРасчетаНалогов.СтавкаНП) = 0) и 
		(ВариантРасчетаНалогов.СтавкаНП.Ставка <> 0)) 
		или (ПустоеЗначение(ВариантРасчетаНалогов.СтавкаНП) = 1) Тогда
		Стр = ?(Стр="", "", Стр+"; ") + "НП ";
		Если ВариантРасчетаНалогов.СуммаВключаетНП = 1 Тогда
			Стр = Стр + "в сумме";
		Иначе
			Стр = Стр + "сверху";
		КонецЕсли;
		
		Если ВариантРасчетаНалогов.СтавкаНП.Ставка <> 0 Тогда
			Стр = Стр + " " + глПредставлениеСтавки(ВариантРасчетаНалогов.СтавкаНП);
		КонецЕсли;
	КонецЕсли;
	
	Если ПустаяСтрока(Стр) = 1 Тогда
	    Стр = "Без налогов";
	КонецЕсли;
	
	Возврат Стр;
	
КонецФункции // НаименованиеВариантаРасчетаНалогов()

//******************************************************************************
// СформироватьВариантРасчетаНалогов(СуммаВключаетНДС, СуммаВключаетНП, СтавкаНДС, СтавкаНП)
//
Функция СформироватьВариантРасчетаНалогов(СуммаВключаетНДС, СуммаВключаетНП, СтавкаНДС, СтавкаНП)
		
	СпрВарНал = СоздатьОбъект("Справочник.ВариантыРасчетаНалогов");
	ЭлементНайден = 0;
	СпрВарНал.ВыбратьЭлементы();
	Пока СпрВарНал.ПолучитьЭлемент() = 1 Цикл
	    Если (СпрВарНал.СтавкаНП = СтавкаНП) и 
			 (СпрВарНал.СтавкаНДС = СтавкаНДС) и
			 (СпрВарНал.СуммаВключаетНДС = СуммаВключаетНДС) и
			 (СпрВарНал.СуммаВключаетНП = СуммаВключаетНП) Тогда
			ЭлементНайден = 1;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	Если ЭлементНайден = 0 Тогда
	    СпрВарНал.Новый();
		СпрВарНал.СтавкаНДС = СтавкаНДС;
		СпрВарНал.СтавкаНП = СтавкаНП;
		СпрВарНал.СуммаВключаетНДС = СуммаВключаетНДС;
		СпрВарНал.СуммаВключаетНП = СуммаВключаетНП;
		СпрВарНал.Наименование = НаименованиеВариантаРасчетаНалогов(СпрВарНал);
		СпрВарНал.Записать();
	КонецЕсли;
	
	Возврат СпрВарНал.ТекущийЭлемент();
		
КонецФункции // СформироватьВариантРасчетаНалогов

//******************************************************************************
// ПолучитьВидаРасходаПоСчету()
//
// Параметры:
//  Счет - счет - счет отнесения расходов для целей налогового учета;
//  Субконто1 - значение первого субконто;
//  Субконто2 - значение второго субконто;
//
// Возвращаемое значение:
//  Список значений - содержит знаечние вида расхода, элемента расхода и объекта.
//
// Вызывается из формул элементов диалога:
//  Нет.
//
// Описание:
//  Забалансовый налоговый счет отнесения расходов трансформируется в
//  вид расхода, элемент расхода и объект.
//
Функция ПолучитьВидаРасходаПоСчету(Счет, Субконто1, Субконто2)
	
	ВидРасхода = "";
	ЭлементРасхода = "";
	ОбъектУчета = "";
	                                                                  
	Если (Счет = "Н01.01") или (Счет = "Н01.02") Тогда
		Если ТипЗначенияСтр(Субконто1) = "Справочник" Тогда
			Если Субконто1.Вид() = "НематериальныеАктивы" Тогда
			ВидРасхода = Перечисление.ВидыРасходов.ПриобретениеНематериальныхАктивов;
			
			Иначе
				ВидРасхода  = Перечисление.ВидыРасходов.ПриобретениеОсновныхСредств;
			КонецЕсли;
			ОбъектУчета = Субконто1;    
		КонецЕсли;
		
	ИначеЕсли Счет = "Н01.03" Тогда
		ВидРасхода = Перечисление.ВидыРасходов.НИОКР;
	
	ИначеЕсли Счет = "Н01.04" Тогда
		ВидРасхода = Перечисление.ВидыРасходов.ОсвоениеПриродныхРесурсов;
	
	ИначеЕсли (Счет = "Н01.05") или (Счет = "Н01.06") Тогда
		ВидРасхода = Перечисление.ВидыРасходов.ПрямыеРасходы;
		ЭлементРасхода = Субконто1;
		ОбъектУчета = Субконто2;
	
	ИначеЕсли Счет = "Н01.07" Тогда
		ВидРасхода = Перечисление.ВидыРасходов.ТранспортныеРасходы;
		
	ИначеЕсли Счет = "Н02.01" Тогда
		ВидРасхода = Перечисление.ВидыРасходов.ПриобретениеМатериалов;
		ОбъектУчета = Субконто1;
		
	ИначеЕсли Счет = "Н02.02.1" Тогда
		ВидРасхода = Перечисление.ВидыРасходов.ПриобретениеТоваров;
		ОбъектУчета = Субконто1;
	
	ИначеЕсли Счет = "Н02.05" Тогда
		ВидРасхода = Перечисление.ВидыРасходов.ПриобретениеЦенныхБумаг;
		ОбъектУчета = Субконто1;
			
	ИначеЕсли Счет = "Н02.06" Тогда
		ВидРасхода = Перечисление.ВидыРасходов.ПриобретениеПрав;
		ОбъектУчета = Субконто2;
	
	ИначеЕсли Счет = "Н03.01" Тогда
		ВидРасхода = Перечисление.ВидыРасходов.ГарантийныйРемонтИОбслуживание;
		
	ИначеЕсли Счет = "Н03.03" Тогда
		ВидРасхода = Перечисление.ВидыРасходов.ПредставительскиеРасходы;
		
	ИначеЕсли Счет = "Н03.04" Тогда
		ВидРасхода = Перечисление.ВидыРасходов.РасходыНаРекламу
		
	ИначеЕсли Найти(Счет, "Н04") <> 0 Тогда
		ВидРасхода = Перечисление.ВидыРасходов.РасходыБудущихПериодов;
		ОбъектУчета = Субконто1;
	
	ИначеЕсли Счет = "Н07.01" Тогда
		ВидРасхода = Перечисление.ВидыРасходов.ПрямыеРасходы;
		
	ИначеЕсли Счет = "Н07.02" Тогда
		ВидРасхода = Перечисление.ВидыРасходов.ПрямыеРасходы;
		
	ИначеЕсли Счет = "Н07.04.1" Тогда
		Если Субконто1 = Перечисление.ГруппыВидыРасходов.НеПринимаемые Тогда
			ВидРасхода = Перечисление.ВидыРасходов.НеПринимаемые;
			
		Иначе
			ВидРасхода = Перечисление.ВидыРасходов.КосвенныеРасходы;
			ЭлементРасхода = Субконто1;	
		КонецЕсли;
		
	ИначеЕсли (Счет = "Н07.06") или (Счет = "Н07.14") Тогда
		ВидРасхода = Перечисление.ВидыРасходов.РеализацияПрочегоИмущества;
		ОбъектУчета = Субконто1;
		
	ИначеЕсли Счет = "Н07.07" Тогда
		ВидРасхода = Перечисление.ВидыРасходов.РеализацияОсновныхСредств;
		ОбъектУчета = Субконто1;
		
	ИначеЕсли Счет = "Н07.08" Тогда
		ВидРасхода = Перечисление.ВидыРасходов.РеализацияНематериальныхАктивов;
		ОбъектУчета = Субконто1;
		
	ИначеЕсли Счет = "Н09" Тогда
		ВидРасхода = Перечисление.ВидыРасходов.ВнереализационныеРасходы;
		ЭлементРасхода = Субконто1;
		
	Иначе // Невозможно автоматически заполнить реквизиты
	КонецЕсли;
	
	СписокРеквизитов = СоздатьОбъект("СписокЗначений");
	СписокРеквизитов.ДобавитьЗначение(ВидРасхода, "Вид расхода");
	СписокРеквизитов.ДобавитьЗначение(ЭлементРасхода, "Элемент расхода");
	СписокРеквизитов.ДобавитьЗначение(ОбъектУчета, "Объект");
	
	Возврат СписокРеквизитов;
	
КонецФункции // ПолучитьВидаРасходаПоСчету()

//******************************************************************************
// УстановитьЗначениеНовыхРеквизитов()
//
// Параметры:
//  ОбрабатываемыйОбъект - Справочник.РасходыБудущихПериодов или Документ - объкт в
//  которм необходимо заполнить новые реквизиты.
//
// Вызывается из формул элементов диалога:
//  Нет.
//
// Описание:
//  Новые реквизиты, переданных в процедуру объектов, заполняются на основании данных
//  реквизитов "СчетЗатратН" и группы реквизитов "СубконтоН".
//
Процедура УстановитьЗначениеНовыхРеквизитов(ОбрабатываемыйОбъект)
	                                                                    
	СчетЗатратН = ОбрабатываемыйОбъект.СчетЗатратН.Код;
	СписокРеквизитов = ПолучитьВидаРасходаПоСчету(СчетЗатратН, ОбрабатываемыйОбъект.СубконтоН1, ОбрабатываемыйОбъект.СубконтоН2);
	ВидРасхода = СписокРеквизитов.Получить("Вид расхода");
	
	Если ПустоеЗначение(СчетЗатратН) = 0 Тогда
		Если (ПустоеЗначение(ВидРасхода) = 1) или (СчетЗатратН = "Н07.01") или (СчетЗатратН = "Н07.02") Тогда
			Если ТипЗначенияСтр(ОбрабатываемыйОбъект) = "Справочник" Тогда
				ТекстСообщения = "" + ОбрабатываемыйОбъект + " (справочник "+ ОбрабатываемыйОбъект.ПредставлениеВида() + "): на закладке ""Налоговый учет"" не заполнены или заполнены не полностью следующие реквизиты: вид расхода, элемент расхода и объект учета";
				
			Иначе
				ТекстСообщения = "Документ "+ глПредставлениеДокумента(ОбрабатываемыйОбъект) + ": на закладке ""Налоговый учет"" не заполнены или заполнены не полностью следующие реквизиты: вид расхода, элемент расхода и объект учета";
			КонецЕсли;
			Сообщить(ТекстСообщения);
		КонецЕсли;
	КонецЕсли;
	ОбрабатываемыйОбъект.ВидРасхода = ВидРасхода; 
	ОбрабатываемыйОбъект.Объект = СписокРеквизитов.Получить("Объект"); 
	
	// Установим новое значение для реквизита "Элемент расхода", у которого тип - неопределенный.  
	ЭлементРасхода = СписокРеквизитов.Получить("Элемент расхода");
	ИмяТипа = "";
	Если ПустоеЗначение(ЭлементРасхода) = 0 Тогда
		ИмяТипа = "Перечисление."+ ЭлементРасхода.Вид();
	КонецЕсли;             
	ОбрабатываемыйОбъект.НазначитьТип("ЭлементРасхода", ИмяТипа);
	ОбрабатываемыйОбъект.ЭлементРасхода = ЭлементРасхода;
	
КонецПроцедуры // УстановитьЗначениеНовыхРеквизитов()

//******************************************************************************
// ЗаполнитьВСправочникеРеквизитыВидРасхода(Спр)
//
// Параметры:
//  ОбрабатываемыйСправочник - Справочник - необходимо заполнить новые реквизиты этого справочника.
//
// Вызывается из формул элементов диалога:
//  Нет.
//
// Описание:
//  В переданном в процедуру справочнике необходимо заполнить значениями
//  новые периодические реквизиты: "ВидРасхода", "ЭлементРасхода" и "Объект"
//  на основании данных, записанных в реквизитах "СчетЗатратН" и "СубконтоН".
//
Процедура ЗаполнитьВСправочникеПериодическиеРеквизитыВидРасхода(ОбрабатываемыйСправочник)
	
	Периодический = СоздатьОбъект("Периодический");
	ПериодическийРеквизит = СоздатьОбъект("Периодический");
	
	ОбрабатываемыйСправочник.ВыбратьЭлементы(0);
	Пока ОбрабатываемыйСправочник.ПолучитьЭлемент() = 1 Цикл
		Если ОбрабатываемыйСправочник.ЭтоГруппа() = 1 Тогда
		    Продолжить;
		КонецЕсли;
	    Счет = ПолучитьПустоеЗначение("Счет");
		Субконто1 = "";
		Субконто2 = "";
		
		Периодический.ИспользоватьОбъект("", ОбрабатываемыйСправочник);
		Периодический.ВыбратьЗначения();
		Пока Периодический.ПолучитьЗначение() = 1 Цикл
			НаименованиеТекущегоРеквизита = Периодический.ТекущийРеквизит();
			ДатаИзмененияЗначений = Периодический.ДатаЗнач;
			
			Если НаименованиеТекущегоРеквизита = "СчетЗатратН" Тогда
				Счет = Периодический.Значение;
				
			ИначеЕсли НаименованиеТекущегоРеквизита = "СубконтоН1" Тогда
				Субконто1 = Периодический.Значение;
				
			ИначеЕсли НаименованиеТекущегоРеквизита = "СубконтоН2" Тогда
				Субконто2 = Периодический.Значение;
				
			Иначе
				Продолжить;
			КонецЕсли;
			
			СписокРеквизитов = ПолучитьВидаРасходаПоСчету(Счет.Код, Субконто1, Субконто2);
			ВидРасхода = СписокРеквизитов.Получить("Вид расхода");
	        Если (НаименованиеТекущегоРеквизита = "СчетЗатратН") и (ПустоеЗначение(Счет) = 0) Тогда
				Если (ПустоеЗначение(ВидРасхода) = 1) или (Счет.Код = "Н07.01") или (Счет.Код = "Н07.02") Тогда
					ТекстСообщения = ""+ ОбрабатываемыйСправочник + " (справочник "+ ОбрабатываемыйСправочник.ПредставлениеВида() + "): на закладке ""Налоговый учет"" (на " +ДатаИзмененияЗначений + ") не заполнены или заполнены не полностью следующие реквизиты: вид расхода, элемент расхода и объект учета";
					Сообщить(ТекстСообщения);                                                                                          
				КонецЕсли;
			КонецЕсли;
			ОбрабатываемыйСправочник.ВидРасхода.Установить(ДатаИзмененияЗначений, ВидРасхода); 
			ОбрабатываемыйСправочник.Объект.Установить(ДатаИзмененияЗначений, СписокРеквизитов.Получить("Объект")); 
			               
			// Установим новое значение для периодического реквизита "Элемент расхода",
			// у которого тип - неопределенный.
			ЭлементРасхода = СписокРеквизитов.Получить("Элемент расхода");
			ИмяТипа = "";
			Если ПустоеЗначение(ЭлементРасхода) = 0 Тогда
				ИмяТипа = "Перечисление."+ ЭлементРасхода.Вид();
			КонецЕсли;
			ПериодическийРеквизит.ИспользоватьОбъект("ЭлементРасхода", ОбрабатываемыйСправочник);
			ПериодическийРеквизит.НазначитьТип(ИмяТипа);
			ПериодическийРеквизит.Значение = ЭлементРасхода;
			ПериодическийРеквизит.ДатаЗнач = ДатаИзмененияЗначений;
			ПериодическийРеквизит.Записать();
		КонецЦикла;
	КонецЦикла;	
	
КонецПроцедуры // ЗаполнитьВСправочникеРеквизитыВидРасхода()

//******************************************************************************
// ЗакрытьСчетН15()
//
// Параметры:
//  Док - документ "Регламентные операции по налоговому учету",
//   к которому необходимо добавить проводки по закрытию счета Н15.
//  ДатаЗакрытия - дата, на которую закрывается счет Н15
//
// Вызывается из формул элементов диалога:
//  Нет.
//
// Описание:
//  Выполняется закрытие счета Н15. Выбирается вся оплата налога за год,
//  и распределяется на счете Н15 по срокам начисленного налога, начиная с самого раннего.
//  После закрытие на счете Н15 остаются суммы налогов, которае не уплачены.
//
Процедура ЗакрытьСчетН15(Док, ДатаЗакрытия)
	
	Сч_Н15 = СчетПоКоду("Н15");
	Операция = СоздатьОбъект("Операция");
	Если Операция.НайтиОперацию(Док) = 0 Тогда
	    Возврат;
	КонецЕсли;
	
	БухИт = СоздатьОбъект("БухгалтерскиеИтоги");
	БухИт.ПериодМНГ(ДатаЗакрытия);
	
	БухИтН15 = СоздатьОбъект("БухгалтерскиеИтоги");
	БухИтН15.ИспользоватьСубконто(ВидыСубконто.НалогиИОтчисления);
	БухИтН15.ИспользоватьСубконто(ВидыСубконто.СрокиУплаты);
	БухИтН15.ВыполнитьЗапрос(, ДатаЗакрытия, Сч_Н15,,,,,);
	БухИтН15.ВыбратьСубконто(ВидыСубконто.НалогиИОтчисления);
	Пока БухИтН15.ПолучитьСубконто(ВидыСубконто.НалогиИОтчисления) = 1 Цикл
		ВидНалога = БухИтН15.Субконто(ВидыСубконто.НалогиИОтчисления);
		СуммаНачислена = БухИтН15.СКК();
		СуммаУплачено  = 0;
		
		Если ПустоеЗначение(ВидНалога) = 1 Тогда
		    Продолжить;
			
		ИначеЕсли СуммаНачислена <= 0 Тогда
		    Продолжить;
		КонецЕсли;
		
		// Рассчитаем сумму, которая уплачена
	    СчетУчетаНалога = ВидНалога.Счет;
		Если (СчетУчетаНалога.ПринадлежитГруппе(СчетПоКоду("68")) = 1)
			или (СчетУчетаНалога.ПринадлежитГруппе(СчетПоКоду("69.2")) = 1)
			или (СчетУчетаНалога.ПринадлежитГруппе(СчетПоКоду("69.3")) = 1) Тогда
				
			Субконто2 = ПолучитьПустоеЗначение();
			
			// На счете 68.10 может вестись учет нескольких налогов
			Если СчетУчетаНалога = СчетПоКоду("68.10") Тогда
				Для НомерСубконто = 1 по СчетУчетаНалога.КоличествоСубконто() Цикл
					Если СчетУчетаНалога.ВидСубконто(НомерСубконто) = ВидыСубконто.ПрочиеОбъектыУчета Тогда
						Субконто2 = ВидНалога.ПолучитьАтрибут("Субконто"+ НомерСубконто);
						Прервать;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			
			СуммаУплачено = СуммаУплачено + БухИт.ДО(СчетУчетаНалога,,, Перечисление.ВидыПлатежейВБюджет.Налог, Субконто2);
			СуммаУплачено = СуммаУплачено + БухИт.ДО(СчетУчетаНалога,,, Перечисление.ВидыПлатежейВБюджет.НалогСам, Субконто2);
			СуммаУплачено = СуммаУплачено + БухИт.ДО(СчетУчетаНалога,,, Перечисление.ВидыПлатежейВБюджет.НалогАкт, Субконто2);
			
		ИначеЕсли (СчетУчетаНалога = СчетПоКоду("69.1"))
			или (СчетУчетаНалога = СчетПоКоду("69.11"))
			или (СчетУчетаНалога = СчетПоКоду("69.12")) Тогда
				
			СуммаУплачено = СуммаУплачено + БухИт.ДО(СчетУчетаНалога,,, Перечисление.ВидыПлатежейВФонды.Взносы);
			СуммаУплачено = СуммаУплачено + БухИт.ДО(СчетУчетаНалога,,, Перечисление.ВидыПлатежейВФонды.ВзносыСам);
			СуммаУплачено = СуммаУплачено + БухИт.ДО(СчетУчетаНалога,,, Перечисление.ВидыПлатежейВФонды.ВзносыАкт);
			
		Иначе
			ТекстСообщения = "Для налога " + ВидНалога + " не указан счет учета " + СчетУчетаНалога + ", счет Н15 по этому виду налога на 01.01.2003 не закрыт.
							|Необходимо указать для налога один из субсчетов счетов 68 или 69, после чего документом ""Регламентные операции по налоговому учету"" за 31.12.2002 закрыть счет Н15, выбрав операцию ""Закрытие счетов налогового учета""";
			Сообщить(ТекстСообщения, "!");
			Продолжить;
		КонецЕсли;
		
		Если СуммаУплачено > 0 Тогда
			БухИтН15.ВыбратьСубконто(ВидыСубконто.СрокиУплаты,,,,,);
			Пока (БухИтН15.ПолучитьСубконто(ВидыСубконто.СрокиУплаты) = 1) и (СуммаУплачено > 0) Цикл
				НеОплачено = БухИтН15.СКК();
				СуммаЗакрыть = Мин(НеОплачено, СуммаУплачено);
				Если СуммаЗакрыть > 0 Тогда
					Операция.НоваяПроводка(); Операция.РазделительУчета = Константа.ОсновноеЮрЛицо;
					Операция.НомерЖурнала = "НУ";
					Операция.СодержаниеПроводки = "Закрытие счета по окончанию налогового периода";
					Операция.Дебет.Счет = Сч_Н15;
					Операция.Дебет.НалогиИОтчисления = ВидНалога;
					Операция.Дебет.СрокиУплаты = БухИтН15.Субконто(ВидыСубконто.СрокиУплаты);
					Операция.Сумма = СуммаЗакрыть;
					
					СуммаУплачено = СуммаУплачено - СуммаЗакрыть;
				КонецЕсли;
			КонецЦикла;
			
			// Переплату относим на пустой срок упалты.
			Если СуммаУплачено > 0 Тогда
				Операция.НоваяПроводка(); Операция.РазделительУчета = Константа.ОсновноеЮрЛицо;
				Операция.НомерЖурнала = "НУ";
				Операция.СодержаниеПроводки = "Отражение переплаты при закрытии счета";
				Операция.Дебет.Счет = Сч_Н15;
				Операция.Дебет.НалогиИОтчисления = ВидНалога;
				Операция.Сумма = СуммаУплачено;
			КонецЕсли;
		    
		КонецЕсли;
		
	КонецЦикла;
	
	Операция.Записать();
	
КонецПроцедуры // ЗакрытьСчетН15()     

//******************************************************************************
Процедура ОбновлениеРелиза(Номер)
	
	НачатьТранзакцию();
	Если Номер = 770421 Тогда
		
		Состояние("Установка значений констант");
		Константа.КодИМНС = Число(Прав(Константа.ГНИОрганизации, 4));
		Константа.ОсновнойВариантРасчетаНалоговОтгрузки = СформироватьВариантРасчетаНалогов(0, 0, ПолучитьПустоеЗначение("Справочник.СтавкиНДС"), глБезНалога("НП"));
		Константа.ИнвалиднаяОрганизация.Установить('01.01.1980', Нет);
		Константа.ОрганизацияЯвляетсяПлательщикомНДС = Да;
		Константа.ОрганизацияЯвляетсяПлательщикомЕНВД = Нет;
		Константа.ПересчитыватьПокупнуюЦену = Нет;
		Константа.ВалютныйУчет = Да;
		Константа.УчетЗарплатыВоВнешнейПрограмме = Нет;
		Константа.ОсновнойВариантОтпускнойЦены = Перечисление.ВариантыОтпускныхЦен.БезНалогов;
		Константа.БазаРаспределенияКосвенныхРасходов.Установить('01.01.1980', Перечисление.БазаРаспределенияКосвенныхРасходов.ОтдельныеСтатьиПрямыхЗатрат);
		Константа.ДиректКостингБазаРаспределения.Установить('01.01.1980', Перечисление.ДиректКостингБазаРаспределения.ВыручкаОтПродаж);
		Константа.ДиректКостингВидыПродукции.Установить('01.01.1980', Перечисление.ДиректКостингВидыПродукции.ПоВсемВидамНоменклатуры);
		
		Состояние("Корректровка справочника ""Налоги и отчисления""");
		Шкала = СоздатьОбъект("Справочник.СтавкиНалогов");
		ЕСН = СоздатьОбъект("Справочник.НалогиИОтчисления");
		Если ЕСН.НайтиПоКоду("ПФ") = 1 Тогда
			Шкала.ИспользоватьВладельца(ЕСН.ТекущийЭлемент());
			Если Шкала.НайтиПоНаименованию("4_Четвертый предел") = 1 Тогда
			    Шкала.Процент.Установить('01.01.2001', 5);
				Шкала.Процент.Установить('01.01.2002', 2);
			КонецЕсли;
			ЕСН.Код = "ПФР";
			ЕСН.Наименование = "ЕСН в части ПФР";
			ЕСН.Записать();
		КонецЕсли;
		Если ЕСН.НайтиПоКоду("ФОМС") = 1 Тогда
			ЕСН.Код = "ФФОМС";
			ЕСН.Наименование = "ЕСН в части ФФОМС";
			ЕСН.Записать();
		КонецЕсли;
		Если ЕСН.НайтиПоКоду("ТОМС") = 1 Тогда
			ЕСН.Код = "ТФОМС";
			ЕСН.Наименование = "ЕСН в части ТФОМС";
			ЕСН.Записать();
		КонецЕсли;
		Если ЕСН.НайтиПоКоду("ФСС") = 1 Тогда
			ЕСН.Наименование = "ЕСН в части ФСС";
			ЕСН.Записать();
		КонецЕсли;
		ЕСН.ВыбратьЭлементы();
		Пока ЕСН.ПолучитьЭлемент() = 1 Цикл
		    ОбновитьРеквизит_Счет(ЕСН, "Счет");
			ЕСН.Записать();
		КонецЦикла;
		
		Состояние("Запись периодических реквизитов сотрудника");
		Сотрудник = СоздатьОбъект("Справочник.Сотрудники");
		ТипСотрудника = СоздатьОбъект("Периодический");
		Сотрудник.ВыбратьЭлементы();
		Пока Сотрудник.ПолучитьЭлемент() = 1 Цикл
			Если Сотрудник.ЭтоГруппа() = 1 Тогда
		        Продолжить;
			КонецЕсли;
			ТипСотрудника.ИспользоватьОбъект("ТипСотрудника", Сотрудник.ТекущийЭлемент());
			ТипСотрудника.ВыбратьЗначения(,);
			Пока ТипСотрудника.ПолучитьЗначение() = 1 Цикл
				Если ТипСотрудника.Значение = 1 Тогда
					Сотрудник.ИсчислятьФССотНС.Установить(ТипСотрудника.ДатаЗнач, 1);
					
				ИначеЕсли  ТипСотрудника.Значение = 2  Тогда
					Сотрудник.ИсчислятьФССотНС.Установить(ТипСотрудника.ДатаЗнач, 0);
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
		
		Состояние("Обновление справочника ""Договоры""");
		СпрДоговоры = СоздатьОбъект("Справочник.Договоры");
		СпрДоговоры.ВыбратьЭлементы(0);
		Пока СпрДоговоры.ПолучитьЭлемент() = 1 Цикл
			СпрДоговоры.ОплатаДоговора = 1; // в рублях
			СпрДоговоры.Записать();
		КонецЦикла;

		Состояние("Обновление справочника ""Номенклатура""");
		СпрНоменклатура = СоздатьОбъект("Справочник.Номенклатура");
		СпрНоменклатура.ВыбратьЭлементы(0);
		Пока СпрНоменклатура.ПолучитьЭлемент() = 1 Цикл
			СпрНоменклатура.ПорядокХраненияОтпускнойЦены = 1; //Без налогов
			СпрНоменклатура.Записать();
		КонецЦикла;
		
		Состояние("Обновление справочника ""Основные средства""");
		ОС = СоздатьОбъект("Справочник.ОсновныеСредства");
		ОС.ВыбратьЭлементы(0);
		Пока ОС.ПолучитьЭлемент() = 1 Цикл
			ОС.МетодНачисленияАмортизации = Перечисление.МетодыНачисленияАмортизации.Линейный;
			ОС.Записать();
			ОС.СпециальныйКоэффициент.Установить('01.01.2002', 1);
		КонецЦикла;
		
		Состояние("Обновление справочника ""Нематериальные активы""");
		НМА = СоздатьОбъект("Справочник.НематериальныеАктивы");
		НМА.ВыбратьЭлементы(0);
		Пока НМА.ПолучитьЭлемент() = 1 Цикл
			НМА.МетодНачисленияАмортизации = Перечисление.МетодыНачисленияАмортизации.Линейный;
			НМА.Записать();
			НМА.СпециальныйКоэффициент.Установить('01.01.2002', 1);
		КонецЦикла;
		
		Состояние("Обновление справочника ""Варианты расчета налогов""");
        СпрВариантыРасчетаНалогов = СоздатьОбъект("Справочник.ВариантыРасчетаНалогов");
		СпрВариантыРасчетаНалогов.ПорядокКодов();
		СпрВариантыРасчетаНалогов.ВыбратьЭлементы(0);
		Пока СпрВариантыРасчетаНалогов.ПолучитьЭлемент() = 1 Цикл
			Наименование = НаименованиеВариантаРасчетаНалогов(СпрВариантыРасчетаНалогов);
			Если СпрВариантыРасчетаНалогов.Наименование <> Наименование Тогда
			    СпрВариантыРасчетаНалогов.Наименование = Наименование;
				СпрВариантыРасчетаНалогов.Записать();
			КонецЕсли;
		КонецЦикла;

		// Замена кодов счетов и типов аналитики в формах документов.
		ОбработкаСчетовВДокументах();
		ЗаменаКодовВнеобортныхАктивов = 1;
		
		Состояние("Обновление документов");
		ВариантРасчетаНалоговСучетомНП = СформироватьВариантРасчетаНалогов(0, 0, ПолучитьПустоеЗначение("Справочник.СтавкиНДС"), ПолучитьПустоеЗначение("Справочник.СтавкиНП"));
		ВариантРасчетаНалоговБезНП = СформироватьВариантРасчетаНалогов(0, 0, ПолучитьПустоеЗначение("Справочник.СтавкиНДС"), глБезНалога("НП"));
		ОВА = СоздатьОбъект("Справочник.ОбъектыСтроительства"); // объекты внеоборотных активов
		
		СпрНДС = СоздатьОбъект("Справочник.СтавкиНДС");
		Ставка10 = "";
		Ставка20 = "";
		СпрНДС.ВыбратьЭлементы();
		Пока СпрНДС.ПолучитьЭлемент() = 1 Цикл
		    Если СпрНДС.Ставка = 10 Тогда
				Ставка10 = СпрНДС.ТекущийЭлемент();
				
			ИначеЕсли СпрНДС.Ставка = 20 Тогда
				Ставка20 = СпрНДС.ТекущийЭлемент();
			КонецЕсли;
		КонецЦикла;
		
		Опер = СоздатьОбъект("Операция");
		Док = СоздатьОбъект("Документ");
		Док.ВыбратьДокументы(,);
		Пока Док.ПолучитьДокумент() = 1 Цикл
			Обновление = 0;
			
			// Установка значения варианта расчета налогов.
			Если (Док.Вид() = "ВыполнениеЭтапаРабот") или
				 (Док.Вид() = "ОказаниеУслуг") или
				 (Док.Вид() = "РасходнаяНакладная") или
				 (Док.Вид() = "РеализацияОтгруженнойПродукции") или
				 (Док.Вид() = "Счет") Тогда
				Если Док.УчитыватьНП = 1 Тогда
				    Док.ВариантРасчетаНалогов = ВариантРасчетаНалоговСучетомНП;
				Иначе
					Док.ВариантРасчетаНалогов = ВариантРасчетаНалоговБезНП;
				КонецЕсли;
				Обновление = 1;
			
			ИначеЕсли Док.Вид() = "ОтпускМатериаловНаСторону" Тогда
				Если Док.УчитыватьНП = 1 Тогда
				    Док.ВариантРасчетаНалогов = 
						СформироватьВариантРасчетаНалогов(0, 0, глЗначениеПоУмолчанию("ОсновнаяСтавкаНДС"), Док.СтавкаНП);
				Иначе
					Док.ВариантРасчетаНалогов = 
						СформироватьВариантРасчетаНалогов(0, 0, глЗначениеПоУмолчанию("ОсновнаяСтавкаНДС"), глБезНалога("НП"));
				КонецЕсли;
				Обновление = 1;
				 
			ИначеЕсли (Док.Вид() = "ПередачаНМА") или
				      (Док.Вид() = "ПередачаОС") Тогда
				СтавкаНДС = ?(ПустоеЗначение(Док.СтавкаНДС) = 1, глБезНалога("НДС"), Док.СтавкаНДС);
				СтавкаНП = ?(ПустоеЗначение(Док.СтавкаНП) = 1, глБезНалога("НП"), Док.СтавкаНП);
				Док.ВариантРасчетаНалогов = СформироватьВариантРасчетаНалогов(0 , 0, СтавкаНДС, СтавкаНП);
				Обновление = 1;
			КонецЕсли;
			
			// Установка различных флагов и переключателей в документах.
			Если Док.Вид() = "НачислениеЗП" Тогда
			    Док.ИспользоватьСчетДокумента = 2;
				Док.ВариантРаспределенияРасходов = 1;
				Обновление = 1;
				
			ИначеЕсли Док.Вид() = "ПоступлениеТоваров" Тогда
				Док.ВидПоступления = 1; // на оптовый склад
				Обновление = 1;
				
			ИначеЕсли Док.Вид() = "ЗаписьКнигиПокупок" Тогда
				Док.ФормироватьПроводки = 1;
				ДокОсн = Док.ДокументОснование;
				Если ДокОсн.Выбран() = 1 Тогда
				    Док.ДатаНомерСчетаФактуры = ДокОсн.ДатаНомерСчетаФактуры;
					Если ДокОсн.Вид() = "СчетФактураПолученный" Тогда
						Док.Субсчет19 = ДокОсн.Субсчет19;
					ИначеЕсли (ДокОсн.Вид() = "ПоступлениеТоваров") или
						 (ДокОсн.Вид() = "ПоступлениеМатериалов") Тогда
						Док.Субсчет19 = СчетПоКоду("19.3");
					ИначеЕсли ДокОсн.Вид() = "УслугиСтороннихОрганизаций" Тогда
						Док.Субсчет19 = СчетПоКоду("19.3");
						Если ДокОсн.ДокументПоступления.Выбран() = 1 Тогда
							Если ДокОсн.ДокументПоступления.Вид() = "ПоступлениеОС" Тогда
								Док.Субсчет19 = СчетПоКоду("19.1");
							ИначеЕсли ДокОсн.ДокументПоступления.Вид() = "ПоступлениеНМА" Тогда
								Док.Субсчет19 = СчетПоКоду("19.2");
							КонецЕсли;
						КонецЕсли;
					ИначеЕсли ДокОсн.Вид() = "ПоступлениеОС" Тогда
						Док.Субсчет19 = СчетПоКоду("19.1");
					ИначеЕсли ДокОсн.Вид() = "ПоступлениеНМА" Тогда
						Док.Субсчет19 = СчетПоКоду("19.2");
					КонецЕсли;
					Если ДокОсн.Вид() = "СчетФактураПолученный" Тогда
					    Док.ДатаОприходования = ДокОсн.ДатаОприходования;
					Иначе
						Док.ДатаОприходования = ДокОсн.ДатаДок;
					КонецЕсли;
				КонецЕсли;
				Обновление = 1;
				
			ИначеЕсли Док.Вид() = "ЗаписьКнигиПродаж" Тогда
				ДокОсн = Док.ДокументОснование;
				Если ДокОсн.Выбран() = 1 Тогда
				    Док.ДатаНомерСчетаФактуры = Формат(ДокОсн.ДатаДок, "Д")+" №"+глПреобразоватьНомерДок(ДокОсн.НомерДок);
					Док.Аванс = ДокОсн.Аванс;
					Док.НДСпоСтавкеНольПроцентов = ДокОсн.НДСпоСтавкеНольПроцентов;
				КонецЕсли;
				Обновление = 1;
				
			ИначеЕсли Док.Вид() = "НачислениеЗП" Тогда
				Док.ИспользоватьСчетДокумента = 2;
				Док.ВариантРаспределенияРасходов = 1;
				Обновление = 1;
				
			ИначеЕсли Док.Вид() = "ОказаниеУслуг" Тогда
				Док.ТипУслуги = 1;
				Обновление = 1;
							
			ИначеЕсли Док.Вид() = "СчетФактураПолученный" Тогда
				Док.ФормироватьПроводки = 1;
				Обновление = 1;
				
			ИначеЕсли Док.Вид() = "ПоступлениеОС" Тогда
				Док.ВыбратьСтроки();
				Пока Док.ПолучитьСтроку() = 1 Цикл             
					Обновление = 1;
					Док.ОбъектВнеоборотныхАктивов = ПодставитьВнеоборотныйАктив(Док.ОС, ОВА, "ОС");
				КонецЦикла;
				
			ИначеЕсли Док.Вид() = "ПоступлениеНМА" Тогда
				Док.ВыбратьСтроки();
				Пока Док.ПолучитьСтроку() = 1 Цикл
					Обновление = 1;
					Док.ОбъектВнеоборотныхАктивов = ПодставитьВнеоборотныйАктив(Док.НМА, ОВА, "НА");
				КонецЦикла;
				
			ИначеЕсли Док.Вид() = "ВводВЭксплуатациюОС" Тогда
				Обновление = 1;
				Док.ОбъектВнеоборотныхАктивов = ПодставитьВнеоборотныйАктив(Док.ОС, ОВА, "ОС");
				Док.МетодНачисленияАмортизации = Перечисление.МетодыНачисленияАмортизации.Линейный;
				Док.СпециальныйКоэффициент = 1;
				Если Док.ОС.Выбран() = 1 Тогда
					Док.НоваяСтрока();
					Док.ОсновноеСредство = Док.ОС;
				КонецЕсли;
				
			ИначеЕсли Док.Вид() = "ПринятиеКУчетуНМА" Тогда
				Обновление = 1;
				Док.ОбъектВнеоборотныхАктивов = ПодставитьВнеоборотныйАктив(Док.НМА, ОВА, "НА");
				
			ИначеЕсли Док.Вид() = "ПеремещениеОС" Тогда
				Если Док.ОС.Выбран() = 1 Тогда
					Док.НоваяСтрока();
					Док.ОсновноеСредство = Док.ОС;
				    Док.НаходитсяВЗалоге = Док.ОС.НаходитсяВЗалоге.Получить(Док.ДатаДок);
					Док.Состояние = Док.ОС.Состояние.Получить(Док.ДатаДок);
					Обновление = 1;
				КонецЕсли;
				
			ИначеЕсли (Док.Вид() = "ПередачаОС") или (Док.Вид() = "ПодготовкаКПередачеОС") Тогда
				Если Док.ОС.Выбран() = 1 Тогда
					Док.НоваяСтрока();
					Док.ОсновноеСредство = Док.ОС;
					Обновление = 1;
				КонецЕсли;
				
			ИначеЕсли Док.Вид() = "УслугиСтороннихОрганизаций" Тогда
				Док.ТипИсполнителя = 1;
				Обновление = 1;
				
			ИначеЕсли Док.Вид() = "ЗаписьКнигиПродажТорг" Тогда
				Обновление = 1;
				Если Док.ТипЗаписи = 3 Тогда
					Док.Аванс = 1;
				КонецЕсли;
				Док.ДатаОплаты = Док.ДатаДок;
				
				Если Док.СуммаНДСПоСтавке0 = 0 Тогда
				Иначе
					Док.НДСпоСтавкеНольПроцентов = 1;
					Док.НоваяСтрока();
					Док.ВсегоПродаж = Док.СуммаНДСПоСтавке0;
				КонецЕсли;
				
				Если Док.НДС10 = 0 Тогда
				Иначе
					Если ПустоеЗначение(Ставка10) = 1 Тогда
					    СпрНДС.Новый();
						СпрНДС.Ставка = 10;
						СпрНДС.Наименование = "10%";
						СпрНДС.Записать();
					КонецЕсли;
					Док.НоваяСтрока();
					Док.СтавкаНДС = Ставка10;
					Док.НДС = Док.НДС10;
					Если (Док.ТипЗаписи = 1) или (Док.ТипЗаписи = 4) Тогда
					    Док.ВсегоПродаж = Док.СуммаБезНДС10;
					Иначе
						Док.ВсегоПродаж = Док.СуммаБезНДС10 + Док.НДС10;
					КонецЕсли;
				КонецЕсли;				
				
				Если Док.НДС20 = 0 Тогда
				Иначе
					Если ПустоеЗначение(Ставка20) = 1 Тогда
					    СпрНДС.Новый();
						СпрНДС.Ставка = 20;
						СпрНДС.Наименование = "20%";
						СпрНДС.Записать();
					КонецЕсли;
					Док.НоваяСтрока();
					Док.СтавкаНДС = Ставка20;
					Док.НДС = Док.НДС20;
					Если (Док.ТипЗаписи = 1) или (Док.ТипЗаписи = 4) Тогда
					    Док.ВсегоПродаж = Док.СуммаБезНДС20;
					Иначе
						Док.ВсегоПродаж = Док.СуммаБезНДС20 + Док.НДС20;
					КонецЕсли;
				КонецЕсли;
				
				Если Док.СуммаСовсемБезНДС = 0 Тогда
				Иначе
					Док.НоваяСтрока();
					Док.ВсегоПродаж = Док.СуммаСовсемБезНДС;
					Док.СтавкаНДС = глБезНалога("НДС");
				КонецЕсли;
				
			ИначеЕсли Док.Вид() = "ЗаписьКнигиПокупокТорг" Тогда
				Обновление = 1;
				Док.ДатаОплаты = Док.ДатаДок;
				Если Док.СуммаНДСПоСтавке0 = 0 Тогда
				Иначе
					Док.НДСпоСтавкеНольПроцентов = 1;
				КонецЕсли;
				
			ИначеЕсли Док.Вид() = "ПоступлениеТоваров" Тогда
				Док.ВидПоступления = 1;
				Обновление = 1;
			КонецЕсли;
				
			Если  Обновление = 1 Тогда
				Док.Записать();
			КонецЕсли;
		КонецЦикла;
		
		Состояние("Перепроведение документов");
		НеКомментировать = ВосстановитьЗначение("НеКомментироватьВыполняемыеДействия");
		СохранитьЗначение("НеКомментироватьВыполняемыеДействия", 1);
		Док = СоздатьОбъект("Документ");
		Док.ВыбратьДокументы(,);
		Пока Док.ПолучитьДокумент() = 1 Цикл
			Если (Док.Вид() = "ВводВЭксплуатациюОС") или
				 (Док.Вид() = "ПеремещениеОС") или
				 (Док.Вид() = "ПриказОПриемеНаРаботу") или
				 (Док.Вид() = "ПринятиеКУчетуНМА") Тогда
			    Если Док.Проведен() = 1 Тогда
			        Док.Провести(,1);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		СохранитьЗначение("НеКомментироватьВыполняемыеДействия", НеКомментировать);
		
		Состояние("Обновление периодических реквизитов");
	    Спр = СоздатьОбъект("Справочник.ОсновныеСредства");
		ОбновитьПериодическийРеквизит_Счет(Спр);
		Спр = СоздатьОбъект("Справочник.НематериальныеАктивы");
		ОбновитьПериодическийРеквизит_Счет(Спр);
		Спр = СоздатьОбъект("Справочник.Сотрудники");
		ОбновитьПериодическийРеквизит_Счет(Спр);
		
		Состояние("Обновление приказов о кадровых изменениях");
		Док = СоздатьОбъект("Документ.ПриказОКадровыхИзменениях");
		Док.ВыбратьДокументы(,);
		Пока Док.ПолучитьДокумент() = 1 Цикл
		    Если Док.Сотрудник.Выбран() = 1 Тогда
				Док.НоваяСтрока();
			    Док.СчетЗатрат = Док.Сотрудник.СчетЗатрат.Получить(Док.ДатаДок);
				Док.Субконто1 = Док.Сотрудник.Субконто1.Получить(Док.ДатаДок);
				Док.Субконто2 = Док.Сотрудник.Субконто2.Получить(Док.ДатаДок);
				Док.Субконто3 = Док.Сотрудник.Субконто3.Получить(Док.ДатаДок);
				Док.СтатьяОтчисленийНаСоцНужды = Док.Сотрудник.СтатьяОтчисленийНаСоцНужды.Получить(Док.ДатаДок);
				Док.ПроцентСевернойНадбавки = Док.Сотрудник.ПроцентСевернойНадбавки.Получить(Док.ДатаДок);
				Док.ИсчислятьФССотНС = Док.Сотрудник.ИсчислятьФССотНС.Получить(Док.ДатаДок);
				Док.Записать();
			КонецЕсли;
		КонецЦикла;
		
		Состояние("Обновление операций");
		ТаблицаСоответствияСчетов = Создатьобъект("ТаблицаЗначений");
		ТаблицаСоответствияСчетов.НоваяКолонка("ИсходныйСчет");
		ТаблицаСоответствияСчетов.НоваяКолонка("ЗаменяющийСчет");
		ТаблицаСоответствияСчетов.НоваяСтрока();
		ТаблицаСоответствияСчетов.ИсходныйСчет = СчетПоКоду("44.1");
		ТаблицаСоответствияСчетов.ЗаменяющийСчет = СчетПоКоду("44.1.1");
		ТаблицаСоответствияСчетов.НоваяСтрока();
		ТаблицаСоответствияСчетов.ИсходныйСчет = СчетПоКоду("69.2");
		ТаблицаСоответствияСчетов.ЗаменяющийСчет = СчетПоКоду("69.2.1");
		ТаблицаСоответствияСчетов.НоваяСтрока();
		ТаблицаСоответствияСчетов.ИсходныйСчет = СчетПоКоду("76.1");
		ТаблицаСоответствияСчетов.ЗаменяющийСчет = СчетПоКоду("76.1.1");
		ТаблицаСоответствияСчетов.НоваяСтрока();
		ТаблицаСоответствияСчетов.ИсходныйСчет = СчетПоКоду("90.1");
		ТаблицаСоответствияСчетов.ЗаменяющийСчет = СчетПоКоду("90.1.1");
		ТаблицаСоответствияСчетов.НоваяСтрока();
		ТаблицаСоответствияСчетов.ИсходныйСчет = СчетПоКоду("90.2");
		ТаблицаСоответствияСчетов.ЗаменяющийСчет = СчетПоКоду("90.2.1");
		ТаблицаСоответствияСчетов.НоваяСтрока();
		ТаблицаСоответствияСчетов.ИсходныйСчет = СчетПоКоду("90.7");
		ТаблицаСоответствияСчетов.ЗаменяющийСчет = СчетПоКоду("90.7.1");
		ТаблицаСоответствияСчетов.НоваяСтрока();
		ТаблицаСоответствияСчетов.ИсходныйСчет = СчетПоКоду("90.8");
		ТаблицаСоответствияСчетов.ЗаменяющийСчет = СчетПоКоду("90.8.1");
		ТаблицаСоответствияСчетов.НоваяСтрока();
		ТаблицаСоответствияСчетов.ИсходныйСчет = СчетПоКоду("ВР");
		ТаблицаСоответствияСчетов.ЗаменяющийСчет = СчетПоКоду("ВР.1");
		ТаблицаСоответствияСчетов.НоваяСтрока();
		ТаблицаСоответствияСчетов.ИсходныйСчет = СчетПоКоду("ВР");
		ТаблицаСоответствияСчетов.ЗаменяющийСчет = СчетПоКоду("ВР.1");
	
		Сч = СоздатьОбъект("Счет." + ВыбранныйПланСчетов().Идентификатор());
		Сч76_Н = СчетПоКоду("76.Н");
		Сч69_2_1 = СчетПоКоду("69.2.1");
		Сч69_3 = СчетПоКоду("69.3");
		Сч68 = СчетПоКоду("68");
		Опер = СоздатьОбъект("Операция");
		Опер1 = СоздатьОбъект("Операция");
		Опер.ВыбратьОперации(,);
		Пока Опер.ПолучитьОперацию() = 1 Цикл
			ОперацияИзменена = 0;
			Опер1.НайтиОперацию(Опер.Документ);
			Опер1.ВыбратьПроводки();
			Пока Опер1.ПолучитьПроводку() = 1 Цикл
				СчетДт = Опер1.Дебет.Счет;
				СчетКт = Опер1.Кредит.Счет;
				Опер1.Дебет.Счет = ПреобразованиеСчета(Опер1.Дебет.Счет);
				Опер1.Кредит.Счет = ПреобразованиеСчета(Опер1.Кредит.Счет);
				Если (СчетДт <> Опер1.Дебет.Счет) или (СчетКт <> Опер1.Кредит.Счет) Тогда
				    ОперацияИзменена = 1;
				КонецЕсли;
				
				Если (Опер1.Дебет.Счет.ПринадлежитГруппе(Сч68) = 1) или 
					 (Опер1.Дебет.Счет = Сч69_2_1) или 
					 (Опер1.Дебет.Счет = Сч69_3) Тогда
				    Опер1.Дебет.ВидыПлатежейВБюджет = Перечисление.ВидыПлатежейВБюджет.Налог;
					ОперацияИзменена = 1;
				КонецЕсли;
				Если (Опер1.Кредит.Счет.ПринадлежитГруппе(Сч68) = 1) или 
					 (Опер1.Кредит.Счет = Сч69_2_1) или 
					 (Опер1.Кредит.Счет = Сч69_3) Тогда
				    Опер1.Кредит.ВидыПлатежейВБюджет = Перечисление.ВидыПлатежейВБюджет.Налог;
					ОперацияИзменена = 1;
				КонецЕсли;
			КонецЦикла;
			Если ОперацияИзменена = 1 Тогда
			    Опер1.Записать();
			КонецЕсли;
		КонецЦикла;
		
		Состояние("Корректировка плана счетов");
		ЗаписатьПолноеНаименование("16.3"  , "Отклонение в стоимости оборудования к установке");
		ЗаписатьПолноеНаименование("44.1.1", "Издержки обращения в организациях, осуществляющих торговую деятельность, не облагаемую ЕНВД");
		ЗаписатьПолноеНаименование("44.1.2", "Издержки обращения в организациях, осуществляющих торговую деятельность, облагаемую ЕНВД");
		ЗаписатьПолноеНаименование("44.1.3", "Издержки обращения в организациях, осуществляющих торговую деятельность, требующие распределения по видам деятельности");
		ЗаписатьПолноеНаименование("76.Н.1", "Расчеты по налогу на добавленную стоимость, отложенному для уплаты в бюджет");
		ЗаписатьПолноеНаименование("76.Н.2", "Расчеты по акцизам, отложенным для уплаты в бюджет");
		ЗаписатьПолноеНаименование("76.Н.4", "Расчеты по налогу с продаж, отложенному для уплаты в бюджет");
		ЗаписатьПолноеНаименование("90.1.1", "Выручка от продаж, не облагаемых ЕНВД");
		ЗаписатьПолноеНаименование("90.1.2", "Выручка от продаж, облагаемых ЕНВД");
		ЗаписатьПолноеНаименование("90.2.1", "Себестоимость продаж, не облагаемых ЕНВД");
		ЗаписатьПолноеНаименование("90.2.2", "Себестоимость продаж, облагаемых ЕНВД");
		ЗаписатьПолноеНаименование("90.7.1", "Расходы на продажу, не облагаемую ЕНВД");
		ЗаписатьПолноеНаименование("90.7.2", "Расходы на продажу, облагаемую ЕНВД");
		ЗаписатьПолноеНаименование("90.8.1", "Управленческие расходы по видам деятельности, не облагаемым ЕНВД");
		ЗаписатьПолноеНаименование("90.8.2", "Управленческие расходы по видам деятельности, облагаемым ЕНВД");
		ЗаписатьПолноеНаименование("ВР.1"  , "Выполнение работ (в рублях)");
		ЗаписатьПолноеНаименование("ВР.11" , "Выполнение работ (в валюте)");
		ЗаписатьПолноеНаименование("КН"    , "Корректировка налоговой базы налога на доходы физических лиц");
		ЗаписатьПолноеНаименование("НБ"    , "Доходы физических лиц, облагаемые единым социальным налогом");
		
		ДвижениеДенСредств = СоздатьОбъект("Справочник.ДвиженияДенежныхСредств");
		ДвижениеДенСредств.ВыбратьЭлементы();
		Пока ДвижениеДенСредств.ПолучитьЭлемент() = 1 Цикл
		    Если ДвижениеДенСредств.ВидДвижения = Перечисление.ВидыДвиженийДенежныхСредств.ВыручкаПоОбычнымВидамДеятельности Тогда
				ДвижениеДенСредств.НазначитьТип("Субконто1", "Справочник.Контрагенты");
				ДвижениеДенСредств.НазначитьТип("Субконто2", "Справочник.Договоры");
				ДвижениеДенСредств.Записать();
				
			ИначеЕсли ДвижениеДенСредств.ВидДвижения = Перечисление.ВидыДвиженийДенежныхСредств.ПриобретениеТоваровПродукцииРаботИУслуг Тогда
				ДвижениеДенСредств.НазначитьТип("Субконто1", "Справочник.Контрагенты");
				ДвижениеДенСредств.НазначитьТип("Субконто2", "Справочник.Договоры");
				ДвижениеДенСредств.Записать();
			КонецЕсли;
		КонецЦикла;
		
		Состояние("Обработка бухгалтерских итогов");
		СчНБ = СчетПоКоду("НБ");
		СчКН = СчетПоКоду("КН");
		Сч00 = СчетПоКоду("00");
		Сч69_1 = СчетПоКоду("69.1");
		Сч69_11 = СчетПоКоду("69.11");
		Сч84 = СчетПоКоду("84");
		Сотрудник = СоздатьОбъект("Справочник.Сотрудники");
		БухИт = СоздатьОбъект("БухгалтерскиеИтоги");
		БухИт.ВключатьСубсчета(0, 1);
		БухИт.ИспользоватьСубконто(ВидыСубконто.Сотрудники);
		БухИт.ВыполнитьЗапрос('01.01.2001', КонМесяца(РабочаяДата()), "70",,, 2, "Месяц", "С");
		БухИт.ВыбратьПериоды(1);
		Пока БухИт.ПолучитьПериод() = 1 Цикл
			НоваяОперация = 0;
			Сотрудник.ВыбратьЭлементы();
			Пока Сотрудник.ПолучитьЭлемент() = 1 Цикл
				НачисленоПособийЗаМесяц = 0;
				НачисленоИзЧистойПрибылиЗаМесяц = 0;
				НачисленоПоДоговоруПодряда = 0;
				
			    ЕстьИтоги = БухИт.ПолучитьСубконто(ВидыСубконто.Сотрудники,, Сотрудник);
				ДополнительныйДоходЗаМесяц = Сотрудник.ДополнительныйДоход.Получить(БухИт.КонДата) -
					?(ДатаМесяц(БухИт.КонДата)=1, 0, Сотрудник.ДополнительныйДоход.Получить(БухИт.НачДата-1));

				НачисленоЗаМесяц = ?(ЕстьИтоги = 1, БухИт.КО(), 0) + ДополнительныйДоходЗаМесяц;
				Если ЕстьИтоги = 1 Тогда
					Если БухИт.ПолучитьКорСчет(, Сч00) = 1 Тогда
						НачисленоЗаМесяц = НачисленоЗаМесяц - БухИт.КорКО();
					КонецЕсли;
					
					Если БухИт.ПолучитьКорСчет(, Сч69_1) = 1 Тогда
						НачисленоПособийЗаМесяц = БухИт.КорКО();
					КонецЕсли;
					
					Если БухИт.ПолучитьКорСчет(, Сч69_11) = 1 Тогда
						НачисленоПособийЗаМесяц = НачисленоПособийЗаМесяц + БухИт.КорКО();
					КонецЕсли;
					
					Если БухИт.ПолучитьКорСчет(, Сч84) = 1 Тогда
						НачисленоИзЧистойПрибылиЗаМесяц = БухИт.КорКО();
					КонецЕсли;
					
					Если Сотрудник.ТипСотрудника.Получить(БухИт.КонДата) = 2 Тогда
						НачисленоПоДоговоруПодряда = НачисленоЗаМесяц - НачисленоИзЧистойПрибылиЗаМесяц;
					КонецЕсли;
				КонецЕсли;
				
				Если (НачисленоЗаМесяц + НачисленоИзЧистойПрибылиЗаМесяц) = 0 Тогда
				ИначеЕсли НоваяОперация = 0 Тогда
					НоваяОперация = 1;
				    Опер.Новая();
					Опер.ДатаОперации = БухИт.КонДата;
					Опер.Документ.УстановитьНовыйНомер("");
					Опер.Содержание = "Ввод оборотов по счетам КН и НБ";
				КонецЕсли;
				
				Если (НачисленоЗаМесяц - НачисленоИзЧистойПрибылиЗаМесяц) = 0 Тогда
				Иначе
				    Опер.НоваяПроводка(); Опер.РазделительУчета = Константа.ОсновноеЮрЛицо;
					Опер.Кредит.Счет = СчНБ;
					Опер.Кредит.Сотрудники = Сотрудник.ТекущийЭлемент();
					Опер.Кредит.ВидыНачислений = Перечисление.ВидыНачислений.ОбъектНалогообложения;
					Опер.Сумма = НачисленоЗаМесяц - НачисленоИзЧистойПрибылиЗаМесяц;
					Опер.НомерЖурнала = "ЗП";
					Опер.СодержаниеПроводки = "Начислено за " + ПериодСтр(БухИт.НачДата, БухИт.КонДата);
				КонецЕсли;
				
				Если НачисленоИзЧистойПрибылиЗаМесяц = 0 Тогда
				Иначе
				    Опер.НоваяПроводка(); Опер.РазделительУчета = Константа.ОсновноеЮрЛицо;
					Опер.Кредит.Счет = СчНБ;
					Опер.Кредит.Сотрудники = Сотрудник.ТекущийЭлемент();
					Опер.Кредит.ВидыНачислений = Перечисление.ВидыНачислений.ИзСредствОрганизации;
					Опер.Сумма = НачисленоИзЧистойПрибылиЗаМесяц;
					Опер.НомерЖурнала = "ЗП";
					Опер.СодержаниеПроводки = "Начислено за " + ПериодСтр(БухИт.НачДата, БухИт.КонДата);
				КонецЕсли;
				
				Если НачисленоПособийЗаМесяц = 0 Тогда
				Иначе
				    Опер.НоваяПроводка(); Опер.РазделительУчета = Константа.ОсновноеЮрЛицо;
					Опер.Кредит.Счет = СчНБ;
					Опер.Кредит.Сотрудники = Сотрудник.ТекущийЭлемент();
					Опер.Кредит.ВидыНачислений = Перечисление.ВидыНачислений.ЗаСчетФСС;
					Опер.Сумма = НачисленоПособийЗаМесяц;
					Опер.НомерЖурнала = "ЗП";
					Опер.СодержаниеПроводки = "Начислено за " + ПериодСтр(БухИт.НачДата, БухИт.КонДата);
				КонецЕсли;
				
				Если НачисленоПоДоговоруПодряда = 0 Тогда
				Иначе
				    Опер.НоваяПроводка(); Опер.РазделительУчета = Константа.ОсновноеЮрЛицо;
					Опер.Кредит.Счет = СчНБ;
					Опер.Кредит.Сотрудники = Сотрудник.ТекущийЭлемент();
					Опер.Кредит.ВидыНачислений = Перечисление.ВидыНачислений.НеОблагаетсяФСС;
					Опер.Сумма = НачисленоПоДоговоруПодряда;
					Опер.НомерЖурнала = "ЗП";
					Опер.СодержаниеПроводки = "Начислено за " + ПериодСтр(БухИт.НачДата, БухИт.КонДата);
				КонецЕсли;
				
				Если ДополнительныйДоходЗаМесяц = 0 Тогда
				Иначе
				    Опер.НоваяПроводка(); Опер.РазделительУчета = Константа.ОсновноеЮрЛицо;
					Опер.Кредит.Счет = СчКН;
					Опер.Кредит.Сотрудники = Сотрудник.ТекущийЭлемент();
					Опер.Сумма = ДополнительныйДоходЗаМесяц;
					Опер.НомерЖурнала = "ЗП";
					Опер.СодержаниеПроводки = "Начислено за " + ПериодСтр(БухИт.НачДата, БухИт.КонДата);
				КонецЕсли;
			
				Если НоваяОперация = 1 Тогда
				    Опер.СуммаОперации = Опер.СуммаОперации + НачисленоЗаМесяц - НачисленоИзЧистойПрибылиЗаМесяц;
				КонецЕсли;
			КонецЦикла;
			
			Если НоваяОперация = 1 Тогда
				Опер.Записать();
			КонецЕсли;
		КонецЦикла;
                   
		Сч00 = СчетПоКоду("00");
		Сч08_4 = СчетПоКоду("08.4");
		БухИт = СоздатьОбъект("БухгалтерскиеИтоги");
		БухИт.ИспользоватьСубконто(ВидыСубконто.ОбъектыСтроительства);
		БухИт.ВыполнитьЗапрос('01.01.2001', КонМесяца(РабочаяДата()), "08.4");
		БухИт.ВыбратьСубконто();
		НоваяОперация = 0;
		Пока БухИт.ПолучитьСубконто() = 1 Цикл
		    Если ПустоеЗначение(БухИт.Субконто()) = 1 Тогда
		        Продолжить;
				
			ИначеЕсли БухИт.СКД() = 0 Тогда
				Продолжить;
				
			Иначе
				Если НоваяОперация = 0 Тогда
				    Опер.Новая();
					Опер.Содержание = "Ввод остатков по счету 08.4";
					НоваяОперация = 1;
				КонецЕсли;
				
				Опер.НоваяПроводка(); Опер.РазделительУчета = Константа.ОсновноеЮрЛицо;
				Опер.НомерЖурнала = "ОС";
				Опер.СодержаниеПроводки = "Указано количество";
				Опер.Дебет.Счет = Сч08_4;
				Опер.Дебет.ОбъектыСтроительства = БухИт.Субконто();
				Опер.Кредит.Счет = Сч00;
				Опер.Количество = 1;
		    КонецЕсли;
		КонецЦикла;
		
		Если НоваяОперация = 1 Тогда
			Опер.Записать();
		КонецЕсли;
		
		Таб.ВывестиСекцию(Строка(Номер));
		
	ИначеЕсли Номер = 770422 Тогда
		
		Состояние("Обновление плана счетов");
		Сч = СоздатьОбъект("Счет." + ВыбранныйПланСчетов().Идентификатор());
		ЗаписатьПолноеНаименование("76.1.1", "Расчеты по имущественному страхованию");
		ЗаписатьПолноеНаименование("76.1.2", "Расчеты по договорам долгосрочного страхования жизни работников, пенсионного страхования и (или) негосударственного пенсионного обеспечения работников");
		ЗаписатьПолноеНаименование("76.1.3", "Расчеты по договорам добровольного личного страхования, предусматривающим оплату страховщиками медицинских расходов застрахованных работников");
		ЗаписатьПолноеНаименование("76.1.4", "Расчеты по договорам добровольного личного страхования, заключаемым исключительно на случай наступления смерти застрахованного работника или утраты застрахованным работником трудоспособности в связи с исполнением им трудовых обязанностей");
		
		Таб.ВывестиСекцию(Строка(Номер));
		
	ИначеЕсли Номер = 770423 Тогда
		
		// Замена кодов счетов и типов аналитики в формах документов.
		Если ОбработкаСчетовВДокументахВыполнена = 0 Тогда
			ОбработкаСчетовВДокументах();
		КонецЕсли;
		
		Состояние("Установка значений констант");
		СписокСчетов = """66.11"",""66.22"",""66.33"",""66.44"",""67.11"",""67.22"",""67.33"",""67.44""";
		Константа.СчетаПереоцениваемыеВОсобомПорядке.Установить('01.01.2002', СписокСчетов);
		
		Состояние("Обработка справочника ""Сотрудники""");
		ВыбраннаяСтатьяЗатрат = СоздатьОбъект("Периодический");
		ДобавленныеСтатьиЗатрат = СоздатьОбъект("ТаблицаЗначений");
		ДобавленныеСтатьиЗатрат.НоваяКолонка("НалогиИСборы");
		ДобавленныеСтатьиЗатрат.НоваяКолонка("ЕСН");
		Сотр = СоздатьОбъект("Справочник.Сотрудники");
		Сотр.ВыбратьЭлементы();
		Пока Сотр.ПолучитьЭлемент() = 1 Цикл
		    Если Сотр.ЭтоГруппа() = 1 Тогда
		        Продолжить;
			Иначе
				ВыбраннаяСтатьяЗатрат.ИспользоватьОбъект("СтатьяОтчисленийНаСоцНужды", Сотр.ТекущийЭлемент());
				ВыбраннаяСтатьяЗатрат.ВыбратьЗначения(,);
				Пока ВыбраннаяСтатьяЗатрат.ПолучитьЗначение() = 1 Цикл
					ПоискДобавленнойСтатьиЗатрат(ДобавленныеСтатьиЗатрат, ВыбраннаяСтатьяЗатрат.Значение);
					Если ВыбраннаяСтатьяЗатрат.ДатаЗнач >= '01.01.2002' Тогда
						Сотр.СтатьяПрочихОтчисленийНаСоцНужды.Установить(ВыбраннаяСтатьяЗатрат.ДатаЗнач, ДобавленныеСтатьиЗатрат.НалогиИСборы);
						
					ИначеЕсли ПустоеЗначение(ДобавленныеСтатьиЗатрат.НалогиИСборы) = 0 Тогда
						ПустаяСтатья = ПолучитьПустоеЗначение("Справочник."+ДобавленныеСтатьиЗатрат.НалогиИСборы.Вид());
						Сотр.СтатьяПрочихОтчисленийНаСоцНужды.Установить(ВыбраннаяСтатьяЗатрат.ДатаЗнач, ПустаяСтатья);
					КонецЕсли;
				КонецЦикла;
				СтатьяЗатратНа_01_01_2002 = Сотр.СтатьяОтчисленийНаСоцНужды.Получить('01.01.2002');
				ПоискДобавленнойСтатьиЗатрат(ДобавленныеСтатьиЗатрат, СтатьяЗатратНа_01_01_2002);
				Сотр.СтатьяПрочихОтчисленийНаСоцНужды.Установить('01.01.2002', ДобавленныеСтатьиЗатрат.НалогиИСборы);
			КонецЕсли;
		КонецЦикла;
		
		Состояние("Обработка документов ""Начисление зарплаты""");
		Док = СоздатьОбъект("Документ.НачислениеЗП");
		Док.ВыбратьДокументы(,);
		Пока Док.ПолучитьДокумент() = 1 Цикл
		    ПоискДобавленнойСтатьиЗатрат(ДобавленныеСтатьиЗатрат, Док.СтатьяОтчисленийНаСоцНужды);
			Если Док.ДатаДок >= '01.01.2002' Тогда
			    Док.СтатьяПрочихОтчисленийНаСоцНужды = ДобавленныеСтатьиЗатрат.НалогиИСборы;
				
			ИначеЕсли ПустоеЗначение(ДобавленныеСтатьиЗатрат.НалогиИСборы) = 0 Тогда
				ПустаяСтатья = ПолучитьПустоеЗначение("Справочник."+ДобавленныеСтатьиЗатрат.НалогиИСборы.Вид());
				Док.СтатьяПрочихОтчисленийНаСоцНужды = ПустаяСтатья;
			КонецЕсли;
			Док.Записать();
		КонецЦикла;
		
		НеКомментировать = ВосстановитьЗначение("НеКомментироватьВыполняемыеДействия");
		СохранитьЗначение("НеКомментироватьВыполняемыеДействия", 1);
		Состояние("Обработка кадровых приказов");
		Док = СоздатьОбъект("Документ");
		Док.ВыбратьДокументы(,);
		Пока Док.ПолучитьДокумент() = 1 Цикл
			Если (Док.Вид() = "ПриказОПриемеНаРаботу") или (Док.Вид() = "ПриказОКадровыхИзменениях") Тогда
			    ПоискДобавленнойСтатьиЗатрат(ДобавленныеСтатьиЗатрат, Док.СтатьяОтчисленийНаСоцНужды);
				Если Док.ДатаДок >= '01.01.2002' Тогда
				    Док.СтатьяПрочихОтчисленийНаСоцНужды = ДобавленныеСтатьиЗатрат.НалогиИСборы;
					
				ИначеЕсли ПустоеЗначение(ДобавленныеСтатьиЗатрат.НалогиИСборы) = 0 Тогда
					ПустаяСтатья = ПолучитьПустоеЗначение("Справочник."+ДобавленныеСтатьиЗатрат.НалогиИСборы.Вид());
					Док.СтатьяПрочихОтчисленийНаСоцНужды = ПустаяСтатья;
				КонецЕсли;
				
				Док.Записать();
				Если (Док.Проведен() = 1) и (Док.ДатаДок >= '01.01.2002') Тогда
			        Док.Провести(, 1);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		СохранитьЗначение("НеКомментироватьВыполняемыеДействия", НеКомментировать);
		
		Состояние("Обновление справочника ""Валюты""");
		Валюты = СоздатьОбъект("Справочник.Валюты");
		Если Валюты.НайтиПоКоду("978") = 0 Тогда
			Валюты.Новый();
			Валюты.Код = "978";
			Валюты.Наименование = "EUR";
			Валюты.ПолнНаименование = "Евро";
			Валюты.ИмяФайлаПрописи = "EUR.spl";
			Валюты.Записать();
			Валюты.Кратность.Установить('01.01.1980',1);
			Валюты.Курс.Установить('01.01.2002', 26.6172);
		КонецЕсли;
		
		Состояние("Запись полных наименований счетов");
		Сч = СоздатьОбъект("Счет." + ВыбранныйПланСчетов().Идентификатор());
		ЗаписатьПолноеНаименование("Н01"   , "Формирование стоимости объекта учета");
		ЗаписатьПолноеНаименование("Н01.01", "Формирование стоимости объектов внеоборотных активов");
		ЗаписатьПолноеНаименование("Н01.02", "Учет стоимости оборудования");
		ЗаписатьПолноеНаименование("Н01.03", "Формирование расходов на НИОКР");
		ЗаписатьПолноеНаименование("Н01.04", "Формирование расходов на освоение природных ресурсов");
		ЗаписатьПолноеНаименование("Н01.05", "Формирование прямых расходов на производство товаров (работ, услуг) основного производства");
		ЗаписатьПолноеНаименование("Н01.06", "Формирование прямых расходов на производство товаров (работ, услуг) основного производства, подлежащих распределению");
		ЗаписатьПолноеНаименование("Н01.07", "Транспортные расходы по доставке покупных товаров");
		ЗаписатьПолноеНаименование("Н02"   , "Движение имущества, прав");
		ЗаписатьПолноеНаименование("Н02.01", "Поступление и выбытие материалов");
		ЗаписатьПолноеНаименование("Н02.02", "Поступление и выбытие товаров");
		ЗаписатьПолноеНаименование("Н02.03", "Поступление и выбытие готовой продукции");
		ЗаписатьПолноеНаименование("Н02.04", "Товары отгруженные");
		ЗаписатьПолноеНаименование("Н02.05", "Поступление и выбытие ценных бумаг");
		ЗаписатьПолноеНаименование("Н02.06", "Приобретение прав в рамках оказания финансовых услуг");
		ЗаписатьПолноеНаименование("Н03"   , "Нормируемые расходы");
		ЗаписатьПолноеНаименование("Н03.01", "Расходы на гарантийный ремонт и обслуживание");
		ЗаписатьПолноеНаименование("Н03.02", "Расходы на ремонт основных средств");
		ЗаписатьПолноеНаименование("Н03.03", "Представительские расходы");
		ЗаписатьПолноеНаименование("Н03.04", "Расходы на рекламу");
		ЗаписатьПолноеНаименование("Н03.05", "Добровольное страхование по договорам долгосрочного страхования жизни работников, пенсионного страхования и (или) негосударственного пенсионного обеспечения работников");
		ЗаписатьПолноеНаименование("Н03.06", "Добровольное личное страхование, предусматривающее оплату страховщиками медицинских расходов");
		ЗаписатьПолноеНаименование("Н03.07", "Договоры добровольного личного страхования, заключаемые исключительно на случай наступления смерти или утраты трудоспособности");
		ЗаписатьПолноеНаименование("Н03.08", "Резервы по сомнительным долгам");
		ЗаписатьПолноеНаименование("Н04"   , "Расходы будущих периодов");
		ЗаписатьПолноеНаименование("Н04.01", "Расходы будущих периодов на ремонт основных средств");
		ЗаписатьПолноеНаименование("Н04.02", "Отрицательный результат от реализации амортизируемого имущества");
		ЗаписатьПолноеНаименование("Н04.03", "Расходы на НИОКР");
		ЗаписатьПолноеНаименование("Н04.04", "Расходы на освоение природных ресурсов");
		ЗаписатьПолноеНаименование("Н04.05", "Расходы будущих периодов по добровольному страхованию по договорам долгосрочного страхования жизни работников, пенсионного страхования и (или) негосударственного пенсионного обеспечения работников");
		ЗаписатьПолноеНаименование("Н04.06", "Расходы будущих периодов по добровольному личному страхованию, предусматривающему оплату страховщиками медицинских расходов");
		ЗаписатьПолноеНаименование("Н04.07", "Расходы будущих периодов по договорам добровольного личного страхования, заключаемым исключительно на случай наступления смерти или утраты трудоспособности");
		ЗаписатьПолноеНаименование("Н04.08", "Расходы будущих периодов по страхованию имущества");
		ЗаписатьПолноеНаименование("Н04.09", "Прочие расходы будущих периодов");
		ЗаписатьПолноеНаименование("Н05"   , "Амортизируемое имущество");
		ЗаписатьПолноеНаименование("Н05.01", "Первоначальная  стоимость основных средств");
		ЗаписатьПолноеНаименование("Н05.02", "Сумма начисленной амортизации основных средств");
		ЗаписатьПолноеНаименование("Н05.03", "Первоначальная  стоимость нематериальных активов");
		ЗаписатьПолноеНаименование("Н05.04", "Сумма начисленной амортизации нематериальных активов");
		ЗаписатьПолноеНаименование("Н06"   , "Доходы от реализации имущества, работ, услуг, прав");
		ЗаписатьПолноеНаименование("Н06.01", "Выручка от реализации товаров (работ, услуг) собственного производства");
		ЗаписатьПолноеНаименование("Н06.02", "Выручка от реализации имущественных прав, за исключением доходов от реализации уступки права требования, согласно статье 279 НК");
		ЗаписатьПолноеНаименование("Н06.03", "Выручка от реализации прочего имущества");
		ЗаписатьПолноеНаименование("Н06.04", "Выручка от реализации покупных товаров");
		ЗаписатьПолноеНаименование("Н06.05", "Выручка от реализации основных средств");
		ЗаписатьПолноеНаименование("Н06.06", "Выручка от реализации нематериальных активов");
		ЗаписатьПолноеНаименование("Н06.07", "Выручка от реализации права требования в рамках осуществления финансовых услуг");
		ЗаписатьПолноеНаименование("Н06.08", "Выручка от реализации уступки права требования согласно статье 279 НК до наступления срока платежа");
		ЗаписатьПолноеНаименование("Н06.09", "Выручка от реализации уступки права требования согласно статье 279 НК после наступления срока платежа");
		ЗаписатьПолноеНаименование("Н06.10", "Выручка от реализации товаров (работ, услуг) по объектам обслуживающих производств и хозяйств, включая объекты жилищно-коммунальной и социально-культурной сферы");
		ЗаписатьПолноеНаименование("Н07"   , "Расходы, связанные с реализацией имущества, работ, услуг, прав");
		ЗаписатьПолноеНаименование("Н07.01", "Прямые расходы организаций, осуществляющих производство и реализацию товаров, реализацию имущественных прав");
		ЗаписатьПолноеНаименование("Н07.02", "Прямые расходы организаций, осуществляющих деятельность в области оказания услуг, выполнения работ");
		ЗаписатьПолноеНаименование("Н07.03", "Прямые расходы налогоплательщиков, осуществляющих оптовую, мелкооптовую и розничную торговлю");
		ЗаписатьПолноеНаименование("Н07.04", "Косвенные расходы");
		ЗаписатьПолноеНаименование("Н07.05", "Стоимость реализованных покупных товаров");
		ЗаписатьПолноеНаименование("Н07.06", "Стоимость реализованного прочего имущества, в том числе расходы, связанные с его реализацией");
		ЗаписатьПолноеНаименование("Н07.07", "Стоимость реализованных основных средств, в том числе расходы, связанные с их реализацией");
		ЗаписатьПолноеНаименование("Н07.08", "Стоимость реализованных нематериальных активов, в том числе расходы, связанные с их реализацией");
		ЗаписатьПолноеНаименование("Н07.09", "Стоимость реализованного права требования в рамках оказания финансовых услуг");
		ЗаписатьПолноеНаименование("Н07.10", "Стоимость реализованного права требования в соответствии с п.п. 1, 2 статьи 279 НК до наступления срока платежа");
		ЗаписатьПолноеНаименование("Н07.11", "Стоимость реализованного права требования в соответствии с п.п. 1, 2 статьи 279 НК после наступления срока платежа");
		ЗаписатьПолноеНаименование("Н07.12", "Суммы процентов, которую налогоплательщик уплатил бы по статье 279 НК п.1, исчисленных в соответствии со статьей 269");
		ЗаписатьПолноеНаименование("Н07.13", "Расходы, понесенные обслуживающими производствами и хозяйствами при реализации ими товаров (работ, услуг)");
		ЗаписатьПолноеНаименование("Н08"   , "Внереализационные доходы");
		ЗаписатьПолноеНаименование("Н09"   , "Внереализационные расходы");
		ЗаписатьПолноеНаименование("Н10"   , "Убытки прошлых лет по объектам обслуживающих производств");
		ЗаписатьПолноеНаименование("Н11"   , "Убытки прошлых лет");
		ЗаписатьПолноеНаименование("Н11.97", "Убытки за 1997 год");
		ЗаписатьПолноеНаименование("Н11.98", "Убытки за 1998 год");
		ЗаписатьПолноеНаименование("Н11.99", "Убытки за 1999 год");
		ЗаписатьПолноеНаименование("Н11.00", "Убытки за 2000 год");
		ЗаписатьПолноеНаименование("Н11.01", "Убытки за 2001 год");
		ЗаписатьПолноеНаименование("Н12"   , "Учет целевого финансирования");
		ЗаписатьПолноеНаименование("Н13"   , "Движение дебиторской и кредиторской задолженности");
		ЗаписатьПолноеНаименование("Н13.01", "Движение дебиторской задолженности");
		ЗаписатьПолноеНаименование("Н13.02", "Движение кредиторской задолженности");
		ЗаписатьПолноеНаименование("Н13.03", "НДС по кредиторской задолженности");
		
		ЗаписатьПолноеНаименование("Н01.1", "Первоначальная  стоимость основных средств учитывается по счету Н05.01");
		ЗаписатьПолноеНаименование("Н01.2", "Сумма начисленной амортизации основных средств учитывается по счету Н05.02");
		ЗаписатьПолноеНаименование("Н04.1", "Первоначальная  стоимость нематериальных активов учитывается по счету Н05.03");
		ЗаписатьПолноеНаименование("Н04.2", "Сумма начисленной амортизации нематериальных активов учитывается по счету Н05.04");
		
		Состояние("Обработка документов");
		СоздатьДокументыЗаПериод("ПоступленияДенежныхСредств", "ДатаПоступления", "ОснованиеПоступления");
		СоздатьДокументыЗаПериод("РасходДенежныхСредств", "ДатаРасхода", "ОснованиеРасхода");
		СоздатьДокументыЗаПериод("ОперацииПриобретенияИмущества", "ДатаПолучения", "ОснованиеПолучения");
		СоздатьДокументыЗаПериод("ОперацииВыбытияИмущества", "ДатаВыбытия", "ОснованиеВыбытия");
		
		Состояние("Обновление операций");
		ТаблицаСоответствияСчетов = Создатьобъект("ТаблицаЗначений");
		ТаблицаСоответствияСчетов.НоваяКолонка("ИсходныйСчет");
		ТаблицаСоответствияСчетов.НоваяКолонка("ЗаменяющийСчет");
		ТаблицаСоответствияСчетов.НоваяСтрока();
		ТаблицаСоответствияСчетов.ИсходныйСчет = СчетПоКоду("Н01.1");
		ТаблицаСоответствияСчетов.ЗаменяющийСчет = СчетПоКоду("Н05.01");
		ТаблицаСоответствияСчетов.НоваяСтрока();
		ТаблицаСоответствияСчетов.ИсходныйСчет = СчетПоКоду("Н01.2");
		ТаблицаСоответствияСчетов.ЗаменяющийСчет = СчетПоКоду("Н05.02");
		ТаблицаСоответствияСчетов.НоваяСтрока();
		ТаблицаСоответствияСчетов.ИсходныйСчет = СчетПоКоду("Н04.1");
		ТаблицаСоответствияСчетов.ЗаменяющийСчет = СчетПоКоду("Н05.03");
		ТаблицаСоответствияСчетов.НоваяСтрока();
		ТаблицаСоответствияСчетов.ИсходныйСчет = СчетПоКоду("Н04.2");
		ТаблицаСоответствияСчетов.ЗаменяющийСчет = СчетПоКоду("Н05.04");
	
		Опер = СоздатьОбъект("Операция");
		Опер1 = СоздатьОбъект("Операция");
		Опер.ВыбратьОперации(,);
		Фильтр = "Н01.1,*;*,Н01.1;Н01.2,*;*,Н01.2;Н04.1,*;*,Н04.1;Н04.2,*;*,Н04.2";
		Опер.ВыбратьОперацииСПроводками(,, Фильтр);
		Пока Опер.ПолучитьОперацию() = 1 Цикл
			ОперацияИзменена = 0;
			Опер1.НайтиОперацию(Опер.Документ);
			Опер1.ВыбратьПроводки();
			Пока Опер1.ПолучитьПроводку() = 1 Цикл
				Если Опер1.Дебет.Счет = СчетПоКоду("Н04.1") Тогда
				    НМА = Опер1.Дебет.Субконто(2);
				ИначеЕсли Опер1.Кредит.Счет = СчетПоКоду("Н04.2") Тогда
				    НМА = Опер1.Кредит.Субконто(2);
				КонецЕсли;
				СчетДт = Опер1.Дебет.Счет;
				СчетКт = Опер1.Кредит.Счет;
				Опер1.Дебет.Счет = ПреобразованиеСчета(Опер1.Дебет.Счет);
				Опер1.Кредит.Счет = ПреобразованиеСчета(Опер1.Кредит.Счет);
				Если (СчетДт <> Опер1.Дебет.Счет) или (СчетКт <> Опер1.Кредит.Счет) Тогда
					Если Опер1.Дебет.Счет = СчетПоКоду("Н05.03") Тогда
					    Опер1.Дебет.Субконто(1, НМА);
					ИначеЕсли Опер1.Кредит.Счет = СчетПоКоду("Н05.04") Тогда
					    Опер1.Кредит.Субконто(1, НМА);
					КонецЕсли;
				    ОперацияИзменена = 1;
				КонецЕсли;
			КонецЦикла;
			Если ОперацияИзменена = 1 Тогда
			    Опер1.Записать();
			КонецЕсли;
		КонецЦикла;
		
		Таб.ВывестиСекцию(Строка(Номер));
		
	ИначеЕсли Номер = 770424 Тогда
		
		// Замена кодов счетов и типов аналитики в формах документов.
		Если ОбработкаСчетовВДокументахВыполнена = 0 Тогда
		    ОбработкаСчетовВДокументах();
		КонецЕсли;
		
		Состояние("Обновление справочника ""Налоги и отчисления""");
		Шкала = СоздатьОбъект("Справочник.СтавкиНалогов");
		ЕСН = СоздатьОбъект("Справочник.НалогиИОтчисления");
		
		Если ЕСН.НайтиПоКоду("ПФР") = 1 Тогда
			ЕСН.Код = "ЕСН_ФБ";
			ЕСН.Записать();
			РегистрационныйНомерПФР = ЕСН.РегНомер;
		КонецЕсли;
		глПолучитьНалог("ЕСН_ФБ", 1);
		ПФР = СоздатьОбъект("Справочник.НалогиИОтчисления");
		ПФР.НайтиЭлемент(глПолучитьНалог("ПФР_страх", 1));
		ПФР.РегНомер = РегистрационныйНомерПФР;
		ПФР.Записать();
		ПФР.НайтиЭлемент(глПолучитьНалог("ПФР_нак", 1));
		ПФР.РегНомер = РегистрационныйНомерПФР;
		ПФР.Записать();
		
		ЕСН.НайтиПоКоду("ПФР_страх");
		Шкала.ИспользоватьВладельца(ЕСН.ТекущийЭлемент());
		Если Шкала.НайтиПоКоду(1) = 0 Тогда
			Шкала.Новый();
			Шкала.Код = 1;
			Шкала.Наименование = "1_Первый предел";
			Шкала.Записать();
			Шкала.Предел.Установить('01.01.2001', 100000);
			Шкала.Процент.Установить('01.01.2002', 14);
			Шкала.Процент2.Установить('01.01.2002', 12);
			Шкала.Процент3.Установить('01.01.2002', 8);
		КонецЕсли;
		
		Если Шкала.НайтиПоКоду(2) = 0 Тогда
			Шкала.Новый();
			Шкала.Код = 2;
			Шкала.Наименование = "2_Второй предел";
			Шкала.Записать();
			Шкала.Предел.Установить('01.01.2001', 300000);
			Шкала.Процент.Установить('01.01.2002', 7.9);
			Шкала.Процент2.Установить('01.01.2002', 6.8);
			Шкала.Процент3.Установить('01.01.2002', 4.5);
		КонецЕсли;
			
		Если Шкала.НайтиПоКоду(3) = 0 Тогда
			Шкала.Новый();
			Шкала.Код = 3;
			Шкала.Наименование = "3_Третий предел";
			Шкала.Записать();
			Шкала.Предел.Установить('01.01.2001', 600000);
			Шкала.Процент.Установить('01.01.2002', 3.95);
			Шкала.Процент2.Установить('01.01.2002', 3.39);
			Шкала.Процент3.Установить('01.01.2002', 2.26);
		КонецЕсли;
			
		Если Шкала.НайтиПоКоду(4) = 0 Тогда
			Шкала.Новый();
			Шкала.Код = 4;
			Шкала.Наименование = "4_Четвертый предел";
			Шкала.Записать();
			Шкала.Предел.Установить('01.01.2001', 9999999999.99);
			Шкала.Процент.Установить('01.01.2002', 0);
			Шкала.Процент2.Установить('01.01.2002', 0);
			Шкала.Процент3.Установить('01.01.2002', 0);
		КонецЕсли;
		
		ЕСН.НайтиПоКоду("ПФР_нак");
		Шкала.ИспользоватьВладельца(ЕСН.ТекущийЭлемент());
		Если Шкала.НайтиПоКоду(1) = 0 Тогда
			Шкала.Новый();
			Шкала.Код = 1;
			Шкала.Наименование = "1_Первый предел";
			Шкала.Записать();
			Шкала.Предел.Установить('01.01.2001', 100000);
			Шкала.Процент.Установить('01.01.2002', 0);
			Шкала.Процент2.Установить('01.01.2002', 2);
			Шкала.Процент3.Установить('01.01.2002', 6);
		КонецЕсли;

		Если Шкала.НайтиПоКоду(2) = 0 Тогда
			Шкала.Новый();
			Шкала.Код = 2;
			Шкала.Наименование = "2_Второй предел";
			Шкала.Записать();
			Шкала.Предел.Установить('01.01.2001', 300000);
			Шкала.Процент.Установить('01.01.2002', 0);
			Шкала.Процент2.Установить('01.01.2002', 1.1);
			Шкала.Процент3.Установить('01.01.2002', 3.4);
		КонецЕсли;

		Если Шкала.НайтиПоКоду(3) = 0 Тогда
			Шкала.Новый();
			Шкала.Код = 3;
			Шкала.Наименование = "3_Третий предел";
			Шкала.Записать();
			Шкала.Предел.Установить('01.01.2001', 600000);
			Шкала.Процент.Установить('01.01.2002', 0);
			Шкала.Процент2.Установить('01.01.2002', 0.56);
			Шкала.Процент3.Установить('01.01.2002', 1.69);
		КонецЕсли;

        Если Шкала.НайтиПоКоду(4) = 0 Тогда
			Шкала.Новый();
			Шкала.Код = 4;
			Шкала.Наименование = "4_Четвертый предел";
			Шкала.Записать();
			Шкала.Предел.Установить('01.01.2001', 9999999999.99);
			Шкала.Процент.Установить('01.01.2002', 0);
			Шкала.Процент2.Установить('01.01.2002', 0);
			Шкала.Процент3.Установить('01.01.2002', 0);
		КонецЕсли;
		
		Состояние("Запись полных наименований счетов");
		Сч = СоздатьОбъект("Счет." + ВыбранныйПланСчетов().Идентификатор());
		ЗаписатьПолноеНаименование("69.2.1", "Расчеты с Федеральным бюджетом (базовая часть трудовой пенсии)");
		ЗаписатьПолноеНаименование("69.2.2", "Расчеты с Пенсионным фондом РФ (страховая часть трудовой пенсии)");
		ЗаписатьПолноеНаименование("69.2.3", "Расчеты с Пенсионным фондом РФ (накопительная часть трудовой пенсии)");
		
		Состояние("Обновление операций");
		ТаблицаСоответствияСчетов = Создатьобъект("ТаблицаЗначений");
		ТаблицаСоответствияСчетов.НоваяКолонка("ИсходныйСчет");
		ТаблицаСоответствияСчетов.НоваяКолонка("ЗаменяющийСчет");
		ТаблицаСоответствияСчетов.НоваяСтрока();
		ТаблицаСоответствияСчетов.ИсходныйСчет = СчетПоКоду("69.2");
		ТаблицаСоответствияСчетов.ЗаменяющийСчет = СчетПоКоду("69.2.1");
	
		Опер = СоздатьОбъект("Операция");
		Опер1 = СоздатьОбъект("Операция");
		Опер.ВыбратьОперацииСПроводками(,, "69.2,*;*,69.2");
		Пока Опер.ПолучитьОперацию() = 1 Цикл
			ОперацияИзменена = 0;
			Опер1.НайтиОперацию(Опер.Документ);
			Опер1.ВыбратьПроводки();
			Пока Опер1.ПолучитьПроводку() = 1 Цикл
				СчетДт = Опер1.Дебет.Счет;
				СчетКт = Опер1.Кредит.Счет;
				Опер1.Дебет.Счет = ПреобразованиеСчета(Опер1.Дебет.Счет);
				Опер1.Кредит.Счет = ПреобразованиеСчета(Опер1.Кредит.Счет);
				Если (СчетДт <> Опер1.Дебет.Счет) или (СчетКт <> Опер1.Кредит.Счет) Тогда
				    ОперацияИзменена = 1;
				КонецЕсли;
			КонецЦикла;
			Если ОперацияИзменена = 1 Тогда
			    Опер1.Записать();
			КонецЕсли;
		КонецЦикла;
		
		Состояние("Обновление индивидуальных карточек");
		ИмяФайлаСохраненияОтчета = КаталогИБ() + "icard-01.rvs";
		СписокСотрудников = СоздатьОбъект("СписокЗначений");
		Итоги = СоздатьОбъект("СписокЗначений");
		Если ФС.СуществуетФайл(ИмяФайлаСохраненияОтчета) = 1 Тогда
			ЗначениеИзФайла(ИмяФайлаСохраненияОтчета, СписокСотрудников);
			Для СчетчикЦикла = 1 по СписокСотрудников.РазмерСписка() Цикл
				ТабельныйНомер = "";
				Итоги = СписокСотрудников.ПолучитьЗначение(СчетчикЦикла, ТабельныйНомер);
				Состояние("Обновление индивидуальной карточки №"+ТабельныйНомер);
				
				ПересчетКолонки(Итоги, "СНГ", "02", "П");
				ПересчетКолонки(Итоги, "ВСЕГО_СНГ", "", "ВСЕГО");
				Для а = 4 по 8 Цикл
					ПересчетКолонки(Итоги, "СНГ", Формат(а, "Ч(0)2"), "П");
				КонецЦикла;
				ПересчетКолонки(Итоги, "СНГ", "10", "П");
				ПересчетКолонки(Итоги, "СНГ", "17", "П");
				
				Для а = 1 по 12 Цикл
					Месяц = Формат(а, "Ч(0)2");
					Итоги.Установить("ОБЛ_ПФР"+Месяц, Итоги.Получить("П"+Месяц+"02") - Итоги.Получить("ВСЕГО"+Месяц));
					Итоги.Установить("ОБЛ_ФСС"+Месяц, Итоги.Получить("П"+Месяц+"02") - Итоги.Получить("ВСЕГО"+Месяц) - Итоги.Получить("П"+Месяц+"10"));
				КонецЦикла;
			
				ПересчетКолонки(Итоги, "ОБЛ_ПФР_СНГ", "", "ОБЛ_ПФР");
				ПересчетКолонки(Итоги, "ОБЛ_ФСС_СНГ", "", "ОБЛ_ФСС");
				Для а = 13 по 16 Цикл
					ПересчетКолонки(Итоги, "СНГ", Формат(а, "Ч(0)2"), "П");
				КонецЦикла;
				
				Итоги.Установить("БазаЕСН", Итоги.Получить("ОБЛ_ПФР_СНГ12"));
				Итоги.Установить("БазаФСС", Итоги.Получить("ОБЛ_ФСС_СНГ12"));
				Итоги.Установить("ПФР", Итоги.Получить("СНГ1213"));
				Итоги.Установить("ФСС", Итоги.Получить("СНГ1216"));
				Итоги.Установить("ФФОМС", Итоги.Получить("СНГ1214"));
				Итоги.Установить("ТФОМС", Итоги.Получить("СНГ1215"));
				
				Позиция = 1;
				Пока Позиция <= Итоги.РазмерСписка() Цикл
					ПредставлениеЗначения = "";
					Итоги.ПолучитьЗначение(Позиция, ПредставлениеЗначения);
				    Если Найти(ПредставлениеЗначения, "СНГ") > 0 Тогда
					    Итоги.УдалитьЗначение(Позиция);
						
					ИначеЕсли Найти(ПредставлениеЗначения, "ОБЛ") > 0 Тогда
					    Итоги.УдалитьЗначение(Позиция);
						
					Иначе
						Позиция = Позиция + 1;
					КонецЕсли;
				КонецЦикла;
				СписокСотрудников.Установить(ТабельныйНомер, Итоги);
			КонецЦикла;
			ЗначениеВФайл(ИмяФайлаСохраненияОтчета, СписокСотрудников);
		КонецЕсли;
		
		Таб.ВывестиСекцию(Строка(Номер));
		
	ИначеЕсли Номер = 770425 Тогда
		
		Состояние("Обновление ставок страховых взносов");
		Шкала = СоздатьОбъект("Справочник.СтавкиНалогов");
		ЕСН = СоздатьОбъект("Справочник.НалогиИОтчисления");
		
		Если ЕСН.НайтиПоКоду("ПФР_страх") = 1 Тогда
			Шкала.ИспользоватьВладельца(ЕСН.ТекущийЭлемент());
			Если Шкала.НайтиПоКоду(1) = 1 Тогда
				Шкала.Процент3.Установить('01.01.2002', 11);
				Шкала.Процент3.Установить('01.01.2004', 10);
				Шкала.Процент3.Установить('01.01.2005', 9);
				Шкала.Процент3.Установить('01.01.2006', 8);
			КонецЕсли;
			
			Если Шкала.НайтиПоКоду(2) = 1 Тогда
				Шкала.Процент3.Установить('01.01.2002', 6.21);
				Шкала.Процент3.Установить('01.01.2004', 5.64);
				Шкала.Процент3.Установить('01.01.2005', 5.08);
				Шкала.Процент3.Установить('01.01.2006', 4.5);
			КонецЕсли;
				
			Если Шкала.НайтиПоКоду(3) = 1 Тогда
				Шкала.Процент3.Установить('01.01.2002', 3.1);
				Шкала.Процент3.Установить('01.01.2004', 2.82);
				Шкала.Процент3.Установить('01.01.2005', 2.54);
				Шкала.Процент3.Установить('01.01.2006', 2.26);
			КонецЕсли;
		КонецЕсли;
			
		Если ЕСН.НайтиПоКоду("ПФР_нак") = 1 Тогда
			Шкала.ИспользоватьВладельца(ЕСН.ТекущийЭлемент());
			Если Шкала.НайтиПоКоду(1) = 1 Тогда
				Шкала.Процент3.Установить('01.01.2002', 3);
				Шкала.Процент3.Установить('01.01.2004', 4);
				Шкала.Процент3.Установить('01.01.2005', 5);
				Шкала.Процент3.Установить('01.01.2006', 6);
			КонецЕсли;
	
			Если Шкала.НайтиПоКоду(2) = 1 Тогда
				Шкала.Процент3.Установить('01.01.2002', 1.69);
				Шкала.Процент3.Установить('01.01.2004', 2.26);
				Шкала.Процент3.Установить('01.01.2005', 2.84);
				Шкала.Процент3.Установить('01.01.2006', 3.4);
			КонецЕсли;
	
			Если Шкала.НайтиПоКоду(3) = 1 Тогда
				Шкала.Процент3.Установить('01.01.2002', 0.85);
				Шкала.Процент3.Установить('01.01.2004', 1.13);
				Шкала.Процент3.Установить('01.01.2005', 1.41);
				Шкала.Процент3.Установить('01.01.2006', 1.69);
			КонецЕсли;
		КонецЕсли;
		
		Состояние("Обновление документов ""Ввод в эксплуатацию ОС""");
		Док = СоздатьОбъект("Документ.ВводВЭксплуатациюОС");
		Док.ВыбратьДокументы(,);
		Пока Док.ПолучитьДокумент() = 1 Цикл
		    Если (Док.ВидВложений = 3) и (Док.Проведен() = 1) Тогда
				Опер = СоздатьОбъект("Операция");
				Опер.ВыбратьОперацииСПроводками(Док, Док, "*,08.3");
				Если Опер.ПолучитьПроводку() = 1 Тогда
					Если Док.ОбъектВнеоборотныхАктивов <> Опер.Кредит.ОбъектыСтроительства Тогда
					    Док.ОбъектВнеоборотныхАктивов = Опер.Кредит.ОбъектыСтроительства;
						Док.Записать();
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
				
		Таб.ВывестиСекцию(Строка(Номер));
		
	ИначеЕсли Номер = 770426 Тогда
		
		Состояние("Обновление индивидуальных карточек");
		ИмяФайлаСохраненияОтчета = КаталогИБ() + "icard-02.rvs";
		СписокСотрудников = СоздатьОбъект("СписокЗначений");
		Итоги1 = СоздатьОбъект("СписокЗначений"); // итоги, сохраненные в файле
		Итоги2 = СоздатьОбъект("СписокЗначений"); // итоги в новом формате
		Если ФС.СуществуетФайл(ИмяФайлаСохраненияОтчета) = 1 Тогда
			ЗначениеИзФайла(ИмяФайлаСохраненияОтчета, СписокСотрудников);
			КарточкаУжеОбновлена = 0;
			Если СписокСотрудников.РазмерСписка() > 0 Тогда
			    Итоги1 = СписокСотрудников.ПолучитьЗначение(1);
				Если ТипЗначенияСтр(Итоги1.Получить("П0118")) = "Число" Тогда
				    КарточкаУжеОбновлена = 1;
				КонецЕсли;
			КонецЕсли;
			
			Если КарточкаУжеОбновлена = 0 Тогда
				Для СчетчикЦикла = 1 по СписокСотрудников.РазмерСписка() Цикл
					ТабельныйНомер = "";
					Итоги1 = СписокСотрудников.ПолучитьЗначение(СчетчикЦикла, ТабельныйНомер);
					Состояние("Обновление индивидуальной карточки №"+ТабельныйНомер);
					
					Для а = 1 по 12 Цикл
						Месяц = Формат(а, "Ч(0)2");
						
						// Значение Графы2 не изменяется (всего начислено).
						Итоги2.Установить("П"+Месяц+"02", Итоги1.Получить("П"+Месяц+"02"));
					
						// Нначисления, не являющиеся объектом налогообложения.
						Итоги2.Установить("П"+Месяц+"03", Итоги1.Получить("П"+Месяц+"08"));
						
						// Доходы, не подлежащие налогообложению (Графа4 = Графа3 - Графа7 - Графа8).
						Итоги2.Установить("П"+Месяц+"04", Итоги1.Получить("ВСЕГО"+Месяц) - Итоги1.Получить("П"+Месяц+"07") - Итоги1.Получить("П"+Месяц+"08"));
						
						// Выплаты по договорам гражданско-правового характера.
						Итоги2.Установить("П"+Месяц+"05", Итоги1.Получить("П"+Месяц+"10"));
						
						// Льготы на доходы инвалидов.
						Итоги2.Установить("П"+Месяц+"08", Итоги1.Получить("П"+Месяц+"07"));
						Итоги2.Установить("П"+Месяц+"09", 0);
						Итоги2.Установить("П"+Месяц+"10", 0);
						
						// Начислено за счет ФСС.
						Итоги2.Установить("П"+Месяц+"14", Итоги1.Получить("П"+Месяц+"17"));
						
						// Исчисленные суммы налога.
						Итоги2.Установить("П"+Месяц+"15", Итоги1.Получить("П"+Месяц+"13"));
						Итоги2.Установить("П"+Месяц+"16", Итоги1.Получить("П"+Месяц+"14"));
						Итоги2.Установить("П"+Месяц+"17", Итоги1.Получить("П"+Месяц+"15"));
						Итоги2.Установить("П"+Месяц+"18", Итоги1.Получить("П"+Месяц+"16"));
						
						// Суммы вычета не заполняем, так как в старой карточке их не было.
						
						// Рассчитаем суммы налоговой базы.
						БазаПФР = Итоги2.Получить("П" + Месяц + "02") - // всего начислено
								  Итоги2.Получить("П" + Месяц + "03") - // не является объектом
								  Итоги2.Получить("П" + Месяц + "04");  // не облагаемые доходы во все фонды
								  
						БазаФСС	= Итоги2.Получить("П" + Месяц + "02") - // всего начислено
								  Итоги2.Получить("П" + Месяц + "03") - // не является объектом
								  Итоги2.Получить("П" + Месяц + "04") - // не облагаемые доходы во все фонды
								  Итоги2.Получить("П" + Месяц + "05");  // не облагаемые доходы в ФСС
								  
						БазаПФР = Макс(БазаПФР, 0);
						БазаФСС = Макс(БазаФСС, 0);
						Итоги2.Установить("П" + Месяц + "06", БазаПФР);
						Итоги2.Установить("П" + Месяц + "07", БазаФСС);
								  
						БазаЕСН = БазаПФР -  // налоговая база ЕСН по ст.237, уменьшенная на сумму льгот
								  Итоги2.Получить("П" + Месяц + "08") - // льгота по статье 239
								  Итоги2.Получить("П" + Месяц + "09") - // льгота по п.2 ст.245
								  Итоги2.Получить("П" + Месяц + "10");  // льгота по п.3,4 ст.245
								  
						БазаОМС = БазаПФР -  // налоговая база ЕСН по ст.237, уменьшенная на сумму льгот
								  Итоги2.Получить("П" + Месяц + "08") - // льгота по статье 239
								  Итоги2.Получить("П" + Месяц + "09");  // льгота по п.2 ст.245
								  
						БазаФСС = БазаФСС -  // налоговая база ЕСН по ст.237, уменьшенная на сумму льгот
								  Итоги2.Получить("П" + Месяц + "08") - // льгота по статье 239
								  Итоги2.Получить("П" + Месяц + "09");  // льгота по п.2 ст.245
								  
						Итоги2.Установить("П" + Месяц + "11", Макс(БазаЕСН, 0));
						Итоги2.Установить("П" + Месяц + "12", Макс(БазаОМС, 0));
						Итоги2.Установить("П" + Месяц + "13", Макс(БазаФСС, 0));
					КонецЦикла;
				
					Для а = 2 по 18 Цикл
					    ПересчетКолонки(Итоги2, "СНГ", Формат(а,"Ч(0)2"), "П");
					КонецЦикла;
									
					Позиция = 1;
					Пока Позиция <= Итоги2.РазмерСписка() Цикл
						ПредставлениеЗначения = "";
						Итоги2.ПолучитьЗначение(Позиция, ПредставлениеЗначения);
					    Если Найти(ПредставлениеЗначения, "СНГ12") > 0 Тогда
							Позиция = Позиция + 1;
							
						ИначеЕсли Найти(ПредставлениеЗначения, "СНГ") > 0 Тогда
						    Итоги2.УдалитьЗначение(Позиция);
							
						ИначеЕсли (Сред(ПредставлениеЗначения, 2, 2) >= "06") и (Сред(ПредставлениеЗначения, 2, 2) <= "07") Тогда
						    Итоги2.УдалитьЗначение(Позиция);
							
						ИначеЕсли (Сред(ПредставлениеЗначения, 2, 2) >= "11") и (Сред(ПредставлениеЗначения, 2, 2) <= "13") Тогда
						    Итоги2.УдалитьЗначение(Позиция);
							
						Иначе
							Позиция = Позиция + 1;
						КонецЕсли;
					КонецЦикла;
					
					Итоги2.Установить("Гражданство", Итоги1.Получить("Гражданство"));
					Итоги2.Установить("Адрес", Итоги1.Получить("Адрес"));
					Итоги2.Установить("ДоговорНомер", Итоги1.Получить("ДоговорНомер"));
					Итоги2.Установить("ДатаДолжность", Итоги1.Получить("ДатаДолжность"));
					Итоги2.Установить("НаличиеИнвалидности", Итоги1.Получить("П001"));
					Итоги2.Установить("СправкаСерия", Итоги1.Получить("П002"));
					Итоги2.Установить("НомерСправки", Итоги1.Получить("П003"));
					Итоги2.Установить("ДатаВыдачи", Итоги1.Получить("П004"));
					
					СписокСотрудников.Установить(ТабельныйНомер, Итоги2);
				КонецЦикла;
				ЗначениеВФайл(ИмяФайлаСохраненияОтчета, СписокСотрудников);
			КонецЕсли;
		КонецЕсли;
		
		Состояние("Установка значений констант");
		Константа.КонтрольОтрицательныхОстатков = Да;
		Константа.БазаРаспределенияПрямыхРасходов.Установить('01.01.1980', Перечисление.БазаРаспределенияПрямыхРасходов.СуммаПрямыхЗатрат);
		
		Состояние("Корректировка плана счетов");
		Сч = СоздатьОбъект("Счет." + ВыбранныйПланСчетов().Идентификатор());
		ЗаписатьПолноеНаименование("Н06.02"  , "Выручка от реализации имущественных прав, за исключением доходов от реализации права требования");
		ЗаписатьПолноеНаименование("Н06.07"  , "Выручка от реализации права требования как реализации финансовых услуг");
		ЗаписатьПолноеНаименование("Н06.08"  , "Выручка от реализации  права требования до наступления срока платежа");
		ЗаписатьПолноеНаименование("Н06.09"  , "Выручка от реализации  права требования после наступления срока платежа");
		ЗаписатьПолноеНаименование("Н07.06"  , "Цена приобретения реализованного прочего имущества и расходы, связанные с его реализацией");
		ЗаписатьПолноеНаименование("Н07.07"  , "Остаточная стоимость реализованного амортизируемого имущества и расходы, связанные с его реализацией");
		ЗаписатьПолноеНаименование("Н07.09"  , "Стоимость реализованного права требования как реализации финансовых услуг");
		ЗаписатьПолноеНаименование("Н07.10"  , "Стоимость реализованного права требования в соответствии с п.1 статьи 279 НК до наступления срока платежа");
		ЗаписатьПолноеНаименование("Н07.11"  , "Стоимость реализованного права требования в соответствии с п.2 статьи 279 НК после наступления срока платежа");
		ЗаписатьПолноеНаименование("Н06.11"  , "Выручка от реализации ценных бумаг");
		ЗаписатьПолноеНаименование("Н07.14"  , "Расходы, связанные с приобретением и реализацией  ценных бумаг");
		
		Состояние("Обработка справочника ""Номенклатура""");
		Продукция = СоздатьОбъект("Справочник.Номенклатура");
		Продукция.ВыбратьЭлементы();
		Пока Продукция.ПолучитьЭлемент() = 1 Цикл
			Если Продукция.ЭтоГруппа() = 0 Тогда
			    Если Продукция.ТипНоменклатуры = Перечисление.ТипыНоменклатуры.Продукция Тогда
			        Продукция.ПлановаяСебестоимость.Установить('01.01.1980', Продукция.Себестоимость);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		Таб.ВывестиСекцию(Строка(Номер));
		
	ИначеЕсли Номер = 770427 Тогда
		
		Состояние("Обновление документов");
		
		Док = СоздатьОбъект("Документ.ВводВЭксплуатациюОС");
		Док.ВыбратьДокументы(,);
		Пока Док.ПолучитьДокумент() = 1 Цикл
		    Если (Док.ПринятьК_НалоговомуУчету = 0) или (Док.ДатаДок < '01.01.2002') Тогда
				Док.ПринятьК_НалоговомуУчету = 3;
			
			ИначеЕсли (Док.ПринятьК_НалоговомуУчету = 1) и (Док.СписатьНаЗатраты = 1) Тогда
				Док.ПринятьК_НалоговомуУчету = 2;
			    Док.СчетЗатратН = СчетПоКоду("Н07.04.1");
				Док.СубконтоН1 = Перечисление.ГруппыВидыРасходов.МатериальныеРасходы;
				
			ИначеЕсли (Док.ПринятьК_НалоговомуУчету = 1) и (Док.СписатьНаЗатраты = 0) Тогда
				Док.ПринятьК_НалоговомуУчету = 1;
			КонецЕсли;
			Док.Записать();
		КонецЦикла;
		
		Док = СоздатьОбъект("Документ.ПринятиеКУчетуНМА");
		Док.ВыбратьДокументы(,);
		Пока Док.ПолучитьДокумент() = 1 Цикл
		    Если Док.ДатаДок < '01.01.2002' Тогда
		        Док.ВключитьВСоставРасходов = 3;
				
			ИначеЕсли Док.ВключитьВСоставРасходов = 0 Тогда
				Док.ВключитьВСоставРасходов = 1;
				
			ИначеЕсли Док.ВключитьВСоставРасходов = 1 Тогда
				Док.ВключитьВСоставРасходов = 2;
				Док.СчетЗатратН = СчетПоКоду("Н07.04.1");
				Док.СубконтоН1 = Перечисление.ГруппыВидыРасходов.МатериальныеРасходы;
			КонецЕсли;
			Док.Записать();
		КонецЦикла;
			
		Таб.ВывестиСекцию(Строка(Номер));
		                          
	ИначеЕсли Номер = 770428 Тогда
		
		Состояние("Корректировка плана счетов");
		Сч = СоздатьОбъект("Счет." + ВыбранныйПланСчетов().Идентификатор());
		ЗаписатьПолноеНаименование("19.1"   , "Налог на добавленную стоимость при приобретении основных средств");
		
		Состояние("Обновление ставок налога на прибыль");
		НалогНаПрибыль = СоздатьОбъект("Справочник.НалогиИОтчисления");
		НалогНаПрибыль.НайтиЭлемент(глПолучитьНалог("ПрибФед"));
		НалогНаПрибыль.Ставка.Установить('01.01.2002', 7.5);
		НалогНаПрибыль.НайтиЭлемент(глПолучитьНалог("ПрибРесп"));
		НалогНаПрибыль.Ставка.Установить('01.01.2002', 14.5);
		
		Состояние("Обновление документов ""Начисление налогов""");
		ТаблицаНалогов = СоздатьОбъект("ТаблицаЗначений");
		ТаблицаНалоговПред = СоздатьОбъект("ТаблицаЗначений");
		ТаблицаНалоговПред.НоваяКолонка("ВидНалога");
		ТаблицаНалоговПред.НоваяКолонка("База", "Число");
		ТаблицаНалоговПред.НоваяКолонка("Распределено", "Число");
		Док = СоздатьОбъект("Документ.НачислениеНалогов");
		Док.ВыбратьДокументы(,);
		Пока Док.ПолучитьДокумент() = 1 Цикл
			Если Док.ПометкаУдаления() = 1 Тогда
				Продолжить;
			КонецЕсли;
			
			Док.ВыгрузитьТабличнуюЧасть(ТаблицаНалогов);
			ТаблицаНалогов.Свернуть("ВидНалога", "База");
			
			// Корректировка реквизитов документа.
			Док.ВыбратьСтроки();
			Пока Док.ПолучитьСтроку() = 1 Цикл
			    БазаПред = 0;
				НомСтроки = 0;
				Если ТаблицаНалоговПред.НайтиЗначение(Док.ВидНалога, НомСтроки, "ВидНалога") = 1 Тогда
					ТаблицаНалоговПред.ПолучитьСтрокуПоНомеру(НомСтроки);
					НомСтроки = 0;
					Если ТаблицаНалогов.НайтиЗначение(Док.ВидНалога, НомСтроки, "ВидНалога") = 1 Тогда
						ТаблицаНалогов.ПолучитьСтрокуПоНомеру(НомСтроки);
						Если ТаблицаНалогов.База <> 0 Тогда
						    БазаПред = (Док.База / ТаблицаНалогов.База) * ТаблицаНалоговПред.База;
							ТаблицаНалоговПред.Распределено = ТаблицаНалоговПред.Распределено + БазаПред;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
				
				Док.ВидРасхода = Перечисление.ВидыРасходов.КосвенныеРасходы;
				Док.БазаНалога = Док.База - БазаПред;
				Док.СуммаНалога = Док.Сумма - Док.СуммаПред;
			КонецЦикла;
			
			// Проверка распределения предыдущих налоговых баз.
			ТаблицаНалоговПред.ВыбратьСтроки();
			Пока ТаблицаНалоговПред.ПолучитьСтроку() = 1 Цикл
				Если ТаблицаНалоговПред.Распределено <> 0 Тогда
					Если ТаблицаНалоговПред.Распределено <> ТаблицаНалоговПред.База Тогда
					    Док.ВыбратьСтроки();
						Если Док.ВидНалога = ТаблицаНалоговПред.ВидНалога Тогда
						    Док.БазаНалога = Док.БазаНалога + ТаблицаНалоговПред.База - ТаблицаНалоговПред.Распределено;
						КонецЕсли;
					КонецЕсли;
					ТаблицаНалоговПред.Распределено = 0;
				КонецЕсли;
			КонецЦикла;
			
			// Запись налоговых баз в таблицу ТаблицаНалоговПред.
			ТаблицаНалогов.ВыбратьСтроки();
			Пока ТаблицаНалогов.ПолучитьСтроку() = 1 Цикл
			    НомСтроки = 0;
				Если ТаблицаНалоговПред.НайтиЗначение(ТаблицаНалогов.ВидНалога, НомСтроки, "ВидНалога") = 1 Тогда
					ТаблицаНалоговПред.ПолучитьСтрокуПоНомеру(НомСтроки);
					
				Иначе
					ТаблицаНалоговПред.НоваяСтрока();
					ТаблицаНалоговПред.ВидНалога = ТаблицаНалогов.ВидНалога;
				КонецЕсли;
				ТаблицаНалоговПред.База = ТаблицаНалогов.База;
			КонецЦикла;
			
			Док.Записать();
		КонецЦикла;
		
		Состояние("Обновление документов ""Корректировка задолженности""");
		Опер = СоздатьОбъект("Операция");
		ТаблицаДокумента = СоздатьОбъект("ТаблицаЗначений");
		Док = СоздатьОбъект("Документ.ЗачетЗадолженности");
		Док.ВыбратьДокументы(,);
		Пока Док.ПолучитьДокумент() = 1 Цикл
		    Док.ВыгрузитьТабличнуюЧасть(ТаблицаДокумента);
			Док.УдалитьСтроки();
			ТаблицаДокумента.ВыбратьСтроки();
			Пока ТаблицаДокумента.ПолучитьСтроку() = 1 Цикл
			    Док.НоваяСтрока();
				Док.ПризнакЗадолженности = Перечисление.ПризнакЗадолженности.Дебиторская;
				Док.Контрагент = ТаблицаДокумента.Дебитор;
				Док.Договор = ТаблицаДокумента.ДоговорСДебитором;
				Док.Сумма = -ТаблицаДокумента.Сумма;
				Док.НаименованиеОперации = ТаблицаДокумента.НаименованиеОперации;
				
				Док.НоваяСтрока();
				Док.ПризнакЗадолженности = Перечисление.ПризнакЗадолженности.Кредиторская;
				Док.Контрагент = ТаблицаДокумента.Кредитор;
				Док.Договор = ТаблицаДокумента.ДоговорСКредитором;
				Док.Сумма = -ТаблицаДокумента.Сумма;
				Док.НДС = -ТаблицаДокумента.НДС;
				Док.НаименованиеОперации = ТаблицаДокумента.НаименованиеОперации;
			КонецЦикла;
			Док.Записать();
			
			Опер.НайтиОперацию(Док);
			Опер.СуммаОперации = 0;
			Опер.Записать();
		КонецЦикла;
		
		Состояние("Обновление операций документов");
		Опер = СоздатьОбъект("Операция");
		Док = СоздатьОбъект("Документ.ЗакрытиеМесяца");
		Док.ВыбратьДокументы(,);
		Пока Док.ПолучитьДокумент() = 1 Цикл
			ОперацияИзменена = 0;
			Опер.НайтиОперацию(Док);
			Опер.ВыбратьПроводки();
			Пока Опер.ПолучитьПроводку() = 1 Цикл
				Если Опер.Кредит.Счет = СчетПоКоду("НБ") Тогда
				    Если Опер.Кредит.ВидыНачислений = Перечисление.ВидыНачислений.КорректировкаФСС_НСиПЗ Тогда
				    	Опер.Сумма = -Опер.Сумма;
						ОперацияИзменена = 1;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			Если ОперацияИзменена = 1 Тогда
			    Опер.Записать();
			КонецЕсли;
		КонецЦикла;
		
		Таб.ВывестиСекцию(Строка(Номер));
		
	ИначеЕсли Номер = 770429 Тогда
		
		Состояние("Корректировка плана счетов");
		Сч = СоздатьОбъект("Счет." + ВыбранныйПланСчетов().Идентификатор());
		ЗаписатьПолноеНаименование("Н04.04", "Расходы на освоение природных ресурсов");
		ЗаписатьПолноеНаименование("Н07.07", "Остаточная стоимость реализованных основных средств и расходы, связанные с их реализацией");
		ЗаписатьПолноеНаименование("Н07.08", "Остаточная стоимость реализованных нематериальных активов и расходы, связанные с их реализацией");
		
		Состояние("Корректировка документов ""Расходы на оплату труда""");
		Запрос = СоздатьОбъект("Запрос");
		ТекстЗапроса =
		"//{{ЗАПРОС(Сформировать)
		|Период с '01.01.2001' по '01.01.2005';
		|ОбрабатыватьДокументы все;
		|Док = Документ.РасходыНаОплатуТруда.ТекущийДокумент;
		|ВидНачисления = Документ.РасходыНаОплатуТруда.ВидНачисления;
		|Группировка Док;
		|Группировка СтрокаДокумента;
		|Условие(ВидНачисления = Перечисление.ВидыНачисленийПоОплатеТруда.пп24ст255);
		|"//}}ЗАПРОС
		;               
		Док = СоздатьОбъект("Документ.РасходыНаОплатуТруда");
        Запрос.Выполнить(ТекстЗапроса);
		Пока Запрос.Группировка(1) = 1 Цикл
			Док.НайтиДокумент(Запрос.Док);
			Пока Запрос.Группировка(2) = 1 Цикл
				Док.ПолучитьСтрокуПоНомеру(Запрос.СтрокаДокумента);
				Док.ВидНачисления = Перечисление.ВидыНачисленийПоОплатеТруда.пп25ст255;
			КонецЦикла;
			Док.Записать();
		КонецЦикла;
		           
		Состояние("Корректировка документов, связанная с изменением учета расходов на ремонт основных средств");
		Запрос = СоздатьОбъект("Запрос");
		ТекстЗапроса =
		"//{{ЗАПРОС(РемонтОС)
		|Период с '01.01.2001' по '01.01.2005';
		|ОбрабатыватьДокументы все;
		|Док = Документ.ОперацииПриобретенияИмущества.ТекущийДокумент, Документ.СписаниеМатериаловТоваровПродукции.ТекущийДокумент;
		|ВидРасхода = Документ.ОперацииПриобретенияИмущества.ВидРасхода, Документ.СписаниеМатериаловТоваровПродукции.ВидРасхода;
		|Группировка Док;
		|Группировка СтрокаДокумента;
		|Условие(ВидРасхода = Перечисление.ВидыРасходов.РемонтОсновныхСредств);
		|"//}}ЗАПРОС
		;               
		Док = СоздатьОбъект("Документ");
        Запрос.Выполнить(ТекстЗапроса);
		Пока Запрос.Группировка(1) = 1 Цикл
			Док.НайтиДокумент(Запрос.Док);
			Пока Запрос.Группировка(2) = 1 Цикл
				Док.ПолучитьСтрокуПоНомеру(Запрос.СтрокаДокумента);
				Если Док.Вид() = "ОперацииПриобретенияИмущества" Тогда
					Док.НазначитьТип("ЭлементРасхода", "Перечисление.ГруппыВидыРасходов");
				КонецЕсли;
				Док.ВидРасхода = Перечисление.ВидыРасходов.КосвенныеРасходы;
				Док.ЭлементРасхода = Перечисление.ГруппыВидыРасходов.РемонтОсновныхСредств;
				Док.Объект = "";
			КонецЦикла;
			Док.Записать();
		КонецЦикла;
		
		Состояние("Обновление налоговых карточек");
		ИмяФайлаСохраненияОтчета = КаталогИБ() + "tcard-02.rvs";
		СписокСотрудников = СоздатьОбъект("СписокЗначений");
		Итоги = СоздатьОбъект("СписокЗначений"); // итоги, сохраненные в файле
		Если ФС.СуществуетФайл(ИмяФайлаСохраненияОтчета) = 1 Тогда
			ЗначениеИзФайла(ИмяФайлаСохраненияОтчета, СписокСотрудников);
			Для СчетчикЦикла = 1 по СписокСотрудников.РазмерСписка() Цикл
				ТабельныйНомер = "";
				Итоги = СписокСотрудников.ПолучитьЗначение(СчетчикЦикла, ТабельныйНомер);
				
				НомерПозиции = 1;
				Пока НомерПозиции <= Итоги.РазмерСписка() Цикл
				    Стр = "";
					Значение = Итоги.ПолучитьЗначение(НомерПозиции, Стр);
					Если (Стр = "П146") или (Стр = "Р2_5") или (Стр = "Р2_6") Тогда
					    Итоги.УдалитьЗначение(НомерПозиции);
						
					Иначе
						НомерПозиции = НомерПозиции + 1;
					КонецЕсли;
				КонецЦикла;
				
				СписокСотрудников.Установить(ТабельныйНомер, Итоги);
			КонецЦикла;
			ЗначениеВФайл(ИмяФайлаСохраненияОтчета, СписокСотрудников);
		КонецЕсли;
			
		Таб.ВывестиСекцию(Строка(Номер));
		
	ИначеЕсли Номер = 770431 Тогда
		
		Состояние("Корректировка плана счетов");
		Сч = СоздатьОбъект("Счет." + ВыбранныйПланСчетов().Идентификатор());
		ЗаписатьПолноеНаименование("Н01.04", "Формирование расходов на освоение природных ресурсов");
		
		Состояние("Корректировка списка корректных проводок");
		НоваяКорректнаяПроводка("41.1", "41.2", "");
		НоваяКорректнаяПроводка("41.2", "41.1", "");
		НоваяКорректнаяПроводка("41.2", "42", "");
		НоваяКорректнаяПроводка("41.2", "60.1", "");
		НоваяКорректнаяПроводка("41.2", "76.5", "");
		НоваяКорректнаяПроводка("51", "91.1", "");
		НоваяКорректнаяПроводка("57.11", "91.1", "");
		НоваяКорректнаяПроводка("90.2", "41.2", "");
		НоваяКорректнаяПроводка("90.2", "42", "");
		НоваяКорректнаяПроводка("91.2", "51", "");
		НоваяКорректнаяПроводка("91.2", "57.11", "");
		
		Состояние("Обновление документов");
		ФСС_НС = глПолучитьНалог("ФСС_НС");
		Док = СоздатьОбъект("Документ.НачислениеНалогов");
		Док.ВыбратьДокументы(,);
		Пока Док.ПолучитьДокумент() = 1 Цикл
			ДокументМодифицирован = 0;
			
		    Док.ВыбратьСтроки();
			Пока Док.ПолучитьСтроку() = 1 Цикл
			    Если Док.ВидНалога = ФСС_НС Тогда
					Если Док.ВидРасхода <> Перечисление.ВидыРасходов.НеПринимаемые Тогда
				        Док.ВидРасхода = Перечисление.ВидыРасходов.КосвенныеРасходы;
						Док.Объект = "";
						ДокументМодифицирован = 1;
					КонецЕсли;
			    КонецЕсли;
			КонецЦикла;
			Если ДокументМодифицирован = 1 Тогда
			    Док.Записать();
			КонецЕсли;
		КонецЦикла;
			
		Таб.ВывестиСекцию(Строка(Номер));
		
	ИначеЕсли Номер = 770432 Тогда
		
		Состояние("Корректировка плана счетов");
		Сч = СоздатьОбъект("Счет." + ВыбранныйПланСчетов().Идентификатор());
		ЗаписатьПолноеНаименование("Н04.10", "Расходы будущих периодов на оплату труда");
		ЗаписатьПолноеНаименование("Н04.11", "Налоги и сборы с расходов на оплату труда будущих периодов");
		
		Состояние("Корректировка списка корректных проводок");
		НоваяКорректнаяПроводка("91.2", "68.8", "");
		
		Состояние("Обновление элементов справочника ""Основные средства""");
		ОС = СоздатьОбъект("Справочник.ОсновныеСредства");
		ЗаполнитьВСправочникеПериодическиеРеквизитыВидРасхода(ОС);
		ОС.ВыбратьЭлементы(0);
		Пока ОС.ПолучитьЭлемент() = 1 Цикл
			Если ОС.ЭтоГруппа() = 1 Тогда
			    Продолжить;
			КонецЕсли;
			Если ОС.СпособНачисленияАмортизации = Перечисление.СпособыНачисленияАмортизацииОС.УменьшаемогоОстатка Тогда
				ОС.КоэффициентУскорения = 1;
			КонецЕсли;
		    ОС.Записать();
		КонецЦикла;
		                                                                    
		Состояние("Обновление элементов справочника ""Нематериальные активы""");
		НМА = СоздатьОбъект("Справочник.НематериальныеАктивы");
		ЗаполнитьВСправочникеПериодическиеРеквизитыВидРасхода(НМА);
		
		Состояние("Обновление элементов справочника ""Расходы будущих периодов""");
		СтатьяРасходовРБП = СоздатьОбъект("Справочник.РасходыБудущихПериодов");
		СтатьяРасходовРБП.ВыбратьЭлементы(0);
		Пока СтатьяРасходовРБП.ПолучитьЭлемент() = 1 Цикл
			Если СтатьяРасходовРБП.ЭтоГруппа() = 1 Тогда
				Продолжить;
			
			ИначеЕсли СтатьяРасходовРБП.НазначениеСтатьиРасходов = 1 Тогда
			    СтатьяРасходовРБП.НазначениеСтатьиРасходов = 2;
				
			ИначеЕсли СтатьяРасходовРБП.НазначениеСтатьиРасходов = 2 Тогда
				СтатьяРасходовРБП.НазначениеСтатьиРасходов = 3;
				
			Иначе
				СтатьяРасходовРБП.НазначениеСтатьиРасходов = 3;
			КонецЕсли;
			
			УстановитьЗначениеНовыхРеквизитов(СтатьяРасходовРБП);
			
			Если СтатьяРасходовРБП.СчетЗатрат.Выбран() = 1 Тогда
				НомерСубконто = 0;
				Для А = 1 По 3 Цикл
					Если (СтатьяРасходовРБП.СчетЗатрат.ВидСубконто(А) = ВидыСубконто.СтатьиЗатратНаПроизводство) или
						 (СтатьяРасходовРБП.СчетЗатрат.ВидСубконто(А) = ВидыСубконто.СтатьиЗатратОбслуживающихПроизводств) или
						 (СтатьяРасходовРБП.СчетЗатрат.ВидСубконто(А) = ВидыСубконто.СтатьиОбщепроизводственныхЗатрат) или
						 (СтатьяРасходовРБП.СчетЗатрат.ВидСубконто(А) = ВидыСубконто.СтатьиОбщехозяйственныхЗатрат) или
						 (СтатьяРасходовРБП.СчетЗатрат.ВидСубконто(А) = ВидыСубконто.СтатьиИздержекОбращения) или
						 (СтатьяРасходовРБП.СчетЗатрат.ВидСубконто(А) = ВидыСубконто.СтатьиКоммерческихРасходов) или
						 (СтатьяРасходовРБП.СчетЗатрат.ВидСубконто(А) = ВидыСубконто.СтатьиРасходовНаПродажу) Тогда
						
						СтатьиЗатрат = СоздатьОбъект("Справочник." + СтатьяРасходовРБП.ПолучитьАтрибут("Субконто" + А).Вид());
					
						СтатьиЗатрат.ВыбратьЭлементыПоРеквизиту("ВидРасходовДляНалоговогоУчета", Перечисление.ГруппыВидыРасходов.ЕСН,, 0);
						Если СтатьиЗатрат.ПолучитьЭлемент() = 1 Тогда
							СтатьяРасходовРБП.СтатьяОтчисленийНаСоцНужды = СтатьиЗатрат.ТекущийЭлемент();
						КонецЕсли;
						
						СтатьиЗатрат.ВыбратьЭлементыПоРеквизиту("ВидРасходовДляНалоговогоУчета", Перечисление.ГруппыВидыРасходов.НалогиИСборы,, 0);
						Если СтатьиЗатрат.ПолучитьЭлемент() = 1 Тогда
							СтатьяРасходовРБП.СтатьяПрочихОтчисленийНаСоцНужды = СтатьиЗатрат.ТекущийЭлемент();
						КонецЕсли;
						
						Прервать;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			
			СтатьяРасходовРБП.Записать();
		КонецЦикла;
		
		Состояние("Обновление элементов справочника ""Сотрудники""");
		Сотр = СоздатьОбъект("Справочник.Сотрудники");
		Сотр.ВыбратьЭлементы();
		Пока Сотр.ПолучитьЭлемент() = 1 Цикл
			Если Сотр.ЭтоГруппа() = 1 Тогда
				Продолжить;
			КонецЕсли;
			
			Сотр.НачислятьНалогиСФОТ.Установить('01.01.1980', 1);
		КонецЦикла;
		
		Состояние("Обновление документов ""Ввод в эксплуатацию ОС""");
		Док = СоздатьОбъект("Документ.ВводВЭксплуатациюОС");
		Док.ВыбратьДокументы();
		Пока Док.ПолучитьДокумент() = 1 Цикл
			УстановитьЗначениеНовыхРеквизитов(Док);
			Док.КоэффициентУскорения = 1;
		    Док.Записать();
		КонецЦикла;
		
		Состояние("Обновление документов ""Принятие к учету НМА""");
		Док = СоздатьОбъект("Документ.ПринятиеКУчетуНМА");
		Док.ВыбратьДокументы();
		Пока Док.ПолучитьДокумент() = 1 Цикл
			УстановитьЗначениеНовыхРеквизитов(Док);
		    Док.Записать();
		КонецЦикла;
		
		Состояние("Обновление документов ""Перемещение основного средства""");
		Док = СоздатьОбъект("Документ.ПеремещениеОС");
		Док.ВыбратьДокументы();
		Пока Док.ПолучитьДокумент() = 1 Цикл
			УстановитьЗначениеНовыхРеквизитов(Док);
		    Док.Записать();
		КонецЦикла;
		              
		// Все ранее отраженные курсовые и суммовые разницы отнесем на курсовые разницы.
		Состояние("Обновление документов ""Прочие внереализационные доходы и расходы""");
		Док = СоздатьОбъект("Документ.РасчетКурсовыхРазниц");
		Док.ВыбратьДокументы();
		Пока Док.ПолучитьДокумент() = 1 Цикл
			Док.ВыбратьСтроки();
			Пока Док.ПолучитьСтроку() = 1 Цикл
				Если Док.ПризнакДоходаРасхода = Перечисление.ПризнакДоходаРасхода.Доход Тогда
					Док.НазначитьТип("ВидДоходаРасхода", "Перечисление.ВнереализационныеДоходы");
					Док.ВидДоходаРасхода = Перечисление.ВнереализационныеДоходы.КурсовыеРазницы;
					
				ИначеЕсли Док.ПризнакДоходаРасхода = Перечисление.ПризнакДоходаРасхода.Расход Тогда
					Док.НазначитьТип("ВидДоходаРасхода", "Перечисление.ВнереализационныеРасходы");
					Док.ВидДоходаРасхода = Перечисление.ВнереализационныеРасходы.КурсовыеРазницы;
				КонецЕсли;
			КонецЦикла;
		    Док.Записать();
		КонецЦикла;
		
		// Все внереализационные доходы, отраженные в документе "Операции выбытия имущества..." 
		// перенесем в документ "Прочие внереализационные доходы и расходы"
		Состояние("Обновление документов ""Операции выбытия имущества, работ, услуг, прав""");
		Док = СоздатьОбъект("Документ.РасчетКурсовыхРазниц");
		ДокументОперацииВыбытия = СоздатьОбъект("Документ.ОперацииВыбытияИмущества");
		
		//Создание объекта типа Запрос
		Запрос = СоздатьОбъект("Запрос");
		ТекстЗапроса = 
		"//{{ЗАПРОС(Сформировать)
		|Период с '01.01.2002' по '01.01.2005';
		|ОбрабатыватьДокументы все;
		|Обрабатывать НеПомеченныеНаУдаление;
		|ВидДохода = Документ.ОперацииВыбытияИмущества.ВидДохода;
		|ОперацииВыбытияИмущества = Документ.ОперацииВыбытияИмущества.ТекущийДокумент;
		|Группировка День;
		|Группировка Документ;
		|Группировка СтрокаДокумента;
		|Условие(ВидДохода = Перечисление.ВидыДоходов.ВнереализационныеДоходы);
		|"//}}ЗАПРОС
		;
		Запрос.Выполнить(ТекстЗапроса);
		
		Пока Запрос.Группировка(1) = 1 Цикл
			Док.Новый();
			Док.ДатаДок = Запрос.День;
			Пока Запрос.Группировка(2) = 1 Цикл
				//ДокументОперацииВыбытия = Запрос.ОперацииВыбытияИмущества;
				ДокументОперацииВыбытия.НайтиДокумент(Запрос.ОперацииВыбытияИмущества);
				Пока Запрос.Группировка(3, -1) = 1 Цикл
					
					ДокументОперацииВыбытия.ПолучитьСтрокуПоНомеру(Запрос.СтрокаДокумента);
					УсловиеВыбытия =  ДокументОперацииВыбытия.УсловиеВыбытия;
					Док.НоваяСтрока();
					Док.Контрагент = ДокументОперацииВыбытия.Контрагент;
					Док.Договор = ДокументОперацииВыбытия.Договор;
					Если (УсловиеВыбытия = Перечисление.УсловияВыбытияИмущества.СПоследующейОплатой)
					 или (УсловиеВыбытия = Перечисление.УсловияВыбытияИмущества.ПоДоговоруЗайма) Тогда
						Док.ПризнакЗадолженности = Перечисление.ПризнакЗадолженности.Дебиторская;
						Док.НДС   = ДокументОперацииВыбытия.НДС;
					   
					ИначеЕсли УсловиеВыбытия = Перечисление.УсловияВыбытияИмущества.ВСчетРанееПолученныхАвансов Тогда
						Док.ПризнакЗадолженности = Перечисление.ПризнакЗадолженности.Кредиторская;
						Док.НДС   = ДокументОперацииВыбытия.НДС;
						
					Иначе
						Док.ПризнакЗадолженности = Перечисление.ПризнакЗадолженности.НеИзменяется;
					КонецЕсли;                                
					Док.ПризнакДоходаРасхода = Перечисление.ПризнакДоходаРасхода.Доход;
					Док.НазначитьТип("ВидДоходаРасхода", "Перечисление.ВнереализационныеДоходы");
					Док.ВидДоходаРасхода = ДокументОперацииВыбытия.ЭлементДохода;
					Док.Сумма = Док.НДС + ДокументОперацииВыбытия.Сумма;
					Док.НаименованиеОперации = ДокументОперацииВыбытия.НаименованиеОперации;
					ДокументОперацииВыбытия.УдалитьСтроку();
				КонецЦикла;
				ДокументОперацииВыбытия.Записать();	
			КонецЦикла;
			
			Док.Записать();
		КонецЦикла;
		
		Таб.ВывестиСекцию(Строка(Номер));
		
	ИначеЕсли Номер = 770433 Тогда
		
		Состояние("Установка значений констант");
		Константа.УчитыватьПокупнуюСтоимостьТоваров.Установить('01.01.1980', Да);
		                                   
		// В счетах-фактурах на аванс по валютным договорам, оплата по которым
		// производится в рублях, пересчитаем все валютные суммы в рубли.
		Состояние("Обновление документов");
		Док = СоздатьОбъект("Документ.СчетФактура");
		Док.ВыбратьДокументы();
		Пока Док.ПолучитьДокумент() = 1 Цикл
			Если Док.Аванс = 1 Тогда
			    Если (ПустоеЗначение(Док.Договор.ВалютаДоговора) = 0)
				   и (Док.Договор.ОплатаДоговора = 1) Тогда
					Курс = Док.Курс;
					Кратность = Док.Договор.ВалютаДоговора.Кратность.Получить(Док.ДатаДок);
					Кратность = ?(Кратность=0, 1, Кратность);
					Док.ВыбратьСтроки();
					Пока Док.Получитьстроку() = 1 Цикл
					    Док.Сумма = Док.Сумма*Курс/Кратность;
						Док.Цена  = Окр(Док.Сумма/?(Док.Количество=0,1,Док.Количество),2,1);
						Док.НДС   = Док.НДС*Курс/Кратность;
						Док.Всего = Док.Всего*Курс/Кратность;
					КонецЦикла;
					Док.Записать();
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		Таб.ВывестиСекцию(Строка(Номер));
		
	ИначеЕсли Номер = 770434 Тогда
		
		Номенклатура = СоздатьОбъект("Справочник.Номенклатура");
		Номенклатура.ВыбратьЭлементы();
		Пока Номенклатура.ПолучитьЭлемент() = 1 Цикл
			Если Номенклатура.ЭтоГруппа() = 1 Тогда
				Продолжить;
			КонецЕсли;
		    Если Номенклатура.ТипНоменклатуры = Перечисление.ТипыНоменклатуры.Товар Тогда
		    	Номенклатура.ПлановаяСебестоимость.Установить('01.01.1980', Номенклатура.Себестоимость);
		    КонецЕсли;
		КонецЦикла;
		
		// загрузка справочника Документы, удостоверяющие личность
		СпрДокументы = СоздатьОбъект("Справочник.ДокументыУдостоверяющиеЛичность");
		Если СпрДокументы.ВыбратьЭлементы()=0 Тогда
			УстановитьДокументУдЛичность(СпрДокументы, "01", "паспорт",			"Паспорт гражданина СССР");
			УстановитьДокументУдЛичность(СпрДокументы, "02", "згпаспорт",			"Загранпаспорт гр. СССР");
			УстановитьДокументУдЛичность(СпрДокументы, "03", "свид о рожд",		"Свидетельство о рождении");
			УстановитьДокументУдЛичность(СпрДокументы, "04", "удост офицера",		"Удостоверение личности офицера");
			УстановитьДокументУдЛичность(СпрДокументы, "05", "справка об осв",	"Справка об освобождении из места лишения свободы ");
			УстановитьДокументУдЛичность(СпрДокументы, "06", "паспорт морфлт",	"Паспорт Минморфлота");
			УстановитьДокументУдЛичность(СпрДокументы, "07", "военный билет",		"Военный билет солдата (матроса, сержанта, старшины)");
			УстановитьДокументУдЛичность(СпрДокументы, "09", "диппаспорт рф",		"Дипломатический паспорт гражданина РФ");
			УстановитьДокументУдЛичность(СпрДокументы, "10", "инпаспорт",			"Иностранный паспорт");
			УстановитьДокументУдЛичность(СпрДокументы, "11", "свид беженца",		"Свидетельство о регистрации ходатайства о признании иммигранта беженцем");
			УстановитьДокументУдЛичность(СпрДокументы, "12", "вид на житель",		"Вид на жительство");
			УстановитьДокументУдЛичность(СпрДокументы, "13", "удост беженца",		"Удостоверение беженца в РФ");
			УстановитьДокументУдЛичность(СпрДокументы, "14", "врем удост",		"Временное удостоверение личности гражданина РФ");
			УстановитьДокументУдЛичность(СпрДокументы, "21", "паспорт россии",	"Паспорт гражданина России");
			УстановитьДокументУдЛичность(СпрДокументы, "22", "згпаспорт рф",		"Загранпаспорт гражданина РФ");
			УстановитьДокументУдЛичность(СпрДокументы, "26", "паспорт моряка",	"Паспорт моряка");
			УстановитьДокументУдЛичность(СпрДокументы, "27", "воен билет оз",		"Военный билет офицера запаса");
			УстановитьДокументУдЛичность(СпрДокументы, "91", "прочее",			"Иные документы, выдаваемые органами МВД");
		КонецЕсли;
		
		Для НомерГода = 2 по 9 Цикл
			Состояние("Обновление налоговых карточек");
			ИмяФайлаСохраненияОтчета = КаталогИБ() + "tcard-0"+НомерГода+".rvs";
			СписокСотрудников = СоздатьОбъект("СписокЗначений");
			Итоги1 = СоздатьОбъект("СписокЗначений"); // итоги, сохраненные в файле
			Итоги2 = СоздатьОбъект("Справочник.КарточкиУчетаДоходов"); // итоги в новом формате
			Сотр = СоздатьОбъект("Справочник.Сотрудники");
			СпрОКСМ = СоздатьОбъект("Справочник.ОКСМ");
			Если ФС.СуществуетФайл(ИмяФайлаСохраненияОтчета) = 1 Тогда
				ЗначениеИзФайла(ИмяФайлаСохраненияОтчета, СписокСотрудников);
				Для СчетчикЦикла = 1 по СписокСотрудников.РазмерСписка() Цикл
					ТабельныйНомер = "";
					Итоги1 = СписокСотрудников.ПолучитьЗначение(СчетчикЦикла, ТабельныйНомер);
					Состояние("Обновление налоговой карточки №"+ТабельныйНомер);
					
					Если Сотр.НайтиПоКоду(ТабельныйНомер) = 0 Тогда
					    Продолжить;
						
					ИначеЕсли Сотр.ЭтоГруппа() = 1 Тогда
						Продолжить;
					КонецЕсли;
					
					Итоги2.ИспользоватьВладельца(Сотр.ТекущийЭлемент());
					// Поиск карточки в справочнике
					Если Итоги2.НайтиПоКоду("200"+НомерГода) = 0 Тогда
					    Итоги2.Новый();
						Итоги2.Код = "200"+НомерГода;
						
					Иначе
						Итоги2.ВыбратьЭлементы();
						СписокЭлементов = СоздатьОбъект("СписокЗначений");
						Пока Итоги2.ПолучитьЭлемент() = 1 Цикл
							Если Итоги2.Код = ("200"+НомерГода) Тогда
								СписокЭлементов.ДобавитьЗначение(Итоги2.ТекущийЭлемент());
							КонецЕсли;
						КонецЦикла;
						// в справочнике должен быть только один элемент
						// с данными за каждый год 
						Элемент = СписокЭлементов.ПолучитьЗначение(1);
						СписокЭлементов.УдалитьЗначение(1);
						// лишние элементы (возможно, появившиеся в распределенных ИБ) - удалим
						Если СписокЭлементов.РазмерСписка() > 0 Тогда
							Для индСписка = 1 по СписокЭлементов.РазмерСписка() Цикл
								Итоги2.НайтиЭлемент(СписокЭлементов.ПолучитьЗначение(индСписка));
								Итоги2.Удалить(1);
							КонецЦикла;
							СписокЭлементов.УдалитьВсе();
						КонецЕсли;
						Итоги2.НайтиЭлемент(Элемент);
						
						Если ПустоеЗначение(Итоги2.СписокПолейНалоговойКарточки) = 0 Тогда // карточка уже обновлена
					    	Продолжить;
						КонецЕсли;
					КонецЕсли;
					
					Если ПустоеЗначение(Итоги1) = 1 Тогда // нет исходной карточки
						Продолжить;
						
					ИначеЕсли Итоги1.РазмерСписка() = 0 Тогда // нет исходной карточки
						Продолжить;
					КонецЕсли;
					
					// Заполнение кадровых данных сотрудников
					КодСтраны = Итоги1.Получить("СтранаСотрудника");
					Если (СпрОКСМ.НайтиПоКоду(КодСтраны) = 0) и (ПустоеЗначение(СокрЛП(КодСтраны)) = 0) Тогда
					    СпрОКСМ.Новый();
						СпрОКСМ.Код = КодСтраны;
						СпрОКСМ.Наименование = ?(КодСтраны = "643", "Россия", "<???>");
						СпрОКСМ.Записать();
						Сотр.Страна = СпрОКСМ.ТекущийЭлемент();
					КонецЕсли;
					Сотр.СтраховойНомерПФР = Итоги1.Получить("НомПФР");
					
					КодДокумента = Итоги1.Получить("Р2_41");
					СпрДокументы.ВыбратьЭлементы();
					Пока СпрДокументы.ПолучитьЭлемент() = 1 Цикл
						Если КодДокумента = СпрДокументы.КодНДФЛ Тогда
						    Сотр.ВидДокумента = СпрДокументы.ТекущийЭлемент();
						КонецЕсли;
					КонецЦикла;
					
					Индекс = Итоги1.Получить("_АС_Индекс");
					Регион = "";
					Район = Итоги1.Получить("_АС_Район");
					Город = Итоги1.Получить("_АС_Город");
					НасПункт = Итоги1.Получить("_АС_НП");
					Улица = Итоги1.Получить("_АС_Улица");
					Дом = Итоги1.Получить("_АС_Дом");
					Корпус = Итоги1.Получить("_АС_Корпус");
					Квартира = Итоги1.Получить("_АС_Квартира");
					
					Адрес = "," + СокрЛП(Индекс) +
							"," + СокрЛП(Регион) + 
							"," + СокрЛП(Район) + 
							"," + СокрЛП(Город) + 
							"," + СокрЛП(НасПункт) + 
							"," + СокрЛП(Улица) + 
							"," + СокрЛП(Дом) + 
							"," + СокрЛП(Корпус) + 
							"," + СокрЛП(Квартира);
							
					Если СтрДлина(Адрес) > 9 Тогда
					    Сотр.АдресФакт = Адрес;
						Сотр.АдресПрописка = Адрес;
					КонецЕсли;
							
					КодДокумента = Итоги1.Получить("Р2_41");
					СпрДокументы.ВыбратьЭлементы();
					Пока СпрДокументы.ПолучитьЭлемент() = 1 Цикл
					    Если СпрДокументы.КодНДФЛ = КодДокумента Тогда
					        Сотр.ВидДокумента = СпрДокументы.ТекущийЭлемент();
					    КонецЕсли;
					КонецЦикла;
					Сотр.Записать();
					
					// Обработка 5-ого раздела
					Список5Раздела = СоздатьОбъект("СписокЗначений");
					КоличествоДоходовРаздела5 = 0;
					Для НомДохода = 1 по 5 Цикл
						ИСТ35 = Итоги1.Получить("ИСТ35_" + Формат(НомДохода, "Ч(0)2"));
						Если ИСТ35 <> 0 Тогда
						    КоличествоДоходовРаздела5 = КоличествоДоходовРаздела5 + 1;
						КонецЕсли;
					КонецЦикла;
					
					КодДохода = "";
					Для НомДохода = 1 по 5 Цикл
						ИСТ35 = Итоги1.Получить("ИСТ35_" + Формат(НомДохода, "Ч(0)2"));
						Если ИСТ35 = 0 Тогда
						    Продолжить;
						КонецЕсли;
						
						// Создаем новое значение списка доходов раздела 5
						// Значение - таблица получения дохода по месяцам
						// Представление - код дохода
						Если НомДохода = 1 Тогда
						    КодДохода = "2740";
							
						ИначеЕсли НомДохода = 2 Тогда // доход с кодом 3010 переносится в 3-й раздел
							// Найдем свободную строку в 3-м разделе
							Для НомДоходаРаздела3 = 1 по 5 цикл
								ИД = Итоги1.Получить("ИД" + Формат(НомДоходаРаздела3, "Ч(0)2"));
								Если ИД = 0 Тогда
								    Прервать;
								КонецЕсли;
							КонецЦикла;
							
							Если НомДоходаРаздела3 = 6 Тогда
							    Сообщить("Налоговая карточка № " + ТабельныйНомер + ": конвертация дохода с кодом 3010 не выполнена (нет места в разделе 3)", "!");
								
							Иначе
								НомПоляПервогоМесяца = (НомДоходаРаздела3 - 1) * 13 + 3;
								ГодовойДоход = 0;
								МесячныйДоход = 0;
								Итоги1.Установить("П" + Формат(НомПоляПервогоМесяца, "Ч(0)3"), "3010");
								Для НомМесяца = 1 по 12 Цикл
									МесячныйДоход = Итоги1.Получить("П2" + Формат(НомМесяца - 1, "Ч(0)2"));
									ГодовойДоход = ГодовойДоход + МесячныйДоход;
									Итоги1.Установить("П" + Формат(НомПоляПервогоМесяца + НомМесяца, "Ч(0)3"), МесячныйДоход);
								КонецЦикла;
								
								Итоги1.Установить("ИД" + Формат(НомДоходаРаздела3, "Ч(0)2"), ГодовойДоход);
							КонецЕсли;
							
							Продолжить;
							
						ИначеЕсли НомДохода = 3 Тогда
						    КодДохода = "1210";
							
						ИначеЕсли НомДохода = 4 Тогда
						    КодДохода = "3020";
							
						ИначеЕсли НомДохода = 5 Тогда
						    КодДохода = "2610";
						КонецЕсли;
						
						Таблица5Раздела = СоздатьОбъект("ТаблицаЗначений");
						Таблица5Раздела.НоваяКолонка("МесяцДохода", "Число", 2);
						Таблица5Раздела.НоваяКолонка("КодДохода", "Строка", 4);
						Таблица5Раздела.НоваяКолонка("КодВычета", "Строка", 4);
						Таблица5Раздела.НоваяКолонка("СуммаДохода", "Число", 15, 2);
						Таблица5Раздела.НоваяКолонка("СуммаВычета", "Число", 15, 2);
						Таблица5Раздела.НоваяКолонка("НБ", "Число", 15, 2);
						Таблица5Раздела.НоваяКолонка("НИ", "Число", 15, 2);
						Таблица5Раздела.НоваяКолонка("НУ", "Число", 15, 2);
						Таблица5Раздела.НоваяКолонка("ДолгНП", "Число", 15, 2);
						Таблица5Раздела.НоваяКолонка("ДолгНА", "Число", 15, 2);
						Таблица5Раздела.НоваяКолонка("Взыскание", "Число", 15, 2);
						Таблица5Раздела.НоваяКолонка("Возвращена", "Число", 15, 2);
					
						Для индМес = 1 по 12 Цикл
							СуммаДохода = Итоги1.Получить("П" + Формат(187 + индМес + 12 * (НомДохода - 1), "Ч(0)3"));
							Если СуммаДохода = 0 Тогда
							    Продолжить;
							КонецЕсли;
							
							Пока Таблица5Раздела.КоличествоСтрок() < индМес Цикл
							    Таблица5Раздела.НоваяСтрока();
							КонецЦикла;
							
							Таблица5Раздела.УстановитьЗначение(индМес, "КодДохода", КодДохода);
							Таблица5Раздела.УстановитьЗначение(индМес, "СуммаДохода", СуммаДохода);
							
							Если КодДохода = "2740" Тогда
								Таблица5Раздела.УстановитьЗначение(индМес, "КодВычета", "505");
								Таблица5Раздела.УстановитьЗначение(индМес, "СуммаВычета", Итоги1.Получить("П2" + Формат(47 + индМес, "Ч(0)2")));
							КонецЕсли;
							
							Таблица5Раздела.УстановитьЗначение(индМес, "МесяцДохода", индМес);
							Таблица5Раздела.УстановитьЗначение(индМес, "НБ", Итоги1.Получить("Дох35НБ" + Формат(индМес, "Ч(0)2")));
							Таблица5Раздела.УстановитьЗначение(индМес, "НИ", Итоги1.Получить("СТ35НИ" + Формат(индМес, "Ч(0)2")));
							Таблица5Раздела.УстановитьЗначение(индМес, "НУ", Итоги1.Получить("П2" + Формат(59 + индМес, "Ч(0)2")));
							Таблица5Раздела.УстановитьЗначение(индМес, "ДолгНП", Итоги1.Получить("Долг35НП" + Формат(индМес, "Ч(0)2")));
							Таблица5Раздела.УстановитьЗначение(индМес, "ДолгНА", Итоги1.Получить("Долг35НА" + Формат(индМес, "Ч(0)2")));
							Таблица5Раздела.УстановитьЗначение(индМес, "Взыскание", Итоги1.Получить("Нал35Взыск" + Формат(индМес, "Ч(0)2")));
							Таблица5Раздела.УстановитьЗначение(индМес, "Возвращена", Итоги1.Получить("Нал35Возвр" + Формат(индМес, "Ч(0)2")));
							
							Итоги1.Установить("Дох35НБ" + Формат(индМес, "Ч(0)2"), 0);
							Итоги1.Установить("СТ35НИ" + Формат(индМес, "Ч(0)2"), 0);
							Итоги1.Установить("П2" + Формат(59 + индМес, "Ч(0)2"), 0);
							Итоги1.Установить("Долг35НП" + Формат(индМес, "Ч(0)2"), 0);
							Итоги1.Установить("Долг35НА" + Формат(индМес, "Ч(0)2"), 0);
							Итоги1.Установить("Нал35Взыск" + Формат(индМес, "Ч(0)2"), 0);
							Итоги1.Установить("Нал35Возвр" + Формат(индМес, "Ч(0)2"), 0);
						КонецЦикла;
						
						Список5Раздела.ДобавитьЗначение(Таблица5Раздела, КодДохода);
					КонецЦикла;
					
					// Суммы налоговой базы и налогов, нераспределенные по кодам доходов, отнесем к первой таблице раздела 5
					Если Список5Раздела.РазмерСписка() = 0 Тогда
						Таблица5Раздела = СоздатьОбъект("ТаблицаЗначений");
						Таблица5Раздела.НоваяКолонка("МесяцДохода", "Число", 2);
						Таблица5Раздела.НоваяКолонка("КодДохода", "Строка", 4);
						Таблица5Раздела.НоваяКолонка("КодВычета", "Строка", 4);
						Таблица5Раздела.НоваяКолонка("СуммаДохода", "Число", 15, 2);
						Таблица5Раздела.НоваяКолонка("СуммаВычета", "Число", 15, 2);
						Таблица5Раздела.НоваяКолонка("НБ", "Число", 15, 2);
						Таблица5Раздела.НоваяКолонка("НИ", "Число", 15, 2);
						Таблица5Раздела.НоваяКолонка("НУ", "Число", 15, 2);
						Таблица5Раздела.НоваяКолонка("ДолгНП", "Число", 15, 2);
						Таблица5Раздела.НоваяКолонка("ДолгНА", "Число", 15, 2);
						Таблица5Раздела.НоваяКолонка("Взыскание", "Число", 15, 2);
						Таблица5Раздела.НоваяКолонка("Возвращена", "Число", 15, 2);
						
					Иначе
						КодДохода = "";
					    Таблица5Раздела = СоздатьОбъект("ТаблицаЗначений");
						Список5Раздела.ПолучитьЗначение(1, КодДохода).Выгрузить(Таблица5Раздела);
					КонецЕсли;	
					
					Для индМес = 1 по 12 Цикл
						НБ = Итоги1.Получить("Дох35НБ" + Формат(индМес, "Ч(0)2"));
						НИ = Итоги1.Получить("СТ35НИ" + Формат(индМес, "Ч(0)2"));
						НУ = Итоги1.Получить("П2" + Формат(59 + индМес, "Ч(0)2"));
						ДолгНП = Итоги1.Получить("Долг35НП" + Формат(индМес, "Ч(0)2"));
						ДолгНА = Итоги1.Получить("Долг35НА" + Формат(индМес, "Ч(0)2"));
						Взыскание = Итоги1.Получить("Нал35Взыск" + Формат(индМес, "Ч(0)2"));
						Возвращена = Итоги1.Получить("Нал35Возвр" + Формат(индМес, "Ч(0)2"));

						Если (НБ + НИ + НУ + ДолгНП + ДолгНА + Взыскание + Возвращена)= 0 Тогда
						    Продолжить;
						КонецЕсли;
						
						Пока Таблица5Раздела.КоличествоСтрок() < индМес Цикл
						    Таблица5Раздела.НоваяСтрока();
						КонецЦикла;
						
						Таблица5Раздела.УстановитьЗначение(индМес, "КодДохода", КодДохода);
						Таблица5Раздела.УстановитьЗначение(индМес, "МесяцДохода", индМес);
						Таблица5Раздела.УстановитьЗначение(индМес, "НБ", Таблица5Раздела.ПолучитьЗначение(индМес, "НБ") + НБ);
						Таблица5Раздела.УстановитьЗначение(индМес, "НИ", Таблица5Раздела.ПолучитьЗначение(индМес, "НИ") + НИ);
						Таблица5Раздела.УстановитьЗначение(индМес, "НУ", Таблица5Раздела.ПолучитьЗначение(индМес, "НУ") + НУ);
						Таблица5Раздела.УстановитьЗначение(индМес, "ДолгНП", Таблица5Раздела.ПолучитьЗначение(индМес, "ДолгНП") + ДолгНП);
						Таблица5Раздела.УстановитьЗначение(индМес, "ДолгНА", Таблица5Раздела.ПолучитьЗначение(индМес, "ДолгНА") + ДолгНА);
						Таблица5Раздела.УстановитьЗначение(индМес, "Взыскание", Таблица5Раздела.ПолучитьЗначение(индМес, "Взыскание") + Взыскание);
						Таблица5Раздела.УстановитьЗначение(индМес, "Возвращена", Таблица5Раздела.ПолучитьЗначение(индМес, "Возвращена") + Возвращена);
					КонецЦикла;
					
					Если Список5Раздела.РазмерСписка() = 0 Тогда
						Список5Раздела.ДобавитьЗначение(Таблица5Раздела, КодДохода);
						
					Иначе
						Список5Раздела.УстановитьЗначение(1, Таблица5Раздела, КодДохода);
					КонецЕсли;
					
					// Добавление новых полей
					Итоги1.Установить("ДокРезидентства", Итоги1.Получить("Р2_10"));
					Итоги1.Установить("СуммаСПредМестаРаботы", 0);
					Итоги1.Установить("П146", Итоги1.Получить("Дети"));
					Итоги1.Установить("Доход5раздела", ?(КодДохода = "", "", "Код дохода " + КодДохода + " сумма дохода"));
					Итоги1.Установить("ОбщВозвр6", 0);
					Итоги1.Установить("ОбщЗач6", 0);
					Итоги1.Установить("ОбщВозвр13", Итоги1.Получить("ОбщСт13Возвр"));
					Итоги1.Установить("ОбщЗач13", Итоги1.Получить("ОбщСт13НО"));
					Итоги1.Установить("ОбщВозвр30", Итоги1.Получить("ОбщСт30Возвр"));
					Итоги1.Установить("ОбщЗач30", Итоги1.Получить("ОбщСт30НО"));
					Итоги1.Установить("ОбщВозвр35", Итоги1.Получить("ОбщСт35Возвр"));
					Итоги1.Установить("ОбщЗач35", Итоги1.Получить("ОбщСт35НО"));
					
					Итоги1.Установить("ОбщСт6НИ", 0);
					Итоги1.Установить("ОбщСт6НУ", 0);
					Итоги1.Установить("ОбщСт6ДНП", 0);
					Итоги1.Установить("ОбщСт6ДНА", 0);
					Итоги1.Установить("ОбщСт6Взыск", 0);
					Итоги1.Установить("ИОбщВозвр", Итоги1.Получить("ИОбщСтВозвр"));
					Итоги1.Установить("ИОбщЗач", Итоги1.Получить("ИОбщСтНО"));
					
					ТаблицаСтандартныхВычетов = СоздатьОбъект("ТаблицаЗначений");
					ТаблицаСтандартныхВычетов.НоваяКолонка("Код101", "Число");
					ТаблицаСтандартныхВычетов.НоваяКолонка("Код102", "Число");
					ТаблицаСтандартныхВычетов.НоваяКолонка("Код103", "Число");
					ТаблицаСтандартныхВычетов.НоваяКолонка("Код104", "Число");
					ТаблицаСтандартныхВычетов.НоваяКолонка("Код105", "Число");
					
					Код1 = Итоги1.Получить("СВКод1");
					Если (Код1 <> "101") и (Код1 <> "102") и (Код1 <> "103") и (Код1 <> "104")  и (Код1 <> "105") Тогда
					    Код1 = "";
					КонецЕсли;
					
					Код2 = Итоги1.Получить("СВКод2");
					Если (Код2 <> "101") и (Код2 <> "102") и (Код2 <> "103") и (Код2 <> "104")  и (Код2 <> "105") Тогда
					    Код2 = "";
					КонецЕсли;
					
					Код3 = Итоги1.Получить("СВКод3");
					Если (Код3 <> "101") и (Код3 <> "102") и (Код3 <> "103") и (Код3 <> "104")  и (Код3 <> "105") Тогда
					    Код3 = "";
					КонецЕсли;
					
					Для НомМесяца = 1 по 12 Цикл
						ТаблицаСтандартныхВычетов.НоваяСтрока();
						Если Код1 <> "" Тогда
						    ТаблицаСтандартныхВычетов.УстановитьЗначение(НомМесяца, "Код" + Код1, Итоги1.Получить("СВМес1" + Формат(НомМесяца, "Ч(0)2"))); 
						КонецЕсли;
						
						Если Код2 <> "" Тогда
						    ТаблицаСтандартныхВычетов.УстановитьЗначение(НомМесяца, "Код" + Код2, Итоги1.Получить("СВМес2" + Формат(НомМесяца, "Ч(0)2")));
						КонецЕсли;
						
						Если Код3 <> "" Тогда
						    ТаблицаСтандартныхВычетов.УстановитьЗначение(НомМесяца, "Код" + Код3, Итоги1.Получить("СВМес3" + Формат(НомМесяца, "Ч(0)2")));
						КонецЕсли;
					КонецЦикла;
	
					Для НомМесяца = 1 по 12 Цикл
						Итоги1.Установить("СВМес1" + Формат(НомМесяца, "Ч(0)2"), ТаблицаСтандартныхВычетов.ПолучитьЗначение(НомМесяца, "Код101"));
						Итоги1.Установить("СВМес2" + Формат(НомМесяца, "Ч(0)2"), ТаблицаСтандартныхВычетов.ПолучитьЗначение(НомМесяца, "Код102"));
						Итоги1.Установить("СВМес3" + Формат(НомМесяца, "Ч(0)2"), ТаблицаСтандартныхВычетов.ПолучитьЗначение(НомМесяца, "Код103"));
						Итоги1.Установить("СВМес4" + Формат(НомМесяца, "Ч(0)2"), ТаблицаСтандартныхВычетов.ПолучитьЗначение(НомМесяца, "Код104"));
						Итоги1.Установить("СВМес5" + Формат(НомМесяца, "Ч(0)2"), ТаблицаСтандартныхВычетов.ПолучитьЗначение(НомМесяца, "Код105"));
						Итоги1.Установить("НД6И" + Формат(НомМесяца, "Ч(0)2"), Итоги1.Получить("НД30И" + Формат(НомМесяца, "Ч(0)2")));
					КонецЦикла;
					
					Итоги1.Установить("ИСВМес1", ТаблицаСтандартныхВычетов.Итог("Код101"));
					Итоги1.Установить("ИСВМес2", ТаблицаСтандартныхВычетов.Итог("Код102"));
					Итоги1.Установить("ИСВМес3", ТаблицаСтандартныхВычетов.Итог("Код103"));
					Итоги1.Установить("ИСВМес4", ТаблицаСтандартныхВычетов.Итог("Код104"));
					Итоги1.Установить("ИСВМес5", ТаблицаСтандартныхВычетов.Итог("Код105"));
					Итоги1.Установить("ИНД6И", Итоги1.Получить("ИНД30И"));
					
					// Удаление полей, неиспользующихся в новом формате
	
					СписокУдаляемыхПолей = СоздатьОбъект("СписокЗначений");
					СписокУдаляемыхПолей.ДобавитьЗначение("Ответственный");
					СписокУдаляемыхПолей.ДобавитьЗначение("НомПФР");
					СписокУдаляемыхПолей.ДобавитьЗначение("Р2_2");
					СписокУдаляемыхПолей.ДобавитьЗначение("Р2_4");
					СписокУдаляемыхПолей.ДобавитьЗначение("Р2_41");
					СписокУдаляемыхПолей.ДобавитьЗначение("СтранаСотрудника");
					СписокУдаляемыхПолей.ДобавитьЗначение("_АС_Индекс");
					СписокУдаляемыхПолей.ДобавитьЗначение("_АС_Регион");
					СписокУдаляемыхПолей.ДобавитьЗначение("_АС_Район");
					СписокУдаляемыхПолей.ДобавитьЗначение("_АС_Город");
					СписокУдаляемыхПолей.ДобавитьЗначение("_АС_НП");
					СписокУдаляемыхПолей.ДобавитьЗначение("_АС_Улица");
					СписокУдаляемыхПолей.ДобавитьЗначение("_АС_Дом");
					СписокУдаляемыхПолей.ДобавитьЗначение("_АС_Корпус");
					СписокУдаляемыхПолей.ДобавитьЗначение("_АС_Квартира");
					СписокУдаляемыхПолей.ДобавитьЗначение("Р2_8");
					СписокУдаляемыхПолей.ДобавитьЗначение("Р2_10");
					СписокУдаляемыхПолей.ДобавитьЗначение("Р2_11а");
					СписокУдаляемыхПолей.ДобавитьЗначение("СВКод1");
					СписокУдаляемыхПолей.ДобавитьЗначение("СВКод2");
					СписокУдаляемыхПолей.ДобавитьЗначение("СВКод3");
					СписокУдаляемыхПолей.ДобавитьЗначение("Дети");
					СписокУдаляемыхПолей.ДобавитьЗначение("ОбщСт13Возвр");
					СписокУдаляемыхПолей.ДобавитьЗначение("ОбщСт13НО");
					СписокУдаляемыхПолей.ДобавитьЗначение("ОбщСт30Возвр");
					СписокУдаляемыхПолей.ДобавитьЗначение("ОбщСт30НО");
					СписокУдаляемыхПолей.ДобавитьЗначение("ОбщСт35Возвр");
					СписокУдаляемыхПолей.ДобавитьЗначение("ОбщСт35НО");
					СписокУдаляемыхПолей.ДобавитьЗначение("ИОбщСтВозвр");
					СписокУдаляемыхПолей.ДобавитьЗначение("ИОбщСтНО");
					СписокУдаляемыхПолей.ДобавитьЗначение("ДолжностьПроверяющего1");
					СписокУдаляемыхПолей.ДобавитьЗначение("ДолгНП");
					СписокУдаляемыхПолей.ДобавитьЗначение("ДолгНА");
					СписокУдаляемыхПолей.ДобавитьЗначение("ИНПД");
					СписокУдаляемыхПолей.ДобавитьЗначение("ИНД30И");
					СписокУдаляемыхПолей.ДобавитьЗначение("ИНДЗач");
					СписокУдаляемыхПолей.ДобавитьЗначение("ИСТ35_02");
					СписокУдаляемыхПолей.ДобавитьЗначение("ИСТ35_03");
					СписокУдаляемыхПолей.ДобавитьЗначение("ИСТ35_04");
					СписокУдаляемыхПолей.ДобавитьЗначение("ИСТ35_05");
					СписокУдаляемыхПолей.ДобавитьЗначение("ИПродаж4");
					СписокУдаляемыхПолей.ДобавитьЗначение("ИПродаж5");
					СписокУдаляемыхПолей.ДобавитьЗначение("ИДоход01");
					СписокУдаляемыхПолей.ДобавитьЗначение("ИДоход02");
					СписокУдаляемыхПолей.ДобавитьЗначение("ИДоход03");
					СписокУдаляемыхПолей.ДобавитьЗначение("ИДоход04");
					СписокУдаляемыхПолей.ДобавитьЗначение("ИДоход05");
					СписокУдаляемыхПолей.ДобавитьЗначение("ИДоход06");
					СписокУдаляемыхПолей.ДобавитьЗначение("ИДохЛьгота");
					
	                Для НомМесяца = 1 по 12 Цикл
						СписокУдаляемыхПолей.ДобавитьЗначение("НД30И" + Формат(НомМесяца, "Ч(0)2"));
						СписокУдаляемыхПолей.ДобавитьЗначение("НДЗач" + Формат(НомМесяца, "Ч(0)2"));
						СписокУдаляемыхПолей.ДобавитьЗначение("ДохЛьгота" + Формат(НомМесяца, "Ч(0)2"));
					КонецЦикла;
					
					Для Ном = 152 по 163 Цикл
						СписокУдаляемыхПолей.ДобавитьЗначение("П" + Ном);
					КонецЦикла;
					
					Для Ном = 200 по 247 Цикл
						СписокУдаляемыхПолей.ДобавитьЗначение("П" + Ном);
					КонецЦикла;
					
					Для Ном = 314 по 417 Цикл
						СписокУдаляемыхПолей.ДобавитьЗначение("П" + Ном);
					КонецЦикла;
					
					Позиция = 1;
					Пока Позиция <= Итоги1.РазмерСписка() Цикл
					    Представление = "";
						Итоги1.ПолучитьЗначение(Позиция, Представление);
						Если СписокУдаляемыхПолей.НайтиЗначение(Представление) > 0 Тогда
							 Итоги1.УдалитьЗначение(Позиция);
						
						Иначе
						    Позиция = Позиция + 1;
						КонецЕсли;
					КонецЦикла;
					
					// Запись элемента справочника карточек				
					Итоги2.СписокПолейНалоговойКарточки = ЗначениеВСтроку(Итоги1);
					Итоги2.СписокПолейНалоговойКарточкиПоМатВыгоде = ЗначениеВСтроку(Список5Раздела);
					Итоги2.Записать();
				КонецЦикла;
			КонецЕсли;
			
			Состояние("Обновление индивидуальных карточек");
			ИмяФайлаСохраненияОтчета = КаталогИБ() + "icard-0"+НомерГода+".rvs";
			СписокСотрудников = СоздатьОбъект("СписокЗначений");
			Итоги1 = СоздатьОбъект("СписокЗначений"); // итоги, сохраненные в файле
			Итоги2 = СоздатьОбъект("Справочник.КарточкиУчетаДоходов"); // итоги в новом формате
			Сотр = СоздатьОбъект("Справочник.Сотрудники");
			Если ФС.СуществуетФайл(ИмяФайлаСохраненияОтчета) = 1 Тогда
				ЗначениеИзФайла(ИмяФайлаСохраненияОтчета, СписокСотрудников);
				Для СчетчикЦикла = 1 по СписокСотрудников.РазмерСписка() Цикл
					ТабельныйНомер = "";
					Итоги1 = СписокСотрудников.ПолучитьЗначение(СчетчикЦикла, ТабельныйНомер);
					Состояние("Обновление индивидуальной карточки №"+ТабельныйНомер);
					
					Если Сотр.НайтиПоКоду(ТабельныйНомер) = 0 Тогда
					    Продолжить;
						
					ИначеЕсли Сотр.ЭтоГруппа() = 1 Тогда
						Продолжить;
					КонецЕсли;
					
					Итоги2.ИспользоватьВладельца(Сотр.ТекущийЭлемент());
					// Поиск карточки в справочнике
					Если Итоги2.НайтиПоКоду("200"+НомерГода) = 0 Тогда
					    Итоги2.Новый();
						Итоги2.Код = "200"+НомерГода;
						
					Иначе
						Итоги2.ВыбратьЭлементы();
						СписокЭлементов = СоздатьОбъект("СписокЗначений");
						Пока Итоги2.ПолучитьЭлемент() = 1 Цикл
							Если Итоги2.Код = ("200"+НомерГода) Тогда
								СписокЭлементов.ДобавитьЗначение(Итоги2.ТекущийЭлемент());
							КонецЕсли;
						КонецЦикла;
						// в справочнике должен быть только один элемент
						// с данными за каждый год 
						Элемент = СписокЭлементов.ПолучитьЗначение(1);
						СписокЭлементов.УдалитьЗначение(1);
						// лишние элементы (возможно, появившиеся в распределенных ИБ) - удалим
						Если СписокЭлементов.РазмерСписка() > 0 Тогда
							Для индСписка = 1 по СписокЭлементов.РазмерСписка() Цикл
								Итоги2.НайтиЭлемент(СписокЭлементов.ПолучитьЗначение(индСписка));
								Итоги2.Удалить(1);
							КонецЦикла;
							СписокЭлементов.УдалитьВсе();
						КонецЕсли;
						Итоги2.НайтиЭлемент(Элемент);
						
						Если ПустоеЗначение(Итоги2.СписокПолейИндивидульнойКарточки) = 0 Тогда // карточка уже обновлена
					    	Продолжить;
						КонецЕсли;
					КонецЕсли;
					
					Если ПустоеЗначение(Итоги1) = 1 Тогда // нет исходной карточки
						Продолжить;
						
					ИначеЕсли Итоги1.РазмерСписка() = 0 Тогда // нет исходной карточки
						Продолжить;
					КонецЕсли;
					
					// Удаление полей, неиспользующихся в новом формате
					СписокУдаляемыхПолей = СоздатьОбъект("СписокЗначений");
					СписокУдаляемыхПолей.ДобавитьЗначение("СтрахНомерСпецСтрокой");
					СписокУдаляемыхПолей.ДобавитьЗначение("Адрес");
					
					Позиция = 1;
					Пока Позиция <= Итоги1.РазмерСписка() Цикл
					    Представление = "";
						Итоги1.ПолучитьЗначение(Позиция, Представление);
						Если СписокУдаляемыхПолей.НайтиЗначение(Представление) > 0 Тогда
							 Итоги1.УдалитьЗначение(Позиция);
						
						Иначе
						    Позиция = Позиция + 1;
						КонецЕсли;
					КонецЦикла;
					
					Итоги2.СписокПолейИндивидульнойКарточки = ЗначениеВСтроку(Итоги1);
					Итоги2.Записать();
				КонецЦикла;
			КонецЕсли;
		КонецЦикла;
		
		Состояние("Обновление кадровых приказов");
		Док = СоздатьОбъект("Документ.ПриказОПриемеНаРаботу");
		Док.ВыбратьДокументы(,);
		Пока Док.ПолучитьДокумент() = 1 Цикл
		    Если Док.ТипСотрудника = 1 Тогда
				Док.ХарактерРаботы = Перечисление.ХарактерРаботы.ТрудовойДоговор;
				
			ИначеЕсли Док.ТипСотрудника = 2 Тогда
				Если Док.ИсчислятьФССотНС = 1 Тогда
				    Док.ХарактерРаботы = Перечисление.ХарактерРаботы.ДоговорГражданскоПравовогоХарактераВзносы;
					
				Иначе
					Док.ХарактерРаботы = Перечисление.ХарактерРаботы.ДоговорГражданскоПравовогоХарактера;
				КонецЕсли;
			КонецЕсли;
			
			Док.Записать();
			
			Если Док.Проведен() = 1 Тогда
			    Док.Провести(, 1);
			КонецЕсли;
		КонецЦикла;
		
		Док = СоздатьОбъект("Документ.ПриказОКадровыхИзменениях");
		Док.ВыбратьДокументы(,);
		Пока Док.ПолучитьДокумент() = 1 Цикл
		    Если Док.ТипСотрудника = 1 Тогда
				Док.ХарактерРаботы = Перечисление.ХарактерРаботы.ТрудовойДоговор;
				
			ИначеЕсли Док.ТипСотрудника = 2 Тогда
				Если Док.ИсчислятьФССотНС = 1 Тогда
				    Док.ХарактерРаботы = Перечисление.ХарактерРаботы.ДоговорГражданскоПравовогоХарактераВзносы;
					
				Иначе
					Док.ХарактерРаботы = Перечисление.ХарактерРаботы.ДоговорГражданскоПравовогоХарактера;
				КонецЕсли;
			КонецЕсли;
			
			Док.Записать();
			
			Если Док.Проведен() = 1 Тогда
			    Док.Провести();
			КонецЕсли;
		КонецЦикла;
		
		Док = СоздатьОбъект("Документ.ПриказОбУвольнении");
		Док.ВыбратьДокументы(,);
		Пока Док.ПолучитьДокумент() = 1 Цикл
			Если Док.Проведен() = 1 Тогда
			    Док.Провести();
			КонецЕсли;
		КонецЦикла;
		
		Состояние("Обновление справочника ""Сотрудники""");
		ТипСотрудника = СоздатьОбъект("Периодический");
		ИсчислятьФСС_НС = СоздатьОбъект("Периодический");
		Сотр = СоздатьОбъект("Справочник.Сотрудники");
		Сотр.ВыбратьЭлементы();
		Пока Сотр.ПолучитьЭлемент() = 1 Цикл
		    Если (Сотр.ПометкаУдаления() = 0) и (Сотр.ЭтоГруппа() = 0) Тогда
				ДатаПриема = Сотр.ДатаПриема;
				ДатаУвольнения = Сотр.ДатаУвольнения;
				
				// На дату приема
				Если ПустоеЗначение(ДатаПриема) = 0 Тогда
					Если Сотр.ТипСотрудника.Получить(ДатаПриема) = 1 Тогда
					    ПервыйХарактерРаботы = Перечисление.ХарактерРаботы.ТрудовойДоговор;
						
					ИначеЕсли Сотр.ТипСотрудника.Получить(ДатаПриема) = 2 Тогда
						Если Сотр.ИсчислятьФССотНС.Получить(ДатаПриема) = 1 Тогда
						    ПервыйХарактерРаботы = Перечисление.ХарактерРаботы.ДоговорГражданскоПравовогоХарактераВзносы;
							
						Иначе
							ПервыйХарактерРаботы = Перечисление.ХарактерРаботы.ДоговорГражданскоПравовогоХарактера;
						КонецЕсли;
					КонецЕсли;
				    
					Сотр.ХарактерРаботы.Установить(ДатаПриема, ПервыйХарактерРаботы);
					ДатаПриема = ДатаПриема + 1;
					
				Иначе
					ДатаПриема = '01.01.1980';
				КонецЕсли;
					
				// На дату увольнения
				Если ПустоеЗначение(ДатаУвольнения) = 0 Тогда
					Сотр.ХарактерРаботы.Установить(ДатаУвольнения, Перечисление.ХарактерРаботы.ТрудовыеОтношенияПрекращены);
					ДатаУвольнения = ДатаУвольнения - 1;
					
				Иначе
					ДатаУвольнения = РабочаяДата();
				КонецЕсли;
				
				// На значения периодических реквизитов "Тип сотрудника" и "Исчислять ФСС от НС"
				Если ДатаПриема < ДатаУвольнения Тогда
				    ТипСотрудника.ИспользоватьОбъект("ТипСотрудника", Сотр);
					ТипСотрудника.ВыбратьЗначения(ДатаПриема, ДатаУвольнения);
					Пока ТипСотрудника.ПолучитьЗначение() = 1 Цикл
						ТекДата = ТипСотрудника.ДатаЗнач;
						
					    Если Сотр.ТипСотрудника.Получить(ТекДата) = 1 Тогда
						    ХарактерРаботы = Перечисление.ХарактерРаботы.ТрудовойДоговор;
							
						ИначеЕсли Сотр.ТипСотрудника.Получить(ТекДата) = 2 Тогда
							Если Сотр.ИсчислятьФССотНС.Получить(ТекДата) = 1 Тогда
							    ХарактерРаботы = Перечисление.ХарактерРаботы.ДоговорГражданскоПравовогоХарактераВзносы;
								
							Иначе
								ХарактерРаботы = Перечисление.ХарактерРаботы.ДоговорГражданскоПравовогоХарактера;
							КонецЕсли;
						КонецЕсли;
						
						Сотр.ХарактерРаботы.Установить(ТекДата, ХарактерРаботы);
					КонецЦикла;
					
					ИсчислятьФСС_НС.ИспользоватьОбъект("ИсчислятьФССотНС", Сотр.ТекущийЭлемент());
					ИсчислятьФСС_НС.ВыбратьЗначения(ДатаПриема, ДатаУвольнения);
					Пока ИсчислятьФСС_НС.ПолучитьЗначение() = 1 Цикл
						ТекДата = ИсчислятьФСС_НС.ДатаЗнач;
						
					    Если Сотр.ТипСотрудника.Получить(ТекДата) = 1 Тогда
						    ХарактерРаботы = Перечисление.ХарактерРаботы.ТрудовойДоговор;
							
						ИначеЕсли Сотр.ТипСотрудника.Получить(ТекДата) = 2 Тогда
							Если Сотр.ИсчислятьФССотНС.Получить(ТекДата) = 1 Тогда
							    ХарактерРаботы = Перечисление.ХарактерРаботы.ДоговорГражданскоПравовогоХарактераВзносы;
								
							Иначе
								ХарактерРаботы = Перечисление.ХарактерРаботы.ДоговорГражданскоПравовогоХарактера;
							КонецЕсли;
						КонецЕсли;
						
						Сотр.ХарактерРаботы.Установить(ТекДата, ХарактерРаботы);
					КонецЦикла;
				КонецЕсли;
		    КонецЕсли;
		КонецЦикла;
		
		Состояние("Заполнение значений константы ""Использовать регрессивную шкалу тарифов взносов в ПФР""");
		РШ = СоздатьОбъект("Периодический");
		РШ.ИспользоватьОбъект("ИспользоватьРегрессивнуюШкалу");
		РШ.ВыбратьЗначения(,);
		Пока РШ.ПолучитьЗначение() = 1 Цикл
		    Константа.ИспользоватьРегрессивнуюШкалуПФР.Установить(РШ.ДатаЗнач, РШ.Значение);
		КонецЦикла;
		
		Таб.ВывестиСекцию(Строка(Номер));
	
	ИначеЕсли Номер = 770441 Тогда // НОВАЯ РЕДАКЦИЯ
		 
		Состояние("Установка значений констант");
		Константа.СпособВеденияНалоговогоУчета.Установить('01.01.1980', Перечисление.СпособыВеденияНалоговогоУчета.ОтдельнымиНалоговымиДокументами);
		Константа.СпособВеденияНалоговогоУчета.Установить('01.01.2003', Перечисление.СпособыВеденияНалоговогоУчета.ОдновременноСБухгалтерскимУчетом);
		
		Константа.СпособУчетаГПиПФ.Установить('01.01.1980', Перечисление.СпособыУчетаГПиПФ.ПоПлановойСтоимости);
		Константа.СпособУчетаГПиПФ.Установить('01.01.2003', Перечисление.СпособыУчетаГПиПФ.ПоФактическойСтоимости);
		
		Состояние("Корректировка плана счетов");
		Сч = СоздатьОбъект("Счет." + ВыбранныйПланСчетов().Идентификатор());
		ЗаписатьПолноеНаименование("09", "Отложенные налоговые активы");
		ЗаписатьПолноеНаименование("69.2", "Расчеты по пенсионному обеспечению");
		ЗаписатьПолноеНаименование("77", "Отложенные налоговые обязательства");
		ЗаписатьПолноеНаименование("99", "Прибыли и убытки");
		ЗаписатьПолноеНаименование("99.1", "Прибыли и убытки");
		ЗаписатьПолноеНаименование("99.2", "Налог на прибыль");
		ЗаписатьПолноеНаименование("99.2.1", "Условный расход по налогу на прибыль");
		ЗаписатьПолноеНаименование("99.2.2", "Условный доход по налогу на прибыль");
		ЗаписатьПолноеНаименование("99.2.3", "Постоянное налоговое обязательство");
		ЗаписатьПолноеНаименование("Н01.01", "Формирование стоимости объектов основных средств");
		ЗаписатьПолноеНаименование("Н01.08", "Формирование стоимости объектов нематериальных активов");
		ЗаписатьПолноеНаименование("Н01.08", "Формирование стоимости объектов нематериальных активов");
		ЗаписатьПолноеНаименование("Н01.09", "Строительство объектов основных средств");
		ЗаписатьПолноеНаименование("Н02.04", "Отгруженные без перехода права собственности МПЗ");
		ЗаписатьПолноеНаименование("Н02.04.1", "Отгруженные товары");
		ЗаписатьПолноеНаименование("Н02.04.2", "Отгруженная готовая продукция");
		ЗаписатьПолноеНаименование("Н02.04.3", "Отгруженные полуфабрикаты");
		ЗаписатьПолноеНаименование("Н02.07", "Поступление и выбытие полуфабрикатов собственного производства");
		ЗаписатьПолноеНаименование("Н11.02", "Убытки за 2002 год");
		ЗаписатьПолноеНаименование("Н14", "Расходы на оплату труда");
		ЗаписатьПолноеНаименование("Н14.01", "Расходы по сотрудникам, не связанным с производственной деятельностью");
		ЗаписатьПолноеНаименование("Н14.02", "Расходы по сотрудникам, связанным с производственной деятельностью");
		ЗаписатьПолноеНаименование("Н15", "Налоги и отчисления");
		ЗаписатьПолноеНаименование("Н16", "Недостачи и потери от порчи ценностей");
		
		Счет = СоздатьОбъект("Счет");
		Если Счет.НайтиПоКоду("П68.4") = 0 Тогда
		    Если Вопрос("ВНИМАНИЕ. Возможно перед обновление информационной
			            |базы не была запущена внешняя обработка по замене
						|счетов 68.4, 69.3 и 99 (см. файл update.txt)! 
						|Возможна частичная потеря данных. Продолжить", "Да+Нет") <> "Да" Тогда
				Возврат;
			КонецЕсли;
		КонецЕсли;
		
		Сч=СоздатьОбъект("Счет.Основной");
		Счет=СоздатьОбъект("Счет.Основной");
		
		ИзмененаНастройкаБухгалтерскихСчетов = 0;
		
		Сч.ИспользоватьРодителя(СчетПоКоду("П68"));
		Сч.ВыбратьСчета();
		Пока Сч.ПолучитьСчет() = 1 Цикл
			СчетПриемник = СчетПоКоду(СтрЗаменить(Сч.Код, "П",""));
			Если ПустоеЗначение(СчетПриемник) = 0 Тогда
				Если СчетПриемник.ЗаданВКонфигурации() = 0 Тогда
					ТаблицаСчетовП68.НоваяСтрока();
					ТаблицаСчетовП68.СчетИсточник   = Сч.ТекущийСчет();
					ТаблицаСчетовП68.СчетПриемник = СчетПриемник;
					
					// Для субсчетов счета 68, которые введены в
					// режиме предприятия необходимо восстановить
					// "отвалившееся" субконто "Виды расчетов с бюджетом".
				    Если Счет.НайтиСчет(СчетПриемник) = 1 Тогда
						Если (Счет.ВидСубконто(1) <> ТаблицаСчетовП68.СчетИсточник.ВидСубконто(1))
						 или (Счет.ВидСубконто(2) <> ТаблицаСчетовП68.СчетИсточник.ВидСубконто(2))
						 или (Счет.ВидСубконто(3) <> ТаблицаСчетовП68.СчетИсточник.ВидСубконто(3)) Тогда
							Счет.ВидСубконто(1, ТаблицаСчетовП68.СчетИсточник.ВидСубконто(1));
							Счет.ВидСубконто(2, ТаблицаСчетовП68.СчетИсточник.ВидСубконто(2));
							Счет.ВидСубконто(3, ТаблицаСчетовП68.СчетИсточник.ВидСубконто(3));
							Счет.Записать();
							ИзмененаНастройкаБухгалтерскихСчетов = 1;    
						КонецЕсли;
				        
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		ДатаПереносаОстатков = '31.12.2002';
		
		Если ИтогиНаДатуРассчитаны(ДатаПереносаОстатков) = 0 Тогда
			ДальнейшееОбновлениеНевозможно = 1;
			ОтменитьТранзакцию();
			Возврат;
	
		ИначеЕсли ИзмененаНастройкаБухгалтерскихСчетов = 1 Тогда
			Предупреждение("Обновление информационной базы не может быть завершено
						   |без пересчета итогов.
						   |Пересчитайте итоги. После этого нужно выйти из программы и 
						   |повторно войти. Обновление ИБ будет продолжено.
						   |Пересчет итогов  выполняется в режиме
						   |""Операции - Управление бухгалтерскими итогами"".", 60);
			ДальнейшееОбновлениеНевозможно = 1;
			ЗафиксироватьТранзакцию();
			Возврат;
		КонецЕсли;
		
		// Замена кодов счетов и типов аналитики в формах документов.
		Если ОбработкаСчетовВДокументахВыполнена = 0 Тогда
		    ОбработкаСчетовВДокументах();
		КонецЕсли;
		
		Сч68_4_1   = СчетПоКоду("68.4.1");
		Сч69_3_1   = СчетПоКоду("69.3.1");
		Сч69_3_2   = СчетПоКоду("69.3.2");
		Сч99_1     = СчетПоКоду("99.1");
		СчН02_04_1 = СчетПоКоду("Н02.04.1");
		СчН07_04_1 = СчетПоКоду("Н07.04.1");
		
		Состояние("Обновление операций");
		
		СтрокаФильтр = "П68.4,*;*,П68.4;П69.3,*;*,П69.3;П99,*;*,П99;Н02.04,*;*,Н02.04;Н07.04,*;*,Н07.04;";
		ТаблицаСчетовП68.ВыбратьСтроки();
		Пока ТаблицаСчетовП68.ПолучитьСтроку() = 1 Цикл
			Счет = ТаблицаСчетовП68.СчетИсточник;
			СтрокаФильтр = СтрокаФильтр + Счет.Код + ",*;*,"+ Счет.Код + ";";
		КонецЦикла;
		
		Опер = СоздатьОбъект("Операция");
		Опер1 = СоздатьОбъект("Операция");
		Опер.ВыбратьОперацииСПроводками(,, СтрокаФильтр);
		Пока Опер.ПолучитьОперацию() = 1 Цикл
			ОперацияИзменена = 0;
			Опер1.НайтиОперацию(Опер.Документ);
			Опер1.ВыбратьПроводки();
			Пока Опер1.ПолучитьПроводку() = 1 Цикл
				СчетДт = Опер1.Дебет.Счет;
				СчетКт = Опер1.Кредит.Счет;
				Если СчетДт.Код = "П68.4" Тогда
					Опер1.Дебет.Счет = Сч68_4_1;
					
				ИначеЕсли СчетДт.Код = "П69.3" Тогда
					Сотрудник = Опер1.Дебет.Субконто(3);
				    Если Опер1.Дебет.Субконто(2) = Перечисление.ФондыОМС.Территориальный Тогда
				        Опер1.Дебет.Счет = Сч69_3_2;
						
					Иначе
						Опер1.Дебет.Счет = Сч69_3_1
					КонецЕсли;
					Опер1.Дебет.Субконто(2, Сотрудник);
					
				ИначеЕсли СчетДт.Код = "П99" Тогда
					Опер1.Дебет.Счет = Сч99_1;
					
				ИначеЕсли СчетДт.Код = "Н02.04" Тогда
					Опер1.Дебет.Счет = СчН02_04_1;
					
				ИначеЕсли СчетДт.Код = "Н07.04" Тогда
					Опер1.Дебет.Счет = СчН07_04_1;
					
				Иначе
					НомерСтроки = 0;
					Если ТаблицаСчетовП68.НайтиЗначение(СчетДт, НомерСтроки, "СчетИсточник") = 1 Тогда
						СчетЗамены = ТаблицаСчетовП68.ПолучитьЗначение(НомерСтроки, "СчетПриемник");
						Если ПустоеЗначение(СчетЗамены) = 0 Тогда
							Опер1.Дебет.Счет = СчетЗамены;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
				
				Если СчетКт.Код = "П68.4" Тогда
					Опер1.Кредит.Счет = Сч68_4_1;
					
				ИначеЕсли СчетКт.Код = "П69.3" Тогда
					Сотрудник = Опер1.Кредит.Субконто(3);
				    Если Опер1.Кредит.Субконто(2) = Перечисление.ФондыОМС.Территориальный Тогда
				        Опер1.Кредит.Счет = Сч69_3_2;
						
					Иначе
						Опер1.Кредит.Счет = Сч69_3_1
					КонецЕсли;
					Опер1.Кредит.Субконто(2, Сотрудник);
					
				ИначеЕсли СчетКт.Код = "П99" Тогда
					Опер1.Кредит.Счет = Сч99_1;
					
				ИначеЕсли СчетКт.Код = "Н02.04" Тогда
					Опер1.Кредит.Счет = СчН02_04_1;
					
				ИначеЕсли СчетКт.Код = "Н07.04" Тогда
					Опер1.Кредит.Счет = СчН07_04_1;
					
				Иначе
					НомерСтроки = 0;
					Если ТаблицаСчетовП68.НайтиЗначение(СчетКт, НомерСтроки, "СчетИсточник") = 1 Тогда
						СчетЗамены = ТаблицаСчетовП68.ПолучитьЗначение(НомерСтроки, "СчетПриемник");
						Если ПустоеЗначение(СчетЗамены) = 0 Тогда
							Опер1.Кредит.Счет = СчетЗамены;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
				
				Если (СчетДт <> Опер1.Дебет.Счет) или (СчетКт <> Опер1.Кредит.Счет) Тогда
				    ОперацияИзменена = 1;
				КонецЕсли;
				
			КонецЦикла;
			Если ОперацияИзменена = 1 Тогда
			    Опер1.Записать();
			КонецЕсли;
		КонецЦикла;
		
		Состояние("Обновление справочника");
		Спр = СоздатьОбъект("Справочник.НалогиИОтчисления");
		Спр.ВыбратьЭлементы();
		Пока Спр.ПолучитьЭлемент() = 1 Цикл
			Если Спр.Счет.Код = "П68.4" Тогда
				Спр.Счет = Сч68_4_1;
				Спр.Записать();
				
		    ИначеЕсли Спр.Счет.Код = "П69.3" Тогда
		        Если Спр.Субконто2 = Перечисление.ФондыОМС.Территориальный Тогда
					Спр.Счет = Сч69_3_2;
					
				Иначе
					Спр.Счет = Сч69_3_1;
				КонецЕсли;
				Спр.НазначитьТип("Субконто2", "Справочник.Сотрудники");
				Спр.Субконто2 = Спр.Субконто3;
				Спр.НазначитьТип("Субконто3", "");
				Спр.Субконто3 = "";
				Спр.Записать();
				
			ИначеЕсли Спр.Счет.Код = "П99" Тогда
				Спр.Счет = Сч99_1;
				Спр.Записать();
				
			Иначе
				НомерСтроки = 0;
				Если ТаблицаСчетовП68.НайтиЗначение(Спр.Счет, НомерСтроки, "СчетИсточник") = 1 Тогда
					СчетЗамены = ТаблицаСчетовП68.ПолучитьЗначение(НомерСтроки, "СчетПриемник");
					Если ПустоеЗначение(СчетЗамены) = 0 Тогда
						Спр.Счет = СчетЗамены;
						Спр.Записать();
					КонецЕсли;
				КонецЕсли;
		    КонецЕсли;
		КонецЦикла;
		
		Операция = СоздатьОбъект("Операция");
		
		Состояние("Перенос внеоборотных активов");
		Операция.Новая();
		
		Сч08_4   = СчетПоКоду("08.4");
		Сч08_5   = СчетПоКоду("08.5");
		СчН01_01 = СчетПоКоду("Н01.01");
		СчН01_08 = СчетПоКоду("Н01.08");
		СчН01_09 = СчетПоКоду("Н01.09");
		
		БухИт = СоздатьОбъект("БухгалтерскиеИтоги");
		БухИт.ИспользоватьСубконто(ВидыСубконто.ОбъектыСтроительства);
		БухИт.ВключатьСубсчета(1,);
		БухИт.ВыполнитьЗапрос(, ДатаПереносаОстатков, "08, Н01.01",,,,,);
		БухИт.ВыбратьСубконто(ВидыСубконто.ОбъектыСтроительства);
		Пока БухИт.ПолучитьСубконто(ВидыСубконто.ОбъектыСтроительства) = 1 Цикл
			СтоимостьНУ = 0;
			КоррСчет    = ПолучитьПустоеЗначение("Счет");
			
			БухИт.ВыбратьСчета();
			Пока БухИт.ПолучитьСчет() = 1 Цикл
				Если БухИт.Счет = СчН01_01 Тогда
				    СтоимостьНУ = БухИт.СКД("С");
					
				ИначеЕсли БухИт.Счет = Сч08_4 Тогда // никуда не надо переносить
					Прервать;
					
				ИначеЕсли БухИт.Счет = Сч08_5 Тогда // НМА, надо перенести на счет Н01.08
					КоррСчет = СчН01_08;
					
				Иначе // ОС, который необходимо перенести на счет Н01.09
				    КоррСчет = СчН01_09;
				КонецЕсли 
			КонецЦикла;
			
			Если (СтоимостьНУ <> 0) и (ПустоеЗначение(КоррСчет) = 0) Тогда
			    Операция.НоваяПроводка(); Операция.РазделительУчета = Константа.ОсновноеЮрЛицо;
				Операция.НомерЖурнала = "НУ";
				Операция.СодержаниеПроводки = "Перенос внеоборотного актива";
				Операция.Кредит.Счет = СчН01_01;
				Операция.Кредит.ОбъектыСтроительства = БухИт.Субконто(ВидыСубконто.ОбъектыСтроительства);
				Операция.Дебет.Счет = КоррСчет;
				Операция.Дебет.ОбъектыСтроительства = БухИт.Субконто(ВидыСубконто.ОбъектыСтроительства);
				Операция.Сумма = СтоимостьНУ;
			КонецЕсли;
		КонецЦикла;
		
		Если Операция.КоличествоПроводок() <> 0 Тогда
			Операция.ДатаОперации = ДатаПереносаОстатков;
			Операция.Документ.УстановитьНовыйНомер("");
			Операция.Содержание = "Перенос внеоборотных активов";
		    Операция.Записать();
		КонецЕсли;          
		
		СчН02_04_1 = СчетПоКоду("Н02.04.1");
		СчН02_04_2 = СчетПоКоду("Н02.04.2");
		
		БухИт = СоздатьОбъект("БухгалтерскиеИтоги");
		БухИт.ВключатьСубсчета(1,);
		БухИт.ИспользоватьСубконто(ВидыСубконто.Номенклатура);
		БухИт.ВыполнитьЗапрос(, ДатаПереносаОстатков, "Н02.04",,,,,);
		БухИт.ВыбратьСубконто(ВидыСубконто.Номенклатура);
		Пока БухИт.ПолучитьСубконто(ВидыСубконто.Номенклатура) = 1 Цикл
			
			Номенклатура = БухИт.Субконто(ВидыСубконто.Номенклатура);
			Если Номенклатура.ТипНоменклатуры <> Перечисление.ТипыНоменклатуры.Продукция Тогда
			    Продолжить;
			КонецЕсли;
			
			СтоимостьНУ_1 = 0;
			СтоимостьНУ_2 = 0;
			КоррСчет      = СчН02_04_1;
			СчетУчета     = СчН02_04_2;
			                                 
			БухИт.ВыбратьСчета();
			Пока БухИт.ПолучитьСчет() = 1 Цикл
				Если БухИт.Счет = СчН02_04_1 Тогда
					СтоимостьНУ_1 = БухИт.СКД("C");    
					
				ИначеЕсли БухИт.Счет = СчН02_04_2 Тогда
					СтоимостьНУ_2 = БухИт.СКД("C");    
				КонецЕсли;
			КонецЦикла;
			
			Отклонение =  СтоимостьНУ_1 - СтоимостьНУ_2;
			Если Отклонение <> 0 Тогда
			    Операция.НоваяПроводка(); Операция.РазделительУчета = Константа.ОсновноеЮрЛицо;
				Операция.НомерЖурнала = "НУ";
				Операция.СодержаниеПроводки = "Перенос отгруженной продукции";
				Операция.Дебет.Счет = СчетУчета;
				Операция.Дебет.Номенклатура = Номенклатура;
				Операция.Кредит.Счет = КоррСчет;
				Операция.Кредит.Номенклатура = Номенклатура;
				Операция.Сумма = СтоимостьНУ;
			КонецЕсли;
		КонецЦикла;
		
		Если Операция.КоличествоПроводок() <> 0 Тогда
			Операция.ДатаОперации = ДатаПереносаОстатков;
			Операция.Документ.УстановитьНовыйНомер("");
			Операция.Содержание = "Перенос отгруженной продукции";
		    Операция.Записать();
		КонецЕсли;
		
		Таб.ВывестиСекцию(Строка(Номер));
	
	ИначеЕсли Номер = 770442 Тогда
		 
		Состояние("Корректировка плана счетов");
		Сч = СоздатьОбъект("Счет." + ВыбранныйПланСчетов().Идентификатор());
		ЗаписатьПолноеНаименование("68.4.1", "Расчеты с бюджетом");
		ЗаписатьПолноеНаименование("68.4.2", "Расчет налога на прибыль");
		ЗаписатьПолноеНаименование("69.3", "Расчеты по обязательному медицинскому страхованию");
		ЗаписатьПолноеНаименование("69.3.1", "Расчеты с ФФОМС");	
		ЗаписатьПолноеНаименование("69.3.2", "Расчеты с ТФОМС");
		ЗаписатьПолноеНаименование("Н07.04", "Косвенные расходы");
		ЗаписатьПолноеНаименование("Н07.04.1", "Косвенные расходы");
		ЗаписатьПолноеНаименование("Н07.04.2", "Косвенные расходы текущего периода, подлежащие распределению");
		
		ЗаписатьПолноеНаименование("ЗПК"     , "НДС к уплате поставщикам");
		ЗаписатьПолноеНаименование("ЗПК.0"   , "Покупки, облагаемые НДС по ставке 0%");
		ЗаписатьПолноеНаименование("ЗПК.10"  , "Покупки, облагаемые НДС по ставке 10%");
		ЗаписатьПолноеНаименование("ЗПК.10.Б", "Стоимость покупок без НДС");
		ЗаписатьПолноеНаименование("ЗПК.10.Н", "Сумма НДС по ставке 10% к уплате");
		ЗаписатьПолноеНаименование("ЗПК.20"  , "Покупки, облагаемые НДС по ставке 20%");
		ЗаписатьПолноеНаименование("ЗПК.20.Б", "Стоимость покупок без НДС");
		ЗаписатьПолноеНаименование("ЗПК.20.Н", "Сумма НДС по ставке 20% к уплате");
		ЗаписатьПолноеНаименование("ЗПК.БН"  , "Покупки без НДС");
		
		ЗаписатьПолноеНаименование("ЗПР"     , "НДС к получению от покупателей");
		ЗаписатьПолноеНаименование("ЗПР.0"   , "Продажи, облагаемые НДС по ставке 0%");
		ЗаписатьПолноеНаименование("ЗПР.10"  , "Продажи, облагаемые НДС по ставке 10%");
		ЗаписатьПолноеНаименование("ЗПР.10.Б", "Стоимость продаж без НДС");
		ЗаписатьПолноеНаименование("ЗПР.10.Н", "Сумма НДС по ставке 10% к получению");
		ЗаписатьПолноеНаименование("ЗПР.20"  , "Продажи, облагаемые НДС по ставке 20%");
		ЗаписатьПолноеНаименование("ЗПР.20.Б", "Стоимость продаж без НДС");
		ЗаписатьПолноеНаименование("ЗПР.20.Н", "Сумма НДС по ставке 20% к получению");
		ЗаписатьПолноеНаименование("ЗПР.БН"  , "Продажи без НДС");
		
	ИначеЕсли Номер = 770443 Тогда
		
		Таб.ВывестиСекцию(Строка(Номер));
		
		Состояние("Перепроведение документов");
		НеКомментировать = ВосстановитьЗначение("НеКомментироватьПроведениеДокументов");
		СохранитьЗначение("НеКомментироватьВыполняемыеДействия", НеКомментировать);
		
		Состояние("Корректировка плана счетов");
		Сч = СоздатьОбъект("Счет." + ВыбранныйПланСчетов().Идентификатор());
		ЗаписатьПолноеНаименование("Н02.08", "Паи и акции");
		
	ИначеЕсли Номер = 770444 Тогда
		
		Состояние("Обновление налоговых карточек");
		СпрНК = СоздатьОбъект("Справочник.КарточкиУчетаДоходов"); // итоги в новом формате
		Сотр = СоздатьОбъект("Справочник.Сотрудники");
		Сотр.ВыбратьЭлементы();
		Пока Сотр.ПолучитьЭлемент() = 1 Цикл
		    СпрНК.ИспользоватьВладельца(Сотр.ТекущийЭлемент());
			СпрНК.ВыбратьЭлементы();
			Пока СпрНК.ПолучитьЭлемент() = 1 Цикл
				ПоследнийМесяц = 0;
			    НК = ЗначениеИзСтроки(СпрНК.СписокПолейНалоговойКарточки);
				Если ПустоеЗначение(СокрЛП(НК)) = 1 Тогда
					Продолжить
				КонецЕсли;
				
				ПроверитьПоследнийМесяцНК(НК, "ГДБезВ", ПоследнийМесяц);
				ПроверитьПоследнийМесяцНК(НК, "ОбщСВ", ПоследнийМесяц);
				ПроверитьПоследнийМесяцНК(НК, "НИ", ПоследнийМесяц);
				ПроверитьПоследнийМесяцНК(НК, "МДолгНП", ПоследнийМесяц);
				ПроверитьПоследнийМесяцНК(НК, "МДолгНА", ПоследнийМесяц);
				ПроверитьПоследнийМесяцНК(НК, "НалВзыск", ПоследнийМесяц);
				ПроверитьПоследнийМесяцНК(НК, "НалВозвр", ПоследнийМесяц);
				ПроверитьПоследнийМесяцНК(НК, "П164", ПоследнийМесяц, 1);
				ПроверитьПоследнийМесяцНК(НК, "НД6И", ПоследнийМесяц);
				ПроверитьПоследнийМесяцНК(НК, "ДДолгНП", ПоследнийМесяц);
				ПроверитьПоследнийМесяцНК(НК, "ДДолгНА", ПоследнийМесяц);
				ПроверитьПоследнийМесяцНК(НК, "ДНалВзыск", ПоследнийМесяц);
				ПроверитьПоследнийМесяцНК(НК, "ДНалВозвр", ПоследнийМесяц);
				ПроверитьПоследнийМесяцНК(НК, "П276", ПоследнийМесяц, 1);
				ПроверитьПоследнийМесяцНК(НК, "П289", ПоследнийМесяц, 1);
				ПроверитьПоследнийМесяцНК(НК, "П302", ПоследнийМесяц, 1);
				
				// Раздел 5
				НК5 = ЗначениеИзСтроки(СпрНК.СписокПолейНалоговойКарточкиПоМатВыгоде);
				Если ПустоеЗначение(СокрЛП(НК5)) = 0 Тогда
					Для Сч = 1 по НК5.РазмерСписка() Цикл
						ТаблицаРаздела5 = НК5.ПолучитьЗначение(Сч);
						ТаблицаРаздела5.ВыбратьСтроки();
						Пока ТаблицаРаздела5.ПолучитьСтроку() = 1 Цикл
							Месяц = ТаблицаРаздела5.МесяцДохода;
						    Если Месяц > ПоследнийМесяц Тогда
								Если (ТаблицаРаздела5.СуммаДохода <> 0) или
									 (ТаблицаРаздела5.СуммаВычета <> 0) или
									 (ТаблицаРаздела5.НБ <> 0) или
									 (ТаблицаРаздела5.НИ <> 0) или
									 (ТаблицаРаздела5.НУ <> 0) или
									 (ТаблицаРаздела5.ДолгНП <> 0) или
									 (ТаблицаРаздела5.ДолгНА <> 0) или
									 (ТаблицаРаздела5.Взыскание <> 0) или
									 (ТаблицаРаздела5.Возвращена <> 0) Тогда
								    
									ПоследнийМесяц = Месяц;
								КонецЕсли;
							КонецЕсли;
						КонецЦикла;
					КонецЦикла;
				КонецЕсли;
				
				Если ПоследнийМесяц = 12 Тогда
					СуммаВычетовСНачалаГода = 0;
					Для Сч = 1 По 12 Цикл
						СтрМесяц = Формат(Сч, "Ч(0)2");
						Для инд = 1 по 5 Цикл
							СуммаВычетовСНачалаГода = СуммаВычетовСНачалаГода + НК.Получить("СВМес" + инд + СтрМесяц);
						КонецЦикла;
					КонецЦикла;
					НК.Установить("ОбщСВ12", СуммаВычетовСНачалаГода);
				КонецЕсли;
				
				НК.Установить("ПоследнийМесяц", ПоследнийМесяц);
				
				СпрНК.СписокПолейНалоговойКарточки = ЗначениеВСтроку(НК);
				СпрНК.Записать();
			КонецЦикла;
		КонецЦикла;
		
		// Перепроведение документов "Начисление налогов".
		Состояние("Перепроведение документов");
		Док = СоздатьОбъект("Документ.НачислениеНалогов");
		Док.ВыбратьДокументы(,);
		Пока Док.ПолучитьДокумент() = 1 Цикл
			Если Док.Проведен() = 1 Тогда
		        Док.Провести(,1);
			КонецЕсли;
		КонецЦикла;
		
		Таб.ВывестиСекцию(Строка(Номер));
		
	ИначеЕсли Номер = 770445 Тогда
		
		Состояние("Установка значений констант");
		Константа.МетодРасчетаСебестоимостиМатериалов.Установить('01.01.1980', Перечисление.МетодыРасчетаСебестоимости.ПоСредневзвешеннойСтоимости);
		Константа.МетодРасчетаСебестоимостиТоваров.Установить('01.01.1980', Перечисление.МетодыРасчетаСебестоимости.ПоСредневзвешеннойСтоимости);
		Константа.ПрименяетсяПБУ18.Установить('01.01.2003', Да);
		
		Состояние("Корректировка плана счетов");
		Сч = СоздатьОбъект("Счет." + ВыбранныйПланСчетов().Идентификатор());
		ЗаписатьПолноеНаименование("НПР", "Постоянные разницы");
		ЗаписатьПолноеНаименование("НПР.01", "Основные средства");
		ЗаписатьПолноеНаименование("НПР.04", "Нематериальные активы");
		ЗаписатьПолноеНаименование("НПР.07", "Оборудование к установке");
		ЗаписатьПолноеНаименование("НПР.08", "Внеоборотные активы");
		ЗаписатьПолноеНаименование("НПР.10", "Материалы");
		ЗаписатьПолноеНаименование("НПР.21", "Полуфабрикаты собственного производства");
		ЗаписатьПолноеНаименование("НПР.20", "Незавершенное производство");
		ЗаписатьПолноеНаименование("НПР.23", "Расходы вспомогательных производств");
		ЗаписатьПолноеНаименование("НПР.25", "Общепроизводственные расходы");
		ЗаписатьПолноеНаименование("НПР.26", "Общехозяйственные расходы");
		ЗаписатьПолноеНаименование("НПР.29", "Обслуживающие производства и хозяйства");
		ЗаписатьПолноеНаименование("НПР.41", "Товары");
		ЗаписатьПолноеНаименование("НПР.43", "Готовая продукция");
		ЗаписатьПолноеНаименование("НПР.44", "Расходы на продажу");
		ЗаписатьПолноеНаименование("НПР.44.1", "Издержки обращения в организациях, осуществляющих торговую деятельность");
		ЗаписатьПолноеНаименование("НПР.44.2", "Коммерческие расходы в организациях, осуществляющих промышленную и иную производственную деятельность");
		ЗаписатьПолноеНаименование("НПР.44.3", "Расходы на продажу в организациях, осуществляющих заготовление и переработку сельскохозяйственной продукции");
		ЗаписатьПолноеНаименование("НПР.45", "Товары отгруженные");
		ЗаписатьПолноеНаименование("НПР.97", "Расходы будущих периодов");
		ЗаписатьПолноеНаименование("НПР.99", "Постоянные разницы текущего периода");
		
		// Если на субсчета 68 счета, введенного из режима
		// предприятия нет аналитика по видам платежей в бюджет,
		// то добавим ее на этот счет.
		ИзмененаНастройкаБухгалтерскихСчетов = 0;
		
		Сч=СоздатьОбъект("Счет.Основной");
		Счет=СоздатьОбъект("Счет.Основной");
		
		Сч.ИспользоватьРодителя(СчетПоКоду("68"));
		Сч.ВыбратьСчета();
		Пока Сч.ПолучитьСчет() = 1 Цикл
			Если Сч.ЗаданВКонфигурации() = 0 Тогда
				СубконтоНайдено = 0;
				Для СчетчикЦикла = 1 По 3 Цикл
					Если Сч.ВидСубконто(СчетчикЦикла) = ВидыСубконто.ВидыПлатежейВБюджет Тогда
					    СубконтоНайдено = 1;
						Прервать;
					КонецЕсли;
				КонецЦикла;
				
				Если СубконтоНайдено = 0 Тогда
					Если Счет.НайтиСчет(Сч) = 1 Тогда
						Счет.ВидСубконто(2, Счет.ВидСубконто(1));
						Счет.ВидСубконто(3, Счет.ВидСубконто(2));
						Счет.ВидСубконто(1, ВидыСубконто.ВидыПлатежейВБюджет);
						Счет.Записать();
						ИзмененаНастройкаБухгалтерскихСчетов = 1;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		Если ИзмененаНастройкаБухгалтерскихСчетов = 1 Тогда
			Предупреждение("Обновление информационной базы не может быть завершено
						   |без пересчета итогов.
						   |Пересчитайте итоги. После этого нужно выйти из программы и 
						   |повторно войти. Обновление ИБ будет продолжено.
						   |Пересчет итогов  выполняется в режиме
						   |""Операции - Управление бухгалтерскими итогами"".", 60);
			ДальнейшееОбновлениеНевозможно = 1;
			ЗафиксироватьТранзакцию();
			Возврат;
		КонецЕсли;
		
		// Если для субсчета счета 68, введенного из режима
		// предприятия в документах, справочниках, операциях 
		// не указано значение субконто "Видам платежей в бюджет",
		// то автоматически будет указано значение "Налог".
		
        // Замена кодов счетов и типов аналитики в формах документов.
		Если ОбработкаСчетовВДокументахВыполнена = 0 Тогда
		    ОбработкаСчетовВДокументах();
		КонецЕсли;
		
		Сч68_4_1   = СчетПоКоду("68.4.1");
		Сч69_3_1   = СчетПоКоду("69.3.1");
		Сч69_3_2   = СчетПоКоду("69.3.2");
		Сч99_1     = СчетПоКоду("99.1");
		СчН02_04_1 = СчетПоКоду("Н02.04.1");
		СчН07_04_1 = СчетПоКоду("Н07.04.1");
		
		Состояние("Обновление операций");
		
		Опер = СоздатьОбъект("Операция");
		Опер1 = СоздатьОбъект("Операция");
		Опер.ВыбратьОперацииСПроводками(,, "68");
		Пока Опер.ПолучитьОперацию() = 1 Цикл
			ОперацияИзменена = 0;
			Опер1.НайтиОперацию(Опер.Документ);
			Опер1.ВыбратьПроводки();
			Пока Опер1.ПолучитьПроводку() = 1 Цикл
				СчетДт = Опер1.Дебет.Счет;
				СчетКт = Опер1.Кредит.Счет;
				
				Если (СчетДт.ПринадлежитГруппе(СчетПоКоду("68")) = 1) и (СчетДт.ЗаданВКонфигурации() = 0) Тогда
					Для СчетчикЦикла = 1 По 3 Цикл
						Если СчетДт.ВидСубконто(СчетчикЦикла) = ВидыСубконто.ВидыПлатежейВБюджет Тогда
							Субконто = Опер1.Дебет.Субконто(СчетчикЦикла);
							Если ПустоеЗначение(Субконто) = 1 Тогда
								Опер1.Дебет.Субконто(СчетчикЦикла, Перечисление.ВидыПлатежейВБюджет.Налог);
								ОперацияИзменена = 1;
							КонецЕсли;
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
				
				Если (СчетКт.ПринадлежитГруппе(СчетПоКоду("68")) = 1) и (СчетКт.ЗаданВКонфигурации() = 0) Тогда
					Для СчетчикЦикла = 1 По 3 Цикл
						Если СчетКт.ВидСубконто(СчетчикЦикла) = ВидыСубконто.ВидыПлатежейВБюджет Тогда
							Субконто = Опер1.Кредит.Субконто(СчетчикЦикла);
							Если ПустоеЗначение(Субконто) = 1 Тогда
								Опер1.Кредит.Субконто(СчетчикЦикла, Перечисление.ВидыПлатежейВБюджет.Налог);
								ОперацияИзменена = 1;
							КонецЕсли;
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
			КонецЦикла;
			Если ОперацияИзменена = 1 Тогда
			    Опер1.Записать();
			КонецЕсли;
		КонецЦикла;
		
		Состояние("Обновление справочника");
		Спр = СоздатьОбъект("Справочник.НалогиИОтчисления");
		Спр.ВыбратьЭлементы();
		Пока Спр.ПолучитьЭлемент() = 1 Цикл
			
			Если (Спр.Счет.ПринадлежитГруппе(СчетПоКоду("68")) = 1) и (Спр.Счет.ЗаданВКонфигурации() = 0) Тогда
				Для СчетчикЦикла = 1 По 3 Цикл
					Субконто = Спр.ПолучитьАтрибут("Субконто" + СчетчикЦикла);
					Если ПустоеЗначение(Субконто) = 1 Тогда
						Если ТипЗначенияСтр(Субконто) = "Перечисление" Тогда
							Если Субконто.Вид() = "ВидыПлатежейВБюджет" Тогда
								Спр.УстановитьАтрибут("Субконто" + СчетчикЦикла, Перечисление.ВидыПлатежейВБюджет.Налог);
							КонецЕсли;
						КонецЕсли;	
					КонецЕсли;
				КонецЦикла;
		    КонецЕсли;
		КонецЦикла;
		
		Таб.ВывестиСекцию(Строка(Номер));
		
	ИначеЕсли Номер = 770447 Тогда
		
		Состояние("Корректировка плана счетов");
		Сч = СоздатьОбъект("Счет." + ВыбранныйПланСчетов().Идентификатор());
		ЗаписатьПолноеНаименование("04",      "Нематериальные активы и расходы на НИОКР");
		ЗаписатьПолноеНаименование("04.1",    "Нематериальные активы");
		ЗаписатьПолноеНаименование("04.2",    "Расходы на научно-исследовательские, опытно-конструкторские  и  технологические  работы");
		ЗаписатьПолноеНаименование("08.8",    "Выполнение научно-исследовательских, опытно-конструкторских и технологических работ");
		ЗаписатьПолноеНаименование("10.10",   "Специальная оснастка и специальная одежда на складе");
		ЗаписатьПолноеНаименование("10.11",   "Специальная оснастка и специальная одежда в эксплуатации");
		ЗаписатьПолноеНаименование("10.11.1", "Специальная одежда в эксплуатации");
		ЗаписатьПолноеНаименование("10.11.2", "Специальная оснастка в эксплуатации");
		ЗаписатьПолноеНаименование("59",      "Резервы под обесценение финансовых вложений");
		ЗаписатьПолноеНаименование("69.12",   "Расчеты по добровольному социальному страхованию на случай временной нетрудоспособности");
		ЗаписатьПолноеНаименование("МЦ",      "Материальные ценности в эксплуатации");
		ЗаписатьПолноеНаименование("МЦ.01",   "Основные средства в эксплуатации");
		ЗаписатьПолноеНаименование("МЦ.02",   "Специальная одежда в эксплуатации");
		ЗаписатьПолноеНаименование("МЦ.03",   "Специальная оснастка в эксплуатации");
		ЗаписатьПолноеНаименование("НПР.10","Материалы");
		ЗаписатьПолноеНаименование("НПР.10.1","Материалы на складе");
		ЗаписатьПолноеНаименование("НПР.10.2","Специальная оснастка и специальная одежда в эксплуатации");
		
		Состояние("Обновление справочника ""Налоги и отчисления""");
		глПолучитьНалог("ФСС_БЛ", 1);
		
		Состояние("Обновление справочников");
		// Замена кодов счетов в формах справочниках.
		Если ОбработкаСчетовВСправочникахВыполнена = 0 Тогда
		    ОбработкаСчетовВСправочниках();
		КонецЕсли;
		
		// Замена кодов счетов и типов аналитики в формах документов.
		Если ОбработкаСчетовВДокументахВыполнена = 0 Тогда
		    ОбработкаСчетовВДокументах();
		КонецЕсли;
		// Замена кодов счетов и типов аналитики в формах документов.
		Если ОбработкаСчетовВДокументахВыполнена = 0 Тогда
		    ОбработкаСчетовВДокументах();
		КонецЕсли;
		
		Состояние("Обновление операций");
		СтрокаФильтр = "04,*;*,04; НПР.10,*;*,НПР.10";

		Опер = СоздатьОбъект("Операция");
		Опер1 = СоздатьОбъект("Операция");
		Опер.ВыбратьОперацииСПроводками(,, СтрокаФильтр);
		Пока Опер.ПолучитьОперацию() = 1 Цикл
			ОперацияИзменена = 0;
			Опер1.НайтиОперацию(Опер.Документ);
			Опер1.ВыбратьПроводки();
			Пока Опер1.ПолучитьПроводку() = 1 Цикл
				СчетДт = Опер1.Дебет.Счет;
				СчетКт = Опер1.Кредит.Счет;
				Если СчетДт = СчетПоКоду("04") Тогда
					Опер1.Дебет.Счет = СчетПоКоду("04.1");
					
				ИначеЕсли СчетДт = СчетПоКоду("НПР.10") Тогда
					Опер1.Дебет.Счет = СчетПоКоду("НПР.10.1");
				КонецЕсли;
				
				Если СчетКт = СчетПоКоду("04") Тогда
					Опер1.Кредит.Счет = СчетПоКоду("04.1");
				
				ИначеЕсли СчетКт = СчетПоКоду("НПР.10") Тогда
					Опер1.Кредит.Счет = СчетПоКоду("НПР.10.1");
				КонецЕсли;
				
				Если (СчетДт <> Опер1.Дебет.Счет) или (СчетКт <> Опер1.Кредит.Счет) Тогда
				    ОперацияИзменена = 1;
				КонецЕсли;
				
			КонецЦикла;

			Если ОперацияИзменена = 1 Тогда
			    Опер1.Записать();
			КонецЕсли;

		КонецЦикла;
		
		Сообщить("Обработка документов ""Записи книги покупок""");
		Док = СоздатьОбъект("Документ.ЗаписиКнигиПокупок");
		Док.ВыбратьДокументы();
		Пока Док.ПолучитьДокумент() = 1 Цикл
			Док.ВыбратьСтроки();
			Пока Док.ПолучитьСтроку()=1 Цикл
				Если Док.ТипЗаписи.Выбран()=1 Тогда
					Продолжить;
				КонецЕсли;
				Если Док.Аванс = 1 Тогда
					Док.ТипЗаписи = Перечисление.ТипыЗаписейКнигиПокупок.ЗачетАванса;
				ИначеЕсли (Док.Всего<0)и(Док.СубСчет19 = СчетПоКоду("19.3")) Тогда
					Док.ТипЗаписи = Перечисление.ТипыЗаписейКнигиПокупок.ВозвратНеОплаченного;
				ИначеЕсли (Док.Всего<0)и(Док.СубСчет19 = СчетПоКоду("68.2")) Тогда
					Док.ТипЗаписи = Перечисление.ТипыЗаписейКнигиПокупок.ВозвратОплаченного;
				ИначеЕсли (Док.Всего>0)и(Док.СубСчет19 = СчетПоКоду("19.1")) Тогда
					Док.ТипЗаписи = Перечисление.ТипыЗаписейКнигиПокупок.НДСпоОС;
				ИначеЕсли (Док.Всего>0)и(Док.СубСчет19 = СчетПоКоду("19.2")) Тогда
					Док.ТипЗаписи = Перечисление.ТипыЗаписейКнигиПокупок.НДСпоНМА;
				ИначеЕсли (Док.Всего>0)и(Док.СубСчет19 = СчетПоКоду("19.3")) Тогда
					Док.ТипЗаписи = Перечисление.ТипыЗаписейКнигиПокупок.НДСпоМПЗ;			
				КонецЕсли;
			КонецЦикла;
			Док.Записать();
		КонецЦикла;
		
		Сообщить("Обработка документов ""Записи книги продаж""");
		Док = СоздатьОбъект("Документ.ЗаписиКнигиПродаж");
		Док.ВыбратьДокументы();
		Пока Док.ПолучитьДокумент() = 1 Цикл
			Док.ВыбратьСтроки();
			Пока Док.ПолучитьСтроку()=1 Цикл 
				Если Док.ТипЗаписи.Выбран()=1 Тогда
					Продолжить;
				КонецЕсли;
				Если Док.ТипВозврата = 1 Тогда
					Док.ТипЗаписи = Перечисление.ТипыЗаписейКнигиПродаж.ВозвратОплаченного;
				ИначеЕсли Док.ТипВозврата = 2 Тогда
					Док.ТипЗаписи = Перечисление.ТипыЗаписейКнигиПродаж.ВозвратНеОплаченного;
				Иначе
					Док.ТипЗаписи = Перечисление.ТипыЗаписейКнигиПродаж.Оплата;
				КонецЕсли;
			КонецЦикла;
			Док.Записать();
		КонецЦикла;
		
		Таб.ВывестиСекцию(Строка(Номер));
		
	ИначеЕсли Номер = 770448 Тогда
		
		// Восстановление значений субконто в документе "Выписка"
		Состояние("Восстановлениие информации в выписке");
		Сч_68 = СчетПоКоду("68");
		Сч_69 = СчетПоКоду("69");
		
		ДокВыписка = СоздатьОбъект("Документ.Выписка");
		ДокВыписка.УстановитьФильтр(1, 0,,,);
		ДокВыписка.ВыбратьДокументы(,);
		Пока ДокВыписка.ПолучитьДокумент() = 1 Цикл
			
			ДокументЗаписать = 0;
			Опер = ДокВыписка.Операция;
			Опер.ВыбратьПроводки();
			
			ЗакончитьПереборСтрокДокумента = 0;
			ДокВыписка.ВыбратьСтроки();
			Пока (ДокВыписка.ПолучитьСтроку() = 1) и (ЗакончитьПереборСтрокДокумента = 0) Цикл
				КоррСчет = ДокВыписка.КоррСчет;
				
			    Если (КоррСчет.ПринадлежитГруппе(Сч_68) = 0)
				 и (КоррСчет.ПринадлежитГруппе(Сч_69) = 0) Тогда
			        Продолжить;
					
				ИначеЕсли КоррСчет.КоличествоСубконто() = 0 Тогда
				    Продолжить;
					
				ИначеЕсли (ДокВыписка.Приход = 0) и (ДокВыписка.Расход = 0) Тогда
					Продолжить;
				КонецЕсли;
				
				// Найдем соответствующую строке проводку и сравним значения субконто,
				// если они различаются, то исправим в документе
				Пока Опер.ПолучитьПроводку() = 1 Цикл
					
					Если Опер.КоличествоПроводок() = Опер.НомерПроводки() Тогда
					    ЗакончитьПереборСтрокДокумента = 1;
					КонецЕсли;
				                        
					// Соответствие строки документа проводке будем определять по сумме и корр. счету
					Если (Опер.Сумма = ДокВыписка.Приход) и (Опер.Кредит.Счет = КоррСчет) Тогда
						Для НомерСубконто = 1 По КоррСчет.КоличествоСубконто() Цикл
							ЗначениеСубконтоВПроводке  = Опер.Кредит.Субконто(НомерСубконто);
							ЗначениеСубконтоВДокументе = ДокВыписка.ПолучитьАтрибут("Субконто" + НомерСубконто);
							Если ПустоеЗначение(ЗначениеСубконтоВПроводке) = 0 Тогда
								Если ЗначениеСубконтоВДокументе <> ЗначениеСубконтоВПроводке Тогда
									ДокВыписка.НазначитьТип("Субконто" + НомерСубконто, КоррСчет.ВидСубконто(НомерСубконто));
									ДокВыписка.УстановитьАтрибут("Субконто" + НомерСубконто, ЗначениеСубконтоВПроводке);
							    	ДокументЗаписать = 1;
								КонецЕсли;    
							КонецЕсли;
						КонецЦикла;
						Прервать; // проводка найден и дальше не надо продолжать поиск
						
					ИначеЕсли (Опер.Сумма = ДокВыписка.Расход) и (Опер.Дебет.Счет = КоррСчет) Тогда
						Для НомерСубконто = 1 По КоррСчет.КоличествоСубконто() Цикл
							ЗначениеСубконтоВПроводке  = Опер.Дебет.Субконто(НомерСубконто);
							ЗначениеСубконтоВДокументе = ДокВыписка.ПолучитьАтрибут("Субконто" + НомерСубконто);
							Если ПустоеЗначение(ЗначениеСубконтоВПроводке) = 0 Тогда
								Если ЗначениеСубконтоВДокументе <> ЗначениеСубконтоВПроводке Тогда
									ДокВыписка.НазначитьТип("Субконто" + НомерСубконто, КоррСчет.ВидСубконто(НомерСубконто));
									ДокВыписка.УстановитьАтрибут("Субконто" + НомерСубконто, ЗначениеСубконтоВПроводке);
							    	ДокументЗаписать = 1;
								КонецЕсли;    
							КонецЕсли;
						КонецЦикла;
						Прервать; // проводка найден и дальше не надо продолжать поиск
					КонецЕсли;
				КонецЦикла;
			КонецЦикла;
			
			// Если в документ были внесены изменения, то документ необходимо перезаписать.
			Если ДокументЗаписать = 1 Тогда
			    ДокВыписка.Записать();
			КонецЕсли;
		КонецЦикла;
		
		// Заполнение реквизита КПП плательщика в платежных поручениях (из банковских счетов).
		Состояние("Обновление платежных поручений");
		ПлатПор = СоздатьОбъект("Документ.ПлатежноеПоручение");
		ПлатПор.ВыбратьДокументы();
		Пока ПлатПор.ПолучитьДокумент() = 1 Цикл
			КППплательщика = "";
			РасчетныйСчет = ПлатПор.РасчетныйСчет.ТекущийЭлемент();
			Если ПустоеЗначение(РасчетныйСчет.Корреспондент) = 0 Тогда
				КППплательщика = РасчетныйСчет.КорреспондентКПП;
				
			ИначеЕсли ПлатПор.ПеречислениеНалога = 1 Тогда 
				глПлатежныеРеквизиты(РасчетныйСчет.ТекущийЭлемент(),,,,,,, КППплательщика, 2)
			КонецЕсли;
			
			Если ПустоеЗначение(КППплательщика) = 0 Тогда
				ПлатПор.КППплательщика = КППплательщика;
				ПлатПор.Записать();
			КонецЕсли;
		КонецЦикла;
		
		// Закрытие счета Н15
		Состояние("Закрытие счета Н15");
		СчетН15Закрыт = 0;
		СчН15 = СчетПоКоду("Н15");
		Док = СоздатьОбъект("Документ.РегламентныеОперацииПоНалоговомуУчету");
		Док.УстановитьФильтр(1, 0,,,);
		Док.ВыбратьДокументы('31.12.2002', '31.12.2002');
		Пока (Док.ПолучитьДокумент() = 1) и (СчетН15Закрыт = 0) Цикл
		    Если Док.ЗакрытиеСчетовНалоговогоУчета = 1 Тогда
				
				// Если документом счет Н15 уже закрыт, то закрывать его больше не надо.
				Опер = Док.Операция;
				Опер.ВыбратьПроводки();
				Пока Опер.ПолучитьПроводку() = 1 Цикл
				    Если (Опер.Дебет.Счет = СчН15)
					 или (Опер.Кредит.Счет = СчН15) Тогда
				    	СчетН15Закрыт = 1;
						Прервать;
				    КонецЕсли;
				КонецЦикла;
				
				Если СчетН15Закрыт = 0 Тогда
					ЗакрытьСчетН15(Док, '31.12.2002');    
					СчетН15Закрыт = 1;
				КонецЕсли;
		    КонецЕсли;
		КонецЦикла;
		
		// Если счет Н15 не закрыт, то необходимо проверить надо ли его
		// вообще закрывать, если да, то надо об этом сообщить;
		Если СчетН15Закрыт = 0 Тогда
			Док = СоздатьОбъект("Документ.НачислениеНалогов");
			Если Док.ВыбратьДокументы('01.01.2002', '31.12.2002') = 1 Тогда
				Сообщить("Если в 2002 году велся налоговый учет, то счет Н15 необходимо закрыть на начало 2003 года
				|Закрыть счет Н15 можно документом ""Регламентные операции по налоговому учету"", выбрав операцию ""Закрытие счетов налогового учета""", "!");
			КонецЕсли;
		КонецЕсли;
		
		// Заполнение в справочниках "Основные средства" и
		// "Нематериальные активы" нового реквизита "Сумма амортизации,
		// начисленной до 01.01.2002 г.".
		Если ИтогиНаДатуРассчитаны('31.12.2001') = 0 Тогда
			ДальнейшееОбновлениеНевозможно = 1;
			ОтменитьТранзакцию();
			Возврат;
		КонецЕсли;
		
		Состояние("Заполнение нового реквизита в справочнике ""Основные средства""");
		ОсновноеСредство = СоздатьОбъект("Справочник.ОсновныеСредства");
		
		БухИт = СоздатьОбъект("БухгалтерскиеИтоги");
		БухИт.ИспользоватьСубконто(ВидыСубконто.ОсновныеСредства);
		БухИт.ВыполнитьЗапрос(, '31.12.2001', "02",,,,,);
		БухИт.ВыбратьСубконто(ВидыСубконто.ОсновныеСредства);
		Пока БухИт.ПолучитьСубконто(ВидыСубконто.ОсновныеСредства) = 1 Цикл
			ОС = БухИт.Субконто(ВидыСубконто.ОсновныеСредства);
			Если БухИт.СКК() <= 0 Тогда
				Продолжить;
				
			ИначеЕсли ОС.АмортизацияНачисленнаяДо2002 <> 0 Тогда
			    Продолжить;
			
			ИначеЕсли ОсновноеСредство.НайтиЭлемент(ОС) = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			ОсновноеСредство.АмортизацияНачисленнаяДо2002 = БухИт.СКК();
			ОсновноеСредство.Записать();
		КонецЦикла;
		
		Состояние("Заполнение нового реквизита в справочнике ""НМА и расходы на НИОКР""");
		НематериальныйАктив = СоздатьОбъект("Справочник.НематериальныеАктивы");
		
		БухИт = СоздатьОбъект("БухгалтерскиеИтоги");
		БухИт.ИспользоватьСубконто(ВидыСубконто.НематериальныеАктивы);
		БухИт.ВыполнитьЗапрос(, '31.12.2001', "05",,,,,);
		БухИт.ВыбратьСубконто(ВидыСубконто.НематериальныеАктивы);
		Пока БухИт.ПолучитьСубконто(ВидыСубконто.НематериальныеАктивы) = 1 Цикл
			НМА = БухИт.Субконто(ВидыСубконто.НематериальныеАктивы);
			Если БухИт.СКК() <= 0 Тогда
				Продолжить;
				
			ИначеЕсли НМА.АмортизацияНачисленнаяДо2002 <> 0 Тогда
			    Продолжить;
			
			ИначеЕсли НематериальныйАктив.НайтиЭлемент(НМА) = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			НематериальныйАктив.АмортизацияНачисленнаяДо2002 = БухИт.СКК();
			НематериальныйАктив.Записать();
		КонецЦикла;
		
		Состояние("Обновление справочника ""Сотрудники""");
		НачислятьНалогиСФОТ = СоздатьОбъект("Периодический");
		Сотр = СоздатьОбъект("Справочник.Сотрудники");
		Сотр.ВыбратьЭлементы();
		Пока Сотр.ПолучитьЭлемент() = 1 Цикл
		    Если (Сотр.ПометкаУдаления() = 0) и (Сотр.ЭтоГруппа() = 0) Тогда
				НачислятьНалогиСФОТ.ИспользоватьОбъект("НачислятьНалогиСФОТ", Сотр);
				НачислятьНалогиСФОТ.ВыбратьЗначения(,);
				Пока НачислятьНалогиСФОТ.ПолучитьЗначение() = 1 Цикл
					Сотр.НачислятьВзносыВПФР.Установить(НачислятьНалогиСФОТ.ДатаЗнач, НачислятьНалогиСФОТ.Значение);
				КонецЦикла;
		    КонецЕсли;
		КонецЦикла;
		
		Состояние("Обновление кадровых приказов");
		Док = СоздатьОбъект("Документ.ПриказОПриемеНаРаботу");
		Док.ВыбратьДокументы(,);
		Пока Док.ПолучитьДокумент() = 1 Цикл
			НачислятьНалогиСФОТ = Док.Сотрудник.НачислятьНалогиСФОТ.Получить(Док.ДатаДок);
			Док.НачислятьНалогиСФОТ = НачислятьНалогиСФОТ;
			Док.НачислятьВзносыВПФР = НачислятьНалогиСФОТ;
			Док.Записать();
			
			Если Док.Проведен() = 1 Тогда
			    Док.Провести(, 1);
			КонецЕсли;
		КонецЦикла;
		
		Док = СоздатьОбъект("Документ.ПриказОКадровыхИзменениях");
		Док.ВыбратьДокументы(,);
		Пока Док.ПолучитьДокумент() = 1 Цикл
		    НачислятьНалогиСФОТ = Док.Сотрудник.НачислятьНалогиСФОТ.Получить(Док.ДатаДок);
			Док.НачислятьНалогиСФОТ = НачислятьНалогиСФОТ;
			Док.НачислятьВзносыВПФР = НачислятьНалогиСФОТ;
			Док.Записать();
			
			Если Док.Проведен() = 1 Тогда
			    Док.Провести();
			КонецЕсли;
		КонецЦикла;
		
		Таб.ВывестиСекцию(Строка(Номер)); 
		
	ИначеЕсли Номер = 770449 Тогда
		
		// Заполнение реквизита КПП получателя в платежных поручениях (из расчетный счетов).
		Состояние("Обновление платежных поручений");
		ПлатПор = СоздатьОбъект("Документ.ПлатежноеПоручение");
		ПлатПор.ВыбратьДокументы();
		Пока ПлатПор.ПолучитьДокумент() = 1 Цикл
			КППполучателя = "";
			СчетКонтрагента = ПлатПор.СчетКонтрагента.ТекущийЭлемент();
			Если ПустоеЗначение(СчетКонтрагента.Корреспондент) = 0 Тогда
				КППполучателя = СчетКонтрагента.КорреспондентКПП;
			ИначеЕсли ПлатПор.ПеречислениеНалога = 1 Тогда 
				глПлатежныеРеквизиты(СчетКонтрагента.ТекущийЭлемент(),,,,,,, КППполучателя, 2)
			КонецЕсли;
			
			Если ПустоеЗначение(КППполучателя) = 0 Тогда
				ПлатПор.КППполучателя = КППполучателя;
				ПлатПор.Записать();
			КонецЕсли;
		КонецЦикла;
		
		Таб.ВывестиСекцию(Строка(Номер)); 
		
	ИначеЕсли Номер = 770451 Тогда
		
		Состояние("Установка значений констант");
		Константа.РозницаОблагаетсяЕНВД.Установить('01.01.1980', Нет);
		Константа.РасходыПоДСнеВключаютсяВПрямыеРасходы.Установить('01.01.1980', Нет);
		
		Состояние("Корректировка плана счетов");
		
		Сч = СоздатьОбъект("Счет." + ВыбранныйПланСчетов().Идентификатор());
		Если Сч.НайтиПоКоду("98.2.2") = 0 Тогда
			Сч.Новый();
			Сч.Код = "98.2.2";
			Сч.Наименование = "Безвозм.пост.проч.активов";
			Сч.Записать();
		КонецЕсли;
		
		ЗаписатьПолноеНаименование("14", "Резервы под снижение стоимости материальных ценностей");
		ЗаписатьПолноеНаименование("14.1", "Резервы под снижение стоимости материалов");
		ЗаписатьПолноеНаименование("14.2", "Резервы под снижение стоимости товаров");
		ЗаписатьПолноеНаименование("14.3", "Резервы под снижение стоимости готовой продукции");
		ЗаписатьПолноеНаименование("14.4", "Резервы под снижение стоимости незавершенного производства");
		ЗаписатьПолноеНаименование("58.1", "Паи и акции");
		ЗаписатьПолноеНаименование("58.1.1", "Паи");
		ЗаписатьПолноеНаименование("58.1.2", "Акции");
		ЗаписатьПолноеНаименование("98.2", "Безвозмездные поступления");
		ЗаписатьПолноеНаименование("98.2.1", "Безвозмездные поступления основных средств");
		ЗаписатьПолноеНаименование("98.2.2", "Безвозмездные поступления прочих активов");
		ЗаписатьПолноеНаименование("76.ЗП", "Расчеты с банками по зачислению з/п");
		                                              
		ЗаписатьПолноеНаименование("Н02.08", "Паи");
		ЗаписатьПолноеНаименование("Н11.03", "Убытки за 2003 год");
		
		ЗаписатьПолноеНаименование("НПР.58", "Финансовые вложения");
		ЗаписатьПолноеНаименование("НПР.58.2", "Ценные бумаги");
		ЗаписатьПолноеНаименование("НПР.58.5", "Приобретенные права в рамках оказания финансовых услуг");
		ЗаписатьПолноеНаименование("НПР.98", "Безвозмездные поступления");
		ЗаписатьПолноеНаименование("НПР.УП", "Убытки прошлых лет");
		
		ЗаписатьПолноеНаименование("КВР", "Корректировка временных разниц");
		ЗаписатьПолноеНаименование("КВР.01", "Основные средства");
		ЗаписатьПолноеНаименование("КВР.04", "Нематериальные активы");
		ЗаписатьПолноеНаименование("КВР.07", "Оборудование к установке");
		ЗаписатьПолноеНаименование("КВР.08", "Внеоборотные активы");
		ЗаписатьПолноеНаименование("КВР.10","Материалы");
		ЗаписатьПолноеНаименование("КВР.10.1","Материалы на складе");
		ЗаписатьПолноеНаименование("КВР.10.2","Специальная оснастка и специальная одежда в эксплуатации");
		ЗаписатьПолноеНаименование("КВР.21", "Полуфабрикаты собственного производства");
		ЗаписатьПолноеНаименование("КВР.20", "Незавершенное производство");
		ЗаписатьПолноеНаименование("КВР.23", "Расходы вспомогательных производств");
		ЗаписатьПолноеНаименование("КВР.25", "Общепроизводственные расходы");
		ЗаписатьПолноеНаименование("КВР.26", "Общехозяйственные расходы");
		ЗаписатьПолноеНаименование("КВР.29", "Обслуживающие производства и хозяйства");
		ЗаписатьПолноеНаименование("КВР.41", "Товары");
		ЗаписатьПолноеНаименование("КВР.43", "Готовая продукция");
		ЗаписатьПолноеНаименование("КВР.44", "Расходы на продажу");
		ЗаписатьПолноеНаименование("КВР.44.1", "Издержки обращения в организациях, осуществляющих торговую деятельность");
		ЗаписатьПолноеНаименование("КВР.44.2", "Коммерческие расходы в организациях, осуществляющих промышленную и иную производственную деятельность");
		ЗаписатьПолноеНаименование("КВР.44.3", "Расходы на продажу в организациях, осуществляющих заготовление и переработку сельскохозяйственной продукции");
		ЗаписатьПолноеНаименование("КВР.45", "Товары отгруженные");
		ЗаписатьПолноеНаименование("КВР.58", "Финансовые вложения");
		ЗаписатьПолноеНаименование("КВР.58.2", "Ценные бумаги");
		ЗаписатьПолноеНаименование("КВР.58.5", "Приобретенные права в рамках оказания финансовых услуг");
		ЗаписатьПолноеНаименование("КВР.97", "Расходы будущих периодов");
		ЗаписатьПолноеНаименование("КВР.98", "Безвозмездные поступления");
		ЗаписатьПолноеНаименование("КВР.УП", "Убытки прошлых лет");
		ЗаписатьПолноеНаименование("КВР.УТ", "Убытки текущего периода");
		
		ЗаписатьПолноеНаименование("КТР", "Комиссионные товары в рознице");
		ЗаписатьПолноеНаименование("РВ", "Нераспределенная розничная выручка");
		ЗаписатьПолноеНаименование("РВ.1", "Нераспределенная розничная выручка (без налогов)");
		ЗаписатьПолноеНаименование("РВ.2", "НДС в нераспределенной розничной выручке");
		ЗаписатьПолноеНаименование("РВ.3", "НП в нераспределенной розничной выручке");
		
		ЗаписатьПолноеНаименование("АОС", "Не используется");
		
		// Замена счетов в проводках и документах
		Счет = СоздатьОбъект("Счет");
		Если Счет.НайтиПоКоду("П98.2") = 0 Тогда
		    Если Вопрос("ВНИМАНИЕ. Перед обновление информационной
			            |базы не была запущена внешняя обработка по замене
						|счета 98.2 ""Безвозмездные поступления (ОС)"" (см. файл update.txt)! 
						|Во избежании частичной потери информации на счете 98.2
						|необходимо заново произвести обновление информационной базы.
						|Продолжить обновление?", "Да+Нет") <> "Да" Тогда
				ДальнейшееОбновлениеНевозможно = 1;
				ОтменитьТранзакцию();
				Возврат;
			КонецЕсли;
		КонецЕсли;
		
		// Замена кодов счетов и типов аналитики в формах документов.
		Если ОбработкаСчетовВДокументахВыполнена = 0 Тогда
		    ОбработкаСчетовВДокументах();
		КонецЕсли;
		
		Сч98_2_1 = СчетПоКоду("98.2.1");
		СчП98_2  = СчетПоКоду("П98.2");
		Сч58_1   = СчетПоКоду("58.1");
		Сч58_1_1 = СчетПоКоду("58.1.1");
		Сч14     = СчетПоКоду("14");
		Сч14_1   = СчетПоКоду("14.1");
		
		Опер = СоздатьОбъект("Операция");
		Опер1 = СоздатьОбъект("Операция");
		Опер.ВыбратьОперации(,);
		Фильтр = "П98.2,*;*,П98.2;58.1,*;*,58.1;14,*;*,14";
		Опер.ВыбратьОперацииСПроводками(,, Фильтр);
		Пока Опер.ПолучитьОперацию() = 1 Цикл
			ОперацияИзменена = 0;
			Опер1.НайтиОперацию(Опер.Документ);
			Опер1.ВыбратьПроводки();
			Пока Опер1.ПолучитьПроводку() = 1 Цикл
				СчетДт = Опер1.Дебет.Счет;
				СчетКт = Опер1.Кредит.Счет;
				
				Если Опер1.Дебет.Счет = СчП98_2 Тогда
					Опер1.Дебет.Счет = Сч98_2_1;
					ОперацияИзменена = 1;
					
				ИначеЕсли Опер1.Дебет.Счет = Сч58_1 Тогда
					Опер1.Дебет.Счет = Сч58_1_1;
					ОперацияИзменена = 1;
					
				ИначеЕсли Опер1.Дебет.Счет = Сч14 Тогда
					Опер1.Дебет.Счет = Сч14_1;
					ОперацияИзменена = 1;
				КонецЕсли;
				
				Если Опер1.Кредит.Счет = СчП98_2 Тогда
				    Опер1.Кредит.Счет = Сч98_2_1;
					ОперацияИзменена = 1;
					
				ИначеЕсли Опер1.Кредит.Счет = Сч58_1 Тогда
				    Опер1.Кредит.Счет = Сч58_1_1;
					ОперацияИзменена = 1;
					
				ИначеЕсли Опер1.Кредит.Счет = Сч14 Тогда
				    Опер1.Кредит.Счет = Сч14_1;
					ОперацияИзменена = 1;
				КонецЕсли;
			КонецЦикла;
			Если ОперацияИзменена = 1 Тогда
			    Опер1.Записать();
			КонецЕсли;
		КонецЦикла;
		
		// Проанализируем какие типы цен встречаются у номенклатуры
		Ном = СоздатьОбъект("Справочник.Номенклатура");
		Цены = СоздатьОбъект("Справочник.Цены");
		Ном.ВыбратьЭлементы();
		Пока Ном.ПолучитьЭлемент()=1 Цикл
			Цены.ИспользоватьВладельца(Ном);
			Если (Ном.ЭтоГруппа() = 1) или (Цены.ВыбратьЭлементы(1) = 1) Тогда
				Продолжить;
			КонецЕсли;
			Если Ном.ПорядокХраненияОтпускнойЦены <> 0 Тогда
				ТипыЦенНоменклатуры[Ном.ПорядокХраненияОтпускнойЦены] = 1;    
			КонецЕсли;
		КонецЦикла;
		
		// Создание типов цен, которые используются для номенклатуры
		Состояние("Создание типа цен ""Основная цена""");
		ТипыЦен = СоздатьОбъект("Справочник.ТипыЦен");
		
		Если Константа.ОсновнойВариантОтпускнойЦены = Перечисление.ВариантыОтпускныхЦен.БезНалогов Тогда
		    ОсновнойТипЦен = 1;
			
		ИначеЕсли Константа.ОсновнойВариантОтпускнойЦены = Перечисление.ВариантыОтпускныхЦен.БезНП Тогда
			ОсновнойТипЦен = 2;
			
		ИначеЕсли Константа.ОсновнойВариантОтпускнойЦены = Перечисление.ВариантыОтпускныхЦен.ВключаяНП Тогда
			ОсновнойТипЦен = 3;
			
		Иначе
			ОсновнойТипЦен = 1;
		КонецЕсли;
		
		Если (ТипыЦенНоменклатуры[1] = 1) или (ОсновнойТипЦен = 1) Тогда
			Если ТипыЦен.НайтиПоНаименованию("Основная цена (без налогов)",,) = 0 Тогда
				ТипыЦен.Новый();
				ТипыЦен.Наименование = "Основная цена (без налогов)";
				ТипыЦен.Валюта = "";
				ТипыЦен.ЦенаВклНДС = 0;  
				ТипыЦен.ЦенаВклНП = 0;
				ТипыЦен.Записать();
			КонецЕсли;
			
			Если ТипыЦенНоменклатуры[1] = 1 Тогда
				ТипыЦенНоменклатуры[1] = ТипыЦен.ТекущийЭлемент();    
			КонецЕсли;
			
			Если ОсновнойТипЦен = 1 Тогда
				ОсновнойТипЦен = ТипыЦен.ТекущийЭлемент();    
			КонецЕсли;
		КонецЕсли;
		
		Если (ТипыЦенНоменклатуры[2] = 1) или (ОсновнойТипЦен = 2) Тогда
			Если ТипыЦен.НайтиПоНаименованию("Основная цена (без НП)",,) = 0 Тогда
				ТипыЦен.Новый();
				ТипыЦен.Наименование = "Основная цена (без НП)";
				ТипыЦен.Валюта = "";
				ТипыЦен.ЦенаВклНДС = 1;  
				ТипыЦен.ЦенаВклНП = 0;
				ТипыЦен.Записать();
			КонецЕсли;
			
			Если ТипыЦенНоменклатуры[2] = 1 Тогда
				ТипыЦенНоменклатуры[2] = ТипыЦен.ТекущийЭлемент();
			КонецЕсли;
			
			Если ОсновнойТипЦен = 2 Тогда
				ОсновнойТипЦен = ТипыЦен.ТекущийЭлемент();
			КонецЕсли;
		КонецЕсли;
		
		Если (ТипыЦенНоменклатуры[3] = 1) или (ОсновнойТипЦен = 3) Тогда
			Если ТипыЦен.НайтиПоНаименованию("Основная цена (включая НП)",,) = 0 Тогда
				ТипыЦен.Новый();
				ТипыЦен.Наименование = "Основная цена (включая НП)";
				ТипыЦен.Валюта = "";
				ТипыЦен.ЦенаВклНДС = 1;  
				ТипыЦен.ЦенаВклНП = 1;
				ТипыЦен.Записать();
			КонецЕсли;
			
			Если ТипыЦенНоменклатуры[3] = 1 Тогда
				ТипыЦенНоменклатуры[3] = ТипыЦен.ТекущийЭлемент();
			КонецЕсли;
			
			Если ОсновнойТипЦен = 3 Тогда
				ОсновнойТипЦен = ТипыЦен.ТекущийЭлемент();
			КонецЕсли;
		КонецЕсли;
		
		Состояние("Установка цен");
		Ном = СоздатьОбъект("Справочник.Номенклатура");
		Цены = СоздатьОбъект("Справочник.Цены");
		Ном.ВыбратьЭлементы();
		Пока Ном.ПолучитьЭлемент()=1 Цикл
			Если (Ном.ТипНоменклатуры = Перечисление.ТипыНоменклатуры.Товар) и
				(ПустоеЗначение(Ном.СтранаПроисхождения) = 1) Тогда
				Ном.СтранаПроисхожд = 1;
				Ном.Записать();                                                            
			КонецЕсли;
			Цены.ИспользоватьВладельца(Ном);
			Если (Ном.ЭтоГруппа() = 1) или (Цены.ВыбратьЭлементы(1) = 1) Тогда
				Продолжить;
			КонецЕсли;
			
			Если ПустоеЗначение(ТипыЦенНоменклатуры[1]) = 0 Тогда
				Цены.Новый();
				Цены.ТипЦен = ТипыЦенНоменклатуры[1];
				Цены.Валюта = Ном.Валюта;
				Цены.Владелец = Ном.ТекущийЭлемент();
				Цены.Записать();
				Цены.Цена.Установить('01.01.1980',ПолучитьЦену(1, Ном));
			КонецЕсли;
			
			Если ПустоеЗначение(ТипыЦенНоменклатуры[2]) = 0 Тогда
				Цены.Новый();
				Цены.ТипЦен = ТипыЦенНоменклатуры[2];
				Цены.Валюта = Ном.Валюта;
				Цены.Владелец = Ном.ТекущийЭлемент();
				Цены.Записать();
				Цены.Цена.Установить('01.01.1980',ПолучитьЦену(2, Ном));
			КонецЕсли;
			
			Если ПустоеЗначение(ТипыЦенНоменклатуры[3]) = 0 Тогда
				Цены.Новый();
				Цены.ТипЦен = ТипыЦенНоменклатуры[3];
				Цены.Валюта = Ном.Валюта;
				Цены.Владелец = Ном.ТекущийЭлемент();
				Цены.Записать();
				Цены.Цена.Установить('01.01.1980',ПолучитьЦену(3, Ном));
			КонецЕсли;
			
		КонецЦикла;
		
		Состояние("Обработка справочника ""Места хранения""");
		МХ = СоздатьОбъект("Справочник.МестаХранения");
		МХ.ВыбратьЭлементы();
		Пока МХ.ПолучитьЭлемент()=1 Цикл
		    МХ.ТипСклада = Перечисление.ТипыСкладов.Оптовый;
			МХ.ТипЦен = ОсновнойТипЦен;
			МХ.Записать();
		КонецЦикла;
		
		Состояние("Обработка реквизита ""Тип цен""");
		Док = СоздатьОбъект("Документ");
		Док.ВыбратьДокументы();
		Пока Док.ПолучитьДокумент() = 1 Цикл
			Если Метаданные.Документ(Док.Вид()).РеквизитШапки("ТипЦен").Выбран() = 1 Тогда
				Док.ТипЦен = ОсновнойТипЦен;
				Док.Записать();
			КонецЕсли;
		КонецЦикла;
		
		Если ИтогиНаДатуРассчитаны(КонМесяца(РабочаяДата())) = 0 Тогда
			ДальнейшееОбновлениеНевозможно = 1;
			ОтменитьТранзакцию();
			Возврат;
		КонецЕсли;
		
		ГТД = СоздатьОбъект("Справочник.ГТД");
		Ном = СоздатьОбъект("Справочник.Номенклатура");
		БухИт = СоздатьОбъект("БухгалтерскиеИтоги");
		БухИт.ИспользоватьСубконто(ВидыСубконто.ГТД,,1);
		БухИт.ИспользоватьСубконто(ВидыСубконто.Номенклатура,,1);
		БухИт.Опции(1,0);
		БухИт.ВыполнитьЗапрос(,КонМесяца(РабочаяДата()),"ГТД");
		БухИт.ВыбратьСубконто(1);
		Пока БухИт.ПолучитьСубконто(1) = 1 Цикл
			БухИт.ВыбратьСубконто(2);
			Пока БухИт.ПолучитьСубконто(2) = 1 Цикл
				Если (ГТД.НайтиЭлемент(БухИт.Субконто(ВидыСубконто.ГТД)) = 1) и
					(Ном.НайтиЭлемент(БухИт.Субконто(ВидыСубконто.Номенклатура)) = 1) Тогда
				    Если ПустоеЗначение(Ном.СтранаПроисхождения) = 0 Тогда
				        ГТД.СтранаПроисхождения = Ном.СтранаПроисхождения;
						ГТД.Записать();
						Прервать;
				    КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
		
		Состояние("Обработка документов ""Списание ОС""");
		Док = СоздатьОбъект("Документ.СписаниеОС");
		Док.ВыбратьДокументы();
		Пока Док.ПолучитьДокумент() = 1 Цикл
		    Док.НоваяСтрока();
			Док.ОсновноеСредство = Док.ОС;
			Док.Записать();
		КонецЦикла; 
		
		Состояние("Удаление видов расчетов с покупателями из справочников");
		Для А = 1 По Метаданные.Справочник() Цикл
			Если Метаданные.Справочник(А).Реквизит("Субконто3").Выбран() = 1 Тогда
				Спр = СоздатьОбъект("Справочник."+ Метаданные.Справочник(А).Идентификатор);
				Спр.ВыбратьЭлементы(0);
				Пока Спр.ПолучитьЭлемент() = 1 Цикл
					Если ТипЗначенияСтр(Спр.Субконто3) = "Перечисление" Тогда
						Если Спр.Субконто3.Вид() = "ВидыРасчетовСПокупателями" Тогда
							Спр.Субконто3 = "";
							Спр.НазначитьТип("Субконто3", "Неопределенный");
							Спр.Записать();
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЦикла;
		
		Состояние("Удаление видов расчетов с покупателями из документов");
		Док = СоздатьОбъект("Документ");
		Док.ВыбратьДокументы(,);
		Пока Док.ПолучитьДокумент() = 1 Цикл
			Если Метаданные.Документ(Док.Вид()).РеквизитШапки("Субконто3").Выбран() = 1 Тогда
				Если ТипЗначенияСтр(Док.Субконто3) = "Перечисление" Тогда
					Если Док.Субконто3.Вид() = "ВидыРасчетовСПокупателями" Тогда
						Док.Субконто3 = "";
						Док.НазначитьТип("Субконто3", "Неопределенный");
						Док.Записать();
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			Если Метаданные.Документ(Док.Вид()).РеквизитТабличнойЧасти("Субконто3").Выбран() = 1 Тогда
				Док.ВыбратьСтроки();
				ФлагЗаписи = 0;
				Пока Док.ПолучитьСтроку() = 1 Цикл
					Если ТипЗначенияСтр(Док.Субконто3) = "Перечисление" Тогда
						Если Док.Субконто3.Вид() = "ВидыРасчетовСПокупателями" Тогда
							Док.Субконто3 = "";
							Док.НазначитьТип("Субконто3", "Неопределенный");
							ФлагЗаписи = 1;
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;
				Если ФлагЗаписи = 1 Тогда
					Док.Записать();
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		Состояние("Обновление плана счетов");
		Сч = СоздатьОбъект("Счет." + ВыбранныйПланСчетов().Идентификатор());
		ЗаписатьПолноеНаименование("КН", "Не используется");
		ЗаписатьПолноеНаименование("КФ", "Не используется");
		ЗаписатьПолноеНаименование("НБ", "Не используется");
		ЗаписатьПолноеНаименование("ДФЛ", "Доходы физических лиц");
		ЗаписатьПолноеНаименование("ДФЛ.1", "Доходы, относящиеся к деятельности, не облагаемой ЕНВД");
		ЗаписатьПолноеНаименование("ДФЛ.2", "Доходы, относящиеся к деятельности, облагаемой ЕНВД");
		
		Состояние("Заполнение справочника ""Виды доходов""");
		СпрВидыДоходов  = СоздатьОбъект("Справочник.ВидыДоходов");
		Если СпрВидыДоходов.ВыбратьЭлементы() = 0 Тогда
			УстановитьВидДохода("2000", "Вознаграждение за труд (заработная плата, денежное содержание, догов. гр.-прав. х-ра и пр.)");
			УстановитьВидДохода("0000", "Доходы, освобождаемые от налогообложения в соответствии со ст.217 НК РФ");
		КонецЕсли;
		
		ВидыДоходов = СоздатьОбъект("Справочник.ВидыДоходов");
		СпрНачисления = СоздатьОбъект("Справочник.ВидыНачислений");
		Если СпрНачисления.ВыбратьЭлементы(0) = 0 Тогда
			СпрНачисления.Новый();
			Если ВидыДоходов.НайтиПоКоду("2000") = 1 Тогда
				СпрНачисления.ВидДохода = ВидыДоходов.ТекущийЭлемент();
				СпрНачисления.Код = "2000";
			КонецЕсли;
			
			СпрНачисления.Наименование = "Заработная плата";
			СпрНачисления.ЕСН_ФБ = 1;
			СпрНачисления.ЕСН_ФСС = 1;
			СпрНачисления.ЕСН_ФОМС = 1;
			СпрНачисления.ПФР = 1;
			СпрНачисления.ФСС_НС = 1;
			СпрНачисления.Записать();
		КонецЕсли;
		
		Состояние("Обработка бухгалтерских итогов");
		Доход = СоздатьОбъект("ТаблицаЗначений");
		Доход.НоваяКолонка("НДФЛ", "Число");
		Доход.НоваяКолонка("ЕСН", "Число");
		Доход.НоваяКолонка("ФСС", "Число");
		Доход.НоваяКолонка("ПФР", "Число");
		Доход.НоваяКолонка("ФСС_НС", "Число");
		Доход.НоваяКолонка("СО", "Число");
		
		Сч00 = СчетПоКоду("00");
		Сч70 = СчетПоКоду("70");
		СчНБ = СчетПоКоду("НБ");
		СчДФЛ = СчетПоКоду("ДФЛ.1");
		СпрВидыНачислений = СоздатьОбъект("Справочник.ВидыНачислений");
		Сотрудник = СоздатьОбъект("Справочник.Сотрудники");
		
		Опер = СоздатьОбъект("Операция");
		БухИт = СоздатьОбъект("БухгалтерскиеИтоги");
		БухИт.Опции(1, 1);
		БухИт.ИспользоватьСубконто();
		БухИт.ИспользоватьСубконто();
		БухИт.ВыполнитьЗапрос('01.01.1980', КонецРассчитанногоПериодаБИ(), "70,НБ",,, 2, "Месяц", "С");
		БухИт.ВыбратьПериоды();
		Пока БухИт.ПолучитьПериод() = 1 Цикл
			Опер.Новая();
			Опер.ДатаОперации = БухИт.КонДата;
			Опер.Документ.УстановитьНовыйНомер("");
			Опер.Содержание = "Ввод оборотов по счету ДФЛ";
			
			БухИт.ВыбратьСубконто(1);
			Пока БухИт.ПолучитьСубконто(1) = 1 Цикл
				Доход.УдалитьСтроки();
				Доход.НоваяСтрока();
				
				БухИт.ВыбратьСчета();
				Пока БухИт.ПолучитьСчет() = 1 Цикл
					Если БухИт.Счет = СчНБ Тогда
						БухИт.ВыбратьСубконто(2);
						Пока БухИт.ПолучитьСубконто(2) = 1 Цикл
							Субконто2 = БухИт.Субконто(2);
						    Если Субконто2 = Перечисление.ВидыНачислений.ОбъектНалогообложения Тогда
								Доход.ЕСН = Доход.ЕСН + БухИт.КО();
								Доход.ФСС = Доход.ФСС + БухИт.КО();
								Доход.ПФР = Доход.ПФР + БухИт.КО();
							
							ИначеЕсли Субконто2 = Перечисление.ВидыНачислений.ЗаСчетФСС Тогда
								Доход.ЕСН = Доход.ЕСН - БухИт.КО();
								Доход.ФСС = Доход.ФСС - БухИт.КО();
								Доход.ПФР = Доход.ПФР - БухИт.КО();
								Доход.ФСС_НС = Доход.ФСС_НС - БухИт.КО();
								Доход.СО = Доход.СО - БухИт.КО();
								
							ИначеЕсли Субконто2 = Перечисление.ВидыНачислений.НеОблагаетсяФСС Тогда
								Доход.ФСС = Доход.ФСС - БухИт.КО();
								
							ИначеЕсли Субконто2 = Перечисление.ВидыНачислений.НеОблагаетсяПрочее Тогда
								Доход.ЕСН = Доход.ЕСН - БухИт.КО();
								Доход.ФСС = Доход.ФСС - БухИт.КО();
								Доход.ПФР = Доход.ПФР - БухИт.КО();
								
							ИначеЕсли Субконто2 = Перечисление.ВидыНачислений.КорректировкаПФР Тогда
								Доход.ПФР = Доход.ПФР + БухИт.КО();
								
							ИначеЕсли Субконто2 = Перечисление.ВидыНачислений.КорректировкаФСС_НСиПЗ Тогда
								Доход.ФСС_НС = Доход.ФСС_НС + БухИт.КО();
								
							ИначеЕсли Субконто2 = Перечисление.ВидыНачислений.КорректировкаСО Тогда
								Доход.СО = Доход.СО + БухИт.КО();
						    КонецЕсли;
						КонецЦикла;
						
					Иначе // Если БухИт.Счет = Сч70 Тогда
						БухИт.ВыбратьКорСчета();
						Пока БухИт.ПолучитьКорСчет() = 1 Цикл
						    Если БухИт.КорСчет <> Сч00 Тогда
								Доход.НДФЛ = Доход.НДФЛ + БухИт.КорКО();
								Доход.ФСС_НС = Доход.ФСС_НС + БухИт.КорКО();
								Доход.СО = Доход.СО + БухИт.КорКО();
						    КонецЕсли;
						КонецЦикла;
					КонецЕсли;
				КонецЦикла;
				
				// Найдем сумму всех налоговых баз
				СуммаНалоговыхБаз = 0;
				Для НомерКолонки = 1 по Доход.КоличествоКолонок() Цикл
					СуммаНалоговыхБаз = СуммаНалоговыхБаз + Доход.ПолучитьЗначение(1, НомерКолонки);
				КонецЦикла;
				
				Пока СуммаНалоговыхБаз > 0 Цикл
					// Найдем минимальную сумму
					МинимальнаяСумма = 0;
					Для НомерКолонки = 1 по Доход.КоличествоКолонок() Цикл
						СуммаВТекущейКолонке = Доход.ПолучитьЗначение(1, НомерКолонки);
						Если СуммаВТекущейКолонке > 0 Тогда
							Если (МинимальнаяСумма = 0) или (СуммаВТекущейКолонке < МинимальнаяСумма) Тогда
							    МинимальнаяСумма = СуммаВТекущейКолонке;
							КонецЕсли;
						КонецЕсли;
					КонецЦикла;
					
					// Сформируем проводку на сумму найденного минимума
					// Функция НайтиВидНачисления() вернет нам вид начисления, облагаемый теми налогами,
					// по которым в таблице "Доходы" сумма отличается от нуля.
					Если МинимальнаяСумма <> 0 Тогда
						Опер.НоваяПроводка(); Опер.РазделительУчета = Константа.ОсновноеЮрЛицо;
						Опер.Кредит.Счет = СчДФЛ;
						Опер.Кредит.Сотрудники = БухИт.Субконто(1);
						Опер.Кредит.ВидыНачисленийВыплат = НайтиВидНачисления(СпрВидыНачислений, Доход);
						Опер.Сумма = МинимальнаяСумма;
						Опер.НомерЖурнала = "ЗП";
						Опер.СодержаниеПроводки = "Начислено за " + ПериодСтр(БухИт.НачДата, БухИт.КонДата);
					КонецЕсли;
					
					// Уменьшим значения на найденый минимум
					СуммаНалоговыхБаз = 0;
					Для НомерКолонки = 1 по Доход.КоличествоКолонок() Цикл
						СуммаВТекущейКолонке = Доход.ПолучитьЗначение(1, НомерКолонки);
						Если СуммаВТекущейКолонке > 0 Тогда
							СуммаВТекущейКолонке = Макс(СуммаВТекущейКолонке - МинимальнаяСумма, 0);
							Доход.УстановитьЗначение(1, НомерКолонки, СуммаВТекущейКолонке);
							СуммаНалоговыхБаз = СуммаНалоговыхБаз + СуммаВТекущейКолонке;
						КонецЕсли;
					КонецЦикла;
				КонецЦикла;
			КонецЦикла;
			
			Если Опер.КоличествоПроводок() > 0 Тогда
			    Опер.Записать();
			КонецЕсли;
		КонецЦикла;
		
		Состояние("Обработка счета КН");
		СчКН = СчетПоКоду("КН");
		Опер = СоздатьОбъект("Операция");
		Опер1 = СоздатьОбъект("Операция");
		НовОпер = СоздатьОбъект("Операция");
		Опер.ВыбратьОперацииСПроводками(,, СчКН);
		Пока Опер.ПолучитьОперацию() = 1 Цикл

			Часы = 0;
			Минуты = 0;
			Секунды = 0;
			Опер.ПолучитьВремя(Часы,Минуты,Секунды);
			
			ВсегоСекунд	= Часы*3600 + Минуты*60 + Секунды;
			ВсегоСекунд	= ВсегоСекунд - 1;
			
			Часы		=	Цел(ВсегоСекунд / 3600);
			Минуты		=	Цел((ВсегоСекунд - Часы*3600) / 60);
			Секунды		=	ВсегоСекунд - Часы*3600 - Минуты*60;
			
			НовОпер.Новая();
			НовОпер.ДатаОперации = Опер.ДатаОперации;
			НовОпер.УстановитьВремя(Часы,Минуты,Секунды);
			НовОпер.Документ.УстановитьНовыйНомер("");
			НовОпер.Содержание = "Корректировка базы НДФЛ";
			
			Опер1.НайтиОперацию(Опер.Документ);
			Опер1.ВыбратьПроводки();
			Пока Опер1.ПолучитьПроводку() = 1 Цикл
				Если (Опер1.Кредит.Счет = СчКН) и (Опер1.Сумма <> 0) Тогда
					Доход.УдалитьСтроки();
					Доход.НоваяСтрока();
					Доход.НДФЛ = Опер1.Сумма;
					
				    НовОпер.НоваяПроводка(); НовОпер.РазделительУчета = Константа.ОсновноеЮрЛицо;
					НовОпер.Кредит.Счет = СчДФЛ;
					НовОпер.Кредит.Сотрудники = Опер1.Кредит.Субконто(1);
					НовОпер.Кредит.ВидыНачисленийВыплат = НайтиВидНачисления(СпрВидыНачислений, Доход, "2000");
					НовОпер.Сумма = Опер1.Сумма;
					НовОпер.НомерЖурнала = "ЗП";
					НовОпер.СодержаниеПроводки = "Корректировка базы НДФЛ";
					
					НовОпер.НоваяПроводка(); НовОпер.РазделительУчета = Константа.ОсновноеЮрЛицо;
					НовОпер.Кредит.Счет = СчДФЛ;
					НовОпер.Кредит.Сотрудники = Опер1.Кредит.Субконто(1);
					НовОпер.Кредит.ВидыНачисленийВыплат = НайтиВидНачисления(СпрВидыНачислений, Доход, "0000");
					НовОпер.Сумма = - Опер1.Сумма;
					НовОпер.НомерЖурнала = "ЗП";
					НовОпер.СодержаниеПроводки = "Корректировка базы НДФЛ";
				КонецЕсли;
			КонецЦикла;
			
			Если НовОпер.КоличествоПроводок() > 0 Тогда
			    НовОпер.Записать();
			КонецЕсли;
		КонецЦикла;
		
		Состояние("Обработка справочника ""Сотрудники""");
		Спр = СоздатьОбъект("Справочник.Сотрудники");
		Дети = СоздатьОбъект("Периодический");
		ХарактерРаботы = СоздатьОбъект("Периодический");
		Спр.ВыбратьЭлементы();
		Пока Спр.ПолучитьЭлемент() = 1 Цикл
		    Если Спр.ЭтоГруппа() = 0 Тогда
				Спр.Статус.Установить('01.01.1980', 1);
				
				ХарактерРаботы.ИспользоватьОбъект("ХарактерРаботы", Спр.ТекущийЭлемент());               
				ХарактерРаботы.ВыбратьЗначения(,);
				Пока ХарактерРаботы.ПолучитьЗначение() = 1 Цикл
					Если ПустоеЗначение(ХарактерРаботы.ТекущийДокумент()) = 1 Тогда
						Если ХарактерРаботы.Значение = Перечисление.ХарактерРаботы.ДоговорГражданскоПравовогоХарактераВзносы Тогда
						    ХарактерРаботы.Значение = Перечисление.ХарактерРаботы.ТрудовойДоговор;
							
						ИначеЕсли ХарактерРаботы.Значение = Перечисление.ХарактерРаботы.ДоговорГражданскоПравовогоХарактера Тогда
						    ХарактерРаботы.Значение = Перечисление.ХарактерРаботы.ТрудовойДоговор;
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;
				
				Дети.ИспользоватьОбъект("Дети", Спр.ТекущийЭлемент());               
				Дети.ВыбратьЗначения(,);
				Пока Дети.ПолучитьЗначение() = 1 Цикл
					Если ПустоеЗначение(Дети.ТекущийДокумент()) = 1 Тогда
				    	УстановитьНаДату = ?(ПустоеЗначение(Дети.ДатаЗнач) = 1, '01.01.1980', Дети.ДатаЗнач);
				    	Спр.РазмерВычетаНаРебенка.Установить(УстановитьНаДату, ?(Дети.Значение > 0, 300, 0));
					КонецЕсли;
				КонецЦикла;
		    КонецЕсли;
		КонецЦикла;
		
		Состояние("Обновление кадровых приказов");
		НеКомментировать = ВосстановитьЗначение("НеКомментироватьВыполняемыеДействия");
		СохранитьЗначение("НеКомментироватьВыполняемыеДействия", 1);
		Док = СоздатьОбъект("Документ.ПриказОКадровыхИзменениях");
		Док.ВыбратьДокументы(,);
		Пока Док.ПолучитьДокумент() = 1 Цикл
		    Если Док.Сотрудник.Выбран() = 1 Тогда
				Док.Статус = 1;
				Док.РазмерВычетаНаРебенка = ?(Док.Дети > 0, 300, 0);
				
				Если Док.ХарактерРаботы = Перечисление.ХарактерРаботы.ДоговорГражданскоПравовогоХарактераВзносы Тогда
				    Док.ХарактерРаботы = Перечисление.ХарактерРаботы.ТрудовойДоговор;
					
				ИначеЕсли Док.ХарактерРаботы = Перечисление.ХарактерРаботы.ДоговорГражданскоПравовогоХарактера Тогда
				    Док.ХарактерРаботы = Перечисление.ХарактерРаботы.ТрудовойДоговор;
				КонецЕсли;
						
				Док.Записать();
				
				Если Док.Проведен() = 1 Тогда
			        Док.Провести(,1);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		Док = СоздатьОбъект("Документ.ПриказОПриемеНаРаботу");
		Док.ВыбратьДокументы(,);
		Пока Док.ПолучитьДокумент() = 1 Цикл
		    Если Док.Сотрудник.Выбран() = 1 Тогда
				Док.Статус = 1;
				Док.РазмерВычетаНаРебенка = ?(Док.Дети > 0, 300, 0);
				
				Если Док.ХарактерРаботы = Перечисление.ХарактерРаботы.ДоговорГражданскоПравовогоХарактераВзносы Тогда
				    Док.ХарактерРаботы = Перечисление.ХарактерРаботы.ТрудовойДоговор;
					
				ИначеЕсли Док.ХарактерРаботы = Перечисление.ХарактерРаботы.ДоговорГражданскоПравовогоХарактера Тогда
				    Док.ХарактерРаботы = Перечисление.ХарактерРаботы.ТрудовойДоговор;
				КонецЕсли;
						
				Док.Записать();
				
				Если Док.Проведен() = 1 Тогда
			        Док.Провести(, 1);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		СохранитьЗначение("НеКомментироватьВыполняемыеДействия", НеКомментировать);
		
		Состояние("Обновление начальных данных для расчета налогов с ФОТ");
		СпрКарточка = СоздатьОбъект("Справочник.КарточкиУчетаДоходов"); // итоги в новом формате
		Сотр = СоздатьОбъект("Справочник.Сотрудники");
		Сотр.ВыбратьЭлементы();
		Пока Сотр.ПолучитьЭлемент() = 1 Цикл
			Если Сотр.ЭтоГруппа() = 1 Тогда
			    Продолжить;
			КонецЕсли;
			
		    СпрКарточка.ИспользоватьВладельца(Сотр.ТекущийЭлемент());
			ГодКарточки = ДатаГод(Сотр.ДатаПриема);
			МесяцДоНачалаУчета = ДатаМесяц(Сотр.ДатаПриема) - 1;
			
			Если СпрКарточка.НайтиПоКоду(ГодКарточки) = 1 Тогда
				СтрКарточка = СокрЛП(СпрКарточка.СписокПолейИндивидульнойКарточки);
			    Если ПустоеЗначение(СтрКарточка) = 1 Тогда
					Продолжить;
				КонецЕсли;
				
				Карточка = ЗначениеИзСтроки(СтрКарточка);
				
				ТекМесяц = "31.01." + ГодКарточки;
				Для НомерМесяца = 1 по МесяцДоНачалаУчета Цикл
					Месяц = Формат(НомерМесяца,"Ч(0)2");
					
					БазаЕСН = Карточка.Получить("П" + Месяц + "02") - // всего начислено
							  Карточка.Получить("П" + Месяц + "03") - // не является объектом
							  Карточка.Получить("П" + Месяц + "04");  // не облагаемые доходы во все фонды
							  
					БазаФСС	= Карточка.Получить("П" + Месяц + "02") - // всего начислено
							  Карточка.Получить("П" + Месяц + "03") - // не является объектом
							  Карточка.Получить("П" + Месяц + "04") - // не облагаемые доходы во все фонды
							  Карточка.Получить("П" + Месяц + "05");  // не облагаемые доходы в ФСС
							  
					БазаПФР = Карточка.Получить("П" + Месяц + "21");
					
					Сотр.ДоходОблагаемыйЕСН_СНачалаГода.Установить(ТекМесяц, БазаЕСН);
					Сотр.ДоходОблагаемыйЕСН_ФСС_СНачалаГода.Установить(ТекМесяц, БазаФСС);
					Сотр.ДоходОблагаемыйПФР_СНачалаГода.Установить(ТекМесяц, БазаПФР);
					
					ТекМесяц = КонМесяца(ДобавитьМесяц(ТекМесяц, 1));
				КонецЦикла;
			КонецЕсли;
		КонецЦикла;
		
		Таб.ВывестиСекцию(Строка(Номер)); 
		
	ИначеЕсли Номер = 770454 Тогда	
		// установим справочник Виды вычетов
		СпрВидыВычетов  = СоздатьОбъект("Справочник.ВидыВычетов");
		Если СпрВидыВычетов.ВыбратьЭлементы()=0 Тогда
			УстановитьВидВычета("101","300 руб. на каждого ребенка, пп.4 п.1 ст.218 НК");
			УстановитьВидВычета("102","600 руб. на ребенка одинокому родителю, пп.4 п.1 ст.218 НК");
			УстановитьВидВычета("103","400 руб. на налогоплательщика, пп.3 п.1 ст.218 НК");
			УстановитьВидВычета("104","500 рублей на налогоплательщика, пп.2 п.1 ст.218 НК");
			УстановитьВидВычета("105","3 000 рублей на налогоплательщика, пп.1 п.1 ст.218 НК");
			УстановитьВидВычета("403","Расходы по договорам гражданско-правового характера, пп.2 ст.221 НК");
			УстановитьВидВычета("404","Фактически произведенные расходы по авторским,пп.3 ст.221 НК");
			УстановитьВидВычета("405","В пределах норматива затрат по авторским, пп.3 ст.221 НК");
			УстановитьВидВычета("501","Вычет из стоимости подарков");
			УстановитьВидВычета("502","Вычет из стоимости призов на соревнованиях");
			УстановитьВидВычета("503","Вычет из стоимости (суммы) материальной помощи");
			УстановитьВидВычета("504","Вычет из суммы возмещения (оплаты) стоимости медикаментов");
			УстановитьВидВычета("505","Вычет из стоимости выигрышей и призов в рекламных акциях");
			УстановитьВидВычета("601","Налоговые льготы, установленные законодат-вом субъектов РФ");
		КонецЕсли;
		
		// загрузка справочника Виды доходов
		СпрВидыДоходов  = СоздатьОбъект("Справочник.ВидыДоходов");
		УстановитьВидДохода("1010","Дивиденды, определяемые с учетом ст.214 НК",);
		УстановитьВидДохода("1100","Сумма процентов по облигациям и ценным бумагам, включая векселя",);
		УстановитьВидДохода("1200","Страховые выплаты при наступлении страхового случая (облагаемые)",);
		УстановитьВидДохода("1210","Разница между страховой выплатой и суммой взносов, п.2 ст.213 НК",);
		УстановитьВидДохода("1220","Выплата при досрочном расторжении дог. страхования жизни,п.3 ст.213 НК",);
		УстановитьВидДохода("1230","Страховые (пенсионные) взносы, внесенные за физ.лиц, п.5 ст.213 НК",);
		УстановитьВидДохода("1300","Доходы от использования прав на объекты интеллектуальной собственности",);
		УстановитьВидДохода("1400","Доходы от сдачи в аренду и иного исп-ия имущества,кроме трансп.средств",);
		УстановитьВидДохода("1510","Доходы от реализации недвижимого имущества",);
		УстановитьВидДохода("1520","Доходы от реализации иного имущества (кроме ценных бумаг)",);
		УстановитьВидДохода("1530","Доходы от реализации акций или иных ценных бумаг",);
		УстановитьВидДохода("1540","Доходы от реализации долей участия в уставном капитале организаций",);
		УстановитьВидДохода("2000","Вознаграждение за труд (заработная плата, денежное содержание и пр.)",);
		УстановитьВидДохода("2201","Авторские вознаграждения за создание литературных произведений",);
		УстановитьВидДохода("2202","Авторские вознаграждения за создание художественно-графических произв.",);
		УстановитьВидДохода("2203","Авторские вознагр. за создание скульптур, декоративно-прикладн иск.",);
		УстановитьВидДохода("2204","Авторские вознаграждения за создание аудиовизуальных произведений",);
		УстановитьВидДохода("2205","Авторские вознаграждения за создание музыкально-сценических произв.",);
		УстановитьВидДохода("2206","Авторские вознаграждения за создание других музыкальных произведений",);
		УстановитьВидДохода("2207","Авторские вознагр. за исполнение произведений литературы, искусства",);
		УстановитьВидДохода("2208","Авторские вознаграждения за создание произведений науки",);
		УстановитьВидДохода("2209","Авторские вознаграждения за открытия, изобретения промышленные образцы",);
		УстановитьВидДохода("2299","Иные авторские вознаграждения",);
		УстановитьВидДохода("2300","Пенсии, пособия и пр., кроме указанных в пп.1,2,11 ст.217 и п.1 ст.213",);
		УстановитьВидДохода("2400","Доходы от исп-ия трансп.средств, средств связи, компьют-ых сетей и пр.",);
		УстановитьВидДохода("2510","Суммы оплаты за налогоплательщика товаров(работ,услуг), в т.ч. питания",);
		УстановитьВидДохода("2520","Стоимость получ. товаров, выполн. работ(услуг) на безвозмездной основе",);
		УстановитьВидДохода("2530","Суммы оплаты труда в натуральной форме в виде товаров (работ, услуг)",);
		УстановитьВидДохода("2610","Мат.выгода от экономии на %% за пользов. заемными сред-ми, п.2 ст.212",);
		УстановитьВидДохода("2630","Мат.выгода от приобретения товаров (работ, услуг), согл. п.3 ст.212 НК",);
		УстановитьВидДохода("2640","Мат.выгода от приобретения ценных бумаг, опр. согласно п.4 ст.212 НК",);
		УстановитьВидДохода("2710","Материальная помощь, не подпадающая под п.8 и п.28 ст.217 НК",);
		УстановитьВидДохода("2720","Стоимость подарков, определяемая согласно п.28 ст.217 НК","501");
		УстановитьВидДохода("2730","Стоимость призов на соревнованиях, опр. согласно п.28 ст.217 НК","502");
		УстановитьВидДохода("2740","Стоимость выигрышей и призов,получаемых в мероприятиях в целях рекламы","505");
		УстановитьВидДохода("2750","Стоимость призов на других соревнованиях, не в целях рекламы",);
		УстановитьВидДохода("2760","Материальная помощь, определяемая согласно п.28 ст.217 НК","503");
		УстановитьВидДохода("2770","Суммы возмещения работникам стоимости медикаментов, п.28 ст.217 НК","504");
		УстановитьВидДохода("2780","Суммы возмещения стоимости медикаментов, не подпад. под п.28 ст.217 НК",);
		УстановитьВидДохода("2800","Суммы, полученные в погашение вексельных обязательств",);
		УстановитьВидДохода("2900","Доходы в виде курсовой разницы от операций с валютой",);
		УстановитьВидДохода("3010","Выигрыши в лотереях, тотализаторах и др. основанных на риске играх",);
		УстановитьВидДохода("3020","Сумма %% дохода по вкладам в банках свыше сумм согласно п.27 ст.217 НК",);
		УстановитьВидДохода("3100","Иные доходы, включаемые в налоговую базу источником выплаты дохода",);
		УстановитьВидДохода("4000","Доходы от предпринимательской деятельности",);
		УстановитьВидДохода("4600","Доходы частных нотариусов и других лиц, занимающихся частной практикой",);
		УстановитьВидДохода("4800","Иные доходы в нарушение порядка, устан. п.3,8-13,18,26,30,31 ст.217 НК",);
		УстановитьВидДохода("4900","Доходы, по кот. предоставляется льгота по законам субъектов РФ",);
		
		Таб.ВывестиСекцию(Строка(Номер)); 
		
	ИначеЕсли Номер = 770455 Тогда
		
		Состояние("Установка значений констант");
		Константа.СтавкаРефинансирования.Установить('15.01.2004', 14);
		
		Состояние("Корректировка плана счетов");
		Сч = СоздатьОбъект("Счет." + ВыбранныйПланСчетов().Идентификатор());
		
		ЗаписатьПолноеНаименование("КВР.58.1", "Паи");
		ЗаписатьПолноеНаименование("КВР.63", "Резервы по сомнительным долгам");
		ЗаписатьПолноеНаименование("КВР.94", "Недостачи и потери от порчи ценностей");
		
		ЗаписатьПолноеНаименование("НПР.58.1", "Паи");
		ЗаписатьПолноеНаименование("НПР.63", "Резервы по сомнительным долгам");
		ЗаписатьПолноеНаименование("НПР.94", "Недостачи и потери от порчи ценностей");	
		                                         
		// Если в справочнике "Ставки НДС" нет, ставки 18%, то добавим ее
		СтавкаНДС18Существует = 0;
		
		СтавкиНДС = СоздатьОбъект("Справочник.СтавкиНДС");
		СтавкиНДС.ВыбратьЭлементы();
		Пока СтавкиНДС.ПолучитьЭлемент() = 1 Цикл
		    Если СтавкиНДС.Ставка = 18 Тогда
		        СтавкаНДС18Существует = 1;
				Прервать;
		    КонецЕсли;
		КонецЦикла;
		
		Если СтавкаНДС18Существует = 0 Тогда
			СтавкиНДС.Новый();
			СтавкиНДС.Ставка = 18;
			СтавкиНДС.Наименование = "18%";
			СтавкиНДС.Записать();
		КонецЕсли;
		                                    
		// Если в справочнике "Варианты расчета налогов" нет
		// вариантов со ставками 18%, то добавим их.
		Состояние("Обновление справочника  ""Варианты расчета налогов""");
		НайденВриант18ВСумме = 0;
		НайденВриант18Сверху = 0;
		
		ВариантыНалогов = СоздатьОбъект("Справочник.ВариантыРасчетаНалогов");
		ВариантыНалогов.ВыбратьЭлементы();
		Пока ВариантыНалогов.ПолучитьЭлемент() = 1 Цикл
		    Если ВариантыНалогов.СтавкаНДС.Ставка = 18 Тогда
				Если ВариантыНалогов.СтавкаНП.Ставка = 0 Тогда
				    Если ВариантыНалогов.СуммаВключаетНДС = 1 Тогда
				        НайденВриант18ВСумме = 1;
					Иначе
						НайденВриант18Сверху = 1;
				    КонецЕсли;
				КонецЕсли;
		    КонецЕсли;
		КонецЦикла;
		
		Если НайденВриант18ВСумме = 0 Тогда // не найден вариант 18% в сумме
			ВариантыНалогов.Новый();
			ВариантыНалогов.СуммаВключаетНДС = 1;
			ВариантыНалогов.СуммаВключаетНП = 0;
			ВариантыНалогов.СтавкаНДС = СтавкиНДС.ТекущийЭлемент();
			ВариантыНалогов.СтавкаНП = глБезНалога("НП");
			ВариантыНалогов.Наименование = НаименованиеВариантаРасчетаНалогов(ВариантыНалогов);
			ВариантыНалогов.Записать();
		КонецЕсли;
		
		Если НайденВриант18Сверху = 0 Тогда // не найден вариант 18% сверху
			ВариантыНалогов.Новый();
			ВариантыНалогов.СуммаВключаетНДС = 0;
			ВариантыНалогов.СуммаВключаетНП = 0;
			ВариантыНалогов.СтавкаНДС = СтавкиНДС.ТекущийЭлемент();
			ВариантыНалогов.СтавкаНП = глБезНалога("НП");
			ВариантыНалогов.Наименование = НаименованиеВариантаРасчетаНалогов(ВариантыНалогов);
			ВариантыНалогов.Записать();
		КонецЕсли;
		
		Состояние("Обработка документов");
		// Замена кодов счетов и типов аналитики в формах документов.
		Если ОбработкаСчетовВДокументахВыполнена = 0 Тогда
		    ОбработкаСчетовВДокументах();
		КонецЕсли;
		
		Состояние("Обновление документов ""Корректировка задолженности""");
		Док = СоздатьОбъект("Документ.Взаимозачет");
		Док.ВыбратьДокументы();
		Пока Док.ПолучитьДокумент() = 1 Цикл
			
			Записать = 0;
			Док.ВыбратьСтроки();
			Пока Док.ПолучитьСтроку() = 1 Цикл
				Если ТипРеквизитаСоответствует(Док.ВидРасчетов, "Перечисление", "ВидыРасчетовСПокупателями") = 1  Тогда
				    Док.НазначитьТип("ВидРасчетов", "");
					Док.ВидРасчетов = "";
					Записать = 1;
				КонецЕсли;
			КонецЦикла;
			
			Если Записать = 1 Тогда
				Док.Записать();    
			КонецЕсли;
			
		КонецЦикла;
		
		Состояние("Обновление документов ""Счет""");
		Счет = СоздатьОбъект("Документ.Счет");
		Счет.ВыбратьДокументы();
		Пока Счет.ПолучитьДокумент() = 1 Цикл
		    Если (Счет.ВариантОтправки = 1) 
			 или (Счет.Контрагент = Счет.Плательщик) Тогда // грузополучатель и плательщик одно и то же лицо
		        Счет.Плательщик = "";
				
			Иначе  // грузополучатель и плательщик разные лица
				Грузополучатель = Счет.Контрагент;
				Счет.Контрагент = Счет.Плательщик;
				Счет.Плательщик = Грузополучатель;
				Счет.Договор = "";
			КонецЕсли;
			Счет.Записать();
		КонецЦикла;
		
		Состояние("Обновление документов ""Счет-фактура""");
		СчетФактура = СоздатьОбъект("Документ.СчетФактура");
		СчетФактура.ВыбратьДокументы();
		Пока СчетФактура.ПолучитьДокумент() = 1 Цикл
		    Если СчетФактура.ДокументОснование.Выбран() = 1 Тогда
				Если Метаданные.Документ(СчетФактура.ДокументОснование.Вид()).РеквизитШапки("ТипЦен").Выбран() = 1 Тогда
					СчетФактура.ТипЦен = СчетФактура.ДокументОснование.ТипЦен;
				КонецЕсли;
			Иначе
				Если Константа.ОсновнойСклад.Выбран() = 1 Тогда
					СчетФактура.ТипЦен = Константа.ОсновнойСклад.ТипЦен;
				КонецЕсли;
			КонецЕсли;
			СчетФактура.Записать();
		КонецЦикла;
		
		Таб.ВывестиСекцию(Строка(Номер)); 
		
	ИначеЕсли Номер = 770456 Тогда
		
		Таб.ВывестиСекцию(Строка(Номер));
		
	ИначеЕсли Номер = 770457 Тогда
		
		Состояние("Корректировка плана счетов");
		Сч = СоздатьОбъект("Счет." + ВыбранныйПланСчетов().Идентификатор());
		
		ЗаписатьПолноеНаименование("60.6", "Расчеты с поставщиками и подрядчиками (в условных единицах)");
		ЗаписатьПолноеНаименование("60.7", "Расчеты по авансам выданным (в условных единицах)");
		ЗаписатьПолноеНаименование("62.6", "Расчеты с покупателями и заказчиками (в условных единицах)");
		ЗаписатьПолноеНаименование("62.7", "Расчеты по авансам полученным (в условных единицах)");
		ЗаписатьПолноеНаименование("62.8", "Расчеты с покупателями по товарам (работам, услугам) комитента (в условных единицах)");
		ЗаписатьПолноеНаименование("76.6", "Прочие расчеты с разными дебиторами и кредиторами (в условных единицах)");
		ЗаписатьПолноеНаименование("Н02.02",   "Поступление и выбытие товаров");
		ЗаписатьПолноеНаименование("Н02.02.1", "Товары на складах");
		ЗаписатьПолноеНаименование("Н02.02.2", "Товары в розничной торговле");
		
		// Если справочник "Виды договоров" - пуст, то создадим в нем
		// основной вид и всем договорам присвоим этот новый вид.
		Состояние("Обновление справочника ""Договоры""");
		ВидДоговоров = СоздатьОбъект("Справочник.ВидыДоговоров");
		Если ВидДоговоров.ВыбратьЭлементы() = 0 Тогда
			ВидДоговоров.Новый();
			ВидДоговоров.Наименование = "Основной вид договоров";
			ВидДоговоров.Записать();
			Константа.ОсновнойВидДоговоров = ВидДоговоров.ТекущийЭлемент();
			
			Договора = СоздатьОбъект("Справочник.Договоры");
			Договора.ВыбратьЭлементы(0);
			Пока Договора.ПолучитьЭлемент() = 1 Цикл
				Если Договора.ЭтоГруппа() = 1 Тогда
				    Продолжить;
				КонецЕсли;
			    Договора.ВидДоговора = ВидДоговоров.ТекущийЭлемент();
				Договора.Записать();
			КонецЦикла;
		КонецЕсли;
		
		СписокСчетов = СоздатьОбъект("СписокЗначений");
		Основной = СоздатьОбъект("СписокЗначений");
		
		СписокНовыхСчетов = СоздатьОбъект("СписокЗначений");
		СписокНовыхСчетов.ДобавитьЗначение("60.6");
		СписокНовыхСчетов.ДобавитьЗначение("60.7");
		СписокНовыхСчетов.ДобавитьЗначение("62.6");
		СписокНовыхСчетов.ДобавитьЗначение("62.7");
		СписокНовыхСчетов.ДобавитьЗначение("62.8");
		СписокНовыхСчетов.ДобавитьЗначение("76.6");
		
		ИсторияСпискаСчетов = СоздатьОбъект("Периодический");
		ИсторияСпискаСчетов.ИспользоватьОбъект("СчетаПереоцениваемыеВОсобомПорядке");
		ИсторияСпискаСчетов.ВыбратьЗначения();
		Пока ИсторияСпискаСчетов.ПолучитьЗначение() = 1 Цикл
		    СписокСчетов.ИзСтрокиСРазделителями(ИсторияСпискаСчетов.Значение);
			
			Основной.УдалитьВсе();
			Для НомерЗначения = 1 по СписокСчетов.РазмерСписка() Цикл
				Если Сч.НайтиПоКоду(СписокСчетов.ПолучитьЗначение(НомерЗначения)) = 1 Тогда
				    Основной.ДобавитьЗначение(Сч.ТекущийСчет());
				КонецЕсли;
			КонецЦикла;
			
			Для НомерЗначения = 1 по СписокНовыхСчетов.РазмерСписка() Цикл
				КодНовогоСчета = СписокНовыхСчетов.ПолучитьЗначение(НомерЗначения);
				Если Сч.НайтиПоКоду(КодНовогоСчета) = 1 Тогда
					Если Основной.НайтиЗначение(Сч.ТекущийСчет()) = 0 Тогда
					    Основной.ДобавитьЗначение(Сч.ТекущийСчет());
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			
			Основной.Сортировать();
			
			ИсторияСпискаСчетов.Значение = Основной.ВСтрокуСРазделителями();
			ИсторияСпискаСчетов.Записать();
		КонецЦикла;
		
		Константа.ВестиУчетРасчетовУЕ = Перечисление.Булево.Да;
		Константа.ОтражатьСуммовуюРазницуПриЗачетеАванса = Перечисление.Булево.Нет;
		
		// В предыдущих релизах закрытие счетов 44.1.1, 44.1.2
		// и 44.1.3 управлялось одним флагом.
		// Теперь в документе "Закрытие месяца" разделено закрытие
		// этих счетов (для каждого счета используется свой флаг).
		// Поэтому необходимо чтобы в каждом из введенных документов "Закрытие
		// месяца" состояние этих флажков было одинаково.
		Состояние("Обновление документов ""Закрытие месяца""");
		ЗакрытиеМесяца = СоздатьОбъект("Документ.ЗакрытиеМесяца");
		ЗакрытиеМесяца.ВыбратьДокументы();
		Пока ЗакрытиеМесяца.ПолучитьДокумент() = 1 Цикл
			Если ЗакрытиеМесяца.Счет44_1 = 1 Тогда
			    ЗакрытиеМесяца.Счет44_1_2 = 1;
				ЗакрытиеМесяца.Счет44_1_3 = 1;
				ЗакрытиеМесяца.Записать();
			КонецЕсли;
		КонецЦикла;
		
		// Замена кодов счетов и типов аналитики в формах документов.
		Состояние("Обновление документов");
		Если ОбработкаСчетовВДокументахВыполнена = 0 Тогда
		    ОбработкаСчетовВДокументах();
		КонецЕсли;
		
		СчН02_02   = СчетПоКоду("Н02.02");
		СчН02_02_1 = СчетПоКоду("Н02.02.1");
		
		Состояние("Обновление операций");
		Опер = СоздатьОбъект("Операция");
		Опер1 = СоздатьОбъект("Операция");
		Опер.ВыбратьОперации(,);
		Фильтр = "Н02.02,*;*,Н02.02";
		Опер.ВыбратьОперацииСПроводками(,, Фильтр);
		Пока Опер.ПолучитьОперацию() = 1 Цикл
			ОперацияИзменена = 0;
			Опер1.НайтиОперацию(Опер.Документ);
			Опер1.ВыбратьПроводки();
			Пока Опер1.ПолучитьПроводку() = 1 Цикл
				СчетДт = Опер1.Дебет.Счет;
				СчетКт = Опер1.Кредит.Счет;
				
				Если Опер1.Дебет.Счет = СчН02_02 Тогда
					Опер1.Дебет.Счет = СчН02_02_1;
					ОперацияИзменена = 1;
				КонецЕсли;
				
				Если Опер1.Кредит.Счет = СчН02_02 Тогда
				    Опер1.Кредит.Счет = СчН02_02_1;
					ОперацияИзменена = 1;
				КонецЕсли;
			КонецЦикла;
			Если ОперацияИзменена = 1 Тогда
			    Опер1.Записать();
			КонецЕсли;
		КонецЦикла;
		
		Константа.РаздельныйУчетТоваровОптРозница.Установить('01.01.1980', Нет);
		ИнформацияОРаздельномУчетеВыведена = 1;
		
		Таб.ВывестиСекцию(Строка(Номер));
		
	ИначеЕсли Номер = 770458 Тогда
		
		Сч = СоздатьОбъект("Счет." + ВыбранныйПланСчетов().Идентификатор());
		ЗаписатьПолноеНаименование("ВР.6", "Выполнение работ (в условных единицах)");
		
		СписокСчетов = СоздатьОбъект("СписокЗначений");
		Основной = СоздатьОбъект("СписокЗначений");
		СписокНовыхСчетов = СоздатьОбъект("СписокЗначений");
		СписокНовыхСчетов.ДобавитьЗначение("ВР.6");
		
		ИсторияСпискаСчетов = СоздатьОбъект("Периодический");
		ИсторияСпискаСчетов.ИспользоватьОбъект("СчетаПереоцениваемыеВОсобомПорядке");
		ИсторияСпискаСчетов.ВыбратьЗначения();
		Пока ИсторияСпискаСчетов.ПолучитьЗначение() = 1 Цикл
		    СписокСчетов.ИзСтрокиСРазделителями(ИсторияСпискаСчетов.Значение);
			
			Основной.УдалитьВсе();
			Для НомерЗначения = 1 по СписокСчетов.РазмерСписка() Цикл
				Если Сч.НайтиПоКоду(СписокСчетов.ПолучитьЗначение(НомерЗначения)) = 1 Тогда
				    Основной.ДобавитьЗначение(Сч.ТекущийСчет());
				КонецЕсли;
			КонецЦикла;
			
			Для НомерЗначения = 1 по СписокНовыхСчетов.РазмерСписка() Цикл
				КодНовогоСчета = СписокНовыхСчетов.ПолучитьЗначение(НомерЗначения);
				Если Сч.НайтиПоКоду(КодНовогоСчета) = 1 Тогда
					Если Основной.НайтиЗначение(Сч.ТекущийСчет()) = 0 Тогда
					    Основной.ДобавитьЗначение(Сч.ТекущийСчет());
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			
			Основной.Сортировать();
			
			ИсторияСпискаСчетов.Значение = Основной.ВСтрокуСРазделителями();
			ИсторияСпискаСчетов.Записать();
		КонецЦикла;
		
		Таб.ВывестиСекцию(Строка(Номер));
		
		Если ИнформацияОРаздельномУчетеВыведена = 0 Тогда
		    Таб.ВывестиСекцию("ОбособленныйУчетРозницы");
		КонецЕсли;
		
	ИначеЕсли Номер = 770459 Тогда
		
		Константа.ИспользоватьТипыЦен = Да;
		
		Состояние("Перенос закупочных цен в справочник цены");
		Ном = СоздатьОбъект("Справочник.Номенклатура");
		ТипыЦен = СоздатьОбъект("Справочник.ТипыЦен");
		Цены = СоздатьОбъект("Справочник.Цены");
		
		ТипыЦен.Новый();
		ТипыЦен.Наименование = "Основная цена приобретения";
		ТипыЦен.Валюта = "";
		ТипыЦен.ЦенаВклНДС = 0;  
		ТипыЦен.ЦенаВклНП = 0;
		ТипыЦен.Записать();
		Константа.ОсновнаяЦенаПриобретения = ТипыЦен.ТекущийЭлемент();
		
		
		Ном.ВыбратьЭлементы(0);
		Пока Ном.ПолучитьЭлемент() =1 Цикл
			
		    Если Ном.ЭтоГруппа() = 1 Тогда
		        Продолжить;
			КонецЕсли;
			Если Ном.ТипНоменклатуры <> Перечисление.ТипыНоменклатуры.Товар Тогда
		        Продолжить;
			КонецЕсли;
			
			Если Ном.ПометкаУдаления() = 1 Тогда
		        Продолжить;
			КонецЕсли;
			
			Цены.ИспользоватьВладельца(Ном);
						
			//Цена покупки
			Если Цены.НайтиПоРеквизиту("ТипЦен",ТипыЦен,0) = 1 Тогда
			    Цены.Цена.Установить('01.01.1980', Ном.Себестоимость);                         
			Иначе	
			    Цены.Новый();
				Цены.ТипЦен = ТипыЦен.ТекущийЭлемент();
				Цены.Валюта = "";
				Цены.Владелец = Ном.ТекущийЭлемент();
				Цены.Записать();
				Цены.Цена.Установить('01.01.1980',Ном.Себестоимость);
			КонецЕсли;
		КонецЦикла;
		
		Таб.ВывестиСекцию(Строка(Номер));
		
	ИначеЕсли Номер = 770460 Тогда
		
		Состояние("Установка значений констант");
		Константа.СтавкаРефинансирования.Установить('15.06.2004', 13);
		
	ИначеЕсли Номер = 770461 Тогда
		
		Состояние("Установка значений констант");
		Константа.СпособНалоговогоУчетаГПиПФ.Установить('01.01.1980', Перечисление.СпособыНалоговогоУчетаГПиПФ.ПоНулевойСтоимости);
		
		//Отключение устаревших внешних форм
		Файл = ФС.НайтиПервыйФайл(глКаталогПечФорм+"sf2004.efd");
		Если ПустаяСтрока(Файл)=0 Тогда
			Попытка 
				ФС.ПереименоватьФайл(глКаталогПечФорм+"sf2004.efd",глКаталогПечФорм+"sf2004.ef_",0);
				Сообщить("Файл внешней печатной формы счета-фактуры (sf2004) больше не используется."); 
				Сообщить("Для удаления из списка печатных форм, файл sf2004.efd переименован в sf2004.ef_."); 
				Сообщить("Если вы хотите продолжать использование внешней печатной формы, переименуйте файл sf2004.ef_ в sf2004.efd.");
			Исключение
				Сообщить("Файл внешней печатной формы счета-фактуры (sf2004) больше не используется."); 
				Сообщить("Автоматически отключить внешнюю печатную форму не удалось, для отключения формы вручную удалите файл sf2004.efd.");
			КонецПопытки;
		КонецЕсли;
		
		КаталогОбработок = КаталогИБ()+"ExtForms\";
		
		Файл = ФС.НайтиПервыйФайл(КаталогОбработок+"purchase.efd");
		Если ПустаяСтрока(Файл)=0 Тогда
			Попытка 
				ФС.ПереименоватьФайл(КаталогОбработок+"purchase.efd",КаталогОбработок+"purchase.ef_",0);
				Сообщить("Внешний отчет ""Книга покупок (18%)"" включен в состав конфигурации."); 
				Сообщить("Для удаления из списка дополнительных возможностей, файл purchase.efd переименован в purchase.ef_."); 
				Сообщить("Если вы хотите продолжать использование внешненго отчета, переименуйте файл purchase.ef_ в purchase.efd.");
			Исключение
				Сообщить("Внешний отчет ""Книга покупок (18%)"" включен в состав конфигурации."); 
				Сообщить("Автоматически отключить внешний отчет не удалось, для отключения отчета вручную удалите файл purchase.efd.");
			КонецПопытки;
		КонецЕсли;
		
		Файл = ФС.НайтиПервыйФайл(КаталогОбработок+"sale.efd");
		Если ПустаяСтрока(Файл)=0 Тогда
			Попытка 
				ФС.ПереименоватьФайл(КаталогОбработок+"sale.efd",КаталогОбработок+"sale.ef_",0);
				Сообщить("Внешний отчет ""Книга продаж (18%)"" включен в состав конфигурации."); 
				Сообщить("Для удаления из списка дополнительных возможностей, файл sale.efd переименован в sale.ef_."); 
				Сообщить("Если вы хотите продолжать использование внешненго отчета, переименуйте файл sale.ef_ в sale.efd.");
			Исключение
				Сообщить("Внешний отчет ""Книга покупок (18%)"" включен в состав конфигурации."); 
				Сообщить("Автоматически отключить внешний отчет не удалось, для отключения отчета вручную удалите файл sale.efd.");
			КонецПопытки;
		КонецЕсли;
		
		Состояние("Обработка индивидуальных карточек");
		Год = 2004;
		СпрИтоговПоГоду = СоздатьОбъект("Справочник.КарточкиУчетаДоходов");
		Сотрудники = СоздатьОбъект("Справочник.Сотрудники");
		Сотрудники.ВыбратьЭлементы();
		Пока Сотрудники.ПолучитьЭлемент() = 1 Цикл
		    Если Сотрудники.Этогруппа() = 1 Тогда
		        Продолжить;
			КонецЕсли;
			
			Сотрудник = Сотрудники.ТекущийЭлемент();
			ДоходыВычетыНалогиСотрудников = "";
			глСобратьДанныеДляЕСН(ДоходыВычетыНалогиСотрудников, Сотрудник, '31.12.2004',,, 2);
			
			СпрИтоговПоГоду.ИспользоватьВладельца(Сотрудник);
			Если СпрИтоговПоГоду.НайтиПоКоду(Строка(Год)) = 1 Тогда
				СписокСохранения = ЗначениеИзСтроки(СпрИтоговПоГоду.СписокПолейИндивидульнойКарточки);
				Если ПустоеЗначение(СписокСохранения) = 1 Тогда
					Продолжить;
				КонецЕсли;
				
				КодСотраВтаблице=глПолучитьУникальныйКодСотрудника(Сотрудник.Код);
				НомСтрокиСотрудника = 0;
				Если ДоходыВычетыНалогиСотрудников.НайтиЗначение(КодСотраВтаблице+"01", НомСтрокиСотрудника, 1) = 0 Тогда
					Продолжить;
					
				Иначе
					НомСтрокиСотрудника = НомСтрокиСотрудника - 1;
				КонецЕсли;
			
				НачисленоВсего = 0;		
				НачисленоЗаСчетПрибыли = 0;
				ПрочихЛьготПоСт238 = 0;
				ДоговораПодряда = 0;
				ДенежноеСодержаниеПрокуроров = 0;
				УдержаноПФРнаСтраховуюПенсию = 0;
				УдержаноПФРнаНакопительнуюПенсию = 0;
				НачисленоИнвалиду = 0;
				ПФРУд = 0;
				ФССУд = 0;
				ФФОМСУд = 0;
				ТФОМСУд = 0;
				ПособийЗаСчетФСС = 0;
				ДовольствиеВоенных = 0;
				ОблагаетсяПФР = 0;
				
				Для Сч = 1 По 12 Цикл
					МесяцОсмотра = Сч;
					МесяцСтрокой = глДополнитьСтроку(МесяцОсмотра,2);
					
					НачисленоВсего = НачисленоВсего + СписокСохранения.Получить("П"+МесяцСтрокой+"02");		
					ОблагаетсяПФР = ОблагаетсяПФР + СписокСохранения.Получить("П"+МесяцСтрокой+"21");		
					НачисленоЗаСчетПрибыли = НачисленоЗаСчетПрибыли + СписокСохранения.Получить("П"+МесяцСтрокой+"03");
					ПрочихЛьготПоСт238 = ПрочихЛьготПоСт238 + СписокСохранения.Получить("П"+МесяцСтрокой+"04")-СписокСохранения.Получить("П"+МесяцСтрокой+"14");
					ДоговораПодряда = ДоговораПодряда + СписокСохранения.Получить("П"+МесяцСтрокой+"05");
					
					НачисленоИнвалиду = НачисленоИнвалиду + СписокСохранения.Получить("П"+МесяцСтрокой+"08");
					ДовольствиеВоенных = ДовольствиеВоенных + СписокСохранения.Получить("П"+МесяцСтрокой+"09");
					ДенежноеСодержаниеПрокуроров = ДенежноеСодержаниеПрокуроров + СписокСохранения.Получить("П"+МесяцСтрокой+"10");
					
					ПособийЗаСчетФСС = ПособийЗаСчетФСС + СписокСохранения.Получить("П"+МесяцСтрокой+"14");
					
					ПФРУд = ПФРУд + СписокСохранения.Получить("П"+МесяцСтрокой+"15");
					ФФОМСУд = ФФОМСУд + СписокСохранения.Получить("П"+МесяцСтрокой+"16");
					ТФОМСУд = ТФОМСУд + СписокСохранения.Получить("П"+МесяцСтрокой+"17");
					ФССУд = ФССУд + СписокСохранения.Получить("П"+МесяцСтрокой+"18");
					
					УдержаноПФРнаСтраховуюПенсию = УдержаноПФРнаСтраховуюПенсию + СписокСохранения.Получить("П"+МесяцСтрокой+"19");
					УдержаноПФРнаНакопительнуюПенсию = УдержаноПФРнаНакопительнуюПенсию + СписокСохранения.Получить("П"+МесяцСтрокой+"20");
					
					ДоходыВычетыНалогиСотрудников.УстановитьЗначение(НомСтрокиСотрудника + Сч, 10, НачисленоВсего);
					ДоходыВычетыНалогиСотрудников.УстановитьЗначение(НомСтрокиСотрудника + Сч, 13, НачисленоЗаСчетПрибыли);
					ДоходыВычетыНалогиСотрудников.УстановитьЗначение(НомСтрокиСотрудника + Сч, 17, ПрочихЛьготПоСт238);
					ДоходыВычетыНалогиСотрудников.УстановитьЗначение(НомСтрокиСотрудника + Сч, 18, ДоговораПодряда);
					ДоходыВычетыНалогиСотрудников.УстановитьЗначение(НомСтрокиСотрудника + Сч, 19, ДенежноеСодержаниеПрокуроров);
					ДоходыВычетыНалогиСотрудников.УстановитьЗначение(НомСтрокиСотрудника + Сч, 21, УдержаноПФРнаСтраховуюПенсию);
					ДоходыВычетыНалогиСотрудников.УстановитьЗначение(НомСтрокиСотрудника + Сч, 22, УдержаноПФРнаНакопительнуюПенсию);
					ДоходыВычетыНалогиСотрудников.УстановитьЗначение(НомСтрокиСотрудника + Сч, 42, УдержаноПФРнаСтраховуюПенсию);
					ДоходыВычетыНалогиСотрудников.УстановитьЗначение(НомСтрокиСотрудника + Сч, 43, УдержаноПФРнаНакопительнуюПенсию);
					ДоходыВычетыНалогиСотрудников.УстановитьЗначение(НомСтрокиСотрудника + Сч, 20, НачисленоИнвалиду);
					ДоходыВычетыНалогиСотрудников.УстановитьЗначение(НомСтрокиСотрудника + Сч,  5, ПФРУд);
					ДоходыВычетыНалогиСотрудников.УстановитьЗначение(НомСтрокиСотрудника + Сч,  8, ФССУд);
					ДоходыВычетыНалогиСотрудников.УстановитьЗначение(НомСтрокиСотрудника + Сч,  6, ФФОМСУд);
					ДоходыВычетыНалогиСотрудников.УстановитьЗначение(НомСтрокиСотрудника + Сч,  7, ТФОМСУд);
					ДоходыВычетыНалогиСотрудников.УстановитьЗначение(НомСтрокиСотрудника + Сч,  9, ПособийЗаСчетФСС);
					ДоходыВычетыНалогиСотрудников.УстановитьЗначение(НомСтрокиСотрудника + Сч, 11, ДовольствиеВоенных);
					ДоходыВычетыНалогиСотрудников.УстановитьЗначение(НомСтрокиСотрудника + Сч, 23, ОблагаетсяПФР);
					ДоходыВычетыНалогиСотрудников.УстановитьЗначение(НомСтрокиСотрудника + Сч, 31, ПособийЗаСчетФСС);
					ДоходыВычетыНалогиСотрудников.УстановитьЗначение(НомСтрокиСотрудника + Сч, 30, ПрочихЛьготПоСт238);
				КонецЦикла; 
				
				// Таблицу в список
				Карточка = СоздатьОбъект("СписокЗначений");
				Для НомСтроки = 1 по 12 Цикл
					СтрокаКарточки = СоздатьОбъект("СписокЗначений");
					Для НомКолонки = 1 по ДоходыВычетыНалогиСотрудников.КоличествоКолонок() Цикл
						КодКолонки = ДоходыВычетыНалогиСотрудников.ПолучитьПараметрыКолонки(НомКолонки);
						СтрокаКарточки.ДобавитьЗначение(ДоходыВычетыНалогиСотрудников.ПолучитьЗначение(НомСтроки, НомКолонки), КодКолонки);
					КонецЦикла;
					Карточка.ДобавитьЗначение(СтрокаКарточки);
				КонецЦикла;
				
				СтрокаДанных = ЗначениеВСтроку(Карточка);
				СпрИтоговПоГоду.СписокПолейИндивидульнойКарточки = СтрокаДанных;
				СпрИтоговПоГоду.Записать();
			КонецЕсли
		КонецЦикла;
				
		Таб.ВывестиСекцию(Строка(Номер));
		
	ИначеЕсли Номер = 770464 Тогда
		
		Состояние("Установка значений констант");
		Константа.НаименованиеПлательщикаПриПеречисленииНалогов = Константа.НазваниеОрганизации;
		
		Таб.ВывестиСекцию(Строка(Номер));
		
	ИначеЕсли Номер = 770465 Тогда
		
		Состояние("Обработка приказов о приеме на работу");
		Объект = СоздатьОбъект("Документ.ПриказОПриемеНаРаботу");
		Объект.ВыбратьДокументы();
		Пока Объект.ПолучитьДокумент() = 1 Цикл
		    Если (ПустоеЗначение(Объект.ВидДокумента) = 0) и 
				 (ПустоеЗначение(Объект.ДокументСерия) = 1) и
				 (ПустоеЗначение(Объект.ДокументНомер) = 1) и 
				 (ПустоеЗначение(Объект.ДокументДатаВыдачи) = 1) и 
				 (ПустоеЗначение(Объект.ДокументКемВыдан) = 1) Тогда
				 	
				Объект.ВидДокумента = "";
				Объект.Записать();
		        
		    КонецЕсли;
		КонецЦикла;
		
		Состояние("Обработка справочника ""Сотрудники""");
		Объект = СоздатьОбъект("Справочник.Сотрудники");
		Объект.ВыбратьЭлементы();
		Пока Объект.ПолучитьЭлемент() = 1 Цикл
			Если Объект.ЭтоГруппа() = 1 Тогда
		        Продолжить;
			КонецЕсли;
			
			РазмерВычетаНаРебенка = Объект.РазмерВычетаНаРебенка.Получить('01.01.2005');
			Если РазмерВычетаНаРебенка = 300 Тогда
				Объект.РазмерВычетаНаРебенка.Установить('01.01.2005', 600);
				
			ИначеЕсли РазмерВычетаНаРебенка = 600 Тогда
			    Объект.РазмерВычетаНаРебенка.Установить('01.01.2005', 1200);
			КонецЕсли;
				
		    Если (ПустоеЗначение(Объект.ВидДокумента) = 0) и 
				 (ПустоеЗначение(Объект.ДокументСерия) = 1) и
				 (ПустоеЗначение(Объект.ДокументНомер) = 1) и 
				 (ПустоеЗначение(Объект.ДокументДатаВыдачи) = 1) и 
				 (ПустоеЗначение(Объект.ДокументКемВыдан) = 1) Тогда
				 	
				Объект.ВидДокумента = "";
				Объект.Записать();
		        
		    КонецЕсли;
		КонецЦикла;
		
		Константа.НаименованиеПлательщикаПриПеречисленииНалогов = Константа.НазваниеОрганизации;
		
		СпрВидыВычетов  = СоздатьОбъект("Справочник.ВидыВычетов");
		СпрВидыДоходов	= СоздатьОбъект("Справочник.ВидыДоходов");
		УстановитьВидВычета("311","В сумме, израсходованной на новое строительство, пп.2 п.1 ст.220 НК");
		УстановитьВидВычета("312","Сумма расходов по погашению процентов по ипотечным кредитам, пп.2 п.1 ст.220 НК");
		УстановитьВидВычета("506","Вычет из суммы материальной помощи, оказываемой инвалидам общественными организациями инвалидов");
		УстановитьВидДохода("2790","Суммы материальной помощи, оказываемой инвалидам общественными организациями инвалидов, п.28 ст.217","506");
		
		Состояние("Изменение ставок ЕСН и взносов на ОПС");
		Шкала = СоздатьОбъект("Справочник.СтавкиНалогов");
		ЕСН = глПолучитьНалог("ЕСН_ФБ");
		ФСС = глПолучитьНалог("ФСС");
		ФФОМС = глПолучитьНалог("ФФОМС");
		ТФОМС = глПолучитьНалог("ТФОМС");
		ПФР_страх = глПолучитьНалог("ПФР_страх");
		ПФР_нак = глПолучитьНалог("ПФР_нак");
		
		// 2005
		УстановитьСтавкуЕСН(ЕСН, "", Шкала, 1,	280000,			20.0,	'01.01.2005');
		УстановитьСтавкуЕСН(ЕСН, "", Шкала, 2,	600000,			7.9,	'01.01.2005');
		УстановитьСтавкуЕСН(ЕСН, "", Шкала, 3,	999999999999.99, 2.0,	'01.01.2005');
		УстановитьСтавкуЕСН(ЕСН, "", Шкала, 4,	999999999999.99, 2.0,	'01.01.2005');
		УстановитьСтавкуЕСН(ФСС, "", Шкала, 1,	280000,			 3.2,	'01.01.2005');
		УстановитьСтавкуЕСН(ФСС, "", Шкала, 2,	600000,			 1.1,	'01.01.2005');
		УстановитьСтавкуЕСН(ФСС, "", Шкала, 3,	999999999999.99, 0.0,	'01.01.2005');
		УстановитьСтавкуЕСН(ФСС, "", Шкала, 4,	999999999999.99, 0.0,	'01.01.2005');
		УстановитьСтавкуЕСН(ФФОМС, "", Шкала, 1,	280000,			 0.8,	'01.01.2005');
		УстановитьСтавкуЕСН(ФФОМС, "", Шкала, 2,	600000,			 0.5,	'01.01.2005');
		УстановитьСтавкуЕСН(ФФОМС, "", Шкала, 3,	999999999999.99, 0.0,	'01.01.2005');
		УстановитьСтавкуЕСН(ФФОМС, "", Шкала, 4,	999999999999.99, 0.0,	'01.01.2005');
		УстановитьСтавкуЕСН(ТФОМС, "", Шкала, 1,	280000,			 2.0,	'01.01.2005');
		УстановитьСтавкуЕСН(ТФОМС, "", Шкала, 2,	600000,			 0.5,	'01.01.2005');
		УстановитьСтавкуЕСН(ТФОМС, "", Шкала, 3,	999999999999.99, 0.0,	'01.01.2005');
		УстановитьСтавкуЕСН(ТФОМС, "", Шкала, 4,	999999999999.99, 0.0,	'01.01.2005');
		
		// 2005
		УстановитьСтавкуЕСН(ПФР_страх, "", Шкала, 1,	280000,			14.0,	'01.01.2005');
		УстановитьСтавкуЕСН(ПФР_страх, "", Шкала, 2,	600000,			 5.5,	'01.01.2005');
		УстановитьСтавкуЕСН(ПФР_страх, "", Шкала, 3,	999999999999.99, 0.0,	'01.01.2005');
		УстановитьСтавкуЕСН(ПФР_страх, "", Шкала, 4,	999999999999.99, 0.0,	'01.01.2005');
		
		УстановитьСтавкуЕСН(ПФР_страх, "2", Шкала, 1,	280000,			14.0,	'01.01.2005');
		УстановитьСтавкуЕСН(ПФР_страх, "2", Шкала, 2,	600000,			 5.5,	'01.01.2005');
		УстановитьСтавкуЕСН(ПФР_страх, "2", Шкала, 3,	999999999999.99, 0.0,	'01.01.2005');
		УстановитьСтавкуЕСН(ПФР_страх, "2", Шкала, 4,	999999999999.99, 0.0,	'01.01.2005');
		
		УстановитьСтавкуЕСН(ПФР_страх, "3", Шкала, 1,	280000,			10.0,	'01.01.2005');
		УстановитьСтавкуЕСН(ПФР_страх, "3", Шкала, 2,	600000,			 3.9,	'01.01.2005');
		УстановитьСтавкуЕСН(ПФР_страх, "3", Шкала, 3,	999999999999.99, 0.0,	'01.01.2005');
		УстановитьСтавкуЕСН(ПФР_страх, "3", Шкала, 4,	999999999999.99, 0.0,	'01.01.2005');
		
		УстановитьСтавкуЕСН(ПФР_нак, "", Шкала, 1,	280000,			 0.0,	'01.01.2005');
		УстановитьСтавкуЕСН(ПФР_нак, "", Шкала, 2,	600000,			 0.0,	'01.01.2005');
		УстановитьСтавкуЕСН(ПФР_нак, "", Шкала, 3,	999999999999.99, 0.0,	'01.01.2005');
		УстановитьСтавкуЕСН(ПФР_нак, "", Шкала, 4,	999999999999.99, 0.0,	'01.01.2005');
		
		УстановитьСтавкуЕСН(ПФР_нак, "2", Шкала, 1,	280000,			 0.0,	'01.01.2005');
		УстановитьСтавкуЕСН(ПФР_нак, "2", Шкала, 2,	600000,			 0.0,	'01.01.2005');
		УстановитьСтавкуЕСН(ПФР_нак, "2", Шкала, 3,	999999999999.99, 0.0,	'01.01.2005');
		УстановитьСтавкуЕСН(ПФР_нак, "2", Шкала, 4,	999999999999.99, 0.0,	'01.01.2005');
		
		УстановитьСтавкуЕСН(ПФР_нак, "3", Шкала, 1,	280000,			 4.0,	'01.01.2005');
		УстановитьСтавкуЕСН(ПФР_нак, "3", Шкала, 2,	600000,			 1.6,	'01.01.2005');
		УстановитьСтавкуЕСН(ПФР_нак, "3", Шкала, 3,	999999999999.99, 0.0,	'01.01.2005');
		УстановитьСтавкуЕСН(ПФР_нак, "3", Шкала, 4,	999999999999.99, 0.0,	'01.01.2005');
		
		// 2006
		УстановитьСтавкуЕСН(ПФР_страх, "3", Шкала, 1,	280000,			10.0,	'01.01.2006');
		УстановитьСтавкуЕСН(ПФР_страх, "3", Шкала, 2,	600000,			 3.9,	'01.01.2006');
		УстановитьСтавкуЕСН(ПФР_страх, "3", Шкала, 3,	999999999999.99, 0.0,	'01.01.2006');
		УстановитьСтавкуЕСН(ПФР_страх, "3", Шкала, 4,	999999999999.99, 0.0,	'01.01.2006');
		
		УстановитьСтавкуЕСН(ПФР_нак, "3", Шкала, 1,	280000,			 4.0,	'01.01.2006');
		УстановитьСтавкуЕСН(ПФР_нак, "3", Шкала, 2,	600000,			 1.6,	'01.01.2006');
		УстановитьСтавкуЕСН(ПФР_нак, "3", Шкала, 3,	999999999999.99, 0.0,	'01.01.2006');
		УстановитьСтавкуЕСН(ПФР_нак, "3", Шкала, 4,	999999999999.99, 0.0,	'01.01.2006');
		
		// 2008
		УстановитьСтавкуЕСН(ПФР_страх, "3", Шкала, 1,	280000,			 8.0,	'01.01.2008');
		УстановитьСтавкуЕСН(ПФР_страх, "3", Шкала, 2,	600000,			 3.1,	'01.01.2008');
		УстановитьСтавкуЕСН(ПФР_страх, "3", Шкала, 3,	999999999999.99, 0.0,	'01.01.2008');
		УстановитьСтавкуЕСН(ПФР_страх, "3", Шкала, 4,	999999999999.99, 0.0,	'01.01.2008');
		
		УстановитьСтавкуЕСН(ПФР_нак, "3", Шкала, 1,	280000,			 6.0,	'01.01.2008');
		УстановитьСтавкуЕСН(ПФР_нак, "3", Шкала, 2,	600000,			 2.4,	'01.01.2008');
		УстановитьСтавкуЕСН(ПФР_нак, "3", Шкала, 3,	999999999999.99, 0.0,	'01.01.2008');
		УстановитьСтавкуЕСН(ПФР_нак, "3", Шкала, 4,	999999999999.99, 0.0,	'01.01.2008');
		
		Состояние("Обработка индивидуальных карточек");
		СпрИтоговПоГоду = СоздатьОбъект("Справочник.КарточкиУчетаДоходов");
		Сотрудники = СоздатьОбъект("Справочник.Сотрудники");
		Сотрудники.ВыбратьЭлементы();
		Пока Сотрудники.ПолучитьЭлемент() = 1 Цикл
		    Если Сотрудники.ЭтоГруппа() = 1 Тогда
		        Продолжить;
			КонецЕсли;
			
			Для Год = 2004 по 2005 Цикл
				Сотрудник = Сотрудники.ТекущийЭлемент();
				НеВзиматьНаСтрахПФР = ПустоеЗначение(СтрЗаменить(Сотрудник.СтраховойНомерПФР, "-", ""));
				Инвалид = 0;
				
				Для Сч = 1 По 12 Цикл
					КонецМесяца = КонМесяца(Дата(Год, Сч, 1));
					Инвалид = Сотрудник.Инвалид.Получить(КонецМесяца);
					Если Инвалид = 1 Тогда
					    Прервать;
					КонецЕсли;
				КонецЦикла;
				
				Если (Инвалид = 0) и (НеВзиматьНаСтрахПФР = 0) Тогда
				    Продолжить;
				КонецЕсли;
					
				СпрИтоговПоГоду.ИспользоватьВладельца(Сотрудник);
				Если СпрИтоговПоГоду.НайтиПоКоду(Строка(Год)) = 0 Тогда
					Продолжить;
					
				Иначе
					СписокСохранения = ЗначениеИзСтроки(СпрИтоговПоГоду.СписокПолейИндивидульнойКарточки);
					Если ПустоеЗначение(СписокСохранения) = 1 Тогда
						Продолжить;
					КонецЕсли;
				КонецЕсли;
				
				ДоходыВычетыНалогиСотрудников = "";
				Если глСобратьДанныеДляЕСН(ДоходыВычетыНалогиСотрудников, Сотрудник, "31.12."+Год, "", 0, 1) <> 1 Тогда
					Продолжить;
				КонецЕсли;
				
				КодСотраВтаблице=глПолучитьУникальныйКодСотрудника(Сотрудник.Код);
				НомСтрокиСотрудника = 0;
				Если ДоходыВычетыНалогиСотрудников.НайтиЗначение(КодСотраВтаблице+"01", НомСтрокиСотрудника, 1) = 0 Тогда
					Продолжить;
					
				Иначе
					НомСтрокиСотрудника = НомСтрокиСотрудника - 1;
				КонецЕсли;
				
				НачисленоВсегоПредыдМесяца = 0;
				НачисленоЕНВДПредыдМесяца = 0;
				НачисленоЗаСчетПрибылиПредыдМесяца = 0;
				НачисленоИнвалидуПредыдМесяца = 0;
				ДоговораПодрядаПредыдМесяца = 0;
				ЛьготВсегоПредыдМесяца = 0;
				НачисленоИнвалидуФССПредыдМесяца = 0;
				НачисленоИнвалидуПредыдМесяца = 0;
				
				НачисленоИнвалиду = 0;
				НачисленоИнвалидуФСС = 0;
				
				Для Сч = 1 По 12 Цикл
					НачисленоВсего = ДоходыВычетыНалогиСотрудников.ПолучитьЗначение(НомСтрокиСотрудника + Сч,10);                          
					НачисленоЕНВД = ДоходыВычетыНалогиСотрудников.ПолучитьЗначение(НомСтрокиСотрудника + Сч,25);
					НачисленоЗаСчетПрибыли = ДоходыВычетыНалогиСотрудников.ПолучитьЗначение(НомСтрокиСотрудника + Сч,13);
					ДоговораПодряда = ДоходыВычетыНалогиСотрудников.ПолучитьЗначение(НомСтрокиСотрудника + Сч,18);
			
					ЛьготаПоЕСНп1ст236 = ДоходыВычетыНалогиСотрудников.ПолучитьЗначение(НомСтрокиСотрудника + Сч,12);
					ЛьготаПоЕСНп2ст238абз2 = Мин(ДоходыВычетыНалогиСотрудников.ПолучитьЗначение(НомСтрокиСотрудника + Сч,14),2000);
					ЛьготаПоЕСНп2ст238абз3 = Мин(ДоходыВычетыНалогиСотрудников.ПолучитьЗначение(НомСтрокиСотрудника + Сч,15),2000);
					ЛьготаПоЕСНпп13п1ст238 = Мин(ДоходыВычетыНалогиСотрудников.ПолучитьЗначение(НомСтрокиСотрудника + Сч,16),10000);
					ПрочихЛьготПоСт238 = ДоходыВычетыНалогиСотрудников.ПолучитьЗначение(НомСтрокиСотрудника + Сч,17);
					ПособийЗаСчетФСС = ДоходыВычетыНалогиСотрудников.ПолучитьЗначение(НомСтрокиСотрудника + Сч,9);
					ЛьготВсего = ПрочихЛьготПоСт238+ЛьготаПоЕСНп1ст236+ЛьготаПоЕСНпп13п1ст238+ЛьготаПоЕСНп2ст238абз3+ЛьготаПоЕСНп2ст238абз2+ПособийЗаСчетФСС;
					
					ЛьготаПоЕСНп1ст236ПФР = ДоходыВычетыНалогиСотрудников.ПолучитьЗначение(НомСтрокиСотрудника + Сч,26);
					ЛьготаПоЕСНп2ст238абз2ПФР = Мин(ДоходыВычетыНалогиСотрудников.ПолучитьЗначение(НомСтрокиСотрудника + Сч,27),2000);
					ЛьготаПоЕСНп2ст238абз3ПФР = Мин(ДоходыВычетыНалогиСотрудников.ПолучитьЗначение(НомСтрокиСотрудника + Сч,28),2000);
					ЛьготаПоЕСНпп13п1ст238ПФР = Мин(ДоходыВычетыНалогиСотрудников.ПолучитьЗначение(НомСтрокиСотрудника + Сч,29),10000);
					ПрочихЛьготПоСт238ПФР = ДоходыВычетыНалогиСотрудников.ПолучитьЗначение(НомСтрокиСотрудника + Сч,30);
					ПособийЗаСчетФССПФР = ДоходыВычетыНалогиСотрудников.ПолучитьЗначение(НомСтрокиСотрудника + Сч,31);
					ЛьготВсегоПФР = ПрочихЛьготПоСт238ПФР+ЛьготаПоЕСНп1ст236ПФР+ЛьготаПоЕСНпп13п1ст238ПФР+ЛьготаПоЕСНп2ст238абз3ПФР+ЛьготаПоЕСНп2ст238абз2ПФР+ПособийЗаСчетФССПФР;
	
					КонецМесяца = КонМесяца(Дата(Год, Сч, 1));
					Инвалид = Сотрудник.Инвалид.Получить(КонецМесяца);
					Если Инвалид = 1 Тогда
					    НачисленоИнвалидуФСС = Мин(НачисленоИнвалидуФССПредыдМесяца
												 +(НачисленоВсего-ЛьготВсего-НачисленоЗаСчетПрибыли-НачисленоЕНВД-ДоговораПодряда)
												 -(НачисленоВсегоПредыдМесяца-ЛьготВсегоПредыдМесяца-НачисленоЗаСчетПрибылиПредыдМесяца-НачисленоЕНВДПредыдМесяца-ДоговораПодрядаПредыдМесяца)
												 , 100000);
						
						НачисленоИнвалиду    = Мин(НачисленоИнвалидуПредыдМесяца
												 +(НачисленоВсего-ЛьготВсего-НачисленоЗаСчетПрибыли-НачисленоЕНВД)
												 -(НачисленоВсегоПредыдМесяца-ЛьготВсегоПредыдМесяца-НачисленоЗаСчетПрибылиПредыдМесяца-НачисленоЕНВДПредыдМесяца)
												 , 100000);
					КонецЕсли;
					
					ДоходыВычетыНалогиСотрудников.УстановитьЗначение(НомСтрокиСотрудника + Сч, 20, НачисленоИнвалиду);
					ДоходыВычетыНалогиСотрудников.УстановитьЗначение(НомСтрокиСотрудника + Сч, "ЛьготаИнвалидуФдБ", НачисленоИнвалиду);
					ДоходыВычетыНалогиСотрудников.УстановитьЗначение(НомСтрокиСотрудника + Сч, "ЛьготаИнвалидуФСС", НачисленоИнвалидуФСС);
					ДоходыВычетыНалогиСотрудников.УстановитьЗначение(НомСтрокиСотрудника + Сч, "ЛьготаИнвалидуОМС", НачисленоИнвалиду);
					
					Если (НеВзиматьНаСтрахПФР = 1) и (Год = 2004) Тогда
						ДоходыВычетыНалогиСотрудников.УстановитьЗначение(НомСтрокиСотрудника + Сч, 33, НачисленоВсего-НачисленоЕНВД-НачисленоЗаСчетПрибыли-ЛьготВсего);
						ДоходыВычетыНалогиСотрудников.УстановитьЗначение(НомСтрокиСотрудника + Сч, 41, НачисленоВсего-НачисленоЗаСчетПрибыли-ЛьготВсегоПФР);
					КонецЕсли;
					
					НачисленоВсегоПредыдМесяца = НачисленоВсего;
					НачисленоЕНВДПредыдМесяца = НачисленоЕНВД;
					НачисленоЗаСчетПрибылиПредыдМесяца = НачисленоЗаСчетПрибыли;
					НачисленоИнвалидуПредыдМесяца = НачисленоИнвалиду;
					ДоговораПодрядаПредыдМесяца = ДоговораПодряда;
					ЛьготВсегоПредыдМесяца = ЛьготВсего;
					НачисленоИнвалидуФССПредыдМесяца = НачисленоИнвалидуФСС;
				КонецЦикла;
		
				Карточка = СоздатьОбъект("СписокЗначений");
				Для НомСтроки = 1 по 12 Цикл
					СтрокаКарточки = СоздатьОбъект("СписокЗначений");
					Для НомКолонки = 1 по ДоходыВычетыНалогиСотрудников.КоличествоКолонок() Цикл
						КодКолонки = ДоходыВычетыНалогиСотрудников.ПолучитьПараметрыКолонки(НомКолонки);
						СтрокаКарточки.ДобавитьЗначение(ДоходыВычетыНалогиСотрудников.ПолучитьЗначение(НомСтроки, НомКолонки), КодКолонки);
					КонецЦикла;
					Карточка.ДобавитьЗначение(СтрокаКарточки);
				КонецЦикла;
				
				СтрокаДанных = ЗначениеВСтроку(Карточка);
				СпрИтоговПоГоду.СписокПолейИндивидульнойКарточки = СтрокаДанных;
				СпрИтоговПоГоду.Записать();
			КонецЦикла;
		КонецЦикла;
		
		Таб.ВывестиСекцию(Строка(Номер));
		
	ИначеЕсли Номер = 770466 Тогда
		
		Таб.ВывестиСекцию(Строка(Номер));
		
	ИначеЕсли Номер = 770467 Тогда
		
		Сч = СоздатьОбъект("Счет." + ВыбранныйПланСчетов().Идентификатор());
		ЗаписатьПолноеНаименование("Н11.04", "Убытки за 2004 год");
		          
		ПорядокИсчисленияЕСН = СоздатьОбъект("Периодический");
		ПорядокИсчисленияЕСН.ИспользоватьОбъект("ПорядокИсчисленияЕСН");
		Пока ПорядокИсчисленияЕСН.ВыбратьЗначения('01.01.2005',) = 1 Цикл
		     ПорядокИсчисленияЕСН.ПолучитьЗначение();
			 ПорядокИсчисленияЕСН.Удалить();
		КонецЦикла;
		Константа.ПорядокИсчисленияЕСН.Установить('01.01.2005', 2);
		
		Шкала = СоздатьОбъект("Справочник.СтавкиНалогов");
		СписокНалогов = СоздатьОбъект("СписокЗначений");
		СписокНалогов.ДобавитьЗначение(глПолучитьНалог("ПФР_нак"));
		СписокНалогов.ДобавитьЗначение(глПолучитьНалог("ПФР_страх"));
		СписокНалогов.ДобавитьЗначение(глПолучитьНалог("ТФОМС"));
		СписокНалогов.ДобавитьЗначение(глПолучитьНалог("ФСС"));
		СписокНалогов.ДобавитьЗначение(глПолучитьНалог("ФФОМС"));
		СписокНалогов.ДобавитьЗначение(глПолучитьНалог("ЕСН_ФБ"));
		
		Для Сч = 1 по СписокНалогов.РазмерСписка() Цикл
			Налог = СписокНалогов.ПолучитьЗначение(Сч);
		
			Шкала.ИспользоватьВладельца(Налог);
			
			Если Шкала.НайтиПоКоду(3) = 1 Тогда
			    Шкала.Наименование = "3_Третий предел";
				Шкала.Записать();
			КонецЕсли;
			
			Если Шкала.НайтиПоКоду(4) = 1 Тогда
			    Шкала.Наименование = "4_Третий предел";
				Шкала.Записать();
			КонецЕсли;
		КонецЦикла;

		Таб.ВывестиСекцию(Строка(Номер)); 
		
	ИначеЕсли Номер = 770468 Тогда
		
		СоздатьПеречниПравилОтнесенияРасходовОсновногоПроизводстваКПрямым();
		
		Док = СоздатьОбъект("Документ.УслугиСтороннихОрганизаций");
		Док.ВыбратьДокументы(,);
		Пока Док.ПолучитьДокумент() = 1 Цикл
			ФлагИзменений = 0;
			Док.ВыбратьСтроки();
			Пока Док.ПолучитьСтроку() = 1 Цикл
				Если Док.ТранспортныеРасходы = "+" Тогда
					Док.ВариантПринятияРасходовНУ = Перечисление.ВариантыПринятияРасходовНУ.Транспортные; 
					ФлагИзменений = 1;
				КонецЕсли;     
			КонецЦикла;  
			Если ФлагИзменений = 1 Тогда 
				Попытка
					Док.Записать();
					Состояние("Обработка " + Док);
				Исключение
					Сообщить("Не удалось установить вариант принятия расходов в НУ - транспортные расходы: " + Док);
				КонецПопытки;
				
			КонецЕсли;
		КонецЦикла;
		
		Док = СоздатьОбъект("Документ.СчетФактура");
		Док.ВыбратьДокументы(,);
		Пока Док.ПолучитьДокумент() = 1 Цикл
			Если (ПустоеЗначение(Док.ДатаОплаты) = 1) и (ПустоеЗначение(Док.ДатаПлатРасчДок) = 0) Тогда
				Док.ДатаОплаты = Док.ДатаПлатРасчДок;
				
				Попытка
					Док.Записать();
					Состояние("Обработка " + Док);
					
				Исключение
					Сообщить("Не удалось записать документ " + Док);
				КонецПопытки;
			КонецЕсли;
		КонецЦикла;
		
		Спр = СоздатьОбъект("Справочник.РасходыБудущихПериодов");
		Спр.ВыбратьЭлементы();
		Пока Спр.ПолучитьЭлемент() = 1 Цикл
			Если Спр.ЭтоГруппа() = 1 Тогда
			    Продолжить;
			КонецЕсли;
			
			НомерСубконто = МожноВыбиратьСтатьюОтчислений(Спр.СчетЗатрат);
			Если НомерСубконто > 0 Тогда
				Если (ПустоеЗначение(Спр.СтатьяОтчисленийНаСоцНужды) = 1) или (ПустоеЗначение(Спр.СтатьяПрочихОтчисленийНаСоцНужды) = 1) Тогда
				    Спр.СтатьяОтчисленийНаСоцНужды = ПолучитьПустоеЗначение(Спр.СчетЗатрат.ВидСубконто(НомерСубконто).ТипСубконто());
					Спр.СтатьяПрочихОтчисленийНаСоцНужды = ПолучитьПустоеЗначение(Спр.СчетЗатрат.ВидСубконто(НомерСубконто).ТипСубконто());
					Спр.Записать();
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		Таб.ВывестиСекцию(Строка(Номер));  
		
	ИначеЕсли Номер = 770469 Тогда 
		
		// Удаление из перечня прямых расходов записей по налогам с ФОТ
		Спр = СоздатьОбъект("Справочник.ПеречниПравилОтнесенияРасходовОсновногоПроизводстваКПрямым");
		Если Спр.НайтиПоНаименованию("Прямые расходы, рекомендованные ст.318 гл.25 НК РФ") = 1 Тогда
			ПрямыеРасходы = СоздатьОбъект("Справочник.ПравилаОтнесенияРасходовОсновногоПроизводстваКПрямым");
			ПрямыеРасходы.ИспользоватьВладельца(Спр.ТекущийЭлемент());
			
			Если ПрямыеРасходы.НайтиПоКоду("6") = 1 Тогда
				ПрямыеРасходы.Удалить(1);
			КонецЕсли;
			Если ПрямыеРасходы.НайтиПоКоду("7") = 1 Тогда
				ПрямыеРасходы.Удалить(1);
			КонецЕсли; 
			Если ПрямыеРасходы.НайтиПоКоду("8") = 1 Тогда
				ПрямыеРасходы.Удалить(1);
			КонецЕсли;
		КонецЕсли;  
		
		СоздатьПеречниПравилОтнесенияРасходовОсновногоПроизводстваКПрямым();
		
		Таб.ВывестиСекцию(Строка(Номер));  
		
	ИначеЕсли Номер = 770471 Тогда  
		
		Сч = СоздатьОбъект("Счет." + ВыбранныйПланСчетов().Идентификатор());
		ЗаписатьПолноеНаименование("Н05.КВ"  , "Расходы на капитальные вложения по п.1.1 ст. 259 НК РФ");
		
		Константа.МетодОпределенияВыручки.Установить('01.01.2006', глПоОтгрузке);
		Константа.ОсобенностиИсчисленияНДФЛ.Установить('01.01.1980', Перечисление.ОсобенностиИсчисленияНДФЛ.СтандартныеВычетыНарастающимИтогом);
		
		РБП = СоздатьОбъект("Справочник.РасходыБудущихПериодов");
		
		РБП.ВыбратьЭлементы();
		Пока РБП.ПолучитьЭлемент() = 1  Цикл
		    Если РБП.ЭтоГруппа() = 1 Тогда
		        Продолжить;
			КонецЕсли;
			Если ПустоеЗначение(РБП.СчетЗатрат) = 1 Тогда
				РБП.СпособПризнанияРасходов = Перечисление.СпособыПризнанияРасходов.ВОсобомПорядке;  
			Иначе
				РБП.СпособПризнанияРасходов = Перечисление.СпособыПризнанияРасходов.ПоМесяцам;
				
			КонецЕсли;
			РБП.Записать();
			
		КонецЦикла;
		
		Таб.ВывестиСекцию(Строка(Номер));
	
	ИначеЕсли Номер = 770474 Тогда 
		
		Константа.СтавкаРефинансирования.Установить('26.12.2005', 12);
		
		Состояние("Обновление налоговых карточек");
		Сотр = СоздатьОбъект("Справочник.Сотрудники");
		Карточки = СоздатьОбъект("Справочник.КарточкиУчетаДоходов");
		Сотр.ВыбратьЭлементы();
		Пока Сотр.ПолучитьЭлемент() = 1 Цикл
		    Карточки.ИспользоватьВладельца(Сотр.ТекущийЭлемент());
			Карточки.ВыбратьЭлементы();
			Пока Карточки.ПолучитьЭлемент() = 1 Цикл
			    Если (Число(Карточки.Код) >= 2002) и (ПустоеЗначение(Карточки.СписокПолейНалоговойКарточки) = 0) Тогда
					СписокПолей = ЗначениеИзСтроки(Карточки.СписокПолейНалоговойКарточки);
					
					Если СписокПолей .РазмерСписка() <> 657 Тогда
					    Продолжить;
					КонецЕсли;
			        
					ТекНомерПоля = 158;
					Для НомерМесяца = 1 по 12 Цикл
						СписокПолей.ВставитьЗначение(ТекНомерПоля + НомерМесяца, 0, "СВМес6" + глДополнитьСтроку(НомерМесяца, 2));
					КонецЦикла;
					
					ТекНомерПоля = 170;
					Для НомерМесяца = 1 по 12 Цикл
						СписокПолей.ВставитьЗначение(ТекНомерПоля + НомерМесяца, 0, "СВМес7" + глДополнитьСтроку(НомерМесяца, 2));
					КонецЦикла;
					
					ТекНомерПоля = 218;
					Для НомерМесяца = 1 по 12 Цикл
						СписокПолей.ВставитьЗначение(ТекНомерПоля + НомерМесяца, 0, "ИВычет1_" + глДополнитьСтроку(НомерМесяца, 2));
					КонецЦикла;
					
					ТекНомерПоля = 230;
					Для НомерМесяца = 1 по 12 Цикл
						СписокПолей.ВставитьЗначение(ТекНомерПоля + НомерМесяца, 0, "ИВычет2_" + глДополнитьСтроку(НомерМесяца, 2));
					КонецЦикла;
					
					СуммаДивидендов = 0;
					ТекНомерПоля = 309;
					Для НомерМесяца = 1 по 12 Цикл
						ОблСумма = СписокПолей.ПолучитьЗначение(ТекНомерПоля - 12 + НомерМесяца);
						СуммаДивидендов = СуммаДивидендов + ОблСумма;
						СписокПолей.ВставитьЗначение(ТекНомерПоля + НомерМесяца, ОблСумма, "ОбДив" + глДополнитьСтроку(НомерМесяца, 2));
					КонецЦикла;
					
					СписокПолей.ВставитьЗначение(717, 0, "ИВычет1_Итого");
					СписокПолей.ВставитьЗначение(718, 0, "ИВычет2_Итого");
					СписокПолей.ВставитьЗначение(719, СуммаДивидендов, "ИОбДив");
					СписокПолей.ВставитьЗначение(720, 0, "ИСВМес6");
					СписокПолей.ВставитьЗначение(721, 0, "ИСВМес7");
					
					
					ТекНомерПоля = 721;
					Для НомерМесяца = 1 по 12 Цикл
						СписокПолей.ВставитьЗначение(ТекНомерПоля + НомерМесяца, 0, "ГИВ_" + глДополнитьСтроку(НомерМесяца, 2));
					КонецЦикла;
					
					СписокПолей.ВставитьЗначение(734, 0, "ГИВ_Итого");
					
					Карточки.СписокПолейНалоговойКарточки = ЗначениеВСтроку(СписокПолей);
					Карточки.Записать();
			    КонецЕсли;
			КонецЦикла;
		КонецЦикла;
		
		Состояние("Изменение ставок ЕСН и взносов на ОПС");
		Шкала = СоздатьОбъект("Справочник.СтавкиНалогов");
		ФСС = глПолучитьНалог("ФСС");
		ФФОМС = глПолучитьНалог("ФФОМС");
		
		УстановитьСтавкуЕСН(ФСС, "", Шкала, 1,	280000,	 2.9,	'01.01.2006');
		УстановитьСтавкуЕСН(ФСС, "", Шкала, 2,	600000,	 1.0,	'01.01.2006');
		УстановитьСтавкуЕСН(ФФОМС, "", Шкала, 1,	280000,	 1.1,	'01.01.2006');
		УстановитьСтавкуЕСН(ФФОМС, "", Шкала, 2,	600000,	 0.6,	'01.01.2006');
		
		Состояние("Обновление документов ""Запись книги продаж""");
		Док = СоздатьОбъект("Документ.ЗаписьКнигиПродаж");
		Док.ВыбратьДокументы(,);
		Пока Док.ПолучитьДокумент() = 1 Цикл
		    Док.ФормироватьПроводки = 1;
			Док.Записать();
		КонецЦикла;
		
		Состояние("Обновление кодов бюджетной классификации");
		Список = СоздатьОбъект("СписокЗначений");
		Список.Установить("18210202020061000160", "ПФР_нак");
		Список.Установить("18210202010061000160", "ПФР_страх");
		Список.Установить("39311706020070000180", "ФСС_БЛ");
		Список.Установить("39310202050071000160", "ФСС_НС");
		Список.Установить("18210201040091000110", "ТФОМС");
		Список.Установить("18210201020071000110", "ФСС");
		Список.Установить("18210201030081000110", "ФФОМС");
		Список.Установить("18210201010011000110", "ЕСН_ФБ");
		Список.Установить("18210102021011000110", "НДФЛ");
		Список.Установить("18210602010021000110", "Имущество");
		Список.Установить("18210901000031000110", "ПрибМест");
		Список.Установить("18210101012021000110", "ПрибРесп");
		Список.Установить("18210101011011000110", "ПрибФед");
		Список.Установить("18210906020021000110", "Образ");

		СпрНалогиИОтчисления = СоздатьОбъект("Справочник.НалогиИОтчисления");
		КодБК = "";

		Для Позиция = 1 По Список.РазмерСписка() Цикл
			Если СпрНалогиИОтчисления.НайтиПоКоду(Список.ПолучитьЗначение(Позиция, КодБК)) = 1 Тогда
				Если ПустоеЗначение(СпрНалогиИОтчисления.КодБК) = 1 Тогда
					СпрНалогиИОтчисления.КодБК = КодБК;
					СпрНалогиИОтчисления.Записать();
				КонецЕсли;	
			КонецЕсли;
		КонецЦикла;
		
		Сч = СоздатьОбъект("Счет." + ВыбранныйПланСчетов().Идентификатор());
		ЗаписатьПолноеНаименование("Н11.05", "Убытки за 2005 год");
		
		СпрВидыВычетов  = СоздатьОбъект("Справочник.ВидыВычетов");
		СпрВидыДоходов	= СоздатьОбъект("Справочник.ВидыДоходов");
		УстановитьВидВычета("507","Вычет из суммы помощи полученных ветеранами ВОВ, п.33 ст.217 НК");
		УстановитьВидДохода("2790","Сумма помощи (в денежной и натуральной формах) полученных ветеранами ВОВ, п.33 ст.217 НК РФ","507", 1);
		
		Таб.ВывестиСекцию(Строка(Номер));
	
	ИначеЕсли Номер = 770476 Тогда
		
		Сч = СоздатьОбъект("Счет." + ВыбранныйПланСчетов().Идентификатор());
		ЗаписатьПолноеНаименование("Н05.МЦ", "Основные средства, учтенные в составе МПЗ");
		ЗаписатьПолноеНаименование("МЦ.04", "Инвентарь и хозяйственные принадлежности в эксплуатации");
		ЗаписатьПолноеНаименование("Н02.МЦ", "Материалы, учтенные в составе ОС");
		ЗаписатьПолноеНаименование("Н02.09", "Материалы, переданные в переработку");
		
		Константа.УчитыватьПоложительныеСуммовыеРазницыПриНачисленииНДС.Установить('01.01.1980', Да);
		Константа.УчитыватьОтрицательныеСуммовыеРазницыПриНачисленииНДС.Установить('01.01.1980', Да);
		Константа.УчитыватьПоложительныеСуммовыеРазницыПриОпределенииВычетовПоНДС.Установить('01.01.1980', Да);
		Константа.УчитыватьОтрицательныеСуммовыеРазницыПриОпределенииВычетовПоНДС.Установить('01.01.1980', Да);

		Константа.АвтоКнигаПокупокПродаж = Да;
		Константа.РаздельныйУчетМатериаловСкладПереработка.Установить('01.01.1980',Нет);  
		Константа.РассчитыватьВНалоговомУчетеСреднююСтоимостьОтгруженныхТоваровВРазрезеДоговоров.Установить('01.01.1980',Нет); 
		Константа.СпособБухгалтерскогоУчетаСуммовыхРазницВСтоимостиМПЗ.Установить('01.01.1980',Перечисление.СпособыБухгалтерскогоУчетаСуммовыхРазницВСтоимостиМПЗ.ОтноситьНаСтоимостьТоваровРаботУслуг); 
		
		Док = СоздатьОбъект("Документ.СчетФактура");
		Док.ВыбратьДокументы('01.01.2006',);
		Пока Док.ПолучитьДокумент() = 1 Цикл
			Если Док.Аванс = 1 Тогда
				Док.ВключатьВКнигуПродаж = 1;
				
				Попытка
					Док.Записать();
					Состояние("Обработка " + Док);
					
				Исключение
					Сообщить("Не удалось записать документ " + Док);
				КонецПопытки;
			КонецЕсли;
		КонецЦикла;
		
		
		Таб.ВывестиСекцию(Строка(Номер));
		
	ИначеЕсли Номер = 770478 Тогда
	
		Состояние("Установка значений констант");
		ИсторияСпискаСчетов = СоздатьОбъект("Периодический");
		ИсторияСпискаСчетов.ИспользоватьОбъект("СчетаПереоцениваемыеВОсобомПорядке");
		ИсторияСпискаСчетов.ОбратныйПорядок();
		ИсторияСпискаСчетов.ВыбратьЗначения();
		Если ИсторияСпискаСчетов.ПолучитьЗначение() = 1 Тогда
			СписокСчетов = СоздатьОбъект("СписокЗначений");
			СписокСчетов.ИзСтрокиСРазделителями(ИсторияСпискаСчетов.Значение);
			НомерПозицииСчетаЗаймовВВалюте = СписокСчетов.НайтиЗначение("66.33");		
			Если НомерПозицииСчетаЗаймовВВалюте <> 0 Тогда
				СписокСчетов.УдалитьЗначение(НомерПозицииСчетаЗаймовВВалюте);
			КонецЕсли;
			НомерПозицииСчетаЗаймовВВалюте = СписокСчетов.НайтиЗначение("67.33");		
			Если НомерПозицииСчетаЗаймовВВалюте <> 0 Тогда
				СписокСчетов.УдалитьЗначение(НомерПозицииСчетаЗаймовВВалюте);
			КонецЕсли;
			
			СписокСчетов.Сортировать();			
			Константа.СчетаПереоцениваемыеВОсобомПорядке.Установить(ТекущаяДата(), СписокСчетов.ВСтрокуСРазделителями());
		КонецЕсли;
		
		Док = СоздатьОбъект("Документ.УслугиСтороннихОрганизаций");
		Док.ВыбратьДокументы(,);
		Пока Док.ПолучитьДокумент() = 1 Цикл
			ФлагИзменений = 0;
			Док.ВыбратьСтроки();
			Пока Док.ПолучитьСтроку() = 1 Цикл
				Если (Док.ТранспортныеРасходы <> "+") и (ПустоеЗначение(Док.ВариантПринятияРасходовНУ) = 1) Тогда
					Док.ВариантПринятияРасходовНУ = Перечисление.ВариантыПринятияРасходовНУ.Косвенные; 
					ФлагИзменений = 1;
				КонецЕсли;     
			КонецЦикла;  
			Если ФлагИзменений = 1 Тогда 
				Попытка
					Док.Записать();
					Состояние("Обработка " + Док);
				Исключение
					Сообщить("Не удалось установить вариант принятия расходов в НУ - на косвенные расходы: " + Док);
				КонецПопытки;
				
			КонецЕсли;
		КонецЦикла;
		
		Ном = СоздатьОбъект("Справочник.Номенклатура");
		Цены = СоздатьОбъект("Справочник.Цены");
		
		Ном.ВыбратьЭлементы(0);
		Пока Ном.ПолучитьЭлемент() =1 Цикл
			
			Если Ном.ЭтоГруппа() = 1 Тогда
				Продолжить;
			КонецЕсли;
			Если Ном.ТипНоменклатуры <> Перечисление.ТипыНоменклатуры.Товар Тогда
				Продолжить;
			КонецЕсли;
			
			Если Ном.ПометкаУдаления() = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			Цены.ИспользоватьВладельца(Ном);
			
			Цены.ВыбратьЭлементы();
			Пока Цены.ПолучитьЭлемент() = 1 Цикл
				Если Цены.ПометкаУдаления() = 0 Тогда
					Цены.Удалить(0);
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;	
		
	    ДатаНачалаКорректировки = "";
		Док = СоздатьОбъект("Документ");
		Док.ВыбратьДокументы();
		Пока Док.ПолучитьДокумент() = 1 Цикл
			ФлагИзменений = 0;
			Если Док.ПометкаУдаления() = 1 Тогда
				Продолжить;
			КонецЕсли;
			Если Док.Вид() = "ВводВЭксплуатациюОС" Тогда
				Док.ВсегоБалансоваяСтоимость = Док.БалансоваяСтоимость * Док.КоличествоСтрок();
				ФлагИзменений = 1;
			ИначеЕсли Док.Вид() = "ПередачаОС" Тогда
				Док.ВсегоСтоимость = Док.Операция.СуммаОперации;
				ФлагИзменений = 1;
			ИначеЕсли (Док.Вид() = "ПодготовкаКПередачеОС")
			или (Док.Вид() = "СписаниеОС") Тогда
				Док.ВсегоБалансоваяСтоимость = Док.БалансоваяСтоимость * Док.КоличествоСтрок();
				Док.Операция.СуммаОперации = Док.БалансоваяСтоимость * Док.КоличествоСтрок();
				ФлагИзменений = 1;
			ИначеЕсли (Док.Вид() = "ПеречислениеЗарплатыНаПК") или (Док.Вид() = "ЗаявкаНаОткрытиеСчетов") или (Док.Вид() = "ОперацияПоРасчСчету") Тогда
				Если Константа.ВсеДокументыВЖурналОпераций = Да Тогда
					Док.СуществуетОперация(1); 
					Док.Операция.СуммаОперации = 0;
					Док.Операция.Содержание = ?(Док.Вид() = "ПеречислениеЗарплатыНаПК","Перечисление зарплаты на пластиковые карты",?(Док.Вид() = "ЗаявкаНаОткрытиеСчетов","Заявка на открытие счетов","Операции по р/с"));
				Иначе
					Док.СуществуетОперация(0); 
				КонецЕсли;
				ФлагИзменений = 1;
			КонецЕсли;
			
			Если ФлагИзменений = 1 Тогда 
				
				Попытка
					Док.Записать();
					Состояние("Обработка " + Док);
				Исключение
					Сообщить("Не удалось обновить значение реквизитов документа: " + Док);
				КонецПопытки;
				
			КонецЕсли; 
		КонецЦикла; 
		
		Сч = СоздатьОбъект("Счет." + ВыбранныйПланСчетов().Идентификатор());
		ЗаписатьПолноеНаименование("ЗПК.20"  , "Покупки, облагаемые НДС по ставке 18% (20%)");
		ЗаписатьПолноеНаименование("ЗПК.20.Н", "Сумма НДС по ставке 18 (20%) к уплате");
		ЗаписатьПолноеНаименование("ЗПР.20"  , "Продажи, облагаемые НДС по ставке 18% (20%)");
		ЗаписатьПолноеНаименование("ЗПР.20.Н", "Сумма НДС по ставке 18% (20%) к получению");
		
		// Замена кодов счетов и типов аналитики в формах документов.
		Состояние("Обновление документов");
		Если ОбработкаСчетовВДокументахВыполнена = 0 Тогда
		    ОбработкаСчетовВДокументах();
		КонецЕсли;   
		
		Файл = ФС.НайтиПервыйФайл(глКаталогПечФорм+"SF283.efd");
		Если ПустаяСтрока(Файл)=0 Тогда
			Попытка 
				ФС.ПереименоватьФайл(глКаталогПечФорм+"SF283.efd",глКаталогПечФорм+"SF283.ef_",0);
				Сообщить("Файл внешней печатной формы счета-фактуры (SF283) больше не используется."); 
				Сообщить("Для удаления из списка печатных форм файл SF283.efd переименован в SF283.ef_."); 
				Сообщить("Если вы хотите продолжать использование внешней печатной формы, переименуйте файл SF283.ef_ в SF283.efd.");
			Исключение
				Сообщить("Файл внешней печатной формы счета-фактуры (SF283) больше не используется."); 
				Сообщить("Автоматически отключить внешнюю печатную форму не удалось, для отключения формы вручную удалите файл SF283.efd.");
			КонецПопытки;
		КонецЕсли;

		Таб.ВывестиСекцию(Строка(Номер));
		
	ИначеЕсли Номер = 770483 Тогда       
		
		Константа.НалоговыйПериодПоНДС.Установить('01.01.1980',Перечисление.НалоговыеПериодыПоНДС.Месяц);  
		Константа.МетодРаспределенияКосвенныхРасходовПоВидамДеятельности.Установить('01.01.1980',Перечисление.МетодыРаспределенияКосвенныхРасходовПоВидамДеятельности.ЗаМесяц);  		
		Константа.БазаРаспределенияКосвенныхРасходовПоВидамДеятельности.Установить('01.01.1980',Перечисление.БазыРаспределенияКосвенныхРасходовПоВидамДеятельности.ДоходыОтРеализации);  		
		
		Док = СоздатьОбъект("Документ.УслугиСтороннихОрганизаций");
		Док.ВыбратьДокументы();
		Пока Док.ПолучитьДокумент() = 1 Цикл			

			Если Док.ТипИсполнителя = 2 Тогда
				Если Док.ЗачитыватьАванс <> 1 Тогда
					Док.ЗачитыватьАванс = 1;				
					
					Попытка
						Док.Записать();
						Состояние("Обработка " + Док);
					Исключение
						Сообщить("Не удалось обновить значение реквизитов документа: " + Док);
					КонецПопытки;
				КонецЕсли; 	
			КонецЕсли; 
		КонецЦикла; 
		
		Таб.ВывестиСекцию(Строка(Номер));
		
	ИначеЕсли Номер = 770484 Тогда
		
		Константа.СтавкаРефинансирования.Установить('26.06.2006', 11.5);
		
		КаталогКалендарей=КаталогИБ()+"ExtForms\Calendar\";
		Файл = ФС.НайтиПервыйФайл(КаталогКалендарей+"INFBUH80.ERT");
		Если ПустаяСтрока(Файл)=0 Тогда
			Попытка 
				ФС.ПереименоватьФайл(КаталогКалендарей+"INFBUH80.ERT",КаталогКалендарей+"INFBUH80.ER_",0);
			Исключение
			КонецПопытки;
		КонецЕсли;
		
		СписокПараметров = СоздатьОбъект("СписокЗначений");
		СписокПараметров.Установить("Режим", "Заполнить");
		ОткрытьФорму("Обработка.ИППДополнительнаяИнформация", СписокПараметров);
		
		Таб.ВывестиСекцию(Строка(Номер));
		
	ИначеЕсли Номер = 770485 Тогда       
		             
		Константа.ВариантУчетаРасходовПоАмортизационнойПремии.Установить('01.01.1980',Перечисление.ВариантыУчетаРасходовПоАмортизационнойПремии.НаСчетахРасходовПоАмортизации);  		
		Константа.СтавкаРефинансирования.Установить('23.10.2006', 11);
		Константа.ОтражатьПоложительныеСуммовыеРазницыВДопЛисте.Установить('01.01.1980', Да);  		
		Константа.ОтражатьОтрицательныеСуммовыеРазницыВДопЛисте.Установить('01.01.1980', Да);  		
		
		Состояние("Обновление ставок налогов");
		Налог = СоздатьОбъект("Справочник.НалогиИОтчисления");
		Налог.НайтиЭлемент(глПолучитьНалог("ПрибФед"));
		Налог.Ставка.Установить('01.01.2005', 6.5);
		Налог.НайтиЭлемент(глПолучитьНалог("ПрибРесп"));
		Налог.Ставка.Установить('01.01.2005', 17.5); 
		Налог.НайтиЭлемент(глПолучитьНалог("Имущество"));
		Налог.Ставка.Установить('01.01.2004',2.2);		
		
		//Обновление справочников вычетов и доходов
		СпрВидыВычетов  = СоздатьОбъект("Справочник.ВидыВычетов");
		СпрВидыДоходов	= СоздатьОбъект("Справочник.ВидыДоходов"); 

		//установим налоговые вычеты
		УстановитьВидВычета("307","Совокупная сумма фактически произведенных расходов на приобр. ценных бумаг");
		УстановитьВидВычета("315","Сумма фактически произведенных расходов на приобретение доли в уст. капитале");
		УстановитьВидВычета("316","Суммы, полученные от продажи ценных бумаг, не превышающие 125 000 руб.");
		УстановитьВидВычета("317","Суммы, полученные от продажи ценных бумаг, находившихся в собств. 3 года и более");
		УстановитьВидВычета("601","Сумма, уменьшающая налоговую базу по доходам полученным в виде дивидендов");
		УстановитьВидВычета("620","Иные суммы, уменьшающие налоговую базу");
		//установимвиы доходов
		//Обновим коды доходов, действующие с 2005 года
		УстановитьВидДоходаНДФЛ(1010,"Дивиденды",601,"Дивиденды"); 
		
		ПолноеНаименование = "Не применяется. Сумма процентов по облигациям и ценным бумагам, включая векселя";
		УстановитьВидДоходаНДФЛ(1100,"Сумма процентов по облигациям и ценным бумагам, включая векселя (не применяется)",,ПолноеНаименование);
		
		ПолноеНаименование = "Доходы учредителей доверительного управления ипотечным покрытием, полученные на основании приобретения ипотечных сертификатов участия, выданных управляющим ипотечным покрытием до 01.01.2007";
		УстановитьВидДоходаНДФЛ(1120,"Доходы учредителей доверительного управления ипотечным покрытием... до 01.01.2007", ,ПолноеНаименование);
		
		ПолноеНаименование = "Доходы, полученные в виде страховых выплат по договорам страхования";
		УстановитьВидДоходаНДФЛ(1200,ПолноеНаименование, ,ПолноеНаименование);
		
		ПолноеНаименование = "Доходы, полученные в виде страховых взносов по договорам страхования";
		УстановитьВидДоходаНДФЛ(1211,ПолноеНаименование, ,ПолноеНаименование);
		
		ПолноеНаименование = "Доходы в виде денежных (выкупных) сумм, выплачиваемых по договорам страхования, подлежащих в соответствии с правилами страхования и условиями договоров выплате при досрочном расторжении договоров страхования";
		УстановитьВидДоходаНДФЛ(1212,"Доходы в виде денежных (выкупных) сумм, выплачиваемых по договорам страхования", ,ПолноеНаименование);
		
		ПолноеНаименование = "Доходы в виде денежных (выкупных) сумм, выплачиваемые по договорам негосударственного пенсионного обеспечения";
		УстановитьВидДоходаНДФЛ(1220,ПолноеНаименование, ,ПолноеНаименование);
		
		ПолноеНаименование = "Не применяется. Страховые (пенсионные) взносы, внесенные за физ.лиц, п.5 ст.213 НК";
		УстановитьВидДоходаНДФЛ(1230,"Страховые (пенсионные) взносы, внесенные за физ.лиц, п.5 ст.213 НК (не применяется)", ,ПолноеНаименование);
		
		ПолноеНаименование = "Пенсии, выплачиваемые по договорам негосударственного пенсионного обеспечения";
		УстановитьВидДоходаНДФЛ(1240,ПолноеНаименование, ,ПолноеНаименование); 
		
		ПолноеНаименование = "Доходы, полученные налогоплательщиком от использования в Российской Федерации авторских или иных смежных прав (кроме авторских вознаграждений)";
		УстановитьВидДоходаНДФЛ(1300,"Доходы, от использования в РФ авторских или иных смежных прав (кроме авторских вознаграждений)", ,ПолноеНаименование);
		
		ПолноеНаименование = "Доходы, полученные от предоставления в аренду, и доходы, полученные от иного использования имущества (кроме аналогичных доходов от сдачи в аренду любых транспортных средств и средств связи, компьютерных сетей)";
		УстановитьВидДоходаНДФЛ(1400,"Доходы от сдачи в аренду и иного исп-ия имущества,кроме трансп.средств", ,ПолноеНаименование); 
		
		ПолноеНаименование = "Доходы, полученные от продажи жилых домов, квартир, включая приватизированные жилые помещения, дач, садовых домиков или земельных участков и долей в указанном имуществе";
		УстановитьВидДоходаНДФЛ(1510,"Доходы от реализации недвижимого имущества", ,ПолноеНаименование);
		
		ПолноеНаименование = "Доходы, полученные от продажи имущества (кроме жилых домов, квартир, включая приватизированные жилые помещения, дач, садовых домиков, земельных участков и долей в указанном имуществе, ценных бумаг)";
		УстановитьВидДоходаНДФЛ(1520,"Доходы от реализации иного имущества (кроме ценных бумаг)", ,ПолноеНаименование);
		
		ПолноеНаименование = "Доходы, полученные от реализации ценных бумаг";
		УстановитьВидДоходаНДФЛ(1530,ПолноеНаименование, ,ПолноеНаименование);
		
		ПолноеНаименование = "Доходы, полученные налогоплательщиком от реализации долей участия в уставном капитале организаций";
		УстановитьВидДоходаНДФЛ(1540,ПолноеНаименование, ,ПолноеНаименование);
		
		ПолноеНаименование = "Вознаграждение, получаемое налогоплательщиком за выполнение трудовых или иных обязанностей; денежное содержание и иные налогооблагаемые выплаты военнослужащим и приравненным к ним категориям физических лиц (кроме выплат по договорам гражданско-правового характера и авторских вознаграждений)";
		УстановитьВидДоходаНДФЛ(2000,"Вознаграждение за труд (заработная плата, денежное содержание и пр.)", ,ПолноеНаименование); 
		
		ПолноеНаименование = "Вознаграждение директоров и иные аналогичные выплаты, получаемые членами органа управления организации (совета директоров или иного подобного органа)";
		УстановитьВидДоходаНДФЛ(2001,"Вознаграждение директоров (совета директоров или иного подобного органа)", ,ПолноеНаименование);
		
		ПолноеНаименование = "Выплаты по договорам гражданско-правового характера (за исключением авторских вознаграждений)";
		УстановитьВидДоходаНДФЛ(2010,"Выплаты по договорам гражданско-правового характера (за исключ. авторских)", ,ПолноеНаименование);
		
		ПолноеНаименование = "Суммы отпускных выплат";
		УстановитьВидДоходаНДФЛ(2012,ПолноеНаименование, ,ПолноеНаименование);
		
		ПолноеНаименование = "Авторские вознаграждения (вознаграждения) за создание литературных произведений, в том числе для театра, кино, эстрады и цирка";
		УстановитьВидДоходаНДФЛ(2201,"Авторские вознаграждения за создание литературных произведений", ,ПолноеНаименование);
		
		ПолноеНаименование = "Авторские вознаграждения (вознаграждения) за создание художественно-графических произведений, фоторабот для печати, произведений архитектуры и дизайна";
		УстановитьВидДоходаНДФЛ(2202,"Авторские вознаграждения за создание художественно-графических произв.", ,ПолноеНаименование);
		
		ПолноеНаименование = "Авторские вознаграждения (вознаграждения) за создание произведений скульптуры, монументально декоративной живописи, декоративно прикладного и оформительского искусства, станковой живописи, театрально- и кинодекорационного искусства и графики, выполненных в различной технике";
		УстановитьВидДоходаНДФЛ(2203,"Авторские вознагр. за создание скульптур, декоративно-прикладн иск.", ,ПолноеНаименование);
		
		ПолноеНаименование = "Авторские вознаграждения (вознаграждения) за создание аудиовизуальных произведений (видео-, теле- и кинофильмов)";
		УстановитьВидДоходаНДФЛ(2204,"Авторские вознаграждения за создание аудиовизуальных произведений", ,ПолноеНаименование);
		
		ПолноеНаименование = "Авторские вознаграждения (вознаграждения) за создание музыкальных произведений: музыкально-сценических произведений (опер, балетов, музыкальных комедий), симфонических, хоровых, камерных произведений, произведений для духового оркестра, оригинальной музыки для кино-, теле- и видеофильмов и театральных постановок";
		УстановитьВидДоходаНДФЛ(2205,"Авторские вознаграждения за создание музыкально-сценических произв.", ,ПолноеНаименование); 
		
		ПолноеНаименование = "Авторские вознаграждения (вознаграждения) за создание других музыкальных произведений, в том числе подготовленных к опубликованию";
		УстановитьВидДоходаНДФЛ(2206,"Авторские вознаграждения за создание других музыкальных произведений", ,ПолноеНаименование);
		
		ПолноеНаименование = "Авторские вознаграждения (вознаграждения) за исполнение произведений литературы и искусства";
		УстановитьВидДоходаНДФЛ(2207,"Авторские вознагр. за исполнение произведений литературы, искусства", ,ПолноеНаименование);
		
		ПолноеНаименование = "Авторские вознаграждения (вознаграждения) за создание научных трудов и разработок";
		УстановитьВидДоходаНДФЛ(2208,ПолноеНаименование, ,ПолноеНаименование);
		
		ПолноеНаименование = "Авторские вознаграждения за открытия, изобретения, промышленные образцы";
		УстановитьВидДоходаНДФЛ(2209,ПолноеНаименование, ,ПолноеНаименование);
		
		ПолноеНаименование = "Пособия по временной нетрудоспособности";
		УстановитьВидДоходаНДФЛ(2300,ПолноеНаименование, ,ПолноеНаименование);
		
		ПолноеНаименование = "Доходы, полученные от использования любых транспортных средств, включая морские, речные, воздушные суда и автомобильные транспортные средства, в связи с перевозками, а также штрафы и иные санкции за простой (задержку) таких транспортных средств в пунктах погрузки (выгрузки) в Российской Федерации;";
		ПолноеНаименование = ПолноеНаименование + " доходы, полученные от использования трубопроводов, линий электропередачи (ЛЭП), линий оптико-волоконной и (или) беспроводной связи, иных средств связи, включая компьютерные сети, на территории Российской Федерации";
		УстановитьВидДоходаНДФЛ(2400,ПолноеНаименование, ,ПолноеНаименование);
		
		ПолноеНаименование = "Оплата (полностью или частично) за налогоплательщика организациями или индивидуальными предпринимателями товаров (работ, услуг) или имущественных прав, в том числе коммунальных услуг, питания, отдыха, обучения в интересах налогоплательщика";
		УстановитьВидДоходаНДФЛ(2510,"Суммы оплаты за налогоплательщика товаров(работ,услуг), в т.ч. питания", ,ПолноеНаименование);
		
		ПолноеНаименование = "Стоимость товаров, работ, услуг, полученных на безвозмездной основе";
		УстановитьВидДоходаНДФЛ(2520,ПолноеНаименование, ,ПолноеНаименование);
		
		ПолноеНаименование = "Оплата труда в натуральной форме";
		УстановитьВидДоходаНДФЛ(2530,ПолноеНаименование, ,ПолноеНаименование);
		
		ПолноеНаименование = "Материальная выгода, полученная от экономии на процентах за пользование заемными (кредитными) средствами (за исключением доходов в виде материальной выгоды, полученной от экономии на процентах за пользование налогоплательщиком заемными (кредитными) средствами, израсходованными на новое строительство или приобретение на территории Российской Федерации жилого дома, квартиры или доли (долей) в них)";
		УстановитьВидДоходаНДФЛ(2610,"Мат.выгода от экономии на %% за пользов. заемными сред-ми", ,ПолноеНаименование);
		
		ПолноеНаименование = "Материальная выгода, полученная от экономии на процентах за пользование целевыми займами (кредитами), фактически израсходованными на новое строительство или приобретение на территории Российской Федерации жилого дома, квартиры или доли (долей) в них, на основании документов, подтверждающих целевое использование таких средств";
		УстановитьВидДоходаНДФЛ(2620,"Мат.выгода от экономии на %% за пользов. целевыми займами (кредитами)", ,ПолноеНаименование);
		
		ПолноеНаименование = "Материальная выгода, полученная от приобретения товаров (работ, услуг) в соответствии с гражданско-правовым договором у физических лиц, организаций и индивидуальных предпринимателей, являющихся взаимозависимыми по отношению к налогоплательщику";
		УстановитьВидДоходаНДФЛ(2630,"Мат.выгода от приобретения товаров (работ, услуг)", ,ПолноеНаименование);
		
		ПолноеНаименование = "Материальная выгода, полученная от приобретения ценных бумаг";
		УстановитьВидДоходаНДФЛ(2640,ПолноеНаименование, ,ПолноеНаименование);
		
		ПолноеНаименование = "Материальная помощь (за исключением материальной помощи, оказываемой работодателями своим работникам, а также бывшим своим работникам, уволившимся в связи с выходом на пенсию по инвалидности или по возрасту, и материальной помощи, оказываемой инвалидам общественными организациями инвалидов)";
		УстановитьВидДоходаНДФЛ(2710,"Материальная помощь не работникам",506 ,ПолноеНаименование); 
		
		ПолноеНаименование = "Стоимость подарков";
		УстановитьВидДоходаНДФЛ(2720,ПолноеНаименование,501 ,ПолноеНаименование);
		
		ПолноеНаименование = "Стоимость призов в денежной и натуральной формах, полученных на конкурсах и соревнованиях, проводимых в соответствии с решениями Правительства Российской Федерации, законодательных (представительных) органов государственной власти или представительных органов местного самоуправления";
		УстановитьВидДоходаНДФЛ(2730,"Стоимость призов в денежной и натуральной формах",502 ,ПолноеНаименование);
		
		ПолноеНаименование = "Стоимость выигрышей и призов, получаемых в проводимых конкурсах, играх и других мероприятиях в целях рекламы товаров, работ и услуг";
		УстановитьВидДоходаНДФЛ(2740,"Стоимость выигрышей и призов, получаемых в проводимых конкурсах",505 ,ПолноеНаименование);
		
		ПолноеНаименование = "Стоимость призов в денежной и натуральной формах, полученных на конкурсах и соревнованиях, проводимых не в соответствии с решениями Правительства Российской Федерации, законодательных (представительных) органов государственной власти или представительных органов местного самоуправления и не в целях рекламы товаров (работ и услуг)";
		УстановитьВидДоходаНДФЛ(2750,"Стоимость призов на других соревнованиях, не в целях рекламы", ,ПолноеНаименование);
		
		ПолноеНаименование = "Материальная помощь, оказываемая работодателями своим работникам, а также бывшим своим работникам, уволившимся в связи с выходом на пенсию по инвалидности или по возрасту";
		УстановитьВидДоходаНДФЛ(2760,"Материальная помощь, оказываемая работодателями своим работникам",503 ,ПолноеНаименование);
		
		ПолноеНаименование = "Материальная помощь, оказываемая инвалидам общественными организациями инвалидов";
		УстановитьВидДоходаНДФЛ(2761,ПолноеНаименование, ,ПолноеНаименование); 
		
		ПолноеНаименование = "Возмещение (оплата) работодателями своим работникам, их супругам, родителям и детям, бывшим своим работникам (пенсионерам по возрасту), а также инвалидам стоимости приобретенных ими (для них) медикаментов, назначенных им лечащим врачом";
		УстановитьВидДоходаНДФЛ(2770,"Суммы возмещения работникам стоимости медикаментов",504 ,ПолноеНаименование);
		
		ПолноеНаименование = "Возмещение (оплата) стоимости приобретенных налогоплательщиком (для налогоплательщика) медикаментов, назначенных им лечащим врачом, в иных случаях, не подпадающих под действие п. 28 ст. 217 Налогового кодекса Российской Федерации";
		УстановитьВидДоходаНДФЛ(2780,"Суммы возмещения стоимости медикаментов, не подпад. под п.28 ст.217 НК", ,ПолноеНаименование);
		
		ПолноеНаименование = "Сумма помощи (в денежной и натуральной формах), а также стоимость подарков, полученных ветеранами Великой Отечественной войны, инвалидами Великой Отечественной войны, вдовами военнослужащих, погибших в период войны с Финляндией, Великой Отечественной войны, войны с Японией, ";
		ПолноеНаименование = ПолноеНаименование + "вдовами умерших инвалидов Великой Отечественной войны и бывшими узниками нацистских концлагерей, тюрем и гетто, а также бывшими несовершеннолетними узниками концлагерей, гетто и других мест принудительного содержания, созданных фашистами и их союзниками в период Второй мировой войны";
		УстановитьВидДоходаНДФЛ(2790,"Сумма помощи (в денежной и натуральной формах) полученных ветеранами ВОВ",507 ,ПолноеНаименование);
		
		ПолноеНаименование = "Доходы, полученные от погашения вексельных обязательств";
		УстановитьВидДоходаНДФЛ(2800,ПолноеНаименование, ,ПолноеНаименование); 
		
		ПолноеНаименование = "Доходы, полученные от операций с иностранной валютой";
		УстановитьВидДоходаНДФЛ(2900,ПолноеНаименование, ,ПолноеНаименование);
		
		ПолноеНаименование = "Выигрыши, выплачиваемые организаторами лотерей, тотализаторов и других основанных на риске игр (в том числе с использованием игровых автоматов)";
		УстановитьВидДоходаНДФЛ(3010,"Выигрыши, выплачиваемые организаторами лотерей", ,ПолноеНаименование);
		
		ПолноеНаименование = "Доходы в виде процентов, получаемые по вкладам в банках в части превышения суммы, рассчитанной исходя из действующей ставки рефинансирования Центрального банка Российской Федерации в течение периода, за который начислены проценты, по рублевым вкладам (за исключением срочных пенсионных вкладов, внесенных на срок не менее шести месяцев) и 9 процентов годовых по вкладам в иностранной валюте";
		УстановитьВидДоходаНДФЛ(3020,"Сумма %% дохода по вкладам в банках свыше ставки рефинансирования", ,ПолноеНаименование);
		
		ПолноеНаименование = "Доходы в виде процентов, получаемые по срочным пенсионным вкладам в банках, внесенным на срок не менее шести месяцев";
		УстановитьВидДоходаНДФЛ(3021,"Доходы в виде процентов, получаемые по срочным пенсионным вкладам в банках", ,ПолноеНаименование); 
		
		ПолноеНаименование = "Иные доходы";
		УстановитьВидДоходаНДФЛ(4800,ПолноеНаименование, ,ПолноеНаименование);
		//обновили виды доходов

		Таб.ВывестиСекцию(Строка(Номер)); 
		
	ИначеЕсли Номер = 770486 Тогда
		
		СпрВидыВычетов  = СоздатьОбъект("Справочник.ВидыВычетов");
		УстановитьВидВычета("101","600 руб. на каждого ребенка, пп.4 п.1 ст.218 НК");
		УстановитьВидВычета("102","1200 руб. на ребенка одинокому родителю, пп.4 п.1 ст.218 НК");
		УстановитьВидВычета("106","1200 руб. на ребенка-инвалида, пп.4 п.1 ст.218 НК");
		УстановитьВидВычета("107","2400 руб. на ребенка-инвалида одинокому родителю, пп.4 п.1 ст.218 НК");		
		
		Таб.ВывестиСекцию(Строка(Номер)); 
		
	ИначеЕсли Номер = 770487 Тогда 
		
		Состояние("Установка значений констант");
		ИсторияСпискаСчетов = СоздатьОбъект("Периодический");
		ИсторияСпискаСчетов.ИспользоватьОбъект("СчетаПереоцениваемыеВОсобомПорядке");
		ИсторияСпискаСчетов.ОбратныйПорядок();
		ИсторияСпискаСчетов.ВыбратьЗначения();
		Если ИсторияСпискаСчетов.ПолучитьЗначение() = 1 Тогда
			СписокСчетов = СоздатьОбъект("СписокЗначений");
			СписокСчетов.ИзСтрокиСРазделителями(ИсторияСпискаСчетов.Значение);
			НомерПозицииСчетаПокупВУЕ = СписокСчетов.НайтиЗначение("62.6");		
			Если НомерПозицииСчетаПокупВУЕ <> 0 Тогда
				СписокСчетов.УдалитьЗначение(НомерПозицииСчетаПокупВУЕ);
			КонецЕсли;
			НомерПозицииСчетаПостВУЕ = СписокСчетов.НайтиЗначение("60.6");		
			Если НомерПозицииСчетаПостВУЕ <> 0 Тогда
				СписокСчетов.УдалитьЗначение(НомерПозицииСчетаПостВУЕ);
			КонецЕсли;
			НомерПозицииСчетаПрочВУЕ = СписокСчетов.НайтиЗначение("76.6");		
			Если НомерПозицииСчетаПрочВУЕ <> 0 Тогда
				СписокСчетов.УдалитьЗначение(НомерПозицииСчетаПрочВУЕ);
			КонецЕсли;
			
			СписокСчетов.ДобавитьЗначение("УЕ.60");
			СписокСчетов.ДобавитьЗначение("УЕ.62");
			
			СписокСчетов.Сортировать();			
			Константа.СчетаПереоцениваемыеВОсобомПорядке.Установить('01.01.2007', СписокСчетов.ВСтрокуСРазделителями());
		КонецЕсли;  
		
		ГраницаИнтервала = '01.01.2007';
		ОчиститьИсториюЗначения("УчитыватьОтрицательныеСуммовыеРазницыПриНачисленииНДС", ГраницаИнтервала);
		ОчиститьИсториюЗначения("УчитыватьПоложительныеСуммовыеРазницыПриОпределенииВычетовПоНДС", ГраницаИнтервала);
		ОчиститьИсториюЗначения("УчитыватьОтрицательныеСуммовыеРазницыПриОпределенииВычетовПоНДС", ГраницаИнтервала);
		ОчиститьИсториюЗначения("ОтражатьПоложительныеСуммовыеРазницыВДопЛисте", ГраницаИнтервала);
		ОчиститьИсториюЗначения("ОтражатьОтрицательныеСуммовыеРазницыВДопЛисте", ГраницаИнтервала);
		
		Константа.УчитыватьОтрицательныеСуммовыеРазницыПриНачисленииНДС.Установить(ГраницаИнтервала, Нет);
		Константа.УчитыватьПоложительныеСуммовыеРазницыПриОпределенииВычетовПоНДС.Установить(ГраницаИнтервала, Нет);
		Константа.УчитыватьОтрицательныеСуммовыеРазницыПриОпределенииВычетовПоНДС.Установить(ГраницаИнтервала, Нет);
		Константа.ОтражатьПоложительныеСуммовыеРазницыВДопЛисте.Установить(ГраницаИнтервала, Нет);
		Константа.ОтражатьОтрицательныеСуммовыеРазницыВДопЛисте.Установить(ГраницаИнтервала, Нет);        
		
		Если Константа.УчитыватьПоложительныеСуммовыеРазницыПриНачисленииНДС.Получить(ГраницаИнтервала) = Да Тогда
			Константа.ВыписыватьОтдельныеСчетаФактурыНаСуммовыеРазницы.Установить(ГраницаИнтервала, Да);       
		Иначе                                                                                                        
			Константа.ВыписыватьОтдельныеСчетаФактурыНаСуммовыеРазницы.Установить(ГраницаИнтервала, Нет);       
		КонецЕсли;
		              
		Константа.ФормироватьСчетФактуруПоУЕвРублях.Установить(ГраницаИнтервала, Нет);       
		
		Константа.СтавкаРефинансирования.Установить('29.01.2007', 10.5);
		           
		Состояние("Добавление наименований счетов");
		Сч = СоздатьОбъект("Счет." + ВыбранныйПланСчетов().Идентификатор());
		ЗаписатьПолноеНаименование("УЕ"   ,  "Задолженность по расчетам в условных единицах");
		ЗаписатьПолноеНаименование("УЕ.60",  "Задолженность по приобретению в условных единицах");
		ЗаписатьПолноеНаименование("УЕ.62",  "Задолженность по реализации в условных единицах");
		ЗаписатьПолноеНаименование("ВР.6",   "Выполнение работ (в условных единицах)");		
		ЗаписатьПолноеНаименование("Н11.06", "Убытки за 2006 год");
		
		Состояние("Установка реквизитов документов"); 
		
		Док = СоздатьОбъект("Документ.СчетФактура");
		Док.ВыбратьДокументы();
		Пока Док.ПолучитьДокумент() = 1 Цикл			
			
			Если Док.Аванс = 1 Тогда 
				Док.ВидОперации = Перечисление.ВидыОперацийСчетаФактурыВыданного.Аванс;
			Иначе
				Док.ВидОперации = Перечисление.ВидыОперацийСчетаФактурыВыданного.Реализация; 
			КонецЕсли;
			
			Попытка
				Док.Записать();
				Состояние("Обработка " + Док);
			Исключение
				Сообщить("Не удалось обновить значение реквизитов документа: " + Док);
			КонецПопытки; 
			
		КонецЦикла; 
		
		Таб.ВывестиСекцию(Строка(Номер)); 
		
	ИначеЕсли Номер = 770488 Тогда 
		
		Состояние("Установка значений констант");
		ИсторияСпискаСчетов = СоздатьОбъект("Периодический");
		ИсторияСпискаСчетов.ИспользоватьОбъект("СчетаПереоцениваемыеВОсобомПорядке");
		ИсторияСпискаСчетов.ОбратныйПорядок();
		ИсторияСпискаСчетов.ВыбратьЗначения();
		Если ИсторияСпискаСчетов.ПолучитьЗначение() = 1 Тогда
			СписокСчетов = СоздатьОбъект("СписокЗначений");
			СписокСчетов.ИзСтрокиСРазделителями(ИсторияСпискаСчетов.Значение);
			
			НомерПозицииСчетаВУЕ = СписокСчетов.НайтиЗначение("62.8");		
			Если НомерПозицииСчетаВУЕ = 0 Тогда
				СписокСчетов.ДобавитьЗначение("62.8");
			КонецЕсли;   
			
			СписокСчетов.Сортировать();			
			Константа.СчетаПереоцениваемыеВОсобомПорядке.Установить('01.01.2007', СписокСчетов.ВСтрокуСРазделителями());
		КонецЕсли;		                        
		
	ИначеЕсли Номер = 770489 Тогда 

		Таб.ВывестиСекцию(Строка(Номер)); 

	ИначеЕсли Номер = 770494 Тогда
		
		Состояние("Установка значений констант");
		Константа.СтавкаРефинансирования.Установить('19.06.2007', 10);
		Константа.НалоговыйПериодПоНДС.Установить('01.01.2008',Перечисление.НалоговыеПериодыПоНДС.Квартал);  

		Таб.ВывестиСекцию(Строка(Номер));
		
	ИначеЕсли Номер = 770495 Тогда 

		Таб.ВывестиСекцию(Строка(Номер)); 
		
	ИначеЕсли Номер = 770496 Тогда 
			
		СпрВидыВычетов  = СоздатьОбъект("Справочник.ВидыВычетов");
		СпрВидыДоходов	= СоздатьОбъект("Справочник.ВидыДоходов"); 

		//установим налоговые вычеты
		УстановитьВидВычета("314","Сумма расходов при уступке прав требования по договору участия в долевом стр-ве");
		ПолноеНаименование = "Доходы, полученные налогоплательщиком при уступке прав требования по договору участия в долевом строительстве (договору инвестирования долевого строительства или по другому договору, связанному с долевым строительством)";
		УстановитьВидДоходаНДФЛ(1550,"Доходы, полученные при уступке прав треб. по дог. участия в дол. стр-ве", 314,ПолноеНаименование);
		УстановитьВидВычета("508","Вычет из суммы материальной помощи, при рождении (усыновлении) ребенка");
        ПолноеНаименование = "Материальная помощь, оказываемая работодателями своим работникам при рождении (усыновлении) ребенка";
		УстановитьВидДоходаНДФЛ(2762,ПолноеНаименование, 508,ПолноеНаименование); 
        ПолноеНаименование = "Доходы в виде процентов, получаемых по вкладам в банках в части превышения суммы процентов, начисленной в соответствии с условиями договора, над суммой процентов, рассчитанной по рублевым вкладам исходя из ставки рефинансирования Центрального банка Российской Федерации, действующей в течение периода, за который начислены указанные проценты (за исключением доходов, указанных в пункте 27 статьи 217 НК РФ), а по вкладам в иностранной валюте исходя из 9 % годовых";
		УстановитьВидДоходаНДФЛ(3020,"Сумма %% дохода по вкладам в банках свыше ставки рефинансирования", ,ПолноеНаименование); 
		
		Состояние("Установка значений констант");
		Константа.СтавкаРефинансирования.Установить('04.02.2008', 10.25);
		
	ИначеЕсли Номер = 770497 Тогда 

		Таб.ВывестиСекцию(Строка(Номер)); 
		
	ИначеЕсли Номер = 770498 Тогда
		
		Состояние("Установка значений констант");
		ИсторияСпискаСчетов = СоздатьОбъект("Периодический");
		ИсторияСпискаСчетов.ИспользоватьОбъект("СчетаПереоцениваемыеВОсобомПорядке");
		ИсторияСпискаСчетов.ОбратныйПорядок();
		ИсторияСпискаСчетов.ВыбратьЗначения();
		Если ИсторияСпискаСчетов.ПолучитьЗначение() = 1 Тогда
			СписокСчетов = СоздатьОбъект("СписокЗначений");
			СписокСчетов.ИзСтрокиСРазделителями(ИсторияСпискаСчетов.Значение);
			
			НомерПозицииСчетаВал = СписокСчетов.НайтиЗначение("60.22");		
			Если НомерПозицииСчетаВал = 0 Тогда
				СписокСчетов.ДобавитьЗначение("60.22");
			КонецЕсли; 
			НомерПозицииСчетаВал = СписокСчетов.НайтиЗначение("62.22");		
			Если НомерПозицииСчетаВал = 0 Тогда
				СписокСчетов.ДобавитьЗначение("62.22");
			КонецЕсли;   
			
			СписокСчетов.Сортировать();			
			Константа.СчетаПереоцениваемыеВОсобомПорядке.Установить('01.01.2008', СписокСчетов.ВСтрокуСРазделителями());
		КонецЕсли;
		
		Состояние("Добавление наименований счетов");
		Сч = СоздатьОбъект("Счет." + ВыбранныйПланСчетов().Идентификатор());
		ЗаписатьПолноеНаименование("ВАЛ"   ,  "Авансы в иностранной валюте");
		ЗаписатьПолноеНаименование("ВАЛ.60",  "Авансы поставщикам в валюте");
		ЗаписатьПолноеНаименование("ВАЛ.62",  "Авансы покупателей в валюте");
		ЗаписатьПолноеНаименование("Н11.07",  "Убытки за 2007 год");
		
		СпрВидыДоходов	= СоздатьОбъект("Справочник.ВидыДоходов");
		ПолноеНаименование = "Проценты (за исключением процентов по облигациям с ипотечным покрытием, эмитированным до 01.01.2007)";
		УстановитьВидДоходаНДФЛ(1011,"Проценты (за исключением процентов по облигациям)", ,ПолноеНаименование);

		Таб.ВывестиСекцию(Строка(Номер));
		
	ИначеЕсли Номер = 770499 Тогда 
		
		Таб.ВывестиСекцию(Строка(Номер)); 

	ИначеЕсли Номер = 770500 Тогда 
		
		Константа.СтавкаРефинансирования.Установить('29.04.2008', 10.5);
		
	ИначеЕсли Номер = 770501 Тогда 
		
		Константа.СтавкаРефинансирования.Установить('10.06.2008', 10.75);
			
	ИначеЕсли Номер = 770502 Тогда 
		
		Таб.ВывестиСекцию(Строка(Номер));
		
	ИначеЕсли Номер = 770503 Тогда 
		
		Константа.СтавкаРефинансирования.Установить('14.07.2008', 11);
		Константа.СтавкаРефинансирования.Установить('12.11.2008', 12);
		Константа.СтавкаРефинансирования.Установить('01.12.2008', 13);
		
	ИначеЕсли Номер = 770504 Тогда
	
		Константа.МетодНачисленияАмортизацииНУ.Установить('01.01.1980', Перечисление.МетодыНачисленияАмортизации.Линейный);        
		
		Состояние("Добавление наименований счетов");
		Сч = СоздатьОбъект("Счет." + ВыбранныйПланСчетов().Идентификатор());
		ЗаписатьПолноеНаименование("76.ВА"   ,  "НДС по авансам и предоплатам выданным");
		
		Состояние("Обработка справочника ""Сотрудники""");
		Объект = СоздатьОбъект("Справочник.Сотрудники");
		Объект.ВыбратьЭлементы();
		Пока Объект.ПолучитьЭлемент() = 1 Цикл
			Если Объект.ЭтоГруппа() = 1 Тогда
				Продолжить;
			КонецЕсли;
			
			РазмерВычетаНаРебенка = Объект.РазмерВычетаНаРебенка.Получить('01.01.2009');
			Если РазмерВычетаНаРебенка = 600 Тогда
				Объект.РазмерВычетаНаРебенка.Установить('01.01.2009', 1000);
				
			ИначеЕсли РазмерВычетаНаРебенка = 1200 Тогда
				Объект.РазмерВычетаНаРебенка.Установить('01.01.2009', 2000);
			КонецЕсли;
			
			РазмерВычетаНаРебенкаИнвалида = Объект.РазмерВычетаНаРебенкаИнвалида.Получить('01.01.2009');
			Если РазмерВычетаНаРебенкаИнвалида = 1200 Тогда
				Объект.РазмерВычетаНаРебенкаИнвалида.Установить('01.01.2009', 2000);
				
			ИначеЕсли РазмерВычетаНаРебенкаИнвалида = 2400 Тогда
				Объект.РазмерВычетаНаРебенкаИнвалида.Установить('01.01.2009', 4000);
			КонецЕсли;

		КонецЦикла;
		            
		Состояние("Обновление списка налоговых вычетов");
		СпрВидыВычетов  = СоздатьОбъект("Справочник.ВидыВычетов");
		УстановитьВидВычета("101","1000 руб. на каждого ребенка, пп.4 п.1 ст.218 НК");
		УстановитьВидВычета("102","2000 руб. на ребенка одинокому родителю, пп.4 п.1 ст.218 НК");
		УстановитьВидВычета("106","2000 руб. на ребенка-инвалида, пп.4 п.1 ст.218 НК");
		УстановитьВидВычета("107","4000 руб. на ребенка-инвалида одинокому родителю, пп.4 п.1 ст.218 НК");		
		
		Состояние("Обновление значений реквизитов документов");
		
		Док = СоздатьОбъект("Документ.СчетФактураПолученный");
		Док.ВыбратьДокументы();
		Пока Док.ПолучитьДокумент() = 1 Цикл			
			
			Если Док.СчетФактураНаВозврат = 1 Тогда
				Док.ВидОперации = Перечисление.ВидыОперацийСчетаФактурыПолученного.Возврат;
			Иначе                                                                          
				Док.ВидОперации = Перечисление.ВидыОперацийСчетаФактурыПолученного.Приобретение;
			КонецЕсли;
			
			Попытка
				Док.Записать();
				Состояние("Обработка " + Док);
			Исключение
				Сообщить("Не удалось обновить значение реквизитов документа: " + Док);
			КонецПопытки;
			
		КонецЦикла; 

		
		Таб.ВывестиСекцию(Строка(Номер));
		
	ИначеЕсли Номер = 770505 Тогда 
		
		Состояние("Обновление ставок налога на прибыль");
		НалогНаПрибыль = СоздатьОбъект("Справочник.НалогиИОтчисления");
		НалогНаПрибыль.НайтиЭлемент(глПолучитьНалог("ПрибФед"));
		НалогНаПрибыль.Ставка.Установить('01.01.2009', 2);
		НалогНаПрибыль.НайтиЭлемент(глПолучитьНалог("ПрибРесп"));
		НалогНаПрибыль.Ставка.Установить('01.01.2009', 18);
		
		
		ДатаСведений2001 = '01.01.2001';
		ДатаСведений2005 = '01.01.2005';
		ДатаСведений2008 = '01.01.2008';
		ДатаСведений2009 = '01.01.2009';
		
		Состояние("Обновление списка налоговых вычетов");
		СпрВидыВычетов  = СоздатьОбъект("Справочник.ВидыВычетов");
		СпрВидыДоходов	= СоздатьОбъект("Справочник.ВидыДоходов"); 
			
		ОбработатьСтандартныеВычеты2009(); 
		
        // размеры и пределы вычетов 2001 г.
		УстановитьЗначениеВычета("103",	400,	20000,	ДатаСведений2001);
		УстановитьЗначениеВычета("104",	500,		,	ДатаСведений2001);
		УстановитьЗначениеВычета("105",	3000,		,	ДатаСведений2001);
		УстановитьЗначениеВычета("108\101",	300,20000,	ДатаСведений2001);
		УстановитьЗначениеВычета("110\102",	600,20000,	ДатаСведений2001);
		УстановитьЗначениеВычета("501",		2000,	,	ДатаСведений2001);
		УстановитьЗначениеВычета("502",		2000,	,	ДатаСведений2001);
		УстановитьЗначениеВычета("503",		2000,	,	ДатаСведений2001);
		УстановитьЗначениеВычета("504",		2000,	,	ДатаСведений2001);
		УстановитьЗначениеВычета("505",		2000,	,	ДатаСведений2001);
		// размеры и пределы вычетов 2005 г.
		УстановитьЗначениеВычета("108\101",	600,	40000	, ДатаСведений2005);
		УстановитьЗначениеВычета("109\106",	1200,	40000	, ДатаСведений2005);
		УстановитьЗначениеВычета("110\102",	1200,	40000	, ДатаСведений2005);
		УстановитьЗначениеВычета("112\107",	2400,	400000	, ДатаСведений2005);
		УстановитьЗначениеВычета("313\311",	1000000,		, ДатаСведений2005); 
		УстановитьЗначениеВычета("505",		2000,			, ДатаСведений2005); 
		// размеры и пределы вычетов 2008 г.
		УстановитьЗначениеВычета("508",		50000,		,ДатаСведений2008); 
		УстановитьЗначениеВычета("313\311",	2000000,	,ДатаСведений2008);
		// размеры и пределы вычетов 2009 г.
		УстановитьЗначениеВычета("103",		400,	40000,	ДатаСведений2009);
		УстановитьЗначениеВычета("108\101",	1000,	280000,	ДатаСведений2009);
		УстановитьЗначениеВычета("109\106",	2000,	280000,	ДатаСведений2009);
		УстановитьЗначениеВычета("110\102",	2000,	280000,	ДатаСведений2009);
		УстановитьЗначениеВычета("111",		2000,	280000,	ДатаСведений2009);
		УстановитьЗначениеВычета("112\107",	4000,	280000,	ДатаСведений2009);
		УстановитьЗначениеВычета("113",		4000,	280000,	ДатаСведений2009);
		УстановитьЗначениеВычета("103",		400,	40000,	ДатаСведений2009);
		УстановитьЗначениеВычета("501",		4000,		,	ДатаСведений2009);
		УстановитьЗначениеВычета("502",		4000,		,	ДатаСведений2009);
		УстановитьЗначениеВычета("503",		4000,		,	ДатаСведений2009);
		УстановитьЗначениеВычета("504",		4000,		,	ДатаСведений2009);
		УстановитьЗначениеВычета("505",		4000,		,	ДатаСведений2009);
		УстановитьЗначениеВычета("506",		4000,		,	ДатаСведений2009);
		УстановитьЗначениеВычета("507",		10000,		,	ДатаСведений2009);
		
		
		// новые доходы
		ПолноеНаименование = "Доходы, полученные по операциям купли-продажи ценных бумаг, не обращающихся на организованном рынке ценных бумаг";
		УстановитьВидДоходаНДФЛ(1531,ПолноеНаименование, ,ПолноеНаименование);
		
		ПолноеНаименование = "Доходы, полученные по операциям с финансовыми инструментами срочных сделок, базисным активом по которым являются ценные бумаги";
		УстановитьВидДоходаНДФЛ(1532,ПолноеНаименование, ,ПолноеНаименование);
		
		ПолноеНаименование = "Доходы, полученные от продажи и погашения инвестиционных паев паевых инвестиционных фондов";
		УстановитьВидДоходаНДФЛ(1533,ПолноеНаименование, ,ПолноеНаименование);
		
		ПолноеНаименование = "Доход полученные по операциям купли-продажи ценных бумаг, не обращающихся на организованном рынке ценных бумаг, но отвечавших его требованиям";
		УстановитьВидДоходаНДФЛ(1536,ПолноеНаименование, ,ПолноеНаименование);
		 
		ПолноеНаименование = "Доходы, полученные в виде страховых выплат по договорам страхования в виде оплаты стоимости санаторно-курортных путевок""";
		УстановитьВидДоходаНДФЛ(1201,ПолноеНаименование, ,ПолноеНаименование);
		
		ПолноеНаименование = "Доходы, полученные в виде страховых выплат по договорам добровольного страхования жизни (за исключением добровольного пенсионного страхования)";
		УстановитьВидДоходаНДФЛ(1202,ПолноеНаименование, ,ПолноеНаименование);
		
		ПолноеНаименование = "Доходы, полученные в виде страховых выплат по договорам добровольного имущественного страхования (включая страхование гражданской ответственности)";
		УстановитьВидДоходаНДФЛ(1203,ПолноеНаименование, ,ПолноеНаименование);
		
		ПолноеНаименование = "Доходы в виде денежных (выкупных) сумм при расторжении договора добр. пенс. страхования за вычетом сумм страховых взносов, уплаченных по договору";
		УстановитьВидДоходаНДФЛ(1213,ПолноеНаименование, ,ПолноеНаименование);
		
		ПолноеНаименование = "Доходы в виде денежных (выкупных) сумм при расторжении договора добровольного пенс. страхования в части сумм страховых взносов, уплаченных по договору";
		УстановитьВидДоходаНДФЛ(1214,ПолноеНаименование, ,ПолноеНаименование);
		
		ПолноеНаименование = "Доходы в виде денежных (выкупных) сумм при расторжении договора негосударственного пенсионного обеспечения в части сумм платежей (взносов) по договору";
		УстановитьВидДоходаНДФЛ(1230,ПолноеНаименование, ,ПолноеНаименование);
		
		ПолноеНаименование = "Доходы, полученные от отчуждения авторских или иных смежных прав";
		УстановитьВидДоходаНДФЛ(1301,ПолноеНаименование, ,ПолноеНаименование);
		
		ПолноеНаименование = "Вознаграждение, выплачиваемое наследникам (правопреемникам) авторов произведений науки, литературы, искусства, открытий, изобретений и пром. образцов";
		УстановитьВидДоходаНДФЛ(2210,ПолноеНаименование, ,ПолноеНаименование); 
		
		ПолноеНаименование = "Доходы в денежной и натуральной формах, получаемые в порядке дарения";
		УстановитьВидДоходаНДФЛ(2220,ПолноеНаименование, ,ПолноеНаименование);
		
		//Обработка карточек за 2009 год, введенных в старом формате 
		Состояние("Обновление налоговых карточек за 2009 г.");
		
		Сотрудники = СоздатьОбъект("Справочник.Сотрудники");
		КарточкиУчетаДоходов = СоздатьОбъект("Справочник.КарточкиУчетаДоходов");
		
		Сотрудники.ВыбратьЭлементы();
		Пока Сотрудники.ПолучитьЭлемент() = 1 Цикл
			КарточкиУчетаДоходов.ИспользоватьВладельца(Сотрудники.ТекущийЭлемент());
			
			КарточкиУчетаДоходов.ВыбратьЭлементы();
			Пока КарточкиУчетаДоходов.ПолучитьЭлемент() = 1 Цикл
				Если КарточкиУчетаДоходов.Код = "2009" Тогда
					СпискополейКарточки = ЗначениеИзСтроки(КарточкиУчетаДоходов.СписокПолейНалоговойКарточки) ;
					Если ПустоеЗначение(СокрЛП(СпискополейКарточки)) = 1 Тогда
						Продолжить
					КонецЕсли;
					
					СпискополейКарточкиНов = СоздатьОбъект("СписокЗначений");
					Стр = ""; 
					
					СтрокаДанных = ЗначениеВСтроку(СпискополейКарточки);
					
					Для СтрокаСписка = 1 По СпискополейКарточки.РазмерСписка() Цикл
						
						Значение = СпискополейКарточки.ПолучитьЗначение(СтрокаСписка,Стр);
						
						Если Лев(Стр,5) = "СВМес" Тогда
							
							КодРеквизита = Прав(Стр,3);
							Код = Лев(КодРеквизита,1);
							Месяц = Прав(КодРеквизита,2);
							
							Если Код = "1" Тогда 
								НовКод = "8";
							ИначеЕсли Код = "2" Тогда
								НовКод = "10";
							ИначеЕсли Код = "6" Тогда
								НовКод = "9";
								СпискополейКарточкиНов.Установить("СВМес11" + Месяц,0);							
							ИначеЕсли Код = "7" Тогда
								НовКод = "12";
							Иначе
								СпискополейКарточкиНов.Установить("СВМес13" + Месяц,0);
								СпискополейКарточкиНов.Установить(Стр,Значение);
							КонецЕсли;
							
							СпискополейКарточкиНов.Установить("СВМес" + НовКод + Месяц,Значение);
							
						ИначеЕсли Лев(Стр,6) = "ИСВМес" Тогда
							
							Код = Прав(Стр,1);
							
							Если Код = "1" Тогда 
								НовКод = "8";
							ИначеЕсли Код = "2" Тогда
								НовКод = "10";
							ИначеЕсли Код = "6" Тогда
								НовКод = "9";
								СпискополейКарточкиНов.Установить("ИСВМес11",0);
							ИначеЕсли Код = "7" Тогда
								НовКод = "12";
							Иначе
								СпискополейКарточкиНов.Установить("ИСВМес13",0);
								СпискополейКарточкиНов.Установить(Стр,Значение);
							КонецЕсли;
							
							СпискополейКарточкиНов.Установить("ИСВМес" + НовКод,Значение);
							
						Иначе
							
							СпискополейКарточкиНов.Установить(Стр,Значение);
							
						КонецЕсли;
						
					КонецЦикла;
					
					СтрокаДанных = ЗначениеВСтроку(СпискополейКарточкиНов);
					КарточкиУчетаДоходов.СписокПолейНалоговойКарточки = СтрокаДанных;
					КарточкиУчетаДоходов.Записать();
					
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
		
		//Обработка вычетов сотдуников, приведение их к формату 2009 года
		Состояние("Обновление списка вычетов сотрудников");
		
		ВидыВычетов = СоздатьОбъект("Справочник.ВидыВычетов");
		ВидыВычетов.ВыбратьЭлементы();
		Пока ВидыВычетов.ПолучитьЭлемент() = 1 Цикл
			Если ВидыВычетов.КодДляОтчетности2007 = "101" Тогда
				Вычет101 = ВидыВычетов.ТекущийЭлемент();
			ИначеЕсли ВидыВычетов.КодДляОтчетности2007 = "102" Тогда
				Вычет102 = ВидыВычетов.ТекущийЭлемент();
			ИначеЕсли ВидыВычетов.КодДляОтчетности2007 = "103" Тогда
				Вычет103 = ВидыВычетов.ТекущийЭлемент();
			ИначеЕсли ВидыВычетов.КодДляОтчетности2007 = "104" Тогда
				Вычет104 = ВидыВычетов.ТекущийЭлемент();
			ИначеЕсли ВидыВычетов.КодДляОтчетности2007 = "105" Тогда
				Вычет105 = ВидыВычетов.ТекущийЭлемент();
			ИначеЕсли ВидыВычетов.КодДляОтчетности2007 = "106" Тогда
				Вычет106 = ВидыВычетов.ТекущийЭлемент();
			ИначеЕсли ВидыВычетов.КодДляОтчетности2007 = "107" Тогда
				Вычет107 = ВидыВычетов.ТекущийЭлемент();
			ИначеЕсли ВидыВычетов.КодДляОтчетности2007 = "311" Тогда
				Вычет311 = ВидыВычетов.ТекущийЭлемент();
			ИначеЕсли ВидыВычетов.КодДляОтчетности2007 = "312" Тогда
				Вычет312 = ВидыВычетов.ТекущийЭлемент();            
			КонецЕсли;
		КонецЦикла;
		
		ВычетыСотрудниковПоНДФЛ = СоздатьОбъект("Справочник.ВычетыСотрудниковПоНДФЛ");
		
		ИмущественныеВычеты = СоздатьОбъект("Справочник.ИмущественныеВычеты");
		
		ТаблицаВычетовСотрудников = СоздатьОбъект("ТаблицаЗначений");
		ТаблицаВычетовСотрудников.НоваяКолонка("Сотрудник");
		ТаблицаВычетовСотрудников.НоваяКолонка("ВидВычета");
		ТаблицаВычетовСотрудников.НоваяКолонка("ДатаНачала", "Дата");
		ТаблицаВычетовСотрудников.НоваяКолонка("ДатаОкончания", "Дата");
		ТаблицаВычетовСотрудников.НоваяКолонка("Количество", "Число");
		ТаблицаВычетовСотрудников.НоваяКолонка("НомерУведомления");
		ТаблицаВычетовСотрудников.НоваяКолонка("ДатаУведомления", "Дата");
		ТаблицаВычетовСотрудников.НоваяКолонка("Сумма", "Число");
		ТаблицаВычетовСотрудников.НоваяКолонка("КодФНС");
		
		Сотрудники.ВыбратьЭлементы();
		Вычеты = Создатьобъект("Периодический");		
		Пока Сотрудники.ПолучитьЭлемент() = 1 Цикл
			ТаблицаВычетовСотрудников.УдалитьСтроки(); 
			
			Если Сотрудники.ТекущийЭлемент().ЭтоГруппа() = 1 Тогда
				Продолжить;
			КонецЕсли;
			
			//Сведения о личных вычетах
			Вычеты.ИспользоватьОбъект("ТипВычета",Сотрудники.ТекущийЭлемент());
			Вычеты.ВыбратьЗначения();
			ПерваяСтрока = 1;
			Пока Вычеты.ПолучитьЗначение() = 1 Цикл
				
				Если ПерваяСтрока = 0 Тогда
					ТаблицаВычетовСотрудников.ДатаОкончания = Вычеты.ДатаЗнач;					
				КонецЕсли;
				ПерваяСтрока = 0;
				ТаблицаВычетовСотрудников.НоваяСтрока();
				ТаблицаВычетовСотрудников.Сотрудник = Сотрудники.ТекущийЭлемент();
				Если Вычеты.Значение = Перечисление.ТипыВычетов.Обычный Тогда
					ТаблицаВычетовСотрудников.ВидВычета = Вычет103;
				ИначеЕсли Вычеты.Значение = Перечисление.ТипыВычетов.Льготный1 Тогда
					ТаблицаВычетовСотрудников.ВидВычета = Вычет104;
				ИначеЕсли Вычеты.Значение = Перечисление.ТипыВычетов.Льготный2 Тогда
					ТаблицаВычетовСотрудников.ВидВычета = Вычет105;
				Иначе
					ТаблицаВычетовСотрудников.Количество = 0;
				КонецЕсли;				
				ТаблицаВычетовСотрудников.Количество = 1;
				ТаблицаВычетовСотрудников.ДатаНачала = Вычеты.ДатаЗнач;
			КонецЦикла;
			
			//Сведения о детях
			Вычеты.ИспользоватьОбъект("Дети",Сотрудники.ТекущийЭлемент());
			Вычеты.ВыбратьЗначения();
			ПерваяСтрока = 1;
			Пока Вычеты.ПолучитьЗначение() = 1 Цикл
				
				Если ПерваяСтрока = 0 Тогда
					ТаблицаВычетовСотрудников.ДатаОкончания = Вычеты.ДатаЗнач;					
				КонецЕсли;
				ПерваяСтрока = 0;
				ТаблицаВычетовСотрудников.НоваяСтрока();
				ТаблицаВычетовСотрудников.Сотрудник = Сотрудники.ТекущийЭлемент();
				Если (Сотрудники.РазмерВычетаНаРебенка.Получить(Вычеты.ДатаЗнач) = 300) 
				или (Сотрудники.РазмерВычетаНаРебенка.Получить(Вычеты.ДатаЗнач) = 600) 
				или (Сотрудники.РазмерВычетаНаРебенка.Получить(Вычеты.ДатаЗнач) = 1000) Тогда
					ТаблицаВычетовСотрудников.ВидВычета = Вычет101;
				Иначе
					ТаблицаВычетовСотрудников.ВидВычета = Вычет102;
				КонецЕсли;				
				ТаблицаВычетовСотрудников.Количество = Вычеты.Значение;
				ТаблицаВычетовСотрудников.ДатаНачала = Вычеты.ДатаЗнач;
			КонецЦикла;
			
			//Сведения о детях-инвалидах
			Вычеты.ИспользоватьОбъект("ДетиИнвалиды",Сотрудники.ТекущийЭлемент());
			Вычеты.ВыбратьЗначения();
			ПерваяСтрока = 1;
			Пока Вычеты.ПолучитьЗначение() = 1 Цикл
				
				Если ПерваяСтрока = 0 Тогда
					ТаблицаВычетовСотрудников.ДатаОкончания = Вычеты.ДатаЗнач;					
				КонецЕсли;   
				ПерваяСтрока = 0;
				ТаблицаВычетовСотрудников.НоваяСтрока();
				ТаблицаВычетовСотрудников.Сотрудник = Сотрудники.ТекущийЭлемент();
				Если (Сотрудники.РазмерВычетаНаРебенкаИнвалида.Получить(Вычеты.ДатаЗнач) = 600) 
				или (Сотрудники.РазмерВычетаНаРебенкаИнвалида.Получить(Вычеты.ДатаЗнач) = 1200) 
				или (Сотрудники.РазмерВычетаНаРебенкаИнвалида.Получить(Вычеты.ДатаЗнач) = 2000) Тогда
					ТаблицаВычетовСотрудников.ВидВычета = Вычет106;
				Иначе
					ТаблицаВычетовСотрудников.ВидВычета = Вычет107;
				КонецЕсли;				
				ТаблицаВычетовСотрудников.Количество = Вычеты.Значение;
				ТаблицаВычетовСотрудников.ДатаНачала = Вычеты.ДатаЗнач;
			КонецЦикла;
			
			//Сведения об имущественных вычетах
			ИмущественныеВычеты.ИспользоватьВладельца(Сотрудники.ТекущийЭлемент());
			ИмущественныеВычеты.ВыбратьЭлементы();
			Пока ИмущественныеВычеты.ПолучитьЭлемент() = 1 Цикл
				Если ИмущественныеВычеты.ПометкаУдаления() = 0 Тогда
					
					Если ИмущественныеВычеты.Сумма311 <> 0 Тогда
						ТаблицаВычетовСотрудников.НоваяСтрока();
						ТаблицаВычетовСотрудников.Сотрудник = Сотрудники.ТекущийЭлемент();
						ТаблицаВычетовСотрудников.ВидВычета = Вычет311;
						ТаблицаВычетовСотрудников.Сумма = ИмущественныеВычеты.Сумма311;
						ТаблицаВычетовСотрудников.НомерУведомления = ИмущественныеВычеты.НомерУведомления;
						ТаблицаВычетовСотрудников.ДатаУведомления = ИмущественныеВычеты.ДатаУведомления;
						ТаблицаВычетовСотрудников.КодФНС = ИмущественныеВычеты.КодФНС;
						ТаблицаВычетовСотрудников.Количество = 1;
						ТаблицаВычетовСотрудников.ДатаНачала = Дата("01.01." + ИмущественныеВычеты.Код);
						ТаблицаВычетовСотрудников.ДатаОкончания = Дата("31.12." + ИмущественныеВычеты.Код);
					КонецЕсли; 
					
					Если ИмущественныеВычеты.Сумма312 <> 0 Тогда
						ТаблицаВычетовСотрудников.НоваяСтрока();
						ТаблицаВычетовСотрудников.Сотрудник = Сотрудники.ТекущийЭлемент();
						ТаблицаВычетовСотрудников.ВидВычета = Вычет312;
						ТаблицаВычетовСотрудников.Сумма = ИмущественныеВычеты.Сумма312;
						ТаблицаВычетовСотрудников.НомерУведомления = ИмущественныеВычеты.НомерУведомления;
						ТаблицаВычетовСотрудников.ДатаУведомления = ИмущественныеВычеты.ДатаУведомления;
						ТаблицаВычетовСотрудников.КодФНС = ИмущественныеВычеты.КодФНС;
						ТаблицаВычетовСотрудников.Количество = 1;
						ТаблицаВычетовСотрудников.ДатаНачала = Дата("01.01." + ИмущественныеВычеты.Код);
						ТаблицаВычетовСотрудников.ДатаОкончания  = Дата("31.12." + ИмущественныеВычеты.Код);
					КонецЕсли;
					
				КонецЕсли;
			КонецЦикла; 
			
			ТаблицаВычетовСотрудников.Свернуть("Сотрудник,ВидВычета,ДатаНачала,ДатаОкончания,НомерУведомления,ДатаУведомления,КодФНС", "Количество, Сумма");
			
			ТаблицаВычетовСотрудников.ВыбратьСтроки();
			Пока ТаблицаВычетовСотрудников.ПолучитьСтроку() = 1 Цикл
				
				Для Кол = 1 По ТаблицаВычетовСотрудников.Количество Цикл
					
					Если ПустоеЗначение(ТаблицаВычетовСотрудников.ВидВычета) = 1 Тогда
						Продолжить;
					КонецЕсли;
					
					Если ТаблицаВычетовСотрудников.ДатаНачала = ТаблицаВычетовСотрудников.ДатаОкончания Тогда
						Продолжить;
					КонецЕсли;
					
					ВычетыСотрудниковПоНДФЛ.Новый();
					ВычетыСотрудниковПоНДФЛ.Владелец = ТаблицаВычетовСотрудников.Сотрудник;
					ВычетыСотрудниковПоНДФЛ.ВидВычета = ТаблицаВычетовСотрудников.ВидВычета;
					ВычетыСотрудниковПоНДФЛ.ДатаНачала = ТаблицаВычетовСотрудников.ДатаНачала;
					ВычетыСотрудниковПоНДФЛ.ДатаОкончания = ТаблицаВычетовСотрудников.ДатаОкончания;
					ВычетыСотрудниковПоНДФЛ.КодФНС= ТаблицаВычетовСотрудников.КодФНС;
					ВычетыСотрудниковПоНДФЛ.Сумма = ТаблицаВычетовСотрудников.Сумма;
					ВычетыСотрудниковПоНДФЛ.НомерУведомления = ТаблицаВычетовСотрудников.НомерУведомления;
					ВычетыСотрудниковПоНДФЛ.ДатаУведомления = ТаблицаВычетовСотрудников.ДатаУведомления;
					ВычетыСотрудниковПоНДФЛ.Записать();
					
				КонецЦикла;
			КонецЦикла;
			
		КонецЦикла;
		
		Таб.ВывестиСекцию(Строка(Номер));
		
	ИначеЕсли Номер = 770506 Тогда 
		
		Константа.ПрименятьВ2008ГодуПравилаПБУ142000 = Перечисление.Булево.Да;
		
		Состояние("Обновление значений реквизитов справочников");
		
		НематериальныеАктивы = СоздатьОбъект("Справочник.НематериальныеАктивы");
		НематериальныеАктивы.ВыбратьЭлементы();
		Пока НематериальныеАктивы.ПолучитьЭлемент() = 1 Цикл
		    НематериальныеАктивы.Коэффициент = 1;
			НематериальныеАктивы.Записать();
		КонецЦикла;        
		                  
		Состояние("Обновление значений реквизитов документов");
		
		ПринятиеКУчетуНМА = СоздатьОбъект("Документ.ПринятиеКУчетуНМА");
		ПринятиеКУчетуНМА.ВыбратьДокументы();
		Пока ПринятиеКУчетуНМА.ПолучитьДокумент() = 1 Цикл
		    ПринятиеКУчетуНМА.Коэффициент = 1;
			ПринятиеКУчетуНМА.Записать();
		КонецЦикла; 
		
		Состояние("Добавление наименований счетов");
		
		Сч = СоздатьОбъект("Счет." + ВыбранныйПланСчетов().Идентификатор());
		ЗаписатьПолноеНаименование("Н11.08", "Убытки за 2008 год");
		
		Таб.ВывестиСекцию(Строка(Номер)); 
		
	ИначеЕсли Номер = 770507 Тогда
		
		Константа.СтавкаРефинансирования.Установить('24.04.2009', 12.5);
		Константа.СтавкаРефинансирования.Установить('14.05.2009', 12);
		Константа.СтавкаРефинансирования.Установить('05.06.2009', 11.5);
		
		Состояние("Обновление списка налоговых вычетов");
		СпрВидыВычетов  = СоздатьОбъект("Справочник.ВидыВычетов");		
		УстановитьЗначениеВычета("508",		50000,		,'01.01.2008'); 
		
		Таб.ВывестиСекцию(Строка(Номер));
		
	ИначеЕсли Номер = 770508 Тогда
		
		Константа.СтавкаРефинансирования.Установить('13.07.2009', 11);
		Константа.СтавкаРефинансирования.Установить('10.08.2009', 10.75);

	ИначеЕсли Номер = 770510 Тогда
		
		//Обновление данных, связанное с отменой ЕСН
		Константа.ТарифСтраховыхВзносов.Установить('01.01.2010' ,?(Константа.ИнвалиднаяОрганизация.Получить('01.01.2010') = Да,Перечисление.ТарифыСтраховыхВзносов.ОрганизацияИнвалидов,Перечисление.ТарифыСтраховыхВзносов.ОбщийНалоговыйРежим));
		Константа.ПредельнаяВеличинаБазыСтраховыхВзносов.Установить('01.01.2010', 415000);
		
		ЗаполнитьТарифыСтраховыхВзносов();
		
		СпрСотрудники = СоздатьОбъект("Справочник.Сотрудники");
		СпрСотрудники.ВыбратьЭлементы();
		Пока СпрСотрудники.ПолучитьЭлемент() = 1 Цикл
			Если СпрСотрудники.ЭтоГруппа() = 0 Тогда
				Если СпрСотрудники.НачислятьНалогиСФОТ.Получить('01.01.2010') = 0 Тогда 
					СпрСотрудники.НеВзиматьВзносыПФРиФСС.Установить('01.01.2010',1);
					СпрСотрудники.НеВзиматьВзносыФОМС.Установить('01.01.2010',1);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		СпрНалогиИОтчисления = СоздатьОбъект("Справочник.НалогиИОтчисления");
		Если СпрНалогиИОтчисления.НайтиПоКоду("ФФОМС") = 1 Тогда
			СпрНалогиИОтчисления.Наименование = "Взносы в ФФОМС";
		 	СпрНалогиИОтчисления.Записать();		 	
		 КонецЕсли;
		Если СпрНалогиИОтчисления.НайтиПоКоду("ТФОМС") = 1 Тогда
			СпрНалогиИОтчисления.Наименование = "Взносы в ТФОМС";
		 	СпрНалогиИОтчисления.Записать();		 	
		 КонецЕсли;
		Если СпрНалогиИОтчисления.НайтиПоКоду("ФСС") = 1 Тогда
			СпрНалогиИОтчисления.Наименование = "Взносы в ФСС";
		 	СпрНалогиИОтчисления.Записать();		 	
		 КонецЕсли;
		 
 		 // добавление в план счетов
 		 Состояние("Добавление наименований счетов");
 		 Сч = СоздатьОбъект("Счет." + ВыбранныйПланСчетов().Идентификатор());
 		 ЗаписатьПолноеНаименование("СВЗ"      ,  "Страховые взносы");
 		 ЗаписатьПолноеНаименование("СВЗ.01"   ,  "Страховые взносы по деятельности, не облагаемой ЕНВД");
 		 ЗаписатьПолноеНаименование("СВЗ.01.1" ,  "Взносы на страховую часть трудовой пенсии");
 		 ЗаписатьПолноеНаименование("СВЗ.01.2" ,  "Взносы на накопительную часть трудовой пенсии");
 		 ЗаписатьПолноеНаименование("СВЗ.01.3" ,  "Взносы в ФСС");
 		 ЗаписатьПолноеНаименование("СВЗ.01.4" ,  "Взносы в ФФОМС");
 		 ЗаписатьПолноеНаименование("СВЗ.01.5" ,  "Взносы в ТФОМС");
 		 ЗаписатьПолноеНаименование("СВЗ.02"   ,  "Страховые взносы по деятельности, облагаемой ЕНВД");
 		 ЗаписатьПолноеНаименование("СВЗ.02.1" ,  "Взносы на страховую часть трудовой пенсии");
 		 ЗаписатьПолноеНаименование("СВЗ.02.2" ,  "Взносы на накопительную часть трудовой пенсии");
 		 
 		 НалогиСФОТ = СоздатьОбъект("Справочник.НалогиИОтчисления");
 		 НалогиСФОТ.ВыбратьЭлементы(); 		 
 		 Пока НалогиСФОТ.ПолучитьЭлемент() = 1 Цикл
 		 	Если (НалогиСФОТ.Код = "ПФР_страх")  Или 
 		 	(НалогиСФОТ.Код = "ПФР_нак")  Тогда    		 		
 		 		НалогиСФОТ.ПорядокОтраженияВНУ.Установить('01.01.2010', Перечисление.ПорядокОтраженияНалоговНУ.ПропорциональноРасчетнойБазе);
 		 		НалогиСФОТ.Записать();
 		 	КонецЕсли;
 		 КонецЦикла;
		
		//Установка ставки рефинансирования
		Константа.СтавкаРефинансирования.Установить('15.09.2009', 10.5);
		Константа.СтавкаРефинансирования.Установить('30.09.2009', 10);
		Константа.СтавкаРефинансирования.Установить('30.10.2009', 9.5);
		Константа.СтавкаРефинансирования.Установить('25.11.2009', 9);		
		
		
		Таб.ВывестиСекцию(Строка(Номер));
		
	ИначеЕсли Номер = 770511 Тогда
		
        // добавление в план счетов
 		Состояние("Добавление наименований счетов");
		Сч = СоздатьОбъект("Счет." + ВыбранныйПланСчетов().Идентификатор());
		ЗаписатьПолноеНаименование("Н11.09", "Убытки за 2009 год");
		
		Константа.СтавкаРефинансирования.Установить('28.12.2009', 8.75);		
		Таб.ВывестиСекцию(Строка(Номер));
		
	КонецЕсли;
	
	НомерСтр = Строка(Номер);
	Константа.НомерРелиза = Лев(НомерСтр, 1)+"."+Сред(НомерСтр, 2, 2)+"."+Прав(НомерСтр, 3);
	ЗафиксироватьТранзакцию();
	
КонецПроцедуры // ОбновлениеРелиза()


//*****************************************************************************
// Предопределенная процедура
//
Процедура ПриОткрытии() 
	
	ОбработкаСчетовВДокументахВыполнена = 0;
	ОбработкаСчетовВСправочникахВыполнена = 0;

	Если ВРег(Форма.Параметр) = ВРег("ПоказатьОбновления") Тогда
		Форма.Заголовок("Дополнение к описанию");
		Возврат;
	КонецЕсли;
	
	Таб = СоздатьОбъект("Таблица");
	Таб.ИсходнаяТаблица("Обновления");
	Таб.ТолькоПросмотр(1);
	Таб.Опции(0, 0, 0, 0);
	
	СтатусВозврата(0);
	
	НомерСтр = Лев(Метаданные.Комментарий, 8);
	НомерРелизаКонфигурации = Число(СтрЗаменить(НомерСтр, ".", ""));
	
	НомерСтр = Константа.НомерРелиза;
	НомерРелизаИБ = Число(СтрЗаменить(НомерСтр, ".", ""));
	
	НачальныйНомерРелиза = Константа.НомерРелиза;
		
	Если НомерРелизаКонфигурации <> НомерРелизаИБ Тогда
		Сообщить("Выполняется проверка необходимых обновлений информационной базы.", "I");
		Для НомерРелиза = НомерРелизаИБ+1 По НомерРелизаКонфигурации Цикл  
			ОбновлениеРелиза(НомерРелиза);
			Если ДальнейшееОбновлениеНевозможно = 1 Тогда
				Сообщить("Обновление информационной базы не завершено.", "!");
			    Возврат;
			КонецЕсли;
		КонецЦикла;
		Сообщить("Проверка необходимых обновлений информационной базы завершена.", "I");
		
		СохранитьЗначение("НеобходимостьОткрытияИнформационныйБлок", 2);
		ПереходНа1СБухгалтерию8 = 0;
		Если  (ПустоеЗначение(ВосстановитьЗначение("НомерРелизаДоОбновления")) = 0) и (глНомерРелиза() <> ВосстановитьЗначение("НомерРелизаДоОбновления")) Тогда
			Если глНомерРелиза() <> ВосстановитьЗначение("НомерРелизаДоОбновления") Тогда
				ПереходНа1СБухгалтерию8 = 1;
			КонецЕсли;
		КонецЕсли;

		Если ПереходНа1СБухгалтерию8 = 0 Тогда
			Если Таб.ВысотаТаблицы() > 0 Тогда
				Таб.Показать("Дополнения к документации","");
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ПриОткрытии() 

//******************************************************************************
// Предопределенная процедура.
//
Процедура ПриВыбореЯчейкиТаблицы(Адрес,Значение)

	Если Лев(Адрес, 3) = "огл" Тогда
		Ссылка = "s" + Сред(Адрес, 4);
		Таблица.АктивнаяОбласть(Ссылка);                    
	ИначеЕсли Лев(Адрес, 1) = "s" Тогда
		Ссылка = "огл"+Сред(Адрес, 2);
		Таблица.АктивнаяОбласть(Ссылка);                    
	КонецЕсли;

КонецПроцедуры // ПриВыбореЯчейкиТаблицы()

ТаблицаСчетовП68 = СоздатьОбъект("ТаблицаЗначений");
ТаблицаСчетовП68.НоваяКолонка("СчетИсточник", "Счет");
ТаблицаСчетовП68.НоваяКолонка("СчетПриемник", "Счет");

СписокСчетов68 = СоздатьОбъект("СписокЗначений");

ИнформацияОРаздельномУчетеВыведена = 0;