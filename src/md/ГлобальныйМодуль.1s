Перем глСписокУлиц Экспорт;
Перем глВладелецСпискаУлиц Экспорт;

// Глобальные переменные необходимые для стандартных отчетов
Перем глРасшифровка Экспорт;
Перем глФлагРасшифровки Экспорт;
Перем глТаблица Экспорт;
Перем глОбновить Экспорт;
Перем сФорматС, сФорматВ, сФорматК;

///////////////////////////////////////////////////////////////////////////
// Глобальные переменные правовой поддержки и Видеокурса
Перем Норм_Компонента Экспорт;
Перем Норм_Параметр Экспорт;
Перем Видео_Компонента Экспорт;

///////////////////////////////////////////////////////////////////////////
//
Перем БухИтоги Экспорт;

///////////////////////////////////////////////////////////////////////////
//
Перем глТаблицаСчетов Экспорт;
Перем глОбщиеУстановки Экспорт;
Перем глЗначениеОтбора Экспорт;
Перем глПоОплате Экспорт;
Перем глПоОтгрузке Экспорт;
Перем Да Экспорт;
Перем Нет Экспорт;

Перем ОтборЗатратИздержек Экспорт;
Перем ОтборНоменклатуры Экспорт;
Перем глТекущаяСтрока Экспорт;
Перем глИмяДоговораДляПлатежейБезДоговора Экспорт; 
Перем глИмяДоговораДляПлатежейБезДоговораТорг Экспорт; 
Перем глИмяСотрудникаПоВсем Экспорт;
Перем глИмяСтатьиРасходовБудущихПериодовДляОбмена Экспорт;
Перем глФондыЕСН Экспорт; 

Перем глСпрТарифСтраховыхВзносов Экспорт; // справочник ТарифСтраховыхВзносов
Перем глТаблицаСтавокСтраховыхВзносов Экспорт; // таблица значений, содержит ставки страховыъх взносов в разрезе тарифов

Перем глСписокОбщихЖурналов Экспорт;

// Переменная каталога внешних печатных форм
Перем глКаталогПечФорм Экспорт;

// Универсальный механизм "Комментирование выполняемых действий"
Перем глСообщенияТрассировки Экспорт; // список сообщений, описывающих ход расчета

//******************************************************************************
// настройки торгового оборудования
Перем глКаталогОписаний        Экспорт;

// фискальный регистратор
Перем глФРВкл                  Экспорт;
Перем глФР                     Экспорт;
Перем глФРМодель               Экспорт;
Перем глФРОбработка            Экспорт;
Перем глФРКомпонента           Экспорт;
Перем глФРПрогИд               Экспорт;

Перем глФРПарольАдминистратора Экспорт;
Перем глФРПарольПользователя   Экспорт;
Перем глФРДляПриемаНаличныхОтЮрЛиц   Экспорт;  

//******************************************************************************

Функция   глСоздатьТрассировку(Описание)                                     Экспорт Далее 
Функция   глАдресСоответствуетТребованиямМНС(Адрес) 						 Экспорт Далее 
Процедура глСообщениеТрассировки(Трассировка, Сообщение, ТипСообщения=0, ИзменениеУровняСообщения=0, Знач _П01="", _П01Формат="", Знач _П02="", _П02Формат="", Знач _П03="", _П03Формат="", Знач _П04="", _П04Формат="",Форма="",Объект="",Контрол="") Экспорт Далее
Процедура глПоказатьТрассировку(Трассировка) Экспорт  Далее
Процедура глСообщениеПроведения(ТекстСообщения, ПроводимыйДок, ТипСообщения=-1, ИзменениеУровняСообщения=0, Форма="", Объект="", Контрол="", ВыводитьВТаблицу=1) Экспорт  Далее
Функция глПредставлениеАдреса(Знач Адрес, Способ = 0) Экспорт Далее
Функция глРазложить(Знач Стр, Разделитель = ",") Экспорт Далее
Функция ПроверитьЛегальностьПолученияОбновления() Далее

//*****************************************************************************
// глПереписатьИзТаблицыВТаблицу(ТаблицаОткуда,ТаблицаКуда)
//
// Параметры
//		ТаблицаОткуда,ТаблицаКуда - таблицы значений одинаковой (!) структуры
//
// Возвращаемое значение
//  нет
//
// Описание
//		дописывает значения из ТаблицаОткуда в ТаблицаКуда
//
Процедура глПереписатьИзТаблицыВТаблицу(ТаблицаОткуда,ТаблицаКуда) Экспорт
	Если ТаблицаОткуда.КоличествоСтрок() > 0 Тогда
		БылоСтрок = ТаблицаКуда.КоличествоСтрок();
		ТаблицаКуда.КоличествоСтрок(БылоСтрок+ТаблицаОткуда.КоличествоСтрок());
		ТаблицаКуда.Заполнить(ТаблицаОткуда,БылоСтрок+1); // так методически правильнее
	КонецЕсли;
КонецПроцедуры //глПереписатьИзТаблицыВТаблицу

//******************************************************************************
//	глРазделить(Стр,Разделитель)
//
//	Параметры:
//		Стр			- строка, которую необходимо разложить на подстроки
//		Разделитель - строка-разделитель, по умолчанию - запятая
//
//	Возвращаемое значение:
//		Многострочная строка, составленная из подстрок
//
//	Описание:
//		Разбивает строку на многострочную строку по разделителю
//
Функция глРазделить(Знач Стр,Разделитель=",") Экспорт
	Если Разделитель=" " Тогда
		Пока Найти(Стр,"  ")>0 Цикл
			Стр = СтрЗаменить(Стр,"  "," ")
		КонецЦикла
	КонецЕсли;
	Возврат СтрЗаменить(Стр,Разделитель,РазделительСтрок)
КонецФункции	// глРазделить

//******************************************************************************
//	глФамилияИмяОтчество(Объект,Фамилия,Имя,Отчество)
//
//	Параметры:
//		Объект	 - элемент справочника Сотрудники или Строка
//		Фамилия	 - в этот параметр будет записана фамилия сотрудника
//		Имя		 - в этот параметр будет записано имя сотрудника
//		Отчество - в этот параметр будет записано отчество сотрудника
//
//	Возвращаемое значение:
//		фамилия и инициалы сотрудника
//
//	Описание:
//		разбирает "наименование" сотрудника по Фамилия, Имя, Отчество
//		и возвращает фамилию и инициалы сотрудника
//
Функция глФамилияИмяОтчество(Объект,Фамилия="",Имя="",Отчество="") Экспорт
    
	Если ТипЗначения(Объект)=2 Тогда
		Список = глРазложить(СтрЗаменить(Объект, ".",". "), " ");
	Иначе 
		Список = глРазложить(СтрЗаменить(Объект.Наименование, ".", ". ")," ");		
	КонецЕсли;
	
	Фамилия  = ?(0 < Список.РазмерСписка(), Список.ПолучитьЗначение(1), "");
	Имя		 = ?(1 < Список.РазмерСписка(), Список.ПолучитьЗначение(2), "");

	Если Список.РазмерСписка() > 2 Тогда 
		// а вот отчество бывает и не из одного слова				
		Для Сч = 3 По Список.РазмерСписка() Цикл
			Отчество = Отчество + Список.ПолучитьЗначение(Сч) + " ";
		КонецЦикла;

		Если ПустоеЗНачение(Отчество) = 0 Тогда
			Отчество = Лев(Отчество,СтрДлина(Отчество)-1);
		КонецЕсли;
	КонецЕсли;

	Возврат Фамилия+?(ПустоеЗначение(Имя)=0," "+Лев(Имя,1)+"."+?(ПустоеЗначение(Отчество)=0,Лев(Отчество,1)+".",""),"")

КонецФункции	// глФамилияИмяОтчество

//******************************************************************************
// глДополнитьСтроку(Парам,Длина)
//
// Параметры:
//		Парам - число или строка
//  	Длина - число (целое), длина строки.
//		Символ - символ, которым будет дополняться строка до нужной длины
//		Режим - число - режим дополнения: 0 - слева, 1 - справа
//
// Возвращаемое значение:
//      строка
//
// Описание:
//      пример использования: 
//      глДополнитьСтроку(8,2) = "08"
//      глДополнитьСтроку("стр", 5, "-") = "--стр"
//      глДополнитьСтроку(12,4,"0",1) = "1200"
//
Функция глДополнитьСтроку(Знач Парам, Длина, Символ = "0", Режим = 0) Экспорт
	Парам = ""+Парам;  // превращаем параметр в строку
	Добавить = Длина - СтрДлина(Парам);
	Если Добавить>0  Тогда
		Добавок="";
		Для Сч = 1 По Добавить  Цикл
			Добавок=Добавок+Символ
		КонецЦикла;
		Возврат ?(Режим=0,Добавок+Парам, Парам+Добавок);
	Иначе
		Возврат	Парам;
	КонецЕсли;
КонецФункции // глДополнитьСтроку()

//*****************************************************************************
//	глПолучитьИмяXMLФайла(ОтделениеБанка) Экспорт
//
// Возвращаемое значение.
//  имя файла
//
// Описание:
// Процедура создает строку, содержащую имя файла
//
Функция глПолучитьИмяXMLФайла(ОтделениеБанка, НомерДокумента, ПризнакСписка) Экспорт
	
	Имя = //КаталогПользователя()+
		  глДополнитьСтроку(ВРег(СокрЛП(ОтделениеБанка)), 4, "0", 0) + 
		  глДополнитьСтроку(СокрЛП(НомерДокумента), 3, "0", 0) +
		  ПризнакСписка +
	      ".xml";
	Возврат Имя;
	
КонецФункции

Функция ОтделитьРазделителем(Стр, Разделитель, Режим=0)

	ПраваяЧасть			=	"";
	ПозРазделителя		=	Найти(Стр, Разделитель);
	ДлинаРазделителя	=	СтрДлина(Разделитель);
	Если ПозРазделителя > 0 Тогда
		ПраваяЧасть	=	Сред(Стр,		ПозРазделителя + ?(Режим=2, 0, ДлинаРазделителя));
		Стр			=	СокрЛП(Лев(Стр,	ПозРазделителя - ?(Режим=1, -ДлинаРазделителя+1, 1)));
	КонецЕсли;

	Возврат(ПраваяЧасть);
	
КонецФункции		//	ОтделитьРазделителем()

//*****************************************************************************
//	глДатаИзXML(Стр, СтрВремя="") Экспорт
//
// Возвращаемое значение.
//  Дата
//
// Описание:
// Преобразует дату из строки XML в тип Дата
//
Функция глДатаИзXML(Стр, СтрВремя="") Экспорт

	СтрГод   = Стр;
    СтрВремя = ОтделитьРазделителем(СтрГод, "T");
	СтрМесяц = ОтделитьРазделителем(СтрГод, "-");
	СтрДень  = ОтделитьРазделителем(СтрМесяц, "-");

	Возврат Дата(СтрДень + "." + СтрМесяц + "." + СтрГод);
	
КонецФункции

//*****************************************************************************
//	глДатаВXML(ДатаВ) Экспорт
//
// Возвращаемое значение.
//  строка, которая содержит в себе дату так, как она представляется в XML файле
//
// Описание:
// Процедура создает в узле "Эл" подчиненный узел "Сотрудник"
//
Функция глДатаВXML(ДатаВ) Экспорт
	
	Если ПустоеЗначение(ДатаВ) = 1 тогда
		Возврат "";
	КонецЕсли;
	
	СтрДень  = глДополнитьСтроку(ДатаЧисло(ДатаВ), 2, "0");
	СтрМесяц = глДополнитьСтроку(ДатаМесяц(ДатаВ), 2, "0");
	СтрГод   = ДатаГод(ДатаВ);

	Возврат ""+СтрГод + "-" + СтрМесяц + "-" + СтрДень;
	
КонецФункции

//*****************************************************************************
//	глСоздатьЭлементСчетаПК(Корень) Экспорт
//
// Возвращаемое значение.
//  XML узел "Сотрудник"
//
// Описание:
// Процедура создает в узле "Эл" подчиненный узел "Сотрудник"
//
Функция глСоздатьЭлементСчетаПК(Корень, НомерДоговора, РасчетныйСчет, ОбработчикСообщений, НеФормироватьФайл) Экспорт
	
	ЭлСчетаПК = Корень.СоздатьПодчиненныйЭлемент("СчетаПК");
	ЭлСчетаПК.УстановитьАтрибут("ДатаФормирования", глДатаВXML(РабочаяДата()));
	Если ПустоеЗначение(НомерДоговора) = 0 тогда
		ЭлСчетаПК.УстановитьАтрибут("НомерДоговора", НомерДоговора);
	Иначе
		глСообщениеТрассировки(ОбработчикСообщений, "Не указан номер договора",, , , "");
		НеФормироватьФайл = 1;
	КонецЕсли;
	Если ПустоеЗначение(Константа.НазваниеОрганизации) = 0 тогда
		ЭлСчетаПК.УстановитьАтрибут("НаименованиеОрганизации",		Константа.НазваниеОрганизации);
	Иначе
		глСообщениеТрассировки(ОбработчикСообщений, "Не указано наименование организации", , , "");
		НеФормироватьФайл = 1;
	КонецЕсли;
	Если ПустоеЗначение(Константа.ИННОрганизации) = 0 тогда
		Если СтрДлина(СокрЛП(Константа.ИННОрганизации))<13 Тогда
			ИНН = СокрЛП(Константа.ИННОрганизации);
		ИначеЕсли Найти("0123456789",СРЕД(Константа.ИННОрганизации,11,1))=0 Тогда
		    ИНН = СРЕД(Константа.ИННОрганизации,1,10);
		Иначе
			ИНН = СРЕД(Константа.ИННОрганизации,1,12);
		КонецЕсли;
		ЭлСчетаПК.УстановитьАтрибут("ИНН", ИНН);
	Иначе
		глСообщениеТрассировки(ОбработчикСообщений, "Не указан ИНН организации", , , "");
		НеФормироватьФайл = 1;
	КонецЕсли;
	
	Если ПустоеЗначение(РасчетныйСчет.Номер) = 0 тогда
		ЭлСчетаПК.УстановитьАтрибут("РасчетныйСчетОрганизации",		РасчетныйСчет.Номер);
	Иначе
		глСообщениеТрассировки(ОбработчикСообщений, "Не указан р/счет организации", , , "");
		НеФормироватьФайл = 1;
	КонецЕсли;
		
	Возврат ЭлСчетаПК;
	
КонецФункции
	
//*****************************************************************************
//	глСоздатьЭлементСотрудник(Эл, Нпп, ТСотрудников, ОтделениеБанка, ФилиалОтделенияБанка) Экспорт
//
// Возвращаемое значение.
//  XML узел "Сотрудник"
//
// Описание:
// Процедура создает в узле "Эл" подчиненный узел "Сотрудник"
//
Функция глСоздатьЭлементСотрудник(Эл, Нпп, ТСотрудников, ОтделениеБанка, ФилиалОтделенияБанка) Экспорт
	
		ЭлСотрудник = Эл.СоздатьПодчиненныйЭлемент("Сотрудник");
		ЭлСотрудник.УстановитьАтрибут("Нпп",		Нпп);
		Фамилия  = "";
		Имя      = "";
		Отчество = "";
		глФамилияИмяОтчество(ТСотрудников.Сотрудник,Фамилия,Имя,Отчество);
		ЭлФамилия = ЭлСотрудник.СоздатьПодчиненныйЭлемент("Фамилия");
		ЭлФамилия.Значение = Фамилия;
		ЭлИмя = ЭлСотрудник.СоздатьПодчиненныйЭлемент("Имя");
		ЭлИмя.Значение = Имя;
		ЭлОтчество = ЭлСотрудник.СоздатьПодчиненныйЭлемент("Отчество");
		ЭлОтчество.Значение = Отчество;
		ЭлОтделениеБанка = ЭлСотрудник.СоздатьПодчиненныйЭлемент("ОтделениеБанка");
		ЭлОтделениеБанка.Значение = ОтделениеБанка;
		ЭлФилиалОтделенияБанка = ЭлСотрудник.СоздатьПодчиненныйЭлемент("ФилиалОтделенияБанка");
		ЭлФилиалОтделенияБанка.Значение = ФилиалОтделенияБанка;
		Возврат ЭлСотрудник;
		
КонецФункции
	
//*****************************************************************************
//	глСоздатьЭлементКонтрольныеСуммы(Элемент, КоличествоЗаписей, СуммаИтого) Экспорт
//
// Возвращаемое значение.
//  нет
//
// Описание:
// Процедура создает в узле "Элемент" подчиненный узел "Контрольные суммы"
//
Процедура глСоздатьЭлементКонтрольныеСуммы(Элемент, КоличествоЗаписей, СуммаИтого) Экспорт
	
	ЭлКонтрольныеСуммы = Элемент.СоздатьПодчиненныйЭлемент("КонтрольныеСуммы");
	ЭлКоличествоЗаписей = ЭлКонтрольныеСуммы.СоздатьПодчиненныйЭлемент("КоличествоЗаписей");
	ЭлКоличествоЗаписей.Значение = КоличествоЗаписей;
	ЭлСуммаИтого = ЭлКонтрольныеСуммы.СоздатьПодчиненныйЭлемент("СуммаИтого");
	ЭлСуммаИтого.Значение = СуммаИтого;
	
КонецПроцедуры

//*****************************************************************************
//	глСоздатьВыходнойXMLФайл() Экспорт
//
// Возвращаемое значение.
//  XML-документ
//
// Описание:
// Функция предназначена для получения узла XML-документа
//
Функция глСоздатьВыходнойXMLФайл() Экспорт
	
	гXMLАнализатор		=	СоздатьОбъект("AddIn.XMLParser");
	гФайлДанных			=	гXMLАнализатор.СоздатьДокумент();
	Возврат гФайлДанных;
	
КонецФункции

Функция ПолучитьЗначениеУзла(Узел)
	
	Попытка
		Зн = Узел.Значение;
	Исключение
		Зн = "";
	КонецПопытки;
	
	Возврат Зн;
	
КонецФункции

Функция ПолучитьАдресИзУзла(УзелАдреса)
	
	Попытка
		
		АдресСтрокой = "";
		
		ПодчиненныйУзел = УзелАдреса.ВыбратьУзел("Индекс");
		Индекс = СокрЛП(ПолучитьЗначениеУзла(ПодчиненныйУзел));
		
		Если ПустоеЗначение(Индекс) = 0 Тогда
			АдресСтрокой = АдресСтрокой + Индекс + ", ";
		КонецЕсли;	
		
		
		ПодчиненныйУзел = УзелАдреса.ВыбратьУзел("Регион");
		
		СубПодчиненныйУзел = ПодчиненныйУзел.ВыбратьУзел("РегионНазвание");
		РегионНазвание = СокрЛП(ПолучитьЗначениеУзла(СубПодчиненныйУзел)); 
		СубПодчиненныйУзел = ПодчиненныйУзел.ВыбратьУзел("РегионСокращение");
		РегионСокращение = СокрЛП(ПолучитьЗначениеУзла(СубПодчиненныйУзел)); 
		
		Регион = РегионНазвание + " " + РегионСокращение;
		Если ПустоеЗначение(Регион) = 0 Тогда
			АдресСтрокой = АдресСтрокой + Регион + ", ";
		КонецЕсли;	
		
		
		
		ПодчиненныйУзел = УзелАдреса.ВыбратьУзел("Район");
		
		СубПодчиненныйУзел = ПодчиненныйУзел.ВыбратьУзел("РайонНазвание");
		РайонНазвание = СокрЛП(ПолучитьЗначениеУзла(СубПодчиненныйУзел)); 
		СубПодчиненныйУзел = ПодчиненныйУзел.ВыбратьУзел("РайонСокращение");
		РайонСокращение = СокрЛП(ПолучитьЗначениеУзла(СубПодчиненныйУзел)); 
		
		Район = РайонНазвание + " " + РайонСокращение;
		Если ПустоеЗначение(Район) = 0 Тогда
			АдресСтрокой = АдресСтрокой + Район + ", ";
		КонецЕсли;	
		
		
		
		ПодчиненныйУзел = УзелАдреса.ВыбратьУзел("Город");
		
		СубПодчиненныйУзел = ПодчиненныйУзел.ВыбратьУзел("ГородНазвание");
		ГородНазвание = СокрЛП(ПолучитьЗначениеУзла(СубПодчиненныйУзел)); 
		СубПодчиненныйУзел = ПодчиненныйУзел.ВыбратьУзел("ГородСокращение");
		ГородСокращение = СокрЛП(ПолучитьЗначениеУзла(СубПодчиненныйУзел)); 
		
		Город = ГородНазвание + " " + ГородСокращение;
		Если ПустоеЗначение(Город) = 0 Тогда
			АдресСтрокой = АдресСтрокой + Город + ", ";
		КонецЕсли;	
		
		
		
		ПодчиненныйУзел = УзелАдреса.ВыбратьУзел("НаселенныйПункт");
		
		СубПодчиненныйУзел = ПодчиненныйУзел.ВыбратьУзел("НаселенныйПунктНазвание");
		НаселенныйПунктНазвание  = СокрЛП(ПолучитьЗначениеУзла(СубПодчиненныйУзел)); 
		СубПодчиненныйУзел = ПодчиненныйУзел.ВыбратьУзел("НаселенныйПунктСокращение");
		НаселенныйПунктСокращение = СокрЛП(ПолучитьЗначениеУзла(СубПодчиненныйУзел)); 
		
		НаселенныйПункт = НаселенныйПунктНазвание + " " + НаселенныйПунктСокращение;
		Если ПустоеЗначение(НаселенныйПункт) = 0 Тогда
			АдресСтрокой = АдресСтрокой + НаселенныйПункт + ", ";
		КонецЕсли;	
		
		
		
		ПодчиненныйУзел = УзелАдреса.ВыбратьУзел("Улица");
		
		СубПодчиненныйУзел = ПодчиненныйУзел.ВыбратьУзел("УлицаНазвание");
		УлицаНазвание = СокрЛП(ПолучитьЗначениеУзла(СубПодчиненныйУзел)); 
		СубПодчиненныйУзел = ПодчиненныйУзел.ВыбратьУзел("УлицаСокращение");
		УлицаСокращение = СокрЛП(ПолучитьЗначениеУзла(СубПодчиненныйУзел)); 
		
		Улица = УлицаНазвание + " " + УлицаСокращение;
		Если ПустоеЗначение(Улица) = 0 Тогда
			АдресСтрокой = АдресСтрокой + Улица + ", ";
		КонецЕсли;	
		
		
		
		ПодчиненныйУзел = УзелАдреса.ВыбратьУзел("Дом");
		Дом = ПолучитьЗначениеУзла(ПодчиненныйУзел);
		Если ПустоеЗначение(Дом) = 0 Тогда
			АдресСтрокой = АдресСтрокой + "д " + Дом + ", ";
		КонецЕсли;	
		
		
		ПодчиненныйУзел = УзелАдреса.ВыбратьУзел("Корпус");
		Корпус = ПолучитьЗначениеУзла(ПодчиненныйУзел);
		Если ПустоеЗначение(Корпус) = 0 Тогда
			АдресСтрокой = АдресСтрокой + "кор " + Корпус + ", ";
		КонецЕсли;	
		
		
		ПодчиненныйУзел = УзелАдреса.ВыбратьУзел("Квартира");
		Квартира = ПолучитьЗначениеУзла(ПодчиненныйУзел);
		Если ПустоеЗначение(Квартира) = 0 Тогда
			АдресСтрокой = АдресСтрокой + "кв " + Квартира + ", ";
		КонецЕсли;	
		
		
		Если Прав(АдресСтрокой, 2) = ", " Тогда
			АдресСтрокой = Лев(АдресСтрокой, СтрДлина(АдресСтрокой) - 2);
		КонецЕсли;	
		
		
		Возврат глПредставлениеАдреса(АдресСтрокой);
	Исключение
		Возврат "";
	КонецПопытки;
	
КонецФункции
Процедура глОбработатьXMLФайл(Режим = "", ИмяXMLФайла, ТСотрудниковСчета = "", ТабПечатиЛС = "", ТекстСчетаПК = "") Экспорт
	
	ОбработчикСообщений = глСоздатьТрассировку("Загрузка файла:");
	
	Если ФС.СуществуетФайл(ИмяXMLФайла) = 1 Тогда 
		гXMLАнализатор = СоздатьОбъект("AddIn.XMLParser");
		
		гФайлДанных	= гXMLАнализатор.СоздатьПоследовательноСчитываемыйДокумент();
		СчитываемыеДанные = гXMLАнализатор.СоздатьПоследовательноСчитываемыйДокумент();
		
		гФайлДанных.СвязатьСФайлом(ИмяXMLФайла);
	
		ТипТега = гФайлДанных.Спуститься();
		СвойстваТекущегоУзла	=	гФайлДанных.СвойстваТекущегоУзла;
		ИмяТега					=	СвойстваТекущегоУзла.Имя;
		
		Если (ИмяТега = "СчетаПК") Тогда
			Для СчАтрибутов = 0 По СвойстваТекущегоУзла.КоличествоАтрибутов - 1 Цикл
			    ИмяАтрибута	=	СвойстваТекущегоУзла.НаименованиеАтрибута(СчАтрибутов);
				Если		ИмяАтрибута = "ДатаФормирования"	Тогда
					ДатаФормирования	=	глДатаИзXML(СвойстваТекущегоУзла.ЗначениеАтрибута(СчАтрибутов));
				ИначеЕсли		ИмяАтрибута = "НомерДоговора"	Тогда
					НомерДоговора	=	СвойстваТекущегоУзла.ЗначениеАтрибута(СчАтрибутов);
				ИначеЕсли		ИмяАтрибута = "НаименованиеОрганизации"	Тогда
					НаименованиеОрганизации	=	СвойстваТекущегоУзла.ЗначениеАтрибута(СчАтрибутов);
				ИначеЕсли		ИмяАтрибута = "ИНН"	Тогда
					ИНН	=	СвойстваТекущегоУзла.ЗначениеАтрибута(СчАтрибутов);
				ИначеЕсли		ИмяАтрибута = "РасчетныйСчетОрганизации"	Тогда
					РасчетныйСчетОрганизации	=	СвойстваТекущегоУзла.ЗначениеАтрибута(СчАтрибутов);
				КонецЕсли;
			КонецЦикла;
			ТекстСчетаПК = 	"Организация: "+СокрЛП(НаименованиеОрганизации)+
							" ИНН:"+СокрЛП(ИНН)+
							" Дата формирования: "+ДатаФормирования+
							" Номер договора:"+СокрЛП(НомерДоговора)+
							" р/с:"+СокрЛП(РасчетныйСчетОрганизации);
			
			Если Режим = "ПечатьСчетов" тогда
				ТабПечатиЛС.ВывестиСекцию("Шапка");
			ИначеЕсли Режим = "ПечатьЗарплаты" тогда
				ТабПечатиЛС.ВывестиСекцию("ШапкаЗарплата");
			ИначеЕсли Режим = "ПечатьПеречисленияЗарплаты" тогда
				ТабПечатиЛС.ВывестиСекцию("ШапкаПеречислениеЗарплаты");
			ИначеЕсли Режим = "ПечатьОткрытияСчетов" тогда
				ТабПечатиЛС.ВывестиСекцию("ШапкаОткрытиеСчетов");
			Иначе
				Если Режим = "Счета" тогда
					ПустаяСтр = 1;
				Иначе
					ПустаяСтр = 0;
				КонецЕсли;
				Запрос = СоздатьОбъект("Запрос");
				ТекстЗапроса = 
				"//{{ЗАПРОС(ПоСотрудникамБезЛС)
				|Без итогов;
				|Сотрудник 				= Справочник.Сотрудники.ТекущийЭлемент;
				|ФИО 					= Справочник.Сотрудники.Наименование;
				|ДокументСерия 			= Справочник.Сотрудники.ДокументСерия;
				|ДокументНомер 			= Справочник.Сотрудники.ДокументНомер;
				|НомерЗарплатногоСчета 	= Справочник.Сотрудники.НомерЗарплатногоСчета;
				|Группировка Сотрудник;
				|Условие(ПустаяСтрока(НомерЗарплатногоСчета) = ПустаяСтр);
				|";//}}ЗАПРОС
				
				// Если ошибка в запросе, то выход из процедуры
				Если Запрос.Выполнить(ТекстЗапроса) = 0 Тогда
					Возврат;
				КонецЕсли;
				ТСотрудниковДляПоиска = СоздатьОбъект("ТаблицаЗначений");
				Запрос.Выгрузить(ТСотрудниковДляПоиска, 1);

				ДлинаНаименования = Метаданные.Справочник("Сотрудники").ДлинаНаименования + 50; // +50 символов на паспортные данные
				ТСотрудниковДляПоиска.УстановитьПараметрыКолонки("ФИО","Строка", ДлинаНаименования,,,,,);
				
				ТСотрудниковДляПоиска.ВыбратьСтроки();
				Пока ТСотрудниковДляПоиска.ПолучитьСтроку() = 1 Цикл
					Если Режим = "Счета" тогда
						//СпДокУдЛичность = глРазложитьДокУдостоверяющийЛичность(ТСотрудниковДляПоиска.ДокУдЛичность);
						//Если СпДокУдЛичность.РазмерСписка() > 1 тогда
						СерияДок = СокрЛП(ТСотрудниковДляПоиска.ДокументСерия);
						//Иначе
						//	СерияДок = "";
						//КонецЕсли;
						//Если СпДокУдЛичность.РазмерСписка() > 2 тогда
						НомерДок = СокрЛП(ТСотрудниковДляПоиска.ДокументНомер);
						//Иначе
						//	НомерДок = "";
						//КонецЕсли;
	
						ТСотрудниковДляПоиска.ФИО = ВРег(СокрЛП(ТСотрудниковДляПоиска.ФИО) + СерияДок + НомерДок);
					Иначе
						ТСотрудниковДляПоиска.ФИО = ВРег(СокрЛП(ТСотрудниковДляПоиска.ФИО) + СокрЛП(ТСотрудниковДляПоиска.НомерЗарплатногоСчета));
					КонецЕсли;
				КонецЦикла;
				ТСотрудниковСчета.УдалитьСтроки();
				
			КонецЕсли;
			
			ПродолжитьОбработку = 0;
			
			Пока ТипТега <> 4 Цикл		//	пока не достигнут конец файла
				
				Если ТипТега <> 1 Тогда	ТипТега = гФайлДанных.Следующий(); Продолжить КонецЕсли;	//	пропускаем концы уровней и инструкции
				
				ИмяТега	= гФайлДанных.СвойстваТекущегоУзла.Имя;
				Если ПродолжитьОбработку = 0 тогда 
					Если ((ИмяТега = "РезультатОткрытияСчетов") и (Режим = "Счета")) или 
						 ((ИмяТега = "РезультатОткрытияСчетов") и (Режим = "ПечатьСчетов")) или 
					     ((ИмяТега = "РезультатЗачисленияЗарплаты") и (Режим = "Зарплата")) или
					     ((ИмяТега = "РезультатЗачисленияЗарплаты") и (Режим = "ПечатьЗарплаты")) или
						 ((ИмяТега = "ЗачислениеЗарплаты") и (Режим = "ПечатьПеречисленияЗарплаты")) или
						 ((ИмяТега = "ОткрытиеСчетов") и (Режим = "ПечатьОткрытияСчетов")) тогда
						ПродолжитьОбработку = 1;
					Иначе
						ТипТега = гФайлДанных.Спуститься();
						Продолжить;
					КонецЕсли;
				КонецЕсли;
				Если ПродолжитьОбработку = 1 тогда
					Если ИмяТега = "Сотрудник" Тогда	
						
						Объект = гФайлДанных.ТекущийЭлементВВидеОбъекта();
						
						ПодчиненныйУзел = Объект.ВыбратьУзел("Фамилия");
						ФИОСотрудника = "" + ПолучитьЗначениеУзла(ПодчиненныйУзел);
						
						ПодчиненныйУзел = Объект.ВыбратьУзел("Имя");
						ФИОСотрудника = ФИОСотрудника + " " + ПолучитьЗначениеУзла(ПодчиненныйУзел);
						
						ПодчиненныйУзел = Объект.ВыбратьУзел("Отчество");
						ФИОСотрудника = ФИОСотрудника + " " + ПолучитьЗначениеУзла(ПодчиненныйУзел);
						
						ПодчиненныйУзел = Объект.ВыбратьУзел("ЛицевойСчет");
						ЛицевойСчет = ПолучитьЗначениеУзла(ПодчиненныйУзел);
						
						ПодчиненныйУзел = Объект.ВыбратьУзел("Сумма");
						Сумма = ПолучитьЗначениеУзла(ПодчиненныйУзел);
						
						ПодчиненныйУзел = Объект.ВыбратьУзел("Результат");
						Результат = ПолучитьЗначениеУзла(ПодчиненныйУзел);
						
						//ПодчиненныйУзел = Объект.ВыбратьУзел("КодВалюты");
						//КодВалюты = ПолучитьЗначениеУзла(ПодчиненныйУзел);
						ПодчиненныйУзел = Объект.ВыбратьУзел("ВидВклада");
						ВидВклада = ПолучитьЗначениеУзла(ПодчиненныйУзел);
						
						СерияДок = "";
						НомерДок = "";
						УзелУдостоверениеЛичности = Объект.ВыбратьУзел("УдостоверениеЛичности");
						Если ПустоеЗначение(УзелУдостоверениеЛичности) = 0 тогда
							ПодчиненныйУзел = УзелУдостоверениеЛичности.ВыбратьУзел("ВидДокумента");
							УдостоверениеЛичности = "" + ПолучитьЗначениеУзла(ПодчиненныйУзел);
							 
							ПодчиненныйУзел = УзелУдостоверениеЛичности.ВыбратьУзел("Серия");
							УдостоверениеЛичности = УдостоверениеЛичности + " " + ПолучитьЗначениеУзла(ПодчиненныйУзел);
							СерияДок = СокрЛП(ПолучитьЗначениеУзла(ПодчиненныйУзел));
							 
							ПодчиненныйУзел = УзелУдостоверениеЛичности.ВыбратьУзел("Номер");
							УдостоверениеЛичности = УдостоверениеЛичности + " " + ПолучитьЗначениеУзла(ПодчиненныйУзел);
							НомерДок = СокрЛП(ПолучитьЗначениеУзла(ПодчиненныйУзел));
							 
							ПодчиненныйУзел = УзелУдостоверениеЛичности.ВыбратьУзел("ДатаВыдачи");
							УдостоверениеЛичности = УдостоверениеЛичности + " дата: " + глДатаИзXML(ПолучитьЗначениеУзла(ПодчиненныйУзел));
							 
							ПодчиненныйУзел = УзелУдостоверениеЛичности.ВыбратьУзел("КемВыдан");
							УдостоверениеЛичности = УдостоверениеЛичности + " выдан: " + ПолучитьЗначениеУзла(ПодчиненныйУзел);
						КонецЕсли;
						
						Если Лев(Режим, 6) = "Печать" тогда
							
							ПодчиненныйУзел = Объект.ВыбратьУзел("ДействительноДо");
							ДействителенДо = глДатаИзXML(ПолучитьЗначениеУзла(ПодчиненныйУзел));
							
							ПодчиненныйУзел = Объект.ВыбратьУзел("ОтделениеБанка");
							ОБ = ПолучитьЗначениеУзла(ПодчиненныйУзел);
							
							ПодчиненныйУзел = Объект.ВыбратьУзел("ФилиалОтделенияБанка");
							ФОБ = ПолучитьЗначениеУзла(ПодчиненныйУзел);
							
							ПодчиненныйУзел = Объект.ВыбратьУзел("ВидВклада");
							ВидВклада = ПолучитьЗначениеУзла(ПодчиненныйУзел);
							
							ПодчиненныйУзел = Объект.ВыбратьУзел("ДатаРождения");
							ДатаРождения = глДатаИзXML(ПолучитьЗначениеУзла(ПодчиненныйУзел));
							 
							ПодчиненныйУзел = Объект.ВыбратьУзел("Пол");
							Пол = ПолучитьЗначениеУзла(ПодчиненныйУзел);
							 
							УзелЭмбоссированныйТекст = Объект.ВыбратьУзел("ЭмбоссированныйТекст");
							Если ПустоеЗначение(УзелЭмбоссированныйТекст) = 0 тогда
								ЭмбоссированныйТекст = "";
								Для индАтрибута = 1 по УзелЭмбоссированныйТекст.КоличествоАтрибутов() Цикл
									ЭмбоссированныйТекст = ЭмбоссированныйТекст + " " + ПолучитьЗначениеУзла(УзелЭмбоссированныйТекст.ПолучитьУзелАтрибута(индАтрибута));
								КонецЦикла;
							КонецЕсли;
							
							ПодчиненныйУзел = Объект.ВыбратьУзел("РабочийТелефон");
							РабочийТелефон = ПолучитьЗначениеУзла(ПодчиненныйУзел);
							 
							УзелАдресМестаРаботы = Объект.ВыбратьУзел("АдресМестаРаботы");
							АдресМестаРаботы = ПолучитьАдресИзУзла(УзелАдресМестаРаботы);
							 
							УзелАдресПрописки = Объект.ВыбратьУзел("АдресПрописки");
							АдресПрописки = ПолучитьАдресИзУзла(УзелАдресПрописки);
							 
							УзелАдресПроживания = Объект.ВыбратьУзел("АдресПроживания");
							АдресПроживания = ПолучитьАдресИзУзла(УзелАдресПроживания);
							 
							//ПодчиненныйУзел = Объект.ВыбратьУзел("");
							// = ПолучитьЗначениеУзла(ПодчиненныйУзел);
							// 
						Иначе
							индСотрудника = 0;
							Если Режим = "Счета" тогда
								РезультатПоиска = ТСотрудниковДляПоиска.НайтиЗначение(глДополнитьСтроку(ВРег(ФИОСотрудника+СерияДок+НомерДок), ДлинаНаименования, " ", 1), индСотрудника, "ФИО");
							Иначе
								РезультатПоиска = ТСотрудниковДляПоиска.НайтиЗначение(глДополнитьСтроку(ВРег(ФИОСотрудника+СокрЛП(ЛицевойСчет)), ДлинаНаименования, " ", 1), индСотрудника, "ФИО");
							КонецЕсли;
							Если РезультатПоиска <> 0 тогда
								СотрудникВТаблицу = ТСотрудниковДляПоиска.ПолучитьЗначение(индСотрудника, "Сотрудник");
								ТСотрудниковСчета.НоваяСтрока();
								ТСотрудниковСчета.Сотрудник = СотрудникВТаблицу;
								ТСотрудниковСчета.ЛицевойСчет = ЛицевойСчет;
								ТСотрудниковСчета.Сумма = Сумма;
								ТСотрудниковСчета.Результат = Результат;
								//ТСотрудниковСчета.Валюта = КодВалюты;
								ТСотрудниковСчета.ВидВклада = ВидВклада;
							Иначе
								Если Режим = "Счета" тогда
									глСообщениеТрассировки(ОбработчикСообщений, "Среди сотрудников, не имеющих лицевых счетов, не найден сотрудник: " + ФИОСотрудника);
								Иначе
									глСообщениеТрассировки(ОбработчикСообщений, "Среди сотрудников, имеющих лицевые счета, не найден сотрудник: " + ФИОСотрудника);
								КонецЕсли;
							КонецЕсли;
						КонецЕсли;
					Иначе
						ТипТега = гФайлДанных.Спуститься();
						Продолжить;
					КонецЕсли;
					
					Если Режим = "ПечатьСчетов" тогда
						ТабПечатиЛС.ВывестиСекцию("СтрокаЛС");
					ИначеЕсли Режим = "ПечатьЗарплаты" тогда
						ТабПечатиЛС.ВывестиСекцию("СтрокаЗарплата");
					ИначеЕсли Режим = "ПечатьПеречисленияЗарплаты" тогда
						ТабПечатиЛС.ВывестиСекцию("СтрокаПеречислениеЗарплаты");
					ИначеЕсли Режим = "ПечатьОткрытияСчетов" тогда
						ТабПечатиЛС.ВывестиСекцию("СтрокаОткрытиеСчетов");
					КонецЕсли;
				КонецЕсли;
				ТипТега = гФайлДанных.Следующий();
			КонецЦикла;
				
		КонецЕсли;
		
	Иначе 
		Предупреждение("Файл с таким именем не существует!");					
	КонецЕсли;    
	
	Если Режим = "ПечатьСчетов" тогда
		ТабПечатиЛС.Опции(0, 0, 0, 0);
		ТабПечатиЛС.Показать("Список лицевых счетов сотрудников");
	ИначеЕсли Режим = "ПечатьЗарплаты" тогда
		ТабПечатиЛС.Опции(0, 0, 0, 0);
		ТабПечатиЛС.Показать("Список перечисленной зарплаты на лицевые счета сотрудников");
	ИначеЕсли Режим = "ПечатьПеречисленияЗарплаты" тогда
		ТабПечатиЛС.Опции(0, 0, 0, 0);
		ТабПечатиЛС.Показать("Список на перечисление зарплаты на лицевые счета сотрудников");
	ИначеЕсли Режим = "ПечатьОткрытияСчетов" тогда
		ТабПечатиЛС.Опции(0, 0, 0, 0);
		ТабПечатиЛС.Показать("Список на открытие лицевых счетов сотрудников");
	КонецЕсли;
	
	глПоказатьТрассировку(ОбработчикСообщений);
			
КонецПроцедуры

//******************************************************************************
// глВзятьКонтекст(Конт)
//
// Параметры:
//  Конт - значение типа "Контекст"
//
// Возвращаемое значение: 
//  Переданный контекст
//
// Описание: 
// 	Функция возвращает переданное значение параметра (для получения Контекста)
//
Функция глВзятьКонтекст(Конт) Экспорт
	Возврат Конт;
КонецФункции // глВзятьКонтекст()

///////////////////////////////////////////////////////////////////////////
//
Функция глРассчитатьСтоимостьОбъекта(ТаблицаОбъектов, ТаблицаВидовНоменклатуры, Объект, Документ = "", СтрокаДокумента = "", НачДата, знач КонДата, СтатусРасчетаПродукции) Экспорт Далее

//******************************************************************************
// глОткрытьЖурнал(Конт, Новый, ФормаЖурнала = "")
//
// Параметры:
//  Конт - контекст документа, из которого вызвана процедура.
//  Новый - число, возможные значения:
//			1 - новый документ, его форма открыта для редактирования первый раз;
//			0 - ранее записанный документ открыт для редактирования.
//  ФормаЖурнала - строка формата "Журнал.ХХХХХ.YYYYY", где 
//				   ХХХХХ - идентификатор журнала документов, 
//				   YYYYY - идентификатор формы журнала документов.
//				   Необязательный параметр. По умолчанию открывается основная 
//				   форма журнала документов, которому принадлежит документ.
//
Процедура глОткрытьЖурнал(Конт, Новый, ФормаЖурнала = "") Экспорт
	
	Перем ОткрыватьЖурналПриВводеДокумента;

	ОткрыватьЖурналПриВводеДокумента = ПустоеЗначение(ВосстановитьЗначение("НеОткрыватьЖурналПриВводеДокумента"));
	Если ОткрыватьЖурналПриВводеДокумента = 1  Тогда
		Если (Новый = 1) и (Конт.Выбран() = 1) Тогда
			ОписательОбъекта = "";

			Если (ПустоеЗначение(ОписательОбъекта) = 1) 
				и (глСписокОбщихЖурналов.Пометка(глСписокОбщихЖурналов.НайтиЗначение("СчетаФактурыВыданные")) = 1) Тогда
				Журнал = Метаданные.Журнал("СчетаФактурыВыданные");	
				Для Счетчик = 1 по Журнал.Графа("Покупатель").Ссылки.Количество() Цикл
					ВидДокумента = Журнал.Графа("Покупатель").Ссылки.Получить(Счетчик).Родитель().Идентификатор;
					Если Конт.Вид() = ВидДокумента Тогда
					    Возврат;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			
			Если (ПустоеЗначение(ОписательОбъекта) = 1) 
				и (глСписокОбщихЖурналов.Пометка(глСписокОбщихЖурналов.НайтиЗначение("СчетаФактурыПолученные")) = 1) Тогда
				Журнал = Метаданные.Журнал("СчетаФактурыПолученные");	
				Для Счетчик = 1 по Журнал.Графа("Продавец").Ссылки.Количество() Цикл
					ВидДокумента = Журнал.Графа("Продавец").Ссылки.Получить(Счетчик).Родитель().Идентификатор;
					Если Конт.Вид() = ВидДокумента Тогда
					    Возврат;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;

			Если (ПустоеЗначение(ОписательОбъекта) = 1) 
				и (глСписокОбщихЖурналов.Пометка(глСписокОбщихЖурналов.НайтиЗначение("ЖурналОпераций")) = 1) Тогда
				Если Конт.СуществуетОперация() = 1 Тогда
				    ОписательОбъекта = "ЖурналОпераций";
				КонецЕсли;
			КонецЕсли;
			
			Если (ПустоеЗначение(ОписательОбъекта) = 1) 
				и (глСписокОбщихЖурналов.Пометка(глСписокОбщихЖурналов.НайтиЗначение("Общий")) = 1) Тогда
			    ОписательОбъекта = "Журнал.Общий";
			КонецЕсли;

			Если ПустоеЗначение(ОписательОбъекта) = 1 Тогда
				Если ПустаяСтрока(ФормаЖурнала) = 0 Тогда
					ОписательОбъекта = ФормаЖурнала;
				Иначе
					Если Метаданные.Документ(Конт.Вид()).Журнал.Выбран() = 0 Тогда
					    ОписательОбъекта = "ЖурналОпераций";
					Иначе
						ОписательОбъекта = "Журнал." + Метаданные.Документ(Конт.Вид()).Журнал.Идентификатор;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;

			ПозицияВторойТочки = Найти(Сред(ОписательОбъекта, 8), ".");
			Если ПозицияВторойТочки > 0 Тогда
			    Объект = Сред(ОписательОбъекта, 1, ПозицияВторойТочки + 6);
			Иначе
			    Объект = ОписательОбъекта;
			КонецЕсли;
			
			Если Объект = "ЖурналОпераций" Тогда
				Доступ = ПравоДоступа("ПросмотрСписка", "Операция");
			Иначе
				Доступ = ПравоДоступа("Чтение", Объект);
			КонецЕсли;
			
			Если Доступ = 1 Тогда
				КонтТекД = Конт.ТекущийДокумент();
				ОткрытьФорму(ОписательОбъекта, КонтТекД);
				КонтТекД.АктивизироватьОбъект(Конт.ТекущийДокумент());
				ОткрытьФорму("Обработка.Трассировка");
			КонецЕсли;
		КонецЕсли;	
	КонецЕсли;
	
КонецПроцедуры // глОткрытьЖурнал()

//******************************************************************************
// глАктивизироватьДокумент(Конт, Док)
//
// Параметры:
//  Конт - контекст журнала документов.
//  Док - документ, который надо активизировать.
//
// Описание:
//  Активизируется документ в журнале документов. Если документ не попадает в 
// интервал журнала, интервал изменяется.
//
Процедура глАктивизироватьДокумент(Конт, Док) Экспорт
	
	Если Док.ДатаДок < Конт.НачалоИнтервала() Тогда
		Конт.УстановитьИнтервал(Док.ДатаДок, Конт.КонецИнтервала(), 1);
		Сообщить("Начало интервала журнала было автоматически изменено и не будет запомнено после закрытия журнала.", "i");
		Сообщить("Установка интервала для всех журналов выполняется из меню Сервис в настройке параметров системы (Параметры) на закладке Журналы.", "i");
	    
	ИначеЕсли Док.ДатаДок > Конт.КонецИнтервала() Тогда
		Конт.УстановитьИнтервал(Конт.НачалоИнтервала(), Док.ДатаДок, 1);
		Сообщить("Конец интервала журнала был автоматически изменен и не будет запомнен после закрытия журнала.", "i");
		Сообщить("Установка интервала для всех журналов выполняется из меню Сервис в настройке параметров системы (Параметры) на закладке Журналы.", "i");
	КонецЕсли;
	Конт.АктивизироватьОбъект(Док);
	
КонецПроцедуры // глАктивизироватьДокумент()

//******************************************************************************
// глНовыеПравилаВеденияНУ(ТекДата, ДатаНачала)
//
// Параметры:
//  ТекДата - дата на которую нужно определить способ ведения налогового учета
//  ДатаНачала - дата с которой начинается ведение учета данным способом
//
// Возвращаемое значение:
//  1 - Правила налогового учета введенные в редакции 4.4
//  0 - Правила налогового учета использовавшиеся до редакции 4.4
//
// Описание:
// Функция определяет по каким правилам ведется налоговый учет в ИБ,
// за период, которому соответствует дата указанная в параметре ТекДата
//
Функция глНовыеПравилаВеденияНУ(ТекДата, ДатаНачала = "") Экспорт
    
	СпособВеденияНУ = СоздатьОбъект("Периодический");
	СпособВеденияНУ.ИспользоватьОбъект("СпособВеденияНалоговогоУчета");
    
	АктуальноеЗначение = СпособВеденияНУ.ЗначениеНаДату(ТекДата);
	ДатаНачала 		   = ПолучитьПустоеЗначение("Дата");
	
	СпособВеденияНУ.ОбратныйПорядок();
	СпособВеденияНУ.ВыбратьЗначения(, ТекДата);
	Пока СпособВеденияНУ.ПолучитьЗначение() = 1 Цикл
	    Если СпособВеденияНУ.Значение = АктуальноеЗначение Тогда
			ДатаНачала 			= СпособВеденияНУ.ДатаЗнач;
		Иначе
			Прервать;
	    КонецЕсли;
	КонецЦикла;
	
	Если (АктуальноеЗначение = Перечисление.СпособыВеденияНалоговогоУчета.ОдновременноСБухгалтерскимУчетом)
	 или (ПустоеЗначение(АктуальноеЗначение) = 1) Тогда
		Возврат 1;
		
	Иначе
		Возврат 0;
		
	КонецЕсли;
	
КонецФункции // глНовыеПравилаВеденияНУ()

//******************************************************************************
// глСпособРасчетаСебестоимостиНоменклатуры(ТекДата)
//
// Параметры:
//  ТекДата - дата на которую нужно определить способ расчета себестоимости номенклатуры
//
// Возвращаемое значение:
//  "по средней" - если используется метод расчета по скользящей средней
//  "по средневзвешенной" - если используется метод расчета по средневзвешенной
//
// Описание:
// Функция определяет по какому методу рассчитывается себестоимость списания
// товаров и материалов в налоговом учете за месяц заданный параметром ТекДата
//
Функция глСпособРасчетаСебестоимостиНоменклатуры(ТекДата) Экспорт

	ДатаНачЗапр = НачМесяца(ТекДата);
	ДатаКонЗапр = КонМесяца(ТекДата);
	
	//Создание объекта типа Запрос
	Запрос = СоздатьОбъект("Запрос");
	ТекстЗапроса = 
	"//{{ЗАПРОС(Сформировать)
	|Период с ДатаНачЗапр по ДатаКонЗапр;
	|Обрабатывать НеПомеченныеНаУдаление;
	|ТекДок = Документ.РегламентныеОперацииПоНалоговомуУчету.ТекущийДокумент;
	|РасчетСтоимостиТоваров = Документ.РегламентныеОперацииПоНалоговомуУчету.РасчетСтоимостиТоваров;
	|Функция РасчетСтоимостиТоваровСумма = Сумма(РасчетСтоимостиТоваров);
	|Группировка ТекДок;
	|"//}}ЗАПРОС
	;
	// Если ошибка в запросе, то выход из процедуры
	Если Запрос.Выполнить(ТекстЗапроса) = 0 Тогда
		Возврат "";
	КонецЕсли;
	
	Если Запрос.РасчетСтоимостиТоваровСумма <> 0 Тогда
		Возврат "по средневзвешенной";
		
	Иначе
		Возврат "по средней";
		
	КонецЕсли;
	    
КонецФункции // глНовыеПравилаВеденияНУ()

//******************************************************************************
// глОткрытьДиалог(Конт, ИмяРеквизита, ТолькоПросмотр = 0)
//
// Параметры:
//  Конт - контекст формы докумена или элемента справочника, реквизитом
//   которого является документ или элемент справочника, форму которого нужно
//   открыть
//  ИмяРеквизита - имя реквизита
//  ТолькоПросмотр - флаг открытия формы в режиме только просмотра.
//
// Вызывается из формул элементов диалога.
//  Из кнопок "О", расположенных справа от реквизитов документов или
//   справочников типа "Документ" или "Справочник".
//
// Описание
//  Открывает форму документа или элемента справочника из формы документа или
//   элемента справочника.
// 
Процедура глОткрытьДиалог(Конт, ИмяРеквизита, ТолькоПросмотр = 0) Экспорт
	Элемент = Конт.ПолучитьАтрибут(ИмяРеквизита);
	Если Элемент.Выбран() = 0 Тогда
		Если ТипЗначенияСтр(Элемент) = "Справочник" Тогда
			СтрПредупреждения = "Выберите элемент справочника."
		ИначеЕсли ТипЗначенияСтр(Элемент) = "Документ" Тогда
			СтрПредупреждения = "Выберите документ."
		КонецЕсли;
		Предупреждение(СтрПредупреждения);
		Конт.Активизировать(ИмяРеквизита);
	Иначе
		ОткрытьФорму(Элемент, , ТолькоПросмотр);
	КонецЕсли;
КонецПроцедуры // глОткрытьДиалог

//******************************************************************************
// глДатаНаКоторуюУстановленоЗначение()
//
// Параметры:
//  Объект - справочник - элемент справочника.
//  НаименованиеРеквизита - строка - наименование реквизита элемента справочника.
//  ДатаНачалаАнализа - дата - дата, начиная на которую уже установлено
//                             анализируемое значение реквизита
//
// Возвращаемое значение:
//  Дата - дата на которую установлено значение.
//
// Вызывается из формул элементов диалога:
//  Нет.
//
// Описание:
//  Фнкция используется для поиска даты, на которую установлено конкретное значение
//  периодического реквизита справочника.
//
Функция глДатаНаКоторуюУстановленоЗначение(Объект, НаименованиеРеквизита, ДатаНачалаАнализа) Экспорт
	
	ДатаУстановкиЗначения = ПолучитьПустоеЗначение("Дата");
	ПериодическийРеквизит = СоздатьОбъект("Периодический");
	ПериодическийРеквизит.ИспользоватьОбъект(НаименованиеРеквизита, Объект);
	ПериодическийРеквизит.ОбратныйПорядок();
	ПериодическийРеквизит.ВыбратьЗначения(, ДатаНачалаАнализа);
	Если ПериодическийРеквизит.ПолучитьЗначение() = 1 Тогда
	    ДатаУстановкиЗначения = ПериодическийРеквизит.ДатаЗнач;
	КонецЕсли;
	
	Возврат ДатаУстановкиЗначения;
	
КонецФункции // глДатаНаКоторуюУстановленоЗначение()

//*****************************************************************************
// глРасчетАмортизацииОС(ОС, ДатаРасчета)
//
// Параметры:
// ОС           - Справочник.ОсновныеСредства. Объект основных средств.
// ДатаРасчета     - Дата. Любое число месяца, за который начисляется 
//                   амортизация.
//
// Возвращаемое значение:
//  СписокЗначений. Каждое значение списка - возвращаемое значение. Каждое 
// представление значения - описание возвращаемого значения. Сформированный 
// список содержит значения, заключающие в себе все сведения о начислении
// амортизации или износа объекта. Определены следующие представления значений:
//  - "СчетУчета";
//	- "БалансоваяСтоимостьНач";
//	- "БалансоваяСтоимостьКон";
//	- "БалансоваяСтоимостьНалог"; 
//	- "БалансоваяСтоимостьНалогКон"; 
//	- "СчетНачисленияАмортизации";
//	- "НачисленнаяАмортизацияНач";
//	- "НачисленнаяАмортизацияКон";
//	- "НачисленнаяАмортизацияНалог";
//	- "НачисленнаяАмортизацияНалогКон";
//	- "РассчитаннаяАмортизацияБух";
//	- "РассчитаннаяАмортизацияНалог"; 
//  - "ПрименяетсяБазоваяСтоимость".
//
// Описание:
//  Используется в модулях форм документов передачи ОС и списания ОС для 
// расчета сумм начисленной амортизации для целей бухгалтерского учета.
// Используется в модулях документов для расчета балансовой стоимости или 
// суммы амортизации.
//
Функция глРасчетАмортизацииОС(ОС, ДатаРасчета, РассчитыватьДанныеПоНалоговомуУчету = 1) Экспорт
	
	Перем СведенияОбОС;
	Перем СчетУчета;
	Перем БалансоваяСтоимостьНач;
	Перем БалансоваяСтоимостьКон;
	Перем БалансоваяСтоимостьНалог;
	Перем БалансоваяСтоимостьНалогКон;
	Перем СчетНачисленияАмортизации;
	Перем НачисленнаяАмортизацияНач;
	Перем НачисленнаяАмортизацияКон;
	Перем НачисленнаяАмортизацияНалог;
	Перем РассчитаннаяАмортизацияБух;
	Перем РассчитаннаяАмортизацияНалог; 
	Перем ПрименяетсяБазоваяСтоимость;
	Перем БухИт;

	БухИт = СоздатьОбъект("БухгалтерскиеИтоги");
	БухИт.Актуальность(1);
	
	БухИт.ПериодМ(ДатаРасчета);
	
	СписокСчетовУчета = СоздатьОбъект("СписокЗначений");
	СписокСчетовУчета.ДобавитьЗначение(СчетПоКоду("01.1"));
	СписокСчетовУчета.ДобавитьЗначение(СчетПоКоду("03.1"));
	СписокСчетовУчета.ДобавитьЗначение(СчетПоКоду("03.2"));
	СписокСчетовУчета.ДобавитьЗначение(СчетПоКоду("03.3"));
	СписокСчетовУчета.ДобавитьЗначение(СчетПоКоду("03.4"));
	
	СчетУчета = ПолучитьПустоеЗначение("Счет");
	СчетУчетаНач = ПолучитьПустоеЗначение("Счет");
	Индекс = 1;
	БалансоваяСтоимостьНач = 0;
	БалансоваяСтоимостьКон = 0;
	
	// Определение счета на котором объект учитывался на
	// начало месяца и счета учета на конец месяца.
	Пока (Индекс <= СписокСчетовУчета.РазмерСписка()) 
	   и ((ПустоеЗначение(СчетУчета) = 1) или (ПустоеЗначение(СчетУчетаНач) = 1)) Цикл // цикл крутится до тех пока не конец списка и пока не определены счета учета на конец периода и на начало
	   	
		СчетУчетаИзСписка = СписокСчетовУчета.ПолучитьЗначение(Индекс);
		
		СтоимостьНач = БухИт.СНД(СчетУчетаИзСписка,,, ОС);
		СтоимостьКон = БухИт.СКД(СчетУчетаИзСписка,,, ОС);
		БалансоваяСтоимостьНач = БалансоваяСтоимостьНач + СтоимостьНач;
		БалансоваяСтоимостьКон = БалансоваяСтоимостьКон + СтоимостьКон;
		
		Если СтоимостьКон > 0 Тогда
		    СчетУчета = СчетУчетаИзСписка;
		КонецЕсли;                        
		Если СтоимостьНач > 0 Тогда
		    СчетУчетаНач = СчетУчетаИзСписка;
		КонецЕсли;
		Индекс = Индекс + 1;
	КонецЦикла;
	                             
	Если ПустоеЗначение(СчетУчетаНач) = 1 Тогда
	    СчетУчетаНач = СчетУчета;
	КонецЕсли;
	
	СчетНачисленияАмортизации = ПолучитьПустоеЗначение("Счет");
	НачисленнаяАмортизацияНач = 0;
	НачисленнаяАмортизацияКон = 0;
	Если ОС.ПодлежитАмортизации = 0 Тогда
	    СчетНачисленияАмортизации = СчетПоКоду("010");
		НачисленнаяАмортизацияНач = БухИт.СНД(СчетНачисленияАмортизации,,, ОС);
		НачисленнаяАмортизацияКон = БухИт.СКД(СчетНачисленияАмортизации,,, ОС);
		
	ИначеЕсли ПустоеЗначение(СчетУчетаНач) = 0 Тогда
		Если СчетУчетаНач.Родитель() = СчетПоКоду("01") Тогда
			СчетНачисленияАмортизации = СчетПоКоду("02.1");
			
		ИначеЕсли СчетУчетаНач.Родитель() = СчетПоКоду("03") Тогда
			СчетНачисленияАмортизации = СчетПоКоду("02.2");
		КонецЕсли;
		НачисленнаяАмортизацияНач = БухИт.СНК("02",,, ОС);
		НачисленнаяАмортизацияКон = БухИт.СКК("02",,, ОС);
	КонецЕсли;
	
	БалансоваяСтоимостьНалог       = 0;
	БалансоваяСтоимостьНалогКон    = 0;
	НачисленнаяАмортизацияНалог    = 0;
	РассчитаннаяАмортизацияБух     = 0;
	РассчитаннаяАмортизацияНалог   = 0;
	НачисленнаяАмортизацияНалогКон = 0;
	ПрименяетсяБазоваяСтоимость    = 0;
	КапВложенияНаправленныеНаРасходы = 0;
	Если ОС.ПодлежитАмортизации = 1 Тогда
		ДатаНачалаМесяца = БухИт.НачПериода();
		ДатаРеквизитов   = БухИт.КонПериода();
		                                                  
		// Анализируется была ли модернизация 
		ОбъектМодернизирован = ОС.ОбъектМодернизирован.Получить(ДатаНачалаМесяца-1);
		ДатаМодернизации = ПолучитьПустоеЗначение("Дата");
		Если ОбъектМодернизирован = 1 Тогда // была модернизация
			ДатаМодернизации = глДатаНаКоторуюУстановленоЗначение(ОС, "ОбъектМодернизирован", ДатаНачалаМесяца-1);
		КонецЕсли;
		
		// Амортизация начисляется в том случае, если на начало месяца объект
		// уже был принят к учету и для него установлен флажок начисления амортизации.
		Если (ОС.НачислятьАмортизацию.Получить(ДатаРеквизитов) = 1) и (ПустоеЗначение(СчетУчета) = 0) Тогда
			Если БухИт.СКД(СчетУчета,,, ОС) <> 0 Тогда
				ПервоначальнаяСтоимость = БалансоваяСтоимостьНач;
				ОстаточнаяСтоимостьБух = БалансоваяСтоимостьНач - НачисленнаяАмортизацияНач;
				СрокПолезногоИспользования = ОС.СрокПолезногоИспользования.Получить(ДатаНачалаМесяца-1);
				
				// Если объект был модернизирован (реконструирован), то при расчете суммы
				// амортизации вместо первоначальной стоимости будет использоваться остаточная
				// стоимость на момент модернизации с учетом расходов по модернизации.
				Если ОбъектМодернизирован = 1 Тогда // была модернизация
					ОставшийсяСрокПолезногИспользованияПослеМодернизации = 0;
					ОстаточнаяСтоимостьПослеМодернизации = ОС.ОстаточнаяСтоимостьПослеМодернизации.Получить(ДатаНачалаМесяца-1);
					
					// Рассчитаем оставшийся срок полезного использования на дату модернизации ОС
					Если (ПустоеЗначение(ДатаМодернизации) = 0)
					   и (ПустоеЗначение(ОС.ДатаВводаВЭксплуатацию) = 0) Тогда
						ОставшийсяСрокПолезногИспользованияПослеМодернизации = СрокПолезногоИспользования - 
								(ДатаГод(КонМесяца(ДатаМодернизации)) - ДатаГод(КонМесяца(ОС.ДатаВводаВЭксплуатацию))) * 12 
								- (ДатаМесяц(КонМесяца(ДатаМодернизации)) - ДатаМесяц(КонМесяца(ОС.ДатаВводаВЭксплуатацию)));
					КонецЕсли;
							                                                                              
					// Установим новые значение первоначальной стоимости и срока полезного использования
					ПервоначальнаяСтоимость = ОстаточнаяСтоимостьПослеМодернизации;
					СрокПолезногоИспользования = ОставшийсяСрокПолезногИспользованияПослеМодернизации;
				КонецЕсли;
				
				Если ОС.СпособНачисленияАмортизации = Перечисление.СпособыНачисленияАмортизацииОС.Линейный Тогда
					Если СрокПолезногоИспользования > 0 Тогда
						РассчитаннаяАмортизацияБух = ПервоначальнаяСтоимость / СрокПолезногоИспользования;
					КонецЕсли;
			
				ИначеЕсли ОС.СпособНачисленияАмортизации = Перечисление.СпособыНачисленияАмортизацииОС.УменьшаемогоОстатка Тогда
					
					// Сумма амортизации за месяц рассчитывается как:
					// остаточной стоимость /  количество месяцев полезного использования * коэффициент ускорения.
					// В первый год эксплуатации остаточная стоимость - это первоначальная
					// стоимость объекта основных средств на дату ввода в эксплуатацию
					// (из реквизита первоначальная стоимость), а количество месяцев
					// полезного использования берется на дату ввода объекта в эксплуатацию.
					// В последующие годы остаточная стоимость - СНД по всевозможным
					// счетам учета ОС СНК по счету 02 на 1 января года, в котором происходи расчет
					// амортизации, количество месяцев полезного так же берется на 1 января.
					Если ДатаГод(ДатаРасчета) = ДатаГод(ДатаМодернизации) Тогда // первый год, когда была произведена модернизация
						ОстаточнаяСтоимость =  ПервоначальнаяСтоимость;
						
					ИначеЕсли ДатаГод(ДатаРасчета) = ДатаГод(ОС.ДатаВводаВЭксплуатацию) Тогда // первый год эксплуатации
						ОстаточнаяСтоимость =  ОС.ПервоначальнаяСтоимость.Получить(ОС.ДатаВводаВЭксплуатацию);
						
					Иначе
						ДатаНачалаГода = НачГода(ДатаРасчета);
						
						// Рассчитаем балансовую стоимость объекта на начало года.
						БухИтОстаточнаяСтоимость = СоздатьОбъект("БухгалтерскиеИтоги");
						БухИтОстаточнаяСтоимость.ПериодМ(ДатаНачалаГода);
						БалансоваяСтоимость = 0;
						Индекс = 1;
						Пока Индекс <= СписокСчетовУчета.РазмерСписка() Цикл
							СчетУчетаИзСписка = СписокСчетовУчета.ПолучитьЗначение(Индекс);
							БалансоваяСтоимость = БалансоваяСтоимость + БухИтОстаточнаяСтоимость.СНД(СчетУчетаИзСписка,,, ОС);
							Индекс = Индекс + 1;
						КонецЦикла;                                               
						
						// Рассчитаем сумму начисленной аморизации на начало года.
						НачисленнаяАморизация = БухИтОстаточнаяСтоимость.СНК("02",,, ОС);
						
						ОстаточнаяСтоимость = БалансоваяСтоимость - НачисленнаяАморизация;
					КонецЕсли;
					
					Если СрокПолезногоИспользования > 0 Тогда
						РассчитаннаяАмортизацияБух = ОстаточнаяСтоимость / СрокПолезногоИспользования * ОС.КоэффициентУскорения;
					КонецЕсли;
			
				ИначеЕсли ОС.СпособНачисленияАмортизации = Перечисление.СпособыНачисленияАмортизацииОС.ПоСуммеЧиселЛет Тогда
					Если СрокПолезногоИспользования > 0 Тогда
						КоличествоЛетЭксплуатации = Цел(СрокПолезногоИспользования / 12);
						Если (СрокПолезногоИспользования / 12) > КоличествоЛетЭксплуатации Тогда
							КоличествоЛетЭксплуатации = КоличествоЛетЭксплуатации + 1;
						КонецЕсли;
				
						СуммаЧиселЛет = 0;
						Для i=1 По КоличествоЛетЭксплуатации Цикл
							СуммаЧиселЛет = СуммаЧиселЛет + i;
						КонецЦикла;
				            
						ДатаНачалаРасчета = ?(ОбъектМодернизирован = 0, ОС.ДатаВводаВЭксплуатацию, ДатаМодернизации);
						
						ГодЭксплуатации = ДатаГод(ДатаРасчета) - ДатаГод(ДатаНачалаРасчета);
					
						ГодовщинаВводаВЭксплуатацию = Дата(ДатаГод(ДатаРасчета), ДатаМесяц(ДатаНачалаРасчета), ДатаЧисло(ДатаНачалаРасчета));
						Если КонМесяца(ДатаРасчета) > КонМесяца(ГодовщинаВводаВЭксплуатацию) Тогда
							ГодЭксплуатации = ГодЭксплуатации + 1;
						КонецЕсли;    
						
						РассчитаннаяАмортизацияБух = ПервоначальнаяСтоимость * (КоличествоЛетЭксплуатации - ГодЭксплуатации + 1) / СуммаЧиселЛет / 12;
					КонецЕсли;
			
				ИначеЕсли ОС.СпособНачисленияАмортизации = Перечисление.СпособыНачисленияАмортизацииОС.ПропорциональноОбъемуПродукцииРабот Тогда
					    
					ОбщийОбъемВыпускаПродукции = ОС.ОбщийОбъемПродукцииРабот.Получить(ДатаНачалаМесяца-1);
					
					// Если была модернизация, то амортизация будет рассчитваться
					// исходя из оставшегося общего объема выпуска продукции после
					// модернизации.
					Если ОбъектМодернизирован = 1 Тогда
						Если ПустоеЗначение(ОС.ДатаВводаВЭксплуатацию) = 0 Тогда
							ДатаНачисленияАмортизации = КонМесяца(ДобавитьМесяц(ОС.ДатаВводаВЭксплуатацию, 1)); // дата окончания первого месяца, в котором начисляется амортизация
							Пока  ДатаНачисленияАмортизации <= КонМесяца(ДатаМодернизации) Цикл
								ОбщийОбъемВыпускаПродукции = ОбщийОбъемВыпускаПродукции - ОС.ФактическийОбъемПродукцииРаботЗаМесяц.Получить(ДатаНачисленияАмортизации + 1);
								ДатаНачисленияАмортизации = КонМесяца(ДатаНачисленияАмортизации + 1);
							КонецЦикла;
						КонецЕсли;
					КонецЕсли;
					
					Если ОбщийОбъемВыпускаПродукции > 0 Тогда
						РассчитаннаяАмортизацияБух = ПервоначальнаяСтоимость * ОС.ФактическийОбъемПродукцииРаботЗаМесяц.Получить(ДатаРеквизитов) / ОбщийОбъемВыпускаПродукции;
					КонецЕсли;
					
				ИначеЕсли ОС.СпособНачисленияАмортизации = Перечисление.СпособыНачисленияАмортизацииОС.ПоЕдинымНормам Тогда
					РассчитаннаяАмортизацияБух = ПервоначальнаяСтоимость * ОС.КоэффициентАмортизации.Получить(ДатаРеквизитов) / 1200;
					
				КонецЕсли;
				РассчитаннаяАмортизацияБух = Мин(РассчитаннаяАмортизацияБух, ОстаточнаяСтоимостьБух);
			КонецЕсли;
		КонецЕсли;
        
		Если РассчитыватьДанныеПоНалоговомуУчету = 1 Тогда
			// Формируем данные по налоговому учету
			Если ДатаРасчета < '01.01.2002' Тогда
				Если БалансоваяСтоимостьНач = 0 Тогда
					БалансоваяСтоимостьНалог = ОС.ПервоначальнаяСтоимость.Получить(ДатаНачалаМесяца);
				Иначе
					БалансоваяСтоимостьНалог = БалансоваяСтоимостьНач;
				КонецЕсли;
				НачисленнаяАмортизацияНалог = БухИт.СНК(СчетПоКоду("АОС"),,, ОС);
				ОстаточнаяСтоимостьНалог = БалансоваяСтоимостьНалог - НачисленнаяАмортизацияНалог;
				
			Иначе
				Если (ДатаРасчета>='01.01.2006') И (ПустоеЗначение(ОС.МатериалДляОтраженияВСоставеМПЗ)=0) Тогда
					БалансоваяСтоимостьНалог       = БухИт.СНД("Н05.МЦ",,, ОС);
					БалансоваяСтоимостьНалогКон    = БухИт.СКД("Н05.МЦ",,, ОС);  
				Иначе
					БалансоваяСтоимостьНалог       = БухИт.СНД("Н05.01",,, ОС);
					БалансоваяСтоимостьНалогКон    = БухИт.СКД("Н05.01",,, ОС);
				КонецЕсли;
				НачисленнаяАмортизацияНалог    = БухИт.СНК("Н05.02",,, ОС);
				НачисленнаяАмортизацияНалогКон = БухИт.СКК("Н05.02",,, ОС);
				КапВложенияНаправленныеНаРасходы = БухИт.СНД("Н05.КВ",,, ОС);
				БалансоваяСтоимостьНалог = БалансоваяСтоимостьНалог - КапВложенияНаправленныеНаРасходы;
				Если БалансоваяСтоимостьНалог <> 0 Тогда
					ОстаточнаяСтоимостьНалог = БалансоваяСтоимостьНалог - НачисленнаяАмортизацияНалог;
				КонецЕсли;
			КонецЕсли;
			
			// Определим должна ли в этом месяце быть начислена амортизация
			НачислятьАмортизацию = ОС.НачислятьАмортизацию.Получить(ДатаРасчета);
			Если НачислятьАмортизацию = 0 Тогда
				Если ОС.ДатаВыбытия = ДатаРасчета Тогда
					Если глНовыеПравилаВеденияНУ(ДатаРасчета) <> 1 Тогда
						// Т.к. налоговый учет ведется отдельными документами, то 
						// на момент отражения выбытия в налоговом учете флажок
						// "Начислять амортизацию" уже сброшен документом, отражающим
						// выбытие объекта в бухгалтерском учете.
						НачислятьАмортизацию = ОС.НачислятьАмортизацию.Получить(ОС.ДатаВыбытия - 1);    
					КонецЕсли;
				КонецЕсли;
			КонецЕсли; 
			
			// теперь если ОС списано, но стоимость не погашена полностью, оно все равно амортизируется в НУ
			Если глНовыеПравилаВеденияНУ(ДатаРасчета) = 1 Тогда
				Если (ДатаРасчета >= '01.01.2009') Тогда
					Если НачислятьАмортизацию = 0 Тогда
						Если (ОС.Состояние.Получить(ДатаРасчета) = Перечисление.СостоянияОС.Выбыло)
						И (БалансоваяСтоимостьНалогКон <> 0) Тогда
							НачислятьАмортизацию = 1;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
			Если	(ПустоеЗначение(ОС.МатериалДляОтраженияВСоставеМПЗ)=0) // Для ОС в составе МПЗ только при установленной дате ввода
			И ((КонМесяца(ОС.ДатаВводаВЭксплуатацию)>=КонМесяца(ДатаРасчета))
			ИЛИ (ПустоеЗначение(ОС.ДатаВводаВЭксплуатацию)=1)) Тогда
				//Возврат
			Иначе
				
				// Рассчитаем для целей налогового учета амортизацию, если это необходимо.
				Если НачислятьАмортизацию = 1 Тогда	
					Если ДатаРасчета < '01.01.2002' Тогда
						Если (ОС.КоэффициентАмортизации.Получить(ДатаРеквизитов) > 0) и (ОС.ДатаВводаВЭксплуатацию < БухИт.НачПериода()) Тогда
							РассчитаннаяАмортизацияНалог = БалансоваяСтоимостьНалог * ОС.КоэффициентАмортизации.Получить(ДатаРеквизитов) / 1200;
						КонецЕсли;
						
					Иначе
						Если БалансоваяСтоимостьНалог <> 0 Тогда
							ПервоначальнаяСтоимость = БалансоваяСтоимостьНалог;
							СрокПолезногоИспользования = ОС.СрокПолезногоИспользованияН.Получить(ДатаНачалаМесяца-1);
							ДатаВводаВЭксплуатацию = Макс(ОС.ДатаВводаВЭксплуатацию, '31.12.2001');
							
							Если (ДатаРасчета < '01.01.2009')
							ИЛИ (ОС.АмортизационнаяГруппа = Перечисление.АмортизационныеГруппы.ОтдельнаяГруппа) Тогда // метод использовался до 2009 г.
								
								// Линейный метод
								Если ОС.МетодНачисленияАмортизации = Перечисление.МетодыНачисленияАмортизации.Линейный Тогда
									Если СрокПолезногоИспользования > 0 Тогда
										РассчитаннаяАмортизацияНалог = ПервоначальнаяСтоимость * ОС.СпециальныйКоэффициент.Получить(ДатаРеквизитов) / СрокПолезногоИспользования;
									КонецЕсли;
									
									// Нелинейный метод
								ИначеЕсли ОС.МетодНачисленияАмортизации = Перечисление.МетодыНачисленияАмортизации.Нелинейный Тогда
									Если СрокПолезногоИспользования > 0 Тогда
										
										БазоваяСтоимость = ОС.БазоваяСтоимость.Получить(ДатаРеквизитов);
										ДатаНачалаПримененияБазовойСтоимости = глДатаНаКоторуюУстановленоЗначение(ОС, "БазоваяСтоимость", ДатаРеквизитов);
										
										Если БазоваяСтоимость = 0 Тогда // базовая стоимость не определена
											ПрименяетсяБазоваяСтоимость = 0;
											
										ИначеЕсли ДатаВводаВЭксплуатацию > ДатаНачалаПримененияБазовойСтоимости Тогда // не понятно с какого момента применять базовую стоимость
											Если ОстаточнаяСтоимостьНалог > (БалансоваяСтоимостьНалог  * 0.2) Тогда //если остаточная cтоимость > 20% от первоначальной
												ПрименяетсяБазоваяСтоимость = 0;
											Иначе
												ПрименяетсяБазоваяСтоимость = 1;
											КонецЕсли;
											
										Иначе
											ПрименяетсяБазоваяСтоимость = 1;
										КонецЕсли;
										
										
										Если ПрименяетсяБазоваяСтоимость = 0 Тогда
											РассчитаннаяАмортизацияНалог = ОстаточнаяСтоимостьНалог * 2 * ОС.СпециальныйКоэффициент.Получить(ДатаРеквизитов) / СрокПолезногоИспользования;
											
										Иначе   
											// Если объект введен в эксплуатацию до 01.01.2002, то к налоговому учету он принят после 01.01.2002.
											КоличествоПолныхМесяцев = ((ДатаГод(КонМесяца(ДатаРасчета)) - ДатаГод(КонМесяца(ДатаВводаВЭксплуатацию)+1)) * 12 
											+ ДатаМесяц(КонМесяца(ДатаРасчета)) - ДатаМесяц(КонМесяца(ДатаВводаВЭксплуатацию)+1))
											* ОС.СпециальныйКоэффициент.Получить(ДатаРеквизитов);
											ОставшийсяСрокПолезногоИспользования = ОС.СрокПолезногоИспользованияН.Получить(ДатаНачалаМесяца-1) - КоличествоПолныхМесяцев;
											Если ОставшийсяСрокПолезногоИспользования > 0 Тогда
												РассчитаннаяАмортизацияНалог = ОстаточнаяСтоимостьНалог/ОставшийсяСрокПолезногоИспользования
												
											Иначе
												РассчитаннаяАмортизацияНалог = ОстаточнаяСтоимостьНалог;
											КонецЕсли;
											
										КонецЕсли;
									КонецЕсли;
								КонецЕсли;
								
							Иначе // метод расчета с 2009 г.
								
								// Линейный метод
								Если (Константа.МетодНачисленияАмортизацииНУ.Получить(ДатаРасчета) = Перечисление.МетодыНачисленияАмортизации.Линейный)
									ИЛИ (((ОС.АмортизационнаяГруппа = Перечисление.АмортизационныеГруппы.ВосьмаяГруппа)
									ИЛИ (ОС.АмортизационнаяГруппа = Перечисление.АмортизационныеГруппы.ДевятаяГруппа)
									ИЛИ (ОС.АмортизационнаяГруппа = Перечисление.АмортизационныеГруппы.ДесятаяГруппа)) 
									И ((ОС.Группа = Перечисление.ГруппыОС.Здания) ИЛИ (ОС.Группа = Перечисление.ГруппыОС.Сооружения) ИЛИ (ОС.Группа = Перечисление.ГруппыОС.ПередаточныеУстройства)))
									ИЛИ ((ОС.МетодНачисленияАмортизации = Перечисление.МетодыНачисленияАмортизации.Линейный) И (ОС.АмортизационнаяГруппа = Перечисление.АмортизационныеГруппы.ОтдельнаяГруппа)) Тогда
										
										ДатаПереходаНаЛинейныйМетод ='01.01.2009';
										МатодНачисленияАмортизацииНУ = СоздатьОбъект("Периодический");
										МатодНачисленияАмортизацииНУ.ИспользоватьОбъект("МетодНачисленияАмортизацииНУ",);
										МатодНачисленияАмортизацииНУ.ОбратныйПорядок();
										МатодНачисленияАмортизацииНУ.ВыбратьЗначения('01.01.2009', ДатаРасчета);
										Пока МатодНачисленияАмортизацииНУ.ПолучитьЗначение() = 1 Цикл
											Если МатодНачисленияАмортизацииНУ.Значение = Перечисление.МетодыНачисленияАмортизации.Линейный Тогда
												ДатаПереходаНаЛинейныйМетод = МатодНачисленияАмортизацииНУ.ДатаЗнач;
											Иначе
												Прервать;
											КонецЕсли;											
										КонецЦикла;
										
										
										Если СрокПолезногоИспользования > 0 Тогда
											Если (ПустоеЗначение(ОС.Состояние.Получить(ДатаПереходаНаЛинейныйМетод)) = 1) 
											ИЛИ (((ОС.АмортизационнаяГруппа = Перечисление.АмортизационныеГруппы.ВосьмаяГруппа)
											ИЛИ (ОС.АмортизационнаяГруппа = Перечисление.АмортизационныеГруппы.ДевятаяГруппа)
											ИЛИ (ОС.АмортизационнаяГруппа = Перечисление.АмортизационныеГруппы.ДесятаяГруппа))
											И ((ОС.Группа = Перечисление.ГруппыОС.Здания) ИЛИ (ОС.Группа = Перечисление.ГруппыОС.Сооружения) ИЛИ (ОС.Группа = Перечисление.ГруппыОС.ПередаточныеУстройства)))
											ИЛИ (ОС.АмортизационнаяГруппа = Перечисление.АмортизационныеГруппы.ОтдельнаяГруппа)
											ИЛИ ((ПустоеЗначение(ОС.Состояние.Получить('31.12.2008')) = 0) И (ОС.МетодНачисленияАмортизации = Перечисление.МетодыНачисленияАмортизации.Линейный)) Тогда 
												//Условие выполняется для объектов принятых в период применения линейного метода, для объектов
												// отдельной группы, по которым применялся линейный метод, для объектов по которым до 2009 г.
												// применялся нелинейный метод, отдельным объектам 8-9 групп для которых всегда применяется линейный метод
												
												РассчитаннаяАмортизацияНалог = ПервоначальнаяСтоимость * ОС.СпециальныйКоэффициент.Получить(ДатаРеквизитов) / СрокПолезногоИспользования;
												
											Иначе // переход к линейному методу от нелинейного
												
											БухИтЛ = СоздатьОбъект("БухгалтерскиеИтоги");
											БухИтЛ .Актуальность(1);
											БухИтЛ.ПериодМ(ДатаПереходаНаЛинейныйМетод);

											ЛинейныйБалансоваяСтоимостьНалог       = ПервоначальнаяСтоимость;
											
											ЛинейныйНачисленнаяАмортизацияНалог    = БухИтЛ.СНК("Н05.02",,, ОС);
											ЛинейныйКапВложенияНаправленныеНаРасходы = БухИтЛ.СНД("Н05.КВ",,, ОС);
											ЛинейныйБалансоваяСтоимостьНалог = ЛинейныйБалансоваяСтоимостьНалог - ЛинейныйКапВложенияНаправленныеНаРасходы;
											Если ЛинейныйБалансоваяСтоимостьНалог <> 0 Тогда
												ЛинейныйОстаточнаяСтоимостьНалог = ЛинейныйБалансоваяСтоимостьНалог - ЛинейныйНачисленнаяАмортизацияНалог;
											КонецЕсли;
											
											Если ПустоеЗначение (ОС.ДатаВводаВЭксплуатацию) = 1 Тогда
												ОставшийсяСрокПолезногоИспользования = 0;
											Иначе
												
												СрокЭксплуатацииЛет = Макс(0, (ДатаГод(ДатаПереходаНаЛинейныйМетод) - ДатаГод(ОС.ДатаВводаВЭксплуатацию))*12 - 1);
												СрокЭксплуатации = СрокЭксплуатацииЛет + (ДатаМесяц(ДатаПереходаНаЛинейныйМетод) - ДатаМесяц(ОС.ДатаВводаВЭксплуатацию));
												ОставшийсяСрокПолезногоИспользования = СрокПолезногоИспользования - СрокЭксплуатации;
												
												ОставшийсяСрокПолезногоИспользования = Макс(0, ОставшийсяСрокПолезногоИспользования);
												
											КонецЕсли;
											
											Если ОставшийсяСрокПолезногоИспользования = 0 Тогда
												РассчитаннаяАмортизацияНалог = 0;
											Иначе											
												РассчитаннаяАмортизацияНалог = ЛинейныйОстаточнаяСтоимостьНалог * ОС.СпециальныйКоэффициент.Получить(ДатаРеквизитов) / ОставшийсяСрокПолезногоИспользования;
											КонецЕсли;
									
										КонецЕсли;							
										
									КонецЕсли;
									
									// Нелинейный метод
								ИначеЕсли Константа.МетодНачисленияАмортизацииНУ.Получить(ДатаРасчета) = Перечисление.МетодыНачисленияАмортизации.Нелинейный Тогда
									
									Если  ОС.АмортизационнаяГруппа = Перечисление.АмортизационныеГруппы.ОтдельнаяГруппа Тогда //начисляем как и раньше
										
										Если СрокПолезногоИспользования > 0 Тогда
											
											БазоваяСтоимость = ОС.БазоваяСтоимость.Получить(ДатаРеквизитов);
											ДатаНачалаПримененияБазовойСтоимости = глДатаНаКоторуюУстановленоЗначение(ОС, "БазоваяСтоимость", ДатаРеквизитов);
											
											Если БазоваяСтоимость = 0 Тогда // базовая стоимость не определена
												ПрименяетсяБазоваяСтоимость = 0;
												
											ИначеЕсли ДатаВводаВЭксплуатацию > ДатаНачалаПримененияБазовойСтоимости Тогда // не понятно с какого момента применять базовую стоимость
												Если ОстаточнаяСтоимостьНалог > (БалансоваяСтоимостьНалог  * 0.2) Тогда //если остаточная cтоимость > 20% от первоначальной
													ПрименяетсяБазоваяСтоимость = 0;
												Иначе
													ПрименяетсяБазоваяСтоимость = 1;
												КонецЕсли;
												
											Иначе
												ПрименяетсяБазоваяСтоимость = 1;
											КонецЕсли;
											
											
											Если ПрименяетсяБазоваяСтоимость = 0 Тогда
												РассчитаннаяАмортизацияНалог = ОстаточнаяСтоимостьНалог * 2 * ОС.СпециальныйКоэффициент.Получить(ДатаРеквизитов) / СрокПолезногоИспользования;
												
											Иначе   
												// Если объект введен в эксплуатацию до 01.01.2002, то к налоговому учету он принят после 01.01.2002.
												КоличествоПолныхМесяцев = ((ДатаГод(КонМесяца(ДатаРасчета)) - ДатаГод(КонМесяца(ДатаВводаВЭксплуатацию)+1)) * 12 
												+ ДатаМесяц(КонМесяца(ДатаРасчета)) - ДатаМесяц(КонМесяца(ДатаВводаВЭксплуатацию)+1))
												* ОС.СпециальныйКоэффициент.Получить(ДатаРеквизитов);
												ОставшийсяСрокПолезногоИспользования = ОС.СрокПолезногоИспользованияН.Получить(ДатаНачалаМесяца-1) - КоличествоПолныхМесяцев;
												Если ОставшийсяСрокПолезногоИспользования > 0 Тогда
													РассчитаннаяАмортизацияНалог = ОстаточнаяСтоимостьНалог/ОставшийсяСрокПолезногоИспользования
													
												Иначе
													РассчитаннаяАмортизацияНалог = ОстаточнаяСтоимостьНалог;
												КонецЕсли;
												
											КонецЕсли;
										КонецЕсли;
										
									Иначе 
										
										Если ОС.АмортизационнаяГруппа = Перечисление.АмортизационныеГруппы.ПерваяГруппа Тогда
											НормаАмортизации = 14.3;									
										ИначеЕсли ОС.АмортизационнаяГруппа = Перечисление.АмортизационныеГруппы.ВтораяГруппа Тогда
											НормаАмортизации = 8.8;									
										ИначеЕсли ОС.АмортизационнаяГруппа = Перечисление.АмортизационныеГруппы.ТретьяГруппа Тогда
											НормаАмортизации = 5.6;
										ИначеЕсли ОС.АмортизационнаяГруппа = Перечисление.АмортизационныеГруппы.ЧетвертаяГруппа Тогда
											НормаАмортизации = 3.8;
										ИначеЕсли ОС.АмортизационнаяГруппа = Перечисление.АмортизационныеГруппы.ПятаяГруппа Тогда
											НормаАмортизации = 2.7;
										ИначеЕсли ОС.АмортизационнаяГруппа = Перечисление.АмортизационныеГруппы.ШестаяГруппа Тогда
											НормаАмортизации = 1.8;
										ИначеЕсли ОС.АмортизационнаяГруппа = Перечисление.АмортизационныеГруппы.СедьмаяГруппа Тогда
											НормаАмортизации = 1.3;
										ИначеЕсли ОС.АмортизационнаяГруппа = Перечисление.АмортизационныеГруппы.ВосьмаяГруппа Тогда
											НормаАмортизации = 1;
										ИначеЕсли ОС.АмортизационнаяГруппа = Перечисление.АмортизационныеГруппы.ДевятаяГруппа Тогда
											НормаАмортизации = 0.8;
										ИначеЕсли ОС.АмортизационнаяГруппа = Перечисление.АмортизационныеГруппы.ДесятаяГруппа Тогда
											НормаАмортизации = 0.7;
										КонецЕсли;
										
										
										РассчитаннаяАмортизацияНалог = ОстаточнаяСтоимостьНалог * ОС.СпециальныйКоэффициент.Получить(ДатаРеквизитов) * НормаАмортизации/100;
										
									КонецЕсли;
									
									
								КонецЕсли;
								
							КонецЕсли;
							
						КонецЕсли;
					КонецЕсли;
					РассчитаннаяАмортизацияНалог = Мин(РассчитаннаяАмортизацияНалог, ОстаточнаяСтоимостьНалог);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли ДатаМесяц(ДатаРасчета) = 12 Тогда
		НачалоГода = НачГода(ДатаРасчета);
		Для НомерМесяца = 1 по 12 Цикл
			ДатаРеквизитов = КонМесяца(ДобавитьМесяц(НачалоГода, НомерМесяца-1));
			Если ОС.НачислятьАмортизацию.Получить(ДатаРеквизитов) = 1 Тогда
				БухИт.ПериодМ(НомерМесяца, ДатаГод(ДатаРасчета));
				               
				// Рассчитаем балансовую стоимость на начало и на конец месяца
				// Необходимо проанализировать все счета, на которых может
				// учитываться объект
				БалансоваяСтоимостьНаНачалоМесяца = 0;
				БалансоваяСтоимостьНаКонецМесяца  = 0;
				Индекс = 1;
				Пока Индекс <= СписокСчетовУчета.РазмерСписка() Цикл
					СчетУчетаИзСписка = СписокСчетовУчета.ПолучитьЗначение(Индекс);
					БалансоваяСтоимостьНаНачалоМесяца = БалансоваяСтоимостьНаНачалоМесяца + БухИт.СНД(СчетУчетаИзСписка,,, ОС);
					БалансоваяСтоимостьНаКонецМесяца  = БалансоваяСтоимостьНаКонецМесяца  + БухИт.СКД(СчетУчетаИзСписка,,, ОС);
					Индекс = Индекс + 1;
				КонецЦикла;                                               
				                       
				НачисленныйИзнос = БухИт.СНД(СчетНачисленияАмортизации,,, ОС);
				                                                
				// Если объект не выбыл, то рассчитываем сумму износа
				Если БалансоваяСтоимостьНаКонецМесяца <> 0 Тогда
					ОстаточнаяСтоимость = БалансоваяСтоимостьНаНачалоМесяца - НачисленныйИзнос - РассчитаннаяАмортизацияБух;
					ИзносЗаМесяц = БалансоваяСтоимостьНаНачалоМесяца * ОС.КоэффициентАмортизации.Получить(ДатаРеквизитов) / 1200;
					РассчитаннаяАмортизацияБух = РассчитаннаяАмортизацияБух + Мин(ИзносЗаМесяц, ОстаточнаяСтоимость);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	РассчитаннаяАмортизацияБух = Окр(РассчитаннаяАмортизацияБух, 2, 1);
	РассчитаннаяАмортизацияНалог = Окр(РассчитаннаяАмортизацияНалог, 2, 1);

	СведенияОбОС = СоздатьОбъект("СписокЗначений");
	СведенияОбОС.Установить("СчетУчета", СчетУчета);
	СведенияОбОС.Установить("БалансоваяСтоимостьНач", БалансоваяСтоимостьНач);
	СведенияОбОС.Установить("БалансоваяСтоимостьКон", БалансоваяСтоимостьКон);
	СведенияОбОС.Установить("БалансоваяСтоимостьНалог", БалансоваяСтоимостьНалог);
	СведенияОбОС.Установить("БалансоваяСтоимостьНалогКон", БалансоваяСтоимостьНалогКон);
	СведенияОбОС.Установить("СчетНачисленияАмортизации", СчетНачисленияАмортизации);
	СведенияОбОС.Установить("НачисленнаяАмортизацияНач", НачисленнаяАмортизацияНач);
	СведенияОбОС.Установить("НачисленнаяАмортизацияКон", НачисленнаяАмортизацияКон);
	СведенияОбОС.Установить("НачисленнаяАмортизацияНалог", НачисленнаяАмортизацияНалог);
	СведенияОбОС.Установить("РассчитаннаяАмортизацияБух", РассчитаннаяАмортизацияБух);
	СведенияОбОС.Установить("РассчитаннаяАмортизацияНалог", РассчитаннаяАмортизацияНалог);
	СведенияОбОС.Установить("НачисленнаяАмортизацияНалогКон", НачисленнаяАмортизацияНалогКон);
	СведенияОбОС.Установить("ПрименяетсяБазоваяСтоимость", ПрименяетсяБазоваяСтоимость);
	СведенияОбОС.Установить("КапВложенияНаправленныеНаРасходы",КапВложенияНаправленныеНаРасходы); 
	
	Возврат СведенияОбОС;
	
КонецФункции // глРасчетАмортизацииОС()

//*****************************************************************************
// глРасчетАмортизацииНМА(НМА, ДатаРасчета)
//
// Параметры:
// НМА         - Справочник.НематериальныеАктивы. Объект нематериальных активов.
// ДатаРасчета     - Дата. Любое число месяца, за который начисляется 
//                   амортизация.
//
// Возвращаемое значение:
//  СписокЗначений. Каждое значение списка - возвращаемое значение. Каждое 
// представление значения - описание возвращаемого значения. Сформированный 
// список содержит значения, заключающие в себе все сведения о начислении
// амортизации или износа объекта. Определены следующие представления значений:
//  - "СчетУчета";
//	- "БалансоваяСтоимостьНач";
//	- "БалансоваяСтоимостьКон";
//	- "БалансоваяСтоимостьНалог";
//	- "БалансоваяСтоимостьНалогКон"; 
//	- "СчетНачисленияАмортизации";
//	- "НачисленнаяАмортизацияНач";
//	- "НачисленнаяАмортизацияКон";
//	- "НачисленнаяАмортизацияНалог";
//	- "РассчитаннаяАмортизацияБух";
//	- "РассчитаннаяАмортизацияНалог";
//  - "ПрименяетсяБазоваяСтоимость".
//
// Описание:
//  Используется в модулях форм документов по НМА для 
// расчета сумм начисленной амортизации для целей бухгалтерского учета.
// Используется в модулях документов для расчета балансовой стоимости или 
// суммы амортизации.
//
Функция глРасчетАмортизацииНМА(НМА, ДатаРасчета) Экспорт
	
	Перем СведенияО_НМА;
	Перем БалансоваяСтоимостьНач;
	Перем БалансоваяСтоимостьКон;
	Перем БалансоваяСтоимостьНалог;
	Перем БалансоваяСтоимостьНалогКон;
	Перем СчетНачисленияАмортизации;
	Перем НачисленнаяАмортизацияНач;
	Перем НачисленнаяАмортизацияКон;
	Перем НачисленнаяАмортизацияНалог;
	Перем РассчитаннаяАмортизацияБух;
	Перем РассчитаннаяАмортизацияНалог;
	Перем ПрименяетсяБазоваяСтоимость;
	Перем БухИт;
	
	БухИт = СоздатьОбъект("БухгалтерскиеИтоги");
	БухИт.ПериодМ(ДатаРасчета);
	
	СчетНачисленияАмортизации = ПолучитьПустоеЗначение("Счет");
	БалансоваяСтоимостьНалог = 0;
	БалансоваяСтоимостьНалогКон = 0;
	НачисленнаяАмортизацияНалог = 0;
	РассчитаннаяАмортизацияБух = 0;
	РассчитаннаяАмортизацияНалог = 0;
	
	Если НМА.ПорядокНачисленияАмортизации = 1 Тогда
		БалансоваяСтоимостьНач = БухИт.СНД("04.1",,, НМА);
		БалансоваяСтоимостьКон = БухИт.СКД("04.1",,, НМА);
		
	ИначеЕсли НМА.ПорядокНачисленияАмортизации = 2 Тогда
		СчетНачисленияАмортизации = СчетПоКоду("05");
		БалансоваяСтоимостьНач = БухИт.СНД("04.1",,, НМА);
		БалансоваяСтоимостьКон = БухИт.СКД("04.1",,, НМА);
		НачисленнаяАмортизацияНач = БухИт.СНК("05",,, НМА);
		НачисленнаяАмортизацияКон = БухИт.СКК("05",,, НМА);
		
	ИначеЕсли НМА.ПорядокНачисленияАмортизации = 3 Тогда
		СчетНачисленияАмортизации = СчетПоКоду("04.1");
		БалансоваяСтоимостьНач = НМА.ПервоначальнаяСтоимость;
		БалансоваяСтоимостьКон = НМА.ПервоначальнаяСтоимость;
		НачисленнаяАмортизацияНач = НМА.ПервоначальнаяСтоимость - БухИт.СНД("04.1",,, НМА);
		НачисленнаяАмортизацияКон = НМА.ПервоначальнаяСтоимость - БухИт.СКД("04.1",,, НМА);
	КонецЕсли;
	
	Если НМА.ПорядокНачисленияАмортизации > 1 Тогда
		ДатаРеквизитов = БухИт.КонПериода();
		Если БухИт.СКД("04.1",,, НМА) <> 0 Тогда // если 0, то НМА был в этом месяце списан
			ОстаточнаяСтоимостьБух = БалансоваяСтоимостьНач - НачисленнаяАмортизацияНач;
			Если НМА.СпособНачисленияАмортизации = Перечисление.СпособыНачисленияАмортизацииНМА.Линейный Тогда
				Если НМА.СрокПолезногоИспользования > 0 Тогда
					РассчитаннаяАмортизацияБух = БалансоваяСтоимостьНач/НМА.СрокПолезногоИспользования;
				КонецЕсли;
				
			ИначеЕсли НМА.СпособНачисленияАмортизации = Перечисление.СпособыНачисленияАмортизацииНМА.УменьшаемогоОстатка Тогда
				
				
				Если (ДатаГод(ДатаРасчета) < 2008) ИЛИ ((ДатаГод(ДатаРасчета) = 2008) И (Константа.ПрименятьВ2008ГодуПравилаПБУ142000 = Перечисление.Булево.Да)) Тогда
					// Сумма начисленной амортизации за месяц рассчитывается как:
					// остаточной стоимость /  количество месяцев полезного использования.
					// В первый год эксплуатации остаточная стоимость - это первоначальная
					// стоимость объекта нематериальных активов на дату принятия его к учету
					// (из реквизита первоначальная стоимость).
					// В последующие годы остаточная стоимость - СНД по счету 04 минус СНК по счету 05
					// на 1 января года, в котором происходи расчет аморизации.
					Если ДатаГод(ДатаРасчета) = ДатаГод(НМА.ДатаПринятияКУчету) Тогда // первый год эксплуатации
						ОстаточнаяСтоимость =  НМА.ПервоначальнаяСтоимость;
						
					Иначе
						ДатаНачалаГода = НачГода(ДатаРасчета);
						БухИтОстаточнаяСтоимость = СоздатьОбъект("БухгалтерскиеИтоги");
						БухИтОстаточнаяСтоимость.ПериодМ(ДатаНачалаГода);
						БалансоваяСтоимость = БухИтОстаточнаяСтоимость.СНД("04.1",,, НМА);
						НачисленнаяАморизация = БухИтОстаточнаяСтоимость.СНК("05",,, НМА);
						ОстаточнаяСтоимость = БалансоваяСтоимость - НачисленнаяАморизация;
					КонецЕсли;
					
					СрокПолезногоИспользования = НМА.СрокПолезногоИспользования;
					Если СрокПолезногоИспользования > 0 Тогда
						РассчитаннаяАмортизацияБух = ОстаточнаяСтоимость / СрокПолезногоИспользования;
					КонецЕсли;
					
				Иначе
					// Сумма начисленной амортизации за месяц рассчитывается как:
					// остаточная стоимость * коэффициент/оставшееся количество месяцев полезного использования.
					// В первый год эксплуатации остаточная стоимость - это первоначальная
					// стоимость объекта нематериальных активов на дату принятия его к учету
					// (из реквизита первоначальная стоимость).
					// В последующие годы остаточная стоимость - СНД по счету 04 минус СНК по счету 05
					// на 1 число месяца, в котором происходи расчет аморизации.
					Если ДатаМесяц(ДатаРасчета) = ДатаМесяц(НМА.ДатаПринятияКУчету) Тогда // первый год эксплуатации
						ОстаточнаяСтоимость =  НМА.ПервоначальнаяСтоимость;
						
					Иначе
						ДатаНачалаМесяца = НачМесяца(ДатаРасчета);
						БухИтОстаточнаяСтоимость = СоздатьОбъект("БухгалтерскиеИтоги");
						БухИтОстаточнаяСтоимость.ПериодМ(ДатаНачалаМесяца);
						БалансоваяСтоимость = БухИтОстаточнаяСтоимость.СНД("04.1",,, НМА);
						НачисленнаяАморизация = БухИтОстаточнаяСтоимость.СНК("05",,, НМА);
						ОстаточнаяСтоимость = БалансоваяСтоимость - НачисленнаяАморизация;
					КонецЕсли;
					
					СрокЭксплуатацииЛет = Макс(0, (ДатаГод(ДатаРасчета) - ДатаГод(НМА.ДатаПринятияКУчету))*12 - 1);
					СрокЭксплуатации = СрокЭксплуатацииЛет + (ДатаМесяц(ДатаРасчета) - ДатаМесяц(НМА.ДатаПринятияКУчету))-1;
					ОставшийсяСрокПолезногоИспользования = НМА.СрокПолезногоИспользованияН - СрокЭксплуатации;
					
					ОставшийсяСрокПолезногоИспользования = Макс(0, ОставшийсяСрокПолезногоИспользования);
					
					Если ОставшийсяСрокПолезногоИспользования > 0 Тогда						
						РассчитаннаяАмортизацияБух = ОстаточнаяСтоимость * НМА.Коэффициент/ОставшийсяСрокПолезногоИспользования;
					Иначе
						РассчитаннаяАмортизацияБух = 0;
					КонецЕсли;					
					
				КонецЕсли;
				

			ИначеЕсли НМА.СпособНачисленияАмортизации = Перечисление.СпособыНачисленияАмортизацииНМА.ПропорциональноОбъемуПродукцииРабот Тогда
				Если НМА.ОбщийОбъемПродукцииРабот > 0 Тогда
					РассчитаннаяАмортизацияБух = БалансоваяСтоимостьНач * НМА.ФактическийОбъемПродукцииРаботЗаМесяц.Получить(ДатаРеквизитов) / НМА.ОбщийОбъемПродукцииРабот;
				КонецЕсли;
			КонецЕсли;
			РассчитаннаяАмортизацияБух = Мин(РассчитаннаяАмортизацияБух, ОстаточнаяСтоимостьБух);
		КонецЕсли;
		
		БалансоваяСтоимостьНалог    = БухИт.СНД("Н05.03",,, НМА);   
		БалансоваяСтоимостьНалогКон = БухИт.СКД("Н05.03",,, НМА);
		НачисленнаяАмортизацияНалог = БухИт.СНК("Н05.04",,, НМА);
		Если БухИт.СКД("Н05.03",,, НМА) <> 0 Тогда  // если 0, то НМА был в этом месяце списан
			ОстаточнаяСтоимостьНалог = БалансоваяСтоимостьНалог - НачисленнаяАмортизацияНалог;
			
			Если (ДатаРасчета < '01.01.2009')
			ИЛИ (НМА.АмортизационнаяГруппа = Перечисление.АмортизационныеГруппы.ОтдельнаяГруппа) Тогда // метод использовался до 2009 г.
				
				Если НМА.МетодНачисленияАмортизации = Перечисление.МетодыНачисленияАмортизации.Линейный Тогда
					Если НМА.СрокПолезногоИспользованияН > 0 Тогда
						РассчитаннаяАмортизацияНалог = БалансоваяСтоимостьНалог * НМА.СпециальныйКоэффициент.Получить(ДатаРеквизитов) / НМА.СрокПолезногоИспользованияН;
					КонецЕсли;
					
				ИначеЕсли НМА.МетодНачисленияАмортизации = Перечисление.МетодыНачисленияАмортизации.Нелинейный Тогда
					Если НМА.СрокПолезногоИспользованияН > 0 Тогда
						
						ДатаПринятияКУчету = Макс(НМА.ДатаПринятияКУчету, '31.12.2001');
						БазоваяСтоимость = НМА.БазоваяСтоимость.Получить(ДатаРеквизитов);
						ДатаНачалаПримененияБазовойСтоимости = глДатаНаКоторуюУстановленоЗначение(НМА, "БазоваяСтоимость", ДатаРеквизитов);
						
						Если БазоваяСтоимость = 0 Тогда // базовая стоимость не определена
							ПрименяетсяБазоваяСтоимость = 0;
							
						ИначеЕсли ДатаПринятияКУчету > ДатаНачалаПримененияБазовойСтоимости Тогда // не понятно с какого момента применять базовую стоимость
							Если ОстаточнаяСтоимостьНалог > (БалансоваяСтоимостьНалог  * 0.2) Тогда //если остаточная cтоимость > 20% от первоначальной
								ПрименяетсяБазоваяСтоимость = 0;
							Иначе
								ПрименяетсяБазоваяСтоимость = 1;
							КонецЕсли;
							
						Иначе
							ПрименяетсяБазоваяСтоимость = 1;
						КонецЕсли;
						
						
						Если ПрименяетсяБазоваяСтоимость = 0 Тогда
							РассчитаннаяАмортизацияНалог = ОстаточнаяСтоимостьНалог * 2 * НМА.СпециальныйКоэффициент.Получить(ДатаРеквизитов) / НМА.СрокПолезногоИспользованияН;
							
						Иначе
							КоличествоПолныхМесяцев = (ДатаГод(КонМесяца(ДатаРасчета)) - ДатаГод(КонМесяца(ДатаПринятияКУчету)+1)) * 12 
							+ ДатаМесяц(КонМесяца(ДатаРасчета)) - ДатаМесяц(КонМесяца(ДатаПринятияКУчету)+1);
							ОставшийсяСрокПолезногоИспользования = НМА.СрокПолезногоИспользованияН - КоличествоПолныхМесяцев;
							Если ОставшийсяСрокПолезногоИспользования > 0 Тогда
								РассчитаннаяАмортизацияНалог = ОстаточнаяСтоимостьНалог/ОставшийсяСрокПолезногоИспользования
								
							Иначе
								РассчитаннаяАмортизацияНалог = ОстаточнаяСтоимостьНалог;
							КонецЕсли;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
				
				
				Иначе //метод расчета с 2009 г.
					
					// Линейный метод
					Если (Константа.МетодНачисленияАмортизацииНУ.Получить(ДатаРасчета) = Перечисление.МетодыНачисленияАмортизации.Линейный)
					ИЛИ (((НМА.АмортизационнаяГруппа = Перечисление.АмортизационныеГруппы.ВосьмаяГруппа)
					ИЛИ (НМА.АмортизационнаяГруппа = Перечисление.АмортизационныеГруппы.ДевятаяГруппа)
					ИЛИ (НМА.АмортизационнаяГруппа = Перечисление.АмортизационныеГруппы.ДесятаяГруппа)))
					ИЛИ ((НМА.МетодНачисленияАмортизации = Перечисление.МетодыНачисленияАмортизации.Линейный) И (НМА.АмортизационнаяГруппа = Перечисление.АмортизационныеГруппы.ОтдельнаяГруппа)) Тогда
						
						ДатаПереходаНаЛинейныйМетод ='01.01.2009';
						МатодНачисленияАмортизацииНУ = СоздатьОбъект("Периодический");
						МатодНачисленияАмортизацииНУ.ИспользоватьОбъект("МетодНачисленияАмортизацииНУ",);
						МатодНачисленияАмортизацииНУ.ОбратныйПорядок();
						МатодНачисленияАмортизацииНУ.ВыбратьЗначения('01.01.2009', ДатаРасчета);
						Пока МатодНачисленияАмортизацииНУ.ПолучитьЗначение() = 1 Цикл
							Если МатодНачисленияАмортизацииНУ.Значение = Перечисление.МетодыНачисленияАмортизации.Линейный Тогда
								ДатаПереходаНаЛинейныйМетод = МатодНачисленияАмортизацииНУ.ДатаЗнач;
							Иначе
								Прервать;
							КонецЕсли;											
						КонецЦикла;
						
						Если НМА.СрокПолезногоИспользованияН > 0 Тогда
							Если (ПустоеЗначение(НМА.Состояние.Получить(ДатаПереходаНаЛинейныйМетод)) = 1)
							ИЛИ ((НМА.АмортизационнаяГруппа = Перечисление.АмортизационныеГруппы.ВосьмаяГруппа)
							ИЛИ (НМА.АмортизационнаяГруппа = Перечисление.АмортизационныеГруппы.ДевятаяГруппа)
							ИЛИ (НМА.АмортизационнаяГруппа = Перечисление.АмортизационныеГруппы.ДесятаяГруппа)
							ИЛИ (НМА.АмортизационнаяГруппа = Перечисление.АмортизационныеГруппы.ОтдельнаяГруппа)) 
							ИЛИ ((ПустоеЗначение(НМА.Состояние.Получить('31.12.2008')) = 0) И (НМА.МетодНачисленияАмортизации = Перечисление.МетодыНачисленияАмортизации.Линейный)) Тогда 
								//Условие выполняется для объектов принятых в период применения линейного метода, для объектов
								// отдельной группы, по которым применялся линейный метод, для объектов по которым до 2009 г.
								// применялся нелинейный метод, отдельным объектам 8-9 групп для которых всегда применяется линейный метод
								
								РассчитаннаяАмортизацияНалог = БалансоваяСтоимостьНалог * НМА.СпециальныйКоэффициент.Получить(ДатаРеквизитов) / НМА.СрокПолезногоИспользованияН;
							Иначе
								
								БухИтЛ = СоздатьОбъект("БухгалтерскиеИтоги");
								БухИтЛ .Актуальность(1);
								БухИтЛ.ПериодМ(ДатаПереходаНаЛинейныйМетод);
								
								ЛинейныйБалансоваяСтоимостьНалог       = БалансоваяСтоимостьНалог;   
								ЛинейныйНачисленнаяАмортизацияНалог    = БухИтЛ.СНК("Н05.04",,, НМА);
								Если ЛинейныйБалансоваяСтоимостьНалог <> 0 Тогда
									ЛинейныйОстаточнаяСтоимостьНалог = ЛинейныйБалансоваяСтоимостьНалог - ЛинейныйНачисленнаяАмортизацияНалог;
								КонецЕсли;
								
								Если ПустоеЗначение (НМА.ДатаПринятияКУчету) = 1 Тогда
									ОставшийсяСрокПолезногоИспользования = 0;
								Иначе
									
									СрокЭксплуатацииЛет = Макс(0, (ДатаГод(ДатаРасчета) - ДатаГод(НМА.ДатаПринятияКУчету))*12 - 1);
									СрокЭксплуатации = СрокЭксплуатацииЛет + (ДатаМесяц(ДатаРасчета) - ДатаМесяц(НМА.ДатаПринятияКУчету));
									ОставшийсяСрокПолезногоИспользования = НМА.СрокПолезногоИспользованияН - СрокЭксплуатации;
									
									ОставшийсяСрокПолезногоИспользования = Макс(0, ОставшийсяСрокПолезногоИспользования);
									
								КонецЕсли;
								
								Если ОставшийсяСрокПолезногоИспользования = 0 Тогда
									РассчитаннаяАмортизацияНалог = 0;
								Иначе											
									РассчитаннаяАмортизацияНалог = ЛинейныйОстаточнаяСтоимостьНалог * НМА.СпециальныйКоэффициент.Получить(ДатаРеквизитов) / ОставшийсяСрокПолезногоИспользования;
								КонецЕсли;
								
								
							КонецЕсли;							
							
						КонецЕсли;
						
						// Нелинейный метод
					ИначеЕсли Константа.МетодНачисленияАмортизацииНУ.Получить(ДатаРасчета) = Перечисление.МетодыНачисленияАмортизации.Нелинейный Тогда
						
						Если  НМА.АмортизационнаяГруппа = Перечисление.АмортизационныеГруппы.ОтдельнаяГруппа Тогда //начисляем как и раньше
							
							Если НМА.СрокПолезногоИспользованияН > 0 Тогда
								
								ДатаПринятияКУчету = Макс(НМА.ДатаПринятияКУчету, '31.12.2001');
								БазоваяСтоимость = НМА.БазоваяСтоимость.Получить(ДатаРеквизитов);
								ДатаНачалаПримененияБазовойСтоимости = глДатаНаКоторуюУстановленоЗначение(НМА, "БазоваяСтоимость", ДатаРеквизитов);
								
								Если БазоваяСтоимость = 0 Тогда // базовая стоимость не определена
									ПрименяетсяБазоваяСтоимость = 0;
									
								ИначеЕсли ДатаПринятияКУчету > ДатаНачалаПримененияБазовойСтоимости Тогда // не понятно с какого момента применять базовую стоимость
									Если ОстаточнаяСтоимостьНалог > (БалансоваяСтоимостьНалог  * 0.2) Тогда //если остаточная cтоимость > 20% от первоначальной
										ПрименяетсяБазоваяСтоимость = 0;
									Иначе
										ПрименяетсяБазоваяСтоимость = 1;
									КонецЕсли;
									
								Иначе
									ПрименяетсяБазоваяСтоимость = 1;
								КонецЕсли;
								
								
								Если ПрименяетсяБазоваяСтоимость = 0 Тогда
									РассчитаннаяАмортизацияНалог = ОстаточнаяСтоимостьНалог * 2 * НМА.СпециальныйКоэффициент.Получить(ДатаРеквизитов) / НМА.СрокПолезногоИспользованияН;
									
								Иначе
									КоличествоПолныхМесяцев = (ДатаГод(КонМесяца(ДатаРасчета)) - ДатаГод(КонМесяца(ДатаПринятияКУчету)+1)) * 12 
									+ ДатаМесяц(КонМесяца(ДатаРасчета)) - ДатаМесяц(КонМесяца(ДатаПринятияКУчету)+1);
									ОставшийсяСрокПолезногоИспользования = НМА.СрокПолезногоИспользованияН - КоличествоПолныхМесяцев;
									Если ОставшийсяСрокПолезногоИспользования > 0 Тогда
										РассчитаннаяАмортизацияНалог = ОстаточнаяСтоимостьНалог/ОставшийсяСрокПолезногоИспользования
										
									Иначе
										РассчитаннаяАмортизацияНалог = ОстаточнаяСтоимостьНалог;
									КонецЕсли;
								КонецЕсли;
							КонецЕсли;
							
						Иначе 
							
							Если НМА.АмортизационнаяГруппа = Перечисление.АмортизационныеГруппы.ПерваяГруппа Тогда
								НормаАмортизации = 14.3;									
							ИначеЕсли НМА.АмортизационнаяГруппа = Перечисление.АмортизационныеГруппы.ВтораяГруппа Тогда
								НормаАмортизации = 8.8;									
							ИначеЕсли НМА.АмортизационнаяГруппа = Перечисление.АмортизационныеГруппы.ТретьяГруппа Тогда
								НормаАмортизации = 5.6;
							ИначеЕсли НМА.АмортизационнаяГруппа = Перечисление.АмортизационныеГруппы.ЧетвертаяГруппа Тогда
								НормаАмортизации = 3.8;
							ИначеЕсли НМА.АмортизационнаяГруппа = Перечисление.АмортизационныеГруппы.ПятаяГруппа Тогда
								НормаАмортизации = 2.7;
							ИначеЕсли НМА.АмортизационнаяГруппа = Перечисление.АмортизационныеГруппы.ШестаяГруппа Тогда
								НормаАмортизации = 1.8;
							ИначеЕсли НМА.АмортизационнаяГруппа = Перечисление.АмортизационныеГруппы.СедьмаяГруппа Тогда
								НормаАмортизации = 1.3;
							ИначеЕсли НМА.АмортизационнаяГруппа = Перечисление.АмортизационныеГруппы.ВосьмаяГруппа Тогда
								НормаАмортизации = 1;
							ИначеЕсли НМА.АмортизационнаяГруппа = Перечисление.АмортизационныеГруппы.ДевятаяГруппа Тогда
								НормаАмортизации = 0.8;
							ИначеЕсли НМА.АмортизационнаяГруппа = Перечисление.АмортизационныеГруппы.ДесятаяГруппа Тогда
								НормаАмортизации = 0.7;
							КонецЕсли;
							
							РассчитаннаяАмортизацияНалог = ОстаточнаяСтоимостьНалог * НМА.СпециальныйКоэффициент.Получить(ДатаРеквизитов) * НормаАмортизации/100;
							
						КонецЕсли;
						
					КонецЕсли;
			
			КонецЕсли;
			
			РассчитаннаяАмортизацияНалог = Мин(РассчитаннаяАмортизацияНалог, ОстаточнаяСтоимостьНалог);
		КонецЕсли;
	КонецЕсли;
	РассчитаннаяАмортизацияБух = Окр(РассчитаннаяАмортизацияБух, 2, 1);
	РассчитаннаяАмортизацияНалог = Окр(РассчитаннаяАмортизацияНалог, 2, 1);
	
	СведенияО_НМА = СоздатьОбъект("СписокЗначений");
	СведенияО_НМА.Установить("БалансоваяСтоимостьНач", БалансоваяСтоимостьНач);
	СведенияО_НМА.Установить("БалансоваяСтоимостьКон", БалансоваяСтоимостьКон);
	СведенияО_НМА.Установить("БалансоваяСтоимостьНалог", БалансоваяСтоимостьНалог);
	СведенияО_НМА.Установить("БалансоваяСтоимостьНалогКон", БалансоваяСтоимостьНалогКон);
	СведенияО_НМА.Установить("СчетНачисленияАмортизации", СчетНачисленияАмортизации);
	СведенияО_НМА.Установить("НачисленнаяАмортизацияНач", НачисленнаяАмортизацияНач);
	СведенияО_НМА.Установить("НачисленнаяАмортизацияКон", НачисленнаяАмортизацияКон);
	СведенияО_НМА.Установить("НачисленнаяАмортизацияНалог", НачисленнаяАмортизацияНалог);
	СведенияО_НМА.Установить("РассчитаннаяАмортизацияБух", РассчитаннаяАмортизацияБух);
	СведенияО_НМА.Установить("РассчитаннаяАмортизацияНалог", РассчитаннаяАмортизацияНалог);
	СведенияО_НМА.Установить("ПрименяетсяБазоваяСтоимость", ПрименяетсяБазоваяСтоимость);
	
	Возврат СведенияО_НМА;
	
	
КонецФункции // глРасчетАмортизацииНМА()

//*****************************************************************************
// глРасчетСуммыСписанияНИОКР(НИОКР, ДатаРасчета)
//
// Параметры:
// НИОКР        - Справочник.НематериальныеАктивы. Расходов по НИОКР, принятые к учету.
// ДатаРасчета     - Дата. Любое число месяца, в котором производится списание.
//
// Возвращаемое значение:
//  СписокЗначений.
//
// Описание:
//  Рассчитывается сумма списания расходов за месяц.
//
Функция глРасчетСуммыСписанияНИОКР(НИОКР, ДатаРасчета) Экспорт
	
	Перем БухИт;

	БухИт = СоздатьОбъект("БухгалтерскиеИтоги");
	БухИт.ПериодМ(ДатаРасчета);
	
	ОбщаяСуммаРасходов = НИОКР.ПервоначальнаяСтоимость;
	СуммаРасходовНач   = БухИт.СНД("04.2",,, НИОКР);
	СуммаРасходовКон   = БухИт.СКД("04.2",,, НИОКР);
	РассчитаннаяСуммаСписания = 0;
	
    Если (ОбщаяСуммаРасходов <= 0) или (СуммаРасходовКон <= 0) или (СуммаРасходовНач <=0) Тогда
	ИначеЕсли НИОКР.ПорядокНачисленияАмортизации > 1 Тогда
		
		Если НИОКР.СпособНачисленияАмортизации = Перечисление.СпособыНачисленияАмортизацииНМА.Линейный Тогда
			Если НИОКР.СрокПолезногоИспользования > 0 Тогда
				РассчитаннаяСуммаСписания = ОбщаяСуммаРасходов/НИОКР.СрокПолезногоИспользования;
			КонецЕсли;
	
		ИначеЕсли НИОКР.СпособНачисленияАмортизации = Перечисление.СпособыНачисленияАмортизацииНМА.ПропорциональноОбъемуПродукцииРабот Тогда
			Если НИОКР.ОбщийОбъемПродукцииРабот > 0 Тогда
				РассчитаннаяСуммаСписания = ОбщаяСуммаРасходов * НИОКР.ФактическийОбъемПродукцииРаботЗаМесяц.Получить(КонМесяца(ДатаРасчета)) / НИОКР.ОбщийОбъемПродукцииРабот;
			КонецЕсли;
		КонецЕсли;
		РассчитаннаяСуммаСписания = Окр(Мин(РассчитаннаяСуммаСписания, СуммаРасходовКон), 2, 1);
	КонецЕсли;

	СведенияО_НИОКР = СоздатьОбъект("СписокЗначений");
	СведенияО_НИОКР.Установить("СуммаРасходовКон", СуммаРасходовКон);
	СведенияО_НИОКР.Установить("РассчитаннаяСуммаСписания", РассчитаннаяСуммаСписания);

	Возврат СведенияО_НИОКР;
	
КонецФункции // глРасчетСуммыСписанияНИОКР()

//******************************************************************************
// глПолучитьСчетРасходовДляЦелейНалоговогоУчета()
//
// Параметры:
//  ВидРасхода - Перечисление.ВидыРасходов - вид расхода для целей налогового учета;
//  ЭлементРасхода - Перечислени - элемент расхода;
//  ОбъектУчета - Справочник - объект на который направлены расходы.
//  ДатаДок     - дата признания расходов для налогового учета.
//
// Возвращаемое значение:
//  Список значений - счет и аналитика для отнесения расходов.
//
// Вызывается из формул элементов диалога:
//  Нет.
//
// Описание:
//  Определяется забалансовый счет и объекты аналитического учета для отнесения расходов
//  для целей налогового учета на основании переданных в функцию параметров.
//
Функция глПолучитьСчетРасходовДляЦелейНалоговогоУчета(ВидРасхода, ЭлементРасхода, ОбъектУчета, ДатаДок = "") Экспорт
	                                          
	Счет = ""; Субконто1 = ""; Субконто2 = ""; Субконто3 = "";
	
	Если ВидРасхода = Перечисление.ВидыРасходов.ПриобретениеОсновныхСредств Тогда
		Если ПустоеЗначение(ОбъектУчета) = 0 Тогда
			ТипОбъекта = ОбъектУчета.Вид();
			
		Иначе
			ТипОбъекта = "";
		КонецЕсли;
		
		Если ТипОбъекта = "Оборудование" Тогда
			Счет = СчетПоКоду("Н01.02");
			
		Иначе
			Счет = СчетПоКоду("Н01.01");
		КонецЕсли;
	    Субконто1 = ОбъектУчета;
		
	ИначеЕсли ВидРасхода = Перечисление.ВидыРасходов.СтроительствоОсновныхСредств Тогда
		Счет = СчетПоКоду("Н01.09");
	    Субконто1 = ОбъектУчета;
		
	ИначеЕсли ВидРасхода = Перечисление.ВидыРасходов.ПриобретениеНематериальныхАктивов Тогда
		Если ПустоеЗначение(ДатаДок) = 1 Тогда
		    Счет = СчетПоКоду("Н01.01");
			
		ИначеЕсли глНовыеПравилаВеденияНУ(ДатаДок) = 1 Тогда
			Счет = СчетПоКоду("Н01.08");
		
		Иначе
			Счет = СчетПоКоду("Н01.01");
		КонецЕсли;
		Субконто1 = ОбъектУчета;
		                                        
	ИначеЕсли ВидРасхода = Перечисление.ВидыРасходов.ПриобретениеМатериалов Тогда
		Счет = СчетПоКоду("Н02.01");
		Субконто1 = ОбъектУчета;
		
	ИначеЕсли ВидРасхода = Перечисление.ВидыРасходов.ПриобретениеТоваров Тогда
		Счет = СчетПоКоду("Н02.02.1");
		Субконто1 = ОбъектУчета;	
		
	ИначеЕсли ВидРасхода = Перечисление.ВидыРасходов.ПрямыеРасходы Тогда
		
		Если ПустоеЗначение(ОбъектУчета) = 0 Тогда
			Счет = СчетПоКоду("Н01.05");
		    Субконто2 = ОбъектУчета;
			
		Иначе
			Счет = СчетПоКоду("Н01.06");
		КонецЕсли;                                                             
		Субконто1 = ЭлементРасхода;
		
	ИначеЕсли ВидРасхода = Перечисление.ВидыРасходов.КосвенныеРасходы Тогда
		Счет = СчетПоКоду("Н07.04.1");
		Субконто1 = ЭлементРасхода;
	
	ИначеЕсли ВидРасхода = Перечисление.ВидыРасходов.ПриобретениеЦенныхБумаг Тогда
		Счет = СчетПоКоду("Н02.05");
		Субконто1 = ОбъектУчета;
	                                            
	ИначеЕсли ВидРасхода = Перечисление.ВидыРасходов.ПриобретениеПрав Тогда
		Счет = СчетПоКоду("Н02.06");
		Субконто1 = ОбъектУчета;
		
	ИначеЕсли ВидРасхода = Перечисление.ВидыРасходов.ПредставительскиеРасходы Тогда
		Счет = СчетПоКоду("Н03.03");
		
	ИначеЕсли ВидРасхода = Перечисление.ВидыРасходов.РасходыНаРекламу Тогда
		Счет = СчетПоКоду("Н03.04");
		
	ИначеЕсли ВидРасхода = Перечисление.ВидыРасходов.РеализацияОсновныхСредств Тогда
		Счет = СчетПоКоду("Н07.07");
		Субконто1 = ОбъектУчета;
		
	ИначеЕсли ВидРасхода = Перечисление.ВидыРасходов.РеализацияНематериальныхАктивов Тогда	
		Счет = СчетПоКоду("Н07.08");
		Субконто1 = ОбъектУчета;
		
	ИначеЕсли ВидРасхода = Перечисление.ВидыРасходов.НИОКР Тогда	
		Счет = СчетПоКоду("Н01.03");
		Субконто1 = ОбъектУчета;
		                                
	ИначеЕсли ВидРасхода = Перечисление.ВидыРасходов.ОсвоениеПриродныхРесурсов Тогда	
		Счет = СчетПоКоду("Н01.04");	
		                                    
	ИначеЕсли ВидРасхода = Перечисление.ВидыРасходов.РеализацияПрочегоИмущества Тогда	
		Если ОбъектУчета.Вид() = "ЦенныеБумаги" Тогда
			Счет = СчетПоКоду("Н07.14");
			Субконто1 = ОбъектУчета;
			
		Иначе
			Счет = СчетПоКоду("Н07.06");
		КонецЕсли;
		
	ИначеЕсли ВидРасхода = Перечисление.ВидыРасходов.ВыбытиеИмущества Тогда	
		Счет = СчетПоКоду("Н09");
		Субконто1 = Перечисление.ВнереализационныеРасходы.ПрочиеВнереализационныеРасходы;
		
	ИначеЕсли ВидРасхода = Перечисление.ВидыРасходов.ТранспортныеРасходы Тогда	
		Счет = СчетПоКоду("Н01.07");
		
	ИначеЕсли ВидРасхода = Перечисление.ВидыРасходов.ГарантийныйРемонтИОбслуживание Тогда
		Счет = СчетПоКоду("Н03.01");
		
	ИначеЕсли ВидРасхода = Перечисление.ВидыРасходов.ВнереализационныеРасходы Тогда
		Счет = СчетПоКоду("Н09");
		Субконто1 = ЭлементРасхода;
		
	ИначеЕсли ВидРасхода = Перечисление.ВидыРасходов.НеПринимаемые Тогда	
		Счет = СчетПоКоду("Н07.04.1");
		Субконто1 = Перечисление.ГруппыВидыРасходов.НеПринимаемые;
	КонецЕсли;
	
	СчетСАналитикой = СоздатьОбъект("СписокЗначений");
	СчетСАналитикой.ДобавитьЗначение(Счет, "Счет");
	СчетСАналитикой.ДобавитьЗначение(Субконто1, "Субконто1");
	СчетСАналитикой.ДобавитьЗначение(Субконто2, "Субконто2");
	СчетСАналитикой.ДобавитьЗначение(Субконто3, "Субконто3");
	
	Возврат СчетСАналитикой;
	
КонецФункции // глПолучитьСчетРасходовДляЦелейНалоговогоУчета()

///////////////////////////////////////////////////////////////////////////
// Обработка расшифровки стандартных отчетов
//
Процедура ОбработкаЯчейкиТаблицы(Расшифровка, СтандартнаяОбработка, Таблица) Экспорт
	Перем Отчет;

	 // Расшифровка отчета
	Если ТипЗначенияСтр(Расшифровка) = "СписокЗначений" Тогда
		
		Док = Расшифровка.Получить("Документ");
		ТаблицаДанных = Расшифровка.Получить("Таблица данных"); 
		Меню = Расшифровка.Получить("Меню");
		Отчет = Расшифровка.Получить("Отчет");
		
		Если ТипЗначения(Док) <> 0 Тогда
			ОткрытьФорму("Операция",, Док, Расшифровка.Получить("НомерПроводки"),
	 					Расшифровка.Получить("НомерКорреспонденции"),-1);
	 					
	 	ИначеЕсли ТипЗначения(ТаблицаДанных) <> 0 Тогда // формирование расшифровок по регламентным операциям
	 					
	 		Если ПустоеЗначение(ТаблицаДанных) = 1 Тогда
	 			Предупреждение("Расшифровки нет!", 60);
	 		    Возврат;
	 		КонецЕсли;
	 					
	 		ИдентификаторТаблицы = Расшифровка.Получить("Наименование таблицы");
	 		ДополнительныеДанные = Расшифровка.Получить("Дополнительные данные");
	 		
	 		НачалоПериода = Расшифровка.Получить("Начало периода");
	 		Если ПустоеЗначение(НачалоПериода) = 1 Тогда
	 		    ДатаОперации = СокрЛП(Нрег(Формат(Расшифровка.Получить("Дата операции"), "Д ММММГГГГ")));
	 			
	 		Иначе
	 			КонецПериода = Расшифровка.Получить("Дата операции");
	 			ДатаОперации = Нрег(ПериодСтр(НачалоПериода, КонецПериода));
	 		КонецЕсли;
	 		
			Таб = СоздатьОбъект("Таблица");
			Таб.ИсходнаяТаблица("ЗакрытиеМесяца");
		    Таб.ВывестиСекцию("Шапка" + ИдентификаторТаблицы);
			                           
			// Вывод строк таблицы
			ТаблицаДанных.ВыбратьСтроки();
			Пока ТаблицаДанных.ПолучитьСтроку() = 1 Цикл
			    Таб.ВывестиСекцию("Строка" + ИдентификаторТаблицы);
			КонецЦикла;
				
			Таб.ВывестиСекцию("Итого" + ИдентификаторТаблицы);
			                   
			// Определим количество столбцов печатной формы, которые выводятся на печать.
			НаименованиеТаблицы = Таб.Область(1,2).Текст;
			КоличествоСтолцов = 2;
			ТекстЯчейки = НаименованиеТаблицы;
			Пока 1 = 1 Цикл
				
			    Если ТекстЯчейки = Таб.Область(1, КоличествоСтолцов + 1).Текст Тогда
			    	КоличествоСтолцов = КоличествоСтолцов + 1;
				Иначе
					Прервать;
				КонецЕсли;
				
			КонецЦикла;
			
			Таб.Опции(0, 0, 0, 0, "Печать" + ИдентификаторТаблицы, "Окно" + ИдентификаторТаблицы);
			Таб.ОбластьПечати(1, 2,, КоличествоСтолцов);
			Таб.ТолькоПросмотр(1);
			Таб.Показать(НаименованиеТаблицы,"");
			
		ИначеЕсли Расшифровка.Получить("ОткрытьЖурналДокументов") = 1 Тогда
			Док = Расшифровка.Получить("ДокументЖурнала");
			Конт = ПолучитьПустоеЗначение("");
			ОткрытьФорму("Журнал.Общий#ЖДОб", Конт);
			Конт.УстановитьИнтервал(Док.ДатаДок - 30, Док.ДатаДок + 30);
			Конт.АктивизироватьОбъект(Док);		
			
		ИначеЕсли (ТипЗначения(Меню) <> 0) или (ТипЗначения(Отчет) <> 0) Тогда// формирование стандартных отчетов  
			
			Меню = Расшифровка.Получить("Меню");
			Если ТипЗначенияСтр(Меню) = "СписокЗначений" Тогда
				Если Меню.ВыбратьЗначение(Отчет, "",,, 1) = 0 Тогда
					Возврат;
				КонецЕсли;
			Иначе
				Отчет = Расшифровка.Получить("Отчет");
			КонецЕсли;
			
			глРасшифровка = Расшифровка;
			глФлагРасшифровки = 1;
			глОбновить = Число(Расшифровка.Получить("Обновить"));
			Если глОбновить <> 0 Тогда
				глТаблица = Таблица;
			КонецЕсли;
			
			Если Отчет = "ОборотноСальдоваяВедомостьПоСчету" Тогда
				Счет = Расшифровка.Получить("Счет");
				Если Счет.КоличествоСубконто() = 0 Тогда
					Расшифровка.Установить("ДанныеПоСубсчетам", Счет.ЭтоГруппа());
				КонецЕсли;
			КонецЕсли;                                                  
			
			Попытка            
				Если Метаданные.Отчет(Отчет).Выбран() = 1 Тогда
					ОткрытьФорму("Отчет."+Отчет+"#");
				ИначеЕсли Метаданные.Обработка(Отчет).Выбран() = 1 Тогда 
					Если ПустоеЗначение(Расшифровка.Получить("РасшифровкаКарточкиЕСН"))=0 Тогда
						ОткрытьФорму("Обработка."+Отчет,Расшифровка.Получить("РасшифровкаКарточкиЕСН"));
					Иначе
						ОткрытьФорму("Обработка."+Отчет+"#");
					КонецЕсли;
				ИначеЕсли ФС.СуществуетФайл(Отчет) = 1 Тогда
					ОткрытьФорму("Отчет",, Отчет);
				КонецЕсли;
			Исключение   
				Сообщить(ОписаниеОшибки());
			КонецПопытки;                  
			
			глФлагРасшифровки = 0;
			глРасшифровка = 0;
			глОбновить = 0;
			
		Иначе
			
			Если Расшифровка.РазмерСписка() = 1 Тогда
				Объект = Расшифровка.ПолучитьЗначение(1);
			ИначеЕсли Расшифровка.РазмерСписка() > 1 Тогда
				Если Расшифровка.ВыбратьЗначение(Объект, "",,, 1) = 0 Тогда
					Возврат;
				КонецЕсли;	
			КонецЕсли;
			
			Попытка
				ОткрытьФорму(Объект,,);
			Исключение   
				Сообщить(ОписаниеОшибки());
			КонецПопытки;
		КонецЕсли;
	
	Иначе
		СтандартнаяОбработка = 1;
	КонецЕсли;
		
КонецПроцедуры // ОбработкаЯчейкиТаблицы

//******************************************************************************
Процедура УстановитьФорматСумм()
	сФорматС = "Ч0"+(Метаданные.ДлинаСуммыПроводки+3)+"."+Метаданные.ТочностьСуммыПроводки;
	Если Метаданные.РазделятьТриадыСуммыПроводки = 1 Тогда
		сФорматС = сФорматС+".,";
	КонецЕсли;

	сФорматВ = "Ч0"+(Метаданные.ДлинаВалютнойСуммыПроводки+3)+"."+Метаданные.ТочностьВалютнойСуммыПроводки;
	Если Метаданные.РазделятьТриадыВалютнойСуммыПроводки= 1 Тогда
		сФорматВ = сФорматВ+".,";
	КонецЕсли;

	сФорматК = "Ч0"+(Метаданные.ДлинаКоличестваПроводки+3)+"."+Метаданные.ТочностьКоличестваПроводки;
	Если Метаданные.РазделятьТриадыКоличестваПроводки = 1 Тогда
		сФорматК = сФорматК+".,";
	КонецЕсли;
КонецПроцедуры

//******************************************************************************
Функция ФорматС(Сум) Экспорт
	Возврат Формат(Сум, сФорматС);
КонецФункции

//******************************************************************************
Функция ФорматВ(ВалСум) Экспорт
	Возврат Формат(ВалСум, сФорматВ);
КонецФункции

//******************************************************************************
Функция ФорматК(Кол) Экспорт
	Возврат Формат(Кол, сФорматК);
КонецФункции

//******************************************************************************
// глНазваниеОрганизации(Конт)
//
// Параметры:
//  Конт - Контекст формы стандартного отчета.
//
// Возвращаемое значение:
//  Строка - Название организации для подстановки в колонтитул 
// стандартного отчета.
//
// Описание:
//  Находит объект метаданных, содержащий наименование организации.
// Применяется при формировании колонтитулов стандартных отчетов.
// Если в конфигурации применяется разделитель учета,
// то рекомендуется возвращать наименование разделителя учета,
// указанного в форме стандартного отчета.
//
Функция глНазваниеОрганизации(Конт) Экспорт
	                         
	НазваниеОрганизации = "";
	РУ = Конт.РазделительУчета;
	ДатаЗнач = Конт.Дата2;
	
	Если ПустоеЗначение(РУ) = 1 Тогда
		// Укажите объект, содержащий наименование организации.
		Если Метаданные.Константа("НазваниеОрганизации").Выбран() = 1 Тогда
			Если Метаданные.Константа("НазваниеОрганизации").Периодический = 1 Тогда
				НазваниеОрганизации = Константа.НазваниеОрганизации.Получить(ДатаЗнач);    
				
			Иначе
				НазваниеОрганизации = Константа.НазваниеОрганизации;
			КонецЕсли;
		КонецЕсли;
		
	Иначе
		НазваниеОрганизации = РУ;
	КонецЕсли;
	
	Возврат СокрЛП(НазваниеОрганизации);
	
КонецФункции // глНазваниеОрганизации()

//_____________________________________________________________________________
Процедура глПриВыбореРасчетногоСчета(Конт,ИмяЗначения) Экспорт
	РС = СоздатьОбъект("Справочник.БанковскиеСчета");
	РС.НайтиЭлемент(Конт.РасчетныйСчет);
	Если РС.Выбрать("Укажите расчетный счет","ФормаСписка") = 1 Тогда
		Конт.РасчетныйСчет = РС.ТекущийЭлемент();
		СохранитьЗначение(ИмяЗначения,Конт.РасчетныйСчет);
	КонецЕсли;
КонецПроцедуры
//_____________________________________________________________________________
Функция глПредставлениеРасчСчета(Конт) Экспорт
	Если Конт.РасчетныйСчет.Выбран() = 0 Тогда
		Возврат "Выберите расчетный счет!";
	КонецЕсли;
	Возврат "Р/с № "+СокрЛП(Конт.РасчетныйСчет.Номер)+" в "+СокрЛП(Конт.РасчетныйСчет.БанкОрганизации.Наименование);
КонецФункции //глПредставлениеРасчСчета
//_____________________________________________________________________________
Процедура глДобавитьРеквизит(Стр, Предлог, Реквизит) Экспорт
	Если ПустоеЗначение(Реквизит) = 0 Тогда
		Стр = Стр + Предлог + СокрП(Реквизит);
	КонецЕсли;
КонецПроцедуры //глДобавитьРеквизит

//******************************************************************************
//	глПлатежныеРеквизиты()
//
//	Описание:
// 		Формирует банковские реквизиты платежного документа  
// 		На основании введенных реквизитов справочников
//		"Банковские Счета" или "Расчетные Счета"
//		Вызывается из процедуры печать Платежных документов
//		
Процедура глПлатежныеРеквизиты(Счет, СтрОрганизация="", СтрБанк="", РасчСчет="", БИК="", КоррСчет="", ИНН="", КПП="", Режим = 1) Экспорт

	СтрБанк = "";
	ПолучСтрОрг = СокрЛП(СтрОрганизация);
	СтрОрганизация = "";
	
	Если Счет.Вид()="РасчетныеСчета" Тогда
		
		ИНН = ?(Счет.Владелец.ВидКонтрагента = Перечисление.ВидыКонтрагентов.ЧастноеЛицо, СРЕД(Счет.Владелец.ИНН,1,12),СРЕД(Счет.Владелец.ИНН,1,10));
		СтрКПП = ?(Счет.Владелец.ВидКонтрагента = Перечисление.ВидыКонтрагентов.ЧастноеЛицо, "",СРЕД(Счет.Владелец.ИНН,12));
		
		КПП = ?(ПустоеЗначение(КПП) = 0, КПП, СтрКПП);
		
		Если Режим = 1 Тогда
			глДобавитьРеквизит(СтрОрганизация, "ИНН ", Счет.Владелец.ИНН);
		КонецЕсли;
		Если ПустаяСтрока(Счет.Владелец.ПолнНаименование)=1 Тогда
			глДобавитьРеквизит(СтрОрганизация, " ", Счет.Владелец.Наименование);
		Иначе
			глДобавитьРеквизит(СтрОрганизация, " ", Счет.Владелец.ПолнНаименование);
		КонецЕсли;
		
	Иначе
		Если СтрДлина(СокрЛП(Константа.ИННОрганизации))<13 Тогда
			ИНН = СокрЛП(Константа.ИННОрганизации);
			СтрКПП = "";
		ИначеЕсли Найти("0123456789",СРЕД(Константа.ИННОрганизации,11,1))=0 Тогда
		    ИНН = СРЕД(Константа.ИННОрганизации,1,10);
			СтрКПП = СРЕД(Константа.ИННОрганизации,12);
		Иначе
			ИНН = СРЕД(Константа.ИННОрганизации,1,12);
			СтрКПП = СРЕД(Константа.ИННОрганизации,13);
		КонецЕсли;
		
		КПП = ?(ПустоеЗначение(КПП) = 0, КПП, СтрКПП);		    
		
		Если Режим = 1 Тогда
			глДобавитьРеквизит(СтрОрганизация, "ИНН ", ИНН);
			глДобавитьРеквизит(СтрОрганизация, "\", КПП);
		КонецЕсли;
		
		глДобавитьРеквизит(СтрОрганизация, " ", ?(ПустаяСтрока(ПолучСтрОрг) = 1, Константа.НазваниеОрганизации, ПолучСтрОрг));
	КонецЕсли;

	Если Счет.БанкДляРасчетов.Выбран() = 1 Тогда
		Если ПустоеЗначение(Счет.БанкОрганизации.КоррСчет)=0 Тогда
			глДобавитьРеквизит(СтрОрганизация, " р/с ", Счет.Номер);
			РасчСчет = Счет.БанкОрганизации.КоррСчет;
		Иначе
			РасчСчет = Счет.Номер;
		КонецЕсли;
		глДобавитьРеквизит(СтрОрганизация, " в ", Счет.БанкОрганизации.Наименование);
		глДобавитьРеквизит(СтрОрганизация, " ", Счет.БанкОрганизации.Местонахождение);

		глДобавитьРеквизит(СтрБанк, "", Счет.БанкДляРасчетов.Наименование);
		глДобавитьРеквизит(СтрБанк, " ", Счет.БанкДляРасчетов.Местонахождение);
		БИК = Счет.БанкДляРасчетов.Код;
		КоррСчет = Счет.БанкДляРасчетов.КоррСчет;
		
	Иначе
		РасчСчет = Счет.Номер;
		глДобавитьРеквизит(СтрБанк, "", Счет.БанкОрганизации.Наименование);
		глДобавитьРеквизит(СтрБанк, " ", Счет.БанкОрганизации.Местонахождение);
		БИК = Счет.БанкОрганизации.Код;
		КоррСчет = Счет.БанкОрганизации.КоррСчет;
	КонецЕсли;

    Если ПустоеЗначение(Счет.Корреспондент)=0 Тогда
		Если Режим=1 Тогда
			СтрОрганизация="";
			глДобавитьРеквизит(СтрОрганизация, "ИНН ", ИНН);
			глДобавитьРеквизит(СтрОрганизация, "\", КПП);
			глДобавитьРеквизит(СтрОрганизация, " ", Счет.Корреспондент);
		Иначе
			СтрОрганизация=Счет.Корреспондент;
		КонецЕсли;
	КонецЕсли;
	
	СтрОрганизация = СокрЛП(СтрОрганизация);
	
КонецПроцедуры //глПлатежныеРеквизиты

//******************************************************************************
//	глВыводДатыПлатежныхДокументов()
//		
//	Параметры: 
//		ДатаДок (дата) - дата платежа по документу
//		Счет ("Справочник.БанковскиеСчета")- банковский счет 
//
//	Описание:
// 		Формирует дату платежного документа  
//		с месяцем цифрами или прописью
// 		На основании введенных реквизитов справочника
//		"Банковские Счета"
//		Вызывается из процедуры печать Платежных документов

Функция глВыводДатыПлатежныхДокументов(ДатаДок,Счет) Экспорт
	
	Перем СтрДаты;
	
	Если ПустоеЗначение(Счет)=0 Тогда
		// Месяц даты числом или прописью
		Если Счет.МесяцПрописью = 0 Тогда
			СтрДаты = Формат(ДатаДок, "Д ДДММГГГГ");
		Иначе
			СтрДаты = НРег(Формат(ДатаДок,"Д (0)ДДММММГГГГ"));
		КонецЕсли;
	Иначе
		СтрДаты = Формат(ДатаДок, "Д ДДММГГГГ");
	КонецЕсли;
	
	Возврат СтрДаты;
	
КонецФункции // глВыводДатыПлатежныхДокументов()

//******************************************************************************
//	глВыводСуммыПлатежныхДокументов()
//
//	Параметры: 
//		СуммаДок (число) - сумма платежа по документу
//		Счет ("Справочник.БанковскиеСчета")- банковский счет 
//
//	Описание:
// 		Формирует сумму платежного документа цифрой
// 		На основании введенных реквизитов справочника
//		"Банковские Счета"
//		Вызывается из процедуры печать Платежных документов
//		
//	Параметры: СуммаДок - переменная типа число 
//				Сумма платежа по документу
//				Счет - банковский счет 

Функция глВыводСуммыПлатежныхДокументов(СуммаДок,Счет) Экспорт
	
	Перем СтрСуммы;
	
	Если ПустоеЗначение(Счет)=0 Тогда
		// Месяц даты числом или прописью
		Если (Счет.СуммаБез00Копеек = 1) и (ПустоеЗначение(СуммаДок-Цел(СуммаДок))=1) Тогда 
			СтрСуммы = СокрЛ(Формат(СуммаДок,"Ч13"))+"=";
		Иначе
			СтрСуммы = СокрЛ(Формат(СуммаДок,"Ч15.2-"));
		КонецЕсли;
	Иначе
		СтрСуммы = СокрЛ(Формат(СуммаДок,"Ч15.2-"));
	КонецЕсли;
	
	Возврат СтрСуммы;

КонецФункции // глВыводСуммыПлатежныхДокументов()

//******************************************************************************
//	глВыводСуммыПлатежныхДокументовПрописью()
//
//	Параметры: 
//		СуммаДок (число) - сумма платежа по документу
//		Счет ("Справочник.БанковскиеСчета")- банковский счет 
//
//	Описание:
// 		Формирует сумму платежного документа прописью
// 		На основании введенных реквизитов справочника
//		"Банковские Счета"
//		Вызывается из процедуры печать Платежных документов
//

Функция глВыводСуммыПлатежныхДокументовПрописью(СуммаДок,Счет) Экспорт
	
	Перем СтрСуммы;
	
	Если ПустоеЗначение(Счет)=0 Тогда
		// Месяц даты числом или прописью
		Если (Счет.СуммаБез00Копеек = 1) и (ПустоеЗначение(СуммаДок-Цел(СуммаДок))=1) Тогда 
			СтрСуммы = СтрЗаменить(Формат(СуммаДок,"ЧПДС"),"00 копеек","");
		Иначе
			СтрСуммы = Формат(СуммаДок,"ЧПДС");
		КонецЕсли;
	Иначе
		СтрСуммы = Формат(СуммаДок,"ЧПДС");
	КонецЕсли;
	
	Возврат СтрСуммы;
	
КонецФункции // глВыводСуммыПлатежныхДокументовПрописью()

///////////////////////////////////////////////////////////////////////////
// Определение расчетного счета контрагента по умолчанию
Функция глРасчетныйСчетКонтрагента(Контрагент) Экспорт
	Если Контрагент.ОсновнойСчет.Выбран() = 1 Тогда
		Возврат Контрагент.ОсновнойСчет;
	КонецЕсли;
	РС = СоздатьОбъект("Справочник.РасчетныеСчета");
	РС.ИспользоватьВладельца(Контрагент);
	РС.ПорядокНаименований();
	РС.ВыбратьЭлементы();
	ВозврРС = "";
	НеНайден = 1;
	Пока (РС.ПолучитьЭлемент() = 1) И (НеНайден = 1) Цикл
		Если РС.ПометкаУдаления() = 0 Тогда
			ВозврРС = РС.ТекущийЭлемент();
			НеНайден = 0;
		КонецЕсли;
	КонецЦикла;
	Возврат ВозврРС;
КонецФункции  //глРасчетныйСчетКонтрагента

///////////////////////////////////////////////////////////////////////////
// Получение элемента справочника СтавкиНП, СтавкиНДС
// соответствующего нулевой ставке
Функция глБезНалога(КодНалога) Экспорт
	СпрНалога = СоздатьОбъект("Справочник.Ставки"+КодНалога);
	Если СпрНалога.НайтиПоРеквизиту("Ставка", 0, 1) = 0 Тогда
		СпрНалога.Новый();
		СпрНалога.Наименование = "Без налога ("+КодНалога+")";
		СпрНалога.Ставка = 0;
		СпрНалога.Записать();
	КонецЕсли;
	Возврат СпрНалога.ТекущийЭлемент();
КонецФункции  //глБезНалога

///////////////////////////////////////////////////////////////////////////
//
Функция глДоговор(ИмяДоговора, Контрагент, Создать=0) Экспорт
	Если (ПустоеЗначение(Контрагент)=0) Тогда
		Договор = СоздатьОбъект("Справочник.Договоры");
		Договор.ИспользоватьВладельца(Контрагент);
		Если Договор.НайтиПоНаименованию(ИмяДоговора, 1, 1) = 0 Тогда
			Если Создать = 1 Тогда
				Договор.Новый();
				Договор.Наименование = ИмяДоговора;
				Договор.Записать();
			Иначе
				Возврат ПолучитьПустоеЗначение("Справочник.Договоры");
			КонецЕсли;
		КонецЕсли;
		Возврат Договор.ТекущийЭлемент();
	
	Иначе
		Возврат "";
	КонецЕсли;	
КонецФункции //глДоговорБезДоговора

///////////////////////////////////////////////////////////////////////////
//
Процедура глОчиститьИсторию(ДатаНач="", ДатаКон="", ИмяРеквизита, Объект="") Экспорт
	История = СоздатьОбъект("Периодический");
	Если ПустоеЗначение(Объект) = 0 Тогда
		История.ИспользоватьОбъект(ИмяРеквизита, Объект);
	Иначе
		История.ИспользоватьОбъект(ИмяРеквизита);
	КонецЕсли;
	Если ПустоеЗначение(ДатаНач) = 1 Тогда
		ДатаНач = ПолучитьПустоеЗначение("Дата");
	КонецЕсли;
	Если ПустоеЗначение(ДатаКон) = 1 Тогда
		ДатаКон = ПолучитьПустоеЗначение("Дата");
	КонецЕсли;
	История.ВыбратьЗначения();
	Пока История.ПолучитьЗначение() = 1 Цикл
		Если История.ТекущийДокумент().Выбран() = 1 Тогда
		ИначеЕсли (ПустоеЗначение(ДатаНач) = 0) и (История.ДатаЗнач < ДатаНач) Тогда
		ИначеЕсли (ПустоеЗначение(ДатаКон) = 0) и (История.ДатаЗнач > ДатаКон) Тогда
		Иначе
			История.Удалить();
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры //глОчиститьИсторию

///////////////////////////////////////////////////////////////////////////
//
Функция глПолучитьНалог(КодНалога, Обновить=0) Экспорт
	СпрНалоговИОтчислений = СоздатьОбъект("Справочник.НалогиИОтчисления");
	НалогНайден = СпрНалоговИОтчислений.НайтиПоКоду(КодНалога);
    Если НалогНайден = 0 Тогда
		СпрНалоговИОтчислений.Новый();
		СпрНалоговИОтчислений.Код = КодНалога;
	КонецЕсли;
	
	Если (НалогНайден = 0) или (Обновить = 1) Тогда
		Если КодНалога = "ЕСН_ФБ" Тогда
			СпрНалоговИОтчислений.Наименование = "ЕСН в части, зачисляемой в Федеральный бюджет";
			СпрНалоговИОтчислений.Счет = СчетПоКоду("69.2.1");
			СпрНалоговИОтчислений.НазначитьТип("Субконто1",СпрНалоговИОтчислений.Счет.ВидСубконто(1));
			СпрНалоговИОтчислений.Субконто1 = Перечисление.ВидыПлатежейВБюджет.Налог;
			СпрНалоговИОтчислений.НазначитьТип("Субконто2",СпрНалоговИОтчислений.Счет.ВидСубконто(2));
			СпрНалоговИОтчислений.КодБК = "18210201010011000110";
			СпрНалоговИОтчислений.Записать();
			глОчиститьИсторию(,,"Ставка", СпрНалоговИОтчислений.ТекущийЭлемент());
			СпрНалоговИОтчислений.Ставка.Установить('01.01.2001',0);
			
		ИначеЕсли КодНалога = "ПФР_страх" Тогда
			СпрНалоговИОтчислений.Наименование = "Взнос в ПФР на страховую часть пенсии";
			СпрНалоговИОтчислений.Счет = СчетПоКоду("69.2.2");
			СпрНалоговИОтчислений.НазначитьТип("Субконто1",СпрНалоговИОтчислений.Счет.ВидСубконто(1));
			СпрНалоговИОтчислений.Субконто1 = Перечисление.ВидыПлатежейВБюджет.Налог;
			СпрНалоговИОтчислений.НазначитьТип("Субконто2",СпрНалоговИОтчислений.Счет.ВидСубконто(2));
			СпрНалоговИОтчислений.КодБК = "18210202010061000160";
			СпрНалоговИОтчислений.Записать();
			глОчиститьИсторию(,,"Ставка", СпрНалоговИОтчислений.ТекущийЭлемент());
			СпрНалоговИОтчислений.Ставка.Установить('01.01.2001',0);
			
		ИначеЕсли КодНалога = "ПФР_нак" Тогда
			СпрНалоговИОтчислений.Наименование = "Взнос в ПФР на накопительную часть пенсии";
			СпрНалоговИОтчислений.Счет = СчетПоКоду("69.2.3");
			СпрНалоговИОтчислений.НазначитьТип("Субконто1",СпрНалоговИОтчислений.Счет.ВидСубконто(1));
			СпрНалоговИОтчислений.Субконто1 = Перечисление.ВидыПлатежейВБюджет.Налог;
			СпрНалоговИОтчислений.НазначитьТип("Субконто2",СпрНалоговИОтчислений.Счет.ВидСубконто(2));
			СпрНалоговИОтчислений.КодБК = "18210202020061000160";
			СпрНалоговИОтчислений.Записать();
			глОчиститьИсторию(,,"Ставка", СпрНалоговИОтчислений.ТекущийЭлемент());
			СпрНалоговИОтчислений.Ставка.Установить('01.01.2001',0);

		ИначеЕсли КодНалога = "ФФОМС" Тогда
			СпрНалоговИОтчислений.Наименование = "Взносы в ФФОМС";
			СпрНалоговИОтчислений.Счет = СчетПоКоду("69.3.1");
			СпрНалоговИОтчислений.НазначитьТип("Субконто1",СпрНалоговИОтчислений.Счет.ВидСубконто(1));
			СпрНалоговИОтчислений.НазначитьТип("Субконто2",СпрНалоговИОтчислений.Счет.ВидСубконто(2));
			СпрНалоговИОтчислений.НазначитьТип("Субконто3",СпрНалоговИОтчислений.Счет.ВидСубконто(3));
			СпрНалоговИОтчислений.Субконто1 = Перечисление.ВидыПлатежейВБюджет.Налог;
			СпрНалоговИОтчислений.КодБК = "18210201030081000110";
			СпрНалоговИОтчислений.Записать();
			глОчиститьИсторию(,,"Ставка", СпрНалоговИОтчислений.ТекущийЭлемент());
			СпрНалоговИОтчислений.Ставка.Установить('01.01.2001',0);

		ИначеЕсли КодНалога = "ТФОМС" Тогда
			СпрНалоговИОтчислений.Наименование = "Взносы в ТФОМС";
			СпрНалоговИОтчислений.Счет = СчетПоКоду("69.3.2");
			СпрНалоговИОтчислений.НазначитьТип("Субконто1",СпрНалоговИОтчислений.Счет.ВидСубконто(1));
			СпрНалоговИОтчислений.НазначитьТип("Субконто2",СпрНалоговИОтчислений.Счет.ВидСубконто(2));
			СпрНалоговИОтчислений.НазначитьТип("Субконто3",СпрНалоговИОтчислений.Счет.ВидСубконто(3));
			СпрНалоговИОтчислений.Субконто1 = Перечисление.ВидыПлатежейВБюджет.Налог;
			СпрНалоговИОтчислений.КодБК = "18210201040091000110";
			СпрНалоговИОтчислений.Записать();
			глОчиститьИсторию(,,"Ставка", СпрНалоговИОтчислений.ТекущийЭлемент());
			СпрНалоговИОтчислений.Ставка.Установить('01.01.2001',0);

		ИначеЕсли КодНалога = "ФСС" Тогда
			СпрНалоговИОтчислений.Наименование = "Взносы в ФСС";
			СпрНалоговИОтчислений.Счет = СчетПоКоду("69.1");
			СпрНалоговИОтчислений.НазначитьТип("Субконто1",СпрНалоговИОтчислений.Счет.ВидСубконто(1));
			СпрНалоговИОтчислений.НазначитьТип("Субконто2",СпрНалоговИОтчислений.Счет.ВидСубконто(2));
			СпрНалоговИОтчислений.Субконто1 = Перечисление.ВидыПлатежейВФонды.Взносы;
			СпрНалоговИОтчислений.КодБК = "18210201020071000110";
			СпрНалоговИОтчислений.Записать();
			глОчиститьИсторию(,,"Ставка", СпрНалоговИОтчислений.ТекущийЭлемент());
			СпрНалоговИОтчислений.Ставка.Установить('01.01.2001',0);

		ИначеЕсли КодНалога = "ФСС_НС" Тогда
			СпрНалоговИОтчислений.Наименование = "Взносы в ФСС РФ (НС и ПЗ)";
			СпрНалоговИОтчислений.Счет = СчетПоКоду("69.11");
			СпрНалоговИОтчислений.НазначитьТип("Субконто1",СпрНалоговИОтчислений.Счет.ВидСубконто(1));
			СпрНалоговИОтчислений.Субконто1 = Перечисление.ВидыПлатежейВФонды.Взносы;
			СпрНалоговИОтчислений.КодБК = "39310202050071000160";
			СпрНалоговИОтчислений.Записать();

		ИначеЕсли КодНалога = "НДФЛ" Тогда
			СпрНалоговИОтчислений.Наименование = "Налог на доходы физических лиц";
			СпрНалоговИОтчислений.Счет = СчетПоКоду("68.1");
			СпрНалоговИОтчислений.НазначитьТип("Субконто1",СпрНалоговИОтчислений.Счет.ВидСубконто(1));
			СпрНалоговИОтчислений.Субконто1 = Перечисление.ВидыПлатежейВБюджет.Налог;
			СпрНалоговИОтчислений.КодБК = "18210102021010000110";
			СпрНалоговИОтчислений.Записать();
			глОчиститьИсторию(,,"Ставка", СпрНалоговИОтчислений.ТекущийЭлемент());
			СпрНалоговИОтчислений.Ставка.Установить('01.01.2001',13);

		ИначеЕсли КодНалога = "Имущество" Тогда
			СпрНалоговИОтчислений.Наименование = "Налог на имущество";
			СпрНалоговИОтчислений.Счет = СчетПоКоду("68.8");
			СпрНалоговИОтчислений.НазначитьТип("Субконто1",СпрНалоговИОтчислений.Счет.ВидСубконто(1));
			СпрНалоговИОтчислений.Субконто1 = Перечисление.ВидыПлатежейВБюджет.Налог;
			СпрНалоговИОтчислений.КодБК = "18210602010021000110";
			СпрНалоговИОтчислений.Записать();
			глОчиститьИсторию(,,"Ставка", СпрНалоговИОтчислений.ТекущийЭлемент());
			СпрНалоговИОтчислений.Ставка.Установить('01.01.1980',2);
			СпрНалоговИОтчислений.Ставка.Установить('01.01.2004',2.2);

		ИначеЕсли КодНалога = "ПрибФед" Тогда
			СпрНалоговИОтчислений.Наименование = "Налог на прибыль (федеральный)";
			СпрНалоговИОтчислений.Счет = СчетПоКоду("68.4.1");
			СпрНалоговИОтчислений.НазначитьТип("Субконто1",СпрНалоговИОтчислений.Счет.ВидСубконто(1));
			СпрНалоговИОтчислений.Субконто1 = Перечисление.ВидыПлатежейВБюджет.Налог;
			СпрНалоговИОтчислений.НазначитьТип("Субконто2",СпрНалоговИОтчислений.Счет.ВидСубконто(2));
			СпрНалоговИОтчислений.Субконто2 = Перечисление.Бюджеты.Федеральный;
			СпрНалоговИОтчислений.КодБК = "18210101011011000110";
			СпрНалоговИОтчислений.Записать();
			глОчиститьИсторию(,,"Ставка", СпрНалоговИОтчислений.ТекущийЭлемент());
			СпрНалоговИОтчислений.Ставка.Установить('01.01.1980',13);
			СпрНалоговИОтчислений.Ставка.Установить('01.04.1999',11);
			СпрНалоговИОтчислений.Ставка.Установить('01.01.2002',7.5);
			СпрНалоговИОтчислений.Ставка.Установить('01.01.2003',6);
			СпрНалоговИОтчислений.Ставка.Установить('01.01.2004',5);
			СпрНалоговИОтчислений.Ставка.Установить('01.01.2005',6.5);
			СпрНалоговИОтчислений.Ставка.Установить('01.01.2009',2);

		ИначеЕсли КодНалога = "ПрибРесп" Тогда
			СпрНалоговИОтчислений.Наименование = "Налог на прибыль (республиканский)";
			СпрНалоговИОтчислений.Счет = СчетПоКоду("68.4.1");
			СпрНалоговИОтчислений.НазначитьТип("Субконто1",СпрНалоговИОтчислений.Счет.ВидСубконто(1));
			СпрНалоговИОтчислений.Субконто1 = Перечисление.ВидыПлатежейВБюджет.Налог;
			СпрНалоговИОтчислений.НазначитьТип("Субконто2",СпрНалоговИОтчислений.Счет.ВидСубконто(2));
			СпрНалоговИОтчислений.Субконто2 = Перечисление.Бюджеты.Республиканский;
			СпрНалоговИОтчислений.КодБК = "18210101012021000110";
			СпрНалоговИОтчислений.Записать();
			глОчиститьИсторию(,,"Ставка", СпрНалоговИОтчислений.ТекущийЭлемент());
			СпрНалоговИОтчислений.Ставка.Установить('01.01.1980',22);
			СпрНалоговИОтчислений.Ставка.Установить('01.04.1999',19);
			СпрНалоговИОтчислений.Ставка.Установить('01.01.2002',14.5);
			СпрНалоговИОтчислений.Ставка.Установить('01.01.2003',16);
			СпрНалоговИОтчислений.Ставка.Установить('01.01.2004',17);
			СпрНалоговИОтчислений.Ставка.Установить('01.01.2005',17.5);
			СпрНалоговИОтчислений.Ставка.Установить('01.01.2009',18);

		ИначеЕсли КодНалога = "ПрибМест" Тогда
			СпрНалоговИОтчислений.Наименование = "Налог на прибыль (местный)";
			СпрНалоговИОтчислений.Счет = СчетПоКоду("68.4.1");
			СпрНалоговИОтчислений.НазначитьТип("Субконто1",СпрНалоговИОтчислений.Счет.ВидСубконто(1));
			СпрНалоговИОтчислений.Субконто1 = Перечисление.ВидыПлатежейВБюджет.Налог;
			СпрНалоговИОтчислений.НазначитьТип("Субконто2",СпрНалоговИОтчислений.Счет.ВидСубконто(2));
			СпрНалоговИОтчислений.Субконто2 = Перечисление.Бюджеты.Местный;
			СпрНалоговИОтчислений.КодБК = "18210901000031000110";
			СпрНалоговИОтчислений.Записать();
			глОчиститьИсторию(,,"Ставка", СпрНалоговИОтчислений.ТекущийЭлемент());
			СпрНалоговИОтчислений.Ставка.Установить('01.01.1980',0);
			
		ИначеЕсли КодНалога = "Образ" Тогда
			СпрНалоговИОтчислений.Наименование = "Сбор на образование";
			СпрНалоговИОтчислений.Счет = СчетПоКоду("68.10");
			СпрНалоговИОтчислений.НазначитьТип("Субконто1",СпрНалоговИОтчислений.Счет.ВидСубконто(1));
			СпрНалоговИОтчислений.Субконто1 = Перечисление.ВидыПлатежейВБюджет.Налог;
			СпрНалоговИОтчислений.КодБК = "18210906020021000110";
			СпрНалоговИОтчислений.Записать();
			глОчиститьИсторию(,,"Ставка", СпрНалоговИОтчислений.ТекущийЭлемент());
			СпрНалоговИОтчислений.Ставка.Установить('01.01.1980',1);
			СпрНалоговИОтчислений.Ставка.Установить('01.01.2001',0);
			
		ИначеЕсли КодНалога = "ФСС_БЛ" Тогда
			СпрНалоговИОтчислений.Наименование = "Взносы в ФСС РФ (на случай врем. нетрудосп.)";
			СпрНалоговИОтчислений.Счет = СчетПоКоду("69.12");
			СпрНалоговИОтчислений.НазначитьТип("Субконто1",СпрНалоговИОтчислений.Счет.ВидСубконто(1));
			СпрНалоговИОтчислений.НазначитьТип("Субконто2",СпрНалоговИОтчислений.Счет.ВидСубконто(2));
			СпрНалоговИОтчислений.Субконто1 = Перечисление.ВидыПлатежейВФонды.Взносы;
			СпрНалоговИОтчислений.КодБК = "39311706020070000180";
			СпрНалоговИОтчислений.Записать();
			глОчиститьИсторию(,,"Ставка", СпрНалоговИОтчислений.ТекущийЭлемент());
			СпрНалоговИОтчислений.Ставка.Установить('01.01.2003',0);

		Иначе
			СпрНалоговИОтчислений.Наименование = КодНалога;
			СпрНалоговИОтчислений.Записать();
		КонецЕсли;
	КонецЕсли; 

	Возврат СпрНалоговИОтчислений.ТекущийЭлемент();
КонецФункции  //глПолучитьНалог

///////////////////////////////////////////////////////////////////////////
//
Функция глПолучитьСтавкуНалога(КодНалога, ДатаСтавки) Экспорт
	Перем Ставка;
	Перем Налог;

	Налог = глПолучитьНалог(КодНалога);
	Ставка = Налог.Ставка.Получить(ДатаСтавки);

	Возврат Ставка;
КонецФункции  //глПолучитьСтавкуНалога

///////////////////////////////////////////////////////////////////////////
//
Процедура глУстановитьСтавкуНалога(КодНалога, ДатаСтавки, СтавкаНалога, Режим = 0) Экспорт
	Перем Ставка;
	Перем Налог;

	Налог = глПолучитьНалог(КодНалога);
	Ставка = Налог.Ставка.Получить(ДатаСтавки);
	Если (Режим = 1) или (Ставка <> СтавкаНалога) Тогда
		СпрНалоговИОтчислений = СоздатьОбъект("Справочник.НалогиИОтчисления");
		СпрНалоговИОтчислений.НайтиЭлемент(Налог);
	    СпрНалоговИОтчислений.Ставка.Установить(ДатаСтавки, СтавкаНалога);
	КонецЕсли;
КонецПроцедуры  //глУстановитьСтавкуНалога

///////////////////////////////////////////////////////////////////////////
//
Процедура глПриВыбореКонтрагента(Контрагент, Договор, ДокОсн="") Экспорт
	Если (ПустоеЗначение(Договор) = 1) и (ПустоеЗначение(ДокОсн) = 1) Тогда
	    Договор = Контрагент.ОсновнойДоговор;
	Иначе
		Если Договор.Владелец <> Контрагент Тогда
			Договор = Контрагент.ОсновнойДоговор;
		КонецЕсли;
	КонецЕсли;
	Если ПустоеЗначение(ДокОсн) = 0 Тогда
		Если Метаданные.Документ(ДокОсн.Вид()).РеквизитШапки("Контрагент").Выбран() = 1 Тогда
   		    Если ДокОсн.Контрагент <> Контрагент Тогда
			    ДокОсн = "";
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры  //глПриВыбореКонтрагента

///////////////////////////////////////////////////////////////////////////
//
Процедура глПриВыбореДоговора(Контрагент, Договор, РазрешитьВыборСлужебногоДоговора=0) Экспорт
	Если Договор.Выбран() = 1 Тогда
		Если Договор.Владелец <> Контрагент Тогда
			Контрагент = Договор.Владелец;
		КонецЕсли;
		Если (РазрешитьВыборСлужебногоДоговора = 0)
			и ((Договор.Наименование = глИмяДоговораДляПлатежейБезДоговора)
				или (Договор.Наименование = глИмяДоговораДляПлатежейБезДоговораТорг)) Тогда
			Предупреждение("Нельзя выбрать служебный договор.");
			Договор = "";
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры  //глПриВыбореДоговора

///////////////////////////////////////////////////////////////////////////
//
Функция глПредставлениеСтавки(Ставка) Экспорт
    Перем Стр;

	Если Ставка.Выбран() = 1 Тогда
	    Стр = "" + Ставка.Ставка + "%";
	Иначе
		Стр = "<???>";
	КонецЕсли;

	Возврат Стр;
КонецФункции //глПредставлениеСтавки

///////////////////////////////////////////////////////////////////////////
//
Функция глИнформацияОНоменклатуре(НоменклатурнаяЕдиница, ДатаАктуальности) Экспорт
	Перем Стр;

	Стр = "";
	Если НоменклатурнаяЕдиница.Выбран() = 0 Тогда
	ИначеЕсли НоменклатурнаяЕдиница.ЭтоГруппа() = 1 Тогда
	Иначе
		Стр = "Тип: ";
		Если НоменклатурнаяЕдиница.ТипНоменклатуры.Выбран() = 1 Тогда
			Стр = Стр + НоменклатурнаяЕдиница.ТипНоменклатуры;
			Если НоменклатурнаяЕдиница.ТипНоменклатуры = Перечисление.ТипыНоменклатуры.Товар Тогда
				Если НоменклатурнаяЕдиница.ТипТовара.Выбран() = 1 Тогда
					Стр = Стр + " (" + НоменклатурнаяЕдиница.ТипТовара + ")";
				Иначе
					Стр = Стр + " (<???>)";
				КонецЕсли;
			КонецЕсли;
		Иначе
			Стр = Стр + "<???>";
		КонецЕсли;

		Если НоменклатурнаяЕдиница.СтавкаНДС.Получить(ДатаАктуальности).Выбран() = 1 Тогда
			Стр = Стр + ", НДС(" + НоменклатурнаяЕдиница.СтавкаНДС.Получить(ДатаАктуальности).Ставка + "%)";
		Иначе
			Стр = Стр + ", НДС(<???>)";
		КонецЕсли;

		Если НоменклатурнаяЕдиница.СтавкаНП.Получить(ДатаАктуальности).Выбран() = 1 Тогда
			Стр = Стр + ", НП(" + НоменклатурнаяЕдиница.СтавкаНП.Получить(ДатаАктуальности).Ставка + "%)";
		Иначе
			Стр = Стр + ", НП(<???>)";
		КонецЕсли;
	КонецЕсли;

	Возврат Стр;
КонецФункции //глИнформацияОНоменклатуре

///////////////////////////////////////////////////////////////////////////
//
Функция глЗначениеПоУмолчанию(ИмяРеквизита) Экспорт
	Перем Значение;

	Если (глОбщиеУстановки = 2) или (Метаданные.Константа(ИмяРеквизита).Выбран() = 0) Тогда
	    Значение = ВосстановитьЗначение(ИмяРеквизита);
	Иначе
	    Значение = Константа.ПолучитьАтрибут(ИмяРеквизита);
	КонецЕсли;

	Возврат Значение;
КонецФункции //глЗначениеПоУмолчанию

///////////////////////////////////////////////////////////////////////////
//
Процедура глВыбратьСтавку(Ставка) Экспорт
	ВидСпрСтавки = Ставка.Вид();
	СпрСтавки = СоздатьОбъект("Справочник."+ВидСпрСтавки);
	СпрСтавки.НайтиЭлемент(Ставка);
	Если СпрСтавки.Выбрать("Выберите ставку "+Сред(ВидСпрСтавки,7),)= 1 Тогда
		Ставка = СпрСтавки.ТекущийЭлемент();
	КонецЕсли;
КонецПроцедуры //глВыбратьСтавку

//*****************************************************************************
// глПриИзмененииСтавкиНалога(Конт)
//
// Параметры: 
//  Конт - контекст формы, из которой вызывается процедура.
//
// Вызывается из графы Ставка ("Ставка, %").
//
// Описание:
//  
//
Процедура глПриИзмененииСтавкиНалога(Конт) Экспорт
    Если Конт.Выбран() = 1 Тогда
		Если Конт.Ставка <> Конт.ТекущийЭлемент().Ставка Тогда
			Если Вопрос("Не рекомендуется изменять значение ставки налога, если
						|она уже используется в справочниках или документах.
						|Вернуть прежнее значение?", "Да+Нет") = "Да" Тогда
				Конт.Ставка = Конт.ТекущийЭлемент().Ставка;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если ПустоеЗначение(Конт.Ставка) = 1 Тогда
		Представление = "Без налога ("+Сред(Конт.Вид(),7)+")";	
	Иначе
		Представление = "" + Конт.Ставка + "%";
	КонецЕсли;

	Если (ПустоеЗначение(Конт.Наименование) = 0) и (Конт.Наименование <> Представление) Тогда
		Если Вопрос("Изменить представление ставки налога в
					|соответствии со значением ставки?", "Да+Нет") = "Нет" Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;

	Конт.Наименование = Представление;
КонецПроцедуры //глПриИзмененииСтавкиНалога

///////////////////////////////////////////////////////////////////////////
//
Процедура глОчиститьТабличнуюЧасть(Конт) Экспорт
	Если Конт.КоличествоСтрок() = 0 Тогда
	ИначеЕсли Вопрос("Таблица будет очищена, а существующие строки удалены.
					|Продолжить?","Да+Нет") = "Да" Тогда
		Конт.УдалитьСтроки();
	КонецЕсли;
КонецПроцедуры //глОчиститьТабличнуюЧасть


///////////////////////////////////////////////////////////////////////////
//
Функция ФИО(Сотрудник) Экспорт
	Перем ПолноеИмя, Фамилия, ИмяОтчество, Имя, Отчество;
	Перем ПозицияПервогоПробела, ПозицияВторогоПробела;

	ПолноеИмя = Сотрудник.Наименование;

	ПозицияПервогоПробела = Найти(ПолноеИмя, " ");
	Если ПозицияПервогоПробела = 0 Тогда
		Возврат ПолноеИмя;
	Иначе
		Фамилия = Лев(ПолноеИмя, ПозицияПервогоПробела);
		ИмяОтчество = Сред(ПолноеИмя, ПозицияПервогоПробела+1);
		ИмяОтчество = СокрЛ(ИмяОтчество);
		Имя = Лев(ИмяОтчество, 1)+".";

		ПозицияВторогоПробела = Найти(ИмяОтчество, " ");
		Если ПозицияВторогоПробела = 0 Тогда
			Возврат Фамилия+Имя;
		Иначе
			Отчество = Сред(ИмяОтчество, ПозицияВторогоПробела+1);
			Отчество = СокрЛ(Отчество);
			Отчество = Лев(Отчество, 1)+".";
			Возврат Фамилия+Имя+Отчество;
		КонецЕсли;
	КонецЕсли;
КонецФункции

//_____________________________________________________________________________
Функция глПредставлениеДокумента(Конт) Экспорт
	Перем Стр;
	
	Комментарий = Метаданные.Документ(Конт.Вид()).Комментарий;
	Если ПустоеЗначение(Комментарий) = 0 Тогда
		Стр = Комментарий;
	Иначе
		Стр = Метаданные.Документ(Конт.Вид()).Представление();
	КонецЕсли;
	Стр = Стр + " № "+ СокрЛП(Конт.НомерДок)+" от "+Формат(Конт.ДатаДок,"Д (0)ДДММММГГГГ");
	
	Возврат Стр;
КонецФункции //глПредставлениеДокумента

//******************************************************************************
// глПредставлениеПервичногоДокумента()
//
// Параметры:
//  Нет.
//
// Возвращаемое значение:
//  Строка  - дата и номер первичного документа.
//
// Вызывается из формул элементов диалога:
//  Нет.
//
// Описание:
//  Формирует дату и номер первичного документа.
//
Функция глПредставлениеПервичногоДокумента(Конт) Экспорт
	    
	Представление = "";
	
	Если ПустоеЗначение(Конт) = 1  Тогда
	    Возврат Представление;
	КонецЕсли;
	
	Если (Метаданные.Документ(Конт.Вид()).РеквизитШапки("НомерДокВходящий").Выбран() = 1)
	 или (Метаданные.Документ(Конт.Вид()).РеквизитТабличнойЧасти("НомерДокВходящий").Выбран() = 1) Тогда
	 	ДатаВходящего  = Конт.ДатаДокВходящий;
	 	НомерВходящего = Конт.НомерДокВходящий;
	 	
	Иначе
	 	ДатаВходящего  = Конт.ДатаДок;
	 	НомерВходящего = Конт.НомерДок;
	КонецЕсли;
	 
	Если (ПустоеЗначение(ДатаВходящего ) = 0)
	 или (ПустоеЗначение(НомерВходящего) = 0) Тогда
		Представление = Формат(ДатаВходящего , "Д ДДММГГГГ")+", №"+НомерВходящего;
	КонецЕсли;
	
	Возврат Представление;
	
КонецФункции // глПредставлениеПервичногоДокумента() 

//*****************************************************************************
Процедура глДляЗаполненияКнигиПокупок(Конт, ТаблицаОплаты) Экспорт
	
	Если Конт.Договор.ОплатаДоговора = 2 Тогда
	    Возврат;
	КонецЕсли;
	
	БезНДС20=0;
	БезНДС10=0;
	НДС20=0;
	НДС10=0;
	НДС0=0;
	Освобождаемые=0;
	
	Если (Конт.Вид() = "УслугиСтороннихОрганизаций") или
		 (Конт.Вид() = "ПоступлениеТоваров") или
		 (Конт.Вид() = "ПоступлениеМатериалов") или
		 (Конт.Вид() = "ПоступлениеОборудования") или
		 (Конт.Вид() = "ПоступлениеОС") или
		 (Конт.Вид() = "ПоступлениеНМА") Тогда
		 	
		Если Конт.НДСвключатьВСтоимость = 1 Тогда
		    Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ТаблицаОплаты.ВыбратьСтроки();
	Пока ТаблицаОплаты.ПолучитьСтроку() = 1 Цикл 
		Если ТаблицаОплаты.СтавкаНДС <> 0 Тогда
			СтавкаНДС = ТаблицаОплаты.СтавкаНДС;
		    
		ИначеЕсли ТаблицаОплаты.СуммаРуб > 0 Тогда
			СтавкаНДС = 100*ТаблицаОплаты.НДСРуб/ТаблицаОплаты.СуммаРуб;
		
		Иначе
			СтавкаНДС = 20;
		КонецЕсли;
		
		Если СтавкаНДС>10.5 Тогда
			НДС20=НДС20+ТаблицаОплаты.НДСРуб;
			БезНДС20=БезНДС20+ТаблицаОплаты.СуммаРуб;
		ИначеЕсли СтавкаНДС>0 Тогда
			НДС10=НДС10+ТаблицаОплаты.НДСРуб;
			БезНДС10=БезНДС10+ТаблицаОплаты.СуммаРуб;
		Иначе
			Освобождаемые=Освобождаемые+ТаблицаОплаты.СуммаРуб;
		КонецЕсли;
	КонецЦикла;
	
	Если Конт.Вид() = "СчетФактураПолученный" Тогда
		Если Конт.НДСпоСтавкеНольПроцентов = 1 Тогда
			НДС10 = 0;
			НДС20 = 0;
			БезНДС10 = 0;
			БезНДС20 = 0;
			НДС0 = ТаблицаОплаты.Итог("ВсегоРуб");
		КонецЕсли;               
	КонецЕсли;
	
	Если БезНДС20>0 Тогда
		Конт.Операция.НоваяПроводка();  Конт.Операция.РазделительУчета = Конт.ЮрЛицо;
		Конт.Операция.НомерЖурнала = "АВ";
		Конт.Операция.ПервичныйДокумент  = глПредставлениеПервичногоДокумента(Конт);
		Конт.Операция.Кредит.Счет = СчетПоКоду("ЗПК.20.Б");
		Конт.Операция.Кредит.Субконто(1,Конт.Контрагент);
		Конт.Операция.Кредит.Субконто(2,Конт.Договор);
		Конт.Операция.Кредит.Субконто(3,Конт.ТекущийДокумент());
		Конт.Операция.Сумма = БезНДС20;
		Конт.Операция.СодержаниеПроводки = "Данные для автоматического учета НДС";
	КонецЕсли;
	Если НДС20>0 Тогда
		Конт.Операция.НоваяПроводка();  Конт.Операция.РазделительУчета = Конт.ЮрЛицо;
		Конт.Операция.НомерЖурнала = "АВ";
		Конт.Операция.ПервичныйДокумент  = глПредставлениеПервичногоДокумента(Конт);
		Конт.Операция.Кредит.Счет = СчетПоКоду("ЗПК.20.Н");
		Конт.Операция.Кредит.Субконто(1,Конт.Контрагент);
		Конт.Операция.Кредит.Субконто(2,Конт.Договор);
		Конт.Операция.Кредит.Субконто(3,Конт.ТекущийДокумент());
		Конт.Операция.Сумма = НДС20;
		Конт.Операция.СодержаниеПроводки = "Данные для автоматического учета НДС";
	КонецЕсли;
	Если БезНДС10>0 Тогда
		Конт.Операция.НоваяПроводка();  Конт.Операция.РазделительУчета = Конт.ЮрЛицо;
		Конт.Операция.НомерЖурнала = "АВ";
		Конт.Операция.ПервичныйДокумент  = глПредставлениеПервичногоДокумента(Конт);
		Конт.Операция.Кредит.Счет = СчетПоКоду("ЗПК.10.Б");
		Конт.Операция.Кредит.Субконто(1,Конт.Контрагент);
		Конт.Операция.Кредит.Субконто(2,Конт.Договор);
		Конт.Операция.Кредит.Субконто(3,Конт.ТекущийДокумент());
		Конт.Операция.Сумма = БезНДС10;
		Конт.Операция.СодержаниеПроводки = "Данные для автоматического учета НДС";
	КонецЕсли;
	Если НДС10>0 Тогда
		Конт.Операция.НоваяПроводка();  Конт.Операция.РазделительУчета = Конт.ЮрЛицо;
		Конт.Операция.НомерЖурнала = "АВ";
		Конт.Операция.ПервичныйДокумент  = глПредставлениеПервичногоДокумента(Конт);
		Конт.Операция.Кредит.Счет = СчетПоКоду("ЗПК.10.Н");
		Конт.Операция.Кредит.Субконто(1,Конт.Контрагент);
		Конт.Операция.Кредит.Субконто(2,Конт.Договор);
		Конт.Операция.Кредит.Субконто(3,Конт.ТекущийДокумент());
		Конт.Операция.Сумма = НДС10;
		Конт.Операция.СодержаниеПроводки = "Данные для автоматического учета НДС";
	КонецЕсли;
	Если НДС0>0 Тогда
		Конт.Операция.НоваяПроводка();  Конт.Операция.РазделительУчета = Конт.ЮрЛицо;
		Конт.Операция.НомерЖурнала = "АВ";
		Конт.Операция.ПервичныйДокумент  = глПредставлениеПервичногоДокумента(Конт);
		Конт.Операция.Кредит.Счет = СчетПоКоду("ЗПК.0");
		Конт.Операция.Кредит.Субконто(1,Конт.Контрагент);
		Конт.Операция.Кредит.Субконто(2,Конт.Договор);
		Конт.Операция.Кредит.Субконто(3,Конт.ТекущийДокумент());
		Конт.Операция.Сумма = НДС0;
		Конт.Операция.СодержаниеПроводки = "Данные для автоматического учета НДС";
	КонецЕсли;
	Если Освобождаемые>0 Тогда
		Конт.Операция.НоваяПроводка();  Конт.Операция.РазделительУчета = Конт.ЮрЛицо;
		Конт.Операция.НомерЖурнала = "АВ";
		Конт.Операция.ПервичныйДокумент  = глПредставлениеПервичногоДокумента(Конт);
		Конт.Операция.Кредит.Счет = СчетПоКоду("ЗПК.БН");
		Конт.Операция.Кредит.Субконто(1,Конт.Контрагент);
		Конт.Операция.Кредит.Субконто(2,Конт.Договор);
		Конт.Операция.Кредит.Субконто(3,Конт.ТекущийДокумент());
		Конт.Операция.Сумма = Освобождаемые;
		Конт.Операция.СодержаниеПроводки = "Данные для автоматического учета НДС";
	КонецЕсли;
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ МЕХАНИЗМА КОММЕНТИРОВАНИЯ ВЫПОЛНЯЕМЫХ ДЕЙСТВИЙ
//******************************************************************************
// глСоздатьТрассировку(Описание)
//
// Параметры: 
// 	Описание - строка, описание трассировки - заголовок фрагмента трассировки
//
// Возвращаемое значение:
// 	Список значений, содержащий информацию о выполняемой трассировке действия
//
// Описание:
// 	Создает и заполняет начальными значениями список значений-трассировку
// 	Полученный список значений в дальнейшем используется в функциях 
//  глСообщениеТрассировки
//  глПоказатьТрассировку
//
// Структура трассировки
//  1 - число - уровень сообщения трассировки
//  2 - таблица значений, список сообщений трассировки
//  3 - строка, описатель трассировки
//

Функция глСоздатьТрассировку(Описание) Экспорт
       Трассировка = СоздатьОбъект("СписокЗначений"); 
       СписокСообщений = СоздатьОбъект("ТаблицаЗначений");
       СписокСообщений.НоваяКолонка("ТекстСообщения","Строка",,,"Текст сообщения",50);
       СписокСообщений.НоваяКолонка("ТипСообщения","Число",1);
       СписокСообщений.НоваяКолонка("Форма");
       СписокСообщений.НоваяКолонка("Объект");
       СписокСообщений.НоваяКолонка("Контрол","Строка",20);
       Трассировка.ДобавитьЗначение(0);                             // уровень сообщения трассировки
       Трассировка.ДобавитьЗначение(СписокСообщений);       // список сообщений трассировки
       Трассировка.ДобавитьЗначение(Описание);                     // описание трассировки 
       Возврат Трассировка;
КонецФункции      // глСоздатьТрассировку()

//******************************************************************************
// глСообщениеТрассировки(Трассировка, Сообщение, ТипСообщения, ИзменениеУровняСообщения, Знач _П01="", _П01Формат="", Знач _П02="", _П02Формат="", Знач _П03="", _П03Формат="", _П04="", _П04Формат="")
//
// Параметры: 
// 	Трассировка - список значений, возвращенный функцией глСоздатьТрассировку()
//  Сообщение - текст сообщения трассировки
//  ТипСообщения - число 0 - обычное сообщение (просто комментарий), 
//                                           1 - "красное" сообщение (фатальная ошибка)
//                                           -1 - "синее" сообщение (предупреждение)
//  ИзменениеУровняСообщения - число "1" - для увеличения уровня трассировки (сообщение имеет "вложенный" характер)
//                             Текущее сообщение и все последующие будут "на уровень больше"
//                             число "-1" - для уменьшения уровня трассировки
//                             Все последующие сообщения будут "на уровень меньше"
//  _П01... - параметры, подставляемые в текст сообщения
//  _П01Формат - формат, используемый для соответствующего параметра
//
//  Форма -     необязательный параметр - форма, которую нужно открыть 
//              для обработки сообщения
//  Объект -    необязательный параметр - объект, который нужно активизировать (для форм списка) 
//				для обработки сообщения
//  Контрол -   необязательный параметр - контрол формы, который нужно активизировать для обработки сообщения
//
// Описание:
//  Вводит очередное сообщение трассировки, если параметр Трассировка не является 
//  подходящим списком значений - выводится сообщение в окно Сообщений
//  При выводе сообщения производится подстановка подстроки _П01 и т.д. соответсвующим 
//  пареметром в соответствующем формате.
//           Например:
//           глСообщениеТрассировки(Трассировка, "Число: _П01", 0, 0, 340.23, "Ч(0)9.3")
//           приведет к сообщению - "Число 00340.230"
//

Процедура глСообщениеТрассировки(Трассировка, Сообщение, ТипСообщения=0, ИзменениеУровняСообщения=0, Знач _П01="", _П01Формат="", Знач _П02="", _П02Формат="", Знач _П03="", _П03Формат="", Знач _П04="", _П04Формат="",Форма="",Объект="",Контрол="") Экспорт
	РежимТрассировки = ПустоеЗначение(ВосстановитьЗначение("НеКомментироватьВыполняемыеДействия"));
	Если (РежимТрассировки = 1) или (ТипСообщения<>0) Тогда
	   Попытка
          Тип = ТипЗначения(_П01);
          Если ПустоеЗначение(_П01Формат)=0 Тогда
          	_П01 = ""+Формат(_П01, _П01Формат);
          Иначе
          	_П01 = ""+_П01;
          КонецЕсли;
		  Тип = ТипЗначения(_П02);
          Если ПустоеЗначение(_П02Формат)=0 Тогда
            _П02 = ""+Формат(_П02, _П02Формат);
          Иначе
            _П02 = ""+_П02;
          КонецЕсли;
          Тип = ТипЗначения(_П03);
          Если ПустоеЗначение(_П03Формат)=0 Тогда
            _П03 = ""+Формат(_П03, _П03Формат);
          Иначе
            _П03 = ""+_П03;
          КонецЕсли;
          Тип = ТипЗначения(_П04);
          Если ПустоеЗначение(_П04Формат)=0 Тогда
            _П04 = ""+Формат(_П04, _П04Формат);
          Иначе
            _П04 = ""+_П04;
          КонецЕсли;

          Сообщение = СтрЗаменить(Сообщение,"_П01",_П01);
          Сообщение = СтрЗаменить(Сообщение,"_П02",_П02);
          Сообщение = СтрЗаменить(Сообщение,"_П03",_П03);
          Сообщение = СтрЗаменить(Сообщение,"_П04",_П04);

          ТекущийУровень = Трассировка.ПолучитьЗначение(1);
          Если ИзменениеУровняСообщения>0 Тогда
                ТекущийУровень = ТекущийУровень+1;
                Трассировка.УстановитьЗначение(1,ТекущийУровень);
          КонецЕсли;

          ТекстСообщения = "";

          Для Сч=1 По ТекущийУровень Цикл
                ТекстСообщения = ТекстСообщения+"    ";
          КонецЦикла;

          ТекстСообщения = ТекстСообщения+Сообщение;
          Если ИзменениеУровняСообщения<0 Тогда
                ТекущийУровень = Макс(ТекущийУровень+ИзменениеУровняСообщения,0);
                Трассировка.УстановитьЗначение(1,ТекущийУровень);
          КонецЕсли;

          ТЗ = Трассировка.ПолучитьЗначение(2);
          ТЗ.НоваяСтрока();
          ТЗ.ТипСообщения = ТипСообщения;
          ТЗ.ТекстСообщения = ТекстСообщения;
          ТЗ.Форма = Форма;
          ТЗ.Объект = Объект;
          ТЗ.Контрол = Контрол;
		Исключение
        	Сообщить(Сообщение);
   		КонецПопытки;
	КонецЕсли;
КонецПроцедуры    // глСообщениеТрассировки()   

//******************************************************************************
// глПоказатьТрассировку(Трассировка)
//
// Параметры: 
// 	Трассировка - список значений, возвращенный функцией глСоздатьТрассировку()
//
// Описание:
// 	Отображает список сообщений трассировки в форме обработки Трассировка
//

Процедура глПоказатьТрассировку(Трассировка) Экспорт
	Попытка
    	Параметр = Трассировка;
        ОткрытьФорму("Обработка.Трассировка",Параметр);
    Исключение
        // исключительная ситуация не обрабатывается
    КонецПопытки
КонецПроцедуры    // глПоказатьТрассировку()   

//******************************************************************************
// глСообщениеПроведения(ТекстСообщения, ПроводимыйДок, ТипСообщения=-1, ИзменениеУровняСообщения=0, Форма="", Объект="", Контрол="", ВыводитьВТаблицу=1) Экспорт
//
// Параметры: 
//  ТекстСообщения - текст выводимого сообщения
//  ПроводимыйДок 	- проводимый документ
//  ТипСообщения - тип сообщения (комментарий, ошибка, предупреждение )
//				 см. комментарий к процедуре глСообщениеТрассировки()
//  ИзменениеУровняСообщения - число "1" - для увеличения уровня трассировки (сообщение имеет "вложенный" характер)
//                             Текущее сообщение и все последующие будут "на уровень больше"
//                             число "-1" - для уменьшения уровня трассировки
//                             Все последующие сообщения будут "на уровень меньше"
//  Форма -     необязательный параметр - форма, которую нужно открыть 
//              для обработки сообщения  (если не задана, равна проводимому документу)
//  Объект -    необязательный параметр - объект, который нужно активизировать (для форм списка) 
//				для обработки сообщения
//  Контрол -   необязательный параметр - контрол формы, который нужно активизировать для обработки сообщения
//  ВыводитьВТаблицу - 0 - не использовать механизм комментирования и выводить сообщение в окно сообщений
//					   1 - использовать механизм комментирования и выводить сообщение в таблицу	
//
// Возвращаемое значение:
//  Нет
//
// Описание:
//  Выводит сообщение о проведении документов при помощи механизма комментирования действий/
//
Процедура глСообщениеПроведения(ТекстСообщения, ПроводимыйДок, ТипСообщения=-1, ИзменениеУровняСообщения=0, Форма="", Объект="", Контрол="", ВыводитьВТаблицу=1) Экспорт
	
	Если ВыводитьВТаблицу = 1 Тогда
		Если Форма = "" Тогда
		    Форма = ПроводимыйДок;
		КонецЕсли;      
		ЕстьТрассировка = 0;
		НазваниеТрассировки = "Проведение документа "+ПроводимыйДок.ПредставлениеВида()+" № "+ПроводимыйДок.НомерДок +" от "+ПроводимыйДок.ДатаДок;
		Если ТипЗначенияСтр(глСообщенияТрассировки) = "СписокЗначений" Тогда
		    Если НазваниеТрассировки = СокрЛП(глСообщенияТрассировки.ПолучитьЗначение(3)) Тогда
				ЕстьТрассировка = 1;
			КонецЕсли;
		КонецЕсли;
		Если ЕстьТрассировка = 0  Тогда
			глСообщенияТрассировки = глСоздатьТрассировку(НазваниеТрассировки);
		КонецЕсли;
		глСообщениеТрассировки(глСообщенияТрассировки, ТекстСообщения, ТипСообщения, ИзменениеУровняСообщения,,,,,,,,,Форма, Объект, Контрол);
	Иначе
		Сообщить(ТекстСообщения);
	КонецЕсли;
	
КонецПроцедуры // СообщениеПроведения()

// КОНЕЦ БЛОКА "ПРОЦЕДУРЫ И ФУНКЦИИ МЕХАНИЗМА КОММЕНТИРОВАНИЯ ВЫПОЛНЯЕМЫХ ДЕЙСТВИЙ"
////////////////////////////////////////////////////////////////////////////////

Процедура глПроверкаКорректныхПроводок(СчД,СчК)  Экспорт
	Если (ПустоеЗначение(СчД)=1) ИЛИ (ПустоеЗначение(СчК)=1) Тогда
		Возврат;
	КонецЕсли;	
	
	Фл = 0;
	
	КорПр = СоздатьОбъект("КорректныеПроводки");        
	КорПр.ВыбратьКорректныеПроводки(); 
	Пока КорПр.ПолучитьКорректнуюПроводку()=1 Цикл
		ВыбСчД = КорПр.СчетДт;
		ВыбСчК = КорПр.СчетКт;

		Если ((ВыбСчК=СчК) и (ВыбСчД=СчД)) 
			ИЛИ ((ВыбСчК=СчК) и (СчД.ПринадлежитГруппе(ВыбСчД)=1))
			ИЛИ ((СчК.ПринадлежитГруппе(ВыбСчК)=1) и (ВыбСчД=СчД))
			ИЛИ ((СчК.ПринадлежитГруппе(ВыбСчК)=1) и (СчД.ПринадлежитГруппе(ВыбСчД)=1)) Тогда
			Фл = 1;
			Прервать;		
		КонецЕсли;	
	КонецЦикла;	
	
	Если Фл=0 Тогда
		Если Вопрос("Корреспонденции: Д"+СчД+" - К"+СчК+" в списке"+РазделительСтрок
				+"корректных проводок нет. Добавить указанную"+РазделительСтрок
				+"вами корреспонденцию в список?","Да+Нет")="Да" Тогда

			КорПр.Новая(); 
			КорПр.СчетДт = СчД;
			КорПр.СчетКт = СчК;
			КорПр.Записать();
		КонецЕсли;			
	КонецЕсли;	
КонецПроцедуры // ПроверкаКоррректныхПроводок()

//******************************************************************************
// глПриПроведении(Конт, ВидыДвижений) Экспорт
//
// Параметры:
//  Конт         - контекст документа.
//
// Возвращаемое значение:
//  Нет
//  
// Описание:
//  Вызывается из процедур ОбработкаПроведения() модулей всех документов.
//  Вставлена для совместимости с комплексной конифгурацией
//
Процедура глПриПроведении(Конт) Экспорт
	
	// Покажем трассировку, если она есть
	НазваниеТрассировки = "Проведение документа "+Конт.ПредставлениеВида()+" № "+Конт.НомерДок +" от "+Конт.ДатаДок;
	Если ТипЗначенияСтр(глСообщенияТрассировки) = "СписокЗначений" Тогда
	    Если НазваниеТрассировки = СокрЛП(глСообщенияТрассировки.ПолучитьЗначение(3)) Тогда
			глПоказатьТрассировку(глСообщенияТрассировки);
			глСообщенияТрассировки = 0;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры // глПриПроведении()

//******************************************************************************
// глНеПроводить(Конт,Сообщение) 
//
// Параметры:
//  Конт      - контекст документа
//  Сообщение - текст сообщения (почему, собственно, не проводится)
//  Форма -     необязательный параметр - форма, которую нужно открыть 
//              для обработки сообщения  (если не задана, равна проводимому документу)
//  Объект -    необязательный параметр - объект, который нужно активизировать (для форм списка) 
//				для обработки сообщения
//  Контрол -   необязательный параметр - контрол формы, который нужно активизировать для обработки сообщения
//  ВыводитьВТаблицу - 0 - не использовать механизм комментирования и выводить сообщение в окно сообщений
//					   1 - использовать механизм комментирования и выводить сообщение в таблицу	
//
// Описание: 
//  вызывается из модулей проведения документов - отказ от проведения
//
Процедура глНеПроводить(Конт, Сообщение, Форма="", Объект="", Контрол="", ВыводитьВТаблицу=1) Экспорт
	
	СтатусВозврата(0);
	глСообщениеПроведения(Сообщение, Конт.ТекущийДокумент(), 1,, Форма, Объект, Контрол, ВыводитьВТаблицу);
	глСообщениеПроведения("Документ не проведен!", Конт.ТекущийДокумент(), 1);
	глПоказатьТрассировку(глСообщенияТрассировки);  
	глСообщенияТрассировки = 0;
	
КонецПроцедуры // глНеПроводить()

//*****************************************************************************
// глПереоценкаСчетов(Конт, ТаблицаСчетов, РассчитыватьОстатки, ИспользоватьКурсИзСправочника)
//
// Параметры:
//  Конт - контекст документа, из которого вызвана процедура.
//
//  ТаблицаСчетов - таблица значений, содержащая счета и аналитику для переоценки.
//		Структура этой таблицы должна соответствовать структуре глобальной 
//		переменной глТаблицаСчетов:
//		глТаблицаСчетов.НоваяКолонка("Счет");
//		глТаблицаСчетов.НоваяКолонка("Субконто1");
//		глТаблицаСчетов.НоваяКолонка("Субконто2");
//		глТаблицаСчетов.НоваяКолонка("Субконто3");
//		глТаблицаСчетов.НоваяКолонка("Валюта");
//		глТаблицаСчетов.НоваяКолонка("Курс");
//		глТаблицаСчетов.НоваяКолонка("РублевыйОстаток");
//		глТаблицаСчетов.НоваяКолонка("ВалютныйОстаток");
//
//  РассчитыватьОстатки - число, определяет режим расчета остатков в процедуре.
//		0 - не рассчитывать остатки. 
//			Рублевые и валютные остатки не рассчитываются в процедуре, 
//			а берутся из колонок таблицы значений ТаблицаСчетов:
//				ТаблицаСчетов.РублевыйОстаток;
//				ТаблицаСчетов.ВалютныйОстаток.
//		1 - расчитывать остатки в процедуре.
//		Значение по умолчанию: 1.
//
//  ИспользоватьКурсИзСправочника - число, определяет режим выбора курса при переоценке.
//		0 - курс берется из соответсвующей колонки таблицы значений ТаблицаСчетов.
//		1 - курс берется из справочника "Валюты".
//		Значение по умолчанию: 1.
//
//
// Описание
//  	Процедура проводит переоценку счетов, по переданным в параметре ТаблицаСчетов
//	счетам, объектам аналитического учета, валютам. Положительная курсовая разница 
//	относится в кредит счета 91.1, отрицательная - в дебет счета 91.2. В качестве 
//	объекта аналитического учета по субсчетам счета 91 используется элемент справочника
//	"Прочие доходы и расходы" с наименованием "Курсовые разницы" и указанным видом
//	прочих доходов и расходов "Курсовые разницы". Если такой элемент справочника не 
//	обнаружен, он будет создан в процессе выполнения процедуры. Сформированные проводки
//	являются проводками документа, контекст которого передан в процедуру.
//		Если по переданному субконто по этому счету считаются только обороты, в проводке
//	переоценки будет указано пустое значение.
//		В некоторых случаях расчет рублевых и валютных остатков может выполняться в 
//	модулях документов (документ "Переоценка валюты"). Для предотвращения повторного
//	расчета в параметр РассчитыватьОстатки следует передать 0. В остальных случаях
//	этот параметр можно не указывать.
//  Курсовые разницы, выявленные на счетах бухгалтерского учета отражаются в налоговом
//  учете на счетах Н08 или Н09 (в зависимости от того доход это или расход). 
//
Процедура глПереоценкаСчетов(Конт, ТаблицаСчетов, РассчитыватьОстатки = 1, ИспользоватьКурсИзСправочника = 1) Экспорт
	Перем БухИт, СписокСчетов;
	Перем РублевыйОстаток, ВалютныйОстаток, НовыйРублевыйОстаток, Разница;
	Перем Курс, Кратность;
	
	Если ТаблицаСчетов.КоличествоСтрок() = 0 Тогда
	    Возврат;
	КонецЕсли;

	Сч91 = СчетПоКоду("91");
	Сч91_1 = СчетПоКоду("91.1");
	Сч91_2 = СчетПоКоду("91.2"); 
	Аналитика91 = "";

	СпрПрочиеДоходыИРасходы = СоздатьОбъект("Справочник.ПрочиеДоходыИРасходы");
	СпрПрочиеДоходыИРасходы.ВыбратьЭлементыПоРеквизиту("ВидПрочихДоходовИРасходов", Перечисление.ВидыПрочихДоходовИРасходов.КурсовыеРазницы,,);
	КурсовыеРазницы = "";
	Пока (СпрПрочиеДоходыИРасходы.ПолучитьЭлемент() = 1) и (ПустоеЗначение(КурсовыеРазницы) = 1) Цикл
		Если СпрПрочиеДоходыИРасходы.Наименование = "Курсовые разницы" Тогда
		    КурсовыеРазницы = СпрПрочиеДоходыИРасходы.ТекущийЭлемент();
		КонецЕсли;
	КонецЦикла;
	
	Если ПустоеЗначение(КурсовыеРазницы) = 1 Тогда
		СпрПрочиеДоходыИРасходы.Новый();
		СпрПрочиеДоходыИРасходы.Наименование = "Курсовые разницы";
		СпрПрочиеДоходыИРасходы.ВидПрочихДоходовИРасходов = Перечисление.ВидыПрочихДоходовИРасходов.КурсовыеРазницы;
		СпрПрочиеДоходыИРасходы.Записать();
		КурсовыеРазницы = СпрПрочиеДоходыИРасходы.ТекущийЭлемент();
	КонецЕсли;   
	
	СпрПрочиеДоходыИРасходы.ВыбратьЭлементыПоРеквизиту("ВидПрочихДоходовИРасходов", Перечисление.ВидыПрочихДоходовИРасходов.ПрочиеВнереализационныеДоходыРасходы,,);
	КурсовыеРазницыПоРасчетамВУЕ = "";
	Пока (СпрПрочиеДоходыИРасходы.ПолучитьЭлемент() = 1) и (ПустоеЗначение(КурсовыеРазницыПоРасчетамВУЕ) = 1) Цикл
		Если СпрПрочиеДоходыИРасходы.Наименование = "Курсовые разницы по расчетам в у.е." Тогда
			КурсовыеРазницыПоРасчетамВУЕ = СпрПрочиеДоходыИРасходы.ТекущийЭлемент();
		КонецЕсли;		
	КонецЦикла; 
	
	Если ПустоеЗначение(КурсовыеРазницыПоРасчетамВУЕ) = 1 Тогда
		СпрПрочиеДоходыИРасходы.Новый();
		СпрПрочиеДоходыИРасходы.Наименование = "Курсовые разницы по расчетам в у.е.";
		СпрПрочиеДоходыИРасходы.ВидПрочихДоходовИРасходов = Перечисление.ВидыПрочихДоходовИРасходов.ПрочиеВнереализационныеДоходыРасходы;
		СпрПрочиеДоходыИРасходы.Записать();
		КурсовыеРазницыПоРасчетамВУЕ = СпрПрочиеДоходыИРасходы.ТекущийЭлемент();
	КонецЕсли;   
    
	ТекстСообщения = "=> Переоценка валютных счетов";
	глСообщениеПроведения(ТекстСообщения, Конт, 0);

	ТаблицаСчетов.Свернуть("Счет, Субконто1, Субконто2, Субконто3, Валюта, Курс, РублевыйОстаток, ВалютныйОстаток",);
	
	Если РассчитыватьОстатки = 1 Тогда
		СписокСчетов = СоздатьОбъект("СписокЗначений");
		ТаблицаСчетов.Выгрузить(СписокСчетов,,,"Счет");
		БухИт = СоздатьОбъект("БухгалтерскиеИтоги");
		БухИт.Рассчитать(, Конт.ТекущийДокумент(), СписокСчетов);
	КонецЕсли;
	
	СписокСчетов = Константа.СчетаПереоцениваемыеВОсобомПорядке.Получить(Конт.ДатаДок);
	
	ТаблицаСчетов.ВыбратьСтроки();
	Пока ТаблицаСчетов.ПолучитьСтроку() = 1 Цикл
		Если Найти(СписокСчетов, ТаблицаСчетов.Счет.Код) > 0 Тогда
			ТекстСообщения = "    - счет: "+ТаблицаСчетов.Счет+" подлежит переоценке в особом порядке";
			глСообщениеПроведения(ТекстСообщения, Конт, 0);
		    Продолжить;
		КонецЕсли; 
		
		Если Найти("60.6,62.6,76.6",ТаблицаСчетов.Счет.Код) > 0 Тогда
			Аналитика91 = КурсовыеРазницыПоРасчетамВУЕ;
		Иначе
			Аналитика91 = КурсовыеРазницы;
		КонецЕсли;

		
		Стр = "- счет: " + ТаблицаСчетов.Счет;
		Для Инд = 1 По ТаблицаСчетов.Счет.КоличествоСубконто() Цикл
			Стр = Стр + ", " + ТаблицаСчетов.Счет.ВидСубконто(Инд) + ": "+
				  ТаблицаСчетов.ПолучитьЗначение(ТаблицаСчетов.НомерСтроки,"Субконто"+Инд);
		    Если ТаблицаСчетов.Счет.ТолькоОбороты(Инд,) = 1 Тогда
				ТаблицаСчетов.УстановитьЗначение(ТаблицаСчетов.НомерСтроки, "Субконто"+Инд, ПолучитьПустоеЗначение());
		    КонецЕсли;
		КонецЦикла;
		ТекстСообщения = "    " + Стр;
		глСообщениеПроведения(ТекстСообщения, Конт, 0);
		
		Если РассчитыватьОстатки = 1 Тогда
			РублевыйОстаток = 	БухИт.СКД(ТаблицаСчетов.Счет, "С", ТаблицаСчетов.Валюта, ТаблицаСчетов.Субконто1, ТаблицаСчетов.Субконто2, ТаблицаСчетов.Субконто3)
								- БухИт.СКК(ТаблицаСчетов.Счет, "С", ТаблицаСчетов.Валюта, ТаблицаСчетов.Субконто1, ТаблицаСчетов.Субконто2, ТаблицаСчетов.Субконто3);
			ВалютныйОстаток = 	БухИт.СКД(ТаблицаСчетов.Счет, "В", ТаблицаСчетов.Валюта, ТаблицаСчетов.Субконто1, ТаблицаСчетов.Субконто2, ТаблицаСчетов.Субконто3)
								- БухИт.СКК(ТаблицаСчетов.Счет, "В", ТаблицаСчетов.Валюта, ТаблицаСчетов.Субконто1, ТаблицаСчетов.Субконто2, ТаблицаСчетов.Субконто3);
		Иначе
			РублевыйОстаток = 	ТаблицаСчетов.РублевыйОстаток;
			ВалютныйОстаток = 	ТаблицаСчетов.ВалютныйОстаток;
		КонецЕсли;

		Если ИспользоватьКурсИзСправочника = 1 Тогда
			Курс = ТаблицаСчетов.Валюта.Курс.Получить(Конт.ДатаДок);
		Иначе
			Курс = ТаблицаСчетов.Курс;
		КонецЕсли;
		Кратность = ТаблицаСчетов.Валюта.Кратность.Получить(Конт.ДатаДок);
		
		Если Найти("60.6,62.6,76.6",ТаблицаСчетов.Счет.Код) > 0 Тогда
			Кратность = Кратность * 100 / (100 + ТаблицаСчетов.Субконто2.ПроцентКорректировкиКурсаУЕ);
		КонецЕсли;

		Кратность = ?(Кратность=0,1,Кратность);
		
		НовыйРублевыйОстаток = Окр(ВалютныйОстаток*Курс/Кратность, Метаданные.ТочностьСуммыПроводки);
		Разница = НовыйРублевыйОстаток - РублевыйОстаток;
		Стр = "- валюта " + ТаблицаСчетов.Валюта;
		Если ВалютныйОстаток > 0 Тогда
			Стр = Стр + ", курс "+Курс+", текущий остаток в валюте "+ВалютныйОстаток+", текущий остаток в рублях "+РублевыйОстаток+", курсовая разница "+Разница;
		ИначеЕсли ВалютныйОстаток < 0 Тогда
			Стр = Стр + ", курс "+Курс+", текущий остаток в валюте "+(-ВалютныйОстаток)+", текущий остаток в рублях "+(-РублевыйОстаток)+", курсовая разница "+(-Разница);
		Иначе
			Стр = Стр + ", валютного остатка нет";
		КонецЕсли;
		ТекстСообщения = "        " + Стр;
		глСообщениеПроведения(ТекстСообщения, Конт, 0);
		Если Разница <> 0 Тогда
			Конт.Операция.НоваяПроводка();  Конт.Операция.РазделительУчета = Конт.ЮрЛицо;
			Конт.Операция.НомерЖурнала = "ВУ";
			Конт.Операция.СодержаниеПроводки = "Переоценка валюты";
			Конт.Операция.ПервичныйДокумент  = глПредставлениеПервичногоДокумента(Конт);
			Если Разница > 0 Тогда
				Конт.Операция.Дебет.Счет = ТаблицаСчетов.Счет;
				Конт.Операция.Дебет.Субконто(1, ТаблицаСчетов.Субконто1);
				Конт.Операция.Дебет.Субконто(2, ТаблицаСчетов.Субконто2);
				Конт.Операция.Дебет.Субконто(3, ТаблицаСчетов.Субконто3);
				Если ТаблицаСчетов.Счет.Забалансовый = 0 Тогда
					Конт.Операция.Кредит.Счет = Сч91_1;
					Конт.Операция.Кредит.ПрочиеДоходыИРасходы = Аналитика91;
				КонецЕсли;
				Конт.Операция.Сумма = Разница;
			Иначе
				Если ТаблицаСчетов.Счет.Забалансовый = 0 Тогда
					Конт.Операция.Дебет.Счет = Сч91_2;
					Конт.Операция.Дебет.ПрочиеДоходыИРасходы = Аналитика91;
				КонецЕсли;
				Конт.Операция.Кредит.Счет = ТаблицаСчетов.Счет;
				Конт.Операция.Кредит.Субконто(1, ТаблицаСчетов.Субконто1);
				Конт.Операция.Кредит.Субконто(2, ТаблицаСчетов.Субконто2);
				Конт.Операция.Кредит.Субконто(3, ТаблицаСчетов.Субконто3);
				Конт.Операция.Сумма = - Разница;
			КонецЕсли;
			Если ТаблицаСчетов.Счет.Валютный = 1 Тогда
			    Конт.Операция.Валюта = ТаблицаСчетов.Валюта;
			КонецЕсли;
			
			// Отражение курсовых разниц в налоговом учете.
			
			Если Найти("60.6,62.6,76.6",ТаблицаСчетов.Счет.Код) > 0 Тогда
				Продолжить; //по счетам расчетов в у.е. курсовые разницы в налоговом учете не возникают
			КонецЕсли;
			
			Если Конт.ТекущийДокумент().ДатаДок >= '01.01.2010' Тогда
				Если Найти("ВАЛ.60,ВАЛ.62",ТаблицаСчетов.Счет.Код) > 0 Тогда
					Продолжить; //по счетам расчетов в вал с 2010 г. курсовые разницы в налоговом учете не возникают
				КонецЕсли;
			КонецЕсли;

			Если глНовыеПравилаВеденияНУ(Конт.ДатаДок) = 1 Тогда
				Если Разница <> 0 Тогда
					Конт.Операция.НоваяПроводка();  Конт.Операция.РазделительУчета = Конт.ЮрЛицо;
					Конт.Операция.НомерЖурнала = "НУ";
					Конт.Операция.СодержаниеПроводки = "Переоценка валюты";
					Конт.Операция.ПервичныйДокумент  = глПредставлениеПервичногоДокумента(Конт);
					Конт.Операция.Сумма = Разница;
					Если Разница > 0 Тогда
						Конт.Операция.Кредит.Счет = СчетПоКоду("Н08");
						Конт.Операция.Кредит.ВнереализационныеДоходы = Перечисление.ВнереализационныеДоходы.КурсовыеРазницы;
						Конт.Операция.Сумма = Разница;
					Иначе
						Конт.Операция.Дебет.Счет = СчетПоКоду("Н09");
						Конт.Операция.Дебет.ВнереализационныеРасходы = Перечисление.ВнереализационныеРасходы.КурсовыеРазницы;
						Конт.Операция.Сумма = -Разница;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры // глПереоценкаСчетов()

///////////////////////////////////////////////////////////////////////////
//
Функция ФормирСуммаНДС(Подст,Сумма,НДС,СтавкаНДС) Экспорт
	СтрПодст = "";
    СтрСумма = "";
	СтрНДС = "";

	Если Подст = Перечисление.ПодстановкаСуммыНДС.БезСуммыБезНДС Тогда
		Возврат СтрПодст;
	КонецЕсли;

	Если (Подст = Перечисление.ПодстановкаСуммыНДС.СуммаНДС)
		или (Подст = Перечисление.ПодстановкаСуммыНДС.СуммаБезНДС) Тогда
	   	СтрСумма = " Cумма "+СокрЛ(Формат(Сумма,"Ч15.2-"));
	КонецЕсли;

	Если (Подст = Перечисление.ПодстановкаСуммыНДС.СуммаНДС)
		или (Подст = Перечисление.ПодстановкаСуммыНДС.БезСуммыНДС) Тогда
		Если СтавкаНДС.Ставка=0 Тогда
			СтрНДС=","+ РазделительСтрок+"без налога (НДС)";
		Иначе
			СтрНДС=","+ РазделительСтрок+"в т.ч. НДС("+глПредставлениеСтавки(СтавкаНДС)+") - "+СокрЛ(Формат(НДС,"Ч15.2-"));
		КонецЕсли;
	КонецЕсли;

	СтрПодст = СтрСумма+СтрНДС;
	Если ПустаяСтрока(СтрПодст)=0 Тогда
		СтрПодст = СтрПодст+"."
	КонецЕсли;

	Возврат СтрПодст;
КонецФункции

//******************************************************************************
// глЗначенияПериодическихРеквизитов(КонтекстФормы, НачальнаяДата=0, КонечнаяДата=0, ВидимыеРеквизиты=0, СвязьРеквизитов=0)
//
// Параметры:
//  КонтекстФормы    - "ГрупповойКонтекст" - контекст формы элемента или списка 
//                     справочника, в котором редактируются периодические реквизиты.
//  НачальнаяДата    - "дата" - дата, с которой следует показвать значения реквизитов.
//                     если не передана, то '00.00.0000'.
//  КонечнаяДата     - "дата" - дата, по которую следует показвать значения реквизитов.
//                     если не передана, то '31.12.9999'.
//  ВидимыеРеквизиты - "строка" - идентификаторы периодических реквизитов,
//                     значения которых надо показать, разделенные запятыми;
//                     если не передана - показываются все реквизиты.
//  СвязьРеквизитов  - 0 - реквизиты нельзя редактировать независимо,
//                     1 - реквизиты можно редактировать независимо;
//                     если не передано - 0.
//
// Возвращаемое значение:
//  0                   - если обработка ЗначенияПериодическихРеквизитов не открыта.
//  "ГрупповойКонтекст" - контекст формы обработки ЗначенияПериодическихРеквизитов.
//
// Вызывается из формул элементов диалога:
//  Кнопка "История".
//
// Описание:
//  Функция предназначена для вызова из форм элементов и списков справочников, 
// имеющих периодические реквизиты, по нажатию кнопки "История".
//  Вызывает обработку "ЗначенияПериодическихРеквизитов", в которой пользователь 
// может просмотреть историю значений периодических реквизитов, удалить значения.
//  Из обработки можно так же открыть форму элемента на нужную дату просмотра и 
// редактирования значений периодических реквизитов.
//
Функция глЗначенияПериодическихРеквизитов(КонтекстФормы, НачальнаяДата=0, КонечнаяДата=0, ВидимыеРеквизиты=0, СвязьРеквизитов=0) Экспорт
	
	// Если элемент не записан, то вместо выбора даты вызывается запись.
	Если ПустоеЗначение(КонтекстФормы.ТекущийЭлемент()) = 1 Тогда
		КонтекстФормы.СтрокаДействийФормы = "# Записать?";
		Возврат 0;
	КонецЕсли;
		
	// Список параметров обработки ЗначенияПериодическихРеквизитов.
	Параметр = СоздатьОбъект("СписокЗначений");
	Параметр.Установить("ТекущийОбъект",    КонтекстФормы.ТекущийЭлемент());
	Параметр.Установить("Текущая_Дата",     КонтекстФормы.ИспользоватьДату());
	Параметр.Установить("НачальнаяДата",    НачальнаяДата);
	Параметр.Установить("КонечнаяДата",     КонечнаяДата);
	Параметр.Установить("ВидимыеРеквизиты", ВидимыеРеквизиты);
	Параметр.Установить("СвязьРеквизитов",  СвязьРеквизитов);
	
	ОткрытьФорму("Обработка.ЗначенияПериодическихРеквизитов", Параметр);
	
	Если ТипЗначенияСтр(Параметр) <> "ГрупповойКонтекст" Тогда
		Возврат 0;
	КонецЕсли;
	
	Возврат Параметр;
	
КонецФункции // глЗначенияПериодическихРеквизитов()

//******************************************************************************
// глЗаписьПериодическихРеквизитов(КонтекстФормы, СписокРеквизитов=0, НоваяДата=0, 
//                                 ПерваяДата=0, СвязьРеквизитов=0, НеизменяемыеРеквизиты="") 
//
// Параметры:
//  КонтекстФормы    - "ГрупповойКонтекст" - контекст формы элемента или списка 
//                     справочника, в котором редактируются периодические реквизиты.
//  СписокРеквизитов - "СписокЗначений" - список значений периодических реквизитов, 
//                     установленных в диалоге формы справочника:
//                     в представлении - идентификатор периодического реквизита
//                     в значении - значение периодического реквизита.
//  НоваяДата        - "дата" - дата, на которую следует записывать не впервые
//                     устанавливаемые значения периодических реквизитов.
//                     если не передана, то КонтекстФормы.ИспользоватьДату().
//  ПерваяДата       - "дата" - дата, на которую следует записывать впервые 
//                     устанавливаемые значения периодических реквизитов.
//                     если не передана, то КонтекстФормы.ИспользоватьДату().
//  СвязьРеквизитов  - 0 - реквизиты нельзя редактировать независимо,
//                     1 - реквизиты можно редактировать независимо;
//                     если не передано - 0.
//
//  НеизменяемыеРеквизиты - "строка" - строка, в которой через запятую перечислены 
//                     периодические реквизиты. редактирование которых вручную запрщено.
//                     Параметр не имеет значения, если не пуйстой список значений передан
//                     в параметре "СписокРеквизитов".
//
// Возвращаемое значение:
//  0 - периодические реквизиты не сохранены.
//  1 - периодические реквизиты сохранены.
//
// Описание:
//  Функция предназначена для вызова из форм элементов справочников, имеющих 
//  периодические реквизиты, из процедур ПриЗаписи().
//  Вызывает обработку "ЗаписьПериодическихРеквизитов", в которой пользователь 
//  может просмотреть список записываемых реквизитов, их значения, отменить запись 
//  некоторых (или всех) значений, изменить дату записи периодических реквизитов.
//
Функция глЗаписьПериодическихРеквизитов(КонтекстФормы, СписокРеквизитов=0, НоваяДата=0, 
	                                    ПерваяДата=0, СвязьРеквизитов=0, НеизменяемыеРеквизиты="") Экспорт
										
	Если ТипЗначенияСтр(СписокРеквизитов) <> "СписокЗначений" Тогда
		СписокРеквизитов = СоздатьОбъект("СписокЗначений");
		
		МДСправочник = Метаданные.Справочник(КонтекстФормы.Вид());
		
		Сч = 1;
		
		Пока МДСправочник.Реквизит(Сч).Выбран() = 1 Цикл
			
			Если МДСправочник.Реквизит(Сч).Периодический = 1 Тогда 
				Идентификатор = МДСправочник.Реквизит(Сч).Идентификатор;
				Если Найти("," + НеизменяемыеРеквизиты + ",", "," + Идентификатор + ",") = 0  Тогда
					СписокРеквизитов.ДобавитьЗначение(КонтекстФормы.ПолучитьАтрибут(Идентификатор), Идентификатор);
				КонецЕсли;
			КонецЕсли;
			
			Сч = Сч + 1;
			
		КонецЦикла; 
	КонецЕсли;	
	
	// Список параметров обработки ЗаписьПериодическихРеквизитов.
	Параметр = СоздатьОбъект("СписокЗначений");
	Параметр.Установить("КонтекстФормы",    КонтекстФормы);
	Параметр.Установить("СписокРеквизитов", СписокРеквизитов);
	Параметр.Установить("НоваяДата",        НоваяДата);
	Параметр.Установить("ПерваяДата",       ПерваяДата);
	Параметр.Установить("СвязьРеквизитов",  СвязьРеквизитов);
	
	ОткрытьФормуМодально("Обработка.ЗаписьПериодическихРеквизитов", Параметр);

	Возврат Параметр;
	
КонецФункции // глЗаписьПериодическихРеквизитов()

//******************************************************************************
// глБухЗаписьПериодическихРеквизитов(Конт)
//
Функция глБухЗаписьПериодическихРеквизитов(Конт) Экспорт
	
	// Обработке ЗаписьПериодическихРеквизитов необходимо передать
	// значения периодических реквизитов, введенные в форме диалога.
	Список = СоздатьОбъект("СписокЗначений");
	ПустойСписок = СоздатьОбъект("СписокЗначений");

	СтрСписок = Конт.СохранениеПериодическихРеквизитов(5);
	Конт.СохранениеПериодическихРеквизитов(5, ПустойСписок);
	Список.ИзСтрокиСРазделителями("""" + СтрЗаменить(СтрСписок, ",", """,""") + """");
	
	Если ПустоеЗначение(Список.ПолучитьЗначение(1)) = 0 Тогда
		Для а = 1 по Список.РазмерСписка() Цикл
			Реквизит = Список.ПолучитьЗначение(а);
			Список.УстановитьЗначение(а, Конт.ПолучитьАтрибут(Реквизит), Реквизит);
		КонецЦикла;
		// При записи вызывается обработка ЗаписьПериодическихРеквизитов 
		// для управления записью значений периодических реквизитов.
		СвязанныеРеквизиты = ?(ПустоеЗначение(Список.Получить("СчетЗатрат")) = 1, 0, 1);
		Возврат глЗаписьПериодическихРеквизитов(Конт, Список,,, СвязанныеРеквизиты);
		
	Иначе
		Возврат 1;
	КонецЕсли;

КонецФункции // глБухЗаписьПериодическихРеквизитов()

//******************************************************************************
// глПолучитьДатуПериодическихРеквизитов()
//
// Параметры:
//  КонтекстФормы - "ГрупповойКонтекст" - контекст формы элемента справочника, 
//                  в котором редактируются периодические реквизиты.
//
// Возвращаемое значение:
//  0 - дата не назначена форме.
//  1 - дата назначена форме.
//
// Описание:
//  Функция предназначена для вызова из форм элементов справочников, имеющих 
// периодические реквизиты, из процедур ПриОткрытии() и ПриПовторномОткрытии().
//  Если параметре при открытии формы элемента указана дата, на которую следует
// просматривать и редактировать значения периодических реквизитов, эта дата 
// назначается форме..
//
Функция глПолучитьДатуПериодическихРеквизитов(КонтекстФормы) Экспорт
	
	Если ТипЗначенияСтр(КонтекстФормы.Форма.Параметр) = "СписокЗначений" Тогда
		Текущая_Дата = Дата(КонтекстФормы.Форма.Параметр.Получить("ИспользоватьДату()"));
		
		Если Текущая_Дата <> '00.00.0000' Тогда
			КонтекстФормы.ИспользоватьДату(Текущая_Дата, 1); 
			Возврат 1;
		КонецЕсли;
	КонецЕсли;
	
	Возврат 0;
	
КонецФункции // глПолучитьДатуПериодическихРеквизитов()

//******************************************************************************
// глВвестиДатуПериодическихРеквизитов(КонтекстФормы, ФормаЭлемента)
//
// Параметры:
//  КонтекстФормы - "ГрупповойКонтекст" - контекст формы элемента или списка 
//                  справочника.
//  ФормаЭлемента - 1 - функция вызвана из формы элемента,
//                  0 - функция вызвана из форы списка справочника.
//
// Возвращаемое значение:
//  0 - дата не назначена форме.
//  1 - дата назначена форме.
//
// Описание:
//  Функция предназначена для вызова из форм элементов и списков справочников, 
// имеющих периодические реквизиты, по нажатию кнопки выбора даты просмотра и
// редактирования значений периодических реквизитов.
//
Функция глВвестиДатуПериодическихРеквизитов(КонтекстФормы, ФормаЭлемента) Экспорт
	
	Текущая_Дата = КонтекстФормы.ИспользоватьДату();
	
	Если ВвестиДату(Текущая_Дата, "Введите дату:", 60) = 1 Тогда
		Если ФормаЭлемента = 0 Тогда
			КонтекстФормы.ИспользоватьДату(Текущая_Дата);
		Иначе
			КонтекстФормы.ИспользоватьДату(Текущая_Дата, 1);
		КонецЕсли;
		
		Возврат 1;
	КонецЕсли;
	
	Возврат 0;
	
КонецФункции // глВвестиДатуПериодическихРеквизитов()

//******************************************************************************
// глДатаПериодРеквизитов(Текущая_Дата)
//
// Параметры:
//  Текущая_Дата - дата, на которую отображаются и редактируются периодические 
//                 реквизиты в форме элемента или списка справочника.
//
// Возвращаемое значение:
//  "Строка" - информация о дате значения периодических реквизитов.
//
// Вызывается из формул элементов диалога:
//  Текст, информирующий о дате значения перидических реквизитов.
//
// Описание:
//  Формирует стандартный текст о дате значения периодических реквизитов,
// показываемый в формах всех справочников, имеющих периодические реквизиты.
//
Функция глДатаПериодРеквизитов(Текущая_Дата) Экспорт
	
	Возврат "Значения периодических реквизитов указаны на "+
	        Формат(Текущая_Дата, "ДДДММГГГГ");
	
КонецФункции // глДатаПериодРеквизитов()

//*****************************************************************************
// глРедактироватьИсториюЗначений(Конт, Реквизиты = "", Заголовок = " ", Просмотр = 0)
//
// Параметры:
//  Конт - текущий контекст формы
//  Реквизиты - список реквизитов и их взаимосвязь для редактирования. если
//             передана пустая строка то редактируются все периодические реквизиты
//             данного справочника. реквизиты перечисляются через запятую.
//  <Реквизиты> = <Реквизит>{,<Реквизит>}
//  <Реквизит> = <ИдентификаторРеквизита> [<Ширина>][(<НастройкаКолонки>{,<НастройкаКолонки>})]
//  <НастройкаКолонки> = <Счет>|<Владелец>|<Форма>|<ВидРедактирования>
//  <ИдентификаторРеквизита> - идентификатор реквизита который будет редактироваться
//								в данной колонке
//  <Ширина> - число, которое задает ширину колонки
//  <Счет> = <НомерСубконто> <РеквизитСчета>
//  <НомерСубконто> - число задающее номер субконто счета
//  <РеквизитСчета> - идентификатор реквизита счета субконтом, которого является
//						редактируемый реквизит
//  <Владелец> - идентификатор реквизита владельца редактируемого реквизита
//  <Форма> = ФОРМА(<ИдентификаторФормы>)
//  <ИдентификаторФормы> - идентификатор формы которая будет вызываться для редактирования реквизита
//  <ВидРедактирования> = Флажок | ПолеСоСписком(Строка{,Строка}) // только для реквизитов типа число
//             Пример:
//					"СчетЗатрат 10, Субконто1 20(1 СчетЗатрат, Форма(РедСубконтоСотрудника)), Субконто2 20(2 СчетЗатрат, Субконто1, Форма(РедСубконтоСотрудника)), Субконто3 20(3 СчетЗатрат, Субконто2, Форма(РедСубконтоСотрудника)), СтатьяОтчисленийНаСоцНужды 20(1 СчетЗатрат, Форма(РедСтатьяОтчисленийСотрудника))"
//             будет редактироваться 5 реквизитов, причем тип реквизита Субконто1 определяется 1 видом
//             субконто реквизита СчетЗатрат, для Субконто2 тип определяется 2 видом субконто, владелец задается
//             реквизитом Субконто1 и т.д. Ширина колонки Счет равна 10 символов, а остальных колонок 20 символов.
//			   форма редактирования для реквизита СчетЗатрат берется по умолчанию, для реквизитов Субконто форма РедСубконтоСотрудника,
//			   для реквизита СтатьяОтчисленийНаСоцНужды форма РедСтатьяОтчисленийСотрудника.
//             Пример:
//				     "ТипСотрудника 40(ПолеСоСписком(Основное место работы,Внешнее совместительство,Работа по договору подряда))"
//             редактируется один реквизит ТипСотрудника, ширина 40 символов. редактируется полем со списком, в котром 3 значения:
//             1 - Основное место работы
//			   2 - Внешнее совместительство
//             3 - Работа по договору подряда
//  Заголовок - заголовок окна истории значений реквизитов
//  Просмотр - режим открытия формы
//  Просмотр = 0 - кнопки редактирования доступны
//  Просмотр = 1 - кнопки редактирования не доступны
//
// Описание
//  Процедура открывает обработку для просмотра/редактирования истории 
//  периодических реквизитов. 
//
Процедура глРедактироватьИсториюЗначений(Конт, Реквизиты = "", Заголовок = " ", Просмотр = 0) Экспорт
//	Перем Спр;
//
//	Если Конт.Выбран() = 0 Тогда
//		Предупреждение("Просмотр истории значений возможен только для записанного элемента.");
//		Возврат;
//	ИначеЕсли Конт.ЭтоГруппа() = 1 Тогда
//		Возврат;
//	КонецЕсли;
//
//	СЗ = СоздатьОбъект("СписокЗначений");
//	СЗ.ДобавитьЗначение(Конт, "Контекст");
//	СЗ.ДобавитьЗначение(Реквизиты, "Реквизиты");
//	СЗ.ДобавитьЗначение(Заголовок, "Заголовок");
//	Если Конт.Форма.ТолькоПросмотр() = 1 Тогда
//		Просмотр = 1;
//	КонецЕсли;
//	СЗ.ДобавитьЗначение(Просмотр, "Просмотр");
//	ОткрытьФорму("Отчет.СписокПериодическихРеквизитов#"+ЗначениеВСтрокуВнутр(Конт.ТекущийЭлемент()), СЗ);
КонецПроцедуры //глРедактироватьИсториюЗначений

///////////////////////////////////////////////////////////////////////////
//
//Функция глЗаписьПериодическихРеквизитов(Конт) Экспорт
//	Если ПустоеЗначение(Конт.СохранениеПериодическихРеквизитов(5)) = 1 Тогда
//		//Периодические реквизиты не изменялись
//		Возврат 1;
//	КонецЕсли;
//
//	Параметр = Конт;
//	ОткрытьФормуМодально("Обработка.ЗаписьПериодическихРеквизитов", Параметр);
//	Возврат Параметр;
//КонецФункции //глЗаписьПериодическихРеквизитов
///////////////////////////////////////////////////////////////////////////
//
Процедура глПоказатьReadMe()
	Таб = СоздатьОбъект("Таблица");
	Таб.ИсходнаяТаблица("ReadMe");
	Таб.Вывести();
	Таб.Опции(0,0,0,0,"ОпцииПечатиReadMe","ПараметрыОкнаReadMe");
	Таб.ТолькоПросмотр(1);
	Таб.Показать("Дополнения к ""Описанию конфигурации""","");
	//ReadMe=СоздатьОбъект("Текст");
	//Если ФС.СуществуетФайл(КаталогИБ()+"ReadMe.txt")=1  Тогда
	//	ReadMe.Открыть(КаталогИБ()+"ReadMe.txt");
	//	ReadMe.ТолькоПросмотр(1);
	//	ReadMe.Показать("Дополнения к ""Описанию конфигурации""",);
	//Иначе
	//	Предупреждение("Файл с дополнениями к ""Описанию конфигурации"" не найден.");
	//КонецЕсли;
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////
//
Процедура глПроверкаСтавкиФСС_НС() Экспорт
	Если Вопрос("Проверьте и, при необходимости, измените ставку отчислений
				|в ФСС РФ (НС и ПЗ) в справочнике ""Налоги и отчисления""
				|для установленного кода ОКОНХ в соответствии с Правилами
				|отнесения отраслей (подотраслей) экономики к классу
				|профессионального риска, утвержденными Постановлением
				|Правительства РФ от 31 августа 1999 г. № 975, и
				|Федеральным Законом ""О страховых тарифах на обязательное
				|социальное страхование от несчастных случаев на производстве
	      		|и профессиональных заболеваний на 2000 год"" от
		  		|02 января 2000 г. № 10-ФЗ.
				|
				|Открыть элемент ""Взносы в ФСС РФ (НС и ПЗ)""
				|справочника ""Налоги и отчисления""?", "Да+Нет") = "Да" Тогда
	    ОткрытьФормуМодально(глПолучитьНалог("ФСС_НС"));
	КонецЕсли;
КонецПроцедуры //глПроверкаСтавкиФСС_НП
//******************************************************************************
// глРазложить(Знач Стр, Разделитель = ",")
//
// Параметры: 
//  Стр - строка, которую необходимо разложить на подстроки. 
//        Параметр передается по значению.
//  Разделитель - строка-разделитель, по умолчанию - запятая.
//
// Возвращаемое значение:
//  Список значений элементы которого - подстроки
//
// Описание:
//  Функция "расщепляет" строку на подстроки, используя заданный 
//  разделитель. Разделитель может иметь любую длину. 
//  Если в качестве разделителя задан пробел, рядом стоящие пробелы 
//  считаются одним разделителем, а ведущие и хвостовые пробелы параметра Стр
//  игнорируются.
//  Например, 
//  глРазложить(",ку,,,му", ",") возвратит список значений из пяти элементов, 
//  три из которых - пустые строки, а 
//  глРазложить(" ку   му", " ") возвратит список значений из двух элементов
//		
Функция глРазложить(Знач Стр, Разделитель = ",") Экспорт
	
	Список = СоздатьОбъект("СписокЗначений");
	Длина  = СтрДлина(Разделитель);
	
	Стр = СокрЛП(Стр);
	Поз = Найти(Стр, Разделитель);
	
	Пока 0 < Поз Цикл
		Список.ДобавитьЗначение(СокрП(Лев(Стр, Поз-1)));
		
		Стр = СокрЛ(Сред(Стр, Поз+Длина));
		Поз = Найти(Стр, Разделитель);
	КонецЦикла;

	Список.ДобавитьЗначение(Стр);
	
	Возврат Список;
	
КонецФункции // глРазложить()

//******************************************************************************
// глВводАдреса(Адрес, ФорматАдреса = 0) 
//
// Параметры: 
//  Адрес (строка), адрес который необходимо отредактировать. 
//  ФорматАдреса (число) 1 - адрес может только вводится в формате МНС,
//                       0 - адрес может вводится в формате МНС и произвольном формат.
//                       иначе - адрес может вводится только в произвольном формат.
//
// Возвращаемое значение:
// 	Нет
//
// Описание:
//  Процедура открывает форму ввода (редактирования адреса).
//
Процедура глВводАдреса(Адрес, ФорматАдреса = 0) Экспорт
	
	Если ТипЗначенияСтр(Адрес) <> "Строка" Тогда
		Адрес = "";
	КонецЕсли;
	
	Если ФорматАдреса = 0 Тогда
		ОткрытьФормуМодально("Обработка.ВводАдреса", Адрес);
		
	Иначе
		Параметры = СоздатьОбъект("СписокЗначений");
		Параметры.Установить("Адрес",         Адрес);
		Параметры.Установить("Формат адреса", ФорматАдреса);
		ОткрытьФормуМодально("Обработка.ВводАдреса", Параметры);
		
		Если ТипЗначенияСтр(Параметры) = "СписокЗначений" Тогда
			Если Адрес <> Параметры.Получить("Адрес") Тогда
				Адрес = Параметры.Получить("Адрес");
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // глВводАдреса()

//******************************************************************************
// глАдресСоответствуетТребованиямМНС(Адрес) 
//
// Параметры:
//  Адрес (строка) - Адрес который проверяется на соответствие.
//
// Возвращаемое значение:
//  1 - соответствует требованиям МНС
//  0 - несоответствует требованиям МНС
//
// Описание:
//  Определяет соответствие основных параметров адреса требованиям МНС.
//
Функция глАдресСоответствуетТребованиямМНС(Адрес) Экспорт
	
	АдресСписком = глРазложить(Адрес);
	
	Если      СтрКоличествоСтрок(Адрес) <> 1 Тогда     // недолжно быть переводов строк
		Возврат 0;
	ИначеЕсли СтрЧислоВхождений(Адрес, ",") <> 9 Тогда // должно быть 9 запятых
		Возврат 0;
	ИначеЕсли СтрДлина(АдресСписком.ПолучитьЗначение(1))  > 3  Тогда   // код страны не > 3 символов
		Возврат 0;
	ИначеЕсли СтрДлина(АдресСписком.ПолучитьЗначение(2))  > 6  Тогда   // индекс не > 6 символов
		Возврат 0;
	ИначеЕсли СтрДлина(АдресСписком.ПолучитьЗначение(3))  > 50 Тогда   // наим.региона не > 50 символов
		Возврат 0;
	ИначеЕсли СтрДлина(АдресСписком.ПолучитьЗначение(4))  > 50 Тогда   // наим.района не > 50 символов
		Возврат 0;
	ИначеЕсли СтрДлина(АдресСписком.ПолучитьЗначение(5))  > 50 Тогда   // наим.города не > 50 символов
		Возврат 0;
	ИначеЕсли СтрДлина(АдресСписком.ПолучитьЗначение(6))  > 50 Тогда   // наим.нас.пункта не > 50 символов
		Возврат 0;
	ИначеЕсли СтрДлина(АдресСписком.ПолучитьЗначение(7))  > 50 Тогда   // наим.улицы не > 50 символов
		Возврат 0;
	ИначеЕсли СтрДлина(АдресСписком.ПолучитьЗначение(8))  > 10  Тогда   // номер дома не > 10 символов
		Возврат 0;
	ИначеЕсли СтрДлина(АдресСписком.ПолучитьЗначение(9))  > 10  Тогда   // номер корпуса не > 10 символов
		Возврат 0;
	ИначеЕсли СтрДлина(АдресСписком.ПолучитьЗначение(10)) > 10  Тогда   // номер квартиры не > 10 символов
		Возврат 0;
		
	Иначе
		Возврат 1;
		
	КонецЕсли;
	
КонецФункции // глАдресСоответствуетТребованиямМНС()

//******************************************************************************
// глПредставлениеАдреса(Знач Адрес, Способ = 0) Экспорт
//
// Параметры: 
//  Адрес (строка), адрес представление которого нужно вернуть. 
//  Способ - способ представления адреса (если=1, то возвращает представление адреса без индекса)
//
// Возвращаемое значение:
//  Строку - представление адреса
//
// Описание:
//  Предназначена для формирования адресной строки в "удобочитаемом" виде
//  для отражения в формах.
//
Функция глПредставлениеАдреса(Знач Адрес, Способ = 0) Экспорт
	
	Если (глАдресСоответствуетТребованиямМНС(Адрес) = 1) Тогда
		
		АдресСписком = глРазложить(Адрес);
		Адрес = "";
		
		Если ПустаяСтрока(АдресСписком.ПолучитьЗначение(1)) = 0 Тогда 
			
			Адрес = АдресСписком.ПолучитьЗначение(1);
			
			Если Метаданные.Справочник("ОКСМ").Выбран() = 1 Тогда 
				Объект = СоздатьОбъект("Справочник.ОКСМ");
				Если Объект.НайтиПоКоду(АдресСписком.ПолучитьЗначение(1)) = 1 Тогда
					Адрес = Объект.ТекущийЭлемент().Наименование;
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
			
		Для Индекс = 2 + Способ По 10 Цикл
			Если ПустаяСтрока(АдресСписком.ПолучитьЗначение(Индекс)) = 0 Тогда 
				Адрес = Адрес + ?(ПустаяСтрока(Адрес) = 1, "", ", ") + 
				        ?(Индекс = 8, "д. ", ?(Индекс = 9, "кор. ", ?(Индекс = 10, "кв. ", ""))) + 
				        АдресСписком.ПолучитьЗначение(Индекс);
			КонецЕсли;
		КонецЦикла;
		
	Иначе
		Адрес = СтрЗаменить(Адрес, РазделительСтрок, ", ");
		
	КонецЕсли;

	Возврат СокрЛП(Адрес);
	
КонецФункции // глПредставлениеАдреса()

//_____________________________________________________________________________
Процедура глПолучитьДанные(Список) Экспорт

	ПереданКонтекст=Список.ПолучитьЗначение( 1 );
	ДатаЗначения=Список.ПолучитьЗначение( 2 );

	Для Индекс = 3 По Список.РазмерСписка()  Цикл
		Значение = "";
		Список.ПолучитьЗначение( Индекс, Значение );

		Если Значение = "ГНИ" Тогда
			Результат=Константа.ГНИОрганизации;
			Список.Установить( "ГНИ", СокрЛП( Результат ) );

		ИначеЕсли Значение = "ИНН" Тогда
			Результат=СокрЛП(Константа.ИННОрганизации);
			Список.Установить( "ИНН", Результат );

		ИначеЕсли Значение = "ОфициальноеНаименование" Тогда
			Результат=Константа.ОфициальноеНазваниеОрганизации;
			Список.Установить( "ОфициальноеНаименование", СокрЛП( Результат ) );

		ИначеЕсли Значение = "ДатаРегистрации" Тогда
			Результат=Константа.ДатаРегистрации;
			Список.Установить( "ДатаРегистрации", Результат );

		ИначеЕсли Значение = "ЮрАдресОрганизации" Тогда
			Результат=глПредставлениеАдреса(Константа.АдресОрганизации);
			Список.Установить( "ЮрАдресОрганизации", СокрЛП( Результат ) );
        
		ИначеЕсли Значение = "ОргИндекс" Тогда
			ТекстАдреса = Константа.АдресОрганизации;
			Если глАдресСоответствуетТребованиямМНС(ТекстАдреса) = 1 Тогда
				АдресСписком = глРазложить(ТекстАдреса);
				Результат = АдресСписком.ПолучитьЗначение(2);
				Список.Установить( "ОргИндекс", СокрЛП( Результат ) );
			КонецЕсли;
		
		ИначеЕсли Значение = "ОргСубъект" Тогда
			ТекстАдреса = Константа.АдресОрганизации;
			Если глАдресСоответствуетТребованиямМНС(ТекстАдреса) = 1 Тогда
				АдресСписком = глРазложить(ТекстАдреса);
				Результат = АдресСписком.ПолучитьЗначение(3);
				Список.Установить( "ОргСубъект", СокрЛП( Результат ) );
			КонецЕсли;
		
		ИначеЕсли Значение = "ОргРайон" Тогда
			ТекстАдреса = Константа.АдресОрганизации;
			Если глАдресСоответствуетТребованиямМНС(ТекстАдреса) = 1 Тогда
				АдресСписком = глРазложить(ТекстАдреса);
				Результат = АдресСписком.ПолучитьЗначение(4);
				Список.Установить( "ОргРайон", СокрЛП( Результат ) );
			КонецЕсли;
			
		ИначеЕсли Значение = "ОргГород" Тогда
			ТекстАдреса = Константа.АдресОрганизации;
			Если глАдресСоответствуетТребованиямМНС(ТекстАдреса) = 1 Тогда
				АдресСписком = глРазложить(ТекстАдреса);
				Результат = АдресСписком.ПолучитьЗначение(5);
				Список.Установить( "ОргГород", СокрЛП( Результат ) );
			КонецЕсли;
			
		ИначеЕсли Значение = "ОргНПункт" Тогда
			ТекстАдреса = Константа.АдресОрганизации;
			Если глАдресСоответствуетТребованиямМНС(ТекстАдреса) = 1 Тогда
				АдресСписком = глРазложить(ТекстАдреса);
				Результат = АдресСписком.ПолучитьЗначение(6);
				Список.Установить( "ОргНПункт", СокрЛП( Результат ) );
			КонецЕсли;
			
		ИначеЕсли Значение = "ОргУлица" Тогда
			ТекстАдреса = Константа.АдресОрганизации;
			Если глАдресСоответствуетТребованиямМНС(ТекстАдреса) = 1 Тогда
				АдресСписком = глРазложить(ТекстАдреса);
				Результат = АдресСписком.ПолучитьЗначение(7);
				Список.Установить( "ОргУлица", СокрЛП( Результат ) );
			КонецЕсли;
			
		ИначеЕсли Значение = "ОргДом" Тогда
			ТекстАдреса = Константа.АдресОрганизации;
			Если глАдресСоответствуетТребованиямМНС(ТекстАдреса) = 1 Тогда
				АдресСписком = глРазложить(ТекстАдреса);
				Результат = АдресСписком.ПолучитьЗначение(8);
				Список.Установить( "ОргДом", СокрЛП( Результат ) );
			КонецЕсли;
			
		ИначеЕсли Значение = "ОргКорпус" Тогда
			ТекстАдреса = Константа.АдресОрганизации;
			Если глАдресСоответствуетТребованиямМНС(ТекстАдреса) = 1 Тогда
				АдресСписком = глРазложить(ТекстАдреса);
				Результат = АдресСписком.ПолучитьЗначение(9);
				Список.Установить( "ОргКорпус", СокрЛП( Результат ) );
			КонецЕсли;
			
		ИначеЕсли Значение = "ОргКвартира" Тогда
			ТекстАдреса = Константа.АдресОрганизации;
			Если глАдресСоответствуетТребованиямМНС(ТекстАдреса) = 1 Тогда
				АдресСписком = глРазложить(ТекстАдреса);
				Результат = АдресСписком.ПолучитьЗначение(10);
				Список.Установить( "ОргКвартира", СокрЛП( Результат ) );
			КонецЕсли;                                                  
			
		ИначеЕсли Значение = "ПочтАдресОрганизации" Тогда
			Результат=глПредставлениеАдреса(Константа.ПочтовыйАдресОрганизации);
			Список.Установить( "ПочтАдресОрганизации", СокрЛП( Результат ) );
        			
		ИначеЕсли Значение = "Телефон" Тогда
			Результат=Константа.ТелефоныОрганизации;
			Список.Установить( "Телефон", СокрЛП( Результат ) );

		ИначеЕсли Значение = "БанковскийСчетНомер" Тогда
			Результат=Константа.ОсновнойБанковскийСчет.Номер;
			Список.Установить( "БанковскийСчетНомер", СокрЛП( Результат ) );

		ИначеЕсли Значение = "БанковскийСчетБанк" Тогда
			Результат=Константа.ОсновнойБанковскийСчет.БанкОрганизации.Наименование;
			Список.Установить( "БанковскийСчетБанк", СокрЛП( Результат ) );

		ИначеЕсли Значение = "Отрасль" Тогда
			Результат=Константа.Отрасль;
			Список.Установить( "Отрасль", СокрЛП( Результат ) );

		ИначеЕсли Значение = "ОргПравФорма" Тогда
			Результат=Константа.ОргПравФорма;
			Список.Установить( "ОргПравФорма", СокрЛП( Результат ) );

		ИначеЕсли Значение = "КодОКПО" Тогда
			Результат=Константа.КодОКПО;
			Список.Установить( "КодОКПО", СокрЛП( Результат ) );

		ИначеЕсли Значение = "КодОКОНХ" Тогда
			Результат=Константа.КодОКОНХ;
			Список.Установить( "КодОКОНХ", СокрЛП( Результат ) );
		
		ИначеЕсли Значение = "КодОКВЭД" Тогда
			Результат=Константа.КодОКВЭД;
			Список.Установить( "КодОКВЭД", СокрЛП( Результат ) );

		ИначеЕсли Значение = "КодКОПФ" Тогда
			Результат=Константа.КодКОПФ;
			Список.Установить( "КодКОПФ", СокрЛП( Результат ) );

		ИначеЕсли Значение = "КодКФС" Тогда
			Результат=Константа.КодКФС;
			Список.Установить( "КодКФС", СокрЛП( Результат ) ); 
		
		ИначеЕсли Значение = "ОГРН" Тогда
			Результат=Константа.ОГРН;
			Список.Установить( "ОГРН", СокрЛП( Результат ) );

		ИначеЕсли Значение = "ПФНомер" Тогда
			Налог = глПолучитьНалог("ПФР_страх");
			Список.Установить( "ПФНомер", СокрЛП( Налог.РегНомер ) );

		ИначеЕсли Значение = "ПФСрокУплаты" Тогда
			Налог = глПолучитьНалог("ПФР_страх");
			Список.Установить( "ПФСрокУплаты", Налог.СрокУплаты );

		ИначеЕсли Значение = "ФОМСНомер" Тогда
			Налог = глПолучитьНалог("ФФОМС");
			Список.Установить( "ФОМСНомер", СокрЛП( Налог.РегНомер ) );

		ИначеЕсли Значение = "ФОМССрокУплаты" Тогда
			Налог = глПолучитьНалог("ФФОМС");
			Список.Установить( "ФОМССрокУплаты", Налог.СрокУплаты );

		ИначеЕсли Значение = "ФССКодСтрахователя" Тогда
			Налог = глПолучитьНалог("ФСС");
			Список.Установить( "ФССКодСтрахователя", СокрЛП( Налог.РегНомер ) );

		ИначеЕсли Значение = "ФССНаименованиеОтделения" Тогда
			Налог = глПолучитьНалог("ФСС");
			Список.Установить( "ФССНаименованиеОтделения", СокрЛП( Налог.Получатель.ПолнНаименование ) );

		ИначеЕсли Значение = "ФССАдрес" Тогда
			Налог = глПолучитьНалог("ФСС");
			Список.Установить( "ФССАдрес", СокрЛП( Налог.Получатель.ЮридическийАдрес ) );

		ИначеЕсли Значение = "ФСССрокУплаты" Тогда
			Налог = глПолучитьНалог("ФСС");
			Список.Установить( "ФСССрокУплаты", Налог.СрокУплаты );
			
		ИначеЕсли Значение = "Директор" Тогда
			Результат=Константа.Руководитель.Получить( ДатаЗначения );
			Список.Установить( "Директор", СокрЛП( Результат ) );
			
		ИначеЕсли Значение = "ДатаРождРук" Тогда
			Рук = Константа.Руководитель.Получить( ДатаЗначения );
			Если ПустоеЗначение(Рук) = 0 Тогда
				Результат = Рук.ДатаРождения;
			Иначе
				Результат = "";
			КонецЕсли;
			Список.Установить( "ДатаРождРук", СокрЛП( Результат ) );
			
		ИначеЕсли Значение = "НаимГраждРук" Тогда
			Рук = Константа.Руководитель.Получить( ДатаЗначения );
			Если ПустоеЗначение(Рук) = 0 Тогда
				Результат = Рук.Страна.Наименование;
			Иначе
				Результат = "";
			КонецЕсли;
			Список.Установить( "НаимГраждРук", СокрЛП( Результат ) );
			
		ИначеЕсли Значение = "КодГраждРук" Тогда
			Рук = Константа.Руководитель.Получить( ДатаЗначения );
			Если ПустоеЗначение(Рук) = 0 Тогда
				Результат = Рук.Страна.Код;
			Иначе
				Результат = "";
			КонецЕсли;
			Список.Установить( "КодГраждРук", СокрЛП( Результат ) ); 
			
		ИначеЕсли Значение = "ИННРук" Тогда
			Рук = Константа.Руководитель.Получить( ДатаЗначения );
			Если ПустоеЗначение(Рук) = 0 Тогда
				Результат = Рук.ИНН;
			Иначе
				Результат = "";
			КонецЕсли;
			Список.Установить( "ИННРук", СокрЛП( Результат ) );
			
		ИначеЕсли Значение = "КодУдЛичнРук" Тогда
			Рук = Константа.Руководитель.Получить( ДатаЗначения );
			Результат = "";
			Если ПустоеЗначение(Рук) = 0 Тогда
				Если ПустоеЗначение(Рук.ВидДокумента) = 0 Тогда
				    Результат = Рук.ВидДокумента.КодНДФЛ;
				КонецЕсли;
			КонецЕсли;
			Список.Установить( "КодУдЛичнРук", СокрЛП( Результат ) );
		
		ИначеЕсли Значение = "ОргВыданУдЛичнРук" Тогда
			Рук = Константа.Руководитель.Получить( ДатаЗначения );
			Если ПустоеЗначение(Рук) = 0 Тогда
				Результат = Рук.ДокументКемВыдан;
			Иначе
				Результат = "";
			КонецЕсли;
			Список.Установить( "ОргВыданУдЛичнРук", СокрЛП( Результат ) );
			
		ИначеЕсли Значение = "СерияУдЛичнРук" Тогда
			Рук = Константа.Руководитель.Получить( ДатаЗначения );
			Если ПустоеЗначение(Рук) = 0 Тогда
				Результат = Рук.ДокументСерия;
			Иначе
				Результат = "";
			КонецЕсли;                                               
			Список.Установить( "СерияУдЛичнРук", СокрЛП( Результат ) );
		
		ИначеЕсли Значение = "НомерУдЛичнРук" Тогда
			Рук = Константа.Руководитель.Получить( ДатаЗначения );
			Если ПустоеЗначение(Рук) = 0 Тогда
				Результат = Рук.ДокументНомер;
			Иначе
				Результат = "";
			КонецЕсли;                                               
			Список.Установить( "НомерУдЛичнРук", СокрЛП( Результат ) );
			
		ИначеЕсли Значение = "ДатаУдЛичнРук" Тогда
			Рук = Константа.Руководитель.Получить( ДатаЗначения );
			Если ПустоеЗначение(Рук) = 0 Тогда
				Результат = Рук.ДокументДатаВыдачи;
			Иначе
				Результат = "";
			КонецЕсли;                                               
			Список.Установить( "ДатаУдЛичнРук", СокрЛП( Результат ) );
			
		ИначеЕсли Значение = "АдрМЖРукРФ" Тогда
			Рук = Константа.Руководитель.Получить( ДатаЗначения );
			Если ПустоеЗначение(Рук) = 0 Тогда
				Если ПустоеЗначение(Рук.АдресФакт) = 0 Тогда
					Результат=глПредставлениеАдреса(Рук.АдресФакт);
					
				Иначе
					Результат=глПредставлениеАдреса(Рук.АдресПрописка);
				КонецЕсли;
				
			Иначе
				Результат = "";
			КонецЕсли;                                               
			Список.Установить( "АдрМЖРукРФ", СокрЛП( Результат ) );
			
		ИначеЕсли Значение = "ИндексМЖРук" Тогда 
			Рук = Константа.Руководитель.Получить( ДатаЗначения );
			Если ПустоеЗначение(Рук) = 0 Тогда
				Если ПустоеЗначение(Рук.АдресФакт) = 0 Тогда
					ТекстАдреса=Рук.АдресФакт;
				Иначе
					ТекстАдреса=Рук.АдресПрописка;
				КонецЕсли;
				
			Иначе
				ТекстАдреса = "";
			КонецЕсли;
			
			Если глАдресСоответствуетТребованиямМНС(ТекстАдреса) = 1 Тогда
				АдресСписком = глРазложить(ТекстАдреса);
				Результат = АдресСписком.ПолучитьЗначение(2);
				Список.Установить( "ИндексМЖРук", СокрЛП( Результат ) );
			КонецЕсли;
		
		ИначеЕсли Значение = "СубъектМЖРук" Тогда
			Рук = Константа.Руководитель.Получить( ДатаЗначения );
			Если ПустоеЗначение(Рук) = 0 Тогда
				Если ПустоеЗначение(Рук.АдресФакт) = 0 Тогда
					ТекстАдреса=Рук.АдресФакт;
				Иначе
					ТекстАдреса=Рук.АдресПрописка;
				КонецЕсли;
				
			Иначе
				ТекстАдреса = "";
			КонецЕсли;
			
			Если глАдресСоответствуетТребованиямМНС(ТекстАдреса) = 1 Тогда
				АдресСписком = глРазложить(ТекстАдреса);
				Результат = АдресСписком.ПолучитьЗначение(3);
				Список.Установить( "СубъектМЖРук", СокрЛП( Результат ) );
			КонецЕсли;
		
		ИначеЕсли Значение = "РайонМЖРук" Тогда
			Рук = Константа.Руководитель.Получить( ДатаЗначения );
			Если ПустоеЗначение(Рук) = 0 Тогда
				Если ПустоеЗначение(Рук.АдресФакт) = 0 Тогда
					ТекстАдреса=Рук.АдресФакт;
				Иначе
					ТекстАдреса=Рук.АдресПрописка;
				КонецЕсли;
				
			Иначе
				ТекстАдреса = "";
			КонецЕсли;
			
			Если глАдресСоответствуетТребованиямМНС(ТекстАдреса) = 1 Тогда
				АдресСписком = глРазложить(ТекстАдреса);
				Результат = АдресСписком.ПолучитьЗначение(4);
				Список.Установить( "РайонМЖРук", СокрЛП( Результат ) );
			КонецЕсли;
			
		ИначеЕсли Значение = "ГородМЖРук" Тогда
			Рук = Константа.Руководитель.Получить( ДатаЗначения );
			Если ПустоеЗначение(Рук) = 0 Тогда
				Если ПустоеЗначение(Рук.АдресФакт) = 0 Тогда
					ТекстАдреса=Рук.АдресФакт;
				Иначе
					ТекстАдреса=Рук.АдресПрописка;
				КонецЕсли;
				
			Иначе
				ТекстАдреса = "";
			КонецЕсли;
			
			Если глАдресСоответствуетТребованиямМНС(ТекстАдреса) = 1 Тогда
				АдресСписком = глРазложить(ТекстАдреса);
				Результат = АдресСписком.ПолучитьЗначение(5);
				Список.Установить( "ГородМЖРук", СокрЛП( Результат ) );
			КонецЕсли;
			
		ИначеЕсли Значение = "НПунктМЖРук" Тогда
			Рук = Константа.Руководитель.Получить( ДатаЗначения );
			Если ПустоеЗначение(Рук) = 0 Тогда
				Если ПустоеЗначение(Рук.АдресФакт) = 0 Тогда
					ТекстАдреса=Рук.АдресФакт;
				Иначе
					ТекстАдреса=Рук.АдресПрописка;
				КонецЕсли;
				
			Иначе
				ТекстАдреса = "";
			КонецЕсли;
			
			Если глАдресСоответствуетТребованиямМНС(ТекстАдреса) = 1 Тогда
				АдресСписком = глРазложить(ТекстАдреса);
				Результат = АдресСписком.ПолучитьЗначение(6);
				Список.Установить( "НПунктМЖРук", СокрЛП( Результат ) );
			КонецЕсли;
			
		ИначеЕсли Значение = "УлицаМЖРук" Тогда
			Рук = Константа.Руководитель.Получить( ДатаЗначения );
			Если ПустоеЗначение(Рук) = 0 Тогда
				Если ПустоеЗначение(Рук.АдресФакт) = 0 Тогда
					ТекстАдреса=Рук.АдресФакт;
				Иначе
					ТекстАдреса=Рук.АдресПрописка;
				КонецЕсли;
				
			Иначе
				ТекстАдреса = "";
			КонецЕсли;
			
			Если глАдресСоответствуетТребованиямМНС(ТекстАдреса) = 1 Тогда
				АдресСписком = глРазложить(ТекстАдреса);
				Результат = АдресСписком.ПолучитьЗначение(7);
				Список.Установить( "УлицаМЖРук", СокрЛП( Результат ) );
			КонецЕсли;
			
		ИначеЕсли Значение = "ДомМЖРук" Тогда
			Рук = Константа.Руководитель.Получить( ДатаЗначения );
			Если ПустоеЗначение(Рук) = 0 Тогда
				Если ПустоеЗначение(Рук.АдресФакт) = 0 Тогда
					ТекстАдреса=Рук.АдресФакт;
				Иначе
					ТекстАдреса=Рук.АдресПрописка;
				КонецЕсли;
				
			Иначе
				ТекстАдреса = "";
			КонецЕсли;
			
			Если глАдресСоответствуетТребованиямМНС(ТекстАдреса) = 1 Тогда
				АдресСписком = глРазложить(ТекстАдреса);
				Результат = АдресСписком.ПолучитьЗначение(8);
				Список.Установить( "ДомМЖРук", СокрЛП( Результат ) );
			КонецЕсли;
			
		ИначеЕсли Значение = "КорпусМЖРук" Тогда
			Рук = Константа.Руководитель.Получить( ДатаЗначения );
			Если ПустоеЗначение(Рук) = 0 Тогда
				Если ПустоеЗначение(Рук.АдресФакт) = 0 Тогда
					ТекстАдреса=Рук.АдресФакт;
				Иначе
					ТекстАдреса=Рук.АдресПрописка;
				КонецЕсли;
				
			Иначе
				ТекстАдреса = "";
			КонецЕсли;
			
			Если глАдресСоответствуетТребованиямМНС(ТекстАдреса) = 1 Тогда
				АдресСписком = глРазложить(ТекстАдреса);
				Результат = АдресСписком.ПолучитьЗначение(9);
				Список.Установить( "КорпусМЖРук", СокрЛП( Результат ) );
			КонецЕсли;
			
		ИначеЕсли Значение = "КвартираМЖРук" Тогда
			Рук = Константа.Руководитель.Получить( ДатаЗначения );
			Если ПустоеЗначение(Рук) = 0 Тогда
				Если ПустоеЗначение(Рук.АдресФакт) = 0 Тогда
					ТекстАдреса=Рук.АдресФакт;
				Иначе
					ТекстАдреса=Рук.АдресПрописка;
				КонецЕсли;
				
			Иначе
				ТекстАдреса = "";
			КонецЕсли;
			
			Если глАдресСоответствуетТребованиямМНС(ТекстАдреса) = 1 Тогда
				АдресСписком = глРазложить(ТекстАдреса);
				Результат = АдресСписком.ПолучитьЗначение(10);
				Список.Установить( "КвартираМЖРук", СокрЛП( Результат ) );
			КонецЕсли;                                         
			
		ИначеЕсли Значение = "Бухгалтер" Тогда
			Результат=Константа.ГлБухгалтер.Получить( ДатаЗначения );
			Список.Установить( "Бухгалтер", СокрЛП( Результат ) );

		ИначеЕсли Значение = "ДатаРождБух" Тогда
			Бух = Константа.ГлБухгалтер.Получить( ДатаЗначения );
			Если ПустоеЗначение(Бух) = 0 Тогда
				Результат = Бух.ДатаРождения;
			Иначе
				Результат = "";
			КонецЕсли;
			Список.Установить( "ДатаРождБух", СокрЛП( Результат ) );
			
		ИначеЕсли Значение = "НаимГраждБух" Тогда
			Бух = Константа.ГлБухгалтер.Получить( ДатаЗначения );
			Если ПустоеЗначение(Бух) = 0 Тогда
				Результат = Бух.Страна.Наименование;
			Иначе
				Результат = "";
			КонецЕсли;
			Список.Установить( "НаимГраждБух", СокрЛП( Результат ) );
			
		ИначеЕсли Значение = "КодГраждБух" Тогда
			Бух = Константа.ГлБухгалтер.Получить( ДатаЗначения );
			Если ПустоеЗначение(Бух) = 0 Тогда
				Результат = Бух.Страна.Код;
			Иначе
				Результат = "";
			КонецЕсли;
			Список.Установить( "КодГраждБух", СокрЛП( Результат ) ); 

		ИначеЕсли Значение = "ИННБух" Тогда
			Бух = Константа.ГлБухгалтер.Получить( ДатаЗначения );
			Если ПустоеЗначение(Бух) = 0 Тогда
				Результат = Бух.ИНН;
			Иначе
				Результат = "";
			КонецЕсли;
			Список.Установить( "ИННБух", СокрЛП( Результат ) );
			
		ИначеЕсли Значение = "КодУдЛичнБух" Тогда
			Бух = Константа.ГлБухгалтер.Получить( ДатаЗначения );
			Результат = "";
			Если ПустоеЗначение(Бух) = 0 Тогда
				Если ПустоеЗначение(Бух.ВидДокумента) = 0 Тогда
				    Результат = Бух.ВидДокумента.КодНДФЛ;
				КонецЕсли;
			КонецЕсли;
			Список.Установить( "КодУдЛичнБух", СокрЛП( Результат ) );
		
		ИначеЕсли Значение = "ОргВыданУдЛичнБух" Тогда
			Бух = Константа.ГлБухгалтер.Получить( ДатаЗначения );
			Если ПустоеЗначение(Бух) = 0 Тогда
				Результат = Бух.ДокументКемВыдан;
			Иначе
				Результат = "";
			КонецЕсли;
			Список.Установить( "ОргВыданУдЛичнБух", СокрЛП( Результат ) );
			
		ИначеЕсли Значение = "СерияУдЛичнБух" Тогда
			Бух = Константа.ГлБухгалтер.Получить( ДатаЗначения );
			Если ПустоеЗначение(Бух) = 0 Тогда
				Результат = Бух.ДокументСерия;
			Иначе
				Результат = "";
			КонецЕсли;                                               
			Список.Установить( "СерияУдЛичнБух", СокрЛП( Результат ) );
		
		ИначеЕсли Значение = "НомерУдЛичнБух" Тогда
			Бух = Константа.ГлБухгалтер.Получить( ДатаЗначения );
			Если ПустоеЗначение(Бух) = 0 Тогда
				Результат = Бух.ДокументНомер;
			Иначе
				Результат = "";
			КонецЕсли;                                               
			Список.Установить( "НомерУдЛичнБух", СокрЛП( Результат ) );
			
		ИначеЕсли Значение = "ДатаУдЛичнБух" Тогда
			Бух = Константа.ГлБухгалтер.Получить( ДатаЗначения );
			Если ПустоеЗначение(Бух) = 0 Тогда
				Результат = Бух.ДокументДатаВыдачи;
			Иначе
				Результат = "";
			КонецЕсли;                                               
			Список.Установить( "ДатаУдЛичнБух", СокрЛП( Результат ) );
			
		ИначеЕсли Значение = "АдрМЖБухРФ" Тогда
			Бух = Константа.ГлБухгалтер.Получить( ДатаЗначения );
			Если ПустоеЗначение(Бух) = 0 Тогда
				Если ПустоеЗначение(Бух.АдресФакт) = 0 Тогда
					Результат=глПредставлениеАдреса(Бух.АдресФакт);
					
				Иначе
					Результат=глПредставлениеАдреса(Бух.АдресПрописка);
				КонецЕсли;
				
			Иначе
				Результат = "";
			КонецЕсли;                                               
			Список.Установить( "АдрМЖБухРФ", СокрЛП( Результат ) );
			
		ИначеЕсли Значение = "ИндексМЖБух" Тогда 
			Бух = Константа.ГлБухгалтер.Получить( ДатаЗначения );
			Если ПустоеЗначение(Бух) = 0 Тогда
				Если ПустоеЗначение(Бух.АдресФакт) = 0 Тогда
					ТекстАдреса=Бух.АдресФакт;
				Иначе
					ТекстАдреса=Бух.АдресПрописка;
				КонецЕсли;
				
			Иначе
				ТекстАдреса = "";
			КонецЕсли;
			
			Если глАдресСоответствуетТребованиямМНС(ТекстАдреса) = 1 Тогда
				АдресСписком = глРазложить(ТекстАдреса);
				Результат = АдресСписком.ПолучитьЗначение(2);
				Список.Установить( "ИндексМЖБух", СокрЛП( Результат ) );
			КонецЕсли;
		
		ИначеЕсли Значение = "СубъектМЖБух" Тогда
			Бух = Константа.ГлБухгалтер.Получить( ДатаЗначения );
			Если ПустоеЗначение(Бух) = 0 Тогда
				Если ПустоеЗначение(Бух.АдресФакт) = 0 Тогда
					ТекстАдреса=Бух.АдресФакт;
				Иначе
					ТекстАдреса=Бух.АдресПрописка;
				КонецЕсли;
				
			Иначе
				ТекстАдреса = "";
			КонецЕсли;
			
			Если глАдресСоответствуетТребованиямМНС(ТекстАдреса) = 1 Тогда
				АдресСписком = глРазложить(ТекстАдреса);
				Результат = АдресСписком.ПолучитьЗначение(3);
				Список.Установить( "СубъектМЖБух", СокрЛП( Результат ) );
			КонецЕсли;
		
		ИначеЕсли Значение = "РайонМЖБух" Тогда
			Бух = Константа.ГлБухгалтер.Получить( ДатаЗначения );
			Если ПустоеЗначение(Бух) = 0 Тогда
				Если ПустоеЗначение(Бух.АдресФакт) = 0 Тогда
					ТекстАдреса=Бух.АдресФакт;
				Иначе
					ТекстАдреса=Бух.АдресПрописка;
				КонецЕсли;
				
			Иначе
				ТекстАдреса = "";
			КонецЕсли;
			
			Если глАдресСоответствуетТребованиямМНС(ТекстАдреса) = 1 Тогда
				АдресСписком = глРазложить(ТекстАдреса);
				Результат = АдресСписком.ПолучитьЗначение(4);
				Список.Установить( "РайонМЖБух", СокрЛП( Результат ) );
			КонецЕсли;
			
		ИначеЕсли Значение = "ГородМЖБух" Тогда
			Бух = Константа.ГлБухгалтер.Получить( ДатаЗначения );
			Если ПустоеЗначение(Бух) = 0 Тогда
				Если ПустоеЗначение(Бух.АдресФакт) = 0 Тогда
					ТекстАдреса=Бух.АдресФакт;
				Иначе
					ТекстАдреса=Бух.АдресПрописка;
				КонецЕсли;
				
			Иначе
				ТекстАдреса = "";
			КонецЕсли;
			
			Если глАдресСоответствуетТребованиямМНС(ТекстАдреса) = 1 Тогда
				АдресСписком = глРазложить(ТекстАдреса);
				Результат = АдресСписком.ПолучитьЗначение(5);
				Список.Установить( "ГородМЖБух", СокрЛП( Результат ) );
			КонецЕсли;
			
		ИначеЕсли Значение = "НПунктМЖБух" Тогда
			Бух = Константа.ГлБухгалтер.Получить( ДатаЗначения );
			Если ПустоеЗначение(Бух) = 0 Тогда
				Если ПустоеЗначение(Бух.АдресФакт) = 0 Тогда
					ТекстАдреса=Бух.АдресФакт;
				Иначе
					ТекстАдреса=Бух.АдресПрописка;
				КонецЕсли;
				
			Иначе
				ТекстАдреса = "";
			КонецЕсли;
			
			Если глАдресСоответствуетТребованиямМНС(ТекстАдреса) = 1 Тогда
				АдресСписком = глРазложить(ТекстАдреса);
				Результат = АдресСписком.ПолучитьЗначение(6);
				Список.Установить( "НПунктМЖБух", СокрЛП( Результат ) );
			КонецЕсли;
			
		ИначеЕсли Значение = "УлицаМЖБух" Тогда
			Бух = Константа.ГлБухгалтер.Получить( ДатаЗначения );
			Если ПустоеЗначение(Бух) = 0 Тогда
				Если ПустоеЗначение(Бух.АдресФакт) = 0 Тогда
					ТекстАдреса=Бух.АдресФакт;
				Иначе
					ТекстАдреса=Бух.АдресПрописка;
				КонецЕсли;
				
			Иначе
				ТекстАдреса = "";
			КонецЕсли;
			
			Если глАдресСоответствуетТребованиямМНС(ТекстАдреса) = 1 Тогда
				АдресСписком = глРазложить(ТекстАдреса);
				Результат = АдресСписком.ПолучитьЗначение(7);
				Список.Установить( "УлицаМЖБух", СокрЛП( Результат ) );
			КонецЕсли;
			
		ИначеЕсли Значение = "ДомМЖБух" Тогда
			Бух = Константа.ГлБухгалтер.Получить( ДатаЗначения );
			Если ПустоеЗначение(Бух) = 0 Тогда
				Если ПустоеЗначение(Бух.АдресФакт) = 0 Тогда
					ТекстАдреса=Бух.АдресФакт;
				Иначе
					ТекстАдреса=Бух.АдресПрописка;
				КонецЕсли;
				
			Иначе
				ТекстАдреса = "";
			КонецЕсли;
			
			Если глАдресСоответствуетТребованиямМНС(ТекстАдреса) = 1 Тогда
				АдресСписком = глРазложить(ТекстАдреса);
				Результат = АдресСписком.ПолучитьЗначение(8);
				Список.Установить( "ДомМЖБух", СокрЛП( Результат ) );
			КонецЕсли;
			
		ИначеЕсли Значение = "КорпусМЖБух" Тогда
			Бух = Константа.ГлБухгалтер.Получить( ДатаЗначения );
			Если ПустоеЗначение(Бух) = 0 Тогда
				Если ПустоеЗначение(Бух.АдресФакт) = 0 Тогда
					ТекстАдреса=Бух.АдресФакт;
				Иначе
					ТекстАдреса=Бух.АдресПрописка;
				КонецЕсли;
				
			Иначе
				ТекстАдреса = "";
			КонецЕсли;
			
			Если глАдресСоответствуетТребованиямМНС(ТекстАдреса) = 1 Тогда
				АдресСписком = глРазложить(ТекстАдреса);
				Результат = АдресСписком.ПолучитьЗначение(9);
				Список.Установить( "КорпусМЖБух", СокрЛП( Результат ) );
			КонецЕсли;
			
		ИначеЕсли Значение = "КвартираМЖБух" Тогда
			Бух = Константа.ГлБухгалтер.Получить( ДатаЗначения );
			Если ПустоеЗначение(Бух) = 0 Тогда
				Если ПустоеЗначение(Бух.АдресФакт) = 0 Тогда
					ТекстАдреса=Бух.АдресФакт;
				Иначе
					ТекстАдреса=Бух.АдресПрописка;
				КонецЕсли;
				
			Иначе
				ТекстАдреса = "";
			КонецЕсли;
			
			Если глАдресСоответствуетТребованиямМНС(ТекстАдреса) = 1 Тогда
				АдресСписком = глРазложить(ТекстАдреса);
				Результат = АдресСписком.ПолучитьЗначение(10);
				Список.Установить( "КвартираМЖБух", СокрЛП( Результат ) );
			КонецЕсли;                                         
		
		ИначеЕсли Значение = "Исполнитель" Тогда
			Результат=Константа.Исполнитель.Получить( ДатаЗначения );
			Список.Установить( "Исполнитель", СокрЛП( Результат ) );

		ИначеЕсли Значение = "ТелефонИсполнителя" Тогда
			Результат=Константа.ТелефонИсполнителя;
			Список.Установить( "ТелефонИсполнителя", СокрЛП( Результат ) );

		ИначеЕсли Значение = "СтавкаПФОтФОТ" Тогда
			Ставка= глПолучитьСтавкуНалога("ПФ",ДатаЗначения);
			Список.Установить( "СтавкаПФОтФОТ", Ставка/100 );

		ИначеЕсли Значение = "СтавкаСоцСтрахНСиПЗ" Тогда
			Ставка = глПолучитьСтавкуНалога("ФСС_НС", ДатаЗначения );
			Список.Установить( "СтавкаСоцСтрахНСиПЗ", Ставка/100 );

		ИначеЕсли Значение = "СтавкаДорогиФДФ" Тогда
			Список.Установить( "СтавкаДорогиФДФ", 0 );

		ИначеЕсли Значение = "СтавкаДорогиТДФ" Тогда
			Ставка = глПолучитьСтавкуНалога("Дороги", ДатаЗначения);
			Список.Установить( "СтавкаДорогиТДФ", Ставка/100 );

		ИначеЕсли Значение = "СтавкаИмущество" Тогда
			Ставка = глПолучитьСтавкуНалога("Имущество", ДатаЗначения);
			Список.Установить( "СтавкаИмущество", Ставка/100 );

		ИначеЕсли Значение = "СтавкаПрибФед" Тогда
			Ставка = глПолучитьСтавкуНалога("ПрибФед", ДатаЗначения);
			Список.Установить( "СтавкаПрибФед", Ставка/100 );

		ИначеЕсли Значение = "СтавкаПрибРесп" Тогда
			Ставка = глПолучитьСтавкуНалога("ПрибРесп", ДатаЗначения);
			Список.Установить( "СтавкаПрибРесп", Ставка/100 );

		ИначеЕсли Значение = "СтавкаПрибМест" Тогда
			Ставка = глПолучитьСтавкуНалога("ПрибМест", ДатаЗначения);
			Список.Установить( "СтавкаПрибМест", Ставка/100 );

		ИначеЕсли Значение = "СтавкаОбразование" Тогда
			Ставка = глПолучитьСтавкуНалога("Образ", ДатаЗначения);
			Список.Установить( "СтавкаОбразование", Ставка/100 );

		ИначеЕсли Значение = "СтавкаРефЦБ" Тогда
			Результат=Константа.СтавкаРефинансирования.Получить( ДатаЗначения );
			Список.Установить( "СтавкаРефЦБ", Результат/100 );

		ИначеЕсли Значение = "УчетнаяПолитика" Тогда
			УчетнаяПолитика=Константа.МетодОпределенияВыручки.Получить( ДатаЗначения );
			Результат = ?( УчетнаяПолитика=глПоОтгрузке, 1, 2 );
			Список.Установить( "УчетнаяПолитика", Результат  );
			
		ИначеЕсли Значение = "ИспользоватьРегрессивнуюШкалуЕСН" Тогда
			РШ=Константа.ИспользоватьРегрессивнуюШкалу.Получить( ДатаЗначения );
			Результат = ?(РШ = Да, 1, 0);
			Список.Установить( "ИспользоватьРегрессивнуюШкалуЕСН", Результат );
			
		ИначеЕсли Значение = "ИспользоватьРегрессивнуюШкалуПФР" Тогда
            РШ=Константа.ИспользоватьРегрессивнуюШкалуПФР.Получить( ДатаЗначения );
            Результат = ?(РШ = Да, 1, 0);
            Список.Установить( "ИспользоватьРегрессивнуюШкалуПФР", Результат );
			
		ИначеЕсли Значение = "ГНИКод" Тогда
			Список.Установить( "ГНИКод", Константа.КодИМНС );
			
		ИначеЕсли Значение = "ИННДиректор" Тогда
			Результат = Константа.Руководитель.Получить( ДатаЗначения ).ИНН;
			Список.Установить( "ИННДиректор", Результат );
			
		ИначеЕсли Значение = "ИННБухгалтер" Тогда
			Результат = Константа.ГлБухгалтер.Получить( ДатаЗначения ).ИНН;
			Список.Установить( "ИННБухгалтер", Результат );
			
		ИначеЕсли Значение = "ИнвОрг" Тогда
			ИнОрг = Константа.ИнвалиднаяОрганизация.Получить( ДатаЗначения );
			Результат = ?(ИнОрг = Да, 1, 0);
			Список.Установить( "ИнвОрг", Результат );
			
		ИначеЕсли Значение = "СвидСН" Тогда
			Результат = Константа.СвидетельствоСерияНомер;
			Список.Установить( "СвидСН", СокрЛП( Результат ) );
			
		ИначеЕсли Значение = "СвидДВ" Тогда
			Результат = Константа.СвидетельствоДатаВыдачи;
			Список.Установить( "СвидДВ", СокрЛП( Результат ) );
		
		ИначеЕсли Значение = "СвидИМНС" Тогда
			Результат = Константа.СвидетельствоНаименованиеИМНС;
			Список.Установить( "СвидИМНС", СокрЛП( Результат ) );
		
		ИначеЕсли Значение = "СвидИМНСК" Тогда
			Результат = Константа.СвидетельствоКодИМНС;
			Список.Установить( "СвидИМНСК", СокрЛП( Результат ) );
			
		ИначеЕсли Значение = "КодИФНСПолучателя" Тогда
			Результат = Константа.КодИФНСПолучателя;
			Список.Установить( "КодИФНСПолучателя", СокрЛП( Результат ) );
			
		Иначе
			Список.Установить( Значение, "" );
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры //глПолучитьДанные

///////////////////////////////////////////////////////////////////////////
//*****************************************************************************
// УстановитьПрефиксыИБ( <Флаг> )
//
// Параметры:
//  <Флаг> - 	число 
//				0 - если префиксы ИБ используются
//				1 - если не используются
//
// Возвращаемое значение.
//  Нет
//
// Описание:
// Процедура предназначена для установки используемых при автонумерации 
// префиксов номеров документов и кодов справочников для поддержки их 
// уникальности в случае работы с распределенными ИБ
//
// Перечни видов документов и справочников не имеющих префиксов номеров
// помещены в переменных СпрБезПрефиксаИБ и ДокБезПрефиксаИБ
//
Процедура УстановитьПрефиксыИБ()
	Если ПустаяСтрока(ТекущаяИБКод())=1 Тогда 
		Возврат; //Работа не в распределенной ИБ
	КонецЕсли;

	//Список видов документов и справочников, для которых не используются префиксы ИБ
	//при работе в распределенной информационнй базе
	ДокБезПрефиксаИБ = ",СчетФактура,";
	СпрБезПрефиксаИБ = ",Валюты,ВидыДеятельности,ЕдиницыИзмерений,КлассификаторЕН,НалогиИОтчисления,ОсновныеСредства,НематериальныеАктивы,Сотрудники,Подразделения,";
	            
	Префикс = "";
	Если Константа.НеПрименятьПрефиксыИБ=0 Тогда
		Префикс = СокрЛ(ВРег(Константа.ПрефиксИБ));
		Если ПустаяСтрока(Префикс)=1 Тогда
		    Сообщить("В распределенной информационной базе следует установить префикс ИБ!");
		КонецЕсли;
	КонецЕсли;                             
	
	Для Сч=1 По Метаданные.Документ() Цикл
		ИдентДок = Метаданные.Документ(Сч).Идентификатор;
		Если (Метаданные.Документ(Сч).ТипНомера="Текстовый")И
		     (Найти(ДокБезПрефиксаИБ, ","+ИдентДок+",")=0) Тогда
			ПрефиксАвтоНумерации("Документ."+ИдентДок, Префикс);
		КонецЕсли;
	КонецЦикла;
	Для Сч=1 По Метаданные.Справочник() Цикл
		ИдентСпр = Метаданные.Справочник(Сч).Идентификатор;
		Если (Метаданные.Справочник(Сч).ТипКода="Текстовый") И 
			 (Найти(СпрБезПрефиксаИБ, ","+ИдентСпр+",")=0) Тогда
			ПрефиксАвтоНумерации("Справочник."+ИдентСпр, Префикс);
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры	// УстановитьПрефиксыИБ

//*****************************************************************************
// глПреобразоватьНомерДок( <НомерДок>, <ВыводитьНули> ,<ВыводитьПрефикс> ) Экспорт
//
// Параметры:
//  <НомерДок> - значение типа Строка - номер документа 
//  <ВыводитьНули> 
//     	 	   - число 
//				0 - не выводить лидирующие нули
//				1 - выводить лидирующие нули
//  <ВыводитьПрефикс> 
//     	 	   - число 
//				0 - не выводить префикс
//				1 - выводить префикс
//				2 - выводить префикс сзади
//
// Возвращаемое значение.
//  Строка - номер документа для печати
//
// Описание:
// Процедура предназначена для преобразования номера документа.
// Используется, например, при выводе номера документа на печать.
//
Функция глПреобразоватьНомерДок(НомерДок,ВыводитьНули=0,ВыводитьПрефикс=0) Экспорт

	НовыйНомерДок=НомерДок;
	Префикс=Лев(НовыйНомерДок,1);
	
	Если ПустаяСтрока(ТекущаяИБКод())=1 Тогда
	    Префикс=""; //Работа не в распределенной ИБ
	ИначеЕсли (Префикс>="0") И (Префикс<="9") Тогда
	    Префикс=""; //Не использовался буквенный префикс
	Иначе
		НовыйНомерДок=Сред(НовыйНомерДок,2);  //Выделение префикса
	КонецЕсли;        
	
	Если ВыводитьНули=0 Тогда  //Отсекание лидирующих нулей
		Для Сч=1 По СтрДлина(НовыйНомерДок)-1 Цикл
			Если Лев(НовыйНомерДок,1)="0" Тогда
				НовыйНомерДок=Сред(НовыйНомерДок,2);
			КонецЕсли;
		КонецЦикла;								
	КонецЕсли;
	
	Если (ВыводитьПрефикс=0) ИЛИ (ПустаяСтрока(Префикс)=1) Тогда
		Возврат НовыйНомерДок;  
	ИначеЕсли ВыводитьПрефикс=1 Тогда	
		Возврат Префикс+НовыйНомерДок;  
	ИначеЕсли ВыводитьПрефикс=2 Тогда	
		Возврат НовыйНомерДок+"/"+Префикс;  
	КонецЕсли;
	
	Возврат НомерДок; 
КонецФункции	// глПреобразоватьНомерДок

//_____________________________________________________________________________
Процедура глПроверкаРазрешенияРедактирования(Конт) Экспорт
	Если Конт.Выбран() = 1 Тогда
		Если (Конт.ДатаДок <= Константа.ДатаЗапретаРедактирования) и (Конт.Форма.ТолькоПросмотр() = 0) Тогда
			Конт.Форма.ТолькоПросмотр(1);
			Предупреждение("Разрешен только просмотр документа!", 4);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

//_____________________________________________________________________________
Функция глМожноЗаписатьДокумент(Конт) Экспорт
	Если Конт.ДатаДок <= Константа.ДатаЗапретаРедактирования Тогда
		Предупреждение("Нельзя записывать документы с датой, более ранней, чем дата запрета редактирования документов!");
		Возврат 0;
	Иначе
		Если Конт.ЮрЛицо.Выбран() = 0 Тогда //NDline
			Предупреждение("Не выбрано юр. лицо!");
			Возврат 0;
		КонецЕсли; //NDline
		Возврат 1;
	КонецЕсли;
КонецФункции

//_____________________________________________________________________________
Процедура ПриУдаленииДокумента(Докум, Режим)
	Если Докум.ДатаДок <= Константа.ДатаЗапретаРедактирования Тогда
		СтатусВозврата(0);
		Если Докум.ПометкаУдаления() = 0 Тогда
			Предупреждение("Нельзя удалять документы с датой, более ранней, чем дата запрета редактирования документов!");
		Иначе
			Предупреждение("Нельзя отменять удаление документов с датой, более ранней, чем дата запрета редактирования документов!");
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры
//_____________________________________________________________________________
Процедура ПриОтменеПроведенияДокумента(Докум)
	Если Докум.ДатаДок <= Константа.ДатаЗапретаРедактирования Тогда
		Предупреждение("Нельзя отменять проведение документов с датой, более ранней, чем дата запрета редактирования документов!");
		СтатусВозврата(0);
		Возврат;
	КонецЕсли;
КонецПроцедуры
//_____________________________________________________________________________
Процедура ПриВыклВклПроводокОперации(Докум)
	Если Докум.ДатаДок <= Константа.ДатаЗапретаРедактирования Тогда
		СтатусВозврата(0);
		Если Докум.Операция.ВключитьПроводки() = 0 Тогда
			Предупреждение("Нельзя включить проводки документов с датой, более ранней, чем дата запрета редактирования документов!");
		Иначе
			Предупреждение("Нельзя выключить проводки документов с датой, более ранней, чем дата запрета редактирования документов!");
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ФУНКЦИИ ИНТЕРНЕТ-ПОДДЕРЖКИ
//

//******************************************************************************
// Редактировать содержимое функции глНомерРелиза() запрещено!!!
//
Функция глНомерРелиза () Экспорт
	
    Возврат Константа.НомерРелиза;
	
КонецФункции // глНомерРелиза()

//******************************************************************************
// Редактировать содержимое функции глИдентификаторКонфигурации() запрещено!!!
//
Функция глИдентификаторКонфигурации() Экспорт
	
    Возврат "BU42TK";
	
КонецФункции // глИдентификаторКонфигурации()

//******************************************************************************
// Определение каталога, содержащего внешнюю обработку ИнформационныйБлок.
// Если каталога нет, то возвращается пустая строка
//
Функция глКаталогОбработкиИнформационныйБлок() Экспорт 
	Перем Размер,Атр,ВС,ВД,ВЗ,Расш;
	
	СписокКаталогов = СоздатьОбъект("СписокЗначений");

	ТекКаталог = ФС.ТекКаталог(); 
	КаталогРегОтчетов = КаталогИБ()+"ExtForms";
	ФС.УстТекКаталог(КаталогРегОтчетов); 
	// Просмотр внешних обработок
	Файл = ФС.НайтиПервыйФайл("Rp????.grp");
	Пока ПустаяСтрока(Файл) = 0 Цикл              
		Если (Файл <> "..") И (Файл <> ".") Тогда 
			ФГ=СоздатьОбъект("ФС");
			ФГ.АтрибутыФайла(Файл, Размер, Атр, ВС, ВД, ВЗ, Расш);
			Если Сред(Атр,4,1)<>"1" Тогда
				// ищем только каталоги
				Продолжить;
			КонецЕсли;
			СписокКаталогов.ДобавитьЗначение(КаталогРегОтчетов+"\"+Файл,);
		КонецЕсли;
		Файл = ФС.НайтиСледующийФайл();
	КонецЦикла;
	
	ФС.УстТекКаталог(ТекКаталог);
	
	Если СписокКаталогов.РазмерСписка()>0 Тогда
		СписокКаталогов.Сортировать(1);
		Возврат СписокКаталогов.ПолучитьЗначение(1);
	Иначе
    	Возврат "";
	КонецЕсли;

КонецФункции // глКаталогОбработкиИнформационныйБлок()

//******************************************************************************
// Показ обработки ИнформационныйБлок
//
Процедура глПоказИнформационногоБлока(Режим="Интерактивный", НомерСтраницы=0) Экспорт
	ОткрыватьИнформационныйБлок = 2;
	Если Режим<>"Интерактивный" Тогда
		// вызов при начале работы системы
		ОткрыватьИнформационныйБлок = ВосстановитьЗначение("НеобходимостьОткрытияИнформационныйБлок");
		ОткрыватьИнформационныйБлок = ?(ПустоеЗначение(ОткрыватьИнформационныйБлок)=1,2, ОткрыватьИнформационныйБлок);
		ДатаОткрытияИнформационныйБлок = ВосстановитьЗначение("ДатаОткрытияИнформационныйБлок");
		ДатаОткрытияИнформационныйБлок = ?(ПустоеЗначение(ДатаОткрытияИнформационныйБлок)=1,'01.01.1980', Дата(ДатаОткрытияИнформационныйБлок));
		ДеньМесяца = ДатаЧисло(РабочаяДата());
		
		
		Если ((ДеньМесяца=1) или (ДеньМесяца=15)) и (РабочаяДата() <> ДатаОткрытияИнформационныйБлок) Тогда
			// если пользователь отключает показ, то каждые 1 и 15 числа месяца показ включается
			ОткрыватьИнформационныйБлок = 2;
			СохранитьЗначение("НеобходимостьОткрытияИнформационныйБлок", ОткрыватьИнформационныйБлок);
		КонецЕсли;
	КонецЕсли;
	
	Если ОткрыватьИнформационныйБлок=2 Тогда
		КаталогИБлока = глКаталогОбработкиИнформационныйБлок();
		Если ПустаяСтрока(КаталогИБлока)=0 Тогда
			
			Если (ФС.СуществуетФайл(КаталогИБлока+"\Reklama.ert")=1) И (ФС.СуществуетФайл(КаталогИБлока+"\InfoBlck.ert")=1) Тогда
				Если НомерСтраницы=0 Тогда
					ОткрытьФорму("Обработка",,КаталогИБлока + "\Reklama.ert"); 
                Иначе
					ОткрытьФорму("Обработка",НомерСтраницы,КаталогИБлока + "\Reklama.ert"); 
				КонецЕсли;
			Иначе
				Если НомерСтраницы=0 Тогда
					ОткрытьФорму("Обработка.ИнформационныйБлок");
                Иначе
					ОткрытьФорму("Обработка.ИнформационныйБлок",НомерСтраницы);
				КонецЕсли;
			КонецЕсли;
			
		Иначе
			Если НомерСтраницы=0 Тогда
				ОткрытьФорму("Обработка.ИнформационныйБлок");
			Иначе
				ОткрытьФорму("Обработка.ИнформационныйБлок", НомерСтраницы);
			КонецЕсли;
		КонецЕсли;
		СохранитьЗначение("ДатаОткрытияИнформационныйБлок",Строка(РабочаяДата()));
	КонецЕсли;
		
КонецПроцедуры // глПоказИнформационногоБлока
//******************************************************************************

////////////////////////////////////////////////////////////////////////////////
// ПРЕДОПРЕДЕЛЕННЫЕ ПРОЦЕДУРЫ
//

//******************************************************************************
// Предопределенная процедура
//
Процедура ПриНачалеРаботыСистемы()
	
	ЭтоПервыйЗапуск = 0;
	Если ПустоеЗначение(Константа.НомерРелиза) = 1 Тогда
		ЭтоПервыйЗапуск = 1;
		Док = СоздатьОбъект("Документ");
		Если Док.ВыбратьДокументы() = 1 Тогда
			ЭтоПервыйЗапуск = 0;
		КонецЕсли;
		Если ЭтоПервыйЗапуск = 1 Тогда
			ПоставляемыеСправочники = ",КлассификаторЕН,";
			Индекс = 1;
			КоличествоСправочников = Метаданные.Справочник();
			Пока (ЭтоПервыйЗапуск = 1) и (Индекс <= КоличествоСправочников) Цикл
				ВидСпр = Метаданные.Справочник(Индекс).Идентификатор;
				Если Найти(ПоставляемыеСправочники, ","+ВидСпр+",") = 0 Тогда
					Спр = СоздатьОбъект("Справочник."+ВидСпр);
					Если Спр.ВыбратьЭлементы(0) = 1 Тогда
						ЭтоПервыйЗапуск = 0;
					КонецЕсли;
				КонецЕсли;
				Индекс = Индекс+1;
			КонецЦикла;
		КонецЕсли;

		Если ЭтоПервыйЗапуск = 1 Тогда
	   		Константа.НомерРелиза = Лев(Метаданные.Комментарий, 8);
			ОткрытьФормуМодально("Обработка.ПервыйЗапуск", 1);
		Иначе
			Константа.НомерРелиза = "7.70.001";
		КонецЕсли;
	КонецЕсли;
	
	Если ПроверитьЛегальностьПолученияОбновления() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ПервыйЗапускНаРабочемМесте = ВосстановитьЗначение("ПервыйЗапускНаРабочемМесте");
	Если ПустоеЗначение(ПервыйЗапускНаРабочемМесте) = 1 Тогда
		СохранитьЗначение("ОсновнаяВалюта", Константа.ОсновнаяВалюта);
		СохранитьЗначение("ОсновнойСклад", Константа.ОсновнойСклад);
		СохранитьЗначение("ОсновнойБанковскийСчет", Константа.ОсновнойБанковскийСчет);
		СохранитьЗначение("ОсновноеПодразделение", Константа.ОсновноеПодразделение);
		СохранитьЗначение("ОсновнаяСтавкаНДС", Константа.ОсновнаяСтавкаНДС);
		СохранитьЗначение("ОсновнаяСтавкаНП", Константа.ОсновнаяСтавкаНП);
		СохранитьЗначение("ОсновнаяЕдиницаИзмерения", Константа.ОсновнаяЕдиницаИзмерения);
		СохранитьЗначение("ПоказПутеводителяПриЗапуске", 1);	
		СохранитьЗначение("ПервыйЗапускНаРабочемМесте", 1);
		
		РазворотСубконто = СоздатьОбъект("ТаблицаЗначений");
		РазворотСубконто.НоваяКолонка("Счет",,,, "Счет", 16);
		РазворотСубконто.НоваяКолонка("Субсчета",,,, "Субсчета", 9);
		РазворотСубконто.НоваяКолонка("Субконто",,,, "Субконто", 9);
		РазворотСубконто.НоваяКолонка("Список");
		
		РазворотСубконто.НоваяСтрока();
		РазворотСубконто.Счет = СчетПоКоду(51);
		РазворотСубконто.Субсчета = "-";
		РазворотСубконто.Субконто = "Х";
		РазворотСубконто.Список = СоздатьОбъект("СписокЗначений");
		РазворотСубконто.Список.ДобавитьЗначение(ВидыСубконто.БанковскиеСчета);
		РазворотСубконто.Список.Пометка(1, 1);
		СохранитьЗначение("ОСВРазворотСубконто", РазворотСубконто);
		СохранитьЗначение("ОСВДанныеПоСубсчетам", 1);
		СохранитьЗначение("ОСВЗабалансовыеСчета", 1);
	КонецЕсли;

	//Для работы с компонентой "Управление распределенными информационными базами"
	УстановитьПрефиксыИБ();
	
	// Интернет-поддержка
	// Проверка необходимости получения курсов валют
	Если Найти(",BUTK,BU42TK,BUBK,BUOURCLK,BUOUSL,BUPSB25,OUTK,OUMNPV,OUBV,PBOUL,",","+глИдентификаторКонфигурации()+",")>0 Тогда 
       ПроверкаКурсов=ВосстановитьЗначение("ДатаСкачиванияКурсовВалют");
       ПроверкаКурсов=?(ПустоеЗначение(ПроверкаКурсов)=1,'01.01.00',ПроверкаКурсов);
       ВалАвтоПолучать=ВосстановитьЗначение("ВалАвтоПолучать");
       ВалАвтоПолучать=?(ПустоеЗначение(ВалАвтоПолучать)=1,0,ВалАвтоПолучать);
       Если (ВалАвтоПолучать=2)И(ПроверкаКурсов<ТекущаяДата()) Тогда 
           Парам=СоздатьОбъект("СписокЗначений");
           Парам.ДобавитьЗначение(1,"Автоматически");
           ОткрытьФорму("Обработка.ИППКурсыВалютРБК",Парам); 
       КонецЕсли;
	КонецЕсли;
	// Получить автоматически сведения о наличии обновлений (если установлены соотв. флажки)
    // Номер релиза и идентификатор конфигурации уже должны быть установлены
	ПроверятьНовости=ВосстановитьЗначение("НовостиПроверять");
	Если ПроверятьНовости=2 Тогда 
       Включение = ВосстановитьЗначение("НовостиВключение");
       ДеньВключения = ВосстановитьЗначение("НовостиДеньВключения");
       ДеньВключения=?(ПустоеЗначение(ДеньВключения)=1,ТекущаяДата(),ДеньВключения);
       НДней = ВосстановитьЗначение("НовостиНДней");
       Если Включение=2 Тогда
           ОткрытьФорму("Обработка.ИПППроверкаОбновлений");
			 
       ИначеЕсли ТекущаяДата()>=ДеньВключения Тогда 
           ДеньВключения = ТекущаяДата()+НДней;
           СохранитьЗначение( "НовостиДеньВключения",ДеньВключения);
           ОткрытьФорму("Обработка.ИПППроверкаОбновлений");
       КонецЕсли;
	КонецЕсли;
    // Для раздела ИПП "Календарь бухгалтера"
	// Проверка календарей (бухгалтера и др.)
	Если Найти(",BUTK,BU42TK,BUBK,BUOURCLK,BUOUSL,BUPSB25,OUMNPV,OUBV,OUTK,PBOUL,NLGPL,",","+глИдентификаторКонфигурации()+",")>0 Тогда  
	    ПроверятьКалендари = ВосстановитьЗначение("КалендарьПроверка");
	    Если ПроверятьКалендари=2 Тогда 
	        ОткрытьФорму("Отчет.ИППКалендарь",1); // запуск в режиме "проверка"
	    КонецЕсли;
	КонецЕсли;

	// Подключение торгового оборудования
	ОткрытьФормуМодально("Обработка.ТорговоеОборудование", "Подключить");

	Если ЭтоПервыйЗапуск = 1 Тогда
		ОткрытьФорму("Обработка.Путеводитель", "ПервыйЗапуск");
	ИначеЕсли ВосстановитьЗначение("ПоказПутеводителяПриЗапуске") = 1 Тогда
		ОткрытьФорму("Обработка.Путеводитель");
	КонецЕсли;
                                 
	Если Константа.НомерРелиза <> Лев(Метаданные.Комментарий, 8) Тогда
		ОткрытьФорму("Обработка.ОбновлениеИБ");
	КонецЕсли;
	
	ЗаголовокСистемы(СокрЛП(Константа.НазваниеОрганизации)); 
	
	//Проверка, перед обновлением производился переход на 1С:Бухгалтерию 8 или нет
	ПереходНа1СБухгалтерию8 = 0;
	Если  (ПустоеЗначение(ВосстановитьЗначение("НомерРелизаДоОбновления")) = 0) и (глНомерРелиза() <> ВосстановитьЗначение("НомерРелизаДоОбновления")) Тогда
		Если глНомерРелиза() <> ВосстановитьЗначение("НомерРелизаДоОбновления") Тогда
			ПереходНа1СБухгалтерию8 = 1;
		КонецЕсли;
	КонецЕсли;
	
	// Информирование пользователей.
	СписокПараметров = СоздатьОбъект("СписокЗначений");
	НомерРелизаПользователя = ВосстановитьЗначение("НомерРелизаПользователя");
	НомерРелизаИБ = Константа.НомерРелиза;
	ОбновитьДополнительнуюИнформацию = 0;
	
	Если ПустоеЗначение(НомерРелизаПользователя) = 1 Тогда
		ОбновитьДополнительнуюИнформацию = 1;
		
	ИначеЕсли НомерРелизаПользователя <> НомерРелизаИБ Тогда
		ОбновитьДополнительнуюИнформацию = 1;
	КонецЕсли;
	
	Если ОбновитьДополнительнуюИнформацию = 1 Тогда
		СписокПараметров.Установить("Режим", "Добавить");
		ОткрытьФорму("Обработка.ИППДополнительнаяИнформация", СписокПараметров);
		СохранитьЗначение("НомерРелизаПользователя", НомерРелизаИБ);
	КонецЕсли;
	
	Если ПереходНа1СБухгалтерию8 = 0 Тогда
		//******************************************************************************
		ОткрытьИнформационныйБлок = ВосстановитьЗначение("НеобходимостьОткрытияИнформационныйБлок");
		ОткрытьИнформационныйБлок = ?(ПустоеЗначение(ОткрытьИнформационныйБлок)=1,2, ОткрытьИнформационныйБлок);
		ДатаОткрытияИнформационныйБлок = ВосстановитьЗначение("ДатаОткрытияИнформационныйБлок");
		ДатаОткрытияИнформационныйБлок = ?(ПустоеЗначение(ДатаОткрытияИнформационныйБлок)=1,'01.01.1980', Дата(ДатаОткрытияИнформационныйБлок));
		ДеньМесяца = ДатаЧисло(РабочаяДата());

		глПоказИнформационногоБлока("ПриНачалеРаботыСистемы");
		//******************************************************************************
		
		СписокПараметров = СоздатьОбъект("СписокЗначений");
		СписокПараметров.Установить("Режим", "Открыть");
		ОткрытьФорму("Обработка.ИППДополнительнаяИнформация", СписокПараметров);
	Иначе
		ОткрытьФорму("Обработка.ПомощникПереходаНа1CБухгалтерию8");
	КонецЕсли;
	НачалоСтандартногоИнтервала(НачМесяца(РабочаяДата())); //NDline
	КонецСтандартногоИнтервала(КонМесяца(РабочаяДата())); //NDline
КонецПроцедуры // ПриНачалеРаботыСистемы()

//_____________________________________________________________________________
Процедура ПриЗаписиКонстанты(ИмяКонстанты, Значение)
	Если ИмяКонстанты = "НомерРелиза" Тогда
		Предупреждение("Константа ""Номер релиза"" является служебной и
						|не может быть изменена вручную.");
		СтатусВозврата(0);
		
	ИначеЕсли ИмяКонстанты = "КодОКОНХ" Тогда
		глПроверкаСтавкиФСС_НС();

	ИначеЕсли ИмяКонстанты = "ОткрыватьЖурналПриВводеДокумента" Тогда
		Если ПустоеЗначение(Значение) = 1  Тогда
		    Значение = Да;
		КонецЕсли;
	
	ИначеЕсли ИмяКонстанты = "ВалютныйУчет" Тогда
		Если ПустоеЗначение(Значение) = 1  Тогда
		    Значение = Нет;
		КонецЕсли;

	ИначеЕсли ИмяКонстанты = "ПересчитыватьПокупнуюЦену" Тогда
		Если ПустоеЗначение(Значение) = 1  Тогда
		    Значение = Нет;
		КонецЕсли;

	ИначеЕсли ИмяКонстанты = "ОсновнойВариантОтпускнойЦены" Тогда
		Если ПустоеЗначение(Значение) = 1  Тогда
		    Значение = Перечисление.ВариантыОтпускныхЦен.БезНалогов;
		КонецЕсли;

	ИначеЕсли ИмяКонстанты = "ОрганизацияЯвляетсяПлательщикомЕНВД" Тогда
		Если Вопрос("Для изменения константы ""Организация является плательщиком ЕНВД""
						|рекомендуется использовать обработку ""Сведения об организации""
						|(меню ""Сервис"", пункт ""Сведения об организации"").
						|Отказаться от принятия изменений?", "Да+Нет") = "Да" Тогда
			СтатусВозврата(0);
		КонецЕсли;
		Если ПустоеЗначение(Значение) = 1  Тогда
		    Значение = Нет;
		КонецЕсли;

	ИначеЕсли ИмяКонстанты = "ОрганизацияЯвляетсяПлательщикомНДС" Тогда
		Если ПустоеЗначение(Значение) = 1  Тогда
		    Значение = Да;
		КонецЕсли;

	ИначеЕсли ИмяКонстанты = "УчетЗарплатыВоВнешнейПрограмме" Тогда
		Если ПустоеЗначение(Значение) = 1  Тогда
		    Значение = Нет;
		КонецЕсли;

		//Для работы с компонентой "Управление распределенными информационными базами"
	ИначеЕсли (ИмяКонстанты = "ПрефиксИБ") Тогда
		Если (Значение>="0") И (Значение<="9")Тогда
			Предупреждение("Префикс ИБ должен быть буквенным!");
			СтатусВозврата(0);
			Возврат;		    
		КонецЕсли;
        Если ПустаяСтрока(ТекущаяИБКод())=1 Тогда
			Предупреждение("Данная константа используется только для распределенной ИБ");
			СтатусВозврата(0);
		Иначе	
			Предупреждение("После изменения данной константы следует перезапустить 1С:Предприятие");
        КонецЕсли;
	
	ИначеЕсли (ИмяКонстанты = "НеПрименятьПрефиксыИБ") Тогда
        Если ПустаяСтрока(ТекущаяИБКод())=1 Тогда
			Предупреждение("Данная константа используется только для распределенной ИБ");
			СтатусВозврата(0);
		Иначе	
			Предупреждение("После изменения данной константы следует перезапустить 1С:Предприятие");
		КонецЕсли;
		
	ИначеЕсли ИмяКонстанты = "КонтрольОтрицательныхОстатков" Тогда
		Если ПустоеЗначение(Значение) = 1  Тогда
		    Значение = Да;
		КонецЕсли;
		
	ИначеЕсли ИмяКонстанты = "ИспользоватьТипыЦен" Тогда
		Если ПустоеЗначение(Значение) = 1  Тогда
		    Значение = Да;
		КонецЕсли;
		ОткрытьФормуМодально("Обработка.ИзменениеКонстантыИспользоватьТипыЦен", Значение);
		
	ИначеЕсли ИмяКонстанты = "НазваниеОрганизации" Тогда
		Если (ПустаяСтрока(Константа.ОфициальноеНазваниеОрганизации) = 1) и
			 (ПустаяСтрока(Константа.НаименованиеПлательщикаПриПеречисленииНалогов) = 1) Тогда
			 	
			Константа.ОфициальноеНазваниеОрганизации = Значение;
			Константа.НаименованиеПлательщикаПриПеречисленииНалогов = Значение;
			
		ИначеЕсли Вопрос("Изменить полное название организации и наименование плательщика
						 |в платежных поручениях на перечисление налогов?", "Да+Нет") = "Да" Тогда
						 	
			Константа.ОфициальноеНазваниеОрганизации = Значение;
			Константа.НаименованиеПлательщикаПриПеречисленииНалогов = Значение;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры //ПриЗаписиКонстанты

//******************************************************************************
// Предопределенная процедура
//
Процедура ПриЗаписиИстории(ТипОбъекта, Объект, Значение, ДатаИстории)
	
	Если ТипОбъекта = "Константа.ИнвалиднаяОрганизация" Тогда
		Если ПустоеЗначение(Значение) = 1 Тогда
		    Значение = Нет;
		КонецЕсли;
		
	ИначеЕсли ТипОбъекта = "Константа.МетодОпределенияВыручки" Тогда
		Если ПустоеЗначение(Значение) = 1 Тогда
		    Значение = глПоОтгрузке;
		КонецЕсли;
	
	ИначеЕсли ТипОбъекта = "Константа.РозницаОблагаетсяЕНВД" Тогда
		Если Вопрос("Для изменения константы ""Розничная торговля облагается ЕНВД""
						|рекомендуется использовать обработку ""Сведения об организации""
						|(меню ""Сервис"", пункт ""Сведения об организации"").
						|Отказаться от принятия изменений?", "Да+Нет") = "Да" Тогда
			СтатусВозврата(0);
		КонецЕсли;
		Если (ПустоеЗначение(Значение) = 1) Тогда
		    Значение = Нет;
		КонецЕсли;
						
	ИначеЕсли ТипОбъекта = "Константа.ДиректКостинг" Тогда
		Если ПустоеЗначение(Значение) = 1 Тогда
		    Значение = Нет;
		КонецЕсли;

	ИначеЕсли ТипОбъекта = "Константа.ДиректКостингБазаРаспределения" Тогда
		Если ПустоеЗначение(Значение) = 1 Тогда
		    Значение = Перечисление.ДиректКостингБазаРаспределения.ВыручкаОтПродаж;
		КонецЕсли;

	ИначеЕсли ТипОбъекта = "Константа.ДиректКостингВидыПродукции" Тогда
		Если ПустоеЗначение(Значение) = 1 Тогда
		    Значение = Перечисление.ДиректКостингВидыПродукции.ПоВсемВидамНоменклатуры;
		КонецЕсли;
		
	ИначеЕсли ТипОбъекта = "Константа.БазаРаспределенияПрямыхРасходов" Тогда
		Если ПустоеЗначение(Значение) = 1  Тогда
		    Значение = Перечисление.БазаРаспределенияПрямыхРасходов.СуммаПрямыхЗатрат;
		КонецЕсли;
		
	ИначеЕсли ТипОбъекта = "Константа.СчетаПереоцениваемыеВОсобомПорядке" Тогда
		Предупреждение("Константа ""Счета, переоцениваемые в особом порядке"" является 
						|служебной и не может быть изменена вручную. Для изменения списка 
						|счетов, подлежащих переоценке в особом порядке, используйте 
						|обработку ""Учетная политика"" (меню ""Сервис"", пункт 
						|""Учетная политика"").");
		СтатусВозврата(0);
		
	ИначеЕсли ТипОбъекта = "Константа.СпособВеденияНалоговогоУчета" Тогда
		Если ПустоеЗначение(Значение) = 1  Тогда
		    Значение = Перечисление.СпособыВеденияНалоговогоУчета.ОдновременноСБухгалтерскимУчетом;
		КонецЕсли;
		
	ИначеЕсли ТипОбъекта = "Константа.СпособУчетаГПиПФ" Тогда
		Если ПустоеЗначение(Значение) = 1  Тогда
		    Значение = Перечисление.СпособыУчетаГПиПФ.ПоФактическойСтоимости;
		КонецЕсли;
		
	ИначеЕсли ТипОбъекта = "Константа.ПрименяетсяПБУ18" Тогда
		Если ПустоеЗначение(Значение) = 1  Тогда
		    Значение = Да;
		КонецЕсли;
		
	ИначеЕсли ТипОбъекта = "Константа.МетодРасчетаСебестоимостиМатериалов" Тогда
		Если ПустоеЗначение(Значение) = 1  Тогда
		    Значение = Перечисление.МетодыРасчетаСебестоимости.ПоСредневзвешеннойСтоимости;
		КонецЕсли;
		
	ИначеЕсли ТипОбъекта = "Константа.МетодРасчетаСебестоимостиТоваров" Тогда
		Если ПустоеЗначение(Значение) = 1  Тогда
		    Значение = Перечисление.МетодыРасчетаСебестоимости.ПоСредневзвешеннойСтоимости;
		КонецЕсли;	
	
	ИначеЕсли ТипОбъекта = "Константа.РаздельныйУчетТоваровОптРозница" Тогда
		Если ПустоеЗначение(Значение) = 1  Тогда
		    Значение = Нет;
		КонецЕсли;
		
	ИначеЕсли ТипОбъекта = "Константа.УчитыватьПокупнуюСтоимостьТоваров" Тогда
		Если ПустоеЗначение(Значение) = 1  Тогда
		    Значение = Нет;
		КонецЕсли;
		
	ИначеЕсли ТипОбъекта = "Константа.СпособНалоговогоУчетаГПиПФ" Тогда
		Если ПустоеЗначение(Значение) = 1  Тогда
		    Значение = Перечисление.СпособыНалоговогоУчетаГПиПФ.ПоПлановойСтоимости;
		КонецЕсли;
		
	ИначеЕсли ТипОбъекта = "Константа.ПорядокИсчисленияЕСН" Тогда
		Если ДатаГод(ДатаИстории) > 2004  Тогда
		    Предупреждение("Константа ""Порядок исчисления ЕСН"" не используется, начиная с 01.01.2005 г.");
			СтатусВозврата(0);
		КонецЕсли;
		
	ИначеЕсли ТипОбъекта = "Константа.УчитыватьОтрицательныеСуммовыеРазницыПриОпределенииВычетовПоНДС" Тогда
		Если ДатаГод(ДатаИстории) > 2006  Тогда
			Предупреждение("Константа ""Учитывать отрицательные суммовые разницы при начислении НДС""
							|не используется, начиная с 01.01.2007 г.");
			СтатусВозврата(0);
		КонецЕсли;
		
	ИначеЕсли ТипОбъекта = "Константа.УчитыватьПоложительныеСуммовыеРазницыПриОпределенииВычетовПоНДС" Тогда
		Если ДатаГод(ДатаИстории) > 2006  Тогда
			Предупреждение("Константа ""Учитывать положительные суммовые разницы при определении вычетов по НДС""
							|не используется, начиная с 01.01.2007 г.");
			СтатусВозврата(0);
		КонецЕсли;

	ИначеЕсли ТипОбъекта = "Константа.УчитыватьОтрицательныеСуммовыеРазницыПриНачисленииНДС" Тогда
		Если ДатаГод(ДатаИстории) > 2006  Тогда
			Предупреждение("Константа ""Учитывать отрицательные суммовые разницы при определении вычетов по НДС""
							|не используется, начиная с 01.01.2007 г.");
			СтатусВозврата(0);
		КонецЕсли;
		
	ИначеЕсли ТипОбъекта = "Константа.ОтражатьПоложительныеСуммовыеРазницыВДопЛисте" Тогда
		Если ДатаГод(ДатаИстории) > 2006  Тогда
			Предупреждение("Константа ""Отражать положительные суммовые разницы в доп. листе""
							|не используется, начиная с 01.01.2007 г.");
			СтатусВозврата(0);
		КонецЕсли;

	ИначеЕсли ТипОбъекта = "Константа.ОтражатьОтрицательныеСуммовыеРазницыВДопЛисте" Тогда
		Если ДатаГод(ДатаИстории) > 2006  Тогда
			Предупреждение("Константа ""Отражать отрицательные суммовые разницы в доп. листе""
							|не используется, начиная с 01.01.2007 г.");
			СтатусВозврата(0);
		КонецЕсли; 
		
	ИначеЕсли ТипОбъекта = "Константа.ВыписыватьОтдельныеСчетаФактурыНаСуммовыеРазницы" Тогда
		Предупреждение("Константа ""Выписывать отдельные счета-фактуры на суммовые разницы""
						|не может быть изменена вручную. Для изменения значения константы,
						|используйте обработку ""Учетная политика"" (меню ""Сервис"", пункт 
						|""Учетная политика"").");
		СтатусВозврата(0);
		
	ИначеЕсли ТипОбъекта = "Константа.НалоговыйПериодПоНДС" Тогда
		Если ДатаГод(ДатаИстории) > 2007  Тогда
			Предупреждение("Константа ""Налоговый период по НДС""
							|не используется, начиная с 01.01.2008 г.");
			СтатусВозврата(0);
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры // ПриЗаписиИстории() 

//******************************************************************************
// Предопределенная процедура
//
Процедура ПриУдаленииИстории(ТипОбъекта, Объект, Значение, ДатаИстории)
	
	Если ТипОбъекта = "Константа.УчитыватьОтрицательныеСуммовыеРазницыПриОпределенииВычетовПоНДС" Тогда
		Если ДатаИстории = '01.01.2007'  Тогда
			Предупреждение("Константа ""Учитывать отрицательные суммовые разницы при начислении НДС""
							|не используется, начиная с 01.01.2007 г.
							|Удалять значение на 01.01.2007 г. нельзя!");
			СтатусВозврата(0);
		КонецЕсли;
		
	ИначеЕсли ТипОбъекта = "Константа.УчитыватьПоложительныеСуммовыеРазницыПриОпределенииВычетовПоНДС" Тогда
		Если ДатаИстории = '01.01.2007'  Тогда
			Предупреждение("Константа ""Учитывать положительные суммовые разницы при определении вычетов по НДС""
							|не используется, начиная с 01.01.2007 г.
							|Удалять значение на 01.01.2007 г. нельзя!");
			СтатусВозврата(0);
		КонецЕсли;

	ИначеЕсли ТипОбъекта = "Константа.УчитыватьОтрицательныеСуммовыеРазницыПриНачисленииНДС" Тогда
		Если ДатаИстории = '01.01.2007'  Тогда
			Предупреждение("Константа ""Учитывать отрицательные суммовые разницы при определении вычетов по НДС""
							|не используется, начиная с 01.01.2007 г.
							|Удалять значение на 01.01.2007 г. нельзя!");
			СтатусВозврата(0);
		КонецЕсли;
		
	ИначеЕсли ТипОбъекта = "Константа.ОтражатьПоложительныеСуммовыеРазницыВДопЛисте" Тогда
		Если ДатаИстории = '01.01.2007'  Тогда
			Предупреждение("Константа ""Отражать положительные суммовые разницы в доп. листе""
							|не используется, начиная с 01.01.2007 г.
							|Удалять значение на 01.01.2007 г. нельзя!");
			СтатусВозврата(0);
		КонецЕсли;

	ИначеЕсли ТипОбъекта = "Константа.ОтражатьОтрицательныеСуммовыеРазницыВДопЛисте" Тогда
		Если ДатаИстории = '01.01.2007'  Тогда
			Предупреждение("Константа ""Отражать отрицательные суммовые разницы в доп. листе""
							|не используется, начиная с 01.01.2007 г.
							|Удалять значение на 01.01.2007 г. нельзя!");
			СтатусВозврата(0);
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры // ПриУдаленииИстории() 

//******************************************************************************
// Предопределенная процедура
//
Процедура ПриЗавершенииРаботыСистемы()

	Перем ЗапрашиватьПодтверждениеПриВыходе;

	ЗапрашиватьПодтверждениеПриВыходе = ПустоеЗначение(ВосстановитьЗначение("НеЗапрашиватьПодтверждениеПриВыходе"));
	Если ЗапрашиватьПодтверждениеПриВыходе = 1 Тогда
	  Если Вопрос("Закончить работу с программой?", "Да+Нет", 60)="Нет" Тогда
	       СтатусВозврата(0);
	       Возврат;
	  КонецЕсли;
	КонецЕсли; 

	ОткрытьФормуМодально("Обработка.ТорговоеОборудование", "Отключить"); 

КонецПроцедуры // ПриЗавершенииРаботыСистемы()

///////////////////////////////////////////////////////////////////////////
// Получение справки правовой поддержки
Процедура Норм_ПолучитьСправку( Норм_СтрЗапроса ) Экспорт
	Если ТипЗначения(Норм_Компонента) = 0 тогда
		Если Вопрос("Не установлена правовая система ""1С:Гарант. Правовая поддержка.""
					|
					|По вопросам приобретения и подключения обращайтесь в фирму ""1С""
					|или к ее партнерам.
					|
					|Правовая система ""1С:Гарант. Правовая поддержка."" поставляется
					|также в составе диска ""Информационно-Технологическое Сопровождение
					|1C:Предприятия"" (ИТС).
					|
					|Хотите получить подробную информацию о диске ИТС?", "Да+Нет") = "Да"   Тогда
			ОткрытьФорму("Обработка.Путеводитель", "ИТС");
		КонецЕсли;
		Возврат;
	КонецЕсли;

	Норм_ИмяВнешнегоОтчета = "";
	Если (ПустаяСтрока(Норм_Компонента.ПутьБД)=0) И (ФС.СуществуетФайл(Норм_Компонента.ПутьБД+"1CRtInf.ert")=1) Тогда
		Норм_ИмяВнешнегоОтчета = Норм_Компонента.ПутьБД+"1CRtInf.ert";
	ИначеЕсли ФС.СуществуетФайл(КаталогИБ()+"ExtForms\1CRtInf.ert")=1 Тогда
		Норм_ИмяВнешнегоОтчета = КаталогИБ()+"ExtForms\1CRtInf.ert";
	КонецЕсли;

	Если Норм_ИмяВнешнегоОтчета = "" Тогда
		Предупреждение("Не найден файл 1CRtInf.ert");
	Иначе
		Норм_Параметр = Норм_СтрЗапроса;
		ОткрытьФорму("Отчет#",,Норм_ИмяВнешнегоОтчета);
	КонецЕсли;
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////
// Просмотр видеокурса
Процедура Видео_Показать(Фрагмент="") Экспорт
	Перем Версия_Видеокурса;

	Если ТипЗначения(Видео_Компонента) = 0 тогда
		Предупреждение("Не установлена компонента Видеокурса!");
		Возврат;
	КонецЕсли;

	Если ФС.СуществуетФайл(Видео_Компонента.Путь+"\1cb77.1cv") = 1 Тогда
		Версия_Видеокурса = "77";
	ИначеЕсли ФС.СуществуетФайл(Видео_Компонента.Путь+"\1cb75.1cv") = 1 Тогда
		Версия_Видеокурса = "75";
	Иначе
		Предупреждение("Не найден Видеокурс!
						|Проверьте расположение Видеокурса: "+Видео_Компонента.Путь+"
						|(Закладка ""Видеокурс"" меню Сервис - Параметры)");
		Возврат;
	КонецЕсли;
	Видео_Компонента.ВыбратьКурс("1CB"+Версия_Видеокурса);

	Если ПустаяСтрока(Фрагмент) = 1 Тогда
		Видео_Компонента.Показать("",0,1,0);

	ИначеЕсли Лев(Фрагмент, 1) = "B" Тогда
		Видео_Компонента.Показать("B"+Версия_Видеокурса+Сред(Фрагмент, 4)+".avi");

	Иначе
		Видео_Компонента.Показать(Фрагмент);
	КонецЕсли;
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
//  ФУНКЦИИ ПЕРЕСЧЕТА СУММ В ДОКУМЕНТАХ ДВИЖЕНИЯ МПЗ
//
//******************************************************************************
// глКурсДляВалюты(Валюта,ДатаКурса)
//
// Параметры:
//  Валюта    - Валюта (элемент справочника "Валюты")
//  ДатаКурса - Дата, на которую следует получить курс
//
// Возвращаемое значение: 
//  Курс, с учетом кратности
//
// Описание: 
//  Возвращает курс валюты на дату
//
Функция глКурсДляВалюты(Валюта,ДатаКурса) Экспорт
	Кратность=Валюта.Кратность.Получить(ДатаКурса);
	Возврат Валюта.Курс.Получить(ДатаКурса)/?(Кратность=0,1,Кратность);
КонецФункции  // глКурсДляВалюты()

//******************************************************************************
// глСтавкаНалога(Док, Налог)
//
// Параметры:
//  Док         - Документ. Документ отгрузки.
//  Налог       - Строка. Наименование налога: "НДС" или "НП".
//
// Возвращаемое значение:
//  Справочник  - Ставка налога.
//
// Описание:
//  Определяет ставку налога для выбранной строки документа  отгрузки. Сначала 
// ставка ищется в варианте расчета налогов, а затем в реквизитах номенклатуры.
//
Функция глСтавкаНалога(Док, Налог, Номенклатура = "") Экспорт
	
	Ставка = ПолучитьПустоеЗначение("Справочник.Ставки"+Налог);
	Если Метаданные.Документ(Док.Вид()).РеквизитШапки("ВариантРасчетаНалогов").Выбран() = 1 Тогда
		Если ПустоеЗначение(Док.ВариантРасчетаНалогов) = 0 Тогда // выбран вариант
			Ставка = Док.ВариантРасчетаНалогов.ПолучитьАтрибут("Ставка"+Налог);
		КонецЕсли; 
	КонецЕсли;
	
	Если ПустоеЗначение(Ставка)= 1 Тогда // поиск в номенклатуре
		Если ПустоеЗначение(Номенклатура) = 0 Тогда
		    Ставка = Номенклатура.ПолучитьАтрибут("Ставка"+Налог).Получить(Док.ДатаДок);
			
		ИначеЕсли Метаданные.Документ(Док.Вид()).РеквизитТабличнойЧасти("Товар").Выбран() = 1 Тогда
		    Ставка = Док.Товар.ПолучитьАтрибут("Ставка"+Налог).Получить(Док.ДатаДок);
			
		ИначеЕсли Метаданные.Документ(Док.Вид()).РеквизитТабличнойЧасти("Услуга").Выбран() = 1 Тогда
			Ставка = Док.Услуга.ПолучитьАтрибут("Ставка"+Налог).Получить(Док.ДатаДок);
			
		ИначеЕсли Метаданные.Документ(Док.Вид()).РеквизитТабличнойЧасти("Работа").Выбран()  = 1 Тогда
			Ставка = Док.Работа.ПолучитьАтрибут("Ставка"+Налог).Получить(Док.ДатаДок);
		
		ИначеЕсли Метаданные.Документ(Док.Вид()).РеквизитТабличнойЧасти("МПЗ").Выбран()  = 1 Тогда
			Если Док.МПЗ.Вид() = "Номенклатура" Тогда
				Ставка = Док.МПЗ.ПолучитьАтрибут("Ставка"+Налог).Получить(Док.ДатаДок);
			Иначе
				Ставка = глЗначениеПоУмолчанию("ОсновнаяСтавка"+Налог);
			КонецЕсли;
			
		Иначе
		    Ставка = глЗначениеПоУмолчанию("ОсновнаяСтавка"+Налог);
		КонецЕсли;
	КонецЕсли;
	
	Возврат Ставка;
	
КонецФункции // глСтавкаНалога()

//******************************************************************************
// глПризнакУчетаНалога(Док, Налог)
//
// Параметры:
//  Док         - Документ. Документ отгрузки.
//  Налог       - Строка. Наименование налога: "НДС" или "НП".
//
// Возвращаемое значение:
//  Число       - 1 - налог учитывается в документе. 0 - не учитывается.
//
// Описание:
//  Возвращает признаки учета налога для документа: "Учитывать НДС" и
// "Учитывать НП".
//
Функция глПризнакУчетаНалога(Док, Налог) Экспорт
	
	УчитыватьНалог = 1;
	Ставка = ПолучитьПустоеЗначение("Справочник.Ставки"+Налог);
	Если ПустоеЗначение(Док.ВариантРасчетаНалогов) = 0 Тогда // выбран вариант
		Ставка = Док.ВариантРасчетаНалогов.ПолучитьАтрибут("Ставка"+Налог);
		Если Ставка = глБезНалога(Налог) Тогда
		    УчитыватьНалог = 0;
		КонецЕсли;
	КонецЕсли; 
	
	Возврат УчитыватьНалог;
	
КонецФункции // глПризнакУчетаНалога()

//******************************************************************************
// глПересчетВДругуюВалюту(Сумма, Товар, Док)
//
Функция глПересчетВДругуюВалюту(Сумма, Товар, Док) Экспорт
	
	// Пересчитаем сумму, указанную в справочнике по курсу документа.
	Курс1 = 1; // курс цены в номенклатуре
	Кратность1 = 1;
	Валюта1 = ПолучитьПустоеЗначение("Справочник.Валюты");
	Курс2 = 1; // курс цены в документе
	Кратность2 = 1;
	Если Товар.Вид() = "Номенклатура" Тогда
		Если Товар.Валюта.Выбран() = 1 Тогда
			Валюта1 = Товар.Валюта;
		    Курс1 = Валюта1.Курс.Получить(Док.ДатаДок);
			Кратность1 = Валюта1.Кратность.Получить(Док.ДатаДок);
			Кратность1 = ?(Кратность1 = 0, 1, Кратность1);
		КонецЕсли;
	КонецЕсли;
	
	Если Метаданные.Документ(Док.Вид()).РеквизитШапки("Договор").Выбран() = 1 Тогда
		Если Док.Договор.Выбран() = 1 Тогда
			Если Док.Договор.ВалютаДоговора.Выбран() = 1 Тогда
				Валюта2 = Док.Договор.ВалютаДоговора;
				Если Валюта2 = Валюта1 Тогда
					Возврат Сумма;
					
				Иначе
					Если Метаданные.Документ(Док.Вид()).РеквизитШапки("Курс").Выбран() = 1 Тогда
					    Курс2 = Док.Курс;
					Иначе
						Курс2 = Валюта2.Курс.Получить(Док.ДатаДок);
					КонецЕсли;
					Кратность2 = Валюта2.Кратность.Получить(Док.ДатаДок);
					Кратность2 = ?(Кратность2 = 0, 1, Кратность2);
				КонецЕсли;
			КонецЕсли;	    
		КонецЕсли;
	КонецЕсли;
	
	Если Курс2 = 0 Тогда
	    Возврат 0;
	Иначе
		Возврат Сумма*(Курс1/Кратность1)/(Курс2/Кратность2);
	КонецЕсли;
	
КонецФункции // глПересчетВДругуюВалюту()

//******************************************************************************
// глСуммаДокумента(Док, Товар, Цена, Количество)
//
Функция глСуммаДокумента(Док, Товар, Цена=0, Количество=1) Экспорт
	
	Вариант = Док.ВариантРасчетаНалогов;
	СтНДС = глСтавкаНалога(Док, "НДС").Ставка;
	СтНП = глСтавкаНалога(Док, "НП").Ставка;
	
	Сумма = Цена*Количество;
		
	ПересчитыватьЦену = 1;
	Если (Док.Вид() = "ПоступлениеТоваров") или
		 (Док.Вид() = "ПоступлениеМатериалов") или
		 (Док.Вид() = "ПоступлениеОС") или
		 (Док.Вид() = "ПоступлениеНМА") или
		 (Док.Вид() = "УслугиСтороннихОрганизаций") Тогда
		Если Константа.ПересчитыватьПокупнуюЦену = Да Тогда
		Иначе
			ПересчитыватьЦену = 0;
		КонецЕсли;
	Иначе
		Сумма = глПересчетВДругуюВалюту(Сумма, Товар, Док);
	КонецЕсли;
		
	Если ПересчитыватьЦену = 1 Тогда
		Если (СтНДС = 20) или (СтНДС = 18) или (СтНДС = 10) или (СтНДС = 0) Тогда
			НДС = Сумма * СтНДС / 100;
		Иначе
			НДС = Сумма * СтНДС / (100 - СтНДС);
		КонецЕсли;
		
		НП = (Сумма + НДС)*СтНП/100;
		
		Если Вариант.СуммаВключаетНДС = 1 Тогда	
		    Сумма = Сумма + НДС;
		КонецЕсли;
		
		Если Вариант.СуммаВключаетНП = 1 Тогда
		    Сумма = Сумма + НП;
		КонецЕсли;
	КонецЕсли;

	Возврат Окр(Сумма, 2, 1);
	
КонецФункции // глСуммаДокумента()

//******************************************************************************
//  глПересчет(Сумма,ВалютаНач,ПоКурсуВалютыНач,ВалютаКон,ПоКурсуВалютыКон)
//
// Параметры:      
//	Сумма            - сумма, которую следует пересчитать
// 	ВалютаНач        - валюта (элемент справочника "Валюты"), из которой считаем
// 	ВалютаКон        - валюта (элемент справочника "Валюты"), в которую считаем
// 	ПоКурсуВалютыНач - курс или дата курса валюты нач
// 	ПоКурсуВалютыКон - курс или дата курса валюты кон
//
// Возвращаемое значение: 
//  Сумма, пересчитанная в другую валюту
//
// Описание: 
// 	Эта функция пересчитывает сумму из ВалютаНач и возвращает значение Сумма в 
// 	ВалютаКон в параметрах ПоКурсуВалютыНач и ПоКурсуВалютыКон могут передаваться
// 	либо сами курсы либо даты
//
Функция глПересчет(Сумма,ВалютаНач = 0,ПоКурсуВалютыНач,ВалютаКон = 0,ПоКурсуВалютыКон) Экспорт
	
	Если ВалютаНач = ВалютаКон Тогда
		// ну, тут и считать нечего...
		Возврат Сумма;
	КонецЕсли;

	ТипЗн=ТипЗначенияСтр(ПоКурсуВалютыНач);
	
	Если ТипЗн = "Число" Тогда
		КурсВалютыНач=ПоКурсуВалютыНач;
	
	ИначеЕсли ПустоеЗначение(ВалютаНач)=1 Тогда
		КурсВалютыНач=1;
		
	ИначеЕсли ТипЗн = "Дата" Тогда
		КурсВалютыНач = глКурсДляВалюты(ВалютаНач,ПоКурсуВалютыНач);
		
	Иначе
		Сообщить("глПересчет():Неверный тип параметра ПоКурсуВалютыНач!");
		Возврат Сумма;
		
	КонецЕсли;

	ТипЗн = ТипЗначенияСтр(ПоКурсуВалютыКон);
	

	Если ТипЗн = "Число" Тогда
		КурсВалютыКон = ПоКурсуВалютыКон;
	
	ИначеЕсли ПустоеЗначение(ВалютаКон)=1 Тогда
		КурсВалютыКон=1;
		
	ИначеЕсли ТипЗн = "Дата" Тогда
		КурсВалютыКон = глКурсДляВалюты(ВалютаКон,ПоКурсуВалютыКон);
		
	Иначе
		Сообщить("глПересчет():Неверный тип параметра ПоКурсуВалютыКон!");
		Возврат Сумма;
		
	КонецЕсли;

	Если (КурсВалютыНач = 0) 
	 ИЛИ (КурсВалютыКон = 0) Тогда
		Сообщить("При пересчете валюты обнаружен нулевой курс валюты "
		+?(КурсВалютыНач = 0,ВалютаНач,ВалютаКон));
		Возврат Сумма;
	КонецЕсли;

	Возврат Сумма * КурсВалютыНач / КурсВалютыКон;
	
КонецФункции // глПересчет() 

//******************************************************************************
// глВернутьЦену(Номенклатура, ТипЦены, ДатаЦены, ЦенаЦены, ВалЦены, НайденнаяЦена) 
//
// Параметры: 
//  Номенклатура  - элемент справочника "Номенклатура"
//  ТипЦены       - элемент справочника "ТипыЦен"
//  ДатаЦены      - дата, на которую надо получить цену
//  ЦенаЦены      - переменная, которую надо заполнитиь значением (число) полученной цены
//  ВалЦены       - переменная, которую надо заполнитиь значением валюты, в которой выражена цена 
//  НайденнаяЦена - переменная, которую надо заполнить найденным элементом справочника цен
//
// Возвращаемое значение:
//  1 - если есть такая цена, пераметры цены заполнены
//  0 - нет такой цены
// -1 - есть только цены, помеченные на удаление
//
// Описание:
//  Формирует ценовые характеристики номенклатурной единицы по заданному типу цен. 
//
Функция глВернутьЦену(Номенклатура, ТипЦены =0, ДатаЦены = 0, ЦенаЦены = 0,ВалЦены = 0,НайденнаяЦена = 0) Экспорт
	Перем ЦеныНоменклатуры;
	Перем НужныйТипЦен;
	Перем ЕстьУдаленные;
	
	Если (Константа.ИспользоватьТипыЦен = Нет) и (Номенклатура.Вид() = "Номенклатура") Тогда
		ЦенаЦены	= Номенклатура.Цена;
		ВалЦены		= Номенклатура.Валюта;
		Возврат 1;
	КонецЕсли;
	Если ПустоеЗначение(ТипЦены)=1 Тогда
		ЦенаЦены	= 0;
		ВалЦены		= "";
		Возврат 1;
	КонецЕсли;
	
	Рез = 1;
	НайденнаяЦена = ПолучитьПустоеЗначение("Справочник.Цены");
	
	Если ПустоеЗначение(ДатаЦены) = 1 Тогда
		ДатаЦены = РабочаяДата();
	КонецЕсли;

	// Найдет или нужную цену в справочнике
	// если она рассчитывается, то найдем базовую цену 
	НужныйТипЦен	= ТипЦены;
	
	ЦеныНоменклатуры= СоздатьОбъект("Справочник.Цены");
	ЦеныНоменклатуры.ИспользоватьВладельца(Номенклатура); 
	ЦеныНоменклатуры.ВыбратьЭлементы();
	
	Пока ЦеныНоменклатуры.ПолучитьЭлемент()  = 1 Цикл    
		Если ЦеныНоменклатуры.ТипЦен <> НужныйТипЦен Тогда
			Продолжить;
		КонецЕсли;
		
		НайденнаяЦена = ЦеныНоменклатуры.ТекущийЭлемент();
		
		Если ЦеныНоменклатуры.ПометкаУдаления() = 1 Тогда
			Рез = - 1; // Цена есть, но помечена на удаление
			Продолжить;
		Иначе
			Прервать;
		КонецЕсли;
		
	КонецЦикла;       
	
	Если НайденнаяЦена.Выбран() = 1 Тогда
		ЦенаЦены	= НайденнаяЦена.Цена.Получить(ДатаЦены);
		ВалЦены		= НайденнаяЦена.Валюта;		
	Иначе
		// Используем базовую цену
		ЦенаЦены	= 0;
		ВалЦены		= "";
	КонецЕсли;
	
	// Заполним ценовые характериситики 
    		
	Возврат Рез;
КонецФункции // глВернутьЦену()

//******************************************************************************
// глПолучитьЦену(Док, Номенклатура, Тип, НаДату, Валюта, Курс)
//
// Параметры:
//  Док 			- контекст документа
//  Номенклатура	- элемент справочника Номенклатура.
//  Тип				- элемент справочника ТипыЦен
//  НаДату			- дата, на которую берется цена
//  Валюта			- элемент справочника Валюты
//  Курс			- курс или дата курса
//
// Возвращаемое значение:
//  цену номенклатуры
//
// Описание:
//  Функция возвращает цену номенклатуры в указанном типе цен Тип, на дату НаДату,
//  пересчитанную в валюту Валюта по курсу Курс
//
Функция глПолучитьЦену(Док = "", Номенклатура, Тип = "", НаДату,Валюта=0, Курс=0) Экспорт
	Перем ЦенаЦены, ВалЦены;
	
	ЦенаЦены	= 0;
	Если Константа.ИспользоватьТипыЦен = Нет Тогда
	    Если ПустоеЗначение(Док) = 0 Тогда
	        Если Док.Вид() = "ПоступлениеТоваров" Тогда
	            ЦенаЦены = глСуммаДокумента(Док, Номенклатура, Номенклатура.Себестоимость);
				Возврат ЦенаЦены;
	        КонецЕсли;
	    КонецЕсли;
	КонецЕсли;
	
	Если глВернутьЦену(Номенклатура, Тип, НаДату, ЦенаЦены, ВалЦены) = 1 Тогда
		ЦенаЦены	= глПересчет(ЦенаЦены, ВалЦены, ?(ПустоеЗначение(ВалЦены) = 0,НаДату,1), Валюта, ?(ПустоеЗначение(Курс) = 1, ?(ПустоеЗначение(Валюта) = 0,НаДату,1), Курс));
	КонецЕсли;
	
	Если ПустоеЗначение(Док) = 1 Тогда
	    Возврат ЦенаЦены;
	КонецЕсли;
	// Получим цену товара без налогов
	ВидЦеныОбъекта = 1;
	Если (Док.Вид() = "РасходнаяНакладная") или
		 (Док.Вид() = "РеализацияОтгруженнойПродукции") или
		 (Док.Вид() = "ОказаниеУслуг") или
		 (Док.Вид() = "Счет") или
		 (Док.Вид() = "ПродажаВРозницу") или
		 (Док.Вид() = "ВыполнениеЭтапаРабот") или
		 (Док.Вид() = "ПоступлениеТоваров") Тогда
		Если Док.ВариантРасчетаНалогов.Выбран() = 1 Тогда
		 	СуммаВключаетНДС = Док.ВариантРасчетаНалогов.СуммаВключаетНДС; 
			СуммаВключаетНП = Док.ВариантРасчетаНалогов.СуммаВключаетНП; 
		ИначеЕсли (Док.Вид() = "ПоступлениеТоваров") и (Константа.ОсновнойВариантРасчетаНалогов.Выбран() = 1) Тогда
			СуммаВключаетНДС = Константа.ОсновнойВариантРасчетаНалогов.СуммаВключаетНДС; 
			СуммаВключаетНП = Константа.ОсновнойВариантРасчетаНалогов.СуммаВключаетНП;
		ИначеЕсли (Док.Вид() <> "ПоступлениеТоваров") и (Константа.ОсновнойВариантРасчетаНалоговОтгрузки.Выбран() = 1) Тогда
			СуммаВключаетНДС = Константа.ОсновнойВариантРасчетаНалоговОтгрузки.СуммаВключаетНДС; 
			СуммаВключаетНП = Константа.ОсновнойВариантРасчетаНалоговОтгрузки.СуммаВключаетНП;
		Иначе
			СуммаВключаетНДС = 0; 
			СуммаВключаетНП = 0;
		КонецЕсли;
	ИначеЕсли Док.Вид() = "ИнвентаризацияТМЦ" Тогда
		СуммаВключаетНДС = 1; 
		СуммаВключаетНП = 1;
		Если (Док.МПЗ.Выбран() = 1) Тогда
			Если (Док.МПЗ.Вид() = "Номенклатура") Тогда
				Если (Док.ОблагаетсяЕНВД = 1) и (Док.МПЗ.ТипНоменклатуры = Перечисление.ТипыНоменклатуры.Товар) Тогда
					Если Док.МПЗ.ТипТовара <> Перечисление.ТипыТоваров.НаКомиссии Тогда
						Возврат ЦенаЦены;
					КонецЕсли;	
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли Док.Вид() = "СчетФактура" Тогда
		СуммаВключаетНДС = Док.СуммаНДСопределяетсяРасчетнымМетодом; 
		СуммаВключаетНП = 0;
		
	Иначе
		Возврат ЦенаЦены;
	КонецЕсли;
	
	Если Константа.ИспользоватьТипыЦен = Нет Тогда
		Если Номенклатура.Вид() = "Номенклатура" Тогда
			ЦенаВклНДС = ?(Номенклатура.ПорядокХраненияОтпускнойЦены>1,1,0); 
			ЦенаВклНП = ?(Номенклатура.ПорядокХраненияОтпускнойЦены>2,1,0);
		Иначе
			ЦенаВклНДС = 0;  
			ЦенаВклНП = 0;
		КонецЕсли;
	ИначеЕсли Тип.Выбран()=1 Тогда
	    ЦенаВклНДС = Тип.ЦенаВклНДС;  
		ЦенаВклНП = Тип.ЦенаВклНП; 
	ИначеЕсли (Док.Вид() = "ПоступлениеТоваров") и (Константа.ОсновнаяЦенаПриобретения.Выбран() = 1) Тогда
        ЦенаВклНДС = Константа.ОсновнаяЦенаПриобретения.ЦенаВклНДС;  
		ЦенаВклНП = Константа.ОсновнаяЦенаПриобретения.ЦенаВклНП;
	ИначеЕсли Константа.ОсновнойВариантОтпускнойЦены.Выбран() = 1 Тогда
		ЦенаВклНДС = ?(Константа.ОсновнойВариантОтпускнойЦены.ПорядковыйНомер()>1,1,0);  
		ЦенаВклНП = ?(Константа.ОсновнойВариантОтпускнойЦены.ПорядковыйНомер()>2,1,0);
	Иначе
		Если  (Док.Вид() = "ИнвентаризацияТМЦ") Тогда
			ЦенаВклНДС = 1;  
			ЦенаВклНП = 1;
		Иначе
			ЦенаВклНДС = 0;  
			ЦенаВклНП = 0;
		КонецЕсли;
	КонецЕсли;
	
	Если (СуммаВключаетНДС = ЦенаВклНДС) и (СуммаВключаетНП = ЦенаВклНП) Тогда
	    Возврат ЦенаЦены;
	Иначе
		ВидЦеныОбъекта = 1 + ЦенаВклНДС + ЦенаВклНП;
	КонецЕсли;
	
	СтНДС = глСтавкаНалога(Док, "НДС", Номенклатура).Ставка;
	СтНП = глСтавкаНалога(Док, "НП", Номенклатура).Ставка;
	
	Если ВидЦеныОбъекта = 1 Тогда
		Сумма = ЦенаЦены;
		
	ИначеЕсли ВидЦеныОбъекта = 2 Тогда
		Если (СтНДС = 20) или (СтНДС = 18) или (СтНДС = 10) или (СтНДС = 0) Тогда
		    Сумма = Окр(ЦенаЦены*100/(100+СтНДС), 2, 1);
		Иначе
		    Сумма = Окр(ЦенаЦены*(100-СтНДС)/100, 2, 1);
		КонецЕсли;
	
	ИначеЕсли ВидЦеныОбъекта = 3 Тогда
		Если (СтНДС = 20) или (СтНДС = 18) или (СтНДС = 10) или (СтНДС = 0) Тогда
		    Сумма = Окр(ЦенаЦены*100/(100+СтНП),2,1);
		    Сумма = Окр(Сумма*100/(100+СтНДС),2,1);
		Иначе
		    Сумма = Окр(ЦенаЦены*100/(100+СтНП),2,1);
		    Сумма = Окр(Сумма*(100-СтНДС)/100, 2, 1);
		КонецЕсли;
	КонецЕсли;
	
	Если (СтНДС = 20) или (СтНДС = 18) или (СтНДС = 10) или (СтНДС = 0) Тогда
		НДС = Сумма * СтНДС / 100;
	Иначе
		НДС = Сумма * СтНДС / (100 - СтНДС);
	КонецЕсли;
	
	НП = (Сумма + НДС)*СтНП/100;
	
	Если СуммаВключаетНДС = 1 Тогда	
		Сумма = Сумма + НДС;
	КонецЕсли;
	
	Если СуммаВключаетНП = 1 Тогда
		Сумма = Сумма + НП;
	КонецЕсли;

	Возврат Окр(Сумма, 2, 1);
	
	Возврат ЦенаЦены;
	
КонецФункции // глПолучитьЦену()

//******************************************************************************
// глПоказательДокумента(Док, ИмяПоказателя, СтавкаНДС, СтавкаНП)
//
Функция глПоказательДокумента(Док, ИмяПоказателя) Экспорт

	Если Док.Вид() = "ИнвентаризацияТМЦ" Тогда
	    ВклНДС = 1;
		ВклНП = 1;
	Иначе
		ВклНДС = Док.ВариантРасчетаНалогов.СуммаВключаетНДС;
		ВклНП = Док.ВариантРасчетаНалогов.СуммаВключаетНП;
	КонецЕсли; 

	СтНДС = глСтавкаНалога(Док, "НДС").Ставка;
	СтНП = глСтавкаНалога(Док, "НП").Ставка;
    
	Если ((Док.Вид() = "ПоступлениеОС") или (Док.Вид() = "ПоступлениеНМА")) Тогда
		Сумма = Док.Стоимость;
		
	ИначеЕсли ((Док.Вид() = "ПередачаОС") или (Док.Вид() = "ПередачаНМА")) Тогда
		Сумма = Док.Цена;                                                             
		
	ИначеЕсли Док.Вид() = "ИнвентаризацияТМЦ" Тогда	 	
		Сумма = Док.СуммаПродажи; 
		
	Иначе
		Сумма = Док.Сумма;
	КонецЕсли;                
	НДС = Док.НДС;
	НП = Док.НП;

	Результат = 0;
	Если ВРег(ИмяПоказателя) = ВРег("СуммаБезНалогов") Тогда
		Результат = Сумма;
		Если ВклНДС = 1 Тогда
		    Результат = Результат - НДС;
		КонецЕсли;
		Если ВклНП = 1 Тогда
		    Результат = Результат - НП;
		КонецЕсли;
		
	ИначеЕсли (ВРег(ИмяПоказателя) = ВРег("НДС")) Тогда // расчет суммы НДС
		Если ВклНП = 1 Тогда
			Если ВклНДС = 1 Тогда // НДС в сумме, НП в сумме
				Если (СтНДС = 20) или (СтНДС = 18) или (СтНДС = 10) или (СтНДС = 0) Тогда				    
					Результат = Сумма*СтНДС*100/(100 + СтНДС)/(100 + СтНП);
				Иначе                 
					Результат = Сумма*СтНДС/(100 + СтНП);
				КонецЕсли;

			Иначе // НДС сверху, НП в сумме
				Если (СтНДС = 20) или (СтНДС = 18) или (СтНДС = 10) или (СтНДС = 0) Тогда				    
					Результат = Сумма*СтНДС/(100 + СтНП + СтНДС*СтНП/100);
				Иначе
					Результат = Сумма*(1-СтНП/(100 - СтНДС + СтНП))*СтНДС/(100 - СтНДС);
				КонецЕсли;
			КонецЕсли;
			
		Иначе
			Если ВклНДС = 1 Тогда // НДС в сумме, НП сверху
				Если (СтНДС = 20) или (СтНДС = 18) или (СтНДС = 10) или (СтНДС = 0) Тогда				    
					Результат = Сумма*СтНДС/(100 + СтНДС);
				Иначе
					Результат = Сумма*СтНДС/100;
				КонецЕсли;

			Иначе // НДС сверху, НП сверху
				Если (СтНДС = 20) или (СтНДС = 18) или (СтНДС = 10) или (СтНДС = 0) Тогда				    
					Результат = Сумма*СтНДС/100;
				Иначе
					Результат = Сумма*СтНДС/(100 - СтНДС);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	
	ИначеЕсли ВРег(ИмяПоказателя) = ВРег("НП") Тогда // расчет суммы НП
		Если ВклНП = 1 Тогда
			Если ВклНДС = 1 Тогда // НДС в сумме, НП в сумме
				Результат = Сумма*СтНП/(100 + СтНП);

			Иначе // НДС сверху, НП в сумме
				Если (СтНДС = 20) или (СтНДС = 18) или (СтНДС = 10) или (СтНДС = 0) Тогда				    
					Результат = Сумма*(СтНДС/(100 + СтНП + СтНДС*СтНП/100)+1)*СтНП/(СтНП+100);
				Иначе
					Результат = Сумма*СтНП/(100 - СтНДС + СтНП);
				КонецЕсли;
			КонецЕсли;

		Иначе
			Если ВклНДС = 1 Тогда // НДС в сумме, НП сверху
				Результат = Сумма*СтНП/100;

			Иначе // НДС сверху, НП сверху
				Если (СтНДС = 20) или (СтНДС = 18) или (СтНДС = 10) или (СтНДС = 0) Тогда				    
					Результат = Сумма*(100 + СтНДС)*СтНП/10000;
				Иначе
					Результат = Сумма*СтНП/(100 - СтНДС);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;

	ИначеЕсли ВРег(ИмяПоказателя) = ВРег("СуммаСНалогами") Тогда // расет суммы "Всего"
		Результат = Сумма;
		Если ВклНДС = 0 Тогда
		    Результат = Результат + НДС;
		КонецЕсли;
		Если ВклНП = 0 Тогда
		    Результат = Результат + НП;
		КонецЕсли;
	КонецЕсли;

	Возврат Окр(Результат, 2, 1);
	
КонецФункции // глПоказательДокумента()

//******************************************************************************
// глСписокСтавокНДСбезРасчетных()
// 
// Возвращает список значений в котором собраны элементы справочника "Ставки НДС"
// за исключением расчетных ставок 16.67 и 9.09
// 
// Используется при выборе ставки НДС в справочниках "Варианты расчета налогов",
// "Номенклатура" и "Материалы".
// 
Функция глСписокСтавокНДСбезРасчетных() Экспорт
	СписокСтавок = СоздатьОбъект("СписокЗначений");
	СпрСтавкиНДС = СоздатьОбъект("Справочник.СтавкиНДС");
	СпрСтавкиНДС.ВыбратьЭлементы();
	Пока СпрСтавкиНДС.ПолучитьЭлемент() = 1 Цикл
		Если (СпрСтавкиНДС.Ставка = 16.67) или
		     (СпрСтавкиНДС.Ставка = 9.09) Тогда
			Продолжить;
		КонецЕсли;
		СписокСтавок.ДобавитьЗначение(СпрСтавкиНДС.ТекущийЭлемент());
	КонецЦикла;
	Возврат СписокСтавок;
КонецФункции // глСписокСтавокНДСбезРасчетных

//******************************************************************************
// 
Процедура глПечатьЖурналаДокументов(Конт, Наименование) Экспорт
	
	Перем Отбор, ЗначениеОтбора;
	
	ЕстьОтбор = Конт.ПолучитьОтбор(Отбор, ЗначениеОтбора);
	НачДата = Конт.НачалоИнтервала();
	КонДата = Конт.КонецИнтервала();
	Расшифровка = СоздатьОбъект("СписокЗначений");
 	Расшифровка.Установить("Отчет","ОбработкаДокументов");
 	Расшифровка.Установить("Дата1", НачДата);
	Расшифровка.Установить("Дата2", КонДата);
	Расшифровка.Установить("ВыбрКонтрагент", ПолучитьПустоеЗначение("Справочник.Контрагенты"));
	Расшифровка.Установить("ВыбрСтрока", "");
	Расшифровка.Установить("ВыбрСтрокаКом", "");
	Расшифровка.Установить("Признак", "Все");
	Расшифровка.Установить("ВидОбработки", "Печать");
	ВсеДокументы = СоздатьОбъект("СписокЗначений");
	ВыбранныеДокументы = СоздатьОбъект("СписокЗначений");
	Для Индекс=1 По Метаданные.Документ() Цикл
		Значение = Метаданные.Документ(Индекс).Идентификатор;
		Представление = Метаданные.Документ(Индекс).Представление();
		Комментарий = Метаданные.Документ(Индекс).Комментарий;
		Если ПустаяСтрока(Комментарий) = 0 Тогда
			Представление = Представление + " (" + Комментарий +")";
		КонецЕсли;
		ВсеДокументы.ДобавитьЗначение(Значение, Представление);
	КонецЦикла;
	//Считаем, что отбор возможен только по документу или контрагенту
	Если ЕстьОтбор = 1 Тогда
		Если Метаданные.Документ(Отбор).Выбран() = 1 Тогда
	    	Значение = Метаданные.Документ(Отбор).Идентификатор;
			Представление = Метаданные.Документ(Отбор).Представление();
			Комментарий = Метаданные.Документ(Отбор).Комментарий;
			Если ПустаяСтрока(Комментарий) = 0 Тогда
				Представление = Представление + " (" + Комментарий +")";
			КонецЕсли;
			ВсеДокументы.УдалитьЗначение(ВсеДокументы.НайтиЗначение(Значение));
			ВыбранныеДокументы.ДобавитьЗначение(Значение, Представление);
		Иначе
			Расшифровка.Установить("ВыбрКонтрагент", ЗначениеОтбора);
			ВсеДокументы.Выгрузить(ВыбранныеДокументы);
			ВсеДокументы.УдалитьВсе();
		КонецЕсли;                                                   
	Иначе
		Для Индекс = 1 По Метаданные.Документ() Цикл
			Док = Метаданные.Документ(Индекс);
			Если ((Строка(Док.Журнал) = Метаданные.Журнал(Наименование).Представление()) или (Наименование = "Общий")) Тогда
				Значение = Док.Идентификатор;
				Представление = Док.Представление();
				Комментарий = Док.Комментарий;
				Если ПустаяСтрока(Комментарий) = 0 Тогда
					Представление = Представление + " (" + Комментарий +")";
				КонецЕсли;
				ВсеДокументы.УдалитьЗначение(ВсеДокументы.НайтиЗначение(Значение));
				ВыбранныеДокументы.ДобавитьЗначение(Значение, Представление);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли; 
	Расшифровка.Установить("ВыбранныеДокументы", ВыбранныеДокументы);
	Расшифровка.Установить("ВсеДокументы", ВсеДокументы);
	глРасшифровка = Расшифровка;
	глФлагРасшифровки = 1;
	глОбновить = 0;
	ОткрытьФорму("Обработка.ОбработкаДокументов");
	глФлагРасшифровки = 0;

КонецПроцедуры		//ПечатьЖурналаДокументов

//******************************************************************************
// глСформироватьДеревоДокументов(Док)
// 
// Параметры:
//  Док - Документ.
//
// Описание:
//  Формирует отчет Дерево подчиненных документов.
//
Процедура глСформироватьДеревоДокументов(Док)  Экспорт
	
	Если ПустоеЗначение(Док) = 1 Тогда
		Возврат;
	КонецЕсли;
	Если ТипЗначенияСтр(Док) = "Документ" Тогда
		Докум = Док;
	ИначеЕсли ТипЗначенияСтр(Док) = "ГрупповойКонтекст" Тогда
		Если Док.Выбран() = 0 Тогда
			Предупреждение("Выбранный документ еще не записан!");
			Возврат;
		Иначе
			Докум = Док.ТекущийДокумент();
		КонецЕсли;
	Иначе
		Предупреждение("При вызове проц. глСформироватьДеревоДокументов в параметре не передан Документ");
		Возврат;
	КонецЕсли;

	ОткрытьФорму("Отчет.ДеревоДокументов#", Докум);
	
КонецПроцедуры // глСформироватьДеревоДокументов()

//******************************************************************************
// глПечатьОпераций(Конт)
//
// Параметры:
// 	Конт - документ или контекст формы документа.
//
// Описание:
//  Формирует отчет о проводках документа.
//
Процедура глПечатьОпераций(Конт)
	
	Док = Конт;
	Если ПустоеЗначение(Док) = 1 Тогда
		Возврат;
	КонецЕсли;
	Таб = СоздатьОбъект("Таблица");
	Таб.ИсходнаяТаблица("ЖурналОпераций");
	Заголовок = глПредставлениеДокумента(Док);
	Таб.ВывестиСекцию("ОтчетДок");
	Таб.ВывестиСекцию("ШапкаП");
	Таб.Опции(0,0,Таб.ВысотаТаблицы(),0);
	НПП=0;
	Если Док.СуществуетОперация()=1 Тогда
		Опер=Док.Операция;
		Состояние("Вывод "+Опер.ДатаОперации);
		НПП=НПП+1;
		Таб.ВывестиСекцию("Операция");
		Опер.ВыбратьПроводки();
		Пока Опер.ПолучитьПроводку()=1 Цикл
			Таб.ВывестиСекцию("Проводка");
		КонецЦикла;
	КонецЕсли;
	Таб.ВывестиСекцию("КонецОтчета");
	Таб.ТолькоПросмотр(1);
	Таб.Показать("Отчет о движениях документа","");

КонецПроцедуры   // глПечатьОпераций()

//******************************************************************************
// глСоздатьДокументНаОсновании(Конт) 
//
// Параметры:
// 	Конт - документ или контекст формы документа, на основании которого будет
//           вводится новый документ
//
// Описание:
// 	1) Формирует список документов, которые можно ввести на основании данного.
// 	2) Вводится на основании переданного новый документ выбранного вида
//
Процедура глСоздатьДокументНаОсновании(Конт) Экспорт
	
	Перем СписокВидов, ВидПодч;
	
	// ввод документа на основании
	Если НЕ((ТипЗначенияСтр(Конт) = "Документ") ИЛИ (ТипЗначенияСтр(Конт) = "ГрупповойКонтекст")) Тогда
		Сообщить("Ошибка: параметр должен иметь тип значения 'Документ' или 'ГрупповойКонтекст'");
		Возврат;
	Иначе
		Если Конт.Выбран() = 0 Тогда
			Если Вопрос("Нельзя вводить документ на основании не записанного документа!"+РазделительСтрок+
			            "Записать документ?","Да+Нет")="Да" Тогда
				Если Конт.Записать() = 0 Тогда
					Возврат;
				КонецЕсли;
				
			Иначе
				Возврат;
		    КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	СписокВидов = СоздатьОбъект("СписокЗначений");
	ВидДок = Конт.Вид();
	Для х = 1 По Метаданные.Документ(ВидДок).ВводимыеНаОснованииДокументы.Количество() Цикл
		
		Идентификатор = 
			Метаданные.Документ(ВидДок).ВводимыеНаОснованииДокументы.Получить(х).Идентификатор;
			
		Представление = 
			Метаданные.Документ(ВидДок).ВводимыеНаОснованииДокументы.Получить(х).Синоним;
			
		Комментарий = Метаданные.Документ(ВидДок).ВводимыеНаОснованииДокументы.Получить(х).Комментарий;
		Если ПустоеЗначение(Комментарий) = 0 Тогда
			Представление = Представление + " (" + Комментарий + ")";
		КонецЕсли;
			
		СписокВидов.ДобавитьЗначение(Идентификатор, Представление);
	КонецЦикла;
	
	Если СписокВидов.РазмерСписка() = 0 Тогда
		Предупреждение("Нельзя вводить на основании данного вида документа!");
		Возврат;
	КонецЕсли;
	
	Если ТипЗначенияСтр(Конт)="ГрупповойКонтекст" Тогда
		Если Конт.Модифицированность()=1 Тогда
		    Если Вопрос("Изменения в документе не записаны. Это может привести к некорректному"+РазделительСтрок+
			            "заполнению вводимого на основании документа. Записать документ?","Да+Нет")="Да" Тогда
				Конт.Записать();
		    КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	глТекущаяСтрока = Конт.НомерСтроки;
	Если СписокВидов.РазмерСписка() = 1 Тогда
	    ОткрытьФорму("Документ."+СписокВидов.ПолучитьЗначение(1),,Конт.ТекущийДокумент());
		
	Иначе
		Позиция = 0;
		Если СписокВидов.ВыбратьЗначение(ВидПодч,"Выбор вида документа",Позиция) = 1 Тогда
			// Выбрали вид документа
			ОткрытьФорму("Документ."+ВидПодч,,Конт.ТекущийДокумент());
		КонецЕсли;
	КонецЕсли;
	глТекущаяСтрока = 0;
	
КонецПроцедуры // глСоздатьДокументНаОсновании()

//******************************************************************************
// глДействия(Конт, СписокДействий)
//
// Параметры:
//  Конт           - контекст формы документа
//  СписокДействий - список значений, содержащий список возможных действий по документу
//                   вызывается по кнопке "Действия..." в документах и журналах
//
// Описание:
//  Вызывает процедуру, соответствующую пункту меню кнопки "Действия". выбранному
// пользователем.
//
Процедура глДействия(Конт, СписокДействий) Экспорт
	
	Перем Действие;

	Если СписокДействий.ВыбратьЗначение(Действие, , , , 1) = 0 Тогда
		Возврат;
	КонецЕсли;

	Если Действие = "Отчет о движениях документа" Тогда
		глПечатьОпераций(Конт);
		
	ИначеЕсли Действие = "Структура подчиненности" Тогда
		глСформироватьДеревоДокументов(Конт);
		
	ИначеЕсли Действие = "Ввести на основании" Тогда
		глСоздатьДокументНаОсновании(Конт);
		
	ИначеЕсли Действие = "Перейти  в журнал" Тогда
		Если Конт.Выбран() = 0 Тогда
			Предупреждение("Документ не записан!");
		Иначе
			ДокументЖурнала = Конт.ТекущийДокумент();
			ОткрытьФорму("Журнал.Общий",ДокументЖурнала);
		КонецЕсли;
		Если ВосстановитьЗначение("ЗакрыватьДокумент") = 1 тогда
			Конт.Форма.Закрыть()
		КонецЕсли;
		
	КонецЕсли;
	

КонецПроцедуры // глДействия()

//******************************************************************************
Функция глКонтрольДатыДокумента(Конт, НачальнаяДатаДокумента) Экспорт  

	Перем ФлагПрисвоенияНомера; // для возвращаемого значения
    ФлагПрисвоенияНомера=0;

	ПериодСменыНомера = Метаданные.Документ(Конт.Вид()).ПериодичностьНомера;
	Если ПериодСменыНомера = "Год" Тогда
    	РазностьДат = НачГода(НачальнаяДатаДокумента)-НачГода(Конт.ДатаДок);
	ИначеЕсли ПериодСменыНомера = "Квартал" Тогда
    	РазностьДат = НачКвартала(НачальнаяДатаДокумента)-НачКвартала(Конт.ДатаДок);
    ИначеЕсли ПериодСменыНомера = "Месяц" Тогда
        РазностьДат = НачМесяца(НачальнаяДатаДокумента)-НачМесяца(Конт.ДатаДок);
    ИначеЕсли ПериодСменыНомера = "День" Тогда
        РазностьДат = НачальнаяДатаДокумента-Конт.ДатаДок;
    Иначе
        РазностьДат = 0;
    КонецЕсли;

    Если РазностьДат <> 0 Тогда
		Дубликат = СоздатьОбъект("Документ."+Конт.Вид());
        Дубликат.Новый();
        Дубликат.НомерДок = Конт.НомерДок;
        Дубликат.ДатаДок = Конт.ДатаДок;
		Дубликат.УстановитьНовыйНомер("");
		
        Если ( Дубликат.НомерДок <> Конт.НомерДок ) Тогда
			НовыйНомерДок = Дубликат.НомерДок;
			Если Дубликат.НайтиПоНомеру(Дубликат.НомерДок,Дубликат.ДатаДок)=0 Тогда
				Если Вопрос( "Для документов вида """+Конт.ПредставлениеВида()+""" каждый "+Нрег(ПериодСменыНомера)+" нумерация начинается заново."+РазделительСтрок+
							 "Присвоить новый номер?","Да+Нет") = "Да" Тогда
					Конт.НомерДок = НовыйНомерДок;
					ФлагПрисвоенияНомера = 1;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		НачальнаяДатаДокумента = Конт.ДатаДок;
		Конт.Активизировать("НомерДок");
	КонецЕсли;
	
	Возврат ФлагПрисвоенияНомера;
	
КонецФункции // глКонтрольДатыДокумента

//******************************************************************************
Функция глДвижениеПоРасчетномуСчету(Движение) Экспорт
	Если 	  (Движение.ВидДвижения = Перечисление.ВидыДвиженийДенежныхСредств.ВыручкаПоОбычнымВидамДеятельности) или
			  (Движение.ВидДвижения = Перечисление.ВидыДвиженийДенежныхСредств.ВыручкаПоПрочимОперациям) или
			  (Движение.ВидДвижения = Перечисление.ВидыДвиженийДенежныхСредств.ЦелевоеФинансирование) или
			  (Движение.ВидДвижения = Перечисление.ВидыДвиженийДенежныхСредств.БезвозмездныеПоступления) или
			  (Движение.ВидДвижения = Перечисление.ВидыДвиженийДенежныхСредств.КредитыПолученные) или
			  (Движение.ВидДвижения = Перечисление.ВидыДвиженийДенежныхСредств.ЗаймыПолученные) или
			  (Движение.ВидДвижения = Перечисление.ВидыДвиженийДенежныхСредств.ДивидендыПроцентыПолученные) или
			  (Движение.ВидДвижения = Перечисление.ВидыДвиженийДенежныхСредств.СданоВБанкНаличными) или
			  (Движение.ВидДвижения = Перечисление.ВидыДвиженийДенежныхСредств.КупляПродажаИностраннойВалюты) или
			  (Движение.ВидДвижения = Перечисление.ВидыДвиженийДенежныхСредств.ПрочиеПоступления) Тогда
   		Возврат 1;
   		
	ИначеЕсли (Движение.ВидДвижения = Перечисление.ВидыДвиженийДенежныхСредств.ПриобретениеТоваровПродукцииРаботИУслуг) или
			  (Движение.ВидДвижения = Перечисление.ВидыДвиженийДенежныхСредств.ОплатаТруда) или
			  (Движение.ВидДвижения = Перечисление.ВидыДвиженийДенежныхСредств.ПлатежиВСоциальныеФонды) или
			  (Движение.ВидДвижения = Перечисление.ВидыДвиженийДенежныхСредств.ВыданныеПодотчетныеСуммы) или
			  (Движение.ВидДвижения = Перечисление.ВидыДвиженийДенежныхСредств.ДолевоеУчастиеВСтроительстве) или
			  (Движение.ВидДвижения = Перечисление.ВидыДвиженийДенежныхСредств.ПриобретениеМашинОборудованияИТранспортныхСредств) или
			  (Движение.ВидДвижения = Перечисление.ВидыДвиженийДенежныхСредств.ФинансовыеВложения) или
			  (Движение.ВидДвижения = Перечисление.ВидыДвиженийДенежныхСредств.ДивидендыПроцентыВыплаченные) или
			  (Движение.ВидДвижения = Перечисление.ВидыДвиженийДенежныхСредств.ПлатежиВБюджет) или
			  (Движение.ВидДвижения = Перечисление.ВидыДвиженийДенежныхСредств.ВозвратКредитовИЗаймов) или
			  (Движение.ВидДвижения = Перечисление.ВидыДвиженийДенежныхСредств.ПолученоИзБанкаНаличными) или
			  (Движение.ВидДвижения = Перечисление.ВидыДвиженийДенежныхСредств.ПрочиеВыплатыИПеречисления) Тогда
   		Возврат 0;
   		
   	Иначе
   		Возврат -1;
	КонецЕсли;
КонецФункции

//******************************************************************************
Процедура глЗаполнитьСтрокуВыпискиПоПлатежномуДокументу(Конт, ПлатДок, Сумма=0) Экспорт
	Если ПлатДок.Выбран() = 1 Тогда
		Если ПлатДок.Вид() = "ОперацияПоРасчСчету" Тогда
			Назначение = "";
			ВидПлатДок = "";
			Движение = "";
			Если ПлатДок.ПлательщикСчет = Конт.БанковскийСчет Тогда
				Движение = "Списание";
			ИначеЕсли ПлатДок.ПолучательСчет = Конт.БанковскийСчет Тогда
				Движение = "Поступление";
			Иначе
				Сообщить("В документе ""Операция по р/с"" №"+ПлатДок.НомерДок+" от "+ПлатДок.ДатаДок+" не указан банковский счет нашей организации.", "!!");
				Сообщить("По данному документу строка выписки банка не сформирована.", "i");
				Возврат;
			КонецЕсли;                                   
			ПлатДок.ВыбратьСтроки();
			Пока ПлатДок.ПолучитьСтроку() =1 Цикл
				Если Врег(СокрЛП(ПлатДок.Имя)) = "НАЗНАЧЕНИЕПЛАТЕЖА" Тогда
					Назначение = СокрЛП(ПлатДок.Значение);
				КонецЕсли;
				Если Врег(СокрЛП(ПлатДок.Имя)) = "СЕКЦИЯДОКУМЕНТ" Тогда
					ВидПлатДок = Врег(СокрЛП(ПлатДок.Значение));
				КонецЕсли;
			КонецЦикла;
			
			Если      (ВидПлатДок = "ПЛАТЕЖНОЕ ПОРУЧЕНИЕ") Тогда
				ВидПлатДок = "ПлатежноеПоручение";
			ИначеЕсли (ВидПлатДок = "ЗАЯВЛЕНИЕ НА АККРЕДИТИВ") Тогда
				ВидПлатДок = "ЗаявлениеНаАккредитив"; 
			ИначеЕсли (ВидПлатДок = "ПЛАТЕЖНОЕ ТРЕБОВАНИЕ") Тогда
				ВидПлатДок = "ПлатежноеТребование"; 
			ИначеЕсли (ВидПлатДок ="ИНКАССОВОЕ ПОРУЧЕНИЕ") Тогда
				ВидПлатДок = "ИнкассовоеПоручение"; 
			ИначеЕсли (ВидПлатДок ="ПЛАТЕЖНОЕ ТРЕБОВАНИЕ-ПОРУЧЕНИЕ") Тогда
				ВидПлатДок = "ПлатежноеТребованиеПоручение";
			КонецЕсли;
			
		Иначе
			Назначение = ПлатДок.Содержание;
			ВидПлатДок = ПлатДок.Вид();     
			Движение = "";
		КонецЕсли;
		
        Конт.НазначениеПлатежа = Назначение;
		Конт.НазначитьТип("Субконто1", "Справочник.Контрагенты");
		Конт.НазначитьТип("Субконто2", "Справочник.Договоры");
		Если ВидПлатДок = "ПлатежноеПоручение" Тогда
			ПеречислениеНалогов = 0;
			Если Движение = "Поступление" Тогда //Случай входящей платежки (документ "операция по р/с")
				Конт.КоррСчет = СчетПоКоду("62.1");

				Конт.Субконто1 = ПлатДок.Плательщик;
			Иначе
				СпрНалоги = СоздатьОбъект("Справочник.НалогиИОтчисления");
				Если Движение = "Списание" Тогда //Случай обычной платежки (документ "операция по р/с")
					Если ПлатДок.ПолучательСчет.Выбран() = 1 Тогда
						Если СпрНалоги.НайтиПоРеквизиту("РасчетныйСчет", ПлатДок.ПолучательСчет, 1) = 1 Тогда
							Конт.КоррСчет = СпрНалоги.Счет;
							Конт.НазначитьТип("Субконто1", Конт.КоррСчет.ВидСубконто(1));
							Конт.НазначитьТип("Субконто2", Конт.КоррСчет.ВидСубконто(2));
							Конт.НазначитьТип("Субконто3", Конт.КоррСчет.ВидСубконто(3));
							Конт.Субконто1 = СпрНалоги.Субконто1;
							Конт.Субконто2 = СпрНалоги.Субконто2;
							Конт.Субконто3 = СпрНалоги.Субконто3;
							ПеречислениеНалогов = 1;
						КонецЕсли;
					КонецЕсли;
					Если ПеречислениеНалогов = 0 Тогда
						Конт.КоррСчет = СчетПоКоду("60.1");
						Конт.Субконто1 = ПлатДок.Получатель;
					КонецЕсли;			              
				Иначе //Случай обычной платежки (документ "платежное поручение")
					Если ПлатДок.ПеречислениеНалога = 1 Тогда
						Найден = 0;
						Если ПустоеЗначение(СокрЛП(ПлатДок.КодБК)) = 0 Тогда
						    Найден = СпрНалоги.НайтиПоРеквизиту("КодБК", ПлатДок.КодБК, 1);
						КонецЕсли;
						Если (Найден = 0) и (ПлатДок.СчетКонтрагента.Выбран() = 1) Тогда
							Найден = СпрНалоги.НайтиПоРеквизиту("РасчетныйСчет", ПлатДок.СчетКонтрагента, 1);
						КонецЕсли;
						Если Найден = 1 Тогда
							Конт.КоррСчет = СпрНалоги.Счет;
							Конт.НазначитьТип("Субконто1", Конт.КоррСчет.ВидСубконто(1));
							Конт.НазначитьТип("Субконто2", Конт.КоррСчет.ВидСубконто(2));
							Конт.НазначитьТип("Субконто3", Конт.КоррСчет.ВидСубконто(3));
							Конт.Субконто1 = СпрНалоги.Субконто1;
							Конт.Субконто2 = СпрНалоги.Субконто2;
							Конт.Субконто3 = СпрНалоги.Субконто3;
							ПеречислениеНалогов = 1;
						КонецЕсли;
					КонецЕсли;
					Если ПеречислениеНалогов = 0 Тогда
						Конт.КоррСчет = СчетПоКоду("60.1");
						Конт.Субконто1 = ПлатДок.Контрагент;
						Конт.Субконто2 = ПлатДок.Договор;
					КонецЕсли;			              
					Движение = "Списание";
				КонецЕсли;
			КонецЕсли;
			
		ИначеЕсли ВидПлатДок = "ЗаявлениеНаАккредитив" Тогда
			Конт.КоррСчет = СчетПоКоду("60.1");
			Если Движение = "Списание" Тогда
				Конт.Субконто1 = ПлатДок.Получатель;
			Иначе
				Конт.Субконто1 = ПлатДок.Контрагент;
				Движение = "Списание";
			КонецЕсли;
			
		ИначеЕсли ВидПлатДок = "ПлатежноеТребование" Тогда
			Если Движение = "Списание" Тогда
				Конт.НазначитьТип("Субконто1", "");
				Конт.НазначитьТип("Субконто2", "");
			Иначе
				Конт.КоррСчет = СчетПоКоду("62.1");

				Если Движение = "Поступление" Тогда
					Конт.Субконто1 = ПлатДок.Плательщик;
				Иначе
					Конт.Субконто1 = ПлатДок.Контрагент;
				КонецЕсли;
			КонецЕсли;

		КонецЕсли;

		Если Движение = "Списание" Тогда
			Конт.Приход = 0;
			Конт.Расход = Сумма;
		Иначе
			Конт.Приход = Сумма;
			Конт.Расход = 0;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры //глЗаполнитьСтрокуВыпискиПоПлатежномуДокументу 


//******************************************************************************
// глПолноеНаименование(Элемент)
//
// Параметры:      
//    Элемент - элемент справочника, для которого нужно вернуть полное наименование
//
// Возвращаемое значение: 
//  Строка с полным наименованием.
//
// Описание: 
//    Возвращает полное наименование элемента справочника, если у этого вида 
//    справочников есть реквизит ПолнНаименование.
//
Функция глПолноеНаименование(Элемент) Экспорт
 
	Если ПустоеЗначение(Элемент) = 1 Тогда
		Возврат "";
 
	ИначеЕсли Метаданные.Справочник(Элемент.Вид()).Реквизит("ПолнНаименование").Выбран() = 0 Тогда
		Возврат Элемент.Наименование;

	ИначеЕсли ПустаяСтрока(Элемент.ПолнНаименование) = 1 Тогда
		Возврат Элемент.Наименование;

	Иначе
		Возврат Элемент.ПолнНаименование;
	КонецЕсли;
 
КонецФункции // глПолноеНаименование()


//******************************************************************************
// глДатаПриема(Сотрудник)
//
Функция глДатаПриема(Сотрудник) Экспорт
	
	Если ПустоеЗначение(Сотрудник) = 1 Тогда
	    Возврат Дата(0);

	ИначеЕсли Сотрудник.Выбран() = 0 Тогда
	    Возврат Дата(0);
	КонецЕсли;
	
	ДатаПриема = Дата(0);
	ХарактерРаботы = СоздатьОбъект("Периодический");
	ХарактерРаботы.ИспользоватьОбъект("ХарактерРаботы", Сотрудник);
	ХарактерРаботы.ВыбратьЗначения(,);
	Пока ХарактерРаботы.ПолучитьЗначение() = 1 Цикл
		Если (ХарактерРаботы.Значение = Перечисление.ХарактерРаботы.ТрудовойДоговор) или
			 (ХарактерРаботы.Значение = Перечисление.ХарактерРаботы.ДоговорГражданскоПравовогоХарактера) или
			 (ХарактерРаботы.Значение = Перечисление.ХарактерРаботы.ДоговорГражданскоПравовогоХарактераВзносы) Тогда
		    ДатаПриема = ХарактерРаботы.ДатаЗнач;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ДатаПриема;
	
КонецФункции // глДатаПриема()

//******************************************************************************
// глСотрудникЧислитсяРаботающим(Сотр, ДатаЗнач)
//
Функция глСотрудникЧислитсяРаботающим(Сотр, ДатаЗнач) Экспорт
	
	Если ПустоеЗначение(Сотр.ТекущийЭлемент()) = 1 Тогда
	    Возврат 0;

	ИначеЕсли Сотр.Выбран() = 0 Тогда
	    Возврат 0;
	КонецЕсли;
	
	ХарактерРаботы = Сотр.ХарактерРаботы.Получить(НачМесяца(ДатаЗнач));
	Если (ХарактерРаботы = Перечисление.ХарактерРаботы.ТрудовойДоговор) или
		 (ХарактерРаботы = Перечисление.ХарактерРаботы.ДоговорГражданскоПравовогоХарактера) или
		 (ХарактерРаботы = Перечисление.ХарактерРаботы.ДоговорГражданскоПравовогоХарактераВзносы) Тогда
	    Возврат 1;
	КонецЕсли;
	
	ХарактерРаботы = Сотр.ХарактерРаботы.Получить(КонМесяца(ДатаЗнач));
	Если (ХарактерРаботы = Перечисление.ХарактерРаботы.ТрудовойДоговор) или
		 (ХарактерРаботы = Перечисление.ХарактерРаботы.ДоговорГражданскоПравовогоХарактера) или
		 (ХарактерРаботы = Перечисление.ХарактерРаботы.ДоговорГражданскоПравовогоХарактераВзносы) Тогда
	    Возврат 1;
	КонецЕсли;
	
	Если (Сотр.ХарактерРаботы.Получить(НачМесяца(ДатаЗнач)) = Перечисление.ХарактерРаботы.ТрудовыеОтношенияПрекращены) 
	И (Сотр.ХарактерРаботы.Получить(КонМесяца(ДобавитьМесяц(ДатаЗнач,-1))) <> Перечисление.ХарактерРаботы.ТрудовыеОтношенияПрекращены)  Тогда
		Возврат 1;
	КонецЕсли; 
	
	Если (ПустоеЗначение(Сотр.ХарактерРаботы.Получить(НачМесяца(ДатаЗнач))) = 1) 
	И (Сотр.ХарактерРаботы.Получить(КонМесяца(ДатаЗнач)) = Перечисление.ХарактерРаботы.ТрудовыеОтношенияПрекращены) Тогда
		Возврат 1;
	КонецЕсли;
	
	Возврат 0;
	
КонецФункции // глСотрудникЧислитсяРаботающим()

// УПРАВЛЕНИЕ ПЕЧАТНЫМИ ФОРМАМИ
//
//******************************************************************************
// глНайтиВнешнююПечФорму(Текст, ТекущийВидОбъекта, Название="", Кнопка="")
//
// Параметры: 
//  Текст             - Объект типа "Текст", содержащий текст файла описания внешней печатной формы
//  ТекущийВидОбъекта - текущий вид объекта ("Документ.ПоступлениеТМЦ"),
//                      запись про который ищем в тексте описания,
//                      если пусто, то считаем, что позвали для заполнения
//                      по тексту описания колонок "Название" и "Кнопка"
//  Название          - необязательноый параметр, переменная для возвращаемого
//                      значения названия внешней печатной формы
//
//  Кнопка            - необязательноый параметр, переменная для возвращаемого
//                      значения заголовка кнопки печати
//
// Возвращаемое значение:
//  1- если есть упоминание про текущий вид объекта в тексте описания,
//     т.е. данная обработка зарегистрирована для печати по контексту этого объекта, 
//  0- если нет
//
// Описание:
//  Определяет данная обработка зарегистрирована для печати по контексту этого объекта 
//  или нет, попутно заполняет значение колонок "Название" и "Кнопка"
//
Функция глНайтиВнешнююПечФорму(Текст, ТекущийВидОбъекта, Название="", Кнопка="") Экспорт
	Перем Рез;
	Рез = 0;
	Для Инд=1 По Текст.КоличествоСтрок() Цикл
		Стр=Текст.ПолучитьСтроку(Инд);
		Поз=Найти(Стр,"=");
		Если Поз>0 Тогда
			Имя=Лев(Стр,Поз-1);
			Стр=Сред(Стр,Поз+1);
			Если Имя="Объект" Тогда
				
				// Если текущий вид объекта не задан, то хотят считать Название и кнопку
				Если ПустоеЗначение(ТекущийВидОбъекта) = 0 Тогда
	
					// Найдем в этой строке запись про текущий объект
					Если Найти(Стр,ТекущийВидОбъекта) = 0 Тогда;
						Прервать // Не нашли;
					Иначе 
						Рез = 1;
					КонецЕсли;
				КонецЕсли;
					
			ИначеЕсли Имя="Название" Тогда
				Название = Стр;
			ИначеЕсли Имя="Кнопка" Тогда
				Кнопка = Стр;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;   
	Возврат Рез;
КонецФункции // глНайтиВнешнююПечФорму() 

//******************************************************************************
// глПолучитьТекущуюПечФорму(ВидОбъекта, ТаблицаПечФорм)
//
// Параметры:
//  ВидОбъекта    - Вид объекта ("Документ.Реализация", "Элемент.Номенклатура" и т.д.),
//                  для которого надо получить печатную форму по умолчанию
//  ТаблицаПечФорм - таблица значений, содержащая список печатных форм для объекта требуемого вида
//  
//
// Возвращаемое значение:
//  Номер строки в таблице печатных форм, 0 в случае ошибки.
//
// Описание:
//  Получает из текущих настроек пользователя номер текущей печатной 
//  формы и пытается найти его в таблице форм. Если не найдено, 
//  то берется первая форма и сохраняется в настройках
//  пользователя.
//  
Функция глПолучитьТекущуюПечФорму(ВидОбъекта, ТаблицаПечФорм) Экспорт
	
	Перем ИмяПечФормы, НомерСтроки;
	
	НомерСтроки = 0;
	
	Если ТаблицаПечФорм.КоличествоСтрок() > 0 Тогда
		ИмяПечФормы	= ВосстановитьЗначение(ВидОбъекта + "ПечФорма");
		
		// пытаемся найти форму в списке
		Если ПустоеЗначение(ИмяПечФормы) = 0 Тогда   
			ТаблицаПечФорм.НайтиЗначение(ИмяПечФормы, НомерСтроки, "Название");
		КонецЕсли;
		
		Если НомерСтроки = 0 Тогда
			// текущая печатная форма еще не найдена
			// установим по умолчанию первую из списка
			ПечФорма = ТаблицаПечФорм.ПолучитьЗначение(1, "Название");
			СохранитьЗначение(ВидОбъекта + "ПечФорма", ПечФорма);
			НомерСтроки = 1;
		КонецЕсли;
		
		// если задано имя файла, то форма внешняя, а для внешней формы нужно 
		// проверить наличие файла внешней обработки.
		Файл = ТаблицаПечФорм.ПолучитьЗначение(НомерСтроки, "Файл");
		Если ПустоеЗначение(Файл) = 0  Тогда
			Если ФС.СуществуетФайл(глКаталогПечФорм + Файл) = 0 Тогда
				Предупреждение("Выбранная обработка в каталоге внешних обработок печатных форм отсутствует!", 60 );
				НомерСтроки = 0;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат НомерСтроки;
	
КонецФункции // глПолучитьТекущуюПечФорму()

//******************************************************************************
// глУстановкаКнопкиПечать(Конт, ВидОбъекта, ТаблицаПечФорм)
//
// Параметры: 
//  Конт            - контекст формы документа,
//  ВидОбъекта      - вид объекта ("Документ.Реализация", "Элемент.Номенклатура" и т.д.),
//  ТаблицаПечФорм  - таблица значений, которую надо заполнить 
//
// Возвращаемое значение:
//  Номер текущей печатной формы
//
// Описание:
//  Вызывается при открытии формы документа, формирует таблицу печатных форм,
//  добавляя туда предопределенную (в модуле документа), устанавливает заголовок кнопки печать
//
Функция глУстановкаКнопкиПечать(Конт, ВидОбъекта, ТаблицаПечФорм) Экспорт
	Перем Название, Кнопка;
	
    // Дополним таблицу печатных форм внешними обработками из предопределенного
	// каталога ExtForms\PrnForms
	Текст = СоздатьОбъект("Текст");
	ФайлОписания = ФС.НайтиПервыйФайл(глКаталогПечФорм+"*.efd");
	
	Пока ПустаяСтрока(ФайлОписания)=0 Цикл
		Текст.Открыть(глКаталогПечФорм+ФайлОписания);
	    
		// Устанавливаем расширение 
		Файл = Лев(ФайлОписания,СтрДлина(ФайлОписания) - 4) + "." + "ert";
		Если ФС.СуществуетФайл(глКаталогПечФорм + Файл) = 1 Тогда
				
			// Внешний файл, соответствующий файлу описания, найден.
			// Проверим, в нем что есть запись про текущий объект
			Если глНайтиВнешнююПечФорму(Текст, """" + ВидОбъекта + """", Название, Кнопка) = 1 Тогда
			    
				// Добавляем строку в список внешних файлов
				ТаблицаПечФорм.НоваяСтрока();
				ТаблицаПечФорм.Название     = Название;
				ТаблицаПечФорм.Кнопка       = Кнопка;
				ТаблицаПечФорм.Файл         = Файл;
				ТаблицаПечФорм.ФайлОписания = (ФайлОписания);
				
			КонецЕсли;
			
		КонецЕсли;
		
		ФайлОписания = ФС.НайтиСледующийФайл();
		
	КонецЦикла;
                       
	НомерСтроки = глПолучитьТекущуюПечФорму(ВидОбъекта, ТаблицаПечФорм);
	Если НомерСтроки = 0 Тогда
		ЗагловокКнПечать = "Печать";
	Иначе
	    ЗагловокКнПечать = ТаблицаПечФорм.ПолучитьЗначение(НомерСтроки, "Кнопка");
	КонецЕсли;
	Конт.Форма.кнПечать.Заголовок(ЗагловокКнПечать);
	
	Возврат НомерСтроки;
	
КонецФункции // глУстановкаКнопкиПечать()

//******************************************************************************
// глВыборПечатнойФормы(ВидОбъекта, ТаблицаПечФорм)
//   
// Параметры:
//  ВидОбъекта    - Вид объекта ("Документ.Реализация", "Элемент.Номенклатура" и т.д.),
//                  для которого надо получить печатную форму по умолчанию
//  ТаблицаПечФорм - таблица значений, содержащая список печатных форм для объекта требуемого вида
//  
// Возвращаемое значение:
//  Имя кнопки печатной формы
//
// Описание:
//  Открывает форму выбора из списка печатных форм. Выбранное значение
//  сохраняет в настройках пользователя
//
Функция глВыборПечатнойФормы(ВидОбъекта, ТаблицаПечФорм) Экспорт
	Перем НомерСтроки;
	
	НомерСтроки = 0;
	
	КолвоФорм = ТаблицаПечФорм.КоличествоСтрок();
	Поз = Найти(ВидОбъекта, ".");
	Вид = Лев(ВидОбъекта, Поз - 1);
	Если КолвоФорм = 0 Тогда
		
		Если НРег(Вид) = "документ" Тогда
			Текст = "Для документа не зарегистрировано ни одной печатной формы.";
		ИначеЕсли НРег(Вид) = "справочник" Тогда
			Текст = "Для списка справочника не зарегистрировано ни одной печатной формы.";
		Иначе
			Текст = "Для элемента справочника не зарегистрировано ни одной печатной формы.";
		КонецЕсли;
		
		Предупреждение(Текст, 60);
		
	ИначеЕсли КолвоФорм = 1 Тогда
		НомерСтроки = 1;
		
		Если НРег(Вид) = "документ" Тогда
			Текст = "Для документа";
		ИначеЕсли НРег(Вид) = "справочник" Тогда
			Текст = "Для списка справочника";
		Иначе
			Текст = "Для элемента справочника";
		КонецЕсли;
		
		Текст = Текст + " зарегистрирована только одна печатная форма. 
		                |Для регистрации дополнительных печатных форм воспользуйтесь 
						|пунктом ""Регистрация внешних печатных форм"" в меню ""Сервис"".";

		Предупреждение(Текст ,60);
	Иначе
		ИмяПечФормы	= ВосстановитьЗначение(ВидОбъекта + "ПечФорма");
		
		// выбираем печатную форму
		СписокПечФорм = СоздатьОбъект("СписокЗначений");
		ТаблицаПечФорм.Выгрузить(СписокПечФорм,,,"Название");
		
		Если СписокПечФорм.ВыбратьЗначение(ИмяПечФормы, "", НомерСтроки, 60, 1) = 1 Тогда
			ПечФорма = ТаблицаПечФорм.ПолучитьЗначение(НомерСтроки, "Название");
			СохранитьЗначение(ВидОбъекта + "ПечФорма", ПечФорма);
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат НомерСтроки;
	
КонецФункции // глВыборПечатнойФормы()
              
// УПРПАВЛЕНИЕ ВИЛИМОСТЬЮ КОЛОНОК В СПРАВОЧНИКАХ
//
//******************************************************************************
// глУстановитьВидимостьКолонок(Конт, ИдентификаторФормы, НачальныйСписок, ПриОткрытии=0)
//
// Параметры:
//  Конт - контекст формы справочника, из которого вызвана процедура.
//  ИдентификаторФормы - уникальный идентификатор формы из которой выполнен вызов, используется
//						  для сохранения пользовательских настроек.
//  НачальныйСписок 	- список колонок видимость которых подлежит настройке 
//  ПриОткрытии			- признак того что вызов процедуры был сделан при открытии формы  
//
Процедура глУстановитьВидимостьКолонок(Конт, гИдентификаторФормы, НачальныйСписок, ПриОткрытии=0)	Экспорт
	
	Перем СписокКолонок, ТекущаяКолонка, ИдКолонки, Колонка;
	Если ПриОткрытии=0 Тогда
		
		СписокПараметров= СоздатьОбъект("СписокЗначений");
		СписокПараметров.ДобавитьЗначение(Конт);
		СписокПараметров.ДобавитьЗначение(гИдентификаторФормы);
		СписокПараметров.ДобавитьЗначение(НачальныйСписок);
		ОткрытьФормуМодально("Обработка.НастройкаКолонок",СписокПараметров);
	Иначе
		СписокКолонок	=	ВосстановитьЗначение("СписокКолонок_" + гИдентификаторФормы);
		ТекущаяКолонка	=	ВосстановитьЗначение("ТекущаяКолонока_" + гИдентификаторФормы);
		Если ПустоеЗначение(СписокКолонок) = 1 Тогда
			НачальныйСписок.Выгрузить(СписокКолонок);
			СохранитьЗначение("СписокКолонок_" + гИдентификаторФормы,	СписокКолонок);
		ИначеЕсли ТипЗначенияСтр(СписокКолонок) = "СписокЗначений" Тогда
			Если СписокКолонок.ВСтрокуСРазделителями() <> НачальныйСписок.ВСтрокуСРазделителями() Тогда
				НачальныйСписок.Выгрузить(СписокКолонок);
				СохранитьЗначение("СписокКолонок_" + гИдентификаторФормы,	СписокКолонок);
			КонецЕсли;
		КонецЕсли;
		Для Сч = 1 По СписокКолонок.РазмерСписка() Цикл
			ИдКолонки	=	СписокКолонок.ПолучитьЗначение(Сч);
			Попытка 
				Колонка	= Конт.Форма.ПолучитьАтрибут(ИдКолонки);
			Исключение
				Сообщить(ИдКолонки);
			КонецПопытки;
			
			Если СписокКолонок.Пометка(Сч) = 1 Тогда
				Колонка.Видимость(1);
				Если ИдКолонки = ТекущаяКолонка Тогда
					Конт.Активизировать(ИдКолонки,0);				
				КонецЕсли;
			Иначе
				Колонка.Видимость(0);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;

КонецПроцедуры // глУстановитьВидимостьКолонок

//******************************************************************************
//******************************************************************************
// ПРОЦЕДУРЫ И ФУНКЦИИ ИСПОЛЬЗУЕМЫЕ ДЛЯ ЦЕЛЕЙ НАЛОГОВОГО УЧЕТА
//
///////////////////////////////////////////////////////////////////////////////
//  РАСЧЕТ СТОИМОСТИ МПЗ ДЛЯ ЦЕЛЕЙ НАЛОГОВОГО УЧЕТА
//

////******************************************************************************
// глСоздатьТаблицуОбъектов()
//
// Параметры:
//  Нет.
//
// Возвращаемое значение:
//  Таблица значений - созданная пустая таблица.
//
// Вызывается из формул элементов диалога:
//  Нет.
//
// Описание:
//  Создается пустая таблица для отражения объектов и операций по ним.
//
Функция глСоздатьТаблицуОбъектов() Экспорт
	
	ТаблицаОбъектов = СоздатьОбъект("ТаблицаЗначений");
	ТаблицаОбъектов.НоваяКолонка("Объект");
	ТаблицаОбъектов.НоваяКолонка("Количество", "Число", 14, 3);
	ТаблицаОбъектов.НоваяКолонка("Сумма", "Число", 15, 2);
	ТаблицаОбъектов.НоваяКолонка("КоличествоТоваровОтгруженных", "Число", 14, 3);
	ТаблицаОбъектов.НоваяКолонка("СуммаТоваровОтгруженных", "Число", 15, 2);
	ТаблицаОбъектов.НоваяКолонка("НачДата", "Дата");
	ТаблицаОбъектов.НоваяКолонка("КонДата", "Дата");
	ТаблицаОбъектов.НоваяКолонка("РассчитаноНаДату", "Дата");
	ТаблицаОбъектов.НоваяКолонка("Рассчитывается", "Число", 1, 0);
	ТаблицаОбъектов.НоваяКолонка("ТаблицаОперацийПоОбъекту", "ТаблицаЗначенний");
	ТаблицаОбъектов.НоваяКолонка("ТаблицаОперацийДляТоваровОтруженных", "ТаблицаЗначенний");
	
	Возврат ТаблицаОбъектов
	
КонецФункции // глСоздатьТаблицуОбъектов()

//******************************************************************************
// глПолучитьСтрокуПоЗначению()
//
// Параметры:
//  Табл - таблица значений - исходная таблица.
//  Значение - значение которое необходимо найти в таблице
//  Колонка - строка (число) - идентификатор колонки (номер) в которой
//  необходимо произвести поиск значения.
//
// Возвращаемое значение:
//  1 - значение наййдено.
//  0 - значение не найдено
//
// Вызывается из формул элементов диалога:
//  Нет.
//
// Описание:
//  Ищет в указанной колонке таблицы зачение и строку в которой найдено это значение устанавливает текущущей.
//
Функция глПолучитьСтрокуПоЗначению(Табл, Значение, Колонка) Экспорт
	
	НомерСтр = "";
	Если Табл.НайтиЗначение(Значение, НомерСтр, Колонка) = 1 Тогда
		Табл.ПолучитьСтрокуПоНомеру(НомерСтр);
	    Возврат 1;
		
	Иначе
		Возврат 0;
	КонецЕсли;
	
КонецФункции // глПолучитьСтрокуПоЗначению()

//******************************************************************************
// глЗаполнитьНачальныеОстатки()
//
// Параметры:
//  ТаблицаОбъектов - Таблица значений -  таблица содержащая информацию об объектах(МПЗ).
//  БухИт - Бухгалтерские итоги - рассчитанные бух. итоги для получния информации о
//          начальных остатках по объекту.
//  БухИтТоварыОтгруженные - Бухгалтерские итоги - рассчитанные бух. итоги для получния информации о
//          начальных остатках по объекту (как товар ранее отгруженный без перехода права собственности).
//  УчитыватьТоварыОтргуженные  - Число - режим учета товаров отгруженных.
// 
// Вызывается из формул элементов диалога:
//  Нет.
//
// Описание:
//  Заносит в таблицу начальныые остатки по объекту.
//
Процедура глЗаполнитьНачальныеОстатки(ТаблицаОбъектов, БухИт, БухИтТоварыОтгруженные, УчитыватьТоварыОтргуженные)
	
	Объект = ТаблицаОбъектов.Объект;
    Если БухИт.ПолучитьСубконто(,,Объект) = 1 Тогда 
		БухИт.ВыбратьСчета();
		Пока БухИт.ПолучитьСчет() = 1 Цикл
			КодСчета = БухИт.Счет.Код;
		    Если Найти(КодСчета, "Н02.04") <> 0 Тогда // счет учета товаров отгруженных для целей налогового учета
		        ТаблицаОбъектов.СуммаТоваровОтгруженных = БухИт.СНД();
				
			ИначеЕсли Найти(КодСчета, "Н") <> 0 Тогда // счет учета объекта для целей налогового учета 
				ТаблицаОбъектов.Сумма = БухИт.СНД();
				
			Иначе // счет учета объекта в бух. учете
				ТаблицаОбъектов.Количество = БухИт.СНД("К");
				
		    КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	        
	Если УчитыватьТоварыОтргуженные = 1 Тогда
		Если БухИтТоварыОтгруженные.ПолучитьСубконто(,,Объект) = 1 Тогда 
			ТаблицаОбъектов.КоличествоТоваровОтгруженных = БухИтТоварыОтгруженные.СНД("К");	
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры // глЗаполнитьНачальныеОстатки()

//******************************************************************************
// глПоместитьНовыйОбъектВТаблицу()
//
// Параметры:
//  ТаблицаОбъектов - Таблица значений -  таблица содержащая информацию об объектах(МПЗ).
//  Объект - Справочник - объект, который отсутствует в таблице, но его необходимо туда поместить.
//  НачДата - Дата - дата начиная с которой будут помещениы в таблицу операции по объекту.
//  КонДата - Дата - по которую будут помещениы в таблицу операции по объекту.
//  УчитыватьТоварыОтргуженные  - Число - режим учета товаров отгруженных.
//  БухИт - Бухгалтерские итоги - рассчитанные бух. итоги для получния информации о
//          начальных остатках по объекту.
//  БухИтТоварыОтгруженные - Бухгалтерские итоги - рассчитанные бух. итоги для получния информации о
//          начальных остатках по объекту (как товар ранее отгруженный без перехода права собственности).
//
// Вызывается из формул элементов диалога:
//  Нет.
//
// Описание:
//  Записывает в таблицу новый объект.
//
Процедура глПоместитьНовыйОбъектВТаблицу(ТаблицаОбъектов, Объект, НачДата, КонДата, УчитыватьТоварыОтргуженные = 0, БухИт, БухИтТоварыОтгруженные = "") Экспорт
	
    ТаблицаОбъектов.НоваяСтрока();
	ТаблицаОбъектов.Объект     = Объект;
	ТаблицаОбъектов.НачДата    = НачДата;
	ТаблицаОбъектов.КонДата    = КонДата;
	             
	// таблица в которой будутотражаться движения по данному объекту по дням
	ТаблицаОперацийПоОбъекту = СоздатьОбъект("ТаблицаЗначений");
	ТаблицаОперацийПоОбъекту.НоваяКолонка("ДатаОперации", "Дата");
	ТаблицаОперацийПоОбъекту.НоваяКолонка("КоличествоНаКонецДня", "Число", 14, 3);
	ТаблицаОперацийПоОбъекту.НоваяКолонка("СуммаНаКонецДня", "Число", 15, 2);
	ТаблицаОперацийПоОбъекту.НоваяКолонка("Цена", "Число", 15, 2); // цена на конец дня
	ТаблицаОперацийПоОбъекту.НоваяКолонка("ТаблицаОперацийЗаДень", "ТаблицаЗначений"); // таблица движений за определенный день  
	ТаблицаОбъектов.ТаблицаОперацийПоОбъекту = ТаблицаОперацийПоОбъекту;
	
	Если УчитыватьТоварыОтргуженные = 1 Тогда
	    ТаблицаОперацийДляТоваровОтруженных = СоздатьОбъект("ТаблицаЗначений");
		
		// Для товаров отгруженных формируется отдельная таблица движений, ее
		// структура такая же как и для товаров на складах.
		ТаблицаОперацийДляТоваровОтруженных.Загрузить(ТаблицаОперацийПоОбъекту);
		ТаблицаОбъектов.ТаблицаОперацийДляТоваровОтруженных= ТаблицаОперацийДляТоваровОтруженных;
	КонецЕсли;
	
	// заполним начальные остатки по объекту.
	глЗаполнитьНачальныеОстатки(ТаблицаОбъектов, БухИт, БухИтТоварыОтгруженные, УчитыватьТоварыОтргуженные);
	
КонецПроцедуры // глПоместитьНовыйОбъектВТаблицу()
          
//******************************************************************************
// глДобавитьВТаблицуДень()
//
// Параметры:
//  ТаблицаОперацийПоОбъекту - Таблица значений - таблица в которой оражается информация по объекту по дням.
//  ДатаОперации - Дата - дата, за которую в таблице нет информации, котороую необходимо добавить в нее.
//  ТипОбъекта - Число - тип объекта (0 - материал, 1 - покупной товар, 2 - продукция)
//
// Вызывается из формул элементов диалога:
//  Нет.
//
// Описание:
//  Добавляет в таблицу день.
//
Процедура глДобавитьВТаблицуДень(ТаблицаОперацийПоОбъекту, ДатаОперации, ТипОбъекта) 
	
	ТаблицаОперацийЗаДень = СоздатьОбъект("ТаблицаЗначений");
	ТаблицаОперацийЗаДень.НоваяКолонка("КодОперации", "Число", 1, 0);
	ТаблицаОперацийЗаДень.НоваяКолонка("Документ", "Документ");
	ТаблицаОперацийЗаДень.НоваяКолонка("СтрокаДокумента", "Число", 4, 0);
	ТаблицаОперацийЗаДень.НоваяКолонка("Количество", "Число", 14, 3);
	ТаблицаОперацийЗаДень.НоваяКолонка("Сумма", "Число", 15, 2);
	
	Если ТипОбъекта = 2 Тогда // для продукции дополнительная графа в которой отражается реальная дата операции
	    ТаблицаОперацийЗаДень.НоваяКолонка("ДатаОперации", "Дата");
	КонецЕсли;
	
    ТаблицаОперацийПоОбъекту.НоваяСтрока();
	ТаблицаОперацийПоОбъекту.ДатаОперации = ДатаОперации;
	ТаблицаОперацийПоОбъекту.ТаблицаОперацийЗаДень = ТаблицаОперацийЗаДень;
	
КонецПроцедуры // глДобавитьВТаблицуДень()

//******************************************************************************
// глПолучитьКодОперации()
//
// Параметры:
//  ВидДвижения - Перечисление.УсловияВыбытияИмущества - для определения возврата МПЗ поставщику.
//  Документ - "Документ - документ, котрым отражено движение МПЗ.
//
// Возвращаемое значение:
//  Число - код операции.
//
// Вызывается из формул элементов диалога:
//  Нет.
//
// Описание:
//  Определяет код операции.
//
Функция глПолучитьКодОперации(ВидДвижения, Документ)
	
	// Коды операций:
	//	1 - расходы, связанные с приобретением имущества;
	//  2 - расходы, всязанные с выпуском продукции (распределение счета Н01.05); 
	//  3 - отгрузка товаров без перехода права соьбственности (для отгруженных товаров)
	//  4 - возврат поставщику;
	//  5 - отгрузка товаров без перехода права собственнности (для товаров на складах);
	//	6 - списание;
	//  9 - ручная корректировка.
	
	КодОперации = 9;
			
	Если Документ.Вид() = "СписаниеМатериаловТоваровПродукции" Тогда
			КодОперации = 6;
		
	ИначеЕсли Документ.Вид() = "ОперацииВыбытияИмущества" Тогда
			
		//Если возврат поставщику.
		Если (ВидДвижения  = Перечисление.УсловияВыбытияИмущества.ВозвратТоваровПоставщику)
			или (ВидДвижения  = Перечисление.УсловияВыбытияИмущества.ВозвратМатериаловПоставщику) Тогда
			КодОперации = 4;
			  
		Иначе             
			КодОперации = 6;
		КонецЕсли;
	КонецЕсли;
	
	Возврат КодОперации;
	
КонецФункции // глПолучитьКодОперации()

//******************************************************************************
// глЗаполнитьТаблицуОперациями()
//
// Параметры:
//  ТаблицаОбъектов - Таблица значений -  таблица содержащая информацию об объектах(МПЗ)
//  Объекты - Элемент справочника (строка) - объект, операции по которому необходимо поместить в таблицу,
//            либо название вида МПЗ, операции по элементам которого необходимо поместить в таблицу.
//  НачДата - Дата - дата, начая с которой должны быть обработаны операции.
//  КонДата - Дата - дата, по которую должны быть обработаны операции.
//  УчитыватьТоварыОтргуженные - Число - определяет надо ли помещать в таблицу оперции по товарам отгруженным
//                               (0 - не надо; 1 - надо).
//  ПоВсемОбъектам - Число - определяет надо ли помещать в таблицу информацию об объектах по которым
//                   не было движений, но они есть на складе.
//  СтатусРасчетаПродукции - Число - режим расчета продукции (
//                           0 - продукция не может быть рассчитана
//                           1 - расчет производится из докуменета "Регламентные операции по налоговому учету",
//                           если выбрана операция "Расчет стоимости продукции";
//                           2 - расчет продукции из регистра;
//                           3 - расчет производится из докуменета "Регламентные операции по налоговому учету",
//                           если не выбрана операция "Расчет стоимости продукции")
//
// Вызывается из формул элементов диалога:
//  Нет.
//
// Описание:
//  Зполняет таблицу информацией об определенных объектах (МПЗ) и движениями связанными с ними.
//
Процедура глЗаполнитьТаблицуОперациями(ТаблицаОбъектов, Объекты, знач НачДата, КонДата, УчитыватьТоварыОтргуженные = 0, ПоВсемОбъектам = 0, СтатусРасчетаПродукции) Экспорт
	
	// ФОРМИРОВАНИЕ УСЛОВИЯ ЗАПРОСА (ФИЛЬТР ПО ОБЪЕКТАМ) И ВЫПОЛНЕНИЯ БУХ. ЗАПРСА ДЛЯ ПОЛУЧЕНИЯ НАЧАЛЬНЫХ ОСТАТКОВ
	БухИтТоварыОтгруженные = СоздатьОбъект("БухгалтерскиеИтоги");
	БухИт = СоздатьОбъект("БухгалтерскиеИтоги");
	
	ОтбиратьПоОбъекту = ПолучитьПустоеЗначение();
	
	Если ТипЗначенияСтр(Объекты) = "Справочник" Тогда // в таблицу поместить конкретный переданный в процедуру объект
		ТекстУсловия = "Условие (Объект в Объекты );";
		
		ВидСубконто = ВидыСубконто.ЗначениеПоИдентификатору(Объекты.Вид());
		ОтбиратьПоОбъекту = Объекты;
		
		Если Объекты.Вид() = "Материалы" Тогда
			ТипОбъекта = 0;
			СчетаУчета = "10, Н02.01";
			
		Иначе // номенклатура                                         
			
			Если Объекты.ТипНоменклатуры = Перечисление.ТипыНоменклатуры.Товар Тогда
				ТипОбъекта = 1;
				СчетаУчета = "41, Н02.02.1";
				
			Иначе // продукция
				ТипОбъекта = 2;
				СчетаУчета = "43, Н02.03";
				КонДата = КонМесяца(КонДата);
			КонецЕсли;
		КонецЕсли;
		                                    
		// если объект уже есть в таблице, то заполним таблицу операциями за еще не заполненный преиод
		НомерСтр = "";
		Если глПолучитьСтрокуПоЗначению(ТаблицаОбъектов, Объекты, "Объект") = 1 Тогда
			НачДата = ТаблицаОбъектов.КонДата + 1;
			ТаблицаОбъектов.КонДата = КонДата;
		КонецЕсли;
		
	ИначеЕсли Объекты = "Материалы" Тогда // заполнить таблицу операциями по всем материалам
		ТипОбъекта = 0;
		ТекстУсловия = "Условие(Объект.Вид() = ""Материалы"");";
		
		СчетаУчета = "10, Н02.01";
		ВидСубконто = ВидыСубконто.Материалы;
		
	ИначеЕсли Объекты = "Товары" Тогда // заполнить таблицу операциями по всем покупным товарам
		ТипОбъекта = 1;
		ТекстУсловия = "Условие(Объект.Вид() = ""Номенклатура"");
						|Условие(Объект.ТипНоменклатуры = Перечисление.ТипыНоменклатуры.Товар);";
						
		СчетаУчета = "41, Н02.02.1";
		ВидСубконто = ВидыСубконто.Номенклатура;
						
	ИначеЕсли Объекты = "Продукция" Тогда // заполнить таблицу операциями по всем товарам, собственного производства
		ТипОбъекта = 2;
		ТекстУсловия =  "Условие(Объект.Вид() = ""Номенклатура"");
						|Условие(Объект.ТипНоменклатуры = Перечисление.ТипыНоменклатуры.Продукция);";
		СчетаУчета = "43, Н02.03";
		ВидСубконто = ВидыСубконто.Номенклатура;
		КонДата = КонМесяца(КонДата);
	КонецЕсли;
	
	Если УчитыватьТоварыОтргуженные = 1 Тогда
		СчетаУчета = СчетаУчета + ",Н02.04";
	КонецЕсли;
	                                                                                
	БухИт.ИспользоватьСубконто(ВидСубконто, ОтбиратьПоОбъекту);
	БухИт.ВыполнитьЗапрос(НачДата, НачДата, СчетаУчета);
	                           
	// Для продукции и покупных товаров необходимо заполнить таблицу операцими,
	// связанными с товарами отгруженными.
	Если ТипОбъекта <> 0 Тогда 
		БухИтТоварыОтгруженные.ИспользоватьСубконто(ВидСубконто, ОтбиратьПоОбъекту);
		БухИтТоварыОтгруженные.ВыполнитьЗапрос(НачДата, КонДата, "45",,,, "Операция","К");
	КонецЕсли;
	        
	Если ТипЗначенияСтр(Объекты) = "Справочник" Тогда // заполнение ведется по одному объекту
		Если ТаблицаОбъектов.Объект <> Объекты Тогда // ранее не был найден данный объект в таблице
	    	глПоместитьНовыйОбъектВТаблицу(ТаблицаОбъектов, Объекты, НачДата, КонДата, УчитыватьТоварыОтргуженные, БухИт, БухИтТоварыОтгруженные);
		КонецЕсли;
		
	ИначеЕсли ПоВсемОбъектам = 1 Тогда // в таблицу должны попасть еще те объекты, по которым нет движений, но они есть на складе
	    БухИт.ВыбратьСубконто();
		Пока БухИт.ПолучитьСубконто() = 1 Цикл         
			Объект = БухИт.Субконто();
		    глПоместитьНовыйОбъектВТаблицу(ТаблицаОбъектов, Объект, НачДата, КонДата, УчитыватьТоварыОтргуженные, БухИт, БухИтТоварыОтгруженные);
		КонецЦикла;
	КонецЕсли;
	
	Запрос = СоздатьОбъект("Запрос");
	
	// ЗАПОЛНИТЬ ТАБЛИЦУ ОПЕРАЦИЯМИ РАСХОДА ПО ПРИОБРЕТЕНИЮ ИМУЩЕСТВА
	ТекстЗапроса = 
	"//{{ЗАПРОС(РасходыНаПриобретение)
	|Период с НачДата по КонДата;
	
	|Док = Документ.СписаниеМатериаловТоваровПродукции.ТекущийДокумент,
	|      Документ.РасходыНаОплатуТруда.ТекущийДокумент,
	|      Документ.НачислениеНалогов.ТекущийДокумент,
	|      Документ.ОперацииПриобретенияИмущества.ТекущийДокумент;
	|Объект = Документ.СписаниеМатериаловТоваровПродукции.Объект,
	|      Документ.ОперацииПриобретенияИмущества.Объект,
	|      Документ.РасходыНаОплатуТруда.Объект,
	|      Документ.НачислениеНалогов.Объект;
	|Количество = Документ.СписаниеМатериаловТоваровПродукции.Количество,
	|      Документ.ОперацииПриобретенияИмущества.Количество;
	|Сумма = Документ.ОперацииПриобретенияИмущества.Сумма,
	|      Документ.РасходыНаОплатуТруда.Сумма,
	|      Документ.НачислениеНалогов.СуммаНалога;                           
	
	|Группировка Объект без упорядочивания;
	|Группировка День;
	|Группировка Документ;
	|Группировка СтрокаДокумента;
	|"; 
	
	ТекстЗапроса = ТекстЗапроса + ТекстУсловия;
	
	Запрос.Выполнить(ТекстЗапроса);
	
	КодОперации = 1; // для всех операций, вошедших запрос, код операции = 1 (расходы на приобретение МПЗ)
	Пока Запрос.Группировка("Объект") = 1 Цикл             
		Объект = Запрос.Объект;
		Если глПолучитьСтрокуПоЗначению(ТаблицаОбъектов, Объект, "Объект") = 0 Тогда
			глПоместитьНовыйОбъектВТаблицу(ТаблицаОбъектов, Объект, НачДата, КонДата, УчитыватьТоварыОтргуженные, БухИт, БухИтТоварыОтгруженные);
		КонецЕсли;
		ТаблицаОперацийПоОбъекту = ТаблицаОбъектов.ТаблицаОперацийПоОбъекту;
		
		Пока Запрос.Группировка("День") = 1 Цикл                                                                                         
			ДатаОперации = Запрос.День;
			
			// Для продукции все операции отражаются последним днем месяца
			НайтиДату = ?(ТипОбъекта = 2, КонМесяца(ДатаОперации), ДатаОперации);
			Если глПолучитьСтрокуПоЗначению(ТаблицаОперацийПоОбъекту, НайтиДату, "ДатаОперации") = 0 Тогда
				глДобавитьВТаблицуДень(ТаблицаОперацийПоОбъекту, НайтиДату, ТипОбъекта);
			КонецЕсли;
			ТаблицаОперацийЗаДень = ТаблицаОперацийПоОбъекту.ТаблицаОперацийЗаДень;
			
			Пока Запрос.Группировка("Документ") = 1 Цикл 
				Документ = Запрос.Док;
				Пока Запрос.Группировка("СтрокаДокумента") = 1 Цикл
					ТаблицаОперацийЗаДень.НоваяСтрока();
					ТаблицаОперацийЗаДень.КодОперации = КодОперации;
					ТаблицаОперацийЗаДень.Документ = Документ;
					ТаблицаОперацийЗаДень.СтрокаДокумента = Запрос.СтрокаДокумента;
					ТаблицаОперацийЗаДень.Количество = Запрос.Количество;
					ТаблицаОперацийЗаДень.Сумма = Запрос.Сумма;
					Если ТипОбъекта = 2 Тогда // для продукции реальная дата операции отражается в другом реквизите
						ТаблицаОперацийЗаДень.ДатаОперации = ДатаОперации;
					КонецЕсли;
				КонецЦикла;
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	
	// ЗАПОЛНИТЬ ТАБЛИЦУ ОПЕРАЦИЯМИ СПИСАНИЯ И ВОЗВРАТА ИМУЩЕСТВА
	ТекстЗапроса = 
	"//{{ЗАПРОС(ВыбытиеМПЗ)
	|Период с НачДата по КонДата;
	
	|Док = Документ.СписаниеМатериаловТоваровПродукции.ТекущийДокумент,
	|      Документ.ОперацииВыбытияИмущества.ТекущийДокумент;
	|Объект = Документ.СписаниеМатериаловТоваровПродукции.МПЗ,
	|      Документ.ОперацииВыбытияИмущества.Объект;
	|Количество = Документ.СписаниеМатериаловТоваровПродукции.Количество,
	|      Документ.ОперацииВыбытияИмущества.Количество;
	|Сумма = Документ.ОперацииВыбытияИмущества.Сумма;
	|ВидДвижения = Документ.ОперацииВыбытияИмущества.УсловиеВыбытия;
	|ВидДохода = Документ.ОперацииВыбытияИмущества.ВидДохода;
	
	|Группировка Объект без упорядочивания;
	|Группировка День;
	|Группировка Документ;
	|Группировка СтрокаДокумента;
	|Условие ((ВидДохода <> Перечисление.ВидыДоходов.РеализацияТоваровРанееОтгруженных)
	|       и (ВидДохода <> Перечисление.ВидыДоходов.РеализацияПродукцииРанееОтгруженной));
	|";            
	
	ТекстЗапроса = ТекстЗапроса + ТекстУсловия;
	
	Запрос.Выполнить(ТекстЗапроса);
	
	Пока Запрос.Группировка("Объект") = 1 Цикл             
		Объект = Запрос.Объект;
		НомерСтр = "";
		Если глПолучитьСтрокуПоЗначению(ТаблицаОбъектов, Объект, "Объект") = 0 Тогда
			глПоместитьНовыйОбъектВТаблицу(ТаблицаОбъектов, Объект, НачДата, КонДата, УчитыватьТоварыОтргуженные, БухИт, БухИтТоварыОтгруженные);
		КонецЕсли;
		ТаблицаОперацийПоОбъекту = ТаблицаОбъектов.ТаблицаОперацийПоОбъекту;                     
		
		Пока Запрос.Группировка("День") = 1 Цикл                          
			ДатаОперации = Запрос.День;
			
			// Для продукции все операции отражаются последним днем месяца
			НайтиДату = ?(ТипОбъекта = 2, КонМесяца(ДатаОперации), ДатаОперации);
		    Если глПолучитьСтрокуПоЗначению(ТаблицаОперацийПоОбъекту, НайтиДату, "ДатаОперации") = 0 Тогда
				глДобавитьВТаблицуДень(ТаблицаОперацийПоОбъекту, НайтиДату, ТипОбъекта);
			КонецЕсли;
			ТаблицаОперацийЗаДень = ТаблицаОперацийПоОбъекту.ТаблицаОперацийЗаДень;
			
			Пока Запрос.Группировка("Документ") = 1 Цикл 
				Документ = Запрос.Док;
				
				Пока Запрос.Группировка("СтрокаДокумента") = 1 Цикл 
					КодОперации = глПолучитьКодОперации(Запрос.ВидДвижения, Документ);
					ТаблицаОперацийЗаДень.НоваяСтрока();
					ТаблицаОперацийЗаДень.КодОперации = КодОперации;
					ТаблицаОперацийЗаДень.Документ = Документ;
					ТаблицаОперацийЗаДень.СтрокаДокумента = Запрос.СтрокаДокумента;
					ТаблицаОперацийЗаДень.Количество = -Запрос.Количество;
					Если КодОперации = 4 Тогда
					    ТаблицаОперацийЗаДень.Сумма = -Запрос.Сумма;
					КонецЕсли;
					Если ТипОбъекта = 2 Тогда // для продукции реальная дата операции отражается в другом реквизите
						ТаблицаОперацийЗаДень.ДатаОперации = ДатаОперации;
					КонецЕсли;
				КонецЦикла;
			КонецЦикла;
		КонецЦикла;
		ТаблицаОперацийПоОбъекту.Сортировать("ДатаОперации");
	КонецЦикла;
	
	// ОТГРУЗКА БЕЗ ПЕРЕХОДА ПРАВА СОБСТВЕННОСТИ
	Если ТипОбъекта <> 0 Тогда
		БухИтТоварыОтгруженные.ВыбратьСубконто(,, 1);
		Пока БухИтТоварыОтгруженные.ПолучитьСубконто() = 1 Цикл
			Объект = БухИтТоварыОтгруженные.Субконто();
			Если ТипОбъекта = 1 Тогда // товар
			    Если Объект.ТипНоменклатуры = Перечисление.ТипыНоменклатуры.Продукция Тогда
			        Продолжить;
				КонецЕсли;
				
			Иначе // продукция
				Если Объект.ТипНоменклатуры = Перечисление.ТипыНоменклатуры.Товар Тогда
			        Продолжить;
				КонецЕсли;
			КонецЕсли;
			Если глПолучитьСтрокуПоЗначению(ТаблицаОбъектов, Объект, "Объект") = 0 Тогда
				глПоместитьНовыйОбъектВТаблицу(ТаблицаОбъектов, Объект, НачДата, КонДата, УчитыватьТоварыОтргуженные, БухИт, БухИтТоварыОтгруженные);
			КонецЕсли;
			ТаблицаОперацийДляТоваровОтруженных = ТаблицаОбъектов.ТаблицаОперацийДляТоваровОтруженных;
			ТаблицаОперацийПоОбъекту = ТаблицаОбъектов.ТаблицаОперацийПоОбъекту;
			
			БухИтТоварыОтгруженные.ВыбратьПериоды(, 1);
			Пока БухИтТоварыОтгруженные.ПолучитьПериод() = 1 Цикл
				ДатаОперации = БухИтТоварыОтгруженные.НачДата;
				НайтиДату = ?(ТипОбъекта = 2, КонМесяца(ДатаОперации), ДатаОперации);
		    	Если глПолучитьСтрокуПоЗначению(ТаблицаОперацийПоОбъекту, НайтиДату, "ДатаОперации") = 0 Тогда
					глДобавитьВТаблицуДень(ТаблицаОперацийПоОбъекту, НайтиДату, ТипОбъекта);
				КонецЕсли;
				
				ТаблицаОперацийЗаДень = ТаблицаОперацийПоОбъекту.ТаблицаОперацийЗаДень;
				Документ = БухИтТоварыОтгруженные.Операция.Документ;
				КодОперации = 5; // отгрузка товаров без перехода права собственнности (для товаров на складах)
					
				ТаблицаОперацийЗаДень.НоваяСтрока();
				ТаблицаОперацийЗаДень.КодОперации = КодОперации;
				ТаблицаОперацийЗаДень.Документ = Документ;
				ТаблицаОперацийЗаДень.Количество = -БухИтТоварыОтгруженные.ДО("К");
				Если ТипОбъекта = 2 Тогда // для продукции реальная дата операции отражается в другом реквизите
					ТаблицаОперацийЗаДень.ДатаОперации = ДатаОперации;
				КонецЕсли;
				
				Если УчитыватьТоварыОтргуженные = 1 Тогда // если режим учета товаров отгруженных, то отразим операцию отгрузки
				    НайтиДату = ?(ТипОбъекта = 2, КонМесяца(ДатаОперации), ДатаОперации);
					Если глПолучитьСтрокуПоЗначению(ТаблицаОперацийДляТоваровОтруженных, НайтиДату, "ДатаОперации") = 0 Тогда
						глДобавитьВТаблицуДень(ТаблицаОперацийДляТоваровОтруженных, НайтиДату, ТипОбъекта);
					КонецЕсли;
					ТаблицаОперацийЗаДень = ТаблицаОперацийДляТоваровОтруженных.ТаблицаОперацийЗаДень;
					КодОперации = 3; // отгрузка товаров без перехода права соьбственности (для отгруженных товаров)
					
					ТаблицаОперацийЗаДень.НоваяСтрока();
					ТаблицаОперацийЗаДень.КодОперации = КодОперации;
					ТаблицаОперацийЗаДень.Документ = Документ;
					ТаблицаОперацийЗаДень.Количество = БухИтТоварыОтгруженные.ДО("К");
					Если ТипОбъекта = 2 Тогда // для продукции реальная дата операции отражается в другом реквизите
						ТаблицаОперацийЗаДень.ДатаОперации = ДатаОперации;
					КонецЕсли;
				КонецЕсли;
				
			КонецЦикла;
			ТаблицаОперацийПоОбъекту.Сортировать("ДатаОперации");
			Если УчитыватьТоварыОтргуженные = 1 Тогда
				ТаблицаОперацийДляТоваровОтруженных.Сортировать("ДатаОперации");
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	// ОПЕРАЦИИ РЕАЛИЗАЦИИ ДЛЯ ТОВАРОВ РАНЕЕ ОТГРУЖЕННЫХ БЕЗ ПЕРЕХОДА ПРАВА СОБСТВЕННОСТИ
	Если УчитыватьТоварыОтргуженные = 1 Тогда
	
		ТекстЗапроса = 
		"//{{ЗАПРОС(РеализацияРанееОтгруженныхТоваров)
		|Период с НачДата по КонДата;
		
		|Док = Документ.ОперацииВыбытияИмущества.ТекущийДокумент;
		|Объект = Документ.ОперацииВыбытияИмущества.Объект;
		|Количество = Документ.ОперацииВыбытияИмущества.Количество;
		|ВидДохода = Документ.ОперацииВыбытияИмущества.ВидДохода;
		
		|Группировка Объект без упорядочивания;
		|Группировка День;
		|Группировка Документ;
		|Группировка СтрокаДокумента;
		|Условие ((ВидДохода = Перечисление.ВидыДоходов.РеализацияТоваровРанееОтгруженных)
		|     или (ВидДохода = Перечисление.ВидыДоходов.РеализацияПродукцииРанееОтгруженной));
		|";            
		
		ТекстЗапроса = ТекстЗапроса + ТекстУсловия;
		
		Запрос.Выполнить(ТекстЗапроса);
		                
		КодОперации = 6; // списание (реализация)
		Пока Запрос.Группировка("Объект") = 1 Цикл             
			Объект = Запрос.Объект;
			Если глПолучитьСтрокуПоЗначению(ТаблицаОбъектов, Объект, "Объект") = 0 Тогда
				глПоместитьНовыйОбъектВТаблицу(ТаблицаОбъектов, Объект, НачДата, КонДата, УчитыватьТоварыОтргуженные, БухИт, БухИтТоварыОтгруженные);
			КонецЕсли;
			ТаблицаОперацийПоОбъекту = ТаблицаОбъектов.ТаблицаОперацийДляТоваровОтруженных;
			
			Пока Запрос.Группировка("День") = 1 Цикл
				ДатаОперации = Запрос.День;
				
				// Для продукции все операции отражаются последним днем месяца
				НайтиДату = ?(ТипОбъекта = 2, КонМесяца(ДатаОперации), ДатаОперации);
			    Если глПолучитьСтрокуПоЗначению(ТаблицаОперацийПоОбъекту, НайтиДату, "ДатаОперации") = 0 Тогда
					глДобавитьВТаблицуДень(ТаблицаОперацийПоОбъекту, НайтиДату, ТипОбъекта);
				КонецЕсли;
				ТаблицаОперацийЗаДень = ТаблицаОперацийПоОбъекту.ТаблицаОперацийЗаДень;
				
				Пока Запрос.Группировка("Документ") = 1 Цикл 
					Документ = Запрос.Док;
					
					Пока Запрос.Группировка("СтрокаДокумента") = 1 Цикл 
						ТаблицаОперацийЗаДень.НоваяСтрока();
						ТаблицаОперацийЗаДень.КодОперации = КодОперации;
						ТаблицаОперацийЗаДень.Документ = Документ;
						ТаблицаОперацийЗаДень.СтрокаДокумента = Запрос.СтрокаДокумента;
						ТаблицаОперацийЗаДень.Количество = -Запрос.Количество;
						Если ТипОбъекта = 2 Тогда // для продукции реальная дата операции отражается в другом реквизите
							ТаблицаОперацийЗаДень.ДатаОперации = ДатаОперации;
						КонецЕсли;
					КонецЦикла;
				КонецЦикла;                  
			КонецЦикла;
			ТаблицаОперацийПоОбъекту.Сортировать("ДатаОперации");
		КонецЦикла;
	КонецЕсли;
	
	// ДОПОЛНИТЕЛЬНЫЙ РАСЧЕТ ДЛЯ ПРОДУКЦИИ
	Если ТипОбъекта = 2 Тогда // рассчитывается продукция                            
		Если СтатусРасчетаПродукции = 2 Тогда // расчет стоимости ведется из регистра
			
			// Если расчет ведется из регистра, то необходимо в таблицу движений поместить
			// операции, связанные с выпуском продукции (количество и сумму), для
			// корректного отражения стоимости выпущенной продукции должна быть выполнена
			// соответствующая регламентная операция (документ "Регламентные операции по
			// налоговому учету").
			// Для расчета стоимости выпущенной продукции из регистра, используются обороты
			// по счетам 43 и Н02.03 операции .
			
			// Таблица для временного хранения количество выпущенной за месяц продукции
			ТаблицаВыпускаПродукцииЗаМесяц = СоздатьОбъект("ТаблицаЗначений");
			ТаблицаВыпускаПродукцииЗаМесяц.НоваяКолонка("ДатаОперации", "Дата");
			ТаблицаВыпускаПродукцииЗаМесяц.НоваяКолонка("Документ", "Документ");
			ТаблицаВыпускаПродукцииЗаМесяц.НоваяКолонка("Количество", "Число", 14, 3);
			
			БухИтПродукция = СоздатьОбъект("БухгалтерскиеИтоги");
			БухИтПродукция.ИспользоватьСубконто(ВидыСубконто.Номенклатура);
			БухИтПродукция.ВыполнитьЗапрос(НачДата, КонДата, "43, Н02.03",,, 3, "Операция",);
			БухИтПродукция.ВыбратьСубконто(ВидыСубконто.Номенклатура, ОтбиратьПоОбъекту);
			Пока БухИтПродукция.ПолучитьСубконто() = 1 Цикл
				Объект = БухИтПродукция.Субконто(ВидыСубконто.Номенклатура);
				ВсегоКоличество = БухИтПродукция.ДО("К");
				ВсегоСумма      = БухИтПродукция.ДО("С");
				Если (ВсегоСумма <> 0) или (ВсегоКоличество <> 0) Тогда
					Если глПолучитьСтрокуПоЗначению(ТаблицаОбъектов, Объект, "Объект") = 0 Тогда
						глПоместитьНовыйОбъектВТаблицу(ТаблицаОбъектов, Объект, НачДата, КонДата, УчитыватьТоварыОтргуженные, БухИт, БухИтТоварыОтгруженные);
					КонецЕсли;
					ТаблицаОперацийПоОбъекту = ТаблицаОбъектов.ТаблицаОперацийПоОбъекту;
					
					ПредыдущаяДатаМесяца = "";
					БухИтПродукция.ВыбратьПериоды(, 1);
					Пока БухИтПродукция.ПолучитьПериод() = 1 Цикл
						ДатаМесяца = БухИтПродукция.КонДата;
						Если ПредыдущаяДатаМесяца  = "" Тогда
							ПредыдущаяДатаМесяца = КонМесяца(БухИтПродукция.КонДата);
							ТаблицаВыпускаПродукцииЗаМесяц.УдалитьСтроки();
							Количество = 0;
							Сумма      = 0;
							
						ИначеЕсли ДатаМесяца > ПредыдущаяДатаМесяца Тогда
							КоличествоОперацийВыпускаПродукцииЗаМесяц = ТаблицаВыпускаПродукцииЗаМесяц.КоличествоСтрок();
							Если КоличествоОперацийВыпускаПродукцииЗаМесяц > 0 Тогда
								Если глПолучитьСтрокуПоЗначению(ТаблицаОперацийПоОбъекту, ПредыдущаяДатаМесяца, "ДатаОперации") = 0 Тогда
									глДобавитьВТаблицуДень(ТаблицаОперацийПоОбъекту, ПредыдущаяДатаМесяца, ТипОбъекта);
								КонецЕсли;
								ТаблицаОперацийЗаДень = ТаблицаОперацийПоОбъекту.ТаблицаОперацийЗаДень;
								ЦенаВыпущеннойЕдиницы = ?(Количество = 0, 0, Сумма/Количество);
								Для СчетчикЦикла = 1 По ТаблицаВыпускаПродукцииЗаМесяц.КоличествоСтрок() Цикл
									ТаблицаВыпускаПродукцииЗаМесяц.ПолучитьСтрокуПоНомеру(СчетчикЦикла);
									Если СчетчикЦикла = КоличествоОперацийВыпускаПродукцииЗаМесяц Тогда //последняя операция выпуска продукции
										СтоимостВыпущеннойПродукции = Сумма;
										
									Иначе
										СтоимостВыпущеннойПродукции = Окр(ЦенаВыпущеннойЕдиницы*ТаблицаВыпускаПродукцииЗаМесяц.Количество, 2);
									КонецЕсли;		                
									Сумма = Сумма - СтоимостВыпущеннойПродукции;
									ТаблицаОперацийЗаДень.НоваяСтрока();
									ТаблицаОперацийЗаДень.ДатаОперации = ТаблицаВыпускаПродукцииЗаМесяц.ДатаОперации;
									ТаблицаОперацийЗаДень.Документ = ТаблицаВыпускаПродукцииЗаМесяц.Документ;
									ТаблицаОперацийЗаДень.КодОперации = 2; // расходы, всязанные с выпуском продукции
									ТаблицаОперацийЗаДень.Количество = ТаблицаВыпускаПродукцииЗаМесяц.Количество;
									ТаблицаОперацийЗаДень.Сумма = СтоимостВыпущеннойПродукции;
								КонецЦикла;
								ТаблицаВыпускаПродукцииЗаМесяц.УдалитьСтроки();
							КонецЕсли;                                               
							ПредыдущаяДатаМесяца = КонМесяца(БухИтПродукция.КонДата);
							Количество = 0;
							Сумма      = 0;
						КонецЕсли;
						
						БухИтПродукция.ВыбратьСчета(, 1);
						Пока БухИтПродукция.ПолучитьСчет() = 1 Цикл
							Если БухИтПродукция.Счет.Код = "43" Тогда
								ВыпущеноКоличество = БухИтПродукция.ДО("К");
								Если БухИтПродукция.ПолучитьКорСчет(, "43") = 1 Тогда // вычтем внутреннее перемещение по счету 43
								    ВыпущеноКоличество = ВыпущеноКоличество - БухИтПродукция.КорДО("К");
								КонецЕсли;                                
								Если ВыпущеноКоличество <> 0 Тогда
									Количество = Количество + ВыпущеноКоличество;
									ТаблицаВыпускаПродукцииЗаМесяц.НоваяСтрока();
									ТаблицаВыпускаПродукцииЗаМесяц.Количество   = ВыпущеноКоличество;
									ТаблицаВыпускаПродукцииЗаМесяц.ДатаОперации = БухИтПродукция.НачДата;
									ТаблицаВыпускаПродукцииЗаМесяц.Документ     = БухИтПродукция.Операция.Документ;
								КонецЕсли;
								
							Иначе // Н02.03
								Сумма = Сумма + БухИтПродукция.ДО("С");
							КонецЕсли;    
						КонецЦикла;	
					КонецЦикла;
					КоличествоОперацийВыпускаПродукцииЗаМесяц = ТаблицаВыпускаПродукцииЗаМесяц.КоличествоСтрок();
					Если КоличествоОперацийВыпускаПродукцииЗаМесяц > 0 Тогда
						Если глПолучитьСтрокуПоЗначению(ТаблицаОперацийПоОбъекту, ПредыдущаяДатаМесяца, "ДатаОперации") = 0 Тогда
							глДобавитьВТаблицуДень(ТаблицаОперацийПоОбъекту, ПредыдущаяДатаМесяца, ТипОбъекта);
						КонецЕсли;
						ТаблицаОперацийЗаДень = ТаблицаОперацийПоОбъекту.ТаблицаОперацийЗаДень;
						ЦенаВыпущеннойЕдиницы = ?(Количество = 0, 0, Сумма/Количество);
						Для СчетчикЦикла = 1 По ТаблицаВыпускаПродукцииЗаМесяц.КоличествоСтрок() Цикл
							ТаблицаВыпускаПродукцииЗаМесяц.ПолучитьСтрокуПоНомеру(СчетчикЦикла);
							Если СчетчикЦикла = КоличествоОперацийВыпускаПродукцииЗаМесяц Тогда //последняя операция выпуска продукции
								СтоимостВыпущеннойПродукции = Сумма;
								
							Иначе
								СтоимостВыпущеннойПродукции = Окр(ЦенаВыпущеннойЕдиницы*ТаблицаВыпускаПродукцииЗаМесяц.Количество, 2);
							КонецЕсли;		                
							Сумма = Сумма - СтоимостВыпущеннойПродукции;
							ТаблицаОперацийЗаДень.НоваяСтрока();
							ТаблицаОперацийЗаДень.ДатаОперации = ТаблицаВыпускаПродукцииЗаМесяц.ДатаОперации;
							ТаблицаОперацийЗаДень.Документ = ТаблицаВыпускаПродукцииЗаМесяц.Документ;
							ТаблицаОперацийЗаДень.КодОперации = 2; // расходы, всязанные с выпуском продукции
							ТаблицаОперацийЗаДень.Количество = ТаблицаВыпускаПродукцииЗаМесяц.Количество;
							ТаблицаОперацийЗаДень.Сумма = СтоимостВыпущеннойПродукции;
						КонецЦикла;
						ТаблицаВыпускаПродукцииЗаМесяц.УдалитьСтроки();
					КонецЕсли;
					ТаблицаОперацийПоОбъекту.Сортировать("ДатаОперации");
				КонецЕсли;
			КонецЦикла;
			
		ИначеЕсли СтатусРасчетаПродукции = 1 Тогда // расчет производится из документа
			
			// При расчете не попадут в таблицу объекты по которым был только выпуск продукции
			// и на начальную дату ее не было на складе. Добавим такие объекты в таблицу.
			Если Объекты = "Продукция" Тогда // расчет выполняется для всей продукции (не для одного)
				БухИтПродукция = СоздатьОбъект("БухгалтерскиеИтоги");
				БухИтПродукция.ИспользоватьСубконто(ВидыСубконто.Номенклатура);
				БухИтПродукция.ВыполнитьЗапрос(НачДата, КонДата, "43",,,,, "К");
				БухИтПродукция.ВыбратьСубконто(ВидыСубконто.Номенклатура,, 1);
				Пока БухИтПродукция.ПолучитьСубконто() = 1 Цикл
					Если БухИтПродукция.ДО("К") > 0 Тогда // был выпуск продукции
						Объект = БухИтПродукция.Субконто(ВидыСубконто.Номенклатура);
						Если глПолучитьСтрокуПоЗначению(ТаблицаОбъектов, Объект, "Объект") = 0 Тогда
							глПоместитьНовыйОбъектВТаблицу(ТаблицаОбъектов, Объект, НачДата, КонДата, УчитыватьТоварыОтргуженные, БухИт, БухИтТоварыОтгруженные);
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;	
		КонецЕсли;
	КонецЕсли; 
	
КонецПроцедуры // глЗаполнитьТаблицуОперациями()

//******************************************************************************
// глРаспределитьПрямыеРасходы()
//
// Параметры:
//  ТаблицаОбъектов - Таблица значений -  таблица содержащая информацию об объектах(МПЗ).
//  ТаблицаВидовНоменклатуры - ТаблицаЗначений - содержит сгруппированную по видам номенклатуры 
//                             необходимую информацию для расчета стоимости выпущенной продукции.
//  НачДата - Дата - дата начала расчета.
//  Ошибка - Строка - отражает ошибки, которые возникли во время выполнения данной процедуры.
//
// Вызывается из формул элементов диалога:
//  Нет.
//
// Описание:
//  Рассчитывается стоиости выпущенной продукции соответстующей текущему виду номенклатуры.
//
Процедура глРаспределитьПрямыеРасходы(ТаблицаОбъектов, ТаблицаВидовНоменклатуры, НачДата, Ошибка);
	                                           
	ВидНоменклатуры = ТаблицаВидовНоменклатуры.ВидНоменклатуры;
	
	СтатусРасчета = ТаблицаВидовНоменклатуры.СтатусРасчета;
	Если СтатусРасчета = 2 Тогда // проодукция с данным видом номенклатуры уже рассчитана
		Возврат;
		
	ИначеЕсли СтатусРасчета = 1 Тогда // в данный момент рассчитывается
		Ошибка = "Невозможно рассчитать сумму прямых расходов по виду номенклатуры: " + ВидНоменклатуры;
		Возврат;
	КонецЕсли;
	
	ТаблицаВидовНоменклатуры.СтатусРасчета = 1; // установим признак, что данный вид номенклатуры рассчитывается
	
	СуммаПрямыхРасходов = ТаблицаВидовНоменклатуры.Сумма; // прямые расходы не требующие расчета
	
	// Рассчитаем еще не рассчитанные прямые расходы.
	НеРассчитанныеПрямыеРасходы = ТаблицаВидовНоменклатуры.НеРассчитанныеПрямыеРасходы;
	Если ПустоеЗначение(НеРассчитанныеПрямыеРасходы) = 0 Тогда // если есть не рассчитанные прямые расходы
		НеРассчитанныеПрямыеРасходы.ВыбратьСтроки();
		Пока НеРассчитанныеПрямыеРасходы.ПолучитьСтроку() = 1 Цикл
			Объект = НеРассчитанныеПрямыеРасходы.Объект;
			ДатаОперации = НеРассчитанныеПрямыеРасходы.ДатаОперации;
			Документ = НеРассчитанныеПрямыеРасходы.Документ;
			СтрокаДокумента = НеРассчитанныеПрямыеРасходы.СтрокаДокумента;
			СуммаРасходов = глРассчитатьСтоимостьОбъекта(ТаблицаОбъектов, ТаблицаВидовНоменклатуры, Объект, Документ, СтрокаДокумента, НачДата, ДатаОперации, 1);
			Если ТипЗначенияСтр(СуммаРасходов) = "Строка" Тогда // если возникла ошибка при расчете
				Ошибка = СуммаРасходов + " => Невозможно рассчитать сумму прямых расходов по виду номенклатуры: " + ВидНоменклатуры;
			    Возврат;
			КонецЕсли;
			НеРассчитанныеПрямыеРасходы.Сумма = СуммаРасходов;
			СуммаПрямыхРасходов = СуммаПрямыхРасходов + СуммаРасходов
		КонецЦикла;                                
		
		Если ТаблицаВидовНоменклатуры.ВидНоменклатуры <> ВидНоменклатуры Тогда
			НомерСтр = "";
		    ТаблицаВидовНоменклатуры.НайтиЗначение(ВидНоменклатуры, НомерСтр, "ВидНоменклатуры");
			ТаблицаВидовНоменклатуры.ПолучитьСтрокуПоНомеру(НомерСтр);
			ТаблицаВидовНоменклатуры.Сумма = СуммаПрямыхРасходов;
		КонецЕсли;
	КонецЕсли;
		    
	// Рассчитаем стоимости выпущенной продукции с данным видом номенклатуры
	ВыпускПродукции = ТаблицаВидовНоменклатуры.ВыпускПродукции; // таблица с выпущенной продукцией с данным видом номенклатуры
	Если ПустоеЗначение(ВыпускПродукции) = 1 Тогда // если не было выпуска продукции с даннм видом номенклатуры
		Если СуммаПрямыхРасходов > 0 Тогда // если есть прямые расходы по этому виду номенклатуры
			Возврат;
		КонецЕсли;
		
	Иначе
		
		// распределим сумму прямых расходов по виду номенклатуры на стоимость выпущенной продукции с эти же видом номенклатуры
		// пропорционально произведению количества выпущенной данной продукции на ее плановую стоимость.
		ВыпущеноПоПлановойСебестоимости = ВыпускПродукции.Итог("БазаРаспределения");
		ИтогоПоПлановойСебестоимости = 0;
		СписаноВсего = 0;
		ВыпускПродукции.ВыбратьСтроки();
		Пока ВыпускПродукции.ПолучитьСтроку() = 1 Цикл
			Объект = ВыпускПродукции.Номенклатура;
			
			ИтогоПоПлановойСебестоимости = ИтогоПоПлановойСебестоимости + ВыпускПродукции.БазаРаспределения;
			ДолжноСписатьсяВсего = 0;
			Если ВыпущеноПоПлановойСебестоимости <> 0 Тогда
				ДолжноСписатьсяВсего = СуммаПрямыхРасходов * ИтогоПоПлановойСебестоимости / ВыпущеноПоПлановойСебестоимости;    
			КонецЕсли;
			СуммаСписания = Окр(ДолжноСписатьсяВсего - СписаноВсего, 2);
			СписаноВсего = СписаноВсего + СуммаСписания;
			                                         
			ДатаОперации = КонМесяца(НачДата);
			Если глПолучитьСтрокуПоЗначению(ТаблицаОбъектов, Объект, "Объект") = 0 Тогда
				глЗаполнитьТаблицуОперациями(ТаблицаОбъектов, Объект, НачДата, ДатаОперации, 1, 1, 1);
			КонецЕсли;
			ТаблицаОперацийПоОбъекту = ТаблицаОбъектов.ТаблицаОперацийПоОбъекту;
			
			Если глПолучитьСтрокуПоЗначению(ТаблицаОперацийПоОбъекту, ДатаОперации, "ДатаОперации") = 0 Тогда
				глДобавитьВТаблицуДень(ТаблицаОперацийПоОбъекту, ДатаОперации, 2);
			КонецЕсли;
			
			ТаблицаОперацийЗаДень = ТаблицаОперацийПоОбъекту.ТаблицаОперацийЗаДень;
			ТаблицаОперацийЗаДень.НоваяСтрока();
			ТаблицаОперацийЗаДень.КодОперации = 2; 
			ТаблицаОперацийЗаДень.Количество = ВыпускПродукции.Количество;
			ТаблицаОперацийЗаДень.Сумма = СуммаСписания;
			ТаблицаОперацийЗаДень.ДатаОперации = НачДата;
		КонецЦикла;
	КонецЕсли;
	ТаблицаВидовНоменклатуры.СтатусРасчета = 2; //установим признак, что выпуск продукции с данным видом номенклатуры рассчитан
	
КонецПроцедуры // глРаспределитьПрямыеРасходы()
    
//******************************************************************************
// глРасчетСтоимостиОбъектаНаДату()
//
// Параметры:
//  ТаблицаОбъектов - Таблица значений -  таблица содержащая информацию об объектах(МПЗ).
//  ТаблицаОперацийПоОбъекту - Таблица значений - таблица, содержащая движения по объекту, сгруппированые по дням.
//  ТаблицаВидовНоменклатуры - ТаблицаЗначений - содержит информацию сгруппированную по видам номенклатуры 
//                             необходимую для расчета стоимости выпущенной продукции.
//  Документ - Документ. 
//  СтрокаДокумента - Число.
//  НачДата - Дата - дата начала расчета.
//  РассчитатьНаДату - Дата - дата на которую необходимо произвести расчет.
//  РассчитаноНаДату - Дата - дата на которую уже рассчитан объект.
//  ДополнительнаяТаблицаОпераций - Таблица значений - при расчете стоимости товара отгруженного содержит
//                                  движения этого же товара по складу.
//  СтатусРасчетаПродукции - Число - режим расчета продукции (
//                           0 - продукция не может быть рассчитана
//                           1 - расчет производится из докуменета "Регламентные операции по налоговому учету",
//                           если выбрана операция "Расчет стоимости продукции";
//                           2 - расчет продукции из регистра;
//                           3 - расчет производится из докуменета "Регламентные операции по налоговому учету",
//                           если не выбрана операция "Расчет стоимости продукции")
//  РассчитатьТоварыОтгруженные - Число - флаг расчета товаров отгруженных 
//
// Возвращаемое значение:
//  Строка - если при расчете возникла ошибка, то возвращает текст ошибки.
//  Число - сумма операции по объекту на указанную строку докумена
//
// Вызывается из формул элементов диалога:
//  Нет.
//
// Описание:
//  Рассчитывает стоимость объекта на указанную дату и возвращает, если указаны документ
//  и номер его строки, сумму соответствующей операции.
//
Функция глРасчетСтоимостиОбъектаНаДату(ТаблицаОбъектов, ТаблицаОперацийПоОбъекту, ТаблицаВидовНоменклатуры, Документ, СтрокаДокумента, НачДата, РассчитатьНаДату, знач РассчитаноНаДату, ДополнительнаяТаблицаОпераций = "", СтатусРасчетаПродукции, РассчитатьТоварыОтгруженные = 0);
	
    ВстатьНаДату = Мин(РассчитатьНаДату, РассчитаноНаДату); // дата с которой следует начать перебирать таблицу движений
	НомерСтр = "";
	Если ТаблицаОперацийПоОбъекту.НайтиЗначение(ВстатьНаДату, НомерСтр, "ДатаОперации") = 0 Тогда // если нет такой даты, то перебор таблицы начнем с самого начала
		НомерСтр = 1;	
		Если РассчитатьТоварыОтгруженные = 0 Тогда
			Сумма      =  ТаблицаОбъектов.Сумма;
			Количество =  ТаблицаОбъектов.Количество;
			
		Иначе
			Сумма      =  ТаблицаОбъектов.СуммаТоваровОтгруженных;
			Количество =  ТаблицаОбъектов.КоличествоТоваровОтгруженных;
		КонецЕсли;
	КонецЕсли;                      
	
	Объект = ТаблицаОбъектов.Объект;              
	СуммаОперации = 0;
	ОбнаруженаОшибка = Нет;
	
	// Необходимо узнать тип объекта, т.к. при сортировки операций для продукциии
	// необходимо произвести сортировку по реальным датам операций.
	Если Объект.Вид() = "Номенклатура" Тогда
	    Если Объект.ТипНоменклатуры  = Перечисление.ТипыНоменклатуры.Продукция Тогда
			ТипОбъекта = 2;
		КонецЕсли;
	КонецЕсли;
	
	КоличествоДней = ТаблицаОперацийПоОбъекту.КоличествоСтрок();
    Для НомерДня = НомерСтр По КоличествоДней Цикл
		ТаблицаОперацийПоОбъекту.ПолучитьСтрокуПоНомеру(НомерДня);
		ДатаРасчета = ТаблицаОперацийПоОбъекту.ДатаОперации;
    	Если ДатаРасчета > РассчитатьНаДату Тогда // если на эту дату рассчитывать не надо
			Прервать;
		КонецЕсли;
		    
		ТаблицаОперацийЗаДень = ТаблицаОперацийПоОбъекту.ТаблицаОперацийЗаДень;
		Если РассчитаноНаДату < ДатаРасчета Тогда // если на эту дату уже рассчитано
			
			Если ТипОбъекта = 2 Тогда
				ТаблицаОперацийЗаДень.Сортировать("ДатаОперации, КодОперации"); // для продукции еще сортируем по датам операций
				
			Иначе
				ТаблицаОперацийЗаДень.Сортировать("КодОперации");
				ДатаОперации = ДатаРасчета;
			КонецЕсли;
			        
			// Если сумма операции указана, то не пересчитываем ее, а учтиываем при расчете стоимости объекта
			ТаблицаОперацийЗаДень.ВыбратьСтроки();
			Пока ТаблицаОперацийЗаДень.ПолучитьСтроку() = 1 Цикл
				Если ТаблицаОперацийЗаДень.Сумма <> 0 Тогда         
					
					Если ТаблицаОперацийЗаДень.КодОперации = 9 Тогда // операции корректировки не учавствуют при расчете стоимости
					    Прервать;
					КонецЕсли;
					Количество =  Количество + ТаблицаОперацийЗаДень.Количество;
					Сумма      =  Сумма + ТаблицаОперацийЗаДень.Сумма;    
					Продолжить;
				КонецЕсли;
			КонецЦикла;
			Цена = ?(Количество = 0, 0, Сумма/Количество);
			
			ТаблицаОперацийЗаДень.ВыбратьСтроки();
			Пока ТаблицаОперацийЗаДень.ПолучитьСтроку() = 1 Цикл
				Если ТипОбъекта = 2 Тогда
				    ДатаОперации = ТаблицаОперацийЗаДень.ДатаОперации;
				КонецЕсли;
				Если ТаблицаОперацийЗаДень.Сумма <> 0 Тогда
					Если ТаблицаОперацийЗаДень.КодОперации <> 9 Тогда
					    Продолжить;
					КонецЕсли;
				КонецЕсли;
				
				КодОперации = ТаблицаОперацийЗаДень.КодОперации;
				Если КодОперации = 1 Тогда // расходы, связанные с приобретением объекта
					Документ = ТаблицаОперацийЗаДень.Документ;
					Если Документ.Вид() = "СписаниеМатериаловТоваровПродукции" Тогда // стоимость другого МПЗ отнесена на увеличение стоимости данного
						СтрокаДокумента = ТаблицаОперацийЗаДень.СтрокаДокумента;
						Документ.ПолучитьСтрокуПоНомеру(ТаблицаОперацийЗаДень.СтрокаДокумента);
						СписанныйОбъект = Документ.МПЗ;
						СуммаРасходов = глРассчитатьСтоимостьОбъекта(ТаблицаОбъектов, ТаблицаВидовНоменклатуры, СписанныйОбъект, Документ, СтрокаДокумента, НачДата, ДатаОперации, СтатусРасчетаПродукции);
						Если ТипЗначенияСтр(СуммаРасходов) = "Строка" Тогда
						    Возврат СуммаРасходов + " => Невозможно рассчитать стоимость объекта:  "+ Объект;
						КонецЕсли;
						ТаблицаОперацийЗаДень.Количество = 0;
						ТаблицаОперацийЗаДень.Сумма = СуммаРасходов;
						Сумма = Сумма + СуммаРасходов;
						
					Иначе
						Количество =  Количество + ТаблицаОперацийЗаДень.Количество;
					КонецЕсли;	
					Цена = ?(Количество = 0, 0, Сумма/Количество);
					
				ИначеЕсли КодОперации = 2 Тогда // расходы, связанные с выпуском продукции
					Количество = Количество + ТаблицаОперацийЗаДень.Количество;
					Цена = ?(Количество = 0, 0, Сумма/Количество);
					
				ИначеЕсли КодОперации = 3 Тогда // отгрузка без перехода права собственности (для товаров отгруженных)
					
					// Стоимостть отгрузки была рассчитана ранее для данного товара, учитываемого на складах.
					глПолучитьСтрокуПоЗначению(ДополнительнаяТаблицаОпераций, ДатаОперации, "ДатаОперации");
					ОперацииЗаДень = ДополнительнаяТаблицаОпераций.ТаблицаОперацийЗаДень;
					глПолучитьСтрокуПоЗначению(ОперацииЗаДень, ТаблицаОперацийЗаДень.Документ, "Документ");
					СуммаОтгрузки = -ОперацииЗаДень.Сумма;
					ТаблицаОперацийЗаДень.Сумма = СуммаОтгрузки;
					Сумма = Сумма + СуммаОтгрузки;
					Количество = Количество + ТаблицаОперацийЗаДень.Количество;
					Цена = ?(Количество = 0, 0, Сумма/Количество);
					
				ИначеЕсли КодОперации = 4 Тогда //возврат
					Количество = Количество + ТаблицаОперацийЗаДень.Количество;
					Цена = ?(Количество = 0, 0, Сумма/Количество);
				
				ИначеЕсли (КодОперации = 5) или (КодОперации = 6) Тогда // списание
					    
					Количество = Количество + ТаблицаОперацийЗаДень.Количество;
					
					Если Количество = 0 Тогда // если количество 0, то сумма списания - вся оставшаяся сумма
						СуммаСписания = Сумма;
						
					Иначе                                                                                     
						// Сумма списания не должна превосходить оставшуюся сумму учета данного МПЗ.
						СуммаСписания = Мин(Макс(Окр(-Цена * ТаблицаОперацийЗаДень.Количество, 2), 0), Сумма);
						Если Количество < 0 Тогда                   
							Если ОбнаруженаОшибка = Нет Тогда
								ТекстСообщения = "По причине недостатка " + Объект + " с " + ДатаОперации + " возможно  не корректное отражение стоимости МПЗ!";
								Сообщить(ТекстСообщения, "!");
						    	ОбнаруженаОшибка = Да;
							КонецЕсли;
						КонецЕсли;
					КонецЕсли;
					ТаблицаОперацийЗаДень.Сумма = -СуммаСписания;
					Сумма = Сумма - СуммаСписания;
					
				ИначеЕсли КодОперации = 9 Тогда // ручная корректировка
					Количество = Количество + ТаблицаОперацийЗаДень.Количество;
					Сумма      = Сумма + ТаблицаОперацийЗаДень.Сумма;
				КонецЕсли;
				
			КонецЦикла;
			ТаблицаОперацийПоОбъекту.КоличествоНаКонецДня = Количество;
			ТаблицаОперацийПоОбъекту.СуммаНаКонецДня      = Сумма;
			ТаблицаОперацийПоОбъекту.Цена                 = Цена;
			РассчитаноНаДату = ДатаРасчета;
			
			// установим дату на которую рассчитан объект
			Если ТаблицаОбъектов.Объект <> Объект Тогда
				глПолучитьСтрокуПоЗначению(ТаблицаОбъектов, Объект, "Объект");
			КонецЕсли;
			
			Если ДополнительнаяТаблицаОпераций = "" Тогда
				ТаблицаОбъектов.РассчитаноНаДату = РассчитаноНаДату;    
			КонецЕсли;
			
		Иначе
			Количество = ТаблицаОперацийПоОбъекту.КоличествоНаКонецДня;
			Сумма      = ТаблицаОперацийПоОбъекту.СуммаНаКонецДня;
		КонецЕсли;
	КонецЦикла;
	                    
	// Если был передан пераметр "Документ", то функции необходимо вернуть
	// сумму операции по данному документу в указанной строке.
	Если ПустоеЗначение(Документ) = 0 Тогда
		ТаблицаОперацийЗаДень.ВыбратьСтроки();
		Пока ТаблицаОперацийЗаДень.ПолучитьСтроку() = 1 Цикл
		    Если (ТаблицаОперацийЗаДень.Документ = Документ)
				и (ТаблицаОперацийЗаДень.СтрокаДокумента = СтрокаДокумента) Тогда
		        СуммаОперации = -ТаблицаОперацийЗаДень.Сумма;
				Прервать;
		    КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	Возврат СуммаОперации;
	
КонецФункции // глРасчетСтоимостиОбъектаНаДату()

//******************************************************************************
// глРассчитатьСтоимостьОбъекта()
//
// Параметры:
//  ТаблицаОбъектов - Таблица значений -  таблица содержащая информацию об объектах(МПЗ).
//  ТаблицаВидовНоменклатуры - ТаблицаЗначений - содержит информацию сгруппированную по видам номенклатуры 
//                             необходимую для расчета стоимости выпущенной продукции.

//  Объект - Справочник - объект стоимость которого необходимо рассчитать.
//  Документ - Документ.
//  СтрокаДокумента - Число.
//  НачДата - Дата - дата начала расчета
//  КонДата - Дата - дата на которую необходимо рассчитать объект
//  СтатусРасчетаПродукции - Число - режим расчета продукции (
//                           0 - продукция не может быть рассчитана
//                           1 - расчет производится из докуменета "Регламентные операции по налоговому учету",
//                           если выбрана операция "Расчет стоимости продукции";
//                           2 - расчет продукции из регистра;
//                           3 - расчет производится из докуменета "Регламентные операции по налоговому учету",
//                           если не выбрана операция "Расчет стоимости продукции")
//
// Вызывается из формул элементов диалога:
//  Нет.
//
// Описание:
//  Рассчитывает стоимость объекта как на склдах, так и товаров отгруженных на указанную дату и возвращает, 
// если указаны документ и номер его строки, сумму соответствующей операции.
//
Функция глРассчитатьСтоимостьОбъекта(ТаблицаОбъектов, ТаблицаВидовНоменклатуры, Объект, Документ = "", СтрокаДокумента = "", НачДата, знач КонДата, СтатусРасчетаПродукции) Экспорт
	
	Если Объект.Вид() = "Номенклатура" Тогда
	    Если Объект.ТипНоменклатуры  = Перечисление.ТипыНоменклатуры.Продукция Тогда
			Если СтатусРасчетаПродукции = 0 Тогда // если расчет продукции произвести невозможно
	        	Возврат "Невозможно рассчитать стоимость объекта:  "+ Объект;
				                                       
			// Если при расчете в докумете "Регламентные операции по налоговому учету"
			// необходим расчет стоимости продукции, а эта операция в нем не включена.
			ИначеЕсли СтатусРасчетаПродукции = 3 Тогда 
				Возврат "Не рассчитана стоимость продукции";
				
			ИначеЕсли СтатусРасчетаПродукции = 1 Тогда // расчет производится из документа
				                                               
				// Перед расчетом стоимости продукции из документа наобходимо распределить прямые
				// расходы по виду номенклатуры к которому относится данная продукция.
				ВидНоменклатуры = Объект.ВидНоменклатуры;
				Если глПолучитьСтрокуПоЗначению(ТаблицаВидовНоменклатуры, ВидНоменклатуры, "ВидНоменклатуры") = 1 Тогда
					Ошибка = "";
					глРаспределитьПрямыеРасходы(ТаблицаОбъектов, ТаблицаВидовНоменклатуры, НачДата, Ошибка);
					Если ПустоеЗначение(Ошибка) = 0 Тогда
					    Возврат Ошибка + " => Невозможно рассчитать стоимость объекта:  "+ Объект;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
			КонДата = КонМесяца(КонДата);
	    КонецЕсли;
	КонецЕсли;
    
	Если глПолучитьСтрокуПоЗначению(ТаблицаОбъектов, Объект, "Объект") = 0 Тогда
		глЗаполнитьТаблицуОперациями(ТаблицаОбъектов, Объект, НачДата, КонДата, 0, 1, СтатусРасчетаПродукции);
		
	Иначе                                                                    
		Если ТаблицаОбъектов.КонДата < КонДата Тогда // если в таблице движения не за весь период расчета
			глЗаполнитьТаблицуОперациями(ТаблицаОбъектов, Объект, НачДата, КонДата,,, СтатусРасчетаПродукции);
		КонецЕсли;
	КонецЕсли;
	
	Если ТаблицаОбъектов.Рассчитывается = 1 Тогда // если данный объект в находится в процессе расчета
		Если ТаблицаОбъектов.РассчитаноНаДату < КонДата Тогда // если на требуемую дату объект еще не рассчитан
			Возврат "Невозможно рассчитать стоимость объекта:  "+ Объект;
		КонецЕсли;
		
	Иначе
		ТаблицаОбъектов.Рассчитывается = 1; // установим признак того, что данный объект в процессе расчета	
	КонецЕсли;
	
	ТаблицаОперацийПоОбъекту = ТаблицаОбъектов.ТаблицаОперацийПоОбъекту;
	РассчитаноНаДату = ТаблицаОбъектов.РассчитаноНаДату;
	
	Стоимость = глРасчетСтоимостиОбъектаНаДату(ТаблицаОбъектов, ТаблицаОперацийПоОбъекту, ТаблицаВидовНоменклатуры, Документ, СтрокаДокумента, НачДата, КонДата, РассчитаноНаДату,  "", СтатусРасчетаПродукции);
	Если ТипЗначенияСтр(Стоимость) = "Строка" Тогда // при расчте возникла ошибка
		Возврат Стоимость;
	КонецЕсли;
	
	ТаблицаОперацийДляТоваровОтруженных = ТаблицаОбъектов.ТаблицаОперацийДляТоваровОтруженных;
	Если ПустоеЗначение(ТаблицаОперацийДляТоваровОтруженных) = 0 Тогда // если необходимо рассчитать товары отгруженные
	    глРасчетСтоимостиОбъектаНаДату(ТаблицаОбъектов, ТаблицаОперацийДляТоваровОтруженных, ТаблицаВидовНоменклатуры,,, НачДата, КонДата, РассчитаноНаДату, ТаблицаОперацийПоОбъекту, СтатусРасчетаПродукции, 1);
	КонецЕсли;
	
	ТаблицаОбъектов.Рассчитывается = 0; //сбросить флаг расчета для текщего объекта
	
	Возврат Стоимость;
	
КонецФункции // глРассчитатьСтоимостьОбъекта()

//*****************************************************************************
// глНайтиСчетВСтроке(ИсхСтрока, КодСчета)
//
// Параметры:
//  ИсхСтрока - Строка. Строка кодов счетов, раздяленных запятыми.
//  КодСчета  - Строка. Код счета.
//
// Возвращаемое значение:
//  0 - код счета в строке не найден.
//  1 - код счета в строке найден.
//
// Описание:
//  Определяет, указан ли переданный код счета или код группы этого счета
// в переданной строке.
//
Функция глНайтиСчетВСтроке(ИсхСтрока, КодСчета) Экспорт
	
	КодБезПробелов = СтрЗаменить(КодСчета, " ", "");
	
	СтрокаДляПоиска = ИсхСтрока + ",";
	СчетДляПоиска = КодБезПробелов + ",";
	ГруппаДляПоиска = Лев(КодБезПробелов, 2) + ",";
	
	Если ПустоеЗначение(КодСчета) = 1 Тогда
		Возврат 0;
		
	ИначеЕсли Найти(СтрокаДляПоиска, СчетДляПоиска) > 0 Тогда
	    // Найдено точное соответствие кода счета.
		Возврат 1;
		
	ИначеЕсли Найти(СтрокаДляПоиска, ГруппаДляПоиска) > 0 Тогда
	    // Найдено точное соответствие кода группы счета.
		Возврат 1;
	
	Иначе
		Возврат 0;
	КонецЕсли;
	
КонецФункции // глНайтиСчетВСтроке()

//******************************************************************************
// глПолучитьСчетУчетаКосвенныхРасходовНУ()
//
// Параметры:
//  Нет.
//
// Возвращаемое значение:
//  Здесь описывается возвращаемое значение.
//
// Вызывается из формул элементов диалога:
//  Нет.
//
// Описание:
//  Здесь описывается функция.
//
Функция глПолучитьСчетУчетаКосвенныхРасходовНУ(ДатаДок, СчетБУ = "", ВидНоменклатуры = "", СчетНУ = "", КосвенныеРасходы = 0) Экспорт
	
	Если (КосвенныеРасходы = 1) и (ПустоеЗначение(СчетБУ) = 1) Тогда // это косвенные расходы и не известен счет бух. учета.
	    Если (Константа.ОрганизацияЯвляетсяПлательщикомЕНВД = Да) и (глНовыеПравилаВеденияНУ(ДатаДок) = 1) Тогда
			СчетНУ = СчетПоКоду("Н07.04.2");
		Иначе
			СчетНУ = СчетПоКоду("Н07.04.1");
		КонецЕсли;
		
	ИначеЕсли КосвенныеРасходы = 1 Тогда // это косвенные расходы и известен счет бух. учета.
	    Если глНайтиСчетВСтроке("44.1.1, 44.2, 44.3", СчетБУ.Код) = 1 Тогда
			СчетНУ = СчетПоКоду("Н07.04.1");
			
		ИначеЕсли глНайтиСчетВСтроке("25, 26, 44.1.3", СчетБУ.Код) = 1 Тогда 
			Если (Константа.ОрганизацияЯвляетсяПлательщикомЕНВД = Да) и (глНовыеПравилаВеденияНУ(ДатаДок) = 1) Тогда
				СчетНУ = СчетПоКоду("Н07.04.2");
				
			Иначе
				СчетНУ = СчетПоКоду("Н07.04.1");
			КонецЕсли;
		
		ИначеЕсли СчетБУ.Код = "20" Тогда
			СчетНУ = СчетПоКоду("Н07.04.1");
			
			Если ПустоеЗначение(ВидНоменклатуры) = 0 Тогда
			    Если ВидНоменклатуры.ТипНоменклатуры = Перечисление.ТипыНоменклатуры.УслугаЕНВД Тогда
			        СчетНУ = ПолучитьПустоеЗначение("Счет");
			    КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
	Иначе // при необходимости надо подкорреткировать счет отнесения расходов 
		Если ПустоеЗначение(СчетБУ) = 1 Тогда
		ИначеЕсли глНайтиСчетВСтроке("25, 26, 44.1.3", СчетБУ.Код) = 1 Тогда 
			Если (Константа.ОрганизацияЯвляетсяПлательщикомЕНВД = Да) и (глНовыеПравилаВеденияНУ(ДатаДок) = 1) Тогда
				Если СчетНУ = СчетПоКоду("Н07.04.1") Тогда
					СчетНУ = СчетПоКоду("Н07.04.2");	
				КонецЕсли;  
			КонецЕсли;
		
		ИначеЕсли СчетБУ.Код = "20" Тогда
			Если ПустоеЗначение(ВидНоменклатуры) = 0 Тогда
			    Если ВидНоменклатуры.ТипНоменклатуры = Перечисление.ТипыНоменклатуры.УслугаЕНВД Тогда
			        СчетНУ = ПолучитьПустоеЗначение("Счет");
			    КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат СчетНУ;
	
КонецФункции // глПолучитьСчетУчетаКосвенныхРасходовНУ()

//******************************************************************************
// глОпределитьСтатьюРасходовНУ()
//
// Параметры:
//  Нет.
//
// Вызывается из формул элементов диалога:
//  Нет.
//
// Описание:
//  Здесь описывается процедура.
//
Процедура глОпределитьСтатьюРасходовНУ(Счет, ОбъектыАналитикиБУ, ОбъектыАналитикиНУ, ДатаДок);
	
	// определим статью затрат, а из нее вид (группу) расходов для целей налогового учета
	Если Счет.Код = "20" Тогда
		ВидНоменклатуры = ОбъектыАналитикиБУ.Получить("ВидыНоменклатуры");
		Если ПустоеЗначение(ВидНоменклатуры) = 0 Тогда
		    Если ВидНоменклатуры.ТипНоменклатуры = Перечисление.ТипыНоменклатуры.УслугаЕНВД Тогда
		        Возврат; // эти расходы не принимаются к налоговому учету
		    КонецЕсли;
		КонецЕсли;
				
		СтатьяЗатрат = ОбъектыАналитикиБУ.Получить("СтатьиЗатратНаПроизводство");    
	Иначе
		СтатьяЗатрат = ОбъектыАналитикиБУ.ПолучитьЗначение(1, "");
	КонецЕсли; 
	Попытка
		ВидРасходов = СтатьяЗатрат.ВидРасходовДляНалоговогоУчета;
	Исключение
	КонецПопытки;
	Если ПустоеЗначение(ВидРасходов) = 1 Тогда
	ИначеЕсли ВидРасходов = Перечисление.ГруппыВидыРасходов.ГарантийныйРемонтИОбслуживание Тогда
		ОбъектыАналитикиНУ.Установить("Счет", СчетПоКоду("Н03.01"));
		
	ИначеЕсли ВидРасходов = Перечисление.ГруппыВидыРасходов.ПредставительскиеРасходы Тогда
		ОбъектыАналитикиНУ.Установить("Счет", СчетПоКоду("Н03.03"));
		
	ИначеЕсли ВидРасходов = Перечисление.ГруппыВидыРасходов.РасходыНаРекламу Тогда
		ОбъектыАналитикиНУ.Установить("Счет", СчетПоКоду("Н03.04"));
		
	ИначеЕсли (Счет.Код = "44.1.1") или (Счет.Код = "44.1.3") Тогда
		Если СтатьяЗатрат.СписыватьИздержкиПропорциональноОстаткуТоваров.Получить(ДатаДок) = 1 Тогда
			ОбъектыАналитикиНУ.Установить("Счет", СчетПоКоду("Н01.07"));    
			
		Иначе
			ОбъектыАналитикиНУ.Установить("Счет", глПолучитьСчетУчетаКосвенныхРасходовНУ(ДатаДок, Счет,,, 1));
			ОбъектыАналитикиНУ.Установить("ГруппыВидыРасходов", ВидРасходов);
		КонецЕсли;
		
	Иначе
		ОбъектыАналитикиНУ.Установить("Счет", глПолучитьСчетУчетаКосвенныхРасходовНУ(ДатаДок, Счет,,, 1));
		ОбъектыАналитикиНУ.Установить("ГруппыВидыРасходов", ВидРасходов);
	КонецЕсли;
	
КонецПроцедуры // глОпределитьСтатьюРасходовНУ()

//******************************************************************************
// глОтражениеВнереализационныхРасходовВНалоговомУчете()
//
// Параметры:
//  Нет.
//
// Вызывается из формул элементов диалога:
//  Нет.
//
// Описание:
//  Здесь описывается процедура.
//
Процедура глОтражениеВнереализационныхРасходовВНалоговомУчете(ПрочиеДоходыИРасходы, ОбъектыАналитикиНУ)
	
	Если ПустоеЗначение(ПрочиеДоходыИРасходы) = 1 Тогда
	    Возврат;
	КонецЕсли;
	
	ВидПрочихРасходов = ПрочиеДоходыИРасходы.ВидПрочихДоходовИРасходов;
	Если ВидПрочихРасходов = Перечисление.ВидыПрочихДоходовИРасходов.АктивыПереданныеВПользование Тогда
	    ВнереализационныеРасходы = Перечисление.ВнереализационныеРасходы.СодержаниеИмуществаПереданногоВАренду;
		
	ИначеЕсли ВидПрочихРасходов = Перечисление.ВидыПрочихДоходовИРасходов.ПредоставленныеПраваПоНМА Тогда
		ВнереализационныеРасходы = Перечисление.ВнереализационныеРасходы.СодержаниеИмуществаПереданногоВАренду;
		
	ИначеЕсли ВидПрочихРасходов = Перечисление.ВидыПрочихДоходовИРасходов.ПроцентыКУплате Тогда
		ВнереализационныеРасходы = Перечисление.ВнереализационныеРасходы.ПроцентыПоДолговымОбязательствам;
	
	ИначеЕсли ВидПрочихРасходов = Перечисление.ВидыПрочихДоходовИРасходов.УслугиБанков Тогда
		ВнереализационныеРасходы = Перечисление.ВнереализационныеРасходы.УслугиБанков;
		
	ИначеЕсли ВидПрочихРасходов = Перечисление.ВидыПрочихДоходовИРасходов.РезервыСомнительныхДолгов Тогда
		ВнереализационныеРасходы = Перечисление.ВнереализационныеРасходы.ФормированиеРезервовПоСомнительнымДолгам;
		
	ИначеЕсли ВидПрочихРасходов = Перечисление.ВидыПрочихДоходовИРасходов.ОперацииСФинансовымиИнструментами Тогда
		ВнереализационныеРасходы = Перечисление.ВнереализационныеРасходы.ОперацииСФинансовымиИнструментами;
		
	ИначеЕсли ВидПрочихРасходов = Перечисление.ВидыПрочихДоходовИРасходов.ПрочиеОперационныеДоходыРасходы Тогда
		ВнереализационныеРасходы = Перечисление.ВнереализационныеРасходы.ПрочиеВнереализационныеРасходы;
		
	ИначеЕсли ВидПрочихРасходов = Перечисление.ВидыПрочихДоходовИРасходов.ШтрафыПоДоговорам Тогда
		ВнереализационныеРасходы = Перечисление.ВнереализационныеРасходы.Штрафы;
		
	ИначеЕсли ВидПрочихРасходов = Перечисление.ВидыПрочихДоходовИРасходов.ВозмещениеУбытковКУплате Тогда
		ВнереализационныеРасходы = Перечисление.ВнереализационныеРасходы.ПрочиеВнереализационныеРасходы;
		
	ИначеЕсли ВидПрочихРасходов = Перечисление.ВидыПрочихДоходовИРасходов.ПрибыльУбыткиПрошлыхЛет Тогда
		ВнереализационныеРасходы = Перечисление.ВнереализационныеРасходы.УбыткиПрошлыхЛет;
		
	ИначеЕсли ВидПрочихРасходов = Перечисление.ВидыПрочихДоходовИРасходов.СписаннаяДебиторскаяЗадолженность Тогда
		ВнереализационныеРасходы = Перечисление.ВнереализационныеРасходы.ПрочиеВнереализационныеРасходы;
	
	ИначеЕсли ВидПрочихРасходов = Перечисление.ВидыПрочихДоходовИРасходов.КурсовыеРазницы Тогда
		ВнереализационныеРасходы = Перечисление.ВнереализационныеРасходы.КурсовыеРазницы;
		
	ИначеЕсли ВидПрочихРасходов = Перечисление.ВидыПрочихДоходовИРасходов.ДооценкаУценкаАктивов Тогда
		ВнереализационныеРасходы = Перечисление.ВнереализационныеРасходы.ПереоценкаИмущества;
		                                            
	ИначеЕсли ВидПрочихРасходов = Перечисление.ВидыПрочихДоходовИРасходов.ОтрицательнаяРазницаОтПереоценкиИмущества Тогда
		ВнереализационныеРасходы = Перечисление.ВнереализационныеРасходы.ОтрицательнаяРазницаОтПереоценкиИмущества;
		                                            
	ИначеЕсли ВидПрочихРасходов = Перечисление.ВидыПрочихДоходовИРасходов.ПрочиеВнереализационныеДоходыРасходы Тогда
		ВнереализационныеРасходы = Перечисление.ВнереализационныеРасходы.ПрочиеВнереализационныеРасходы;
		
	ИначеЕсли ВидПрочихРасходов = Перечисление.ВидыПрочихДоходовИРасходов.НеПринимаемыеДляЦелейНалогообложения  Тогда
		ВнереализационныеРасходы = Перечисление.ВнереализационныеРасходы.НеПринимаемые;
		
	ИначеЕсли ВидПрочихРасходов = Перечисление.ВидыПрочихДоходовИРасходов.ПрочиеКосвенныеРасходы  Тогда
	      ОбъектыАналитикиНУ.Установить("Счет", СчетПоКоду("Н07.04.1")); 
		  ОбъектыАналитикиНУ.Установить("ГруппыВидыРасходов", Перечисление.ГруппыВидыРасходов.ДругиеРасходы);
		  Возврат;
		
	Иначе // если не удовлетворяет ни одному из условий, то это не внереализационный расход
		Возврат;
	КонецЕсли;
	           
	ОбъектыАналитикиНУ.Установить("Счет", СчетПоКоду("Н09"));
	ОбъектыАналитикиНУ.Установить("ВнереализационныеРасходы", ВнереализационныеРасходы);
	
КонецПроцедуры // глОтражениеВнереализационныхРасходовВНалоговомУчете()

//******************************************************************************
// глОтражениеВнереализационныхДоходовВНалоговомУчете()
//
// Параметры:
//  Нет.
//
// Вызывается из формул элементов диалога:
//  Нет.
//
// Описание:
//  Здесь описывается процедура.
//
Процедура глОтражениеВнереализационныхДоходовВНалоговомУчете(ПрочиеДоходыИРасходы, ОбъектыАналитикиНУ)
	    
	Если ПустоеЗначение(ПрочиеДоходыИРасходы) = 1 Тогда
	    Возврат;
	КонецЕсли;
	
	ВидПрочихДоходов = ПрочиеДоходыИРасходы.ВидПрочихДоходовИРасходов;
	Если ВидПрочихДоходов = Перечисление.ВидыПрочихДоходовИРасходов.АктивыПереданныеВПользование Тогда
	    ВнереализационныеДоходы = Перечисление.ВнереализационныеДоходы.СдачаИмуществаВАренду;
		
	ИначеЕсли ВидПрочихДоходов =  Перечисление.ВидыПрочихДоходовИРасходов.ПредоставленныеПраваПоНМА Тогда
		ВнереализационныеДоходы = Перечисление.ВнереализационныеДоходы.ПредоставлениеПравНаРезультатыИнтеллектуальнойДеятельности;
		
	ИначеЕсли ВидПрочихДоходов =  Перечисление.ВидыПрочихДоходовИРасходов.УчастиеВУставныхКапиталах  Тогда
		ВнереализационныеДоходы = Перечисление.ВнереализационныеДоходы.ДолевоеУчастиеВРоссийскихОрганизациях;
		
	ИначеЕсли ВидПрочихДоходов =  Перечисление.ВидыПрочихДоходовИРасходов.УчастиеВУставныхКапиталахИностранныхОрганизаций Тогда
		ВнереализационныеДоходы = Перечисление.ВнереализационныеДоходы.ДолевоеУчастиеВИностранныхОрганизациях;
	
	ИначеЕсли ВидПрочихДоходов =  Перечисление.ВидыПрочихДоходовИРасходов.ПрибыльПоСовместнойДеятельности Тогда
		ВнереализационныеДоходы = Перечисление.ВнереализационныеДоходы.ПрочиеВнереализационныеДоходы;
	
	ИначеЕсли ВидПрочихДоходов =  Перечисление.ВидыПрочихДоходовИРасходов.ПроцентыКПолучению Тогда
		ВнереализационныеДоходы = Перечисление.ВнереализационныеДоходы.ПроцентыПоДоговорамЗайма;	
		
	ИначеЕсли ВидПрочихДоходов =  Перечисление.ВидыПрочихДоходовИРасходов.ВосстановлениеРезервов Тогда
		ВнереализационныеДоходы = Перечисление.ВнереализационныеДоходы.ВосстановлениеРезервов;
		
	ИначеЕсли ВидПрочихДоходов =  Перечисление.ВидыПрочихДоходовИРасходов.РезервыСомнительныхДолгов Тогда
		ВнереализационныеДоходы = Перечисление.ВнереализационныеДоходы.ВосстановлениеРезервов;
		
	ИначеЕсли ВидПрочихДоходов =  Перечисление.ВидыПрочихДоходовИРасходов.ОперацииСФинансовымиИнструментами Тогда
		ВнереализационныеДоходы = Перечисление.ВнереализационныеДоходы.ОперацииСФинансовымиИнструментами;
	                                            
	ИначеЕсли ВидПрочихДоходов =  Перечисление.ВидыПрочихДоходовИРасходов.ПроцентыПоГосударственнымЦеннымБумагам Тогда
		ВнереализационныеДоходы = Перечисление.ВнереализационныеДоходы.ПроцентыПоГосударственнымЦеннымБумагам;	
		
	ИначеЕсли ВидПрочихДоходов =  Перечисление.ВидыПрочихДоходовИРасходов.ПроцентыПоГосударственнымЦеннымБумагамПоСтавке0 Тогда
		ВнереализационныеДоходы = Перечисление.ВнереализационныеДоходы.ПроцентыПоГосударственнымЦеннымБумагамПоСтавке0;
		
	ИначеЕсли ВидПрочихДоходов =  Перечисление.ВидыПрочихДоходовИРасходов.ПрочиеОперационныеДоходыРасходы Тогда
		ВнереализационныеДоходы = Перечисление.ВнереализационныеДоходы.ПрочиеВнереализационныеДоходы;
		
	ИначеЕсли ВидПрочихДоходов =  Перечисление.ВидыПрочихДоходовИРасходов.ШтрафыПоДоговорам Тогда
		ВнереализационныеДоходы = Перечисление.ВнереализационныеДоходы.Штрафы;
		
	ИначеЕсли ВидПрочихДоходов =  Перечисление.ВидыПрочихДоходовИРасходов.АктивыПолученныеБезвозмездно Тогда
		ВнереализационныеДоходы = Перечисление.ВнереализационныеДоходы.БезвозмездноПолученноеИмущество;
		
	ИначеЕсли ВидПрочихДоходов =  Перечисление.ВидыПрочихДоходовИРасходов.ВозмещениеУбытковКПолучению Тогда
		ВнереализационныеДоходы = Перечисление.ВнереализационныеДоходы.Штрафы;
		
	ИначеЕсли ВидПрочихДоходов =  Перечисление.ВидыПрочихДоходовИРасходов.ПрибыльУбыткиПрошлыхЛет Тогда
		ВнереализационныеДоходы = Перечисление.ВнереализационныеДоходы.ДоходыПрошлыхЛет;	
		
	ИначеЕсли ВидПрочихДоходов =  Перечисление.ВидыПрочихДоходовИРасходов.СписаннаяКредиторскаяЗадолженность Тогда
		ВнереализационныеДоходы = Перечисление.ВнереализационныеДоходы.ПрочиеВнереализационныеДоходы;	
	
	ИначеЕсли ВидПрочихДоходов = Перечисление.ВидыПрочихДоходовИРасходов.КурсовыеРазницы Тогда
		ВнереализационныеДоходы = Перечисление.ВнереализационныеДоходы.КурсовыеРазницы;	
		
	ИначеЕсли ВидПрочихДоходов =  Перечисление.ВидыПрочихДоходовИРасходов.ДооценкаУценкаАктивов Тогда
		ВнереализационныеДоходы = Перечисление.ВнереализационныеДоходы.ПрочиеВнереализационныеДоходы;
		                                            
	ИначеЕсли ВидПрочихДоходов =  Перечисление.ВидыПрочихДоходовИРасходов.ПрочиеВнереализационныеДоходыРасходы Тогда
		ВнереализационныеДоходы = Перечисление.ВнереализационныеДоходы.ПрочиеВнереализационныеДоходы;
	
	ИначеЕсли ВидПрочихДоходов = Перечисление.ВидыПрочихДоходовИРасходов.НеПринимаемыеДляЦелейНалогообложения  Тогда
		ВнереализационныеДоходы = Перечисление.ВнереализационныеДоходы.НеПринимаемые;
		
	Иначе // если не удовлетворяет ни одному из условий, то это не внереализационный доход
		Возврат;
	КонецЕсли;
	    
	ОбъектыАналитикиНУ.Установить("Счет", СчетПоКоду("Н08"));
	ОбъектыАналитикиНУ.Установить("ВнереализационныеДоходы", ВнереализационныеДоходы);
	
КонецПроцедуры // глОтражениеВнереализационныхДоходовВНалоговомУчете()  

//******************************************************************************
// СравнитьСчета()
//
// Параметры:
//  Нет.
//
// Возвращаемое значение:
//  1, если счета равны или счет2 является субсчетом счета1, иначе 0
//
// Вызывается из формул элементов диалога:
//  Нет.
//
// Описание:  
//

Функция СравнитьСчета(Счет1, Счет2) Экспорт
	
	Если (Счет1.Этогруппа() = 1) И (Счет2.Этогруппа() = 0) Тогда
		Возврат Счет2.ПринадлежитГруппе(Счет1);
	Иначе
		Если Счет1 = Счет2 Тогда
			Возврат 1;
		КонецЕсли;
	КонецЕсли; 
	
	Если (Счет1.Этогруппа() = 1) И (Счет2.Этогруппа() = 1) Тогда
		Если Счет1 = Счет2 Тогда
			Возврат 1;
		КонецЕсли;
	КонецЕсли;  
	
	Возврат 0;
	
КонецФункции    

Функция  СодержитсяВСпискеИсключенийПрямыхЗатрат(ВидЗатрат) Экспорт
	
	Если ВидЗатрат = Перечисление.ГруппыВидыРасходов.ДобровольноеИОбязательноеСтрахование Тогда
	    Возврат 1;
	КонецЕсли;

	Если ВидЗатрат = Перечисление.ГруппыВидыРасходов.НеПринимаемые Тогда
	    Возврат 1;
	КонецЕсли;   
	
	Если ВидЗатрат = Перечисление.ГруппыВидыРасходов.ПредставительскиеРасходы Тогда
	    Возврат 1;
	КонецЕсли;   
	
	Если ВидЗатрат = Перечисление.ГруппыВидыРасходов.ГарантийныйРемонтИОбслуживание Тогда
	    Возврат 1;
	КонецЕсли;   
	
	Если ВидЗатрат = Перечисление.ГруппыВидыРасходов.РасходыНаРекламу Тогда
	    Возврат 1;
	КонецЕсли; 
	
	 Возврат 0;
КонецФункции  

//******************************************************************************
// СоздатьПеречниПравилОтнесенияРасходовОсновногоПроизводстваКПрямым()
//
// Параметры:
//  Нет.
//
// Возвращаемое значение:
//  нет
//
// Вызывается из формул элементов диалога:
//  Нет.
//
// Описание:
// Заполняет справочник правил отненесения расходов к прямым, вызывается при первом запуске
// и при обновлении на 468 релиз или 469
//

Функция СоздатьПеречниПравилОтнесенияРасходовОсновногоПроизводстваКПрямым() Экспорт
	    
		Спр = СоздатьОбъект("Справочник.ПеречниПравилОтнесенияРасходовОсновногоПроизводстваКПрямым"); 
		Если Спр.НайтиПоНаименованию("Прямые расходы, рекомендованные ст.318 гл.25 НК РФ") = 0 Тогда
			Спр.Новый();
			Спр.Наименование = "Прямые расходы, рекомендованные ст.318 гл.25 НК РФ";
			Спр.ДатаНачалаПрименения = '01.01.2002';
			Спр.Записать();
		КонецЕсли;
		
		ПрямыеРасходы = СоздатьОбъект("Справочник.ПравилаОтнесенияРасходовОсновногоПроизводстваКПрямым");
		ПрямыеРасходы.ИспользоватьВладельца(Спр.ТекущийЭлемент());
		
		Если ПрямыеРасходы.НайтиПоКоду("1") = 0 Тогда
		ПрямыеРасходы.Новый();
		ПрямыеРасходы.ВидРасходовДляНалоговогоУчета = Перечисление.ГруппыВидыРасходов.МатериальныеРасходы; 
		ПрямыеРасходы.СчетКредита = СчетПоКоду("10.1");
    	ПрямыеРасходы.Код = 1;		
		ПрямыеРасходы.Наименование = "Сырье и материалы, используемые в основном производстве"; 
		ПрямыеРасходы.Записать();
		КонецЕсли;
		
		Если ПрямыеРасходы.НайтиПоКоду("2") = 0 Тогда
		ПрямыеРасходы.Новый();
		ПрямыеРасходы.ВидРасходовДляНалоговогоУчета = Перечисление.ГруппыВидыРасходов.МатериальныеРасходы;  
		ПрямыеРасходы.СчетКредита = СчетПоКоду("10.2");   
    	ПрямыеРасходы.Код = 2;		
		ПрямыеРасходы.Наименование = "Покупные полуфабрикаты и комплектующие изделия, используемые в основном производстве"; 
		ПрямыеРасходы.Записать();
		КонецЕсли;
		
		Если ПрямыеРасходы.НайтиПоКоду("3") = 0 Тогда
		ПрямыеРасходы.Новый();
		ПрямыеРасходы.ВидРасходовДляНалоговогоУчета = Перечисление.ГруппыВидыРасходов.МатериальныеРасходы; 
		ПрямыеРасходы.СчетКредита = СчетПоКоду("21"); 
    	ПрямыеРасходы.Код = 3;		
		ПрямыеРасходы.Наименование = "Полуфабрикаты собственного производства, используемые в основном производстве"; 
		ПрямыеРасходы.Записать(); 
		КонецЕсли;
		
		Если ПрямыеРасходы.НайтиПоКоду("4") = 0 Тогда
		ПрямыеРасходы.Новый();
		ПрямыеРасходы.ВидРасходовДляНалоговогоУчета = Перечисление.ГруппыВидыРасходов.МатериальныеРасходы; 
		ПрямыеРасходы.СчетКредита = СчетПоКоду("43");  
    	ПрямыеРасходы.Код = 4;		
		ПрямыеРасходы.Наименование = "Продукция собственного производства, используемая в основном производстве"; 
		ПрямыеРасходы.Записать();  
		КонецЕсли;
		
		Если ПрямыеРасходы.НайтиПоКоду("5") = 0 Тогда
		ПрямыеРасходы.Новый();
		ПрямыеРасходы.ВидРасходовДляНалоговогоУчета = Перечисление.ГруппыВидыРасходов.ОплатаТруда;  
		ПрямыеРасходы.СчетКредита = СчетПоКоду("70");  
    	ПрямыеРасходы.Код = 5;		
		ПрямыеРасходы.Наименование = "Расходы на оплату труда персонала, участвующего в производственном процессе"; 
		ПрямыеРасходы.Записать();    
        КонецЕсли;

		НалогиСФОТ = СоздатьОбъект("Справочник.НалогиИОтчисления");
		НалогиСФОТ.ВыбратьЭлементы();
		Пока НалогиСФОТ.ПолучитьЭлемент() = 1 Цикл
			Если (НалогиСФОТ.Код = "ТФОМС")  Или 
			     (НалогиСФОТ.Код = "ФФОМС")  Или 
				 (НалогиСФОТ.Код = "ЕСН_ФБ") Или
				 (НалогиСФОТ.Код = "ФСС")    Тогда    
				НалогиСФОТ.ПорядокОтраженияВНУ.Установить('01.01.2002', Перечисление.ПорядокОтраженияНалоговНУ.ПропорциональноРасчетнойБазе);
			
			ИначеЕсли (НалогиСФОТ.Код = "ПФР_страх") Или
			          (НалогиСФОТ.Код = "ПФР_нак") Или 
					  (НалогиСФОТ.Код = "ФСС_НС") Тогда
				НалогиСФОТ.ПорядокОтраженияВНУ.Установить('01.01.2002', Перечисление.ПорядокОтраженияНалоговНУ.КосвенныеРасходы);
			КонецЕсли;
			НалогиСФОТ.Записать();	
		КонецЦикла;
		
		Пока НалогиСФОТ.ПолучитьЭлемент() = 1 Цикл
			Если (НалогиСФОТ.Код = "ПФР_страх")  Или 
			(НалогиСФОТ.Код = "ПФР_нак")  Тогда   				
				НалогиСФОТ.ПорядокОтраженияВНУ.Установить('01.01.2010', Перечисление.ПорядокОтраженияНалоговНУ.ПропорциональноРасчетнойБазе);
				НалогиСФОТ.Записать();	
			КонецЕсли;
		КонецЦикла;
		

КонецФункции

//******************************************************************************
// глПолучитьПереченьСтатейЗатрат()
//
// Параметры:
//  Нет.
//
// Возвращаемое значение:
//  Таблица значений, содержащая перечень статей прямых затрат, актуальных на дату документа
//
// Вызывается из формул элементов диалога:
//  Нет.
//
// Описание:
// Находит перечень статей прямых затрат, актуальных на дату документа  
// Считывает его в таблицу значений
//
Функция глПолучитьПереченьСтатейЗатрат(ДатаДокумента) Экспорт   
	
	
	ПеречниСтатей = СоздатьОбъект("Справочник.ПеречниПравилОтнесенияРасходовОсновногоПроизводстваКПрямым");
	ПеречниСтатей.ПорядокРеквизита("ДатаНачалаПрименения");
	ПеречниСтатей.ОбратныйПорядок(1);
	ПереченьСтатей = "";
	
	ПеречниСтатей.ВыбратьЭлементы();
	Пока ПеречниСтатей.ПолучитьЭлемент() = 1  Цикл
		Если ПеречниСтатей.ПометкаУдаления() = 1 Тогда
			Продолжить;
		КонецЕсли;
		Если ПеречниСтатей.ДатаНачалаПрименения <= ДатаДокумента Тогда
			ПереченьСтатей = ПеречниСтатей.ТекущийЭлемент(); 
			Прервать;
		КонецЕсли;
	КонецЦикла; 	
	
	Спр = СоздатьОбъект("Справочник.ПравилаОтнесенияРасходовОсновногоПроизводстваКПрямым");
	Спр.ИспользоватьВладельца(ПереченьСтатей);
	
	ТекущийПереченьЗатрат = СоздатьОбъект("ТаблицаЗначений");
	ТекущийПереченьЗатрат.НоваяКолонка("СчетКт",       "ПланыСчетов.Основной");
	ТекущийПереченьЗатрат.НоваяКолонка("ВидЗатрат",    "Перечисление.ГруппыВидыРасходов");
	ТекущийПереченьЗатрат.НоваяКолонка("СтатьяЗатрат", "Справочник"); 
	ТекущийПереченьЗатрат.НоваяКолонка("Комментарий",  "Строка", 100); 
	ТекущийПереченьЗатрат.НоваяКолонка("Приоритет","Число", 1, 0);
	// Выбраны три    реквизита - 3 приоритет
	// Выбраны два    реквизита - 2 приоритет
	// Выбран один    реквизит  - 1 приоритет  
	ТекущийПереченьЗатрат.НоваяКолонка("Ключ","Число", 3, 0); 
	// Ключ содержит информацию о выбранных элементах
	// 1 (0) во первом символе - выбран (не выбран) Счет кредита
	// 1 (0) в втором символе - выбран (не выбран) вид затрат
	// 1 (0) в третьем символе - выбран (не выбран) статья затрат  
	
	Если ПереченьСтатей = "" Тогда
		Возврат ТекущийПереченьЗатрат;
		
	КонецЕсли; 
	
	
	Спр.ВыбратьЭлементы();
	Пока Спр.ПолучитьЭлемент() = 1 Цикл 
		
		Если Спр.ПометкаУдаления() = 1 Тогда
		    Продолжить;
		КонецЕсли;
		
	    ТекущийПереченьЗатрат.НоваяСтрока();
		ТекущийПереченьЗатрат.СчетКт       = Спр.СчетКредита;
		ТекущийПереченьЗатрат.ВидЗатрат    = Спр.ВидРасходовДляНалоговогоУчета;
		ТекущийПереченьЗатрат.СтатьяЗатрат = Спр.СтатьяЗатрат; 
		ТекущийПереченьЗатрат.Приоритет    = Спр.СчетКредита.Выбран() 
										   + Спр.ВидРасходовДляНалоговогоУчета.Выбран() 
										   + Спр.СтатьяЗатрат.Выбран();
		ТекущийПереченьЗатрат.Ключ         = (Спр.СчетКредита.Выбран() * 100 ) 
										   + (Спр.ВидРасходовДляНалоговогоУчета.Выбран() * 10)
										   + Спр.СтатьяЗатрат.Выбран();								   
	КонецЦикла; 
	
	ТекущийПереченьЗатрат.Сортировать("Приоритет-");

	
Возврат ТекущийПереченьЗатрат;

КонецФункции   

//******************************************************************************
// глОпределитьПрямыеРасходыПроизводстваБезАналитики()
//
// Параметры:
//  Нет.
//
// Возвращаемое значение:
//  1 - если расход прямой, 0 - косвенный.
//
// Вызывается из формул элементов диалога:
//  Нет.
//
// Описание:
//  построена так же как глОпределитьПрямыеРасходыПроизводства, но не возвращает счет учета НУ.
//

Функция глОпределитьПрямыеРасходыПроизводстваБезАналитики(СтатьяЗатрат, СчетКт, ПереченьСтатейЗатрат) Экспорт
	
	ВидЗатрат = СтатьяЗатрат.ВидРасходовДляНалоговогоУчета; 
	
	ПереченьСтатейЗатрат.ВыбратьСтроки();
	Пока ПереченьСтатейЗатрат.ПолучитьСтроку() = 1 Цикл   
		Если ПереченьСтатейЗатрат.Приоритет = 3  Тогда
			Если (СравнитьСчета(ПереченьСтатейЗатрат.СчетКт, СчетКт) = 1) И (ПереченьСтатейЗатрат.ВидЗатрат = ВидЗатрат) И (ПереченьСтатейЗатрат.СтатьяЗатрат = СтатьяЗатрат) Тогда
				Возврат 1;
			КонецЕсли;
		КонецЕсли;
		
		Если ПереченьСтатейЗатрат.Приоритет = 2  Тогда
			Если (ПереченьСтатейЗатрат.Ключ = 110) И (СравнитьСчета(ПереченьСтатейЗатрат.СчетКт, СчетКт) = 1) И (ПереченьСтатейЗатрат.ВидЗатрат = ВидЗатрат) Тогда
				Возврат 1;
			КонецЕсли; 
			
			Если (ПереченьСтатейЗатрат.Ключ = 11) И (ПереченьСтатейЗатрат.ВидЗатрат = ВидЗатрат) И (ПереченьСтатейЗатрат.СтатьяЗатрат = СтатьяЗатрат) Тогда
				Возврат 1;
			КонецЕсли; 
			
			Если (ПереченьСтатейЗатрат.Ключ = 101) И (СравнитьСчета(ПереченьСтатейЗатрат.СчетКт, СчетКт) = 1) И (ПереченьСтатейЗатрат.СтатьяЗатрат = СтатьяЗатрат) Тогда
				Возврат 1;
			КонецЕсли;
			
		КонецЕсли; 
		
		Если ПереченьСтатейЗатрат.Приоритет = 1  Тогда
			Если (ПереченьСтатейЗатрат.Ключ = 1) И (ПереченьСтатейЗатрат.СтатьяЗатрат = СтатьяЗатрат) Тогда
				Возврат 1;
			КонецЕсли; 
			
			Если (ПереченьСтатейЗатрат.Ключ = 10) И (ПереченьСтатейЗатрат.ВидЗатрат = ВидЗатрат) Тогда
				Возврат 1;
			КонецЕсли; 
			
			Если (ПереченьСтатейЗатрат.Ключ = 100) И (СравнитьСчета(ПереченьСтатейЗатрат.СчетКт, СчетКт) = 1) Тогда
				Возврат 1;
			КонецЕсли;
			
		КонецЕсли; 
		
	КонецЦикла;  
	
	Возврат 0;
	
КонецФункции  // глОпределитьПрямыеРасходыПроизводстваБезАналитики


//******************************************************************************
// глОпределитьПрямыеРасходыПроизводства()
//
// Параметры:
//  Нет.
//
// Возвращаемое значение:
//  Счет учета затрат в НУ.
//
// Вызывается из формул элементов диалога:
//  Нет.
//
// Описание:
//  Здесь описывается функция.
//


Процедура глОпределитьПрямыеРасходыПроизводства(Субконто1, Субконто2, Субконто3, ОбъектыАналитикиНУ, ПереченьСтатейЗатрат, СчетКт)
	
	СтатьяЗатрат =  Субконто2;
	СчетПрямыхРасходов = СчетПоКоду("Н01.05"); 
	ОбъектыАналитикиНУ.Установить("ВидыНоменклатуры", Субконто1);	   
	ВидЗатрат = СтатьяЗатрат.ВидРасходовДляНалоговогоУчета; 
	ОбъектыАналитикиНУ.Установить("ГруппыВидыРасходов", ВидЗатрат); 		
	
	Если СодержитсяВСпискеИсключенийПрямыхЗатрат(ВидЗатрат) = 1 Тогда
		ОбъектыАналитикиНУ.Установить("Счет", СчетПоКоду("Н07.04.1")); 
		Возврат;
	КонецЕсли;
	ФлагПрямогоРасхода = 0;
	ПереченьСтатейЗатрат.ВыбратьСтроки();
	Пока ПереченьСтатейЗатрат.ПолучитьСтроку() = 1 Цикл
		Если ПереченьСтатейЗатрат.Приоритет = 3  Тогда  
			Если (СравнитьСчета(ПереченьСтатейЗатрат.СчетКт, СчетКт) = 1) И (ПереченьСтатейЗатрат.ВидЗатрат = ВидЗатрат) И (ПереченьСтатейЗатрат.СтатьяЗатрат = СтатьяЗатрат) Тогда
				ФлагПрямогоРасхода = 1; 
				Прервать;
			КонецЕсли;
		КонецЕсли;
		
		Если ПереченьСтатейЗатрат.Приоритет = 2  Тогда
			Если (ПереченьСтатейЗатрат.Ключ = 110) И (СравнитьСчета(ПереченьСтатейЗатрат.СчетКт, СчетКт) = 1) И (ПереченьСтатейЗатрат.ВидЗатрат = ВидЗатрат) Тогда
					ФлагПрямогоРасхода = 1; 
					Прервать;
			КонецЕсли; 
			
			Если (ПереченьСтатейЗатрат.Ключ = 11) И (ПереченьСтатейЗатрат.ВидЗатрат = ВидЗатрат) И (ПереченьСтатейЗатрат.СтатьяЗатрат = СтатьяЗатрат) Тогда
					ФлагПрямогоРасхода = 1; 
					Прервать;
			КонецЕсли; 
			
			Если (ПереченьСтатейЗатрат.Ключ = 101) И (СравнитьСчета(ПереченьСтатейЗатрат.СчетКт, СчетКт) = 1) И (ПереченьСтатейЗатрат.СтатьяЗатрат = СтатьяЗатрат) Тогда
					ФлагПрямогоРасхода = 1; 
					Прервать;
			КонецЕсли;
			
		КонецЕсли; 
		
		Если ПереченьСтатейЗатрат.Приоритет = 1  Тогда
			Если (ПереченьСтатейЗатрат.Ключ = 1) И (ПереченьСтатейЗатрат.СтатьяЗатрат = СтатьяЗатрат) Тогда
					ФлагПрямогоРасхода = 1; 
					Прервать;
			КонецЕсли; 
			
			Если (ПереченьСтатейЗатрат.Ключ = 10) И (ПереченьСтатейЗатрат.ВидЗатрат = ВидЗатрат) Тогда
					ФлагПрямогоРасхода = 1; 
					Прервать;
			КонецЕсли; 
			
			Если (ПереченьСтатейЗатрат.Ключ = 100) И (СравнитьСчета(ПереченьСтатейЗатрат.СчетКт, СчетКт) = 1) Тогда
					ФлагПрямогоРасхода = 1; 
					Прервать;
			КонецЕсли;
			
		КонецЕсли; 
		
	КонецЦикла;
	
	Если ФлагПрямогоРасхода = 1 Тогда
		ОбъектыАналитикиНУ.Установить("Счет", СчетПрямыхРасходов);
	Иначе
		ОбъектыАналитикиНУ.Установить("Счет", СчетПоКоду("Н07.04.1"));
	КонецЕсли;
КонецПроцедуры


//******************************************************************************
// глСчетИАналитикаРасходовНУ()
//
// Параметры:
//  Нет.
//
// Возвращаемое значение:
//  Здесь описывается возвращаемое значение.
//
// Вызывается из формул элементов диалога:
//  Нет.
//
// Описание:
//  Здесь описывается функция.
//
Функция глСчетИАналитикаРасходовНУ(Конт, Счет, Субконто1, Субконто2, Субконто3, ПереченьСтатейЗатрат = "", СчетКт = "", Комментировать = 1) Экспорт
	            
	ОбъектыАналитикиБУ = СоздатьОбъект("СписокЗначений");
	ОбъектыАналитикиБУ.Установить(Счет.ВидСубконто(1,,).Идентификатор(), Субконто1);
	ОбъектыАналитикиБУ.Установить(Счет.ВидСубконто(2,,).Идентификатор(), Субконто2);
	ОбъектыАналитикиБУ.Установить(Счет.ВидСубконто(3,,).Идентификатор(), Субконто3);
	
	ОбъектыАналитикиНУ = СоздатьОбъект("СписокЗначений");
	
	Если глНовыеПравилаВеденияНУ(Конт.ДатаДок) = 1 Тогда
		
		Если Счет.Код = "07" Тогда // поступление оборудования
			ОбъектыАналитикиНУ.Установить("Счет", СчетПоКоду("Н01.02"));
			ОбъектыАналитикиНУ.Установить("Оборудование", ОбъектыАналитикиБУ.Получить("Оборудование"));
			
		ИначеЕсли Счет.Код = "08.4" Тогда // поступление внеоборотных активов (ОС)
			ОбъектыАналитикиНУ.Установить("Счет", СчетПоКоду("Н01.01"));
			ОбъектыАналитикиНУ.Установить("ОбъектыСтроительства", ОбъектыАналитикиБУ.Получить("ОбъектыСтроительства"));
			
		ИначеЕсли Счет.Код = "08.5" Тогда // поступление внеоборотных активов (НМА)
			ОбъектыАналитикиНУ.Установить("Счет", СчетПоКоду("Н01.08"));
			ОбъектыАналитикиНУ.Установить("ОбъектыСтроительства", ОбъектыАналитикиБУ.Получить("ОбъектыСтроительства"));
			
		ИначеЕсли Счет.Код = "08.8" Тогда // расходы по НИОКР
			ОбъектыАналитикиНУ.Установить("Счет", СчетПоКоду("Н01.03"));
			ОбъектыАналитикиНУ.Установить("ОбъектыСтроительства", ОбъектыАналитикиБУ.Получить("ОбъектыСтроительства"));
			
		ИначеЕсли Счет.ПринадлежитГруппе(СчетПоКоду("08")) = 1 Тогда // сроительство ОС
			ОбъектыАналитикиНУ.Установить("Счет", СчетПоКоду("Н01.09"));
			ОбъектыАналитикиНУ.Установить("ОбъектыСтроительства", ОбъектыАналитикиБУ.Получить("ОбъектыСтроительства"));
			
		ИначеЕсли Счет.ПринадлежитГруппе(СчетПоКоду("10")) = 1 Тогда // поступление материалов
			ОбъектыАналитикиНУ.Установить("Счет", СчетПоКоду("Н02.01"));
			ОбъектыАналитикиНУ.Установить("Материалы", ОбъектыАналитикиБУ.Получить("Материалы"));
		
		ИначеЕсли Счет.ПринадлежитГруппе(СчетПоКоду("15")) = 1 Тогда //  расходы по приобретению материалов или товаров
			ТекстСообщения = "Расходы, отнесенные в бухгалтерском учете на счет 15, в налоговом учете отражаются вручную!";
			Если Комментировать = 1 Тогда
				глСообщениеПроведения(ТекстСообщения, Конт, -1);
			КонецЕсли;
			
		ИначеЕсли Счет.Код = "41.2" Тогда // товары в рознице
			Если Константа.РаздельныйУчетТоваровОптРозница.Получить(Конт.ДатаДок) = Да Тогда
				ОбъектыАналитикиНУ.Установить("Счет", СчетПоКоду("Н02.02.2"));
				
			Иначе
				ОбъектыАналитикиНУ.Установить("Счет", СчетПоКоду("Н02.02.1"));
			КонецЕсли;
			ОбъектыАналитикиНУ.Установить("Номенклатура", ОбъектыАналитикиБУ.Получить("Номенклатура"));    
			
		ИначеЕсли Счет.ПринадлежитГруппе(СчетПоКоду("41")) = 1 Тогда // поступление товаров
			ОбъектыАналитикиНУ.Установить("Счет", СчетПоКоду("Н02.02.1"));
			ОбъектыАналитикиНУ.Установить("Номенклатура", ОбъектыАналитикиБУ.Получить("Номенклатура"));
		
		ИначеЕсли глНайтиСчетВСтроке("20, 25, 26, 44.1.1, 44.2, 44.3", Счет.Код) = 1 Тогда // статьи затрат   
			
			Если (глНайтиСчетВСтроке("20", Счет.Код) = 1) Тогда
				СтатьяЗатрат = ОбъектыАналитикиБУ.Получить("СтатьиЗатратНаПроизводство");    
				ВидРасходов = СтатьяЗатрат.ВидРасходовДляНалоговогоУчета;
				
				Если (ВидРасходов <> Перечисление.ГруппыВидыРасходов.ГарантийныйРемонтИОбслуживание) И
				(ВидРасходов <> Перечисление.ГруппыВидыРасходов.ПредставительскиеРасходы) И
				(ВидРасходов <> Перечисление.ГруппыВидыРасходов.РасходыНаРекламу) И
				(ВидРасходов <> Перечисление.ГруппыВидыРасходов.ГарантийныйРемонтИОбслуживание)  И
				(ПустоеЗначение(ВидРасходов) = 0)	Тогда   
					глОпределитьПрямыеРасходыПроизводства(Субконто1, Субконто2, Субконто3, ОбъектыАналитикиНУ, ПереченьСтатейЗатрат, СчетКт);
				Иначе
					глОпределитьСтатьюРасходовНУ(Счет, ОбъектыАналитикиБУ, ОбъектыАналитикиНУ, Конт.ДатаДок);
				КонецЕсли;
			Иначе
				глОпределитьСтатьюРасходовНУ(Счет, ОбъектыАналитикиБУ, ОбъектыАналитикиНУ, Конт.ДатаДок);
			КонецЕсли; 
			
		ИначеЕсли глНайтиСчетВСтроке("21", Счет.Код) = 1 Тогда // статьи затрат   
			ОбъектыАналитикиНУ.Установить("Счет", СчетПоКоду("Н02.07"));
			ОбъектыАналитикиНУ.Установить("Номенклатура", ОбъектыАналитикиБУ.Получить("Номенклатура"));
			
		ИначеЕсли Счет.Код = "44.1.2" Тогда // издержки обращения, относящиеся к ЕНВД (не отражаются в налоговом учете)
			
		ИначеЕсли Счет.Код = "44.1.3" Тогда // издержки обращения, подлежащие распределению (ЕНВД и не ЕНВД)
			
			// Если издержки относятся к косвенным расходам, то отразим их на счете Н07.04,
			// т.к. на этом счете производится распределение расходов на ЕНВДи не ЕНВД.
			// Если издержки не относятся к косвенным, то автоматически не отражаем
			// расходы для целей налогового учета.
			глОпределитьСтатьюРасходовНУ(Счет, ОбъектыАналитикиБУ, ОбъектыАналитикиНУ, Конт.ДатаДок);
			СчетНУ = ОбъектыАналитикиНУ.Получить("Счет");
			ОтраженоНУ = 0;
			Если ПустоеЗначение(СчетНУ) = 0 Тогда
			    Если Найти(СчетНУ.Код, "Н07.04") = 1 Тогда
					ОтраженоНУ = 1;
				КонецЕсли;
			КонецЕсли;
			
			Если ОтраженоНУ = 0 Тогда
			    ОбъектыАналитикиНУ.УдалитьВсе();
				ТекстСообщения = "Расходы, отнесенные в бухгалтерском учете на счет 44.1.3 (" + ОбъектыАналитикиБУ.ПолучитьЗначение(1, "") + "), в налоговом учете отражаются вручную!";
				Если Комментировать = 1 Тогда
					глСообщениеПроведения(ТекстСообщения, Конт, -1);
				КонецЕсли;
			КонецЕсли;
			
		ИначеЕсли Счет.Код = "45" Тогда // отгруженные товары
			Номенклатура = ОбъектыАналитикиБУ.Получить("Номенклатура");
			Если Номенклатура.ТипНоменклатуры = Перечисление.ТипыНоменклатуры.Товар Тогда
				ОбъектыАналитикиНУ.Установить("Счет", СчетПоКоду("Н02.04.1"));
				
			ИначеЕсли Номенклатура.ТипНоменклатуры = Перечисление.ТипыНоменклатуры.Продукция Тогда
				ОбъектыАналитикиНУ.Установить("Счет", СчетПоКоду("Н02.04.2"));
				
			ИначеЕсли Номенклатура.ТипНоменклатуры = Перечисление.ТипыНоменклатуры.Полуфабрикат Тогда
				ОбъектыАналитикиНУ.Установить("Счет", СчетПоКоду("Н02.04.3"));
			КонецЕсли;
			ОбъектыАналитикиНУ.Установить("Номенклатура", Номенклатура);
			
		ИначеЕсли Счет.Код = "58.2" Тогда // приобретение ценных бумаг
			ОбъектыАналитикиНУ.Установить("Счет", СчетПоКоду("Н02.05"));
			ОбъектыАналитикиНУ.Установить("ЦенныеБумаги", ОбъектыАналитикиБУ.Получить("ЦенныеБумаги"));
			
		ИначеЕсли Счет.Код = "58.5" Тогда // приобретение прав в рамках оказания финансовых услуг
			ОбъектыАналитикиНУ.Установить("Счет", СчетПоКоду("Н02.06"));
			ОбъектыАналитикиНУ.Установить("Договоры", ОбъектыАналитикиБУ.Получить("Договоры"));
			
		ИначеЕсли (Счет.Код = "76.1.2") или (Счет.Код = "76.1.3") или (Счет.Код = "76.1.4") Тогда // расходы по добр. страх. сотрудников
			ТекстСообщения = "Необходимо вручную отразить в налоговом учете расходы по договорам добровольного страхования сотрудников!";
			Если Комментировать = 1 Тогда
				глСообщениеПроведения(ТекстСообщения, Конт, -1);
			КонецЕсли;
			
		ИначеЕсли Счет.Код = "29" Тогда // расходы обслущивающих производств
			ОбъектыАналитикиНУ.Установить("Счет", СчетПоКоду("Н07.13"));
			
		ИначеЕсли Счет.Код = "86" Тогда // целевое финансирование
			ОбъектыАналитикиНУ.Установить("Счет", СчетПоКоду("Н12"));
			
		ИначеЕсли Счет.Код = "91.2" Тогда // возможно внереализационные расходы
			глОтражениеВнереализационныхРасходовВНалоговомУчете(ОбъектыАналитикиБУ.Получить("ПрочиеДоходыИРасходы"), ОбъектыАналитикиНУ);
			
		ИначеЕсли Счет.Код = "97" Тогда // возможно внереализационные расходы
			СтатьяРасходов = ОбъектыАналитикиБУ.Получить("РасходыБудущихПериодов");
			Если СтатьяРасходов.НазначениеСтатьиРасходов = 3 Тогда
				Если (ПустоеЗначение(СтатьяРасходов.ВидРасхода) = 0)
				и (СтатьяРасходов.ВидРасхода <> Перечисление.ВидыРасходов.НеПринимаемые) Тогда
					
					СчетНУ = СчетПоКоду("Н04.09");
					Если (СтатьяРасходов.ВидРасхода = Перечисление.ВидыРасходов.ПрямыеРасходы) или
					(СтатьяРасходов.ВидРасхода = Перечисление.ВидыРасходов.КосвенныеРасходы) Тогда
						Если СтатьяРасходов.ЭлементРасхода = Перечисление.ГруппыВидыРасходов.НИОКР Тогда
							СчетНУ = СчетПоКоду("Н04.03");
						ИначеЕсли СтатьяРасходов.ЭлементРасхода = Перечисление.ГруппыВидыРасходов.ОсвоениеПриродныхРесурсов Тогда
							СчетНУ = СчетПоКоду("Н04.04");	
						ИначеЕсли СтатьяРасходов.ЭлементРасхода = Перечисление.ГруппыВидыРасходов.ДобровольноеИОбязательноеСтрахование Тогда
							СчетНУ = СчетПоКоду("Н04.08");				   		
						КонецЕсли;
					КонецЕсли;
					
					ОбъектыАналитикиНУ.Установить("Счет", СчетНУ);
					ОбъектыАналитикиНУ.Установить("РасходыБудущихПериодов", ОбъектыАналитикиБУ.Получить("РасходыБудущихПериодов"));    
				КонецЕсли;
			КонецЕсли;
			
		ИначеЕсли Счет.Код = "99.1" Тогда // возможно внереализационные расходы
			Если ОбъектыАналитикиБУ.Получить("ПрибылиИУбытки") = Перечисление.ПрибылиИУбытки.ЧрезвычайныеРасходы Тогда
				ОбъектыАналитикиНУ.Установить("Счет", СчетПоКоду("Н09"));
				ОбъектыАналитикиНУ.Установить("ВнереализационныеРасходы", Перечисление.ВнереализационныеРасходы.ПрочиеВнереализационныеРасходы);
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ОбъектыАналитикиНУ;
	
КонецФункции // глСчетИАналитикаРасходовНУ()
                                     
//******************************************************************************
// глСчетИАналитикаДоходовНУ()
//
// Параметры:
//  Нет.
//
// Возвращаемое значение:
//  Здесь описывается возвращаемое значение.
//
// Вызывается из формул элементов диалога:
//  Нет.
//
// Описание:
//  Здесь описывается функция.
//
Функция глСчетИАналитикаДоходовНУ(Конт, Счет, Субконто1, Субконто2, Субконто3) Экспорт
	            
	ОбъектыАналитикиБУ = СоздатьОбъект("СписокЗначений");
	ОбъектыАналитикиБУ.Установить(Счет.ВидСубконто(1,,).Идентификатор(), Субконто1);
	ОбъектыАналитикиБУ.Установить(Счет.ВидСубконто(2,,).Идентификатор(), Субконто2);
	ОбъектыАналитикиБУ.Установить(Счет.ВидСубконто(3,,).Идентификатор(), Субконто3);
	
	ОбъектыАналитикиНУ = СоздатьОбъект("СписокЗначений");
	 
	Если глНовыеПравилаВеденияНУ(Конт.ДатаДок) = 1 Тогда
		Если Счет.Код = "86" Тогда // целевое финансирование
			ОбъектыАналитикиНУ.Установить("Счет", СчетПоКоду("Н12"));
			
		ИначеЕсли Счет.Код = "91.1" Тогда // возможно внереализационные доходы
			глОтражениеВнереализационныхДоходовВНалоговомУчете(ОбъектыАналитикиБУ.Получить("ПрочиеДоходыИРасходы"), ОбъектыАналитикиНУ);
			
		ИначеЕсли Счет.Код = "99.1" Тогда // возможно внереализационные расходы
			Если ОбъектыАналитикиБУ.Получить("ПрибылиИУбытки") = Перечисление.ПрибылиИУбытки.ЧрезвычайныеДоходы Тогда
				ОбъектыАналитикиНУ.Установить("Счет", СчетПоКоду("Н08"));
				ОбъектыАналитикиНУ.Установить("ВнереализационныеДоходы", Перечисление.ВнереализационныеДоходы.ПрочиеВнереализационныеДоходы);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ОбъектыАналитикиНУ;
	
КонецФункции // глСчетИАналитикаДоходовНУ()

//****************************************************************************
Процедура глОтражениеСуммовыхРазницВНаловомУчете(ТекДок,СуммоваяРазница, СуммоваяРазницаНеПринятаяКНУ) Экспорт
	                               
	СуммоваяРазницаПринятаяКНУ = СуммоваяРазница - СуммоваяРазницаНеПринятаяКНУ;
	
	Если СуммоваяРазницаПринятаяКНУ < 0 Тогда
		ТекДок.Операция.НоваяПроводка();  ТекДок.Операция.РазделительУчета = ТекДок.ЮрЛицо;
	    ТекДок.Операция.НомерЖурнала = "НУ";
		ТекДок.Операция.СодержаниеПроводки = "Суммовая разница";
		ТекДок.Операция.ПервичныйДокумент  = глПредставлениеПервичногоДокумента(ТекДок);
		ТекДок.Операция.Дебет.Счет = СчетПоКоду("Н09");
		ТекДок.Операция.Дебет.ВнереализационныеРасходы = Перечисление.ВнереализационныеРасходы.СуммовыеРазницы;
		ТекДок.Операция.Сумма = -СуммоваяРазницаПринятаяКНУ;
	КонецЕсли;
	
	Если СуммоваяРазницаПринятаяКНУ > 0 Тогда
		ТекДок.Операция.НоваяПроводка(); ТекДок.Операция.РазделительУчета = ТекДок.ЮрЛицо;
	    ТекДок.Операция.НомерЖурнала = "НУ";
		ТекДок.Операция.СодержаниеПроводки = "Суммовая разница";
		ТекДок.Операция.ПервичныйДокумент  = глПредставлениеПервичногоДокумента(ТекДок);
		ТекДок.Операция.Кредит.Счет = СчетПоКоду("Н08");
		ТекДок.Операция.Кредит.ВнереализационныеДоходы = Перечисление.ВнереализационныеДоходы.СуммовыеРазницы;
		ТекДок.Операция.Сумма = СуммоваяРазницаПринятаяКНУ;
	КонецЕсли;
	
	Если СуммоваяРазницаНеПринятаяКНУ < 0 Тогда
		ТекДок.Операция.НоваяПроводка(); ТекДок.Операция.РазделительУчета = ТекДок.ЮрЛицо;
	    ТекДок.Операция.НомерЖурнала = "НУ";
		ТекДок.Операция.СодержаниеПроводки = "Суммовая разница";
		ТекДок.Операция.ПервичныйДокумент  = глПредставлениеПервичногоДокумента(ТекДок);
		ТекДок.Операция.Дебет.Счет = СчетПоКоду("Н09");
		ТекДок.Операция.Дебет.ВнереализационныеРасходы = Перечисление.ВнереализационныеРасходы.НеПринимаемые;
		ТекДок.Операция.Сумма = -СуммоваяРазницаНеПринятаяКНУ;
	КонецЕсли;
	
	Если СуммоваяРазницаНеПринятаяКНУ > 0 Тогда
		ТекДок.Операция.НоваяПроводка(); ТекДок.Операция.РазделительУчета = ТекДок.ЮрЛицо;
	    ТекДок.Операция.НомерЖурнала = "НУ";
		ТекДок.Операция.СодержаниеПроводки = "Суммовая разница";
		ТекДок.Операция.ПервичныйДокумент  = глПредставлениеПервичногоДокумента(ТекДок);
		ТекДок.Операция.Кредит.Счет = СчетПоКоду("Н08");
		ТекДок.Операция.Кредит.ВнереализационныеДоходы = Перечисление.ВнереализационныеДоходы.НеПринимаемые;
		ТекДок.Операция.Сумма = СуммоваяРазницаНеПринятаяКНУ;
	КонецЕсли;
	
КонецПроцедуры // глОтражениеСуммовыхРазницВНаловомУчете()

//******************************************************************************
// глУчестьСуммовыеРазницы(ТекДок, Договор, Документ="", БухИт="", Счет="", ТипСальдо=0, СуммаОпл, КурсОплаты=0, Валюта, СуммаОплатыВал=0, СуммаОплатыРуб=0, СуммоваяРазница=0)
//
// Параметры:
//  ТекДок           - Документ, при проведении которого выполняется расчет.
//  Договор          - Договор взаиморасчетов. Определяет условия возникновения суммовых разниц.
//  Документ         - Документ поступления (отгрузки), при проведении которого была 
//                     начислена задолженность. Если не указан, то суммовая разница просто рассчитывается,
//                     но к учету не принимается.
//  СуммаОпл         - Сумма оплаты в рублях.
//  БухИТ            - Рассчитанные бехгалтерские итоги для определения задолженности по договору.
//  Счет             - Счет учета расчетов. Указывается вместе с бух. итогами.
//  ТипСальдо        - 1 - дебетовое, 2 - кредитовое.
//  КурсОплаты       - Курс, указанный в момент оплаты.
//  Валюта               - Справочник.Валюты. В этот параметр будет возвращена валюта учета расчетов по договору.
//  СуммаОплВал      - В этот параметр будет возвращена сумма оплаты в условных единицах.
//  СуммаОплРуб      - В этот параметр будет возвращена сумма оплаты в рублях. Превышение 
//                     данного параметра параметром СуммаОпл означает переплату или аванс 
//                     по очередной сделке.
//  Суммовая разница - Величина суммовой разницы. Если указана, то расчет суммовой разницы
//                     не производится, а к учету принимается данная величина.
//
// Описание:
//  Рассчитывает и принимает к учету суммовые разницы
//
Процедура глУчестьСуммовыеРазницы(ТекДок, Договор, Документ="", БухИт="", Счет="", ТипСальдо=0, СуммаОпл, КурсОплаты=0, Валюта="", СуммаОплатыВал=0, СуммаОплатыРуб=0, СуммоваяРазница=0, ПереченьСтатейЗатрат = "") Экспорт
	
	Если ТипЗначенияСтр(Договор) <> "Справочник" Тогда
	    Возврат;
		
	ИначеЕсли Договор.Вид() <> "Договоры" Тогда
		Возврат;
		
	ИначеЕсли СуммаОпл = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если ПустоеЗначение(Документ) = 0 Тогда
		Если Документ.Вид() = "Счет" Тогда
			Документ = ПолучитьПустоеЗначение("Документ");
		КонецЕсли;
	КонецЕсли;
		
	// Проверим условия возникновения суммовых разниц.
	ЦеныВДоговоре = 1; // в рублях
	Если ПустоеЗначение(Договор.ВалютаДоговора) = 0 Тогда
		ЦеныВДоговоре = 2; // в валюте
	КонецЕсли;
	ОплатаДоговора = Договор.ОплатаДоговора; // 1 - врублях, 2 - в валюте 
	
	Если ЦеныВДоговоре = 2 Тогда
		Валюта = Договор.ВалютаДоговора;
	КонецЕсли;
	
	ВестиУчетРасчетовУЕ = Договор.ВестиУчетРасчетовУЕ;
	УчитыватьПоложительныеСРпоНДСприПродаже = ?(Константа.УчитыватьПоложительныеСуммовыеРазницыПриНачисленииНДС.Получить(ТекДок.ДатаДок) = Да, 1, 0);
	УчитыватьОтрицательныеСРпоНДСприПродаже = ?(Константа.УчитыватьОтрицательныеСуммовыеРазницыПриНачисленииНДС.Получить(ТекДок.ДатаДок) = Да, 1, 0);
	УчитыватьПоложительныеСРпоНДСприПокупке = ?(Константа.УчитыватьПоложительныеСуммовыеРазницыПриОпределенииВычетовПоНДС.Получить(ТекДок.ДатаДок) = Да, 1, 0);
	УчитыватьОтрицательныеСРпоНДСприПокупке = ?(Константа.УчитыватьОтрицательныеСуммовыеРазницыПриОпределенииВычетовПоНДС.Получить(ТекДок.ДатаДок) = Да, 1, 0);
	
	Если ((Документ.Вид() = "ПоступлениеТоваров") или
	(Документ.Вид() = "ПоступлениеМатериалов") или
	(Документ.Вид() = "ПоступлениеОС") или
	(Документ.Вид() = "ПоступлениеНМА") или
	(Документ.Вид() = "УслугиСтороннихОрганизаций") или
	(Документ.Вид() = "ПоступлениеОборудования")) Тогда
		Если Документ.НДСвключатьВСтоимость = 0 Тогда
			Док = СоздатьОбъект("Документ");
			Если ПустоеЗначение(Документ.ДатаНомерСчетаФактуры) = 0 Тогда
				Док.НайтиДокумент(Документ.ТекущийДокумент());
			Иначе
				Док.ВыбратьПодчиненныеДокументы(Документ.ДатаДок,ТекДок.ДатаДок,Документ.ТекущийДокумент());
				Пока Док.ПолучитьДокумент() = 1 Цикл
					Если (Док.ПометкаУдаления() = 0) и (Док.Вид() = "СчетФактураПолученный") Тогда
						Прервать;
					КонецЕсли;
				КонецЦикла;				
			КонецЕсли;
			Если ПустоеЗначение(Док)=0 Тогда
				Если Док.ДатаДок<'01.01.2006' Тогда
					УчитыватьПоложительныеСРпоНДСприПокупке = 1;
					УчитыватьОтрицательныеСРпоНДСприПокупке = 1;
				КонецЕсли; 
			КонецЕсли;
		КонецЕсли; 
	Иначе
		Если ПустоеЗначение(Документ)=0 Тогда
			Если Константа.МетодОпределенияВыручки.Получить(Документ.ДатаДок) = Перечисление.МетодыОпределенияВыручки.ПоОплате Тогда
				УчитыватьПоложительныеСРпоНДСприПродаже = 1;
				УчитыватьОтрицательныеСРпоНДСприПродаже = 1;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Сч08 = СчетПоКоду("08");
	Сч16 = СчетПоКоду("16");
	Сч60_1 = СчетПоКоду("60.1");
	Сч60_6 = СчетПоКоду("60.6");
	Сч62_1 = СчетПоКоду("62.1");
	Сч62_4 = СчетПоКоду("62.4");
	Сч62_6 = СчетПоКоду("62.6");
	Сч62_8 = СчетПоКоду("62.8");
	Сч76_5 = СчетПоКоду("76.5");
	Сч76_6 = СчетПоКоду("76.6");
	Сч90_1_1 = СчетПоКоду("90.1.1");
	Сч90_1_2 = СчетПоКоду("90.1.2");
	Сч91_1 = СчетПоКоду("91.1");
	Сч91_2 = СчетПоКоду("91.2");
	Сч91 = СчетПоКоду("91");
	СчУЕ_60 = СчетПоКоду("УЕ.60");
	СчУЕ_62 = СчетПоКоду("УЕ.62");
	
	ТаблицаПроводок = СоздатьОбъект("ТаблицаЗначений");
	ТаблицаПроводок.НоваяКолонка("НомерЖурнала");
	ТаблицаПроводок.НоваяКолонка("ДебетСчет");
	ТаблицаПроводок.НоваяКолонка("ДебетСубконто1");
	ТаблицаПроводок.НоваяКолонка("ДебетСубконто2");
	ТаблицаПроводок.НоваяКолонка("ДебетСубконто3");
	ТаблицаПроводок.НоваяКолонка("КредитСчет");
	ТаблицаПроводок.НоваяКолонка("КредитСубконто1");
	ТаблицаПроводок.НоваяКолонка("КредитСубконто2");
	ТаблицаПроводок.НоваяКолонка("КредитСубконто3");
	ТаблицаПроводок.НоваяКолонка("Сумма", "Число", 19, 2);

	Если СуммоваяРазница = 0 Тогда // это погашение задолженности
		
		// Найдем текущую задолженность по договору.
		Если ВестиУчетРасчетовУЕ = 1 Тогда
			Если Счет = Сч60_1 Тогда
			    СчетРасчетов = Сч60_6;
				СчетУЕ = СчУЕ_60;
				
			ИначеЕсли Счет = Сч62_1 Тогда
			    СчетРасчетов = Сч62_6; 
				СчетУЕ = СчУЕ_62;
				
			ИначеЕсли Счет = Сч62_4 Тогда
			    СчетРасчетов = Сч62_8;
				СчетУЕ = "";
				
			ИначеЕсли Счет = Сч76_5 Тогда
			    СчетРасчетов = Сч76_6; 
				Если ТипСальдо = 1 Тогда
					СчетУЕ = СчУЕ_62;
				ИначеЕсли ТипСальдо = 2 Тогда
					СчетУЕ = СчУЕ_60;
				КонецЕсли;
				
			Иначе
				СчетРасчетов = Счет;
				Если Счет = Сч60_6 Тогда			    
					СчетУЕ = СчУЕ_60;
					
				ИначеЕсли Счет = Сч62_6 Тогда			    
					СчетУЕ = СчУЕ_62;
					
				ИначеЕсли Счет = Сч62_8 Тогда			
					СчетУЕ = "";
					
				ИначеЕсли Счет = Сч76_6 Тогда			    
					Если ТипСальдо = 1 Тогда
						СчетУЕ = СчУЕ_62;
					ИначеЕсли ТипСальдо = 2 Тогда
						СчетУЕ = СчУЕ_60;
					КонецЕсли;
				КонецЕсли;	
			КонецЕсли;
		
		Иначе
			СчетРасчетов = Счет;
		КонецЕсли;
		
		СальдоВал = 0;
		СальдоСчУЕВал = 0;
		СальдоРуб = 0;
		СальдоСчУЕРуб = 0;
		
		Если ТипСальдо = 1 Тогда
			Если ПустоеЗначение(Валюта) = 0 Тогда
			    СальдоВал = БухИт.СКД(СчетРасчетов, 2, Валюта, Договор.Владелец, Договор);
				
				Если (ТекДок.ДатаДок >= '01.01.2007') и (ПустоеЗначение(СчетУЕ) = 0) Тогда
					СальдоСчУЕВал = БухИт.СКД(СчетУЕ, 2, Валюта, Договор.Владелец, Договор);
					
				Иначе
					СальдоСчУЕВал = СальдоВал;
				КонецЕсли;
			КонецЕсли;
			
			СальдоРуб = БухИт.СКД(СчетРасчетов, 1,, Договор.Владелец, Договор);
			
			Если (ТекДок.ДатаДок >= '01.01.2007') и (ПустоеЗначение(СчетУЕ) = 0) Тогда
				СальдоСчУЕРуб = БухИт.СКД(СчетУЕ, 1,, Договор.Владелец, Договор);
				
			Иначе
				СальдоСчУЕРуб = СальдоРуб;
			КонецЕсли;
			
		Иначе
			Если ПустоеЗначение(Валюта) = 0 Тогда
				СальдоВал = БухИт.СКК(СчетРасчетов, 2, Валюта, Договор.Владелец, Договор);
				
				Если (ТекДок.ДатаДок >= '01.01.2007') и (ПустоеЗначение(СчетУЕ) = 0) Тогда
					СальдоСчУЕВал = БухИт.СКК(СчетУЕ, 2, Валюта, Договор.Владелец, Договор);
					
				Иначе
					СальдоСчУЕВал = СальдоВал;
				КонецЕсли;
			КонецЕсли;
			
			СальдоРуб = БухИт.СКК(СчетРасчетов, 1,, Договор.Владелец, Договор);
			
			Если (ТекДок.ДатаДок >= '01.01.2007') и (ПустоеЗначение(СчетУЕ) = 0) Тогда
				СальдоСчУЕРуб = БухИт.СКК(СчетУЕ, 1,, Договор.Владелец, Договор);
				
			Иначе
				СальдоСчУЕРуб = СальдоРуб;
			КонецЕсли;
		КонецЕсли;
		
		СальдоВал = Макс(СальдоВал, 0);
		СальдоРуб = Макс(СальдоРуб, 0);
		СальдоСчУЕВал = Макс(СальдоСчУЕВал, 0);
		СальдоСчУЕРуб = Макс(СальдоСчУЕРуб, 0);
		
		Если (ЦеныВДоговоре = 2) и (ОплатаДоговора = 1) Тогда // договор в у. е.
			
			// Найдем курс на дату отгрузки
			Если ПустоеЗначение(Документ) = 1 Тогда
				КурсОтгрузки = ?(СальдоСчУЕВал = 0, 0, Окр(СальдоСчУЕРуб / СальдоСчУЕВал, 4, 1));

			Иначе
				КурсОтгрузки = Документ.Курс * (100 + Договор.ПроцентКорректировкиКурсаУЕ) / 100;
				Кратность = Валюта.Кратность.Получить(Документ.ДатаДок);
				Кратность = ?(Кратность=0, 1, Кратность);
				КурсОтгрузки = КурсОтгрузки / Кратность;
				
				ДокВсего = ?(КурсОтгрузки = 0, 0, СальдоРуб / КурсОтгрузки);
			КонецЕсли;
			
			// Найдем курс на дату оплаты
			КурсОплаты = КурсОплаты * (100 + Договор.ПроцентКорректировкиКурсаУЕ) / 100;
			Кратность = Валюта.Кратность.Получить(ТекДок.ДатаДок);
			Кратность = ?(Кратность=0, 1, Кратность);
			КурсОплаты = КурсОплаты / Кратность;
			
			// Теперь собственно расчет суммы.
			Курс1 = КурсОтгрузки;
			Курс2 = КурсОплаты;
		    
			Если Курс2 <> 0 Тогда // курс по оплате
				Если ВестиУчетРасчетовУЕ = 1 Тогда
					СуммаВал = ?(Курс2 = 0, 0, Окр(СуммаОпл / Курс2, 2, 1));
					СуммаОплатыВал = Мин(СуммаВал, СальдоВал);
					
					Если СуммаВал > СальдоВал Тогда
					    СуммаОплатыРуб = Окр(СуммаОплатыВал * Курс2, 2, 1);
						Если Курс1 <> Курс2 Тогда
						    СуммоваяРазница = СуммаОплатыРуб - Окр(СуммаОплатыВал * Курс1, 2, 1);
						КонецЕсли;
						
					Иначе
						СуммаОплатыРуб = СуммаОпл;
						
						Если Курс1 <> Курс2 Тогда
							Если СуммаВал = СальдоСчУЕВал Тогда
								СуммоваяРазница = СуммаОплатыРуб - СальдоСчУЕРуб;
								
							Иначе
								СуммоваяРазница = СуммаОплатыРуб - Окр(СуммаОплатыВал * Курс1, 2, 1);
							КонецЕсли;
						КонецЕсли;
					КонецЕсли;
					
					Если ТекДок.ДатаДок >= '01.01.2007' Тогда 
						Если (ПустоеЗначение(СчетУЕ) = 0) и (СуммаОплатыРуб <> 0)
						и (Найти("60.6,62.6,76.6",СчетРасчетов.Код) > 0) Тогда
							ТекДок.Операция.НоваяПроводка(); ТекДок.Операция.РазделительУчета = ТекДок.ЮрЛицо;
							ТекДок.Операция.ПервичныйДокумент  = глПредставлениеПервичногоДокумента(ТекДок);
							ТекДок.Операция.НомерЖурнала = "УЕ"; 					
							
							Если СчетУЕ = СчУЕ_60 Тогда
								ТекДок.Операция.Дебет.Счет = СчетУЕ;
								ТекДок.Операция.Дебет.Субконто(1, Договор.Владелец);
								ТекДок.Операция.Дебет.Субконто(2, Договор);							
								ТекДок.Операция.СодержаниеПроводки = "Погашение задолженности по приобретению в у.е.";
							Иначе 
								ТекДок.Операция.Кредит.Счет = СчетУЕ;
								ТекДок.Операция.Кредит.Субконто(1, Договор.Владелец);
								ТекДок.Операция.Кредит.Субконто(2, Договор);						
								ТекДок.Операция.СодержаниеПроводки = "Погашение задолженности по реализации в у.е.";
							КонецЕсли;
							
							ТекДок.Операция.Сумма = СуммаОплатыРуб - СуммоваяРазница;
							ТекДок.Операция.Валюта = Валюта;
							ТекДок.Операция.ВалСумма = СуммаОплатыВал;
						КонецЕсли; 
					КонецЕсли;
					
				ИначеЕсли ПустоеЗначение(ДокВсего) = 0 Тогда
					Сумма = Мин(СуммаОпл,Окр(ДокВсего*Курс2,2,1));
					СуммаВал = Сумма/Курс2;
					СуммаОплатыРуб = Сумма;
					
					Если Курс1 <> Курс2 Тогда
						СуммоваяРазница = Сумма - Окр(СуммаВал*Курс1, 2, 1);
					КонецЕсли;
					
				Иначе
					СуммаОплатыРуб = Мин(СуммаОпл, СальдоРуб);
					СуммаОплатыВал = СуммаОплатыРуб / Курс2;
				КонецЕсли;
			КонецЕсли;
			
		ИначеЕсли (ЦеныВДоговоре = 2) и (ОплатаДоговора = 2) Тогда // договор в валюте
			СуммаОплатыВал = Мин(СуммаОпл, СальдоВал);
			
		Иначе // договор в рублях
			СуммаОплатыРуб = Мин(СуммаОпл, СальдоРуб);
		КонецЕсли;
	КонецЕсли;
	
	Если ВестиУчетРасчетовУЕ = 0 Тогда
		Валюта = ""; // чтобы в документе оплаты не выбрался валютный счет
	КонецЕсли;
	
	Если СуммоваяРазница = 0 Тогда
		Возврат; // формировать проводки по суммовой разнице не нужно
		
	ИначеЕсли ПустоеЗначение(Документ) = 1 Тогда
		Возврат; // если не указан документ, то просто рассчитываем сумму в у. е. и получаем признак учета расчетов в у. е.
	КонецЕсли;
	
	// Теперь можно формировать проводки по суммовым разницам.
	// Части суммовой разницы распределенные по строкам документа-основания
	// соберем в таблице значений "ТаблицаПроводок".
		
	// Строка для свертки таблицы значений.
	Стр = "ДебетСчет,ДебетСубконто1,ДебетСубконто2,ДебетСубконто3,";
	Стр = Стр + "КредитСчет,КредитСубконто1,КредитСубконто2,КредитСубконто3,";
	Стр = Стр + "НомерЖурнала";
	    
	СпрПрочиеДоходыИРасходы = СоздатьОбъект("Справочник.ПрочиеДоходыИРасходы");
	СпрПрочиеДоходыИРасходы.ВыбратьЭлементыПоРеквизиту("ВидПрочихДоходовИРасходов", Перечисление.ВидыПрочихДоходовИРасходов.ПрочиеВнереализационныеДоходыРасходы,,);
	Аналитика91 = "";
	СуммовыеРазницы = ""; 
	
	Если ТекДок.ДатаДок >= '01.01.2007' Тогда
		НаименованиеВидаПрочихДоходовИРасходов = "Курсовые разницы по расчетам в у.е.";
	Иначе
		НаименованиеВидаПрочихДоходовИРасходов = "Суммовые разницы";
	КонецЕсли;
	
	Пока (СпрПрочиеДоходыИРасходы.ПолучитьЭлемент() = 1) и (ПустоеЗначение(Аналитика91) = 1) Цикл
		Если СпрПрочиеДоходыИРасходы.Наименование = "Курсовые разницы" Тогда
			Аналитика91 = СпрПрочиеДоходыИРасходы.ТекущийЭлемент();
		КонецЕсли;
		
		Если (Константа.СпособБухгалтерскогоУчетаСуммовыхРазницВСтоимостиМПЗ.Получить(ТекДок.ДатаДок)=Перечисление.СпособыБухгалтерскогоУчетаСуммовыхРазницВСтоимостиМПЗ.ВнереализационныеДоходыИРасходы) 
		или (ТекДок.ДатаДок >= '01.01.2007')Тогда
			Если СпрПрочиеДоходыИРасходы.Наименование = НаименованиеВидаПрочихДоходовИРасходов Тогда
				СуммовыеРазницы = СпрПрочиеДоходыИРасходы.ТекущийЭлемент();
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	Если (ПустоеЗначение(СуммовыеРазницы) = 1)
	И ((Константа.СпособБухгалтерскогоУчетаСуммовыхРазницВСтоимостиМПЗ.Получить(ТекДок.ДатаДок)=Перечисление.СпособыБухгалтерскогоУчетаСуммовыхРазницВСтоимостиМПЗ.ВнереализационныеДоходыИРасходы) 
	или (ТекДок.ДатаДок >= '01.01.2007')) Тогда
		СпрПрочиеДоходыИРасходы.Новый();
		СпрПрочиеДоходыИРасходы.Наименование = НаименованиеВидаПрочихДоходовИРасходов;
		СпрПрочиеДоходыИРасходы.ВидПрочихДоходовИРасходов = Перечисление.ВидыПрочихДоходовИРасходов.ПрочиеВнереализационныеДоходыРасходы;
		СпрПрочиеДоходыИРасходы.Записать();
		СуммовыеРазницы = СпрПрочиеДоходыИРасходы.ТекущийЭлемент();
	КонецЕсли;

	
	Если ВестиУчетРасчетовУЕ = 0 Тогда
		СчетРасчетовСПоставщиком = Сч60_1;
	    СчетРасчетовСПокупателем = Сч62_1;
		СчетРасчетовЗаКомиссионныеТовары = Сч62_4;
		
	Иначе
		СчетРасчетовСПоставщиком = Сч60_6;
		СчетРасчетовСПокупателем = Сч62_6;
		СчетРасчетовЗаКомиссионныеТовары = Сч62_8;
	КонецЕсли;
	
	// Суммовая разница для целей налогового учета.
	СуммоваяРазницаНУ = СуммоваяРазница;
	СуммоваяРазницаНеПринятаяКНУ = 0;
	СуммоваяРазницаВСтоимости = 0;
	СуммоваяРазницаВСуммеНДС = 0; 
	
	СуммоваяРазницаПоКомиссионнымТоварам = ?((Счет = Сч62_4) или (Счет = Сч62_8), 1, 0);
	
	// Установим режим обработки НДС
	АвтоНДС = Договор.АвтоОбработкаНДС; 
	НомЖур = "ТВ";
	
	// Формирование проводок по суммовым разницам, возникших при расчетах с поставщиками.
	Если (Документ.Вид() = "ПоступлениеТоваров") или
		 (Документ.Вид() = "ПоступлениеМатериалов") или
		 (Документ.Вид() = "ПоступлениеОС") или
		 (Документ.Вид() = "ПоступлениеНМА") или
		 (Документ.Вид() = "ПоступлениеОборудования") Тогда
		
		Если Документ.Вид() = "ПоступлениеТоваров" Тогда
			Если (Документ.ВидПоступления>2) и (Документ.ВидПоступления <>11) Тогда
			    Возврат;
			КонецЕсли;
			СчетПоступления = СчетПоКоду("16.2");
			Сч19 = СчетПоКоду("19.3");
			НомЖур = "ТВ";
			Реквизит = "Товар";
			
		ИначеЕсли Документ.Вид() = "ПоступлениеМатериалов" Тогда
			СчетПоступления = СчетПоКоду("16.1");
			Сч19 = СчетПоКоду("19.3");
			НомЖур = "МТ";
			Реквизит = "Материал";
			
		ИначеЕсли Документ.Вид() = "ПоступлениеОС" Тогда
			СчетПоступления = СчетПоКоду("08.4");
			Сч19 = СчетПоКоду("19.1");
			НомЖур = "ОС";
			Реквизит = "ОбъектВнеоборотныхАктивов";
			
		ИначеЕсли Документ.Вид() = "ПоступлениеНМА" Тогда
			СчетПоступления = СчетПоКоду("08.5");
			Сч19 = СчетПоКоду("19.2");
			НомЖур = "НА";                    
			Реквизит = "ОбъектВнеоборотныхАктивов";
			
		ИначеЕсли Документ.Вид() = "ПоступлениеОборудования" Тогда
			СчетПоступления = СчетПоКоду("16.3");
			Сч19 = СчетПоКоду("19.1");
			НомЖур = "ОС";
			Реквизит = "Оборудование";
		КонецЕсли;
		
		СуммаПоступления = 0;
		СуммаНДС = 0;

		Документ.ВыбратьСтроки();
		Пока Документ.ПолучитьСтроку() = 1 Цикл
			Если Реквизит = "Товар" Тогда
				Если Документ.Товар.ТипТовара = Перечисление.ТипыТоваров.НаКомиссии Тогда
					Продолжить;
				КонецЕсли;
			КонецЕсли;
			СуммаПоступления = СуммаПоступления + Документ.Всего;
			СуммаНДС = СуммаНДС + Документ.НДС;
		КонецЦикла;
		
		Если СуммаПоступления = 0 Тогда
			Возврат;
		КонецЕсли;
		
		Если (Документ.НДСВключатьВСтоимость = 1) или (СуммаНДС = 0) Тогда
			СуммоваяРазницаВСтоимости = СуммоваяРазница;
		
		Иначе
			Если ((СуммоваяРазница > 0) и (УчитыватьПоложительныеСРпоНДСприПокупке = 1)) или ((СуммоваяРазница < 0) и (УчитыватьОтрицательныеСРпоНДСприПокупке = 1)) Тогда
				СуммоваяРазницаВСуммеНДС = Окр(СуммоваяРазница*СуммаНДС/СуммаПоступления,2,1);
				СуммоваяРазницаВСтоимости = СуммоваяРазница - СуммоваяРазницаВСуммеНДС;	
				
			Иначе
			    СуммоваяРазницаВСтоимости = СуммоваяРазница;
			КонецЕсли;
		КонецЕсли;
		
		Документ.ВыбратьСтроки();
		РаспределеннаяСумма = 0;
		Пока Документ.ПолучитьСтроку() = 1 Цикл
			Если Реквизит = "Товар" Тогда
				Если Документ.Товар.ТипТовара = Перечисление.ТипыТоваров.НаКомиссии Тогда
					Продолжить;
				КонецЕсли;
			КонецЕсли;
			// Не формируем суммовых разниц по основным средствам и нематериальным активам, 
			// введенным в эксплуатацию.
			ТаблицаПроводок.НоваяСтрока();
			ТаблицаПроводок.НомерЖурнала = НомЖур;

			Если (Константа.СпособБухгалтерскогоУчетаСуммовыхРазницВСтоимостиМПЗ.Получить(ТекДок.ДатаДок)=Перечисление.СпособыБухгалтерскогоУчетаСуммовыхРазницВСтоимостиМПЗ.ВнереализационныеДоходыИРасходы)
			И (СчетПоступления.ПринадлежитГруппе(СчетПоКоду("16"))=1) Тогда
				Если (СуммоваяРазницаВСтоимости*Документ.Всего/СуммаПоступления)>0 Тогда
					СчетПоступления=Сч91_2;
				Иначе 
					СчетПоступления=Сч91_1;
				КонецЕсли;
			КонецЕсли;        				

			ТаблицаПроводок.Сумма = СуммоваяРазницаВСтоимости*Документ.Всего/СуммаПоступления;
			РаспределеннаяСумма = РаспределеннаяСумма + ТаблицаПроводок.Сумма;
			Если СчетПоступления <> Сч91_1 Тогда
				ТаблицаПроводок.ДебетСчет = СчетПоступления;
				Если ПустоеЗначение(СчетПоступления.ВидСубконто(1)) = 0 Тогда
					ТаблицаПроводок.ДебетСубконто1 = ?(СчетПоступления.ПринадлежитГруппе(Сч91)=1, СуммовыеРазницы,Документ.ПолучитьАтрибут(Реквизит));
				КонецЕсли;
				ТаблицаПроводок.КредитСчет = СчетРасчетовСПоставщиком;
				ТаблицаПроводок.КредитСубконто1 = Документ.Контрагент;
				ТаблицаПроводок.КредитСубконто2 = Документ.Договор;                
			Иначе
				ТаблицаПроводок.КредитСчет = СчетПоступления;
				ТаблицаПроводок.КредитСубконто1 = СуммовыеРазницы;
				ТаблицаПроводок.ДебетСчет = СчетРасчетовСПоставщиком;
				ТаблицаПроводок.ДебетСубконто1 = Документ.Контрагент;
				ТаблицаПроводок.ДебетСубконто2 = Документ.Договор;
				ТаблицаПроводок.Сумма = (-1) * ТаблицаПроводок.Сумма;
			КонецЕсли;
		
		КонецЦикла;
		
		// Скорректируем сумму последней проводки.
		Если РаспределеннаяСумма <> СуммоваяРазницаВСтоимости Тогда
			ТаблицаПроводок.Сумма = ТаблицаПроводок.Сумма + (СуммоваяРазницаВСтоимости - РаспределеннаяСумма);
		КонецЕсли;
		
		СуммоваяРазницаНУ = - (СуммоваяРазницаНУ - СуммоваяРазницаВСуммеНДС);
		
	ИначеЕсли  Документ.Вид() = "УслугиСтороннихОрганизаций" Тогда
		
		Если Документ.Итог("Всего") = 0 Тогда
			Возврат;
		КонецЕсли;
		
		Если (Документ.НДСВключатьВСтоимость = 1) или (Документ.Итог("НДС") = 0) Тогда
			СуммоваяРазницаВСтоимости = СуммоваяРазница;
		
		Иначе
			Если ((СуммоваяРазница > 0) и (УчитыватьПоложительныеСРпоНДСприПокупке = 1)) или ((СуммоваяРазница < 0) и (УчитыватьОтрицательныеСРпоНДСприПокупке = 1)) Тогда
				СуммоваяРазницаВСуммеНДС = Окр(СуммоваяРазница*Документ.Итог("НДС")/Документ.Итог("Всего"),2,1);
				СуммоваяРазницаВСтоимости = СуммоваяРазница - СуммоваяРазницаВСуммеНДС;
				
			Иначе
				СуммоваяРазницаВСтоимости = СуммоваяРазница;
			КонецЕсли;
		КонецЕсли;
		
		// Определим счет расчетов с поставщиком.
		Если Документ.ТипИсполнителя = 1 Тогда
			СчетРасчетовСПоставщиком = ?(ВестиУчетРасчетовУЕ = 0, Сч60_1, Сч60_6);
		Иначе
			СчетРасчетовСПоставщиком = ?(ВестиУчетРасчетовУЕ = 0, Сч76_5, Сч76_6);
		КонецЕсли;
		
		// Распределение суммовой разницы по дополнительным расходам на приобретение.
		Если Документ.ДокументПоступления.Выбран() = 1 Тогда
			Если Документ.ДокументПоступления.Вид() = "ПоступлениеТоваров" Тогда
				СчетПоступления = СчетПоКоду("16.2");
				Сч19 = СчетПоКоду("19.3");
				НомЖур = "ТВ";
				Реквизит = "Товар";
				
			ИначеЕсли Документ.ДокументПоступления.Вид() = "ПоступлениеМатериалов" Тогда
				СчетПоступления = СчетПоКоду("16.1");
				Сч19 = СчетПоКоду("19.3");
				НомЖур = "МТ";
				Реквизит = "Материал";
				
			ИначеЕсли Документ.ДокументПоступления.Вид() = "ПоступлениеОС" Тогда
				СчетПоступления = СчетПоКоду("08.4");
				Сч19 = СчетПоКоду("19.1");
				НомЖур = "ОС";
				Реквизит = "ОбъектВнеоборотныхАктивов";
				
			ИначеЕсли Документ.ДокументПоступления.Вид() = "ПоступлениеНМА" Тогда
				СчетПоступления = СчетПоКоду("08.5");
				Сч19 = СчетПоКоду("19.2");
				НомЖур = "НА";                    
				Реквизит = "ОбъектВнеоборотныхАктивов";
				
			ИначеЕсли Документ.ДокументПоступления.Вид() = "ПоступлениеОборудования" Тогда
				СчетПоступления = СчетПоКоду("16.3");
				Сч19 = СчетПоКоду("19.1");
				НомЖур = "ОС";
				Реквизит = "Оборудование";
			КонецЕсли;
			ДокПоступления = СоздатьОбъект("Документ");
			ДокПоступления.НайтиДокумент(Документ.ДокументПоступления);
			
			ДокПоступления.ВыбратьСтроки();
			Пока ДокПоступления.ПолучитьСтроку() = 1 Цикл
				Если Реквизит = "Товар" Тогда
					Если ДокПоступления.Товар.ТипТовара = Перечисление.ТипыТоваров.НаКомиссии Тогда
						Продолжить;
					КонецЕсли;
				КонецЕсли;
				СуммаПоступления = СуммаПоступления + ДокПоступления.Всего;
			КонецЦикла;
			
			СуммаУслуг = 0;
			ДокПоступления.ВыбратьСтроки();
			Пока ДокПоступления.ПолучитьСтроку() = 1 Цикл
				Если Реквизит = "Товар" Тогда
					Если ДокПоступления.Товар.ТипТовара = Перечисление.ТипыТоваров.НаКомиссии Тогда
						Продолжить;
					КонецЕсли;
				КонецЕсли;
				ТаблицаПроводок.НоваяСтрока();
				ТаблицаПроводок.НомерЖурнала = НомЖур;

				Если (Константа.СпособБухгалтерскогоУчетаСуммовыхРазницВСтоимостиМПЗ.Получить(ТекДок.ДатаДок)=Перечисление.СпособыБухгалтерскогоУчетаСуммовыхРазницВСтоимостиМПЗ.ВнереализационныеДоходыИРасходы)
				И (СчетПоступления.ПринадлежитГруппе(СчетПоКоду("16"))=1) Тогда
					Если (СуммоваяРазницаВСтоимости*ДокПоступления.Всего/СуммаПоступления)>0 Тогда
						СчетПоступления=Сч91_2;
					Иначе 
						СчетПоступления=Сч91_1;
					КонецЕсли;
				КонецЕсли;        				

				ТаблицаПроводок.Сумма = СуммоваяРазницаВСтоимости*ДокПоступления.Всего/СуммаПоступления;
				СуммаУслуг = СуммаУслуг + ТаблицаПроводок.Сумма;
				Если СчетПоступления <> Сч91_1 Тогда
					ТаблицаПроводок.ДебетСчет = СчетПоступления;
					ТаблицаПроводок.ДебетСубконто1 = ?(СчетПоступления.ПринадлежитГруппе(Сч91)=1, СуммовыеРазницы,ДокПоступления.ПолучитьАтрибут(Реквизит));					
					Если СчетПоступления.ПринадлежитГруппе(Сч08) = 0 Тогда
						ТаблицаПроводок.ДебетСубконто2 = ДокПоступления.МестоХранения;
					КонецЕсли;
					ТаблицаПроводок.КредитСчет = СчетРасчетовСПоставщиком;
					ТаблицаПроводок.КредитСубконто1 = Документ.Контрагент;
					ТаблицаПроводок.КредитСубконто2  = Документ.Договор;
				Иначе
					ТаблицаПроводок.КредитСчет = СчетПоступления;
					ТаблицаПроводок.КредитСубконто1 = СуммовыеРазницы;
					ТаблицаПроводок.ДебетСчет = СчетРасчетовСПоставщиком;
					ТаблицаПроводок.ДебетСубконто1 = Документ.Контрагент;
					ТаблицаПроводок.ДебетСубконто2  = Документ.Договор;
					ТаблицаПроводок.Сумма = (-1) * ТаблицаПроводок.Сумма;
				КонецЕсли;
				
			КонецЦикла;
			
			// Корректировка суммы последней проводки.
			Если СуммаУслуг = СуммоваяРазницаВСтоимости Тогда
			Иначе
				ТаблицаПроводок.Сумма = ТаблицаПроводок.Сумма + СуммоваяРазницаВСтоимости - СуммаУслуг;
			КонецЕсли;
			
			СуммоваяРазницаНУ = СуммоваяРазницаНУ - СуммоваяРазницаВСуммеНДС;
			
		Иначе // Распределение суммовой разницы по услугам сторонних организаций.
			СуммоваяРазницаПринятаяКНУ = 0;
			
			РаспределеннаяСуммоваяРазница = 0;
			УчтенаСуммаДокумента = 0;    
			
			РаспределеннаяСуммоваяРазницаНДС = 0;
			УчтенаСуммаДокументаНДС = 0;
			
			Документ.ВыбратьСтроки();
			Пока Документ.ПолучитьСтроку() = 1 Цикл
				ТаблицаПроводок.НоваяСтрока();
				ТаблицаПроводок.НомерЖурнала = "СО";
				// Суммовую разницу по услугам распределяем на счета отнесения затрат.
				ТаблицаПроводок.ДебетСчет = Документ.КоррСчет;
				ТаблицаПроводок.ДебетСубконто1 = Документ.Субконто1;
				ТаблицаПроводок.ДебетСубконто2 = Документ.Субконто2;
				ТаблицаПроводок.ДебетСубконто3 = Документ.Субконто3;
				ТаблицаПроводок.КредитСчет = СчетРасчетовСПоставщиком;
				ТаблицаПроводок.КредитСубконто1 = Документ.Контрагент;
				ТаблицаПроводок.КредитСубконто2 = Документ.Договор;
				                     
				УчтенаСуммаДокумента = УчтенаСуммаДокумента + Документ.Всего;
				ТаблицаПроводок.Сумма = СуммоваяРазницаВСтоимости*(УчтенаСуммаДокумента/Документ.Итог("Всего")) - РаспределеннаяСуммоваяРазница;
				РаспределеннаяСуммоваяРазница = РаспределеннаяСуммоваяРазница + ТаблицаПроводок.Сумма;  
				
				Если Документ.НДС > 0 Тогда
					Если Документ.КоррСчет = СчетПоКоду("07") Тогда
						Сч19 = СчетПоКоду("19.1");
					ИначеЕсли Документ.КоррСчет = СчетПоКоду("08.5") Тогда
						Сч19 = СчетПоКоду("19.2");
					ИначеЕсли Документ.КоррСчет.ПринадлежитГруппе(СчетПоКоду("08")) = 1 Тогда
						Сч19 = СчетПоКоду("19.1");
					Иначе
						Сч19 = СчетПоКоду("19.3");
					КонецЕсли;
				
				Иначе
					Сч19 = СчетПоКоду("19.3");
				КонецЕсли;
				
				// Определим надо ли принимать суммовую разницу по данной строке к налоговому учету.
				Если глНовыеПравилаВеденияНУ(ТекДок.ДатаДок) = 1 Тогда
					ОбъектыАналитикиНУ = глСчетИАналитикаРасходовНУ(Документ, Документ.КоррСчет, Документ.Субконто1, Документ.Субконто2, Документ.Субконто3, ПереченьСтатейЗатрат, Документ.КоррСчет, 0);
					СчетНУ = ОбъектыАналитикиНУ.Получить("Счет");
					Если ПустоеЗначение(СчетНУ) = 1 Тогда
						Продолжить;
						
					ИначеЕсли СчетНУ.ПринадлежитГруппе(СчетПоКоду("Н07.04")) = 1 Тогда
						Если ОбъектыАналитикиНУ.Получить("ГруппыВидыРасходов") = Перечисление.ГруппыВидыРасходов.НеПринимаемые Тогда
						    СуммоваяРазницаНеПринятаяКНУ = СуммоваяРазницаНеПринятаяКНУ + ТаблицаПроводок.Сумма;
						КонецЕсли;
						
					ИначеЕсли СчетНУ = СчетПоКоду("Н08") Тогда
						Если ОбъектыАналитикиНУ.Получить("ВнереализационныеДоходы") = Перечисление.ВнереализационныеДоходы.НеПринимаемые Тогда
						    СуммоваяРазницаНеПринятаяКНУ = СуммоваяРазницаНеПринятаяКНУ + ТаблицаПроводок.Сумма;
						КонецЕсли;
						
					ИначеЕсли СчетНУ = СчетПоКоду("Н09") Тогда
						Если ОбъектыАналитикиНУ.Получить("ВнереализационныеРасходы") = Перечисление.ВнереализационныеРасходы.НеПринимаемые Тогда
						    СуммоваяРазницаНеПринятаяКНУ = СуммоваяРазницаНеПринятаяКНУ + ТаблицаПроводок.Сумма;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
				СуммоваяРазницаПринятаяКНУ = СуммоваяРазницаПринятаяКНУ + ТаблицаПроводок.Сумма;
			КонецЦикла;
			
			Док = СоздатьОбъект("Документ");
			Если ПустоеЗначение(Документ.ДатаНомерСчетаФактуры) = 0 Тогда
				Док.НайтиДокумент(Документ.ТекущийДокумент());
			Иначе
				Док.ВыбратьПодчиненныеДокументы(Документ.ДатаДок,ТекДок.ДатаДок,Документ.ТекущийДокумент());
				Пока Док.ПолучитьДокумент() = 1 Цикл
					Если (Док.ПометкаУдаления() = 0) и (Док.Вид() = "СчетФактураПолученный") Тогда
						Прервать;
					КонецЕсли;
				КонецЦикла;
				Если Док.Вид()<>"СчетФактураПолученный" Тогда
					Док = ПолучитьПустоеЗначение("Документ");
				КонецЕсли;
			КонецЕсли; 
			СуммоваяРазницаНУ = СуммоваяРазницаПринятаяКНУ;
		КонецЕсли;
		
		СуммоваяРазницаНУ = - СуммоваяРазницаНУ;
		СуммоваяРазницаНеПринятаяКНУ = - СуммоваяРазницаНеПринятаяКНУ;
		
	ИначеЕсли (Документ.Вид() = "РасходнаяНакладная") или
			  (Документ.Вид() = "РеализацияОтгруженнойПродукции") или
			  (Документ.Вид() = "ОказаниеУслуг") или
			  (Документ.Вид() = "ВыполнениеЭтапаРабот") Тогда
	    
		ИспользоватьСчет91 = 0;
		
		Если ТекДок.Вид() = "ОплатаЭтапаРабот" Тогда
			ДокВсего = Документ.Итог("Всего");
			Если ДокВсего = 0 Тогда
				Возврат;
			КонецЕсли;
			
			РаспределеннаяСумма = 0;
			СуммаНДС = 0; 
			Документ.ВыбратьСтроки();
			Пока Документ.ПолучитьСтроку() = 1 Цикл
				РаспределеннаяСумма = РаспределеннаяСумма + Окр(СуммоваяРазница*Документ.Всего/ДокВсего, 2, 1);
				СуммаНДС = СуммаНДС + Документ.НДС;
			КонецЦикла; 
	
			СуммоваяРазницаВСуммеНДС = СуммоваяРазница*СуммаНДС/ДокВсего;

			Если ((СуммоваяРазница > 0) и (УчитыватьПоложительныеСРпоНДСприПродаже = 1)) или ((СуммоваяРазница < 0) и (УчитыватьОтрицательныеСРпоНДСприПродаже = 1)) Тогда
				СуммоваяРазницаНУ = СуммоваяРазницаНУ - СуммоваяРазницаВСуммеНДС;
				
			Иначе
				СуммоваяРазницаНУ = СуммоваяРазницаНУ - СуммоваяРазницаВСуммеНДС;
				СуммоваяРазницаВСуммеНДС = 0;
			КонецЕсли;
			
		Иначе
			
			Если Документ.Вид()="РасходнаяНакладная" Тогда
				Если (Документ.ВидОтгрузки = 3) или (Документ.ВидОтгрузки = 13) Тогда
					СчетРасчетовСПокупателем = СчетПоКоду("76.2"); // в данном случае под "покупателем" подразумевается получатель возвращенного товара
					ИспользоватьСчет91 = 1;
					Если ПустоеЗначение(Аналитика91) = 1 Тогда
						
						Аналитика91 = СуммовыеРазницы;
						
					КонецЕсли;
					Субконто91 = Аналитика91;
				КонецЕсли;
			КонецЕсли;
			Если Документ.Вид() = "ОказаниеУслуг" Тогда
				Номенклатура = "Услуга";
				Если Документ.ТипУслуги = 3 Тогда
					ИспользоватьСчет91 = 1;
					Субконто91 = Документ.СтатьяПрочихДоходовИРасходов;
					Если Документ.ТипЗаказчика = 2 Тогда
						СчетРасчетовСПокупателем = ?(ВестиУчетРасчетовУЕ = 0, Сч76_5, Сч76_6);
					КонецЕсли;
				КонецЕсли; 
			ИначеЕсли Документ.Вид() = "ВыполнениеЭтапаРабот" Тогда
				Номенклатура = "Работа";
			Иначе
				Номенклатура = "Товар";
			КонецЕсли;
			
			Если Номенклатура = "Товар" Тогда
				ДокВсего = 0;
				
				Документ.ВыбратьСтроки();
				Пока Документ.ПолучитьСтроку() = 1 Цикл
					Если Документ.ПолучитьАтрибут(Номенклатура).ТипНоменклатуры = Перечисление.ТипыНоменклатуры.Товар Тогда
						Если ((СуммоваяРазницаПоКомиссионнымТоварам = 1) и
						(Документ.ПолучитьАтрибут(Номенклатура).ТипТовара = Перечисление.ТипыТоваров.НаКомиссии)) или
						((СуммоваяРазницаПоКомиссионнымТоварам = 0) и
						(Документ.ПолучитьАтрибут(Номенклатура).ТипТовара <> Перечисление.ТипыТоваров.НаКомиссии)) Тогда
							
							ДокВсего = ДокВсего + Документ.Всего;
						КонецЕсли;
						
					Иначе
						ДокВсего = ДокВсего + Документ.Всего;
					КонецЕсли;
				КонецЦикла;
				
			Иначе
				ДокВсего = Документ.Итог("Всего");
			КонецЕсли;
			
			Если ДокВсего = 0 Тогда
				Возврат;
			КонецЕсли;
			
			РаспределеннаяСумма = 0;
			СуммаНДС = 0;
			
			Если СуммоваяРазницаПоКомиссионнымТоварам = 1 Тогда
				Документ.Операция.ВыбратьПроводки();
				Пока Документ.Операция.ПолучитьПроводку() = 1 Цикл
					Если (Документ.Операция.Дебет.Счет = СчетРасчетовЗаКомиссионныеТовары) и
					((Документ.Операция.Кредит.Счет = Сч76_5) или ((Документ.Операция.Кредит.Счет = Сч76_6))) Тогда
						
						// Проводка по комиссионным товарам.
						ТаблицаПроводок.НоваяСтрока();
						ТаблицаПроводок.НомерЖурнала = "ТВ";
						ТаблицаПроводок.ДебетСчет = СчетРасчетовЗаКомиссионныеТовары;
						ТаблицаПроводок.ДебетСубконто1 = Документ.Контрагент;
						ТаблицаПроводок.ДебетСубконто2 = Документ.Договор;
						
						ТаблицаПроводок.КредитСчет = Документ.Операция.Кредит.Счет;
						ТаблицаПроводок.КредитСубконто1 = Документ.Операция.Кредит.Субконто(1);
						ТаблицаПроводок.КредитСубконто2 = Документ.Операция.Кредит.Субконто(2);
						
						ТаблицаПроводок.Сумма = Окр(СуммоваяРазница*Документ.Операция.Сумма/КурсОтгрузки/ДокВсего, 2, 1);
						РаспределеннаяСумма = РаспределеннаяСумма + ТаблицаПроводок.Сумма;
					КонецЕсли;
				КонецЦикла;
				
			Иначе
				Документ.ВыбратьСтроки();
				Пока Документ.ПолучитьСтроку() = 1 Цикл
					Если Документ.ПолучитьАтрибут(Номенклатура).ТипНоменклатуры = Перечисление.ТипыНоменклатуры.Товар Тогда
						Если ((СуммоваяРазницаПоКомиссионнымТоварам = 0) и
						(Документ.ПолучитьАтрибут(Номенклатура).ТипТовара = Перечисление.ТипыТоваров.НаКомиссии)) или
						((СуммоваяРазницаПоКомиссионнымТоварам = 1) и
						(Документ.ПолучитьАтрибут(Номенклатура).ТипТовара <> Перечисление.ТипыТоваров.НаКомиссии)) Тогда
							Продолжить;
						КонецЕсли;
					КонецЕсли;
					
					ТаблицаПроводок.НоваяСтрока();
					ТаблицаПроводок.НомерЖурнала = "ТВ";
					ТаблицаПроводок.ДебетСчет = СчетРасчетовСПокупателем;
					ТаблицаПроводок.ДебетСубконто1 = Документ.Контрагент;
					ТаблицаПроводок.ДебетСубконто2 = Документ.Договор;
					
					Если ИспользоватьСчет91 = 1 Тогда
						ТаблицаПроводок.КредитСчет = Сч91_1;
						ТаблицаПроводок.КредитСубконто1 = Субконто91; 
						
					ИначеЕсли Документ.ПолучитьАтрибут(Номенклатура).ТипНоменклатуры = Перечисление.ТипыНоменклатуры.УслугаЕНВД Тогда
						ТаблицаПроводок.КредитСчет = Сч90_1_2;
						ТаблицаПроводок.КредитСубконто1 = Документ.ПолучитьАтрибут(Номенклатура).ВидНоменклатуры;
						
					Иначе
						ТаблицаПроводок.КредитСчет = Сч90_1_1;
						ТаблицаПроводок.КредитСубконто1 = Документ.ПолучитьАтрибут(Номенклатура).ВидНоменклатуры;
						ТаблицаПроводок.КредитСубконто2 = глСтавкаНалога(Документ, "НДС");
						ТаблицаПроводок.КредитСубконто3 = глСтавкаНалога(Документ, "НП");
					КонецЕсли;
					
					ТаблицаПроводок.Сумма = Окр(СуммоваяРазница*Документ.Всего/ДокВсего, 2, 1);
					РаспределеннаяСумма = РаспределеннаяСумма + ТаблицаПроводок.Сумма;
					СуммаНДС = СуммаНДС + Документ.НДС;
				КонецЦикла;
			КонецЕсли;
			
			// Скорректируем сумму последней проводки.
			Если РаспределеннаяСумма <> СуммоваяРазница Тогда
				ТаблицаПроводок.Сумма = ТаблицаПроводок.Сумма + (СуммоваяРазница - РаспределеннаяСумма);
			КонецЕсли;
			
			Если СуммоваяРазницаПоКомиссионнымТоварам = 1 Тогда
				СуммоваяРазницаВСуммеНДС = 0;
				СуммоваяРазницаНУ = 0;
				
			Иначе
				Если ((СуммоваяРазница > 0) и (УчитыватьПоложительныеСРпоНДСприПродаже = 1)) или ((СуммоваяРазница < 0) и (УчитыватьОтрицательныеСРпоНДСприПродаже = 1)) Тогда
					СуммоваяРазницаВСуммеНДС = СуммоваяРазница*СуммаНДС/ДокВсего;
					СуммоваяРазницаНУ = СуммоваяРазницаНУ - СуммоваяРазницаВСуммеНДС;
					
				Иначе
					СуммоваяРазницаВСуммеНДС = 0;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
	Иначе
		Субконто91 = Документ.СтатьяПрочихДоходовИРасходов;
		Если Документ.Вид() = "ОтпускМатериаловНаСторону" Тогда
			Если Документ.Итог("Всего") = 0 Тогда
				Возврат;
			КонецЕсли;
			ДокВсего = Документ.Итог("Всего");
			НомЖур = "МТ";
			Если (Документ.Итог("НДС") = 0) или (((СуммоваяРазница > 0) и (УчитыватьПоложительныеСРпоНДСприПродаже = 0)) или ((СуммоваяРазница < 0) и (УчитыватьОтрицательныеСРпоНДСприПродаже = 0))) Тогда
				СуммоваяРазницаВСуммеНДС = 0;
			
			Иначе
				СуммоваяРазницаВСуммеНДС = СуммоваяРазница*Документ.Итог("НДС")/Документ.Итог("Всего");
			КонецЕсли;
			
			СуммоваяРазницаНУ = СуммоваяРазницаНУ - СуммоваяРазницаВСуммеНДС; 
			
			Если Документ.ВидОтпуска = 2 Тогда
		        СчетРасчетовСПокупателем = СчетПоКоду("76.2");
				Если ПустоеЗначение(Аналитика91) = 1 Тогда

					Аналитика91 = СуммовыеРазницы;

				КонецЕсли;
				Субконто91 = Аналитика91;
			КонецЕсли;
			
		ИначеЕсли Документ.Вид() = "ПередачаОС" Тогда
			Если Документ.Стоимость = 0 Тогда
				Возврат;
			КонецЕсли;
			НомЖур = "ОС";
			ДокВсего = Документ.Стоимость;
			Если (Документ.НДС = 0) или (((СуммоваяРазница > 0) и (УчитыватьПоложительныеСРпоНДСприПродаже = 0)) или ((СуммоваяРазница < 0) и (УчитыватьОтрицательныеСРпоНДСприПродаже = 0))) Тогда
				СуммоваяРазницаВСуммеНДС = 0;
			Иначе
				СуммоваяРазницаВСуммеНДС = СуммоваяРазница*Документ.НДС/ДокВсего;
			КонецЕсли;
		
			СуммоваяРазницаНУ = СуммоваяРазницаНУ - СуммоваяРазницаВСуммеНДС;
			
		ИначеЕсли Документ.Вид() = "ПередачаНМА" Тогда
			Если Документ.Стоимость = 0 Тогда
				Возврат;
			КонецЕсли;
			НомЖур = "НА";
			ДокВсего = Документ.Стоимость;
			Если (Документ.НДС = 0) или (((СуммоваяРазница > 0) и (УчитыватьПоложительныеСРпоНДСприПродаже = 0)) или ((СуммоваяРазница < 0) и (УчитыватьОтрицательныеСРпоНДСприПродаже = 0))) Тогда
				СуммоваяРазницаВСуммеНДС = 0;
			Иначе
				СуммоваяРазницаВСуммеНДС = СуммоваяРазница*Документ.НДС/ДокВсего;
			КонецЕсли;
		
			СуммоваяРазницаНУ = СуммоваяРазницаНУ - СуммоваяРазницаВСуммеНДС;
		КонецЕсли;
		
		ТаблицаПроводок.НоваяСтрока();
		ТаблицаПроводок.НомерЖурнала = НомЖур;
		ТаблицаПроводок.ДебетСчет = СчетРасчетовСПокупателем;
		ТаблицаПроводок.ДебетСубконто1 = Документ.Контрагент;
		ТаблицаПроводок.ДебетСубконто2 = Документ.Договор;
		ТаблицаПроводок.КредитСчет = Сч91_1;
		ТаблицаПроводок.КредитСубконто1 = Субконто91;
		ТаблицаПроводок.Сумма = СуммоваяРазница;
	КонецЕсли;	
	
	// Суммовая разница по начисленному НДС: 
	Если Константа.ВыписыватьОтдельныеСчетаФактурыНаСуммовыеРазницы.Получить(ТекДок.ДатаДок) = Нет Тогда
		Если (СуммоваяРазницаПоКомиссионнымТоварам = 0) и (Договор.АвтоОбработкаНДС = 1) и
		(((СуммоваяРазница > 0) и (УчитыватьПоложительныеСРпоНДСприПродаже = 1)) или ((СуммоваяРазница < 0) и (УчитыватьОтрицательныеСРпоНДСприПродаже = 1))) Тогда
			
			ТаблицаСчетовФактур = СоздатьОбъект("ТаблицаЗначений");
			ТаблицаСчетовФактур.НоваяКолонка("Док");
			ТаблицаСчетовФактур.НоваяКолонка("Счет");
			ТаблицаСчетовФактур.НоваяКолонка("Субконто1");
			ТаблицаСчетовФактур.НоваяКолонка("Субконто2");
			ТаблицаСчетовФактур.НоваяКолонка("Субконто3");
			ТаблицаСчетовФактур.НоваяКолонка("СтавкаНДС");
			ТаблицаСчетовФактур.НоваяКолонка("СуммоваяРазница", "Число");
			ТаблицаСчетовФактур.НоваяКолонка("СуммоваяРазницаВСуммеНДС", "Число");
			ТаблицаСчетовФактур.НоваяКолонка("НДС", "Число");
			ТаблицаСчетовФактур.НоваяКолонка("Всего", "Число");
			
			Док = ПолучитьПустоеЗначение("Документ");
			СчетФактура = СоздатьОбъект("Документ");
			СчетФактура.ВыбратьПодчиненныеДокументы(Документ.ДатаДок,ТекДок.ДатаДок,Документ);
			Пока СчетФактура.ПолучитьДокумент() = 1 Цикл
				Если (СчетФактура.Проведен() = 1) и (СчетФактура.Вид() = "СчетФактура") и (АвтоНДС =1) Тогда
					Если (СчетФактура.СчетНДС = 2) или (ТекДок.ДатаДок >= '01.01.2006') или (Константа.МетодОпределенияВыручки.Получить(СчетФактура.ДатаДок) = Перечисление.МетодыОпределенияВыручки.ПоОплате) Тогда
						Если СчетФактура.Итог("Всего") <> 0 Тогда
							Док = СчетФактура.ТекущийДокумент();
							Док.ВыбратьСтроки();
							Пока Док.ПолучитьСтроку() = 1 Цикл
								Если ТипЗначенияСтр(Док.Товар) = "Справочник" Тогда
									Если Док.Товар.Вид() = "Номенклатура" Тогда
										Если (Док.Товар.ТипНоменклатуры = Перечисление.ТипыНоменклатуры.Товар)
										и (Док.Товар.ТипТовара = Перечисление.ТипыТоваров.НаКомиссии) Тогда
											Продолжить;
										КонецЕсли;
									КонецЕсли;
								КонецЕсли;
								
								ТаблицаСчетовФактур.НоваяСтрока();
								ТаблицаСчетовФактур.Док = Док;
								Если ТекДок.ДатаДок < '01.01.2007' Тогда
									ТаблицаСчетовФактур.Счет = Док.Счет;
									ТаблицаСчетовФактур.Субконто1 = Док.Субконто1;
									ТаблицаСчетовФактур.Субконто2 = Док.Субконто2;
									ТаблицаСчетовФактур.Субконто3 = Док.Субконто3;
								Иначе                     			  		
									ТаблицаСчетовФактур.Счет = Сч91_2;
									ТаблицаСчетовФактур.Субконто1 = СуммовыеРазницы;								
								КонецЕсли;
								
								ТаблицаСчетовФактур.СтавкаНДС = Док.СтавкаНДС;
								ТаблицаСчетовФактур.НДС = Док.НДС;
								ТаблицаСчетовФактур.Всего = Док.Всего;
								ТаблицаСчетовФактур.СтавкаНДС = Док.СтавкаНДС;
							КонецЦикла;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			
			РаспределеноСуммовойРазницы = 0;
			РаспределеноСуммовойРазницыВСуммеНДС = 0;
			
			ТаблицаСчетовФактур.Свернуть("Док,Счет,Субконто1,Субконто2,Субконто3,СтавкаНДС", "НДС,Всего,СуммоваяРазница,СуммоваяРазницаВСуммеНДС");
			ТаблицаСчетовФактур.ВыбратьСтроки();
			Пока ТаблицаСчетовФактур.ПолучитьСтроку() = 1 Цикл
				ТаблицаСчетовФактур.СуммоваяРазница = СуммоваяРазница * ТаблицаСчетовФактур.Всего / ДокВсего;
				РаспределеноСуммовойРазницы = РаспределеноСуммовойРазницы + ТаблицаСчетовФактур.СуммоваяРазница;
				
				ТаблицаСчетовФактур.СуммоваяРазницаВСуммеНДС = СуммоваяРазница * ТаблицаСчетовФактур.НДС / ДокВсего;
				РаспределеноСуммовойРазницыВСуммеНДС = РаспределеноСуммовойРазницыВСуммеНДС + ТаблицаСчетовФактур.СуммоваяРазницаВСуммеНДС;
				
				Если ТаблицаСчетовФактур.НомерСтроки = ТаблицаСчетовФактур.КоличествоСтрок() Тогда
					ТаблицаСчетовФактур.СуммоваяРазница = ТаблицаСчетовФактур.СуммоваяРазница + СуммоваяРазница - РаспределеноСуммовойРазницы;
					ТаблицаСчетовФактур.СуммоваяРазницаВСуммеНДС = ТаблицаСчетовФактур.СуммоваяРазницаВСуммеНДС + СуммоваяРазницаВСуммеНДС - РаспределеноСуммовойРазницыВСуммеНДС;
				КонецЕсли;
				
				ТаблицаПроводок.НоваяСтрока();
				ТаблицаПроводок.НомерЖурнала = НомЖур;
				ТаблицаПроводок.ДебетСчет = ТаблицаСчетовФактур.Счет;
				ТаблицаПроводок.ДебетСубконто1 = ТаблицаСчетовФактур.Субконто1;
				ТаблицаПроводок.ДебетСубконто2 = ТаблицаСчетовФактур.Субконто2;
				ТаблицаПроводок.ДебетСубконто3 = ТаблицаСчетовФактур.Субконто3;
				
				Если ТаблицаСчетовФактур.Док.СчетНДС = 1 Тогда
					ТаблицаПроводок.КредитСчет = СчетПоКоду("68.2");
					ТаблицаПроводок.КредитСубконто1 = Перечисление.ВидыПлатежейВБюджет.Налог;
					
				Иначе
					ТаблицаПроводок.КредитСчет = СчетПоКоду("76.Н.1");
					ТаблицаПроводок.КредитСубконто1 = ТаблицаСчетовФактур.Док.Контрагент;
					ТаблицаПроводок.КредитСубконто2 = ТаблицаСчетовФактур.Док;
				КонецЕсли;
				
				ТаблицаПроводок.Сумма = ТаблицаСчетовФактур.СуммоваяРазницаВСуммеНДС;
			КонецЦикла;
			
			ТаблицаСчетовФактур.Свернуть("Док,СтавкаНДС", "СуммоваяРазница,СуммоваяРазницаВСуммеНДС");
			ТаблицаСчетовФактур.ВыбратьСтроки();
			Пока ТаблицаСчетовФактур.ПолучитьСтроку() = 1 Цикл
				
				СтавкаНДС = ТаблицаСчетовФактур.СтавкаНДС.Ставка;
				
				Если ТаблицаСчетовФактур.СуммоваяРазница <> 0 Тогда
					ТаблицаПроводок.НоваяСтрока();
					ТаблицаПроводок.НомерЖурнала = НомЖур;
					ТаблицаПроводок.КредитСубконто1 = ТаблицаСчетовФактур.Док.Контрагент;
					ТаблицаПроводок.КредитСубконто2 = ТаблицаСчетовФактур.Док.Договор;
					ТаблицаПроводок.КредитСубконто3 = ТаблицаСчетовФактур.Док.ТекущийДокумент();
					ТаблицаПроводок.Сумма = ТаблицаСчетовФактур.СуммоваяРазница - ТаблицаСчетовФактур.СуммоваяРазницаВСуммеНДС;
					
					Если ТаблицаСчетовФактур.Док.НДСпоСтавкеНольПроцентов = 1 Тогда
						ТаблицаПроводок.КредитСчет = СчетПоКоду("ЗПР.0");
					ИначеЕсли СтавкаНДС>10.5 Тогда
						ТаблицаПроводок.КредитСчет = СчетПоКоду("ЗПР.20.Б");
					ИначеЕсли СтавкаНДС>0 Тогда
						ТаблицаПроводок.КредитСчет = СчетПоКоду("ЗПР.10.Б");
					Иначе
						ТаблицаПроводок.КредитСчет = СчетПоКоду("ЗПР.БН");
					КонецЕсли;
				КонецЕсли;
				
				Если (ТаблицаСчетовФактур.СуммоваяРазницаВСуммеНДС <> 0) и (ТаблицаСчетовФактур.Док.НДСпоСтавкеНольПроцентов = 0) Тогда
					ТаблицаПроводок.НоваяСтрока();
					ТаблицаПроводок.НомерЖурнала = НомЖур;
					ТаблицаПроводок.КредитСубконто1 = ТаблицаСчетовФактур.Док.Контрагент;
					ТаблицаПроводок.КредитСубконто2 = ТаблицаСчетовФактур.Док.Договор;
					ТаблицаПроводок.КредитСубконто3 = ТаблицаСчетовФактур.Док.ТекущийДокумент();
					ТаблицаПроводок.Сумма = ТаблицаСчетовФактур.СуммоваяРазницаВСуммеНДС;
					
					Если СтавкаНДС>10.5 Тогда
						ТаблицаПроводок.КредитСчет = СчетПоКоду("ЗПР.20.Н");
					Иначе
						ТаблицаПроводок.КредитСчет = СчетПоКоду("ЗПР.10.Н");
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;

	// Суммовая разница по НДС поставщика.
	Если ((СуммоваяРазница > 0) и (УчитыватьПоложительныеСРпоНДСприПокупке = 1)) или ((СуммоваяРазница < 0) и (УчитыватьОтрицательныеСРпоНДСприПокупке = 1)) Тогда
		Если ((Документ.Вид() = "ПоступлениеТоваров") или
		(Документ.Вид() = "ПоступлениеМатериалов") или
		(Документ.Вид() = "ПоступлениеОС") или
		(Документ.Вид() = "ПоступлениеНМА") или
		(Документ.Вид() = "УслугиСтороннихОрганизаций") или
		(Документ.Вид() = "ПоступлениеОборудования")) Тогда
			Если Документ.НДСвключатьВСтоимость = 0 Тогда
				Док = СоздатьОбъект("Документ");
				Если ПустоеЗначение(Документ.ДатаНомерСчетаФактуры) = 0 Тогда
					Док.НайтиДокумент(Документ.ТекущийДокумент());
				Иначе
					Док.ВыбратьПодчиненныеДокументы(Документ.ДатаДок,ТекДок.ДатаДок,Документ.ТекущийДокумент());
					Пока Док.ПолучитьДокумент() = 1 Цикл
						Если (Док.ПометкаУдаления() = 0) и (Док.Вид() = "СчетФактураПолученный") Тогда
							Прервать;
						КонецЕсли;
					КонецЦикла;
					Если Док.Вид()<>"СчетФактураПолученный" Тогда
						Док = ПолучитьПустоеЗначение("Документ");
					КонецЕсли;
				КонецЕсли;
				
				Если СуммоваяРазницаВСуммеНДС <> 0 Тогда
					ТаблицаПроводок.НоваяСтрока();
					ТаблицаПроводок.НомерЖурнала = НомЖур;
					ТаблицаПроводок.КредитСчет = СчетРасчетовСПоставщиком;
					ТаблицаПроводок.КредитСубконто1 = Документ.Контрагент;
					ТаблицаПроводок.КредитСубконто2 = Документ.Договор;
					ТаблицаПроводок.ДебетСчет = Сч19;
					ТаблицаПроводок.ДебетСубконто1 = Документ.Контрагент;
					Если Док.Выбран() = 1 Тогда
						ТаблицаПроводок.ДебетСубконто2 = Док.ТекущийДокумент();
					КонецЕсли;
					ТаблицаПроводок.Сумма = СуммоваяРазницаВСуммеНДС;
				КонецЕсли;
				
				Если (Док.Выбран()=1) и (Договор.АвтоОбработкаНДС = 1) Тогда
					НДС20 = 0;
					СуммаБезНДС20 = 0;
					НДС10 = 0;
					СуммаБезНДС10 = 0;
					СуммаСовсемБезНДС = 0;
					НДСпоСтавкеНольПроцентов = 0;
					
					Если Док.Вид() = "СчетФактураПолученный" Тогда
						Если Док.НДСпоСтавкеНольПроцентов = 1 Тогда
							НДСпоСтавкеНольПроцентов = Док.Всего;
							
						Иначе
							НДС20 = Док.НДС20;
							СуммаБезНДС20 = Док.СуммаБезНДС20;
							НДС10 = Док.НДС10;
							СуммаБезНДС10 = Док.СуммаБезНДС10;
							СуммаСовсемБезНДС = Док.СуммаСовсемБезНДС;
						КонецЕсли;
						
					Иначе
						//Док.Свернуть("СтавкаНДС,Счет,Субконто1,Субконто2,Субконто3","Сумма,НДС");
						Док.ВыбратьСтроки();
						Пока Док.ПолучитьСтроку() = 1 Цикл
							Если Док.Вид() = "ПоступлениеТоваров" Тогда
								Если Док.Товар.ТипТовара = Перечисление.ТипыТоваров.НаКомиссии Тогда
									Продолжить;
								КонецЕсли;
							КонецЕсли;
							
							СуммаБезНалогов = Док.Всего - Док.НДС - Док.НП;
							
							Если СуммаБезНалогов > 0 Тогда
								СтавкаНДС = 100*Док.НДС/СуммаБезНалогов;
							Иначе
								СтавкаНДС = 20;
							КонецЕсли;
							
							Если СтавкаНДС>10.5 Тогда
								НДС20=НДС20+Док.НДС;
								СуммаБезНДС20=СуммаБезНДС20+СуммаБезНалогов;
								
							ИначеЕсли СтавкаНДС>0 Тогда
								НДС10=НДС10+Док.НДС;
								СуммаБезНДС10=СуммаБезНДС10+СуммаБезНалогов;
								
							Иначе
								СуммаСовсемБезНДС=СуммаСовсемБезНДС+СуммаБезНалогов;
							КонецЕсли;
						КонецЦикла;
					КонецЕсли;
					
					СуммаНСД = НДС20 + НДС10;
					БазаНДС = СуммаБезНДС20 + СуммаБезНДС10 + СуммаСовсемБезНДС;
					СуммоваяРазницаБезНДС = СуммоваяРазница - СуммоваяРазницаВСуммеНДС;
					
					Если СуммаНСД <> 0 Тогда
						СРНДС20 = Окр(СуммоваяРазницаВСуммеНДС * НДС20 / СуммаНСД, 2, 1);
						СРНДС10 = Окр(СуммоваяРазницаВСуммеНДС * НДС10 / СуммаНСД, 2, 1);
						
						Если (СРНДС20 + СРНДС10) <> СуммоваяРазницаВСуммеНДС Тогда
							Если СРНДС20 <> 0 Тогда
								СРНДС20 = СРНДС20 + (СРНДС20 + СРНДС10 - СуммоваяРазницаВСуммеНДС);
								
							Иначе
								СРНДС10 = СРНДС10 + (СРНДС20 + СРНДС10 - СуммоваяРазницаВСуммеНДС);
							КонецЕсли;
						КонецЕсли;
						
					Иначе
						СРНДС20 = 0;
						СРНДС10 = 0;
					КонецЕсли;
					
					Если БазаНДС <> 0 Тогда
						СРБазаНДС20 = Окр(СуммоваяРазницаБезНДС * СуммаБезНДС20 / БазаНДС, 2, 1);
						СРБазаНДС10 = Окр(СуммоваяРазницаБезНДС * СуммаБезНДС10 / БазаНДС, 2, 1);
						СРБазаБезНДС = Окр(СуммоваяРазницаБезНДС * СуммаСовсемБезНДС / БазаНДС, 2, 1);
						
						Если (СРБазаНДС20 + СРБазаНДС10 + СРБазаБезНДС) <> СуммоваяРазницаБезНДС Тогда
							Если СРБазаНДС20 <> 0 Тогда
								СРБазаНДС20 = СРБазаНДС20 + (СРБазаНДС20 + СРБазаНДС10 + СРБазаБезНДС - СуммоваяРазницаБезНДС);
								
							ИначеЕсли СРБазаНДС10 <> 0 Тогда
								СРБазаНДС10 = СРБазаНДС10 + (СРБазаНДС20 + СРБазаНДС10 + СРБазаБезНДС - СуммоваяРазницаБезНДС);
								
							Иначе
								СРБазаБезНДС = СРБазаБезНДС + (СРБазаНДС20 + СРБазаНДС10 + СРБазаБезНДС - СуммоваяРазницаБезНДС);
							КонецЕсли;
						КонецЕсли;
						
					Иначе
						СРБазаНДС20 = 0;
						СРБазаНДС10 = 0;
						СРБазаБезНДС = 0;
					КонецЕсли;
					
					СРНДСпоСтавкеНольПроцентов = ?(НДСпоСтавкеНольПроцентов <> 0, СуммоваяРазница, 0);
					
					Если СРБазаНДС20 <> 0 Тогда
						ТаблицаПроводок.НоваяСтрока();
						ТаблицаПроводок.НомерЖурнала = НомЖур;
						ТаблицаПроводок.КредитСчет = СчетПоКоду("ЗПК.20.Б");
						ТаблицаПроводок.КредитСубконто1 = Док.Контрагент;
						ТаблицаПроводок.КредитСубконто2 = Док.Договор;
						ТаблицаПроводок.КредитСубконто3 = Док.ТекущийДокумент();
						ТаблицаПроводок.Сумма = СРБазаНДС20;
					КонецЕсли;
					
					Если СРБазаНДС10 <> 0 Тогда
						ТаблицаПроводок.НоваяСтрока();
						ТаблицаПроводок.НомерЖурнала = НомЖур;
						ТаблицаПроводок.КредитСчет = СчетПоКоду("ЗПК.10.Б");
						ТаблицаПроводок.КредитСубконто1 = Док.Контрагент;
						ТаблицаПроводок.КредитСубконто2 = Док.Договор;
						ТаблицаПроводок.КредитСубконто3 = Док.ТекущийДокумент();
						ТаблицаПроводок.Сумма = СРБазаНДС10;
					КонецЕсли;
					
					Если СРБазаБезНДС <> 0 Тогда
						ТаблицаПроводок.НоваяСтрока();
						ТаблицаПроводок.НомерЖурнала = НомЖур;
						ТаблицаПроводок.КредитСчет = СчетПоКоду("ЗПК.БН");
						ТаблицаПроводок.КредитСубконто1 = Док.Контрагент;
						ТаблицаПроводок.КредитСубконто2 = Док.Договор;
						ТаблицаПроводок.КредитСубконто3 = Док.ТекущийДокумент();
						ТаблицаПроводок.Сумма = СРБазаБезНДС;
					КонецЕсли;
					
					Если СРНДСпоСтавкеНольПроцентов <> 0 Тогда
						ТаблицаПроводок.НоваяСтрока();
						ТаблицаПроводок.НомерЖурнала = НомЖур;
						ТаблицаПроводок.КредитСчет = СчетПоКоду("ЗПК.0");
						ТаблицаПроводок.КредитСубконто1 = Док.Контрагент;
						ТаблицаПроводок.КредитСубконто2 = Док.Договор;
						ТаблицаПроводок.КредитСубконто3 = Док.ТекущийДокумент();
						ТаблицаПроводок.Сумма = СРНДСпоСтавкеНольПроцентов;
					КонецЕсли;
					
					Если СРНДС20 <> 0 Тогда
						ТаблицаПроводок.НоваяСтрока();
						ТаблицаПроводок.НомерЖурнала = НомЖур;
						ТаблицаПроводок.КредитСчет = СчетПоКоду("ЗПК.20.Н");
						ТаблицаПроводок.КредитСубконто1 = Док.Контрагент;
						ТаблицаПроводок.КредитСубконто2 = Док.Договор;
						ТаблицаПроводок.КредитСубконто3 = Док.ТекущийДокумент();
						ТаблицаПроводок.Сумма = СРНДС20;
					КонецЕсли;
					
					Если СРНДС10 <> 0 Тогда
						ТаблицаПроводок.НоваяСтрока();
						ТаблицаПроводок.НомерЖурнала = НомЖур;
						ТаблицаПроводок.КредитСчет = СчетПоКоду("ЗПК.10.Н");
						ТаблицаПроводок.КредитСубконто1 = Док.Контрагент;
						ТаблицаПроводок.КредитСубконто2 = Док.Договор;
						ТаблицаПроводок.КредитСубконто3 = Док.ТекущийДокумент();
						ТаблицаПроводок.Сумма = СРНДС10;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	// Формирование проводок документа:
	ТаблицаПроводок.Свернуть(Стр, "Сумма");
	ТаблицаПроводок.ВыбратьСтроки();
	Пока ТаблицаПроводок.ПолучитьСтроку() = 1 Цикл 
		
		Если ТекДок.ДатаДок >= '01.01.2007' Тогда
			Если ПустоеЗначение(ТаблицаПроводок.ДебетСчет) = 0 Тогда
				Если (Найти("60.6,62.6,76.6",ТаблицаПроводок.ДебетСчет.Код) > 0) Тогда
					Продолжить;
				КонецЕсли;                                              
			КонецЕсли;                                              
			Если ПустоеЗначение(ТаблицаПроводок.КредитСчет) = 0 Тогда			
				Если (Найти("60.6,62.6,76.6",ТаблицаПроводок.КредитСчет.Код) > 0) Тогда
					Продолжить;
				КонецЕсли;
			КонецЕсли;			
		КонецЕсли; 
		
		ТекДок.Операция.НоваяПроводка(); ТекДок.Операция.РазделительУчета = ТекДок.ЮрЛицо;
		ТекДок.Операция.ПервичныйДокумент  = глПредставлениеПервичногоДокумента(ТекДок);
		ТекДок.Операция.НомерЖурнала = ТаблицаПроводок.НомерЖурнала;
		ТекДок.Операция.Дебет.Счет = ТаблицаПроводок.ДебетСчет;
		ТекДок.Операция.Дебет.Субконто(1, ТаблицаПроводок.ДебетСубконто1);
		ТекДок.Операция.Дебет.Субконто(2, ТаблицаПроводок.ДебетСубконто2);
		ТекДок.Операция.Дебет.Субконто(3, ТаблицаПроводок.ДебетСубконто3);
		ТекДок.Операция.Кредит.Счет = ТаблицаПроводок.КредитСчет;
		ТекДок.Операция.Кредит.Субконто(1, ТаблицаПроводок.КредитСубконто1);
		ТекДок.Операция.Кредит.Субконто(2, ТаблицаПроводок.КредитСубконто2);
		ТекДок.Операция.Кредит.Субконто(3, ТаблицаПроводок.КредитСубконто3);
		ТекДок.Операция.Сумма = ТаблицаПроводок.Сумма;
		ТекДок.Операция.СодержаниеПроводки = НаименованиеВидаПрочихДоходовИРасходов;
		
		Если ТипЗначенияСтр(ТаблицаПроводок.ДебетСчет) = "Счет" Тогда
		    Если ТаблицаПроводок.ДебетСчет.Валютный = 1 Тогда
			    ТекДок.Операция.Валюта = Валюта;
			КонецЕсли;
		КонецЕсли;
		
		Если ТипЗначенияСтр(ТаблицаПроводок.КредитСчет) = "Счет" Тогда
		    Если ТаблицаПроводок.КредитСчет.Валютный = 1 Тогда
			    ТекДок.Операция.Валюта = Валюта;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	//Отражение суммовых разниц в налоговом учете.
	Если глНовыеПравилаВеденияНУ(ТекДок.ДатаДок) = 1 Тогда
	    глОтражениеСуммовыхРазницВНаловомУчете(ТекДок,СуммоваяРазницаНУ, СуммоваяРазницаНеПринятаяКНУ);
	КонецЕсли;
	
КонецПроцедуры // глУчестьСуммовыеРазницы()

//******************************************************************************
// глПолучитьСчетДебетаНПР(СчетБУ, Субконто1) Экспорт
//
// Параметры:
//  СчетБУ - Счет - счет бухгалтерского учета.
//  Субконто1 - значение первого субконто счета СчетБУ.
//
// Возвращаемое значение:
//  СчетНПР - Счет - счет учета постоянных разниц.
//
// Вызывается из формул элементов диалога:
//  Нет.
//
// Описание:
//  На основании счета бухгалтерского учета определяется
//  субсчет счета НПР, на который относятся постоянные разницы.
//
Функция глПолучитьСчетДебетаНПР(СчетБУ, Субконто1) Экспорт
	
	КодСчета  = СчетБУ.Код;
	Счет = СчетБУ;
	    
	СчетНПР = СоздатьОбъект("Счет");
	Если СчетНПР.НайтиПоКоду("НПР." + Счет.Код) = 0 Тогда
	    Пока (Счет.Уровень() > 1) Цикл
			Счет = Счет.Родитель();
			Если СчетНПР.НайтиПоКоду("НПР." + Счет.Код) = 1 Тогда
				
				// Если найден счет-группа, то не должен быть найден счет НПР.
				Если СчетНПР.ЭтоГруппа() = 1 Тогда
				    СчетНПР = ПолучитьПустоеЗначение("Счет");
				КонецЕсли;
				
			    Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
		
	СчетНПР = СчетНПР.ТекущийСчет();
	
	Если Счет.Код = "10" Тогда
		Если (КодСчета = "10.11.1") или (КодСчета = "10.11.2") Тогда
			СчетНПР = СчетПоКоду("НПР.10.2");
			
		Иначе
			СчетНПР = СчетПоКоду("НПР.10.1");
		КонецЕсли;
	    
	ИначеЕсли КодСчета = "20" Тогда
		Если ТипЗначенияСтр(Субконто1) = "Справочник" Тогда
			Если Субконто1.Вид() = "ВидыНоменклатуры" Тогда
			    Если Субконто1.ТипНоменклатуры = Перечисление.ТипыНоменклатуры.УслугаЕНВД Тогда
			        СчетНПР = ПолучитьПустоеЗначение("Счет");
			    КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	
	ИначеЕсли КодСчета = "58.1.2" Тогда
		СчетНПР = СчетПоКоду("НПР.58.2");
		
	ИначеЕсли (КодСчета = "90.2.1") или (КодСчета = "90.7.1") или (КодСчета = "90.8.1") Тогда
		СчетНПР = СчетПоКоду("НПР.99");
		Если ТипЗначенияСтр(Субконто1) = "Справочник" Тогда
			Если Субконто1.Вид() = "ВидыНоменклатуры" Тогда
			    Если Субконто1.ТипНоменклатуры = Перечисление.ТипыНоменклатуры.УслугаЕНВД Тогда
			        СчетНПР = ПолучитьПустоеЗначение("Счет");
			    КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли Счет.Код = "91" Тогда
		СчетНПР = СчетПоКоду("НПР.99");
		Если ТипЗначенияСтр(Субконто1) = "Справочник" Тогда
			Если Субконто1.Вид() = "ПрочиеДоходыИРасходы" Тогда
			    Если Субконто1.ВидПрочихДоходовИРасходов = Перечисление.ВидыПрочихДоходовИРасходов.НеПринимаемыеДляЦелейНалогообложения Тогда
			        СчетНПР = ПолучитьПустоеЗначение("Счет");
			    КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли КодСчета = "99.1" Тогда
		СчетНПР = СчетПоКоду("НПР.99");
		Если ТипЗначенияСтр(Субконто1) = "Перечисление" Тогда
			Если (Субконто1 = Перечисление.ПрибылиИУбытки.НеПринимаемыеДляЦелейНалогообложения)
			 или (Субконто1 = Перечисление.ПрибылиИУбытки.НалоговыеСанкции) Тогда
				СчетНПР = ПолучитьПустоеЗначение("Счет");
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат СчетНПР;
	
КонецФункции // глПолучитьСчетДебетаНПР()

///////////////////////////////////////////////////////////////////////////////
// ТОРГОВОЕ ОБОРУДОВАНИЕ
//
//******************************************************************************
// глОборудованиеКоманда(Вид, Обработка, Параметры)
//
// Параметры: 
//  Вид       - вид торгового оборудования
//  Обработка - только имя файла обработки обслуживания (без пути)
//  Параметры - параметры, которую нужно передать.
//
// Возвращаемое значение:
//  1 - операция успешно завершена, 0 - нет.
//
// Описание:
//  проверяет наличие внешней обработки обслуживания. Если внешняя обработка
//  существует, то открывает ее форму.
Функция глОборудованиеКоманда(Вид, Обработка, Параметры) Экспорт
	Рез = "";
	
	Если ПустоеЗначение(Обработка) = 1 Тогда
		// внутренняя обработка
		Если Метаданные.Обработка("Обслуживание" + Вид ).Выбран() = 1 Тогда
			ОткрытьФормуМодально("Обработка.Обслуживание" + Вид, Параметры);
		Иначе
			Параметры.Установить("ОписаниеРезультата", "Отсутствует обработка обслуживания");
		КонецЕсли;
	Иначе
		Если ФС.СуществуетФайл(глКаталогОписаний + Обработка) = 0 Тогда
			Параметры.Установить("ОписаниеРезультата", "Отсутствует обработка обслуживания");
		Иначе
			ОткрытьФормуМодально("Отчет", Параметры, глКаталогОписаний + Обработка);
		КонецЕсли;
	КонецЕсли;
	
	Возврат Рез;
КонецФункции // глОборудованиеКоманда

//******************************************************************************
// глФРПечататьЧек(СписокТоваров, СуммаЧека, Получено, ПризнВозврата, НомерСекции, НомерЧека)
//
// Параметры: 
//  СписокТоваров - таблица значений с информацией о проданных или возвращенных товарах
//  СуммаЧека     - итоговая сумма чека
//  Получено      - сумма, полученная от покупателя
//  ПризнВозврата - 1 - чек на возврат, 0 - чек на продажу
//  НомерСекции   - номер секции
//  НомерЧека     - выходной параметр. Номер чека, пробитого на фискальном регистраторе
//
// Возвращаемое значение:
//  1 - операция успешно завершена, 0 - нет.
//
// Описание:
//  печатает чек на фискальном регистраторе
//  
Функция глФРПечататьЧек(СписокТоваров, СуммаЧека, Получено, Скидка, ПризнВозврата, НомерСекции, НомерЧека)  Экспорт
	
	Рез = 0;
	
	Если глФРВкл = 1 Тогда
		Параметры = СоздатьОбъект("СписокЗначений");
		Параметры.Установить("Процесс"           , "печатать_чек");
		Параметры.Установить("Объект"            , глФР);
		Параметры.Установить("ПарольПользователя", глФРПарольПользователя);
		Параметры.Установить("СписокТоваров"     , СписокТоваров);
		Параметры.Установить("СуммаЧека"         , СуммаЧека);
		Параметры.Установить("Получено"          , Получено);
		Параметры.Установить("Скидка"            , Скидка);
		Параметры.Установить("Возврат"           , ПризнВозврата);
		Параметры.Установить("НомерСекции"       , НомерСекции);
		Параметры.Установить("ПриемНаличныхОтЮрЛиц", глФРДляПриемаНаличныхОтЮрЛиц);
		
		РезТекст = глОборудованиеКоманда("ФР", глФРОбработка, Параметры);
		Если ПустоеЗначение(РезТекст) = 0 Тогда
			Сообщить(РезТекст);
		Иначе
			Если Параметры.Получить("Результат") = 0 Тогда
				Сообщить("Фискальный регистратор: ошибка при печати чека");
				Сообщить(Параметры.Получить("ОписаниеРезультата"));
			Иначе
				НомерЧека = Параметры.Получить("НомерЧека");
				Рез = 1;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Рез;
	
КонецФункции // глФРПечататьЧек()

//******************************************************************************
// глФРЗакрытьСмену(НомерЛенты, ОписаниеРезультата)
//
// Параметры: 
//  НомерЛенты			- номер ленты ККМ (номер отчета)
//  ОписаниеРезультата	- строка, в которую при возникновении ошибки помещается
//                        текстовая информация о ней.
//
// Возвращаемое значение:
//  1 - операция успешно завершена, 0 - нет.
//
// Описание:
//  Инициализирует печать Z-отчета на фискальном регистраторе.
//  
Функция глФРЗакрытьСмену(НомерЛенты, ОписаниеРезультата) Экспорт
	Рез = 0;
	
	Если глФРВкл = 1 Тогда
		Параметры = СоздатьОбъект("СписокЗначений");
		Параметры.Установить("Процесс"      , "закрыть_смену");
		Параметры.Установить("Объект"       , глФР);
		Параметры.Установить("ПарольАдминистратора", глФРПарольАдминистратора);
		
		РезТекст = глОборудованиеКоманда("ФР", глФРОбработка, Параметры);
		Если ПустоеЗначение(РезТекст) = 0 Тогда
			Сообщить(РезТекст);
		Иначе
			Если Параметры.Получить("Результат") = 0 Тогда
				ОписаниеРезультата = "Фискальный регистратор: ошибка при закрытии смены" +
				                     РазделительСтрок +
									 Параметры.Получить("ОписаниеРезультата");
			Иначе
				НомерЛенты	= Параметры.Получить("НомерЛенты"); 
				Рез			= 1;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Рез;
КонецФункции // глФРЗакрытьСмену()

//******************************************************************************
// глСтавкаНДФЛ(ВидНачисления, Работник, РасчетныйПериод)
//
// Параметры:
//  ВидНачисления - Справочник.ВидыНачислений;
//  Работник - Справочник.Работники. Важно знать: резидент он или нет;
//  РасчетныйПериод - Дата. Конец месяца, за который начислен доход.
//
// Описание:
//  Из вида начисления получаем вид дохода и находим ставку, по которой данный 
// вид дохода облагается.
//
Функция глСтавкаНДФЛ(ВидНачисления, Работник = "", РасчетныйПериод = "") Экспорт
	
	Ставка = 13;
	
	Если ПустоеЗначение(ВидНачисления) = 1 Тогда
	    Возврат Ставка;
	    
	ИначеЕсли ВидНачисления.Вид() <> "ВидыНачислений" Тогда
		Возврат Ставка;
		
	ИначеЕсли ПустоеЗначение(ВидНачисления.ВидДохода) = 1 Тогда
		Возврат Ставка;
		
	Иначе
		КодДохода = ВидНачисления.ВидДохода.Код;
	КонецЕсли;
	
	Если (ПустоеЗначение(Работник) = 1)  или (ПустоеЗначение(РасчетныйПериод) = 1)  Тогда
		СтатусРезидента = 1; // Если не указан работник или расчетный период, то считаем, что резидент
		
	Иначе
		СтатусРезидента = ?(ПустоеЗначение(Работник.Статус.Получить(РасчетныйПериод)) = 1, 2, 1); // 1 - резидент, 2 - нерезидент
	КонецЕсли;
				
	Если (КодДохода="0000") или (КодДохода="4000") или (КодДохода="4600") Тогда
		Ставка = 0;
		
	ИначеЕсли СтатусРезидента = 2 Тогда
		Ставка = 30;                   
		Если ПустоеЗначение(РасчетныйПериод) = 0 Тогда
			Если РасчетныйПериод > '31.12.2007' Тогда
				Если КодДохода = "1010" Тогда
					Ставка = 15;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли КодДохода="2000" Тогда
		Ставка = 13;

	ИначеЕсли КодДохода = "1010" Тогда
		Если ПустоеЗначение(РасчетныйПериод) = 1 Тогда
			Ставка = 9;
			
		ИначеЕсли ДатаГод(РасчетныйПериод) < 2005 Тогда
			Ставка = 6;
			
		Иначе
			Ставка = 9;
		КонецЕсли;
		
	
	ИначеЕсли Найти(",2610,1210,3020,2740,",","+КодДохода+",") > 0  Тогда
		Ставка = 35;
	
	Иначе
		Ставка = 13;
	КонецЕсли;
	
	Возврат Ставка;
				
КонецФункции // глСтавкаНДФЛ()

//******************************************************************************
// РегрессивнаяСтавка(Налог, ТекущийПредел, ИмяСтавкиПФР, ИзменитьПредел = 0)
//
// Параметры:
//  Налог          - Справочник.НалогиИОтчисления. Ссылка на элемент справочника.
//  ТекущийПредел  - Число. Сумма текущего предела (100 000 и т.д.).
//  ИмяСтавкиПФР   - Строка. Идентификатор реквизита справочника "Ставки налогов"
//                   для расчета взносов в ПФР.
//
//  ИзменитьПредел - Число. 0 - ставка для текущего предела, 1 - для следующего
//
// Возвращаемое значение:
//  Число - Регрессивная ставка (тариф).
//
// Описание:
//  Определяет тариф взноса в ПФР или ставку ЕСН 
//  для заданного предела регрессивной шкалы.
//
Функция РегрессивнаяСтавка(Налог, КонецМесяца, ТекущийПредел, ИмяСтавки, ИмяСтавкиПФР = "", ИзменитьПредел = 0)
	
	Ставка = 0;
	СуммаПредела = 0;
	
	Ставки = СоздатьОбъект("Справочник.СтавкиНалогов");
	Ставки.ИспользоватьВладельца(Налог);
	Ставки.ПорядокКодов();
	Ставки.ВыбратьЭлементы();
	Пока Ставки.ПолучитьЭлемент() = 1 Цикл
		СуммаПредела = Ставки.Предел.Получить(КонецМесяца);
		Ставка = Ставки.ПолучитьАтрибут(ИмяСтавки).Получить(КонецМесяца);
		Если (СокрЛП(Налог.Код) = "ЕСН_ФБ") и (Константа.ПорядокИсчисленияЕСН.Получить(КонецМесяца) > 0) и (ИмяСтавкиПФР <> "") Тогда
			Ставка_страх = РегрессивнаяСтавка(глПолучитьНалог("ПФР_страх"), КонецМесяца, СуммаПредела, ИмяСтавкиПФР,, 0);
			Ставка_нак = РегрессивнаяСтавка(глПолучитьНалог("ПФР_нак"), КонецМесяца, СуммаПредела, ИмяСтавкиПФР,, 0);
			Ставка = Ставка - Ставка_страх - Ставка_нак;
		КонецЕсли;
		
		Если (ИзменитьПредел = 0) и (ТекущийПредел = СуммаПредела) Тогда
			Прервать;
			
		ИначеЕсли (ИзменитьПредел = 1) и (ТекущийПредел < СуммаПредела) Тогда
		    ТекущийПредел = СуммаПредела;
			Прервать;
			
		Иначе
			Ставка = 0;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ставка;
	
КонецФункции // РегрессивнаяСтавка()

//******************************************************************************
// глОтчислениеВФонд(Сотрудник, КодНалога, Начисления, ИмяСтавкиПФР = "")
// 
// Параметры:
//  Сотрудник	  - Справочник.Сотрудники. Сотрудник, которому произведены выплаты.
//  КодНалога     - Строка. Код элемента справочника. "Налоги и отчисления".
//  Начисления	  - ТаблицаЗначений. Начисления доходов по месяцам.
//  ИмяСтавкиПФР - Строка. Идентификатор реквизита справочника "Ставки налогов"
//                 для расчета взносов в ПФР.
//
// Структура таблицы Начисления:
//  Начисления = СоздатьОбъект("ТаблицаЗначений");
//  Начисления.НоваяКолонка("Месяц"); // последний день месяца
//  Начисления.НоваяКолонка("Сумма", "Число"); // начислено за этот месяц
//  Начисления.НоваяКолонка("Инвалид", "Число", 1); // 1 - в этом месяце сотрудник является инвалидом
//
// Возвращаемое значение:
//  Число - Исчисленная сумма ЕСН с начала года в части конкретного фонда.
//
// Описание:
//  Исчисляет единый социальный налог или взносы в ПФР.
//
Функция глОтчислениеВФонд(Сотрудник, КодНалога, Начисления, ИмяСтавкиПФР = "") Экспорт
	
	Налог = СоздатьОбъект("Справочник.НалогиИОтчисления");
	Если Налог.НайтиПоКоду(КодНалога) = 0 Тогда
		Возврат 0;
	КонецЕсли;
	
	БазаНалога = 0; // превышение налоговой базой суммы текущего предела регр. шкалы
	БазаДляИсчисления = 0;
	СуммаНалога = 0;
	ИсчисленныйНалог = 0;
	
	// Получим текущий режим начисления взносов в ПФР (иностранцы).
	Если Начисления.КоличествоСтрок() > 0 Тогда
		КонецМесяца = Начисления.ПолучитьЗначение(Начисления.КоличествоСтрок(), "Месяц");
		Если (СокрЛП(Налог.Код) = "ПФР_страх") или (СокрЛП(Налог.Код) = "ПФР_нак") Тогда
			ИмяСтавки = ИмяСтавкиПФР;
			ИспользоватьРегрессивнуюШкалу = ?(ДатаГод(КонецМесяца) < 2005, Константа.ИспользоватьРегрессивнуюШкалуПФР.Получить(КонецМесяца), Да);
			
		Иначе
			ИмяСтавки = "Процент";
			ИспользоватьРегрессивнуюШкалу = ?(ДатаГод(КонецМесяца) < 2005, Константа.ИспользоватьРегрессивнуюШкалу.Получить(КонецМесяца), Да);
		КонецЕсли;
		
		Если ПустоеЗначение(ИспользоватьРегрессивнуюШкалу) = 1 Тогда
		    ИспользоватьРегрессивнуюШкалу  = Нет;
		КонецЕсли;
		
		// Получим сумму первого предела регрессивной шкалы.
		ТекущийПредел = 0;
		ТекИмяСтавкиПФР = ИмяСтавкиПФР;
		Ставка = РегрессивнаяСтавка(Налог, КонецМесяца, ТекущийПредел, ИмяСтавки, ИмяСтавкиПФР, 1);
	КонецЕсли;
	
	// Получение суммы льготы
	Льгота = 0;
	Начисления.ВыбратьСтроки();
	Пока Начисления.ПолучитьСтроку() = 1 Цикл
		Если Льгота < 100000 Тогда
		    Если Начисления.Льгота <> 0 Тогда // сумма льготы указана пользователем
			    Льгота = Льгота + Начисления.Льгота;
	
			ИначеЕсли Начисления.Инвалид = 1 Тогда
			    Льгота = Льгота + Начисления.Сумма;
				Льгота = Льгота - Макс(Льгота - 100000, 0);
			КонецЕсли;
			
		Иначе
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Начисления.ВыбратьСтроки();
	Пока Начисления.ПолучитьСтроку() = 1 Цикл
	    Если Начисления.Сумма = 0 Тогда
	        Продолжить;
		КонецЕсли;
		
		БазаНалога = БазаНалога + Начисления.Сумма;
		
		Если ИспользоватьРегрессивнуюШкалу = Да Тогда
			Пока (БазаНалога > ТекущийПредел) и (Ставка <> 0) Цикл
				СуммаНалога = СуммаНалога + Окр((ТекущийПредел - Льгота) * Ставка / 100, 2, 1);
				Льгота = ТекущийПредел;
				Ставка = РегрессивнаяСтавка(Налог, Начисления.Месяц, ТекущийПредел, ИмяСтавки, ТекИмяСтавкиПФР, 1); // меняем предел
			КонецЦикла;
		КонецЕсли;
		
		БазаДляИсчисления = Макс(БазаНалога - Льгота, 0);
		ИсчисленныйНалог = СуммаНалога + Окр(БазаДляИсчисления * Ставка / 100, 2, 1);
	КонецЦикла;
	
	Возврат ИсчисленныйНалог;
	
КонецФункции // глОтчислениеВФонд()

//******************************************************************************
//	глСтатусСтрока(Форма, Стр)
//
//	Параметры:
//		Форма - контекст формы
//		Стр   - отображаемая строка
//
//	Описание:
//		Отображает строку в форме и в строке состояния.
//		Может вызыватся из форм, в которых имеется статик с 
//		идентификатором СтатусСтрока.
//		
Процедура глСтатусСтрока(Форма="", Стр) Экспорт
	Состояние(Стр);
	Если ТипЗначения(Форма) = 100 Тогда
		Попытка
			Форма.Форма.СтатусСтрока.Заголовок("");
			Форма.Форма.СтатусСтрока.Заголовок(Стр);
			Форма.Форма.Обновить(0);
		Исключение
		КонецПопытки;
	КонецЕсли;
КонецПроцедуры	// глСтатусСтрока

//******************************************************************************
// глНомерШкалыСтраховыхВзносовПФР(ФизЛицо)
//
// Параметры:
//		ФизЛицо - эл-т
//
// Возвращаемое значение:
//		число - номер шкалы или -1, если данных физ. лица недостаточно 
//
// Описание:
//		по дате рождения и полу физлица определяет, по какой шкале ставок
//		исчислять взносы на пенсионное страхование
//
Функция глНомерШкалыСтраховыхВзносовПФР(ФизЛицо) Экспорт
	
	ДатаРождения = ФизЛицо.ДатаРождения;
	Если ПустоеЗначение(ДатаРождения) = 1 Тогда
    	Возврат -1
	ИначеЕсли ДатаРождения >= РабочаяДата() Тогда
    	Возврат -2
	Иначе
		ГодРождения = ДатаГод(ДатаРождения)
	КонецЕсли;
	
	Пол = ВРег(Строка(ФизЛицо.Пол));
	Если ПустоеЗначение(Пол) = 1 Тогда
    	Возврат -1
	КонецЕсли;
	
	Если Найти(Пол,"М") > 0 Тогда  // мужчины
		Если ГодРождения < 1953 Тогда
	        Возврат 1
		ИначеЕсли ГодРождения < 1967 Тогда
			Возврат 2
	    Иначе
	    	Возврат 3
	    КонецЕсли;
	ИначеЕсли Найти(Пол,"Ж") > 0 Тогда // женщины
	    Если ГодРождения < 1957 Тогда
	        Возврат 1
		ИначеЕсли ГодРождения < 1967 Тогда
			Возврат 2
	    Иначе
	    	Возврат 3
	    КонецЕсли;
	КонецЕсли;
	
    Возврат -1
   
КонецФункции // глНомерШкалыСтраховыхВзносовПФР()

//******************************************************************************
// глПолучитьУникальныйКодСотрудника(Код)
//
// Параметры:
//		Код - строка - код элемента спр. Сотрудники
//			или эл-т справочника Сотрудники
//
// Возвращаемое значение:
//		строка длины 10  
//
// Описание:
//  
//
Функция глПолучитьУникальныйКодСотрудника(Код) Экспорт
	
	Если ТипЗначения(Код) = 2 Тогда // передана строка
	    СтрокаКода = СокрЛП(Код);
	ИначеЕсли ТипЗначенияСтр(Код)+"."+Код.Вид() = "Справочник.Сотрудники" Тогда
		СтрокаКода = СокрЛП(Код.Код);
	Иначе
		Возврат ""
	КонецЕсли;
	
	Возврат глДополнитьСтроку(СтрокаКода,10,":")
	
КонецФункции // глПолучитьУникальныйКодСотрудника()

//******************************************************************************
//	глДобавитьСообщение(Обработчик, Текст, Форма, Объект, Контрол)
//
//	Параметры: 
//		Обработчик - контекст формы обработки, которая является обработчиком сообщений
//		Текст - 	текст сообщения
//		Форма - 	необязательный параметр - форма, которую нужно открыть 
//					для обработки сообщения
//		Объект - 	необязательный параметр - объект, который нужно 
//					активизировать (для форм списка) для обработки сообщения
//		Контрол -	необязательный параметр - контрол формы, который нужно 
//					активизировать для обработки сообщения
//		ТипСообщения - число 1 - "красное" сообщение (фатальная ошибка), по умолчанию
//							-1 - "синее" сообщение (предупреждение)
//
//	Описание:
//		Предназначена для ввода нового сообщения обработчику сообщений.
//		
Процедура глДобавитьСообщение(Обработчик, Текст, Форма="", Объект="", Контрол="",ТипСообщения=1) Экспорт
	
	глСообщениеТрассировки(Обработчик,Текст,ТипСообщения,,,,,,,,,,Форма,Объект,Контрол);
	
КонецПроцедуры	// глДобавитьСообщение

//******************************************************************************
// глОтобратьСтрокиТаблицы(Таб, СписокКолонок)
//
// Параметры:
//  Таб           - ТаблицаЗначений. Обрабатываемая таблица.
//  СписокКолонок - СписокЗначений. Идентификаторы колонок таблицы и значения, 
//                  которые следует отбирать. Значения передаются, как значения 
//                  списка, идентификаторы, как их представления.
//
// Возвращаемое значение:
//  Таблица значений.
//
// Описание:
//  Функция выделяет из таблицы значений строки, содержащие 
// определенные значения в определенных колонках и формирует 
// из них отдельную таблицу значений.
//
Функция глОтобратьСтрокиТаблицы(Таб, СписокКолонок) Экспорт
	
	// Создадим отдельную таблицу для обработки данных.
	Т = СоздатьОбъект("ТаблицаЗначений");
	Таб.Выгрузить(Т);
	Результат = СоздатьОбъект("ТаблицаЗначений");
	
	Если Т.КоличествоСтрок() = 0 Тогда
		Возврат Т;
	КонецЕсли;
	
	Если СписокКолонок.РазмерСписка() = 0 Тогда
		Возврат Т;
	КонецЕсли;
	
	// Отсортируем полученную таблицу по переданным в функцию колонкам
	ИменаКолонок = "";
	ИмяКолонки = "";
	Для а = 1 по СписокКолонок.РазмерСписка() Цикл
		СписокКолонок.ПолучитьЗначение(а, ИмяКолонки);
		ИменаКолонок = ИменаКолонок + ?(ИменаКолонок="","",",") + ИмяКолонки;
	КонецЦикла;
	Т.Сортировать(ИменаКолонок);
	
	// Определим начальную и конечную строки таблицы, в которых есть указанные
	// значения.
	НачСтрока = 0;
	КонСтрока = 0;
	
	// Пропустим первые ненужные строки таблицы.
	НачСтрокаПоиска = 0;
	ИмяПервойКолонки = "";
	Если Т.НайтиЗначение(СписокКолонок.ПолучитьЗначение(1, ИмяПервойКолонки),
						 НачСтрокаПоиска, ИмяПервойКолонки) = 0 Тогда

		Т.УдалитьСтроки();
		Возврат Т;
	КонецЕсли;
	
	Для а = НачСтрокаПоиска по Т.КоличествоСтрок() Цикл
		СтрокаУдовлетворяетУсловиям = 1;
		Для б = 1 по СписокКолонок.РазмерСписка() Цикл
			ИмяКолонки = "";
			ЗначениеЯчейки = СписокКолонок.ПолучитьЗначение(б, ИмяКолонки);
			Если (Т.ПолучитьЗначение(а, ИмяКолонки) <> ЗначениеЯчейки) Тогда
				СтрокаУдовлетворяетУсловиям = 0;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		Если СтрокаУдовлетворяетУсловиям = 1 Тогда
			Если НачСтрока = 0 Тогда // начальная строка пока не найдена
				НачСтрока = а;
			КонецЕсли;
		Иначе
			Если НачСтрока > 0 Тогда // начальная строка уже была найдена
				КонСтрока = а - 1;
				Прервать;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Если НачСтрока = 0 Тогда // ни одной строки не найдено
		Т.УдалитьСтроки();
		Возврат Т;
	КонецЕсли;
	
	Если КонСтрока = 0 Тогда // последняя строка таблицы удовлетворяла условиям
		КонСтрока = Т.КоличествоСтрок();
	КонецЕсли;
	
	Результат = СоздатьОбъект("ТаблицаЗначений");
	Т.Выгрузить(Результат, НачСтрока, КонСтрока);
	Возврат Результат;
	
КонецФункции // глОтобратьСтрокиТаблицы()

//******************************************************************************
//	глСпискиИдентичны(СЗ1,СЗ2)
//
//	Параметры:
//		СЗ1	- список значений
//		СЗ2	- список значений
//
//	Возвращаемое значение:
//		1 - два списка идентичны
//		0 - два списка различны
//
//	Описание:
//		Функция сравнивает два списка значений по каждому значению и представлению.
//
Функция глСпискиИдентичны(СЗ1,СЗ2) Экспорт
	Перем Представление1,Представление2;
	
	Если СЗ1.РазмерСписка()<>СЗ2.РазмерСписка() Тогда
		Возврат 0
	КонецЕсли;
	Для Номер = 1 по СЗ1.РазмерСписка() Цикл
		Зн1=СЗ1.ПолучитьЗначение(Номер,Представление1);
		Зн2=СЗ2.ПолучитьЗначение(Номер,Представление2);
		Если Представление1<>Представление2 Тогда
			Возврат 0
		КонецЕсли;
		ТипЗн1 = ТипЗначенияСтр(Зн1);
		ТипЗн2 = ТипЗначенияСтр(Зн2);
		Если ТипЗн1<>ТипЗн2 Тогда
		    Возврат 0
		КонецЕсли;
		Если ТипЗн1 = "СписокЗначений" Тогда
			Если глСпискиИдентичны(Зн1,Зн2) = 1 Тогда
			    Продолжить
			Иначе
				Возврат 0
			КонецЕсли;
		ИначеЕсли ТипЗн1 = "ТаблицаЗначений" Тогда
		    Сп1 = СоздатьОбъект("СписокЗначений");
		    Сп2 = СоздатьОбъект("СписокЗначений");
			Зн1.Выгрузить(Сп1);
			Зн1 = "";
			Зн2.Выгрузить(Сп2);
			Зн2 = "";
			Если глСпискиИдентичны(Сп1,Сп2) = 1 Тогда
			    Продолжить
			Иначе
				Возврат 0
			КонецЕсли;
		КонецЕсли;
		Если Зн1<>Зн2 Тогда
			Возврат 0
		КонецЕсли;
	КонецЦикла;
	Возврат 1
	
КонецФункции	// глСпискиИдентичны

//******************************************************************************
// ОтразитьДоходВТаблицах()
//
// Параметры:
//		ДоходыВычетыНалогиСотрудников - таблица значений, содержит данные о доходах 
//										сотрудника (или нескольких сотрудников)
//		НомерСтрокиСотрудника - число, номер строки в таблице ДоходыВычетыНалогиСотрудников,
//								предшествующей данным сотрудника
//      Куда - число, номер колонки в таблице ДоходыВычетыНалогиСотрудников
//		МесяцДохода - число (от 1 до 12), месяц, в котором учтен доход
//		ВР - строка, описание в.р., которым зарегистрирован доход
//      Сколько - число, сумма дохода
//
// Описание:
//		переданный доход (Сколько) отражается в определенной колонке (Куда) переданных
//		таблиц значений
//
Процедура ОтразитьДоходВТаблицах(ДоходыВычетыНалогиСотрудников,НомерСтрокиСотрудника,МесяцРасшифровки,СобиратьРасшифровку,МесяцДохода,ВР,Куда,Сколько)
	
	Если МесяцРасшифровки <> 0 Тогда // для расшифровки 1 месяца по видам расчетов (при вызове из Расчета по ЕСН)
		ДоходыВычетыНалогиСотрудников.УстановитьЗначение(ДоходыВычетыНалогиСотрудников.КоличествоСтрок(),Куда,ДоходыВычетыНалогиСотрудников.ПолучитьЗначение(ДоходыВычетыНалогиСотрудников.КоличествоСтрок(),Куда)+Сколько);
	Иначе
		Если СобиратьРасшифровку = 1 Тогда //для расшифровки всех месяцев по ВР при вызове из формы Индивидуальной карточки
			ТаблицаДоходыЕСНпоВР = ДоходыВычетыНалогиСотрудников.ПолучитьЗначение(НомерСтрокиСотрудника+МесяцДохода, "ТаблицаРасшифровокПоВР");
			ТаблицаДоходыЕСНпоВР.НоваяСтрока();
			ТаблицаДоходыЕСНпоВР.УстановитьЗначение(ТаблицаДоходыЕСНпоВР.КоличествоСтрок(),1,ВР);	
			ТаблицаДоходыЕСНпоВР.УстановитьЗначение(ТаблицаДоходыЕСНпоВР.КоличествоСтрок(),Куда,Сколько);	
		КонецЕсли;
		Для Сч = МесяцДохода По 12 Цикл
			ДоходыВычетыНалогиСотрудников.УстановитьЗначение(НомерСтрокиСотрудника+Сч,Куда,ДоходыВычетыНалогиСотрудников.ПолучитьЗначение(НомерСтрокиСотрудника+Сч,Куда)+Сколько);
		КонецЦикла; 
	КонецЕсли;
КонецПроцедуры // ОтразитьДоходВТаблицах()

//******************************************************************************
// ОтразитьДанныеВТаблицах()
//
// Параметры:
//		ДоходыВычетыНалогиСотрудников - таблица значений, содержит данные о доходах 
//										сотрудника (или нескольких сотрудников)
//		НомерСтрокиСотрудника - число, номер строки в таблице ДоходыВычетыНалогиСотрудников,
//								предшествующей данным сотрудника
//      Куда - число, номер колонки в таблице ДоходыВычетыНалогиСотрудников
//		МесяцДохода - число (от 1 до 12), месяц, в котором учтен доход
//		ВР - строка, описание в.р., которым зарегистрирован доход
//      Сколько - число, сумма дохода
//
// Описание:
//		переданный доход (Сколько) отражается в определенной колонке (Куда) переданных
//		таблиц значений
//
Процедура ОтразитьДанныеВТаблицах(ДоходыВычетыНалогиСотрудников,НомерСтрокиСотрудника,МесяцРасшифровки,СобиратьРасшифровку,МесяцДохода,ВР,Куда,Сколько)	
	
Если МесяцРасшифровки <> 0 Тогда // для расшифровки 1 месяца по видам расчетов
		ДоходыВычетыНалогиСотрудников.УстановитьЗначение(ДоходыВычетыНалогиСотрудников.КоличествоСтрок(),Куда,ДоходыВычетыНалогиСотрудников.ПолучитьЗначение(ДоходыВычетыНалогиСотрудников.КоличествоСтрок(),Куда)+Сколько);
	Иначе
		Если СобиратьРасшифровку = 1 Тогда //для расшифровки всех месяцев по ВР при вызове из формы Индивидуальной карточки
			ТаблицаДоходыПоВР = ДоходыВычетыНалогиСотрудников.ПолучитьЗначение(НомерСтрокиСотрудника+МесяцДохода, "ТаблицаРасшифровки");
			ТаблицаДоходыПоВР.НоваяСтрока();
			ТаблицаДоходыПоВР.УстановитьЗначение(ТаблицаДоходыПоВР.КоличествоСтрок(),1,ВР);	
			ТаблицаДоходыПоВР.УстановитьЗначение(ТаблицаДоходыПоВР.КоличествоСтрок(),Куда,Сколько);	
		КонецЕсли;
		Для Сч = МесяцДохода По 12 Цикл
			ДоходыВычетыНалогиСотрудников.УстановитьЗначение(НомерСтрокиСотрудника+Сч,Куда,ДоходыВычетыНалогиСотрудников.ПолучитьЗначение(НомерСтрокиСотрудника+Сч,Куда)+Сколько);
		КонецЦикла; 
	КонецЕсли;
КонецПроцедуры // ОтразитьДанныеВТаблицах()

//******************************************************************************
// глПолучитьТаблицуСтавокСтраховыхВзносовПоТарифам()
//
// Параметры:
//	  ДатаАктуальности - по дате определяем год, для которого собирается таблица	
//
// Возвращаемое значение:
//	Таблица значений: Вид тарифа, тарифные ставки, взносы в ПФР разложены на две шкалы	
//
//	Описание:
//		
//
Функция глПолучитьТаблицуСтавокСтраховыхВзносовПоТарифам(ДатаАктуальности) Экспорт 
	
	ДатаСтавок = КонГода(ДатаАктуальности);
	
	ТаблицаСтавок = СоздатьОбъект("ТаблицаЗначений");
	ТаблицаСтавок.НоваяКолонка("ВидТарифа", "Перечисление.ТарифыСтраховыхВзносов");
	ТаблицаСтавок.НоваяКолонка("ПФРСтрах1", "Число", 5, 2);
	ТаблицаСтавок.НоваяКолонка("ПФРСтрах2", "Число", 5, 2);
	ТаблицаСтавок.НоваяКолонка("ПФРНак1", "Число", 5, 2);
	ТаблицаСтавок.НоваяКолонка("ПФРНак2", "Число", 5, 2);
	ТаблицаСтавок.НоваяКолонка("ФСС", "Число", 5, 2);
	ТаблицаСтавок.НоваяКолонка("ТФОМС", "Число", 5, 2);
	ТаблицаСтавок.НоваяКолонка("ФФОМС", "Число", 5, 2); 
	
	Для Номер=1 По Перечисление.ТарифыСтраховыхВзносов.КоличествоЗначений() Цикл
		
		ТаблицаСтавок.НоваяСтрока();
		
		ВидТарифа = Перечисление.ТарифыСтраховыхВзносов.ЗначениеПоНомеру(Номер);
		ТаблицаСтавок.ВидТарифа = ВидТарифа;
		
		Если глСпрТарифСтраховыхВзносов.НайтиПоРеквизиту("ВидТарифа",ВидТарифа,1) =0 Тогда
			ТаблицаСтавок.ПФРСтрах1 = 0;
			ТаблицаСтавок.ПФРСтрах2 = 0;
			ТаблицаСтавок.ПФРНак1 = 0;
			ТаблицаСтавок.ПФРНак2 = 0;
			ТаблицаСтавок.ФСС = 0;
			ТаблицаСтавок.ТФОМС = 0;
			ТаблицаСтавок.ФФОМС = 0; 
		Иначе 
			ПФР = глСпрТарифСтраховыхВзносов.ПФР.Получить(ДатаСтавок);
			ПФРНакопительный = глСпрТарифСтраховыхВзносов.ПФРНакопительный.Получить(ДатаСтавок);
			
			ТаблицаСтавок.ПФРСтрах1 = ПФР; // старше 1967
			ТаблицаСтавок.ПФРСтрах2 = ПФР - ПФРНакопительный;
			ТаблицаСтавок.ПФРНак1   = 0; // старше 1967
			ТаблицаСтавок.ПФРНак2   = ПФРНакопительный;
			ТаблицаСтавок.ФСС   = глСпрТарифСтраховыхВзносов.ФСС.Получить(ДатаСтавок);
			ТаблицаСтавок.ТФОМС = глСпрТарифСтраховыхВзносов.ТФОМС.Получить(ДатаСтавок);
			ТаблицаСтавок.ФФОМС = глСпрТарифСтраховыхВзносов.ФФОМС.Получить(ДатаСтавок);
		КонецЕсли;
		
	КонецЦикла;	
	
	Возврат ТаблицаСтавок;
    
КонецФункции //глПолучитьТаблицуСтавокСтраховыхВзносовПоТарифам  

//******************************************************************************
// глПолучитьСтавкуВзноса(ВидТарифа,ИмяШкалыВзносов,ДатаОкончания)()
//
// Параметры:
//		ВидТарифа - вид тарифа
//		ИмяКолонки - имя колонки, это имя взноса
//		ДатаОкончания - для получения таблицы ТаблицаСтавок
//
// Возвращаемое значение:
//		
//
//	Описание:
//		
//
Функция глПолучитьСтавкуВзноса(ВидТарифа,ИмяКолонки,ДатаОкончания) Экспорт
	
	// в таблице глТаблицаСтавокСтраховыхВзносов уже могут находиться предварительно собранные 
	// данные, если это групповой расчет
	Если ТипЗначения(глТаблицаСтавокСтраховыхВзносов)=100 Тогда
		Если глТаблицаСтавокСтраховыхВзносов.КоличествоСтрок() > 0 Тогда
			ТаблицаСтавок = глТаблицаСтавокСтраховыхВзносов;
		Иначе
			ТаблицаСтавок = глПолучитьТаблицуСтавокСтраховыхВзносовПоТарифам(ДатаОкончания);
		КонецЕсли;
	Иначе
		ТаблицаСтавок = глПолучитьТаблицуСтавокСтраховыхВзносовПоТарифам(ДатаОкончания);
	КонецЕсли;
	
	НомерСтроки = "";
	Если ТаблицаСтавок.НайтиЗначение(ВидТарифа, НомерСтроки, "ВидТарифа") = 1 Тогда
		Возврат ТаблицаСтавок.ПолучитьЗначение(НомерСтроки, ИмяКолонки);
	КонецЕсли;
	
	Возврат 0;
    
КонецФункции //глПолучитьСтавкуВзноса()

//******************************************************************************
// глПолучитьТаблицуОсновныхТарифов()
//
// Параметры:
//	  ДатаАктуальности - по дате определяем год, для которого собирается таблица
//
// Возвращаемое значение:
//	 Таблица значений: Номер месяца, вид тарифа	
//
//	Описание:
//		Получает таблицу основных тарифоф, которые применялись в организации в течение года
//
Функция глПолучитьТаблицуОсновныхТарифов(ДатаАктуальности) Экспорт 
	
	Год = ДатаГод(ДатаАктуальности);
	
	ТаблицаОсновныхТарифов = СоздатьОбъект("ТаблицаЗначений");
	ТаблицаОсновныхТарифов.НоваяКолонка("Месяц","Число");
	ТаблицаОсновныхТарифов.НоваяКолонка("ВидТарифа", "Перечисление.ТарифыСтраховыхВзносов");
	Для Месяц=1 По 12 Цикл
		ТаблицаОсновныхТарифов.НоваяСтрока();
		ТаблицаОсновныхТарифов.Месяц = Месяц;
		ТаблицаОсновныхТарифов.ВидТарифа = Константа.ТарифСтраховыхВзносов.Получить(КонМесяца(Дата(Год,Месяц,01)));
	КонецЦикла;	
	
	Возврат ТаблицаОсновныхТарифов;
    
КонецФункции //глПолучитьТаблицуОсновныхТарифов 

//******************************************************************************
// глПолучитНомерШкалыСтраховыхВзносовПФР()
//
// Параметры:
//	
//
// Возвращаемое значение:
//	номер шкалы: -1	- дата рождения больше рабочей, 0 - пустатя дата рождения, 1 до 1967, 2 - с 1967
//
//	Описание:
//		
//
Функция глПолучитНомерШкалыСтраховыхВзносовПФР(Физлицо) Экспорт
	
	ДатаРождения = ФизЛицо.ДатаРождения; 
	Если ПустоеЗначение(ДатаРождения) = 1 Тогда
		Возврат 0;
	ИначеЕсли ДатаРождения >= РабочаяДата() Тогда
		Возврат -1;
	Иначе
		ГодРождения = ДатаГод(ДатаРождения);
		Если ГодРождения < 1967 Тогда
		    Возврат 1;
		Иначе
			Возврат 2;
		КонецЕсли;
	КонецЕсли;
    
КонецФункции //глПолучитНомерШкалыСтраховыхВзносовПФР 


//******************************************************************************
// ОбходСотрудниковДляСтраховыхВзносов(ВсегоСотров, Сотрудники, ЗапросПоВзносам, ЗапросПоВзносамКСправочникам, СобиратьРучныеКорректировки,
//								МесяцРасшифровки, Форма, ДоходыВычетыНалогиСотрудников, СобиратьРасшифровку, Год, ПервыйМесяц,
//								ПоследнийМесяц,	ТаблицаРаспределения, ИскатьЕНВД);
//
// Параметры:
//		ВсегоСотров - кол-во сотрудников
//		Сотрудники - эл-т спр.Сотрудники (соответствует "основному" элементу 
//                        сотрудника) или список таких элементов, 
//                        определяет список сотрудников, для которых выполняется
//                        обработка данных; если список пуст - то по всем сотрудникам,
//		ЗапросПоВзносам - запрос по счетам учета взносов - CDP ,
//		ЗапросПоВзносамКСправочникам - запрос по справочникам собирает ,
//		СобиратьРучныеКорректировки - число 1 (по умолчанию) или 0, не обязателен; если равен 0 - данные из справочников не собираются,
//			признак того, что надо собирать данные по справочникам,
//		МесяцРасшифровки - месяц для расшифровки по видам расчетов
//		Форма - контекст формы из которой вызывается процедура глСобратьДанныеДляСтраховыхВзносов,
//		ДоходыВычетыНалогиСотрудников - итоговая таблица,
//		СобиратьРасшифровку - признак, того что надо собирать данные для расшифровки,
//		Год - год, за который собираются данные,
//		ПервыйМесяц - первый месяц года,
//		ПоследнийМесяц - месяц по который собираются данные,
//		ИскатьВоенных - признак того, что в организации есть военные,
//		ИскатьЕНВД - признак того, что в организации есть виды деятельности облагаемые ЕНВД,
//
// Описание:
// 		заполняет таблицу ДоходыВычетыНалогиСотрудников 
//
Процедура ОбходСотрудниковДляСтраховыхВзносов(ВсегоСотров, Сотрудники, ЗапросПоВзносам, ЗапросПоВзносамКСправочникам, СобиратьРучныеКорректировки,
	МесяцРасшифровки, Форма, ДоходыВычетыНалогиСотрудников, СобиратьРасшифровку,Год, ПервыйМесяц,
	ПоследнийМесяц,	ИскатьЕНВД, КонецПериодаОсмотра)
	
	
	Перем БазаПФР[3];
	Перем БазаПФРТекущийМесяц[3];
	Перем НалоговаяБазаПФРПоПредыдущийМесяц[3];
	Перем ОграниченнаяБазаПФР[3];
	
	Перем БазаФОМС[3];
	Перем БазаФОМСТекущийМесяц[3];
	Перем НалоговаяБазаФОМСПоПредыдущийМесяц[3];
	Перем ОграниченнаяБазаФОМС[3];
	
	Перем БазаФСС[3]; 
	Перем БазаФССТекущийМесяц[3];
	Перем НалоговаяБазаФССПоПредыдущийМесяц[3];
	Перем ОграниченнаяБазаФСС[3];
	
	ДатаАктуальности = Дата(Год,ПоследнийМесяц,01);
	
	НачалоГода = НачГода(ДатаАктуальности);
	
	ВидНалога_ФСС = глПолучитьНалог("ФСС");
	ВидНалога_ФФОМС = глПолучитьНалог("ФФОМС");
	ВидНалога_ТФОМС = глПолучитьНалог("ТФОМС");
	ВидНалога_ПФР_страх = глПолучитьНалог("ПФР_страх");
	ВидНалога_ПФР_нак = глПолучитьНалог("ПФР_нак");
	
	ТаблицаОсновныхТарифов = глПолучитьТаблицуОсновныхТарифов(ДатаАктуальности);
	
	ПределДоходов = Константа.ПредельнаяВеличинаБазыСтраховыхВзносов.Получить(КонГода(ДатаАктуальности));
	
	// получим размеры скидок к доходам
	РазмерСкидкаМатпомощь = 4000;
	РазмерСкидкаМатпомощьПриРожденииРебенка = 50000;	
	
	ТаблицаБазаОТ = СоздатьОбъект("ТаблицаЗначений"); 
	ТаблицаБазаОТ.НоваяКолонка("БазаПФР","Число",15,2);
	ТаблицаБазаОТ.НоваяКолонка("БазаФСС","Число",15,2);
	ТаблицаБазаОТ.НоваяКолонка("БазаФОМС","Число",15,2);
	ТаблицаБазаОТ.НоваяКолонка("ВидТарифа");
	
	// перебираем сотрудников
	Для СчСотров = 1 По ВсегоСотров Цикл
		
		Сотрудник=Сотрудники.ПолучитьЗначение(СчСотров);
		
		КодСотра=Сотрудник.Код;
		ИмяСотра=Сотрудник.Наименование; 
		
		НалогиПоРегистрации=0;
		
		ДанныеВСправочнике=0;
		Если СобиратьРучныеКорректировки = 1 Тогда
			ЗапросПоВзносамКСправочникам.вНачалоВыборки();
			Если МесяцРасшифровки = 0 Тогда // обычный расчет
				Если ЗапросПоВзносамКСправочникам.Получить(Сотрудник,,)=1 Тогда
					ДанныеВСправочнике=1;	
				КонецЕсли;
			Иначе
				Если ЗапросПоВзносамКСправочникам.Получить(Сотрудник,)=1 Тогда
					ДанныеВСправочнике=1;	
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		НовыйПроцент = Окр(СчСотров/ВсегоСотров*100);
		
		Если СчСотров < ВсегоСотров Тогда
			глСтатусСтрока(Форма,"Обрабатываются доходы"+?(ВсегоСотров=1,""," ("+НовыйПроцент+"%)")+": "+ИмяСотра);
		КонецЕсли;
		
		КодСотраВтаблице=глПолучитьУникальныйКодСотрудника(КодСотра);
		
		Если МесяцРасшифровки = 0 Тогда // обычный расчет
			// запомним номер строки, предшествующей данным сотрудника - чтобы потом не искать нужную строку
			НомерСтрокиСотрудника = ДоходыВычетыНалогиСотрудников.КоличествоСтрок();
			// заготовим "пустые" строки в таблице для данных сотрудника
			Для Сч = 1 По 12 Цикл
				ДоходыВычетыНалогиСотрудников.НоваяСтрока();
				НомерСтроки = ДоходыВычетыНалогиСотрудников.КоличествоСтрок();
				ИдентификаторСотрудника = КодСотраВтаблице+глДополнитьСтроку(Сч,2);
				ДоходыВычетыНалогиСотрудников.УстановитьЗначение(НомерСтроки,1,ИдентификаторСотрудника);
				ДоходыВычетыНалогиСотрудников.УстановитьЗначение(НомерСтроки,"ОграниченнаяБаза",ТаблицаБазаОТ);
				
				Если СобиратьРасшифровку = 1 Тогда
					ДоходыПоВР = СоздатьОбъект("ТаблицаЗначений");
					// 1-ая колонка - ВР
					ДоходыПоВР.НоваяКолонка(,"Строка",100); 
					// со 2-ой по 40-ую дублируются колонки родительской таблицы(в разбивке по ВР)
					Для Сч1 = 2 По 40 Цикл 
						ДоходыПоВР.НоваяКолонка(,"Число",15,2);
					КонецЦикла;
					
					ДоходыПоВР.НоваяКолонка("ИсчисленоФСС","Число",15,2);
					ДоходыПоВР.НоваяКолонка("ИсчисленоФССИнвалид","Число",15,2);
					ДоходыПоВР.НоваяКолонка("ИсчисленоФССЕНВД","Число",15,2);
					
					ДоходыПоВР.НоваяКолонка("ИсчисленоФФОМС","Число",15,2);
					ДоходыПоВР.НоваяКолонка("ИсчисленоФФОМСИнвалид","Число",15,2);
					ДоходыПоВР.НоваяКолонка("ИсчисленоФФОМСЕНВД","Число",15,2);
					
					ДоходыПоВР.НоваяКолонка("ИсчисленоТФОМС","Число",15,2);
					ДоходыПоВР.НоваяКолонка("ИсчисленоТФОМСИнвалид","Число",15,2);
					ДоходыПоВР.НоваяКолонка("ИсчисленоТФОМСЕНВД","Число",15,2);
					
					ДоходыПоВР.НоваяКолонка("ИсчисленоПФРНак","Число",15,2);
					ДоходыПоВР.НоваяКолонка("ИсчисленоПФРНакИнвалид","Число",15,2);
					ДоходыПоВР.НоваяКолонка("ИсчисленоПФРНакЕНВД","Число",15,2);
					
					ДоходыПоВР.НоваяКолонка("ИсчисленоПФРСтрах","Число",15,2);
					ДоходыПоВР.НоваяКолонка("ИсчисленоПФРСтрахИнвалид","Число",15,2);  
					ДоходыПоВР.НоваяКолонка("ИсчисленоПФРСтрахЕНВД","Число",15,2);
					
					ДоходыПоВР.НоваяКолонка("ИсчисленоДопТариф","Число",15,2);
					
					//сразу введем таблицу значений графу(пока без строк, но со всеми колонками):
					ДоходыВычетыНалогиСотрудников.УстановитьЗначение(ДоходыВычетыНалогиСотрудников.КоличествоСтрок(),"ТаблицаРасшифровки",ДоходыПоВР);
				КонецЕсли;
				
			КонецЦикла;
		КонецЕсли;
		
		Если ПустоеЗначение(""+КодСотра+ИмяСотра)=1 Тогда
			Продолжить
		КонецЕсли;
		
		ВзиматьВзносыПФРиФСС = "111111111111"; 
		ВзиматьВзносыФОМС    = "111111111111";
		Инвалид = "000000000000";; 
		
		Для Сч = ПервыйМесяц По ПоследнийМесяц Цикл
			
			ДатаМесяца=КонМесяца(Дата(Год,Сч,15));
			
			Если (Сотрудник.НеВзиматьВзносыПФРиФСС.Получить(НачМесяца(ДатаМесяца)) = 1) Тогда			
				ВзиматьВзносыПФРиФСС = ?(Сч=1,"",Лев(ВзиматьВзносыПФРиФСС,Сч-1))+"0"+?(Сч=12,"",Прав(ВзиматьВзносыПФРиФСС,12-Сч));
			КонецЕсли;
			
			Если (Сотрудник.НеВзиматьВзносыФОМС.Получить(НачМесяца(ДатаМесяца)) = 1) Тогда			
				ВзиматьВзносыФОМС = ?(Сч=1,"",Лев(ВзиматьВзносыФОМС,Сч-1))+"0"+?(Сч=12,"",Прав(ВзиматьВзносыФОМС,12-Сч));
			КонецЕсли;
			
			Если (Сотрудник.Инвалид.Получить(ДатаМесяца) = 1) Тогда
				Инвалид = ?(Сч=1,"",Лев(Инвалид,Сч-1))+"1"+?(Сч=12,"",Прав(Инвалид,12-Сч));
			КонецЕсли; 
			
		КонецЦикла;
		
		
		БухИтДФЛ = СоздатьОбъект("БухгалтерскиеИтоги");
		БухИтДФЛ.Опции(1, 1);
		БухИтДФЛ.ИспользоватьСубконто(ВидыСубконто.Сотрудники);
		БухИтДФЛ.ИспользоватьСубконто(ВидыСубконто.ВидыНачисленийВыплат);
		БухИтДФЛ.ВыполнитьЗапрос(НачалоГода,КонецПериодаОсмотра, "ДФЛ.1,ДФЛ.2",,, 2, "Месяц");
		
		БухИт70 = СоздатьОбъект("БухгалтерскиеИтоги"); // для отбора корреспонденций 70-ого счета
		БухИт70.ВключатьСубсчета(, -1);
		БухИт70.ИспользоватьСубконто(ВидыСубконто.Сотрудники);
		БухИт70.ИспользоватьСубконто(ВидыСубконто.ВидыНачисленийВыплат);
		БухИт70.ИспользоватьКорСубконто();
		БухИт70.ВыполнитьЗапрос(НачалоГода,КонецПериодаОсмотра, "70",,, 2, "Месяц");
		
		Сч69_1 = СчетПоКоду("69.1");
		СчДФЛ_2 = СчетПоКоду("ДФЛ.2"); 
		
		БылМесяцДохода = 0;
		
		Если БухИтДФЛ.ПолучитьСубконто(ВидыСубконто.Сотрудники,, Сотрудник) = 1 Тогда
			БухИтДФЛ.ВыбратьПериоды();
			Пока БухИтДФЛ.ПолучитьПериод() = 1 Цикл
				Период = ДатаМесяц(БухИтДФЛ.КонДата);
				
				Инвалид = ?(Сотрудник.Инвалид.Получить(ДатаМесяца) = 1, 1, 0);
				
				БухИтДФЛ.ВыбратьСубконто(ВидыСубконто.ВидыНачисленийВыплат);
				
				Пока БухИтДФЛ.ПолучитьСубконто(ВидыСубконто.ВидыНачисленийВыплат) = 1 Цикл
					
					ВР = БухИтДФЛ.Субконто(2);
					ОписаниеВР = СокрЛП(ВР.Наименование);
					СуммаРез = БухИтДФЛ.КО();
					Скидка = 0;
					ДатаДохода = БухИтДФЛ.КонДата;
					МесяцДохода = ДатаМесяц(ДатаДохода);
					Если БылМесяцДохода <> МесяцДохода Тогда
						БылМесяцДохода = МесяцДохода
					КонецЕсли;
					
					ЭтоИнвалид 		  = Число(Сред(Инвалид,МесяцДохода,1));
					
					СуммаПриходящаясяНаЕНВД = 0;
					СуммаНеОбъекта = 0;
					РасходыНаСтрахование = 0;
					
					ОписаниеВР = СокрЛП(ВР.Наименование);
					
					Если СуммаРез <> 0 Тогда
						
						Если БухИт70.ПолучитьСубконто(1,, Сотрудник) = 1 Тогда
							Если БухИт70.ПолучитьСубконто(2,, ВР) = 1 Тогда
								Если БухИт70.ПолучитьПериод(, БухИтДФЛ.НачДата) = 1 Тогда
									БухИт70.ВыбратьКорСчета();
									Пока БухИт70.ПолучитьКорСчет() = 1 Цикл
										Если БухИт70.КорСчет = Сч69_1 Тогда
											РасходыНаСтрахование = РасходыНаСтрахование + БухИт70.КорКО();
										КонецЕсли;
									КонецЦикла;
								КонецЕсли;
							КонецЕсли;
						КонецЕсли;
						
						БухИтДФЛ.ВыбратьСчета();
						Пока БухИтДФЛ.ПолучитьСчет() = 1 Цикл
							Если БухИтДФЛ.Счет = СчДФЛ_2 Тогда
								СуммаПриходящаясяНаЕНВД = СуммаПриходящаясяНаЕНВД + БухИтДФЛ.КО();
							КонецЕсли;
						КонецЦикла;
						
						Если РасходыНаСтрахование <> 0 Тогда
							РасходыНаСтрахованиеНаЕНВД = ?(СуммаРез = 0, 0, СуммаПриходящаясяНаЕНВД / СуммаРез) * РасходыНаСтрахование;
							
						Иначе
							РасходыНаСтрахованиеНаЕНВД = 0;
						КонецЕсли; 
						
						Если МесяцРасшифровки <> 0 Тогда // для расшифровки месяца по видам расчетов
							ДоходыВычетыНалогиСотрудников.НоваяСтрока(); 
							ДоходыВычетыНалогиСотрудников.УстановитьЗначение(ДоходыВычетыНалогиСотрудников.КоличествоСтрок(),1,ОписаниеВР);
						КонецЕсли;
						
						
						СуммаОсновнойТариф = 0; // сумма по основному тарифу, не инвалид
						СуммаИнвалид = 0;       // сумма инвалида
						СуммаЕНВД = 0;          // сумма по виду деятельности ЕНВД, не инвалид
						НомерКолонки = 0;       // номер колонки дохода для основного тарифа
						
						СкидкаОсновнойТариф = 0; // сумма скидки по основному тарифу, не инвалид
						СкидкаИнвалид = 0;       // сумма скидки инвалида
						СкидкаЕНВД = 0;          // сумма скидки по виду деятельности ЕНВД, не инвалид
						
						
						//Соберем доходы в целом
						Если Инвалид = 0 Тогда
							ОтразитьДанныеВТаблицах(ДоходыВычетыНалогиСотрудников,НомерСтрокиСотрудника,МесяцРасшифровки,СобиратьРасшифровку,МесяцДохода,ОписаниеВР,2,СуммаРез - СуммаПриходящаясяНаЕНВД);
							ОтразитьДанныеВТаблицах(ДоходыВычетыНалогиСотрудников,НомерСтрокиСотрудника,МесяцРасшифровки,СобиратьРасшифровку,МесяцДохода,ОписаниеВР,28,СуммаПриходящаясяНаЕНВД);
						Иначе
							ОтразитьДанныеВТаблицах(ДоходыВычетыНалогиСотрудников,НомерСтрокиСотрудника,МесяцРасшифровки,СобиратьРасшифровку,МесяцДохода,ОписаниеВР,15,СуммаРез);
						КонецЕсли;
						
						Если ((ВР.ПФР = 0) и (ВР.ЕСН_ФСС = 0) И (ВР.ЕСН_ФОМС = 0)) и (ВР.ВидДохода.Код <> "2300") Тогда //кроме больничных
							Если Инвалид = 0 Тогда
								ОтразитьДанныеВТаблицах(ДоходыВычетыНалогиСотрудников,НомерСтрокиСотрудника,МесяцРасшифровки,СобиратьРасшифровку,МесяцДохода,ОписаниеВР,4,СуммаРез - СуммаПриходящаясяНаЕНВД - РасходыНаСтрахование - РасходыНаСтрахованиеНаЕНВД);
								ОтразитьДанныеВТаблицах(ДоходыВычетыНалогиСотрудников,НомерСтрокиСотрудника,МесяцРасшифровки,СобиратьРасшифровку,МесяцДохода,ОписаниеВР,30,СуммаПриходящаясяНаЕНВД - РасходыНаСтрахованиеНаЕНВД);
							Иначе
								ОтразитьДанныеВТаблицах(ДоходыВычетыНалогиСотрудников,НомерСтрокиСотрудника,МесяцРасшифровки,СобиратьРасшифровку,МесяцДохода,ОписаниеВР,17,СуммаРез - РасходыНаСтрахование);
							КонецЕсли;
						КонецЕсли;
						
						Если РасходыНаСтрахование <> 0 Тогда
							Если Инвалид = 0 Тогда
								ОтразитьДанныеВТаблицах(ДоходыВычетыНалогиСотрудников,НомерСтрокиСотрудника,МесяцРасшифровки,СобиратьРасшифровку,МесяцДохода,ОписаниеВР,5,РасходыНаСтрахование - РасходыНаСтрахованиеНаЕНВД);
								ОтразитьДанныеВТаблицах(ДоходыВычетыНалогиСотрудников,НомерСтрокиСотрудника,МесяцРасшифровки,СобиратьРасшифровку,МесяцДохода,ОписаниеВР,18,РасходыНаСтрахованиеНаЕНВД);
							Иначе
								ОтразитьДанныеВТаблицах(ДоходыВычетыНалогиСотрудников,НомерСтрокиСотрудника,МесяцРасшифровки,СобиратьРасшифровку,МесяцДохода,ОписаниеВР,31,РасходыНаСтрахование);
							КонецЕсли;
						КонецЕсли;
						
						//Отдельные доходы проверим по коду
						
						//Материальная помощь пр рождении						
						Если ВР.ВидДохода.Код = "2762" Тогда
							Скидка = РазмерСкидкаМатпомощьПриРожденииРебенка;
							Скидка = Макс(Мин(Скидка,СуммаРез),0);							
							Если Инвалид = 0 Тогда
								ОтразитьДанныеВТаблицах(ДоходыВычетыНалогиСотрудников,НомерСтрокиСотрудника,МесяцРасшифровки,СобиратьРасшифровку,МесяцДохода,ОписаниеВР,8,СуммаРез - СуммаПриходящаясяНаЕНВД);
								ОтразитьДанныеВТаблицах(ДоходыВычетыНалогиСотрудников,НомерСтрокиСотрудника,МесяцРасшифровки,СобиратьРасшифровку,МесяцДохода,ОписаниеВР,34,СуммаПриходящаясяНаЕНВД);
								//скидка
								СкидкаОсновнойТариф = Макс(Мин(Скидка,СуммаРез - СуммаПриходящаясяНаЕНВД),0);							
								ОтразитьДанныеВТаблицах(ДоходыВычетыНалогиСотрудников,НомерСтрокиСотрудника,МесяцРасшифровки,СобиратьРасшифровку,МесяцДохода,ОписаниеВР,9,СкидкаОсновнойТариф);
								СкидкаЕНВД = Макс(Скидка - СкидкаОсновнойТариф,0);							
								ОтразитьДанныеВТаблицах(ДоходыВычетыНалогиСотрудников,НомерСтрокиСотрудника,МесяцРасшифровки,СобиратьРасшифровку,МесяцДохода,ОписаниеВР,35,СкидкаЕНВД);								
								
							Иначе
								ОтразитьДанныеВТаблицах(ДоходыВычетыНалогиСотрудников,НомерСтрокиСотрудника,МесяцРасшифровки,СобиратьРасшифровку,МесяцДохода,ОписаниеВР,21,СуммаРез);
								//скидка
								ОтразитьДанныеВТаблицах(ДоходыВычетыНалогиСотрудников,НомерСтрокиСотрудника,МесяцРасшифровки,СобиратьРасшифровку,МесяцДохода,ОписаниеВР,22,Скидка);								
							КонецЕсли;
						КонецЕсли;
						
						//Материальная помощь
						Если ВР.ВидДохода.Код = "2760" Тогда
							Скидка = РазмерСкидкаМатпомощь;
							Скидка = Макс(Мин(Скидка,СуммаРез),0);							
							Если Инвалид = 0 Тогда
								ОтразитьДанныеВТаблицах(ДоходыВычетыНалогиСотрудников,НомерСтрокиСотрудника,МесяцРасшифровки,СобиратьРасшифровку,МесяцДохода,ОписаниеВР,10,СуммаРез - СуммаПриходящаясяНаЕНВД);
								ОтразитьДанныеВТаблицах(ДоходыВычетыНалогиСотрудников,НомерСтрокиСотрудника,МесяцРасшифровки,СобиратьРасшифровку,МесяцДохода,ОписаниеВР,36,СуммаПриходящаясяНаЕНВД);
								//скидка
								СкидкаОсновнойТариф = Макс(Мин(Скидка,СуммаРез - СуммаПриходящаясяНаЕНВД),0);							
								ОтразитьДанныеВТаблицах(ДоходыВычетыНалогиСотрудников,НомерСтрокиСотрудника,МесяцРасшифровки,СобиратьРасшифровку,МесяцДохода,ОписаниеВР,11,СкидкаОсновнойТариф);
								СкидкаЕНВД = Макс(Скидка - СкидкаОсновнойТариф,0);							
								ОтразитьДанныеВТаблицах(ДоходыВычетыНалогиСотрудников,НомерСтрокиСотрудника,МесяцРасшифровки,СобиратьРасшифровку,МесяцДохода,ОписаниеВР,37,СкидкаЕНВД);								
							Иначе
								ОтразитьДанныеВТаблицах(ДоходыВычетыНалогиСотрудников,НомерСтрокиСотрудника,МесяцРасшифровки,СобиратьРасшифровку,МесяцДохода,ОписаниеВР,23,СуммаРез);
								//скидка
								ОтразитьДанныеВТаблицах(ДоходыВычетыНалогиСотрудников,НомерСтрокиСотрудника,МесяцРасшифровки,СобиратьРасшифровку,МесяцДохода,ОписаниеВР,24,Скидка);								
							КонецЕсли;
						КонецЕсли;
						
						//Договора подряда
						Если ВР.ВидДохода.Код = "2010" Тогда
							Если Инвалид = 0 Тогда
								ОтразитьДанныеВТаблицах(ДоходыВычетыНалогиСотрудников,НомерСтрокиСотрудника,МесяцРасшифровки,СобиратьРасшифровку,МесяцДохода,ОписаниеВР,12,СуммаРез - СуммаПриходящаясяНаЕНВД);
								ОтразитьДанныеВТаблицах(ДоходыВычетыНалогиСотрудников,НомерСтрокиСотрудника,МесяцРасшифровки,СобиратьРасшифровку,МесяцДохода,ОписаниеВР,38,СуммаПриходящаясяНаЕНВД);
							Иначе
								ОтразитьДанныеВТаблицах(ДоходыВычетыНалогиСотрудников,НомерСтрокиСотрудника,МесяцРасшифровки,СобиратьРасшифровку,МесяцДохода,ОписаниеВР,25,СуммаРез);
							КонецЕсли;
						КонецЕсли;
						
						//Авторские
						Если Найти("2201, 2202, 2203, 2204, 2205, 2206, 2207, 2208, 2208",ВР.ВидДохода.Код) <> 0 Тогда
							Если Инвалид = 0 Тогда
								ОтразитьДанныеВТаблицах(ДоходыВычетыНалогиСотрудников,НомерСтрокиСотрудника,МесяцРасшифровки,СобиратьРасшифровку,МесяцДохода,ОписаниеВР,13,СуммаРез - СуммаПриходящаясяНаЕНВД);
								ОтразитьДанныеВТаблицах(ДоходыВычетыНалогиСотрудников,НомерСтрокиСотрудника,МесяцРасшифровки,СобиратьРасшифровку,МесяцДохода,ОписаниеВР,40,СуммаПриходящаясяНаЕНВД);
							Иначе
								ОтразитьДанныеВТаблицах(ДоходыВычетыНалогиСотрудников,НомерСтрокиСотрудника,МесяцРасшифровки,СобиратьРасшифровку,МесяцДохода,ОписаниеВР,26,СуммаРез);
							КонецЕсли;
						КонецЕсли;
						
						//Не является объектом
						Если Найти("4000,4600,3010,3020,2800,2900,2400,2640",ВР.ВидДохода.Код) <> 0 Тогда
							Если Инвалид = 0 Тогда
								ОтразитьДанныеВТаблицах(ДоходыВычетыНалогиСотрудников,НомерСтрокиСотрудника,МесяцРасшифровки,СобиратьРасшифровку,МесяцДохода,ОписаниеВР,3,СуммаРез - СуммаПриходящаясяНаЕНВД);
								ОтразитьДанныеВТаблицах(ДоходыВычетыНалогиСотрудников,НомерСтрокиСотрудника,МесяцРасшифровки,СобиратьРасшифровку,МесяцДохода,ОписаниеВР,29,СуммаПриходящаясяНаЕНВД);
							Иначе
								ОтразитьДанныеВТаблицах(ДоходыВычетыНалогиСотрудников,НомерСтрокиСотрудника,МесяцРасшифровки,СобиратьРасшифровку,МесяцДохода,ОписаниеВР,16,СуммаРез);
							КонецЕсли;
						КонецЕсли;
						
					КонецЕсли;
					
				КонецЦикла;		
				
			КонецЦикла;		//БухИт.ВыбратьПериоды
			
		КонецЕсли;
		
		// добавим доходы и налоги из справочника
		Если  ДанныеВСправочнике = 1 Тогда
			
			Если МесяцРасшифровки = 0 Тогда // обычный расчет 
				
				// получим данные из справочников последовательно для двух разделов
				// 0 - НеЕНВД, 1 - ЕНВД 
				
				Для ВидТарифа = 0 По 1 Цикл
					
					ЗапросПоВзносамКСправочникам.вНачалоВыборки();
					
					Если ЗапросПоВзносамКСправочникам.Получить(Сотрудник,ВидТарифа,)=0 Тогда
						Продолжить;	
					КонецЕсли;
					
					
					Пока ЗапросПоВзносамкСправочникам.Группировка("ГодоМесяц")=1 Цикл
						
						МесяцДохода = Число(ЗапросПоВзносамкСправочникам.ГодоМесяц) % 100;
						
						ЭтоИнвалид = Число(Сред(Инвалид,МесяцДохода,1));
						НомерНачальнойКолонки = ?(ЭтоИнвалид=1,13,?(ВидТарифа=0,0,26));
						ИмяРаздела = ?(ЭтоИнвалид=1,"Инвалид",?(ВидТарифа=0,"","ЕНВД"));
						
						
						// по основному тарифу
						НачисленоВсего 	    = ЗапросПоВзносамкСправочникам.НачисленоВсего;
						НеЯвляетсяОбъектом  = ЗапросПоВзносамкСправочникам.НеЯвляетсяОбъектом;
						НеОблагаетсяЦеликом = ЗапросПоВзносамкСправочникам.НеОблагаетсяЦеликом;
						РасходыЗаСчетФСС    = ЗапросПоВзносамкСправочникам.РасходыЗаСчетФСС;
						ДенежноеДовольствиеВоеннослужащих = ЗапросПоВзносамкСправочникам.ДенежноеДовольствиеВоеннослужащих;
						ДенежноеСодержаниеПрокуроров      = ЗапросПоВзносамкСправочникам.ДенежноеСодержаниеПрокуроров;
						Матпомощь = ЗапросПоВзносамкСправочникам.Матпомощь;
						СкидкаМатПомощь = ЗапросПоВзносамкСправочникам.СкидкаМатПомощь;
						МатпомощьПриРожденииРебенка = ЗапросПоВзносамкСправочникам.МатпомощьПриРожденииРебенка;
						СкидкаМатПомощьПриРожденииРебенка = ЗапросПоВзносамкСправочникам.СкидкаМатПомощьПриРожденииРебенка;
						ДоговорыПодряда = ЗапросПоВзносамкСправочникам.ДоговорыПодряда;
						Авторские       = ЗапросПоВзносамкСправочникам.Авторские;						
						СкидкаАвторские = ЗапросПоВзносамкСправочникам.СкидкаАвторские;
						
						ИсчисленоПФРНак   = ЗапросПоВзносамкСправочникам.НачисленоПФРНак;
						ИсчисленоПФРСтрах = ЗапросПоВзносамкСправочникам.НачисленоПФРСтрах;
						ИсчисленоФСС      = ЗапросПоВзносамкСправочникам.НачисленоФСС;
						ИсчисленоФФОМС    = ЗапросПоВзносамкСправочникам.НачисленоФФОМС;
						ИсчисленоТФОМС    = ЗапросПоВзносамкСправочникам.НачисленоТФОМС;
						ИсчисленоДопТариф = ЗапросПоВзносамкСправочникам.НачисленоДопТариф;
						
						Для Сч = МесяцДохода По 12 Цикл
							НомерТекущейСтрокиСотрудника = НомерСтрокиСотрудника+Сч;
							
							//прибавим из справочников:
							ДоходыВычетыНалогиСотрудников.УстановитьЗначение(НомерТекущейСтрокиСотрудника,2+НомерНачальнойКолонки,ДоходыВычетыНалогиСотрудников.ПолучитьЗначение(НомерТекущейСтрокиСотрудника,2+НомерНачальнойКолонки)
							+НачисленоВсего);
							ДоходыВычетыНалогиСотрудников.УстановитьЗначение(НомерТекущейСтрокиСотрудника,3+НомерНачальнойКолонки,ДоходыВычетыНалогиСотрудников.ПолучитьЗначение(НомерТекущейСтрокиСотрудника,3+НомерНачальнойКолонки)
							+НеЯвляетсяОбъектом);
							ДоходыВычетыНалогиСотрудников.УстановитьЗначение(НомерТекущейСтрокиСотрудника,4+НомерНачальнойКолонки,ДоходыВычетыНалогиСотрудников.ПолучитьЗначение(НомерТекущейСтрокиСотрудника,4+НомерНачальнойКолонки)
							+НеОблагаетсяЦеликом);
							ДоходыВычетыНалогиСотрудников.УстановитьЗначение(НомерТекущейСтрокиСотрудника,5+НомерНачальнойКолонки,ДоходыВычетыНалогиСотрудников.ПолучитьЗначение(НомерТекущейСтрокиСотрудника,5+НомерНачальнойКолонки)
							+РасходыЗаСчетФСС);
							ДоходыВычетыНалогиСотрудников.УстановитьЗначение(НомерТекущейСтрокиСотрудника,6+НомерНачальнойКолонки,ДоходыВычетыНалогиСотрудников.ПолучитьЗначение(НомерТекущейСтрокиСотрудника,6+НомерНачальнойКолонки)
							+ДенежноеДовольствиеВоеннослужащих);
							ДоходыВычетыНалогиСотрудников.УстановитьЗначение(НомерТекущейСтрокиСотрудника,7+НомерНачальнойКолонки,ДоходыВычетыНалогиСотрудников.ПолучитьЗначение(НомерТекущейСтрокиСотрудника,7+НомерНачальнойКолонки)
							+ДенежноеСодержаниеПрокуроров);
							ДоходыВычетыНалогиСотрудников.УстановитьЗначение(НомерТекущейСтрокиСотрудника,10+НомерНачальнойКолонки,ДоходыВычетыНалогиСотрудников.ПолучитьЗначение(НомерТекущейСтрокиСотрудника,10+НомерНачальнойКолонки)
								+Матпомощь);
							ДоходыВычетыНалогиСотрудников.УстановитьЗначение(НомерТекущейСтрокиСотрудника,11+НомерНачальнойКолонки,ДоходыВычетыНалогиСотрудников.ПолучитьЗначение(НомерТекущейСтрокиСотрудника,11+НомерНачальнойКолонки)
								+СкидкаМатПомощь);
							ДоходыВычетыНалогиСотрудников.УстановитьЗначение(НомерТекущейСтрокиСотрудника,8+НомерНачальнойКолонки,ДоходыВычетыНалогиСотрудников.ПолучитьЗначение(НомерТекущейСтрокиСотрудника,8+НомерНачальнойКолонки)
								+МатпомощьПриРожденииРебенка); 
							ДоходыВычетыНалогиСотрудников.УстановитьЗначение(НомерТекущейСтрокиСотрудника,9+НомерНачальнойКолонки,ДоходыВычетыНалогиСотрудников.ПолучитьЗначение(НомерТекущейСтрокиСотрудника,9+НомерНачальнойКолонки)
								+СкидкаМатПомощьПриРожденииРебенка);
							ДоходыВычетыНалогиСотрудников.УстановитьЗначение(НомерТекущейСтрокиСотрудника,12+НомерНачальнойКолонки,ДоходыВычетыНалогиСотрудников.ПолучитьЗначение(НомерТекущейСтрокиСотрудника,12+НомерНачальнойКолонки)
								+ДоговорыПодряда);
							ДоходыВычетыНалогиСотрудников.УстановитьЗначение(НомерТекущейСтрокиСотрудника,13+НомерНачальнойКолонки,ДоходыВычетыНалогиСотрудников.ПолучитьЗначение(НомерТекущейСтрокиСотрудника,13+НомерНачальнойКолонки)
								+Авторские);
							ДоходыВычетыНалогиСотрудников.УстановитьЗначение(НомерТекущейСтрокиСотрудника,14+НомерНачальнойКолонки,ДоходыВычетыНалогиСотрудников.ПолучитьЗначение(НомерТекущейСтрокиСотрудника,14+НомерНачальнойКолонки)
								+СкидкаАвторские);
							
							
							ДоходыВычетыНалогиСотрудников.УстановитьЗначение(НомерТекущейСтрокиСотрудника,"ИсчисленоПФРНак"+ИмяРаздела,ДоходыВычетыНалогиСотрудников.ПолучитьЗначение(НомерТекущейСтрокиСотрудника,16+НомерНачальнойКолонки)
							+ИсчисленоПФРНак);
							ДоходыВычетыНалогиСотрудников.УстановитьЗначение(НомерТекущейСтрокиСотрудника,"ИсчисленоПФРСтрах"+ИмяРаздела,ДоходыВычетыНалогиСотрудников.ПолучитьЗначение(НомерТекущейСтрокиСотрудника,17+НомерНачальнойКолонки)
							+ИсчисленоПФРСтрах); 
							ДоходыВычетыНалогиСотрудников.УстановитьЗначение(НомерТекущейСтрокиСотрудника,"ИсчисленоФСС"+ИмяРаздела,ДоходыВычетыНалогиСотрудников.ПолучитьЗначение(НомерТекущейСтрокиСотрудника,18+НомерНачальнойКолонки)
							+ИсчисленоФСС);
							ДоходыВычетыНалогиСотрудников.УстановитьЗначение(НомерТекущейСтрокиСотрудника,"ИсчисленоФФОМС"+ИмяРаздела,ДоходыВычетыНалогиСотрудников.ПолучитьЗначение(НомерТекущейСтрокиСотрудника,19+НомерНачальнойКолонки)
							+ИсчисленоФФОМС);
							ДоходыВычетыНалогиСотрудников.УстановитьЗначение(НомерТекущейСтрокиСотрудника,"ИсчисленоТФОМС"+ИмяРаздела,ДоходыВычетыНалогиСотрудников.ПолучитьЗначение(НомерТекущейСтрокиСотрудника,20+НомерНачальнойКолонки)
							+ИсчисленоТФОМС);
							ДоходыВычетыНалогиСотрудников.УстановитьЗначение(НомерТекущейСтрокиСотрудника,"ИсчисленоДопТариф",ДоходыВычетыНалогиСотрудников.ПолучитьЗначение(НомерТекущейСтрокиСотрудника,21+НомерНачальнойКолонки)
							+ИсчисленоДопТариф);				
							
							Если СобиратьРасшифровку = 1 Тогда
								//а теперь просто запишем справочные данные:
								ДоходыВычетыНалогиСотрудников.УстановитьЗначение(НомерТекущейСтрокиСотрудника,2+39+НомерНачальнойКолонки,НачисленоВсего);
								ДоходыВычетыНалогиСотрудников.УстановитьЗначение(НомерТекущейСтрокиСотрудника,3+39+НомерНачальнойКолонки,НеЯвляетсяОбъектом);
								ДоходыВычетыНалогиСотрудников.УстановитьЗначение(НомерТекущейСтрокиСотрудника,4+39+НомерНачальнойКолонки,НеОблагаетсяЦеликом);
								ДоходыВычетыНалогиСотрудников.УстановитьЗначение(НомерТекущейСтрокиСотрудника,5+39+НомерНачальнойКолонки,РасходыЗаСчетФСС);
								ДоходыВычетыНалогиСотрудников.УстановитьЗначение(НомерТекущейСтрокиСотрудника,6+39+НомерНачальнойКолонки,ДенежноеДовольствиеВоеннослужащих);
								ДоходыВычетыНалогиСотрудников.УстановитьЗначение(НомерТекущейСтрокиСотрудника,7+39+НомерНачальнойКолонки,ДенежноеСодержаниеПрокуроров);
								ДоходыВычетыНалогиСотрудников.УстановитьЗначение(НомерТекущейСтрокиСотрудника,10+39+НомерНачальнойКолонки,Матпомощь);
								ДоходыВычетыНалогиСотрудников.УстановитьЗначение(НомерТекущейСтрокиСотрудника,11+39+НомерНачальнойКолонки,СкидкаМатПомощь);
								ДоходыВычетыНалогиСотрудников.УстановитьЗначение(НомерТекущейСтрокиСотрудника,8+39+НомерНачальнойКолонки,МатпомощьПриРожденииРебенка);
								ДоходыВычетыНалогиСотрудников.УстановитьЗначение(НомерТекущейСтрокиСотрудника,9+39+НомерНачальнойКолонки,СкидкаМатПомощьПриРожденииРебенка);
								ДоходыВычетыНалогиСотрудников.УстановитьЗначение(НомерТекущейСтрокиСотрудника,12+39+НомерНачальнойКолонки,ДоговорыПодряда);
								ДоходыВычетыНалогиСотрудников.УстановитьЗначение(НомерТекущейСтрокиСотрудника,13+39+НомерНачальнойКолонки,Авторские);
								ДоходыВычетыНалогиСотрудников.УстановитьЗначение(НомерТекущейСтрокиСотрудника,14+39+НомерНачальнойКолонки,СкидкаАвторские);
								
								ДоходыВычетыНалогиСотрудников.УстановитьЗначение(НомерТекущейСтрокиСотрудника,"ИсчисленоПФРНакСпр"+ИмяРаздела,ИсчисленоПФРНак);
								ДоходыВычетыНалогиСотрудников.УстановитьЗначение(НомерТекущейСтрокиСотрудника,"ИсчисленоПФРСтрахСпр"+ИмяРаздела,ИсчисленоПФРСтрах);
								ДоходыВычетыНалогиСотрудников.УстановитьЗначение(НомерТекущейСтрокиСотрудника,"ИсчисленоФСССпр"+ИмяРаздела,ИсчисленоФСС);
								ДоходыВычетыНалогиСотрудников.УстановитьЗначение(НомерТекущейСтрокиСотрудника,"ИсчисленоФФОМССпр"+ИмяРаздела,ИсчисленоФФОМС);
								ДоходыВычетыНалогиСотрудников.УстановитьЗначение(НомерТекущейСтрокиСотрудника,"ИсчисленоТФОМССпр"+ИмяРаздела,ИсчисленоТФОМС);
								ДоходыВычетыНалогиСотрудников.УстановитьЗначение(НомерТекущейСтрокиСотрудника,"ИсчисленоДопТарифСпр",ИсчисленоДопТариф);

								
							КонецЕсли;
							
						КонецЦикла; 
						
					КонецЦикла;  // обхода по периодам действия/регистрации 
				КонецЦикла; // обход по видам тарифа
				
			КонецЕсли;
		КонецЕсли;
		
		НалогиПоРегистрации=0;
		СписокКолонок = СоздатьОбъект("СписокЗначений");
		СписокКолонок.Установить("Объект", КодСотраВтаблице);
		СотрЗапросПоВзносам = глОтобратьСтрокиТаблицы(ЗапросПоВзносам, СписокКолонок);
		Если СотрЗапросПоВзносам.КоличествоСтрок() > 0 Тогда
			НалогиПоРегистрации=1;
		КонецЕсли;
		
		// здесь собирается начисленные ранее взносы - по периоду регистрации
		ПоправкаНаРасшифровку = ?(СобиратьРасшифровку = 1, 41,0);
		Если (НалогиПоРегистрации = 1) и (МесяцРасшифровки = 0) Тогда
			СотрЗапросПоВзносам.ВыбратьСтроки();
			Пока СотрЗапросПоВзносам.ПолучитьСтроку()=1 Цикл
				Регистрация = СотрЗапросПоВзносам.Регистрация;
				МесяцДохода=ДатаМесяц(Регистрация);
				ВР = СотрЗапросПоВзносам.ВР;
				ОписаниеВР = СокрЛП(ВР.Наименование);
				СуммаРез=СотрЗапросПоВзносам.РезультатВР;
				СуммаРез_ЕНВД=СотрЗапросПоВзносам.РезультатВР_ЕНВД;
				ИмяКолонки="";
				ИмяКолонкиЕНВД="";
				ИмяРаздела = ?(ЭтоИнвалид = 1, "Инвалид", "");
				ИмяРазделаЕНВД = ?(ЭтоИнвалид = 1, "Инвалид", "ЕНВД");				
				
				НомерКолонки=0;
				Если (ВР=ВидНалога_ФФОМС)  Тогда
					ИмяКолонки = "ИсчисленоФФОМС" + ИмяРаздела;
				ИначеЕсли (ВР=ВидНалога_ТФОМС)  Тогда
					ИмяКолонки = "ИсчисленоТФОМС" + ИмяРаздела;
				ИначеЕсли (ВР=ВидНалога_ФСС)  Тогда
					ИмяКолонки = "ИсчисленоФСС" + ИмяРаздела;
				ИначеЕсли (ВР=ВидНалога_ПФР_страх)  Тогда
					ИмяКолонки = "ИсчисленоПФРСтрах" + ИмяРаздела;
					ИмяКолонкиЕНВД = "ИсчисленоПФРСтрах" + ИмяРазделаЕНВД;
				ИначеЕсли (ВР=ВидНалога_ПФР_нак)  Тогда
					ИмяКолонки = "ИсчисленоПФРНак" + ИмяРаздела;
					ИмяКолонкиЕНВД = "ИсчисленоПФРНак" + ИмяРазделаЕНВД;
				КонецЕсли;
				
				// занесем налоги в таблицу по сотруднику
				Если ИмяКолонки <> "" Тогда
					Если ЭтоИнвалид = 0 Тогда
						ОтразитьДанныеВТаблицах(ДоходыВычетыНалогиСотрудников,НомерСтрокиСотрудника,МесяцРасшифровки,СобиратьРасшифровку,МесяцДохода,ОписаниеВР,ИмяКолонки,СуммаРез);
						Если ИмяКолонкиЕНВД <> "" Тогда
							ОтразитьДанныеВТаблицах(ДоходыВычетыНалогиСотрудников,НомерСтрокиСотрудника,МесяцРасшифровки,СобиратьРасшифровку,МесяцДохода,ОписаниеВР,ИмяКолонкиЕНВД,СуммаРез_ЕНВД);
						КонецЕсли;
					Иначе
						ОтразитьДанныеВТаблицах(ДоходыВычетыНалогиСотрудников,НомерСтрокиСотрудника,МесяцРасшифровки,СобиратьРасшифровку,МесяцДохода,ОписаниеВР,ИмяКолонки,СуммаРез + СуммаРез_ЕНВД);
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;  // обхода по месяцам
		КонецЕсли; 
		
		Если МесяцРасшифровки <> 0 Тогда // для расшифровки месяца по видам расчетов - больше информации не требуется
			Продолжить; 
		КонецЕсли;
		
		//******************************************************************************
		// рассчитаем налоговые базы взносов
		
		Для Сч = 1 По 3 Цикл 
			
			БазаПФР[Сч] = 0;             // база без дохода иностранца
			БазаПФРТекущийМесяц[Сч] = 0;
			НалоговаяБазаПФРПоПредыдущийМесяц[Сч] = 0; // вся база, включая доходы иностранца
			ОграниченнаяБазаПФР[Сч] = 0; 
			
			БазаФОМС[Сч] = 0;
			БазаФОМСТекущийМесяц[Сч] = 0;
			НалоговаяБазаФОМСПоПредыдущийМесяц[Сч] = 0;
			ОграниченнаяБазаФОМС[Сч] = 0;
			
			БазаФСС[Сч] = 0;
			БазаФССТекущийМесяц[Сч] = 0;
			НалоговаяБазаФССПоПредыдущийМесяц[Сч] = 0;
			ОграниченнаяБазаФСС[Сч] = 0;
		КонецЦикла;  
		Для Сч = 1 По 12 Цикл  
			
			СтрокаТаблицы = НомерСтрокиСотрудника+Сч; 
			
			КоэфВзносыПФРиФСС = Число(Сред(ВзиматьВзносыПФРиФСС,Сч,1)); 
			КоэфВзносыФОМС    = Число(Сред(ВзиматьВзносыФОМС,Сч,1)); 
			
			ТаблицаБазаОсновнойТариф = СоздатьОбъект("ТаблицаЗначений"); 
			ТаблицаБазаОсновнойТариф.НоваяКолонка("БазаПФР","Число",15,2);
			ТаблицаБазаОсновнойТариф.НоваяКолонка("БазаФСС","Число",15,2);
			ТаблицаБазаОсновнойТариф.НоваяКолонка("БазаФОМС","Число",15,2);
			ТаблицаБазаОсновнойТариф.НоваяКолонка("ВидТарифа");
			
			// рассчитаем скидку к доходу Матпомощь
			МатпомощьПоТекущийМесяц 	   = ДоходыВычетыНалогиСотрудников.ПолучитьЗначение(СтрокаТаблицы,10);
			МатпомощьИнвалидПоТекущийМесяц = ДоходыВычетыНалогиСотрудников.ПолучитьЗначение(СтрокаТаблицы,10+13);
			МатпомощьЕНВДПоТекущийМесяц	   = ДоходыВычетыНалогиСотрудников.ПолучитьЗначение(СтрокаТаблицы,10+26);
			МатпомощьВсегоПоТекущийМесяц   = МатпомощьПоТекущийМесяц + МатпомощьИнвалидПоТекущийМесяц + МатпомощьЕНВДПоТекущийМесяц;
			
			Если Сч = 1 Тогда
				
				МатпомощьПоПредыдущийМесяц 	      = 0;
				МатпомощьИнвалидПоПредыдущийМесяц = 0;
				МатпомощьЕНВДПоПредыдущийМесяц	  = 0;
				МатпомощьВсегоПоПредыдущийМесяц   = 0;
				
				СкидкаМатПомощьПоПредыдущийМесяц 		= 0;
				СкидкаМатПомощьИнвалидПоПредыдущийМесяц = 0;
				СкидкаМатПомощьЕНВДПоПредыдущийМесяц	= 0;
				СкидкаМатПомощьВсегоПоПредыдущийМесяц   = 0;
				
			Иначе  
				
				СкидкаМатПомощьПоПредыдущийМесяц 		= ДоходыВычетыНалогиСотрудников.ПолучитьЗначение(СтрокаТаблицы-1,11);
				СкидкаМатПомощьИнвалидПоПредыдущийМесяц = ДоходыВычетыНалогиСотрудников.ПолучитьЗначение(СтрокаТаблицы-1,11+13);
				СкидкаМатПомощьЕНВДПоПредыдущийМесяц	= ДоходыВычетыНалогиСотрудников.ПолучитьЗначение(СтрокаТаблицы-1,11+26);
				СкидкаМатПомощьВсегоПоПредыдущийМесяц   = СкидкаМатПомощьПоПредыдущийМесяц + СкидкаМатПомощьИнвалидПоПредыдущийМесяц + СкидкаМатПомощьЕНВДПоПредыдущийМесяц; 
				
				МатпомощьПоПредыдущийМесяц 	   	  = ДоходыВычетыНалогиСотрудников.ПолучитьЗначение(СтрокаТаблицы-1,10);
				МатпомощьИнвалидПоПредыдущийМесяц = ДоходыВычетыНалогиСотрудников.ПолучитьЗначение(СтрокаТаблицы-1,10+13);
				МатпомощьЕНВДПоПредыдущийМесяц	  = ДоходыВычетыНалогиСотрудников.ПолучитьЗначение(СтрокаТаблицы-1,10+26);
				МатпомощьВсегоПоПредыдущийМесяц   = МатпомощьПоПредыдущийМесяц + МатпомощьИнвалидПоПредыдущийМесяц + МатпомощьЕНВДПоПредыдущийМесяц;
				
			КонецЕсли; 
			
			МатПомощьТекущийМесяц         = МатпомощьПоТекущийМесяц - МатпомощьПоПредыдущийМесяц;
			МатПомощьИнвалидаТекущийМесяц = МатпомощьИнвалидПоТекущийМесяц - МатпомощьИнвалидПоПредыдущийМесяц;
			МатПомощьЕНВДТекущийМесяц     = МатпомощьЕНВДПоТекущийМесяц - МатпомощьЕНВДПоПредыдущийМесяц;
			
			// Скидка текущего месяца
			СкидкаМатПомощьВсегоТекущийМесяц = Мин(МатпомощьВсегоПоТекущийМесяц, РазмерСкидкаМатпомощь) - СкидкаМатПомощьВсегоПоПредыдущийМесяц;
			
			// вычислим месячную долю, которая учавствует в расчете
			// это для месяца, в котором превысили предел РазмерСкидкаМатпомощь
			Если (МатпомощьВсегоПоТекущийМесяц = 0) или (МатпомощьВсегоПоПредыдущийМесяц >= РазмерСкидкаМатпомощь)  Тогда 
				// предел превышен
				КоэффициентБазы = 0;
			ИначеЕсли МатпомощьВсегоПоТекущийМесяц <= РазмерСкидкаМатпомощь  Тогда
				//не достигли предела
				КоэффициентБазы = 1;
			Иначе
				КоэффициентБазы = СкидкаМатПомощьВсегоТекущийМесяц / МатпомощьВсегоПоТекущийМесяц;
			КонецЕсли;
			
			СкидкаМатПомощьТекущийМесяц 		= МатПомощьТекущийМесяц  * КоэффициентБазы; // по основному тарифу
			СкидкаМатПомощьИнвалидаТекущийМесяц = МатПомощьИнвалидаТекущийМесяц * КоэффициентБазы; // база инвалида
			СкидкаМатПомощьЕНВДТекущийМесяц  	= МатПомощьЕНВДТекущийМесяц * КоэффициентБазы; // база инвалида
			
			СкидкаМатПомощьПоТекущийМесяц        = СкидкаМатПомощьПоПредыдущийМесяц + СкидкаМатПомощьТекущийМесяц;
			СкидкаМатПомощьИнвалидПоТекущийМесяц = СкидкаМатПомощьИнвалидПоПредыдущийМесяц + СкидкаМатПомощьИнвалидаТекущийМесяц;
			СкидкаМатПомощьЕНВДПоТекущийМесяц    = СкидкаМатПомощьЕНВДПоПредыдущийМесяц + СкидкаМатПомощьЕНВДТекущийМесяц;
			
			ДоходыВычетыНалогиСотрудников.УстановитьЗначение(СтрокаТаблицы,11,СкидкаМатПомощьПоТекущийМесяц);
			ДоходыВычетыНалогиСотрудников.УстановитьЗначение(СтрокаТаблицы,11+13,СкидкаМатПомощьИнвалидПоТекущийМесяц);
			ДоходыВычетыНалогиСотрудников.УстановитьЗначение(СтрокаТаблицы,11+26,СкидкаМатПомощьЕНВДПоТекущийМесяц);
			
			Для СчТарифов = 1 по 3 Цикл
				
				РазлелТаблицы = (СчТарифов-1) * 13;
				ИмяРаздела = ?(СчТарифов = 1,"",?(СчТарифов = 2,"Инвалид","ЕНВД"));
				
				НачисленоВсего                    = ДоходыВычетыНалогиСотрудников.ПолучитьЗначение(СтрокаТаблицы,2+РазлелТаблицы);
				НеЯвляетсяОбъектом                = ДоходыВычетыНалогиСотрудников.ПолучитьЗначение(СтрокаТаблицы,3+РазлелТаблицы);
				НеОблагаетсяЦеликом               = ДоходыВычетыНалогиСотрудников.ПолучитьЗначение(СтрокаТаблицы,4+РазлелТаблицы);
				РасходыЗаСчетФСС                  = ДоходыВычетыНалогиСотрудников.ПолучитьЗначение(СтрокаТаблицы,5+РазлелТаблицы);
				ДенежноеДовольствиеВоеннослужащих = ДоходыВычетыНалогиСотрудников.ПолучитьЗначение(СтрокаТаблицы,6+РазлелТаблицы);
				ДенежноеСодержаниеПрокуроров      = ДоходыВычетыНалогиСотрудников.ПолучитьЗначение(СтрокаТаблицы,7+РазлелТаблицы);
				Матпомощь                         = ДоходыВычетыНалогиСотрудников.ПолучитьЗначение(СтрокаТаблицы,10+РазлелТаблицы);
				СкидкаМатПомощь                   = ДоходыВычетыНалогиСотрудников.ПолучитьЗначение(СтрокаТаблицы,11+РазлелТаблицы);
				МатпомощьПриРожденииРебенка       = ДоходыВычетыНалогиСотрудников.ПолучитьЗначение(СтрокаТаблицы,8+РазлелТаблицы);
				СкидкаМатПомощьПриРожденииРебенка = ДоходыВычетыНалогиСотрудников.ПолучитьЗначение(СтрокаТаблицы,9+РазлелТаблицы);
				ДоговорыПодряда                   = ДоходыВычетыНалогиСотрудников.ПолучитьЗначение(СтрокаТаблицы,12+РазлелТаблицы);
				Авторские                         = ДоходыВычетыНалогиСотрудников.ПолучитьЗначение(СтрокаТаблицы,13+РазлелТаблицы);
				СкидкаАвторские                   = ДоходыВычетыНалогиСотрудников.ПолучитьЗначение(СтрокаТаблицы,14+РазлелТаблицы); 
				
				НалоговаяБазаФОМС = НачисленоВсего
				- НеЯвляетсяОбъектом
				- НеОблагаетсяЦеликом
				- РасходыЗаСчетФСС
				- ДенежноеДовольствиеВоеннослужащих
				- СкидкаМатПомощь
				- СкидкаМатПомощьПриРожденииРебенка
				- СкидкаАвторские;
				
				НалоговаяБазаПФР = НалоговаяБазаФОМС
				- ДенежноеСодержаниеПрокуроров;
				
				НалоговаяБазаФСС = НачисленоВсего
				- НеЯвляетсяОбъектом
				- НеОблагаетсяЦеликом
				- РасходыЗаСчетФСС
				- ДенежноеДовольствиеВоеннослужащих
				- СкидкаМатПомощь
				- СкидкаМатПомощьПриРожденииРебенка
				- ДоговорыПодряда
				- Авторские;
				
				
				БазаПФРТекущийМесяц[СчТарифов] = 0;
				БазаФССТекущийМесяц[СчТарифов] = 0;
				Если КоэфВзносыПФРиФСС = 1 Тогда  // учтем флажок страховых взносов
					БазаПФРТекущийМесяц[СчТарифов] = НалоговаяБазаПФР - НалоговаяБазаПФРПоПредыдущийМесяц[СчТарифов];
					БазаФССТекущийМесяц[СчТарифов] = НалоговаяБазаФСС - НалоговаяБазаФССПоПредыдущийМесяц[СчТарифов];
				КонецЕсли;
				НалоговаяБазаПФРПоПредыдущийМесяц[СчТарифов] = НалоговаяБазаПФР;
				НалоговаяБазаФССПоПредыдущийМесяц[СчТарифов] = НалоговаяБазаФСС;
				
				БазаПФР[СчТарифов] = БазаПФР[СчТарифов] + БазаПФРТекущийМесяц[СчТарифов];
				БазаФСС[СчТарифов] = БазаФСС[СчТарифов] + БазаФССТекущийМесяц[СчТарифов];
				
				БазаФОМСТекущийМесяц[СчТарифов] = 0;
				Если КоэфВзносыФОМС = 1 Тогда  // учтем флажок страховых взносов
					БазаФОМСТекущийМесяц[СчТарифов] = НалоговаяБазаФОМС - НалоговаяБазаФОМСПоПредыдущийМесяц[СчТарифов];
				КонецЕсли; 
				НалоговаяБазаФОМСПоПредыдущийМесяц[СчТарифов] = НалоговаяБазаФОМС;
				
				БазаФОМС[СчТарифов] = БазаФОМС[СчТарифов] + БазаФОМСТекущийМесяц[СчТарифов];
				
				ДоходыВычетыНалогиСотрудников.УстановитьЗначение(СтрокаТаблицы,"БазаПФР"+ИмяРаздела,БазаПФР[СчТарифов]);
				ДоходыВычетыНалогиСотрудников.УстановитьЗначение(СтрокаТаблицы,"БазаФСС"+ИмяРаздела,БазаФСС[СчТарифов]);
				ДоходыВычетыНалогиСотрудников.УстановитьЗначение(СтрокаТаблицы,"БазаФОМС"+ИмяРаздела,БазаФОМС[СчТарифов]);	
				
				
			КонецЦикла; // цикл по тарифам
			
			//******************************************************************************
			// Расчет облагаемой базы, с учетом ограничения с верху
			
			БазаПФРВсегоПоТекущийМесяц    = БазаПФР[1] + БазаПФР[2] + БазаПФР[3];
			БазаПФРВсегоТекущийМесяц      = БазаПФРТекущийМесяц[1] + БазаПФРТекущийМесяц[2] + БазаПФРТекущийМесяц[3];
			БазаПФРВсегоПоПредыдущийМесяц = БазаПФРВсегоПоТекущийМесяц - БазаПФРВсегоТекущийМесяц;
			
			// Вся облагаемая база текущего месяца, с учетом ограничения сверху
			ОблагаемаяБазаПФРВсегоТекущийМесяц = Мин(БазаПФРВсегоПоТекущийМесяц, ПределДоходов) - БазаПФРВсегоПоПредыдущийМесяц;
			
			// вычислим месячную долю базы, которая учавствует в расчете
			// это для месяца, в котором превысили предел
			Если (БазаПФРВсегоПоТекущийМесяц = 0) или (БазаПФРВсегоПоПредыдущийМесяц >= ПределДоходов)  Тогда 
				// предел превышен
				КоэффициентБазыПФР = 0;
			ИначеЕсли БазаПФРВсегоПоТекущийМесяц <= ПределДоходов  Тогда
				//не достигли предела, вся база входит в облагаемую
				КоэффициентБазыПФР = 1;
			Иначе
				КоэффициентБазыПФР = ОблагаемаяБазаПФРВсегоТекущийМесяц / БазаПФРВсегоТекущийМесяц;
			КонецЕсли; 
			
			
			БазаФОМСВсегоПоТекущийМесяц    = БазаФОМС[1] + БазаФОМС[2] + БазаФОМС[3];
			БазаФОМСВсегоТекущийМесяц      = БазаФОМСТекущийМесяц[1] + БазаФОМСТекущийМесяц[2] + БазаФОМСТекущийМесяц[3];
			БазаФОМСВсегоПоПредыдущийМесяц = БазаФОМСВсегоПоТекущийМесяц - БазаФОМСВсегоТекущийМесяц;
			
			// Вся облагаемая база текущего месяца, с учетом ограничения сверху
			ОблагаемаяБазаФОМСВсегоТекущийМесяц = Мин(БазаФОМСВсегоПоТекущийМесяц, ПределДоходов) - БазаФОМСВсегоПоПредыдущийМесяц;
			
			// вычислим месячную долю базы, которая учавствует в расчете
			// это для месяца, в котором превысили предел
			Если (БазаФОМСВсегоПоТекущийМесяц = 0) или (БазаФОМСВсегоПоПредыдущийМесяц >= ПределДоходов)  Тогда 
				// предел превышен
				КоэффициентБазыФОМС = 0;
			ИначеЕсли БазаФОМСВсегоПоТекущийМесяц <= ПределДоходов  Тогда
				//не достигли предела, вся база входит в облагаемую
				КоэффициентБазыФОМС = 1;
			Иначе
				КоэффициентБазыФОМС = ОблагаемаяБазаФОМСВсегоТекущийМесяц / БазаФОМСВсегоТекущийМесяц;
			КонецЕсли;
			
			
			БазаФССВсегоПоТекущийМесяц    = БазаФСС[1] + БазаФСС[2] + БазаФСС[3];
			БазаФССВсегоТекущийМесяц      = БазаФССТекущийМесяц[1] + БазаФССТекущийМесяц[2] + БазаФССТекущийМесяц[3];
			БазаФССВсегоПоПредыдущийМесяц = БазаФССВсегоПоТекущийМесяц - БазаФССВсегоТекущийМесяц;
			
			// Вся облагаемая база текущего месяца, с учетом ограничения сверху
			ОблагаемаяБазаФССВсегоТекущийМесяц = Мин(БазаФССВсегоПоТекущийМесяц, ПределДоходов) - БазаФССВсегоПоПредыдущийМесяц;
			
			// вычислим месячную долю базы, которая учавствует в расчете
			// это для месяца, в котором превысили предел
			Если (БазаФССВсегоПоТекущийМесяц = 0) или (БазаФССВсегоПоПредыдущийМесяц >= ПределДоходов)  Тогда 
				// предел превышен
				КоэффициентБазыФСС = 0;
			ИначеЕсли БазаФССВсегоПоТекущийМесяц <= ПределДоходов  Тогда
				//не достигли предела, вся база входит в облагаемую
				КоэффициентБазыФСС = 1;
			Иначе
				КоэффициентБазыФСС = ОблагаемаяБазаФССВсегоТекущийМесяц / БазаФССВсегоТекущийМесяц;
			КонецЕсли;
			
			Для СчТарифов = 1 по 3 Цикл
				
				ИмяРаздела = ?(СчТарифов = 1,"",?(СчТарифов = 2,"Инвалид","ЕНВД"));
				
				Если СчТарифов = 1 Тогда 
					// по основному тарифу базу пишем в разрезе тарифов
					// получим основной тариф текущего месяца
					ТаблицаОсновныхТарифов.ПолучитьСтрокуПоНомеру(Сч);
					ОсновнойТариф = ТаблицаОсновныхТарифов.ВидТарифа;
					
					Если Сч = 1 Тогда 
						//первый месяц
						ТаблицаБазаОсновнойТариф.НоваяСтрока(); 
						ТаблицаБазаОсновнойТариф.ВидТарифа = ОсновнойТариф;
						ТаблицаБазаОсновнойТариф.БазаПФР   = БазаПФРТекущийМесяц[1] * КоэффициентБазыПФР;
						ТаблицаБазаОсновнойТариф.БазаФСС   = БазаФССТекущийМесяц[1] * КоэффициентБазыФСС;
						ТаблицаБазаОсновнойТариф.БазаФОМС  = БазаФОМСТекущийМесяц[1] * КоэффициентБазыФОМС;
					Иначе
						ТаблицаБазаОсновнойТариф.Загрузить(ДоходыВычетыНалогиСотрудников.ПолучитьЗначение(СтрокаТаблицы-1,"ОграниченнаяБаза"));
						НомерСтрокиТаблицы = "";
						Если ТаблицаБазаОсновнойТариф.НайтиЗначение(ОсновнойТариф,НомерСтрокиТаблицы,"ВидТарифа") = 1 Тогда						
							ТаблицаБазаОсновнойТариф.ПолучитьСтрокуПоНомеру(НомерСтрокиТаблицы); 
							ТаблицаБазаОсновнойТариф.ВидТарифа = ОсновнойТариф;
							ТаблицаБазаОсновнойТариф.БазаПФР   = ТаблицаБазаОсновнойТариф.БазаПФР  + БазаПФРТекущийМесяц[1] * КоэффициентБазыПФР;
							ТаблицаБазаОсновнойТариф.БазаФСС   = ТаблицаБазаОсновнойТариф.БазаФСС  + БазаФССТекущийМесяц[1] * КоэффициентБазыФСС;
							ТаблицаБазаОсновнойТариф.БазаФОМС  = ТаблицаБазаОсновнойТариф.БазаФОМС + БазаФОМСТекущийМесяц[1] * КоэффициентБазыФОМС;
						Иначе
							ТаблицаБазаОсновнойТариф.НоваяСтрока(); 
							ТаблицаБазаОсновнойТариф.ВидТарифа = ОсновнойТариф;
							ТаблицаБазаОсновнойТариф.БазаПФР   = БазаПФРТекущийМесяц[1] * КоэффициентБазыПФР;
							ТаблицаБазаОсновнойТариф.БазаФСС   = БазаФССТекущийМесяц[1] * КоэффициентБазыФСС;
							ТаблицаБазаОсновнойТариф.БазаФОМС  = БазаФОМСТекущийМесяц[1] * КоэффициентБазыФОМС;
						КонецЕсли;	
					КонецЕсли;
					ДоходыВычетыНалогиСотрудников.УстановитьЗначение(СтрокаТаблицы,"ОграниченнаяБаза",ТаблицаБазаОсновнойТариф);
					
				Иначе
					
					ОграниченнаяБазаПФР[СчТарифов] = ОграниченнаяБазаПФР[СчТарифов] + БазаПФРТекущийМесяц[СчТарифов] * КоэффициентБазыПФР;
					ДоходыВычетыНалогиСотрудников.УстановитьЗначение(СтрокаТаблицы,"ОграниченнаяБазаПФР"+ИмяРаздела,ОграниченнаяБазаПФР[СчТарифов]);
					
					ОграниченнаяБазаФОМС[СчТарифов] = ОграниченнаяБазаФОМС[СчТарифов] + БазаФОМСТекущийМесяц[СчТарифов] * КоэффициентБазыФОМС;
					ДоходыВычетыНалогиСотрудников.УстановитьЗначение(СтрокаТаблицы,"ОграниченнаяБазаФОМС"+ИмяРаздела,ОграниченнаяБазаФОМС[СчТарифов]); 
					
					ОграниченнаяБазаФСС[СчТарифов] = ОграниченнаяБазаФСС[СчТарифов] + БазаФССТекущийМесяц[СчТарифов] * КоэффициентБазыФСС;
					ДоходыВычетыНалогиСотрудников.УстановитьЗначение(СтрокаТаблицы,"ОграниченнаяБазаФСС"+ИмяРаздела,ОграниченнаяБазаФСС[СчТарифов]);
					
				КонецЕсли;
				
			КонецЦикла; 
			
			БазаДопТариф = БазаПФРВсегоПоТекущийМесяц;
			Если Сч > 1 Тогда 
				ДоходыВычетыНалогиСотрудников.УстановитьЗначение(СтрокаТаблицы,"БазаДопТариф", ДоходыВычетыНалогиСотрудников.ПолучитьЗначение(СтрокаТаблицы-1, "БазаДопТариф"));
			КонецЕсли;
			
		КонецЦикла; // цикл по месяцам при расчете баз
		
	КонецЦикла;		
	
КонецПроцедуры

//******************************************************************************
// глСобратьДанныеДляСтраховыхВзносов(ДоходыВычетыНалогиСотрудников,ОбобщенныйСотрудник,ДатаАктуальности,Форма="")
//
// Параметры:
//  ОбобщенныйСотрудник - эл-т спр.Сотрудники (соответствует "основному" элементу 
//                        сотрудника) или список таких элементов, 
//                        определяет список сотрудников, для которых выполняется
//                        обработка данных; если список пуст - то по всем сотрудникам
//  ДатаАктуальности - дата, .
//	Форма - контекст формы, в которой вызвана процедура, необязательный параметр
//  СобиратьРучныеКорректировки - число 1 (по умолчанию) или 0, не обязателен;
//                                "1" - данные для взносов выбираются из сохраненной карточки
//                                "2" - вернуть пустую таблицу
//
// Возвращаемое значение:
//      число 1 или 0 - удалось (не удалось) собрать данные в таблицу
//
// Описание:
//  
//
Функция глСобратьДанныеДляСтраховыхВзносов(ДоходыВычетыНалогиСотрудников, ОбобщенныйСотрудник, ДатаАктуальности, Форма="", МесяцРасшифровки = 0, СобиратьРучныеКорректировки = 1, СобиратьРасшифровку = 0) Экспорт
    	
	Если СобиратьРучныеКорректировки = 2 Тогда // вернуть пустую таблицу
		Возврат 1;
	КонецЕсли;
	
	Год = ДатаГод(ДатаАктуальности);
	Месяц = ДатаМесяц(ДатаАктуальности);
	
	// далее в запросах будем использовать список сотрудников
	Если ТипЗначения(ОбобщенныйСотрудник)=11  Тогда //здесь был передан элемент справочника - добавим его в только что созданный список
		Сотрудники=СоздатьОбъект("СписокЗначений");
		Сотрудники.ДобавитьЗначение(ОбобщенныйСотрудник);
	Иначе //а здесь был передан список элементов - будем использовать непосредственно его
		Сотрудники=ОбобщенныйСотрудник;
	КонецЕсли;
	ВсегоСотров = Сотрудники.РазмерСписка();
	
	Если ВсегоСотров = 0 Тогда // по всем сотрудникам - получим их список для построения выходной таблицы
		ТекстЗапроса =
		"//{{ЗАПРОС(СписокСотрудников)
		|Без итогов;
		|Сотрудник = Справочник.Сотрудники.ТекущийЭлемент;
		|Группировка Сотрудник Без Групп Все;
		|"//}}ЗАПРОС
		;
		Запрос = СоздатьОбъект("Запрос");
		Если Запрос.Выполнить(ТекстЗапроса) = 0 Тогда
			Возврат 0;
		КонецЕсли;
		
		ВременнаяТаблица = СоздатьОбъект("ТаблицаЗначений");
		Запрос.Выгрузить(ВременнаяТаблица,,0);
		ВременнаяТаблица.Выгрузить(Сотрудники,,,"Сотрудник");
		ВременнаяТаблица = "";
		ВсегоСотров = Сотрудники.РазмерСписка();
	КонецЕсли;
	
	//таблица доплонительных кадровых данных
	ДопДанныеФизЛица = СоздатьОбъект("ТаблицаЗначений");
	ДопДанныеФизЛица.НоваяКолонка("КодСотраВтаблице");
	ДопДанныеФизЛица.НоваяКолонка("ДопДанные");
	
	Если МесяцРасшифровки = 0 Тогда // обычный расчет
		ПервыйМесяц = 1;
		ПоследнийМесяц = Месяц;
		НачалоГода = НачГода(ДатаАктуальности);
		КонецПериодаОсмотра = ДатаАктуальности;
		Январь=Строка(Год*100+1);
		Декабрь=Строка(Год*100 + Месяц);
		
	Иначе  // для расшифровки месяца по видам расчетов
		ПервыйМесяц = МесяцРасшифровки;
		ПоследнийМесяц = МесяцРасшифровки;
		НачалоГода = НачГода(ДатаАктуальности);
		КонецПериодаОсмотра = КонМесяца(Дата(Год,ПоследнийМесяц,15));
		Январь=Строка(Год*100+МесяцРасшифровки);
		Декабрь=Январь;
	КонецЕсли; 
	
	Если КонецПериодаОсмотра > КонецРассчитанногопериодаБИ() Тогда
		КонецПериодаОсмотра = КонецРассчитанногопериодаБИ();
		Если КонецПериодаОсмотра < НачалоГода Тогда
			Возврат 0;
		КонецЕсли;
	КонецЕсли;  
	
	
	// Заполнение по бухгалтерским итогам
	// запрос к ж.р. по налогам с ФОТ - собираем суммы уже начисленного налога
	глСтатусСтрока(Форма,"Подготовка данных по суммам уже начисленных страховых взносов");
	
	ЗапросПоВзносам = СоздатьОбъект("ТаблицаЗначений");
	ЗапросПоВзносам.НоваяКолонка("Объект"); // сотрудник
	ЗапросПоВзносам.НоваяКолонка("Регистрация"); // конец месяца начисления
	ЗапросПоВзносам.НоваяКолонка("ВР"); // налог			
	ЗапросПоВзносам.НоваяКолонка("РезультатВР"); // сумма налога, относящаяся к данному виду начисления
	ЗапросПоВзносам.НоваяКолонка("РезультатВР_ЕНВД"); // сумма налога, относящаяся к данному виду начисления по ЕНВД
	
	БухИтСВЗ = СоздатьОбъект("БухгалтерскиеИтоги");
	БухИтСВЗ.ИспользоватьСубконто();
	БухИтСВЗ.ИспользоватьСубконто();
	БухИтСВЗ.ВыполнитьЗапрос(НачалоГода,КонецПериодаОсмотра, "СВЗ.01.1,СВЗ.01.2,СВЗ.01.3,СВЗ.01.4,СВЗ.01.5,СВЗ.02.1,СВЗ.02.2",,, 2, "Месяц");
	
	ПорядокИсчисленияЕСН = Константа.ПорядокИсчисленияЕСН.Получить(КонецПериодаОсмотра);
	
	ВидНалога_ФСС = глПолучитьНалог("ФСС");
	ВидНалога_ФФОМС = глПолучитьНалог("ФФОМС");
	ВидНалога_ТФОМС = глПолучитьНалог("ТФОМС");
	ВидНалога_ПФР_страх = глПолучитьНалог("ПФР_страх");
	ВидНалога_ПФР_нак = глПолучитьНалог("ПФР_нак");
	
	БухИтСВЗ.ВыбратьПериоды();
	Пока БухИтСВЗ.ПолучитьПериод() = 1 Цикл
		Для Сч = 1 по ВсегоСотров Цикл
			Сотрудник = Сотрудники.ПолучитьЗначение(Сч);
			
			КодСотра=Сотрудник.Код;
			ИмяСотра=Сотрудник.Наименование;
			Если ПустоеЗначение(""+КодСотра+ИмяСотра)=1 Тогда
				Продолжить
			КонецЕсли;
			КодСотраВтаблице=глПолучитьУникальныйКодСотрудника(КодСотра);
			
			Если БухИтСВЗ.ПолучитьСчет(, СчетПоКоду("СВЗ.01.1")) = 1 Тогда
				Если БухИтСВЗ.ПолучитьСубконто(1,, Сотрудник) = 1 Тогда
					ЗапросПоВзносам.НоваяСтрока();
					ЗапросПоВзносам.Объект = КодСотраВтаблице;
					ЗапросПоВзносам.Регистрация = БухИтСВЗ.КонДата;
					ЗапросПоВзносам.ВР = ВидНалога_ПФР_страх;
					ЗапросПоВзносам.РезультатВР = БухИтСВЗ.КО();
					ЗапросПоВзносам.РезультатВР_ЕНВД = 0;
				КонецЕсли;
			КонецЕсли;
			
			Если БухИтСВЗ.ПолучитьСчет(, СчетПоКоду("СВЗ.01.2")) = 1 Тогда
				Если БухИтСВЗ.ПолучитьСубконто(1,, Сотрудник) = 1 Тогда
					ЗапросПоВзносам.НоваяСтрока();
					ЗапросПоВзносам.Объект = КодСотраВтаблице;
					ЗапросПоВзносам.Регистрация = БухИтСВЗ.КонДата;
					ЗапросПоВзносам.ВР = ВидНалога_ПФР_нак;
					ЗапросПоВзносам.РезультатВР = БухИтСВЗ.КО();
					ЗапросПоВзносам.РезультатВР_ЕНВД = 0;
				КонецЕсли;
			КонецЕсли;
			
			Если БухИтСВЗ.ПолучитьСчет(, СчетПоКоду("СВЗ.01.3")) = 1 Тогда
				Если БухИтСВЗ.ПолучитьСубконто(1,, Сотрудник) = 1 Тогда
					ЗапросПоВзносам.НоваяСтрока();
					ЗапросПоВзносам.Объект = КодСотраВтаблице;
					ЗапросПоВзносам.Регистрация = БухИтСВЗ.КонДата;
					ЗапросПоВзносам.ВР = ВидНалога_ФСС;
					ЗапросПоВзносам.РезультатВР = БухИтСВЗ.КО();
					ЗапросПоВзносам.РезультатВР_ЕНВД = 0;
				КонецЕсли;
			КонецЕсли;
			
			Если БухИтСВЗ.ПолучитьСчет(, СчетПоКоду("СВЗ.01.4")) = 1 Тогда
				Если БухИтСВЗ.ПолучитьСубконто(1,, Сотрудник) = 1 Тогда
					ЗапросПоВзносам.НоваяСтрока();
					ЗапросПоВзносам.Объект = КодСотраВтаблице;
					ЗапросПоВзносам.Регистрация = БухИтСВЗ.КонДата;
					ЗапросПоВзносам.ВР = ВидНалога_ФФОМС;
					ЗапросПоВзносам.РезультатВР = БухИтСВЗ.КО();
					ЗапросПоВзносам.РезультатВР_ЕНВД = 0;
				КонецЕсли;
			КонецЕсли;
			
			Если БухИтСВЗ.ПолучитьСчет(, СчетПоКоду("СВЗ.01.5")) = 1 Тогда
				Если БухИтСВЗ.ПолучитьСубконто(1,, Сотрудник) = 1 Тогда
					ЗапросПоВзносам.НоваяСтрока();
					ЗапросПоВзносам.Объект = КодСотраВтаблице;
					ЗапросПоВзносам.Регистрация = БухИтСВЗ.КонДата;
					ЗапросПоВзносам.ВР = ВидНалога_ТФОМС;
					ЗапросПоВзносам.РезультатВР = БухИтСВЗ.КО();
					ЗапросПоВзносам.РезультатВР_ЕНВД = 0;
				КонецЕсли;
			КонецЕсли;
			
			// по деят. ЕНВД
			Если БухИтСВЗ.ПолучитьСчет(, СчетПоКоду("СВЗ.02.1")) = 1 Тогда
				Если БухИтСВЗ.ПолучитьСубконто(1,, Сотрудник) = 1 Тогда
					ЗапросПоВзносам.НоваяСтрока();
					ЗапросПоВзносам.Объект = КодСотраВтаблице;
					ЗапросПоВзносам.Регистрация = БухИтСВЗ.КонДата;
					ЗапросПоВзносам.ВР = ВидНалога_ПФР_страх;
					ЗапросПоВзносам.РезультатВР_ЕНВД = БухИтСВЗ.КО();
					ЗапросПоВзносам.РезультатВР = 0;
				КонецЕсли;
			КонецЕсли;
			
			Если БухИтСВЗ.ПолучитьСчет(, СчетПоКоду("СВЗ.02.2")) = 1 Тогда
				Если БухИтСВЗ.ПолучитьСубконто(1,, Сотрудник) = 1 Тогда
					ЗапросПоВзносам.НоваяСтрока();
					ЗапросПоВзносам.Объект = КодСотраВтаблице;
					ЗапросПоВзносам.Регистрация = БухИтСВЗ.КонДата;
					ЗапросПоВзносам.ВР = ВидНалога_ПФР_нак;
					ЗапросПоВзносам.РезультатВР_ЕНВД = БухИтСВЗ.КО();
					ЗапросПоВзносам.РезультатВР = 0;
				КонецЕсли;
			КонецЕсли;
			
		КонецЦикла;
	КонецЦикла;
	
	ЗапросПоВзносам.Свернуть("Объект,Регистрация,ВР", "РезультатВР,РезультатВР_ЕНВД");

	//  проинициализируем выходную таблицу значений
	ДоходыВычетыНалогиСотрудников=СоздатьОбъект("ТаблицаЗначений");
	
	Если МесяцРасшифровки = 0 Тогда // обычный расчет
		//  1-ая колонка (строка, 12) - ключевое поле для поиска данных;
		//      состоит из 10 символов табельного номера сотрудника и 2-х символов месяца.
		ДоходыВычетыНалогиСотрудников.НоваяКолонка(,"Строка",12);
	Иначе  // для расшифровки месяца по видам расчетов
		//  1-ая колонка - строка-описатель записи из ж.р.;
		ДоходыВычетыНалогиСотрудников.НоваяКолонка(,"Строка",100);
	КонецЕсли;
	
	//2	НачисленоВсего
	//3	НеЯвляетсяОбъектом
	//4	НеОблагаетсяЦеликом
	//5	РасходыЗаСчетФСС
	//6	ДенежноеДовольствиеВоеннослужащих
	//7	ДенежноеСодержаниеПрокуроров
	//8-МатпомощьПриРожденииРебенка 
	//9-СкидкаМатПомощьПриРожденииРебенка
	//10-Матпомощь
	//11-СкидкаМатПомощь
	//12	ДоговорыПодряда
	//13	Авторские
	//14	СкидкаАвторские
	//15	НачисленоВсего
	//16	НеЯвляетсяОбъектом
	//17	НеОблагаетсяЦеликом
	//18	РасходыЗаСчетФСС
	//19	ДенежноеДовольствиеВоеннослужащих
	//20	ДенежноеСодержаниеПрокуроров
	//21	Матпомощь
	//22	СкидкаМатПомощь
	//23	МатпомощьПриРожденииРебенка
	//24	СкидкаМатПомощьПриРожденииРебенка
	//25	ДоговорыПодряда
	//26	Авторские
	//27	СкидкаАвторские
	//28	НачисленоВсего
	//29	НеЯвляетсяОбъектом
	//30	НеОблагаетсяЦеликом
	//31	РасходыЗаСчетФСС
	//32	ДенежноеДовольствиеВоеннослужащих
	//33	ДенежноеСодержаниеПрокуроров
	//34	Матпомощь
	//35	СкидкаМатПомощь
	//36	МатпомощьПриРожденииРебенка
	//37	СкидкаМатПомощьПриРожденииРебенка
	//38	ДоговорыПодряда
	//39	Авторские
	//40	СкидкаАвторские
	
	Для Сч = 2 По 40 Цикл
		ДоходыВычетыНалогиСотрудников.НоваяКолонка(,"Число",15,2);
	КонецЦикла;
	
	Если СобиратьРасшифровку = 1 Тогда
		// добавляем еще столько же колонок для данных из справочников
		Для Сч = 41 По 80 Цикл
			ДоходыВычетыНалогиСотрудников.НоваяКолонка(,"Число",15,2);
		КонецЦикла;
		
		// колонка - таблица значений ДоходыПоВР:
		ДоходыВычетыНалогиСотрудников.НоваяКолонка("ТаблицаРасшифровки","ТаблицаЗначений"); 
	КонецЕсли;  
	
	// база для ПФР
	ДоходыВычетыНалогиСотрудников.НоваяКолонка("БазаПФР","Число",15,2);   		// 41 колонка
	ДоходыВычетыНалогиСотрудников.НоваяКолонка("БазаПФРИнвалид","Число",15,2);  // 42 колонка
	ДоходыВычетыНалогиСотрудников.НоваяКолонка("БазаПФРЕНВД","Число",15,2);   	// 43 колонка
	
	//база для ФСС
	ДоходыВычетыНалогиСотрудников.НоваяКолонка("БазаФСС","Число",15,2);   		// 44 колонка
	ДоходыВычетыНалогиСотрудников.НоваяКолонка("БазаФССИнвалид","Число",15,2);  // 45 колонка
	ДоходыВычетыНалогиСотрудников.НоваяКолонка("БазаФССЕНВД","Число",15,2);  	// 46 колонка
	
	//база для ФОМС
	ДоходыВычетыНалогиСотрудников.НоваяКолонка("БазаФОМС","Число",15,2);   		// 47 колонка
	ДоходыВычетыНалогиСотрудников.НоваяКолонка("БазаФОМСИнвалид","Число",15,2); // 48 колонка
	ДоходыВычетыНалогиСотрудников.НоваяКолонка("БазаФОМСЕНВД","Число",15,2);  	// 49 колонка
	
	//база доп. тариф
	ДоходыВычетыНалогиСотрудников.НоваяКолонка("БазаДопТариф","Число",15,2);  	// 50 колонка
	
	//В таблице храним ограниченные базы по трем взносам в разрезе основных тарифоы
	ДоходыВычетыНалогиСотрудников.НоваяКолонка("ОграниченнаяБаза","ТаблицаЗначений");
	
	ДоходыВычетыНалогиСотрудников.НоваяКолонка("ОграниченнаяБазаПФРИнвалид","Число",15,2);
	ДоходыВычетыНалогиСотрудников.НоваяКолонка("ОграниченнаяБазаПФРЕНВД","Число",15,2);
	
	ДоходыВычетыНалогиСотрудников.НоваяКолонка("ОграниченнаяБазаФССИнвалид","Число",15,2);
	ДоходыВычетыНалогиСотрудников.НоваяКолонка("ОграниченнаяБазаФССЕНВД","Число",15,2);
	
	ДоходыВычетыНалогиСотрудников.НоваяКолонка("ОграниченнаяБазаФОМСИнвалид","Число",15,2);
	ДоходыВычетыНалогиСотрудников.НоваяКолонка("ОграниченнаяБазаФОМСЕНВД","Число",15,2);
	
	//Исчислено ФСС
	ДоходыВычетыНалогиСотрудников.НоваяКолонка("ИсчисленоФСС","Число",15,2);   			// 52 колонка
	ДоходыВычетыНалогиСотрудников.НоваяКолонка("ИсчисленоФССИнвалид","Число",15,2);  	// 53 колонка
	ДоходыВычетыНалогиСотрудников.НоваяКолонка("ИсчисленоФССЕНВД","Число",15,2);   		// 54 колонка
	
	//Исчислено ФФОМС
	ДоходыВычетыНалогиСотрудников.НоваяКолонка("ИсчисленоФФОМС","Число",15,2);   		// 55 колонка
	ДоходыВычетыНалогиСотрудников.НоваяКолонка("ИсчисленоФФОМСИнвалид","Число",15,2);  	// 56 колонка
	ДоходыВычетыНалогиСотрудников.НоваяКолонка("ИсчисленоФФОМСЕНВД","Число",15,2);   	// 57 колонка
	
	//Исчислено ТФОМС
	ДоходыВычетыНалогиСотрудников.НоваяКолонка("ИсчисленоТФОМС","Число",15,2);   		// 58 колонка
	ДоходыВычетыНалогиСотрудников.НоваяКолонка("ИсчисленоТФОМСИнвалид","Число",15,2);  	// 59 колонка
	ДоходыВычетыНалогиСотрудников.НоваяКолонка("ИсчисленоТФОМСЕНВД","Число",15,2);   	// 60 колонка
	
	//Исчислено ПФР на накопительную пенсию
	ДоходыВычетыНалогиСотрудников.НоваяКолонка("ИсчисленоПФРНак","Число",15,2);   		// 61 колонка
	ДоходыВычетыНалогиСотрудников.НоваяКолонка("ИсчисленоПФРНакИнвалид","Число",15,2);  // 62 колонка
	ДоходыВычетыНалогиСотрудников.НоваяКолонка("ИсчисленоПФРНакЕНВД","Число",15,2);   	// 63 колонка
	
	//Исчислено ПФР на страховую пенсию
	ДоходыВычетыНалогиСотрудников.НоваяКолонка("ИсчисленоПФРСтрах","Число",15,2);   	// 64 колонка
	ДоходыВычетыНалогиСотрудников.НоваяКолонка("ИсчисленоПФРСтрахИнвалид","Число",15,2);// 65 колонка
	ДоходыВычетыНалогиСотрудников.НоваяКолонка("ИсчисленоПФРСтрахЕНВД","Число",15,2);   // 66 колонка
	
	//Исчислено ПФР по доп.тарифу
	ДоходыВычетыНалогиСотрудников.НоваяКолонка("ИсчисленоДопТариф","Число",15,2);   // 67 колонка
	
	Если СобиратьРасшифровку = 1 Тогда
		// добавляем еще столько же колонок для данных из справочников
		
		ДоходыВычетыНалогиСотрудников.НоваяКолонка("ИсчисленоФСССпр","Число",15,2);
		ДоходыВычетыНалогиСотрудников.НоваяКолонка("ИсчисленоФСССпрИнвалид","Число",15,2);
		ДоходыВычетыНалогиСотрудников.НоваяКолонка("ИсчисленоФСССпрЕНВД","Число",15,2);
		
		ДоходыВычетыНалогиСотрудников.НоваяКолонка("ИсчисленоФФОМССпр","Число",15,2);
		ДоходыВычетыНалогиСотрудников.НоваяКолонка("ИсчисленоФФОМССпрИнвалид","Число",15,2);
		ДоходыВычетыНалогиСотрудников.НоваяКолонка("ИсчисленоФФОМССпрЕНВД","Число",15,2);
		
		ДоходыВычетыНалогиСотрудников.НоваяКолонка("ИсчисленоТФОМССпр","Число",15,2);
		ДоходыВычетыНалогиСотрудников.НоваяКолонка("ИсчисленоТФОМССпрИнвалид","Число",15,2);
		ДоходыВычетыНалогиСотрудников.НоваяКолонка("ИсчисленоТФОМССпрЕНВД","Число",15,2);
		
		ДоходыВычетыНалогиСотрудников.НоваяКолонка("ИсчисленоПФРНакСпр","Число",15,2);
		ДоходыВычетыНалогиСотрудников.НоваяКолонка("ИсчисленоПФРНакСпрИнвалид","Число",15,2);
		ДоходыВычетыНалогиСотрудников.НоваяКолонка("ИсчисленоПФРНакСпрЕНВД","Число",15,2);
		
		ДоходыВычетыНалогиСотрудников.НоваяКолонка("ИсчисленоПФРСтрахСпр","Число",15,2);
		ДоходыВычетыНалогиСотрудников.НоваяКолонка("ИсчисленоПФРСтрахСпрИнвалид","Число",15,2);  
		ДоходыВычетыНалогиСотрудников.НоваяКолонка("ИсчисленоПФРСтрахСпрЕНВД","Число",15,2);
		
		ДоходыВычетыНалогиСотрудников.НоваяКолонка("ИсчисленоДопТарифСпр","Число",15,2);
		
	КонецЕсли;
	
	// запрос к справочнику - данные о ручных корректировках, внесенных
	// форму индивидуальной карточки по страховым взносам
	глСтатусСтрока(Форма,"Подготовка данных по ручным корректировкам");
	ЗапросПоВзносамКСправочникам=СоздатьОбъект("Запрос");
	
	ТекстЗапроса="//{{ЗАПРОС(ПоВзносамКСправочникам)
	|Сотр = Справочник.СтраховыеВзносыДоходы.Владелец.ТекущийЭлемент;
	|ГодоМесяц = Справочник.СтраховыеВзносыДоходы.ГодМесяц;
	|ВидТарифа = Справочник.СтраховыеВзносыДоходы.ВидТарифа;
	|НачисленоВсего = Справочник.СтраховыеВзносыДоходы.НачисленоВсего;
	|НеЯвляетсяОбъектом = Справочник.СтраховыеВзносыДоходы.НеЯвляетсяОбъектом;
	|НеОблагаетсяЦеликом = Справочник.СтраховыеВзносыДоходы.НеОблагаетсяЦеликом;
	|РасходыЗаСчетФСС = Справочник.СтраховыеВзносыДоходы.РасходыЗаСчетФСС;
	|ДенежноеДовольствиеВоеннослужащих = Справочник.СтраховыеВзносыДоходы.ДенежноеДовольствиеВоеннослужащих;
	|ДенежноеСодержаниеПрокуроров = Справочник.СтраховыеВзносыДоходы.ДенежноеСодержаниеПрокуроров;
	|МатПомощь = Справочник.СтраховыеВзносыДоходы.МатПомощь;
	|СкидкаМатПомощь = Справочник.СтраховыеВзносыДоходы.СкидкаМатПомощь;
	|МатпомощьПриРожденииРебенка = Справочник.СтраховыеВзносыДоходы.МатпомощьПриРожденииРебенка;
	|СкидкаМатПомощьПриРожденииРебенка = Справочник.СтраховыеВзносыДоходы.СкидкаМатПомощьПриРожденииРебенка;
	|ДоговорыПодряда = Справочник.СтраховыеВзносыДоходы.ДоговорыПодряда;
	|Авторские = Справочник.СтраховыеВзносыДоходы.Авторские;
	|СкидкаАвторские = Справочник.СтраховыеВзносыДоходы.СкидкаАвторские;
	|НачисленоПФРНак = Справочник.СтраховыеВзносыДоходы.ИсчисленоПФРНак;
	|НачисленоПФРСтрах = Справочник.СтраховыеВзносыДоходы.ИсчисленоПФРСтрах;
	|НачисленоФСС = Справочник.СтраховыеВзносыДоходы.ИсчисленоФСС;
	|НачисленоФФОМС = Справочник.СтраховыеВзносыДоходы.ИсчисленоФФОМС;
	|НачисленоТФОМС = Справочник.СтраховыеВзносыДоходы.ИсчисленоТФОМС;
	|НачисленоДопТариф = Справочник.СтраховыеВзносыДоходы.ИсчисленоДопТариф;
	|Группировка Сотр без упорядочивания без групп;
	|Группировка ВидТарифа;";
	Если МесяцРасшифровки = 0 Тогда // обычный расчет
		ТекстЗапроса=ТекстЗапроса+"
		|Группировка ГодоМесяц;
		|Условие((ГодоМесяц <= Декабрь) и (ГодоМесяц >= Январь));";
	Иначе
		ТекстЗапроса=ТекстЗапроса+"
		|Условие(ГодоМесяц = Январь);";
	КонецЕсли;
	Если ВсегоСотров > 0 Тогда
		ТекстЗапроса=ТекстЗапроса+"
		|Условие(Сотр в Сотрудники);";
	КонецЕсли;
	ТекстЗапроса=ТекстЗапроса+"
	|";//}}ЗАПРОС
	
	
	Если СобиратьРучныеКорректировки = 1 Тогда
		Если ЗапросПоВзносамКСправочникам.Выполнить(ТекстЗапроса)=0 Тогда
			Возврат 0;
		КонецЕсли;
	КонецЕсли;

	Если ВсегоСотров = 0 Тогда // по всем сотрудникам - получим их список для построения выходной таблицы
		ТекстЗапроса =
		"//{{ЗАПРОС(ПодборСотрудников)
		|Сотрудник = Справочник.Сотрудники.ТекущийЭлемент;
		|Группировка Сотрудник без групп;
		|"//}}ЗАПРОС
		;
		Запрос = СоздатьОбъект("Запрос");
		глСтатусСтрока(Форма,"Обрабатывается справочник Сотрудники");
		ПопытокВыполненияЗапроса = 10;
		Для Сч = 1 По ПопытокВыполненияЗапроса Цикл
			Если Запрос.Выполнить(ТекстЗапроса)=1 Тогда
				Прервать
			КонецЕсли;
		КонецЦикла;
		Если Сч = ПопытокВыполненияЗапроса + 1 Тогда
			Возврат 0;
		КонецЕсли;
		// выгрузим запрос в таблицу, а затем в список
		ВременнаяТаблица = СоздатьОбъект("ТаблицаЗначений");
		Запрос.Выгрузить(ВременнаяТаблица,,0);
		ВременнаяТаблица.Выгрузить(Сотрудники,,,"Сотрудник");
		ВременнаяТаблица = "";
		ВсегоСотров = Сотрудники.РазмерСписка()
	КонецЕсли;
    
	ИскатьЕНВД = ?(Константа.ОрганизацияЯвляетсяПлательщикомЕНВД = Да, 1, 0);
	
	ОбходСотрудниковДляСтраховыхВзносов(ВсегоСотров, Сотрудники, ЗапросПоВзносам, ЗапросПоВзносамКСправочникам, СобиратьРучныеКорректировки,
							МесяцРасшифровки, Форма, ДоходыВычетыНалогиСотрудников, СобиратьРасшифровку, Год, ПервыйМесяц,
							ПоследнийМесяц,	ИскатьЕНВД, КонецПериодаОсмотра);
		
	Возврат 1;
КонецФункции // глСобратьДанныеДляСтраховыхВзносов()

//******************************************************************************
// глСобратьДанныеДляЕСН(ДоходыВычетыНалогиСотрудников,ОбобщенныйСотрудник,ДатаАктуальности,Форма="")
//
// Параметры:
//  ОбобщенныйСотрудник - эл-т спр.Сотрудники (соответствует "основному" элементу 
//                        сотрудника) или список таких элементов, 
//                        определяет список сотрудников, для которых выполняется
//                        обработка данных; если список пуст - то по всем сотрудникам
//  ДатаАктуальности - дата, .
//	Форма - контекст формы, в которой вызвана процедура, необязательный параметр
//  СобиратьРучныеКорректировки - число 1 (по умолчанию) или 0, не обязателен;
//                                "1" - данные для ЕСН выбираются из сохраненной карточки
//                                "2" - вернуть пустую таблицу
//
// Возвращаемое значение:
//      число 1 или 0 - удалось (не удалось) собрать данные в таблицу
//
// Описание:
//  
//
Функция глСобратьДанныеДляЕСН(ДоходыВычетыНалогиСотрудников, ОбобщенныйСотрудник, ДатаАктуальности, Форма="", МесяцРасшифровки = 0, СобиратьРучныеКорректировки = 1, СобиратьРасшифровку = 0, ДатаОтменыЕСНприЕНВД = "", ИсключенныеАвторские8листа = "", ДопДанныеФизЛица="") Экспорт

        Год = ДатаГод(ДатаАктуальности);
        Месяц = ДатаМесяц(ДатаАктуальности);

        // далее в запросах будем использовать список сотрудников
        Если ТипЗначения(ОбобщенныйСотрудник)=11  Тогда //здесь был передан элемент справочника - добавим его в только что созданный список
            Сотрудники=СоздатьОбъект("СписокЗначений");
            Сотрудники.ДобавитьЗначение(ОбобщенныйСотрудник);
        Иначе //а здесь был передан список элементов - будем использовать непосредственно его
            Сотрудники=ОбобщенныйСотрудник;
        КонецЕсли;
        ВсегоСотров = Сотрудники.РазмерСписка();

        Если ВсегоСотров = 0 Тогда // по всем сотрудникам - получим их список для построения выходной таблицы
                ТекстЗапроса =
                        "//{{ЗАПРОС(СписокСотрудников)
                        |Без итогов;
                        |Сотрудник = Справочник.Сотрудники.ТекущийЭлемент;
                        |Группировка Сотрудник Без Групп Все;
                        |"//}}ЗАПРОС
                        ;
                Запрос = СоздатьОбъект("Запрос");
                Если Запрос.Выполнить(ТекстЗапроса) = 0 Тогда
                        Возврат 0;
                КонецЕсли;

                ВременнаяТаблица = СоздатьОбъект("ТаблицаЗначений");
                Запрос.Выгрузить(ВременнаяТаблица,,0);
                ВременнаяТаблица.Выгрузить(Сотрудники,,,"Сотрудник");
                ВременнаяТаблица = "";
                ВсегоСотров = Сотрудники.РазмерСписка();
		КонецЕсли;
			
		//таблица доплонительных кадровых данных
		ДопДанныеФизЛица = СоздатьОбъект("ТаблицаЗначений");
		ДопДанныеФизЛица.НоваяКолонка("КодСотраВтаблице");
		ДопДанныеФизЛица.НоваяКолонка("ДопДанные");
    	
        Если МесяцРасшифровки = 0 Тогда // обычный расчет
                ПервыйМесяц = 1;
                ПоследнийМесяц = Месяц;
                НачалоГода = НачГода(ДатаАктуальности);
                КонецПериодаОсмотра = ДатаАктуальности;
                Январь=Строка(Год*100+1);
                Декабрь=Строка(Год*100 + Месяц);

        Иначе  // для расшифровки месяца по видам расчетов
                ПервыйМесяц = МесяцРасшифровки;
                ПоследнийМесяц = МесяцРасшифровки;
                НачалоГода = НачГода(ДатаАктуальности);
                КонецПериодаОсмотра = КонМесяца(Дата(Год,ПоследнийМесяц,15));
                Январь=Строка(Год*100+МесяцРасшифровки);
                Декабрь=Январь;
        КонецЕсли;

        //  проинициализируем выходную таблицу значений
        ДоходыВычетыНалогиСотрудников=СоздатьОбъект("ТаблицаЗначений");

        Если МесяцРасшифровки = 0 Тогда // обычный расчет
                //  1-ая колонка (строка, 12) - ключевое поле для поиска данных;
                //      состоит из 10 символов табельного номера сотрудника и 2-х символов месяца.
                ДоходыВычетыНалогиСотрудников.НоваяКолонка(,"Строка",12);
        Иначе  // для расшифровки месяца по видам расчетов
                //  1-ая колонка - строка-описатель записи из ж.р.;
                ДоходыВычетыНалогиСотрудников.НоваяКолонка(,"Строка",100);
        КонецЕсли;

        //2-ЕСНОблагаемаяПФР. с 2002 года - федеральный бюджет (размер зависит от галочки "НеВзиматьЕСНвПФР" у сотрудника)
        //3-ЕСНОблагаемаяОМС
        //4-ЕСНОблагаемаяФСС
        //5-ПФРУд
        //6-0ФФОМСУд
        //7-0ТФОМСУд
        //8-ФССУд
        //9-ПособийЗаСчетФСС
        //10-НачисленоВсего
        //11-ДенежноеДовольствие
        //12-ЛьготаПоЕСНп1ст236, в 2002 году - пп. 14 п.1 ст.238
        //13-НачисленоЗаСчетПрибыли
        //14-ЛьготаПоЕСНп2ст238абз2
        //15-ЛьготаПоЕСНп2ст238абз3
        //16-ЛьготаПоЕСНпп13п1ст238
        //17-ПрочихЛьготПоСт238
        //18-ДоговораПодряда (кроме лицензионных)
        //19-ДенежноеСодержаниеПрокуроров
        //20-Льгота инвалидам
        //21-Взносы на страховую пенсию
        //22-Взносы на накопительную пенсию
        //23-Облагаемая по страховым взносам в ПФР, зависит от наличия галочки "НеВзиматьНаСтрахПФР" у сотрудника
        //24-Лицензионные договора
        //25-объект налогообложения ЕСН по видам деятельности, "подпадающим" под ЕНВД
        //
        // отдельно для взносов в ПФР
        //26-ЛьготаПоЕСНп1ст236, в 2002 году - пп. 14 п.1 ст.238
        //27-ЛьготаПоЕСНп2ст238абз2
        //28-ЛьготаПоЕСНп2ст238абз3
        //29-ЛьготаПоЕСНпп13п1ст238
        //30-ПрочихЛьготПоСт238
        //31-ПособийЗаСчетФСС
        Для Сч = 2 По 4 Цикл
                ДоходыВычетыНалогиСотрудников.НоваяКолонка(,"Число",15,2);
        КонецЦикла;

        // ПФРУд,ФФОМСУд,ТФОМСУд,ФССУд
        Для Сч = 5 По 8 Цикл
                ДоходыВычетыНалогиСотрудников.НоваяКолонка(,"Число",18,5);
        КонецЦикла;

        Для Сч = 9 По 20 Цикл
                ДоходыВычетыНалогиСотрудников.НоваяКолонка(,"Число",15,2);
        КонецЦикла;

        // Взносы на страховую пенсию, Взносы на накопительную пенсию
        ДоходыВычетыНалогиСотрудников.НоваяКолонка(,"Число",18,5);
        ДоходыВычетыНалогиСотрудников.НоваяКолонка(,"Число",18,5);

        Для Сч = 23 По 31 Цикл
                ДоходыВычетыНалогиСотрудников.НоваяКолонка(,"Число",15,2);
        КонецЦикла;

        ДоходыВычетыНалогиСотрудников.НоваяКолонка("Авторские","Число",15,2);   // 32 колонка

        // колонка с "иностранной" облагаемой базой
        ДоходыВычетыНалогиСотрудников.НоваяКолонка("ИностраннаяБаза","Число",15,2);     // 33 колонка (не облагается взносами на ОПС в части налога на прибыль)
        // колонка с "иностранной" облагаемой базой инвалида
        ДоходыВычетыНалогиСотрудников.НоваяКолонка("ИностраннаяБазаИнвалида","Число",15,2);     // 34 колонка
        //с 35 по 37 - Льгота инвалидам по фондам
        ДоходыВычетыНалогиСотрудников.НоваяКолонка("ЛьготаИнвалидуФдБ","Число",15,2);   // 35 колонка
        ДоходыВычетыНалогиСотрудников.НоваяКолонка("ЛьготаИнвалидуОМС","Число",15,2);   // 36 колонка
        ДоходыВычетыНалогиСотрудников.НоваяКолонка("ЛьготаИнвалидуФСС","Число",15,2);   // 37 колонка

        //с 38 по 41 - Суммы, по неизвестным причинам не включенные в налоговую базу
        ДоходыВычетыНалогиСотрудников.НоваяКолонка("НеОблагаетсяФдБ","Число",15,2);     // 38 колонка
        ДоходыВычетыНалогиСотрудников.НоваяКолонка("НеОблагаетсяОМС","Число",15,2);     // 39 колонка
        ДоходыВычетыНалогиСотрудников.НоваяКолонка("НеОблагаетсяФСС","Число",15,2);     // 40 колонка
        ДоходыВычетыНалогиСотрудников.НоваяКолонка("НеОблагаетсяПФР","Число",15,2);     // 41 колонка (не облагается всеми начисляемыми взносами на ОПС)

        //42 и 43 - полная сумма взносов на страховую и накопительную часть пенсии
        ДоходыВычетыНалогиСотрудников.НоваяКолонка(,"Число",15,2);      // 42 колонка
        ДоходыВычетыНалогиСотрудников.НоваяКолонка(,"Число",15,2);      // 43 колонка

        // Таблица расшифровок
        ДоходыВычетыНалогиСотрудников.НоваяКолонка("ТаблицаРасшифровокПоВР");

        ИскатьЕНВД = 1;
        ИскатьВоенных = 0;

        // вспомогательные таблицы - для распределения результатов по счетам
        ТаблицаРаспределения = СоздатьОбъект("ТаблицаЗначений");
        ТаблицаРаспределения.НоваяКолонка("Шаблон","Перечисление.ТипыДоходовДляЕСН",,,,,,);
        ТаблицаРаспределения.НоваяКолонка("Сумма","Число",15,2,,);

        // и выделения сумм, подпадающих под налогобложение ЕНВД
        ТаблицаРаспределенияПоШаблПроводок = СоздатьОбъект("ТаблицаЗначений");
        ТаблицаРаспределенияПоШаблПроводок.НоваяКолонка("Шаблон","Справочник.ШаблоныПроводок",,,,,,);
        ТаблицаРаспределенияПоШаблПроводок.НоваяКолонка("Сумма","Число",15,2,,);

        Для СчСотров = 1 По ВсегоСотров Цикл
                Сотрудник=Сотрудники.ПолучитьЗначение(СчСотров);

                КодСотра=Сотрудник.Код;
                КодСотраВтаблице=глПолучитьУникальныйКодСотрудника(КодСотра);

                // заготовим "пустые" строки в таблице для данных сотрудника
                Для Сч = 1 По 12 Цикл
                        ДоходыВычетыНалогиСотрудников.НоваяСтрока();
                        ДоходыВычетыНалогиСотрудников.УстановитьЗначение(ДоходыВычетыНалогиСотрудников.КоличествоСтрок(),1,КодСотраВтаблице+глДополнитьСтроку(Сч,2));
                        ДоходыЕСНпоВР = СоздатьОбъект("ТаблицаЗначений");
                        ДоходыЕСНпоВР.НоваяКолонка(,"Строка",100);
                        Для Сч1 = 2 По 43 Цикл
                                ДоходыЕСНпоВР.НоваяКолонка(,"Число",15,5);
                        КонецЦикла;
                        ДоходыВычетыНалогиСотрудников.УстановитьЗначение(ДоходыВычетыНалогиСотрудников.КоличествоСтрок(), "ТаблицаРасшифровокПоВР", ДоходыЕСНпоВР);
                КонецЦикла;
        КонецЦикла;

        Если СобиратьРучныеКорректировки = 2 Тогда // вернуть пустую таблицу
                Возврат 1;
        КонецЕсли;

        ИтогиПоГодуСотра = СоздатьОбъект("Справочник.КарточкиУчетаДоходов");
        Для СчСотров = 1 По ВсегоСотров Цикл
                Сотрудник=Сотрудники.ПолучитьЗначение(СчСотров);

                КодСотра=Сотрудник.Код;
                ИмяСотра=Сотрудник.Наименование;
                Если ПустоеЗначение(""+КодСотра+ИмяСотра)=1 Тогда
                        Продолжить
                КонецЕсли;

                КодСотраВтаблице=глПолучитьУникальныйКодСотрудника(КодСотра);
                НомерСтрокиСотрудника = 0;
                Если ДоходыВычетыНалогиСотрудников.НайтиЗначение(КодСотраВтаблице+"01", НомерСтрокиСотрудника, 1) = 0 Тогда
                    Продолжить;

                Иначе
                        НомерСтрокиСотрудника = НомерСтрокиСотрудника - 1;
                КонецЕсли;

                ИтогиПоГодуСотра.ИспользоватьВладельца(Сотрудник);
                Если ИтогиПоГодуСотра.НайтиПоКоду(Строка(Год)) = 1 Тогда
                        Карточка = ЗначениеИзСтроки(ИтогиПоГодуСотра.СписокПолейИндивидульнойКарточки);
                        Если ПустоеЗначение(Карточка) = 1 Тогда
                                Продолжить;
                        КонецЕсли;

                        // заготовим "пустые" строки в таблице для данных сотрудника
						Для НомСтроки = 1 По 12 Цикл
							СтрокаКарточки = Карточка.ПолучитьЗначение(НомСтроки);
							ДоходыВычетыНалогиСотрудников.УстановитьЗначение(НомерСтрокиСотрудника + НомСтроки,1,КодСотраВтаблице+глДополнитьСтроку(Сч,2));
							Для НомКолонки = 1 по ДоходыВычетыНалогиСотрудников.КоличествоКолонок() Цикл
								Значение = СтрокаКарточки.ПолучитьЗначение(НомКолонки);
								ДоходыВычетыНалогиСотрудников.УстановитьЗначение(НомерСтрокиСотрудника + НомСтроки, НомКолонки, Значение);
							КонецЦикла;
						КонецЦикла;
						
						КоличествоПолейКарточки = Карточка.РазмерСписка();
						ДопДанныеФизЛица.НоваяСтрока();
						ДопДанныеФизЛица.КодСотраВтаблице = КодСотраВтаблице;
						ДопДанныеФизЛицаСписок = СоздатьОбъект("СписокЗначений");
						
						ДопДанныеФизЛицаСписок.ДобавитьЗначение(?(ТипЗначенияСтр(Карточка.ПолучитьЗначение(КоличествоПолейКарточки)) = "СписокЗначений","",Карточка.ПолучитьЗначение(КоличествоПолейКарточки)));
						ДопДанныеФизЛицаСписок.ДобавитьЗначение(?(ТипЗначенияСтр(Карточка.ПолучитьЗначение(КоличествоПолейКарточки-1)) = "СписокЗначений","",Карточка.ПолучитьЗначение(КоличествоПолейКарточки-1)));
						ДопДанныеФизЛицаСписок.ДобавитьЗначение(?(ТипЗначенияСтр(Карточка.ПолучитьЗначение(КоличествоПолейКарточки-2)) = "СписокЗначений","",Карточка.ПолучитьЗначение(КоличествоПолейКарточки-2)));
						ДопДанныеФизЛицаСписок.ДобавитьЗначение(?(ТипЗначенияСтр(Карточка.ПолучитьЗначение(КоличествоПолейКарточки-3)) = "СписокЗначений","",Карточка.ПолучитьЗначение(КоличествоПолейКарточки-3)));
						ДопДанныеФизЛицаСписок.ДобавитьЗначение(?(ТипЗначенияСтр(Карточка.ПолучитьЗначение(КоличествоПолейКарточки-4)) = "СписокЗначений","",Карточка.ПолучитьЗначение(КоличествоПолейКарточки-4)));
						ДопДанныеФизЛицаСписок.ДобавитьЗначение(?(ТипЗначенияСтр(Карточка.ПолучитьЗначение(КоличествоПолейКарточки-5)) = "СписокЗначений","",Карточка.ПолучитьЗначение(КоличествоПолейКарточки-5)));
						ДопДанныеФизЛица.ДопДанные = ДопДанныеФизЛицаСписок;
                КонецЕсли;
        КонецЦикла;

        Если КонецПериодаОсмотра > КонецРассчитанногопериодаБИ() Тогда
                КонецПериодаОсмотра = КонецРассчитанногопериодаБИ();
                Если КонецПериодаОсмотра < НачалоГода Тогда
                    Возврат 0;
                КонецЕсли;
        КонецЕсли;
        
		Если СобиратьРучныеКорректировки = 0 Тогда 
			// Заполнение по бухгалтерским итогам
			// запрос к ж.р. по налогам с ФОТ - собираем суммы уже начисленного налога
			глСтатусСтрока(Форма,"Подготовка данных по суммам уже начисленного ЕСН");
			
			ЗапросПоЕСН = СоздатьОбъект("ТаблицаЗначений");
			ЗапросПоЕСН.НоваяКолонка("Объект"); // сотрудник
			ЗапросПоЕСН.НоваяКолонка("Регистрация"); // конец месяца начисления
			ЗапросПоЕСН.НоваяКолонка("ВР"); // налог
			ЗапросПоЕСН.НоваяКолонка("РезультатВР"); // сумма налога, относящаяся к данному виду начисления
			
			БухИтЕСН = СоздатьОбъект("БухгалтерскиеИтоги");
			БухИтЕСН.ИспользоватьСубконто();
			БухИтЕСН.ИспользоватьСубконто();
			БухИтЕСН.ВыполнитьЗапрос(НачалоГода,КонецПериодаОсмотра, "69.1,69.2.1,69.2.2,69.2.3,69.3.1,69.3.2",,, 2, "Месяц");
			
			ПорядокИсчисленияЕСН = Константа.ПорядокИсчисленияЕСН.Получить(КонецПериодаОсмотра);
			
			ВидНалога_ЕСН = глПолучитьНалог("ЕСН_ФБ");
			ВидНалога_ФСС = глПолучитьНалог("ФСС");
			ВидНалога_ФФОМС = глПолучитьНалог("ФФОМС");
			ВидНалога_ТФОМС = глПолучитьНалог("ТФОМС");
			ВидНалога_ПФР_страх = глПолучитьНалог("ПФР_страх");
			ВидНалога_ПФР_нак = глПолучитьНалог("ПФР_нак");
			
			БухИтЕСН.ВыбратьПериоды();
			Пока БухИтЕСН.ПолучитьПериод() = 1 Цикл
				Для Сч = 1 по ВсегоСотров Цикл
					Сотрудник = Сотрудники.ПолучитьЗначение(Сч);
					
					КодСотра=Сотрудник.Код;
					ИмяСотра=Сотрудник.Наименование;
					Если ПустоеЗначение(""+КодСотра+ИмяСотра)=1 Тогда
						Продолжить
					КонецЕсли;
					КодСотраВтаблице=глПолучитьУникальныйКодСотрудника(КодСотра);
					
					Если БухИтЕСН.ПолучитьСчет(, СчетПоКоду("69.1")) = 1 Тогда
						Если БухИтЕСН.ПолучитьСубконто(2,, Сотрудник) = 1 Тогда
							Если БухИтЕСН.ПолучитьСубконто(1,, Перечисление.ВидыПлатежейВФонды.Взносы) = 1 Тогда
								ЗапросПоЕСН.НоваяСтрока();
								ЗапросПоЕСН.Объект = КодСотраВтаблице;
								ЗапросПоЕСН.Регистрация = БухИтЕСН.КонДата;
								ЗапросПоЕСН.ВР = ВидНалога_ФСС;
								ЗапросПоЕСН.РезультатВР = БухИтЕСН.КО();
							КонецЕсли;
						КонецЕсли;
					КонецЕсли;
					
					Если БухИтЕСН.ПолучитьСчет(, СчетПоКоду("69.2.1")) = 1 Тогда
						Если БухИтЕСН.ПолучитьСубконто(2,, Сотрудник) = 1 Тогда
							Если БухИтЕСН.ПолучитьСубконто(1,, Перечисление.ВидыПлатежейВБюджет.Налог) = 1 Тогда
								ЗапросПоЕСН.НоваяСтрока();
								ЗапросПоЕСН.Объект = КодСотраВтаблице;
								ЗапросПоЕСН.Регистрация = БухИтЕСН.КонДата;
								ЗапросПоЕСН.ВР = ВидНалога_ЕСН;
								ЗапросПоЕСН.РезультатВР = БухИтЕСН.КО();
							КонецЕсли;
						КонецЕсли;
					КонецЕсли;
					
					Если БухИтЕСН.ПолучитьСчет(, СчетПоКоду("69.2.2")) = 1 Тогда
						Если БухИтЕСН.ПолучитьСубконто(2,, Сотрудник) = 1 Тогда
							Если БухИтЕСН.ПолучитьСубконто(1,, Перечисление.ВидыПлатежейВБюджет.Налог) = 1 Тогда
								ЗапросПоЕСН.НоваяСтрока();
								ЗапросПоЕСН.Объект = КодСотраВтаблице;
								ЗапросПоЕСН.Регистрация = БухИтЕСН.КонДата;
								ЗапросПоЕСН.ВР = ВидНалога_ПФР_страх;
								ЗапросПоЕСН.РезультатВР = БухИтЕСН.КО();
							КонецЕсли;
						КонецЕсли;
					КонецЕсли;
					
					Если БухИтЕСН.ПолучитьСчет(, СчетПоКоду("69.2.3")) = 1 Тогда
						Если БухИтЕСН.ПолучитьСубконто(2,, Сотрудник) = 1 Тогда
							Если БухИтЕСН.ПолучитьСубконто(1,, Перечисление.ВидыПлатежейВБюджет.Налог) = 1 Тогда
								ЗапросПоЕСН.НоваяСтрока();
								ЗапросПоЕСН.Объект = КодСотраВтаблице;
								ЗапросПоЕСН.Регистрация = БухИтЕСН.КонДата;
								ЗапросПоЕСН.ВР = ВидНалога_ПФР_нак;
								ЗапросПоЕСН.РезультатВР = БухИтЕСН.КО();
							КонецЕсли;
						КонецЕсли;
					КонецЕсли;
					
					Если БухИтЕСН.ПолучитьСчет(, СчетПоКоду("69.3.1")) = 1 Тогда
						Если БухИтЕСН.ПолучитьСубконто(2,, Сотрудник) = 1 Тогда
							Если БухИтЕСН.ПолучитьСубконто(1,, Перечисление.ВидыПлатежейВБюджет.Налог) = 1 Тогда
								ЗапросПоЕСН.НоваяСтрока();
								ЗапросПоЕСН.Объект = КодСотраВтаблице;
								ЗапросПоЕСН.Регистрация = БухИтЕСН.КонДата;
								ЗапросПоЕСН.ВР = ВидНалога_ФФОМС;
								ЗапросПоЕСН.РезультатВР = БухИтЕСН.КО();
							КонецЕсли;
						КонецЕсли;
					КонецЕсли;
					
					Если БухИтЕСН.ПолучитьСчет(, СчетПоКоду("69.3.2")) = 1 Тогда
						Если БухИтЕСН.ПолучитьСубконто(2,, Сотрудник) = 1 Тогда
							Если БухИтЕСН.ПолучитьСубконто(1,, Перечисление.ВидыПлатежейВБюджет.Налог) = 1 Тогда
								ЗапросПоЕСН.НоваяСтрока();
								ЗапросПоЕСН.Объект = КодСотраВтаблице;
								ЗапросПоЕСН.Регистрация = БухИтЕСН.КонДата;
								ЗапросПоЕСН.ВР = ВидНалога_ТФОМС;
								ЗапросПоЕСН.РезультатВР = БухИтЕСН.КО();
							КонецЕсли;
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;
			КонецЦикла;
			
			ЗапросПоЕСН.Свернуть("Объект,Регистрация,ВР", "РезультатВР");
			СписокКолонок = СоздатьОбъект("СписокЗначений");
			
			БухИтДФЛ = СоздатьОбъект("БухгалтерскиеИтоги");
			БухИтДФЛ.Опции(1, 1);
			БухИтДФЛ.ИспользоватьСубконто(ВидыСубконто.Сотрудники);
			БухИтДФЛ.ИспользоватьСубконто(ВидыСубконто.ВидыНачисленийВыплат);
			БухИтДФЛ.ВыполнитьЗапрос(НачалоГода,КонецПериодаОсмотра, "ДФЛ.1,ДФЛ.2",,, 2, "Месяц");
			
			БухИт70 = СоздатьОбъект("БухгалтерскиеИтоги"); // для отбора корреспонденций 70-ого счета
			БухИт70.ВключатьСубсчета(, -1);
			БухИт70.ИспользоватьСубконто(ВидыСубконто.Сотрудники);
			БухИт70.ИспользоватьСубконто(ВидыСубконто.ВидыНачисленийВыплат);
			БухИт70.ИспользоватьКорСубконто();
			БухИт70.ВыполнитьЗапрос(НачалоГода,КонецПериодаОсмотра, "70",,, 2, "Месяц");
			
			Сч84 = СчетПоКоду("84");
			Сч99 = СчетПоКоду("99");
			Сч69_1 = СчетПоКоду("69.1");
			СчДФЛ_2 = СчетПоКоду("ДФЛ.2"); 
			
		КонецЕсли;

        // перебираем сотрудников
        Для СчСотров = 1 По ВсегоСотров Цикл

                Сотрудник=Сотрудники.ПолучитьЗначение(СчСотров);

                КодСотра=Сотрудник.Код;
                ИмяСотра=Сотрудник.Наименование;
                Если ПустоеЗначение(""+КодСотра+ИмяСотра)=1 Тогда
                        Продолжить
                КонецЕсли;

                КодСотраВтаблице=глПолучитьУникальныйКодСотрудника(КодСотра);

				Если СобиратьРучныеКорректировки = 0 Тогда 
					НалогиПоРегистрации=0;
					СписокКолонок.УдалитьВсе();
					СписокКолонок.Установить("Объект", КодСотраВтаблице);
					СотрЗапросПоЕСН = глОтобратьСтрокиТаблицы(ЗапросПоЕСН, СписокКолонок);
					Если СотрЗапросПоЕСН.КоличествоСтрок() > 0 Тогда
						НалогиПоРегистрации=1;
					КонецЕсли;
				КонецЕсли;
			
                НовыйПроцент = Окр(СчСотров/ВсегоСотров*100);

                Если СчСотров < ВсегоСотров Тогда
                        глСтатусСтрока(Форма,"Обрабатываются доходы"+?(ВсегоСотров=1,""," ("+НовыйПроцент+"%)")+": "+ИмяСотра);
                КонецЕсли;

                НомерСтрокиСотрудника = 0;
                Если ДоходыВычетыНалогиСотрудников.НайтиЗначение(КодСотраВтаблице+"01", НомерСтрокиСотрудника, 1) = 0 Тогда
                    Продолжить;

                Иначе
                        НомерСтрокиСотрудника = НомерСтрокиСотрудника - 1;
                КонецЕсли;

				Если СобиратьРучныеКорректировки = 0 Тогда 
					// Соберем доходы из бухгалтерских итогов.
					Если БухИтДФЛ.ПолучитьСубконто(ВидыСубконто.Сотрудники,, Сотрудник) = 1 Тогда
						БухИтДФЛ.ВыбратьПериоды();
						Пока БухИтДФЛ.ПолучитьПериод() = 1 Цикл
							Период = ДатаМесяц(БухИтДФЛ.КонДата);
							Для НомКолонки = 2 по ДоходыВычетыНалогиСотрудников.КоличествоКолонок() Цикл
								Значение = ДоходыВычетыНалогиСотрудников.ПолучитьЗначение(НомерСтрокиСотрудника+Период,НомКолонки);
								Если ТипЗначенияСтр(Значение) = "Число" Тогда
									Если Период > 1 Тогда
										Значение = ДоходыВычетыНалогиСотрудников.ПолучитьЗначение(НомерСтрокиСотрудника+Период,НомКолонки) - ДоходыВычетыНалогиСотрудников.ПолучитьЗначение(НомерСтрокиСотрудника+Период-1,НомКолонки);
										
									Иначе
										Значение = ДоходыВычетыНалогиСотрудников.ПолучитьЗначение(НомерСтрокиСотрудника+Период,НомКолонки);
									КонецЕсли;
									
									Для Сч1 = Период по 12 Цикл
										ДоходыВычетыНалогиСотрудников.УстановитьЗначение(НомерСтрокиСотрудника+Сч1,НомКолонки,ДоходыВычетыНалогиСотрудников.ПолучитьЗначение(НомерСтрокиСотрудника+Сч1,НомКолонки)-Значение);
									КонецЦикла;
								КонецЕсли;
							КонецЦикла;
							
							ДатаМесяца=БухИтДФЛ.КонДата;
							Инвалид = ?((Сотрудник.Инвалид.Получить(ДатаМесяца) = 1) или (Константа.ИнвалиднаяОрганизация.Получить(ДатаМесяца) = Да), 1, 0);
							
							БухИтДФЛ.ВыбратьСубконто(ВидыСубконто.ВидыНачисленийВыплат);
							Пока БухИтДФЛ.ПолучитьСубконто(ВидыСубконто.ВидыНачисленийВыплат) = 1 Цикл
								
								ВР = БухИтДФЛ.Субконто(2);
								СуммаРез = БухИтДФЛ.КО();
								ДатаДохода = БухИтДФЛ.КонДата;
								МесяцДохода = ДатаМесяц(ДатаДохода);
								
								НомерКолонки = 0;
								НомерКолонкиПФР = 0;
								
								СуммаИзПрибыли = 0;
								СуммаПриходящаясяНаЕНВД = 0;
								СуммаНеОбъекта = 0;
								РасходыНаСтрахование = 0;
								
								ОписаниеВР = СокрЛП(ВР.Наименование);
								
								Если СуммаРез <> 0 Тогда
									Если БухИт70.ПолучитьСубконто(1,, Сотрудник) = 1 Тогда
										Если БухИт70.ПолучитьСубконто(2,, ВР) = 1 Тогда
											Если БухИт70.ПолучитьПериод(, БухИтДФЛ.НачДата) = 1 Тогда
												БухИт70.ВыбратьКорСчета();
												Пока БухИт70.ПолучитьКорСчет() = 1 Цикл
													Если БухИт70.КорСчет.ПринадлежитГруппе(Сч84) = 1 Тогда
														СуммаИзПрибыли = СуммаИзПрибыли + БухИт70.КорКО();
														
													ИначеЕсли БухИт70.КорСчет.ПринадлежитГруппе(Сч99) = 1 Тогда
														СуммаИзПрибыли = СуммаИзПрибыли + БухИт70.КорКО();
														
													ИначеЕсли БухИт70.КорСчет = Сч69_1 Тогда
														РасходыНаСтрахование = РасходыНаСтрахование + БухИт70.КорКО();
													КонецЕсли;
												КонецЦикла;
											КонецЕсли;
										КонецЕсли;
									КонецЕсли;
									
									Если ИскатьЕНВД = 1 Тогда
										БухИтДФЛ.ВыбратьСчета();
										Пока БухИтДФЛ.ПолучитьСчет() = 1 Цикл
											Если БухИтДФЛ.Счет = СчДФЛ_2 Тогда
												СуммаПриходящаясяНаЕНВД = СуммаПриходящаясяНаЕНВД + БухИтДФЛ.КО();
											КонецЕсли;
										КонецЦикла;
									КонецЕсли;
									
									Если МесяцРасшифровки <> 0 Тогда // для расшифровки месяца по видам расчетов
										ДоходыВычетыНалогиСотрудников.НоваяСтрока();
										ДоходыВычетыНалогиСотрудников.УстановитьЗначение(ДоходыВычетыНалогиСотрудников.КоличествоСтрок(),1,ОписаниеВР);
									КонецЕсли;
									
									ОтразитьДоходВТаблицах(ДоходыВычетыНалогиСотрудников,НомерСтрокиСотрудника,МесяцРасшифровки,СобиратьРасшифровку,МесяцДохода,ОписаниеВР,10,СуммаРез);
									
									Если СуммаИзПрибыли <> 0 Тогда
										СуммаИзПрибылиНаЕНВД = ?(СуммаРез = 0, 0, СуммаПриходящаясяНаЕНВД / СуммаРез) * СуммаИзПрибыли;
										
									Иначе
										СуммаИзПрибылиНаЕНВД = 0;
									КонецЕсли;
									
									Если РасходыНаСтрахование <> 0 Тогда
										РасходыНаСтрахованиеНаЕНВД = ?(СуммаРез = 0, 0, СуммаПриходящаясяНаЕНВД / СуммаРез) * РасходыНаСтрахование;
										
									Иначе
										РасходыНаСтрахованиеНаЕНВД = 0;
									КонецЕсли;
									
									Если СуммаПриходящаясяНаЕНВД <> 0 Тогда
										ОтразитьДоходВТаблицах(ДоходыВычетыНалогиСотрудников,НомерСтрокиСотрудника,МесяцРасшифровки,СобиратьРасшифровку,МесяцДохода,ОписаниеВР,25,СуммаПриходящаясяНаЕНВД);
									КонецЕсли;
									
									Если (ВР.ЕСН_ФБ = 1) и (ВР.ПФР = 0) и (СуммаРез - СуммаПриходящаясяНаЕНВД <> 0) Тогда // иностранец
										ОтразитьДоходВТаблицах(ДоходыВычетыНалогиСотрудников,НомерСтрокиСотрудника,МесяцРасшифровки,СобиратьРасшифровку,МесяцДохода,ОписаниеВР,33,СуммаРез - СуммаПриходящаясяНаЕНВД);
									КонецЕсли;
									
									Если (ВР.ЕСН_ФБ = 0) и (ВР.ЕСН_ФСС = 0) и (ВР.ЕСН_ФОМС = 0) и (ВР.ПФР = 0) Тогда
										// не облагается ЕСН по ст. 238, расходы по страхованию и начисление при распределении прибыли
										Если (РасходыНаСтрахование - РасходыНаСтрахованиеНаЕНВД) <> 0 Тогда
											ОтразитьДоходВТаблицах(ДоходыВычетыНалогиСотрудников,НомерСтрокиСотрудника,МесяцРасшифровки,СобиратьРасшифровку,МесяцДохода,ОписаниеВР,9,РасходыНаСтрахование - РасходыНаСтрахованиеНаЕНВД);
										КонецЕсли;
										
										Если РасходыНаСтрахование <> 0 Тогда
											ОтразитьДоходВТаблицах(ДоходыВычетыНалогиСотрудников,НомерСтрокиСотрудника,МесяцРасшифровки,СобиратьРасшифровку,МесяцДохода,ОписаниеВР,31,РасходыНаСтрахование);
										КонецЕсли;
										
										Если (СуммаИзПрибыли - СуммаИзПрибылиНаЕНВД) <> 0 Тогда
											ОтразитьДоходВТаблицах(ДоходыВычетыНалогиСотрудников,НомерСтрокиСотрудника,МесяцРасшифровки,СобиратьРасшифровку,МесяцДохода,ОписаниеВР,13,СуммаИзПрибыли - СуммаИзПрибылиНаЕНВД);
										КонецЕсли;
										
										ПрочиеЛьготы = (СуммаРез - СуммаПриходящаясяНаЕНВД) - (СуммаИзПрибыли - СуммаИзПрибылиНаЕНВД) - (РасходыНаСтрахование - РасходыНаСтрахованиеНаЕНВД);
										Если ПрочиеЛьготы <> 0 Тогда
											ОтразитьДоходВТаблицах(ДоходыВычетыНалогиСотрудников,НомерСтрокиСотрудника,МесяцРасшифровки,СобиратьРасшифровку,МесяцДохода,ОписаниеВР,17,ПрочиеЛьготы);
										КонецЕсли;
										
										ПрочиеЛьготы = СуммаРез - СуммаИзПрибыли - РасходыНаСтрахование;
										Если ПрочиеЛьготы <> 0 Тогда
											ОтразитьДоходВТаблицах(ДоходыВычетыНалогиСотрудников,НомерСтрокиСотрудника,МесяцРасшифровки,СобиратьРасшифровку,МесяцДохода,ОписаниеВР,30,ПрочиеЛьготы);
										КонецЕсли;
										
									Иначе
										СуммаРез = СуммаРез - СуммаИзПрибыли - СуммаНеОбъекта - РасходыНаСтрахование;
										
										СуммаРезБезЕНВД = Макс(0,СуммаРез - СуммаПриходящаясяНаЕНВД);
										
										Если (ВР.ЕСН_ФБ <> 0) или (ВР.ЕСН_ФСС <> 0) или (ВР.ЕСН_ФОМС <> 0) или (ВР.ПФР <> 0) Тогда
											Если ВР.ЕСН_ФБ = 0 Тогда
												ОтразитьДоходВТаблицах(ДоходыВычетыНалогиСотрудников,НомерСтрокиСотрудника,МесяцРасшифровки,СобиратьРасшифровку,МесяцДохода,ОписаниеВР,38,СуммаРезБезЕНВД);
											КонецЕсли;
											
											Если ВР.ЕСН_ФСС = 0 Тогда
												Если (ВР.ЕСН_ФБ = 1) и (ВР.ЕСН_ФСС = 0) и (ВР.ЕСН_ФОМС = 1) и (СуммаРез - СуммаПриходящаясяНаЕНВД <> 0) Тогда
													// договор гражданско-правового характера или авторский
													ОтразитьДоходВТаблицах(ДоходыВычетыНалогиСотрудников,НомерСтрокиСотрудника,МесяцРасшифровки,СобиратьРасшифровку,МесяцДохода,ОписаниеВР,18,СуммаРезБезЕНВД);
													
												Иначе
													ОтразитьДоходВТаблицах(ДоходыВычетыНалогиСотрудников,НомерСтрокиСотрудника,МесяцРасшифровки,СобиратьРасшифровку,МесяцДохода,ОписаниеВР,39,СуммаРезБезЕНВД);
												КонецЕсли;
											КонецЕсли;
											
											Если ВР.ЕСН_ФОМС = 0 Тогда
												ОтразитьДоходВТаблицах(ДоходыВычетыНалогиСотрудников,НомерСтрокиСотрудника,МесяцРасшифровки,СобиратьРасшифровку,МесяцДохода,ОписаниеВР,40,СуммаРезБезЕНВД);
											КонецЕсли;
											
											Если ВР.ПФР = 0 Тогда
												ОтразитьДоходВТаблицах(ДоходыВычетыНалогиСотрудников,НомерСтрокиСотрудника,МесяцРасшифровки,СобиратьРасшифровку,МесяцДохода,ОписаниеВР,41,СуммаРез);
											КонецЕсли;
										КонецЕсли;
									КонецЕсли;
								КонецЕсли;
							КонецЦикла;
						КонецЦикла;
					КонецЕсли;
					
					
					
					// здесь собирается начисленный ранее ЕСН - по периоду регистрации
					Если (НалогиПоРегистрации = 1) и (МесяцРасшифровки = 0) Тогда
						СотрЗапросПоЕСН.ВыбратьСтроки();
						Пока СотрЗапросПоЕСН.ПолучитьСтроку()=1 Цикл
							Регистрация = СотрЗапросПоЕСН.Регистрация;
							МесяцДохода=ДатаМесяц(Регистрация);
							ВР = СотрЗапросПоЕСН.ВР;
							ОписаниеВР = СокрЛП(ВР.Наименование);
							СуммаРез=СотрЗапросПоЕСН.РезультатВР;
							НомерКолонки=0;
							Если (ВР=ВидНалога_ЕСН) Тогда
								НомерКолонки = 5
							ИначеЕсли (ВР=ВидНалога_ФФОМС)  Тогда
								НомерКолонки = 6
							ИначеЕсли (ВР=ВидНалога_ТФОМС)  Тогда
								НомерКолонки = 7
							ИначеЕсли (ВР=ВидНалога_ФСС)  Тогда
								НомерКолонки = 8
							ИначеЕсли (ВР=ВидНалога_ПФР_страх)  Тогда
								НомерКолонки = 21
							ИначеЕсли (ВР=ВидНалога_ПФР_нак)  Тогда
								НомерКолонки = 22
							КонецЕсли;
							
							// занесем налоги в таблицу по сотруднику
							Если НомерКолонки > 0 Тогда
								ОтразитьДоходВТаблицах(ДоходыВычетыНалогиСотрудников,НомерСтрокиСотрудника,МесяцРасшифровки,СобиратьРасшифровку,МесяцДохода,ОписаниеВР,НомерКолонки,СуммаРез);
							КонецЕсли;
						КонецЦикла;  // обхода по месяцам
					КонецЕсли;
				КонецЕсли;

                Если МесяцРасшифровки <> 0 Тогда // для расшифровки месяца по видам расчетов - больше информации не требуется
                        Продолжить;
                КонецЕсли;

                БылоВПрошлом = 0;
                БылоВПрошломПФР = 0;

                Для Сч = 1 По 12 Цикл
                        // рассчитаем "скидки" по доходам
                        ДоходыВычетыНалогиСотрудников.УстановитьЗначение(НомерСтрокиСотрудника+Сч,14,ДоходыВычетыНалогиСотрудников.ПолучитьЗначение(НомерСтрокиСотрудника+Сч,14));
                        ДоходыВычетыНалогиСотрудников.УстановитьЗначение(НомерСтрокиСотрудника+Сч,15,ДоходыВычетыНалогиСотрудников.ПолучитьЗначение(НомерСтрокиСотрудника+Сч,15));
                        ДоходыВычетыНалогиСотрудников.УстановитьЗначение(НомерСтрокиСотрудника+Сч,16,ДоходыВычетыНалогиСотрудников.ПолучитьЗначение(НомерСтрокиСотрудника+Сч,16));
                        СтанетВТекущем = Макс(ДоходыВычетыНалогиСотрудников.ПолучитьЗначение(НомерСтрокиСотрудника+Сч,12)-БылоВПрошлом,0);
                        БылоВПрошлом = ДоходыВычетыНалогиСотрудников.ПолучитьЗначение(НомерСтрокиСотрудника+Сч,12);
                        ДоходыВычетыНалогиСотрудников.УстановитьЗначение(НомерСтрокиСотрудника+Сч,12,?(Сч=1,0,ДоходыВычетыНалогиСотрудников.ПолучитьЗначение(НомерСтрокиСотрудника+Сч-1,12))+СтанетВТекущем);
                        // и отдельно для ПФР
                        ДоходыВычетыНалогиСотрудников.УстановитьЗначение(НомерСтрокиСотрудника+Сч,27,ДоходыВычетыНалогиСотрудников.ПолучитьЗначение(НомерСтрокиСотрудника+Сч,27));
                        ДоходыВычетыНалогиСотрудников.УстановитьЗначение(НомерСтрокиСотрудника+Сч,28,ДоходыВычетыНалогиСотрудников.ПолучитьЗначение(НомерСтрокиСотрудника+Сч,28));
                        ДоходыВычетыНалогиСотрудников.УстановитьЗначение(НомерСтрокиСотрудника+Сч,29,ДоходыВычетыНалогиСотрудников.ПолучитьЗначение(НомерСтрокиСотрудника+Сч,29));

                        СтанетВТекущем = Макс(ДоходыВычетыНалогиСотрудников.ПолучитьЗначение(НомерСтрокиСотрудника+Сч,26)-БылоВПрошломПФР,0);
                        БылоВПрошломПФР = ДоходыВычетыНалогиСотрудников.ПолучитьЗначение(НомерСтрокиСотрудника+Сч,26);
                        ДоходыВычетыНалогиСотрудников.УстановитьЗначение(НомерСтрокиСотрудника+Сч,26,?(Сч=1,0,ДоходыВычетыНалогиСотрудников.ПолучитьЗначение(НомерСтрокиСотрудника+Сч-1,26))+СтанетВТекущем);
                КонецЦикла;

                НалоговаяБазаПФР = 0;
                НалоговаяБазаФБ = 0;
                НалоговаяБазаОМС = 0;
                НалоговаяБазаФСС = 0;
                БазаВычетаПоЕСН = 0;

                НалоговаяБазаФБИностранца = 0;
                НалоговаяБазаФБИностранцаИнвалида = 0;
                НалоговаяБазаФдБИностранцаПредыдущегоМесяца = 0;
                НалоговаяБазаФБИностранцаИнвалидаПредыдущегоМесяца = 0;

                ЛьготаИнвалидуФдБ = 0;
                ЛьготаИнвалидуОМС = 0;
                ЛьготаИнвалидуФСС = 0;

                НалоговаяБазаИнвалидаПредыдущегоМесяцаФдБ = 0;
                НалоговаяБазаИнвалидаПредыдущегоМесяцаОМС = 0;
                НалоговаяБазаИнвалидаПредыдущегоМесяцаФСС = 0;

                НалоговаяБазаПФРПредыдущегоМесяца = 0;
                НалоговаяБазаФдБПредыдущегоМесяца = 0;
                НалоговаяБазаОМСПредыдущегоМесяца = 0;
                НалоговаяБазаФССПредыдущегоМесяца = 0;
                БазаВычетаПоЕСНПредыдущегоМесяца = 0;

                СтраховаяЧастьПредыдущегоМесяца = 0;
                НакопительнаяЧастьПредыдущегоМесяца = 0;
                СтраховаяЧастьВычета = 0;
                НакопительнаяЧастьВычета = 0;

                Для Сч = 1 По 12 Цикл  // рассчитаем налоговую базу

                    	НалоговаяБаза =     			 ДоходыВычетыНалогиСотрудников.ПолучитьЗначение(НомерСтрокиСотрудника+Сч,10)    // начислено всего
                                                        -ДоходыВычетыНалогиСотрудников.ПолучитьЗначение(НомерСтрокиСотрудника+Сч,9)     // расходы за счет ФСС
                                                        -ДоходыВычетыНалогиСотрудников.ПолучитьЗначение(НомерСтрокиСотрудника+Сч,11)    // довольствие военнослужащих
                                                        -ДоходыВычетыНалогиСотрудников.ПолучитьЗначение(НомерСтрокиСотрудника+Сч,12)    // натуроплата сельхозпродуктами
                                                        -ДоходыВычетыНалогиСотрудников.ПолучитьЗначение(НомерСтрокиСотрудника+Сч,13)    // начислено за счет чистой прибыли
                                                        -ДоходыВычетыНалогиСотрудников.ПолучитьЗначение(НомерСтрокиСотрудника+Сч,14)    // скидка по матпомощи
                                                        -ДоходыВычетыНалогиСотрудников.ПолучитьЗначение(НомерСтрокиСотрудника+Сч,15)    // скидка по медикаментам
                                                        -ДоходыВычетыНалогиСотрудников.ПолучитьЗначение(НомерСтрокиСотрудника+Сч,16)    // скидка на выплаты за счет профвзнсов
                                                        -ДоходыВычетыНалогиСотрудников.ПолучитьЗначение(НомерСтрокиСотрудника+Сч,17)    // прочие необлагаемые
                                                        -ДоходыВычетыНалогиСотрудников.ПолучитьЗначение(НомерСтрокиСотрудника+Сч,25)    // попало под ЕНВД
                                                        -ДоходыВычетыНалогиСотрудников.ПолучитьЗначение(НомерСтрокиСотрудника+Сч,24)    // Лицензионные выплаты
                                                        ;

                        БазаВычетаПоЕСН =				 ДоходыВычетыНалогиСотрудников.ПолучитьЗначение(НомерСтрокиСотрудника+Сч,10)    // начислено всего
                                                        -ДоходыВычетыНалогиСотрудников.ПолучитьЗначение(НомерСтрокиСотрудника+Сч,9)     // расходы за счет ФСС
                                                        -ДоходыВычетыНалогиСотрудников.ПолучитьЗначение(НомерСтрокиСотрудника+Сч,11)    // довольствие военнослужащих
                                                        -ДоходыВычетыНалогиСотрудников.ПолучитьЗначение(НомерСтрокиСотрудника+Сч,12)    // натуроплата сельхозпродуктами
                                                        -ДоходыВычетыНалогиСотрудников.ПолучитьЗначение(НомерСтрокиСотрудника+Сч,13)    // начислено за счет чистой прибыли
                                                        -ДоходыВычетыНалогиСотрудников.ПолучитьЗначение(НомерСтрокиСотрудника+Сч,14)    // скидка по матпомощи
                                                        -ДоходыВычетыНалогиСотрудников.ПолучитьЗначение(НомерСтрокиСотрудника+Сч,15)    // скидка по медикаментам
                                                        -ДоходыВычетыНалогиСотрудников.ПолучитьЗначение(НомерСтрокиСотрудника+Сч,16)    // скидка на выплаты за счет профвзнсов
                                                        -ДоходыВычетыНалогиСотрудников.ПолучитьЗначение(НомерСтрокиСотрудника+Сч,17)    // прочие необлагаемые
                                                        -ДоходыВычетыНалогиСотрудников.ПолучитьЗначение(НомерСтрокиСотрудника+Сч,25)    // попало под ЕНВД
                                                        ;

                    	БазаВзносов =       			 ДоходыВычетыНалогиСотрудников.ПолучитьЗначение(НомерСтрокиСотрудника+Сч,10)    // начислено всего
                                                        -ДоходыВычетыНалогиСотрудников.ПолучитьЗначение(НомерСтрокиСотрудника+Сч,31)    // расходы за счет ФСС
                                                        -ДоходыВычетыНалогиСотрудников.ПолучитьЗначение(НомерСтрокиСотрудника+Сч,11)    // довольствие военнослужащих
                                                        -ДоходыВычетыНалогиСотрудников.ПолучитьЗначение(НомерСтрокиСотрудника+Сч,26)    // натуроплата сельхозпродуктами
                                                        -ДоходыВычетыНалогиСотрудников.ПолучитьЗначение(НомерСтрокиСотрудника+Сч,13)    // начислено за счет чистой прибыли
                                                        -ДоходыВычетыНалогиСотрудников.ПолучитьЗначение(НомерСтрокиСотрудника+Сч,27)    // скидка по матпомощи
                                                        -ДоходыВычетыНалогиСотрудников.ПолучитьЗначение(НомерСтрокиСотрудника+Сч,28)    // скидка по медикаментам
                                                        -ДоходыВычетыНалогиСотрудников.ПолучитьЗначение(НомерСтрокиСотрудника+Сч,29)    // скидка на выплаты за счет профвзнсов
                                                        -ДоходыВычетыНалогиСотрудников.ПолучитьЗначение(НомерСтрокиСотрудника+Сч,30)    // прочие необлагаемые
														-ДоходыВычетыНалогиСотрудников.ПолучитьЗначение(НомерСтрокиСотрудника+Сч,41)	// не облагается всеми начисляемыми взносами на ОПС
														;

                        НеВзиматьФдБ =  ДоходыВычетыНалогиСотрудников.ПолучитьЗначение(НомерСтрокиСотрудника+Сч, 38);
                        НеВзиматьФСС =  ДоходыВычетыНалогиСотрудников.ПолучитьЗначение(НомерСтрокиСотрудника+Сч, 39);
                        НеВзиматьФОМС = ДоходыВычетыНалогиСотрудников.ПолучитьЗначение(НомерСтрокиСотрудника+Сч, 40);
                        
                        // Доля страховых взносов, которая является налоговым вычетом
                        СтраховаяЧасть = ДоходыВычетыНалогиСотрудников.ПолучитьЗначение(НомерСтрокиСотрудника+Сч, 21);
                        НакопительнаяЧасть = ДоходыВычетыНалогиСотрудников.ПолучитьЗначение(НомерСтрокиСотрудника+Сч, 22);
                        К = ?((БазаВзносов - НалоговаяБазаПФРПредыдущегоМесяца) <> 0, (БазаВычетаПоЕСН - БазаВычетаПоЕСНПредыдущегоМесяца) / (БазаВзносов - НалоговаяБазаПФРПредыдущегоМесяца), 1);
                        СтраховаяЧастьВычета = Окр(СтраховаяЧастьВычета + К * (СтраховаяЧасть - СтраховаяЧастьПредыдущегоМесяца),2,1);
                        НакопительнаяЧастьВычета = Окр(НакопительнаяЧастьВычета + К * (НакопительнаяЧасть - НакопительнаяЧастьПредыдущегоМесяца),2,1);
                        ДоходыВычетыНалогиСотрудников.УстановитьЗначение(НомерСтрокиСотрудника+Сч,42,СтраховаяЧастьВычета);
                        ДоходыВычетыНалогиСотрудников.УстановитьЗначение(НомерСтрокиСотрудника+Сч,43,НакопительнаяЧастьВычета);
                        СтраховаяЧастьПредыдущегоМесяца = СтраховаяЧасть;
                        НакопительнаяЧастьПредыдущегоМесяца = НакопительнаяЧасть;
                        БазаВычетаПоЕСНПредыдущегоМесяца = БазаВычетаПоЕСН;

                        // база взносов в ПФР                        
                        НалоговаяБазаПФР = НалоговаяБазаПФР + БазаВзносов - НалоговаяБазаПФРПредыдущегоМесяца;
                        ДоходыВычетыНалогиСотрудников.УстановитьЗначение(НомерСтрокиСотрудника+Сч,23,НалоговаяБазаПФР); // база страховых взносов в ПФР
                        НалоговаяБазаПФРПредыдущегоМесяца = БазаВзносов;

                        // для каждой части налога ЕСН "инвалидная" льгота своя, т.к. база своя, посчитаем эти базы:
                        БазаЛьготыФдБ = НалоговаяБаза - НеВзиматьФдБ - ДоходыВычетыНалогиСотрудников.ПолучитьЗначение(НомерСтрокиСотрудника+Сч,19); // ЕСНвЧастиПФР // дополнительно вычли ден. содержание прокуроров
                        БазаЛьготыОМС = НалоговаяБаза - НеВзиматьФОМС;                                                                               // ЕСНвЧастиОМС
                        БазаЛьготыФСС = НалоговаяБаза - НеВзиматьФСС - ДоходыВычетыНалогиСотрудников.ПолучитьЗначение(НомерСтрокиСотрудника+Сч,18); // ЕСНвЧастиФСС // дополнительно вычли договора подряда и авторские выплаты

                        // "инвалидную" льготу будем предоставлять только за те месяцы, когда предприятие
                        // имеет на нее право по зарплате данного работника
                        ДатаМесяца = КонМесяца(Дата(ДатаГод(ДатаАктуальности), Сч, 1));
                        Инвалид = ?((Сотрудник.Инвалид.Получить(ДатаМесяца) = 1) или (Константа.ИнвалиднаяОрганизация.Получить(ДатаМесяца) = Да), 1, 0);
                        Если Инвалид = 1 Тогда
                                ЛьготаИнвалидуФдБ = Мин(100000,ЛьготаИнвалидуФдБ+БазаЛьготыФдБ-НалоговаяБазаИнвалидаПредыдущегоМесяцаФдБ);
                                ЛьготаИнвалидуОМС = Мин(100000,ЛьготаИнвалидуОМС+БазаЛьготыОМС-НалоговаяБазаИнвалидаПредыдущегоМесяцаОМС);
                                ЛьготаИнвалидуФСС = Мин(100000,ЛьготаИнвалидуФСС+БазаЛьготыФСС-НалоговаяБазаИнвалидаПредыдущегоМесяцаФСС);
                        КонецЕсли;
                        ДоходыВычетыНалогиСотрудников.УстановитьЗначение(НомерСтрокиСотрудника+Сч,"ЛьготаИнвалидуФдБ",ЛьготаИнвалидуФдБ); //в 35 колонке помещаем самую полную льготу(ФБ), без вычета сод. прокуроров и договоров/авторких
                        ДоходыВычетыНалогиСотрудников.УстановитьЗначение(НомерСтрокиСотрудника+Сч,"ЛьготаИнвалидуОМС",ЛьготаИнвалидуОМС); //в 36 колонке помещаем самую полную льготу(ОМС), без вычета сод. прокуроров и договоров/авторких
                        ДоходыВычетыНалогиСотрудников.УстановитьЗначение(НомерСтрокиСотрудника+Сч,"ЛьготаИнвалидуФСС",ЛьготаИнвалидуФСС); //в 37 колонке помещаем самую полную льготу(ФСС), без вычета сод. прокуроров и договоров/авторких

                        ДоходыВычетыНалогиСотрудников.УстановитьЗначение(НомерСтрокиСотрудника+Сч,20,ЛьготаИнвалидуОМС); //в 20 колонке помещаем самую полную льготу(ОМС), без вычета сод. прокуроров и договоров/авторких

                        НалоговаяБазаИнвалидаПредыдущегоМесяцаФдБ = БазаЛьготыФдБ;
                        НалоговаяБазаИнвалидаПредыдущегоМесяцаОМС = БазаЛьготыОМС;
                        НалоговаяБазаИнвалидаПредыдущегоМесяцаФСС = БазаЛьготыФСС;

                        //базы предыдущего месяца:
                        НалоговаяБазаФдБПредыдущегоМесяца = БазаЛьготыФдБ - ЛьготаИнвалидуФдБ;
                        НалоговаяБазаФССПредыдущегоМесяца = БазаЛьготыФСС - ЛьготаИнвалидуФСС;
                        НалоговаяБазаОМСПредыдущегоМесяца = БазаЛьготыОМС - ЛьготаИнвалидуОМС;
                        НалоговаяБазаФдБИностранцаПредыдущегоМесяца = НалоговаяБазаФБИностранца;
                        НалоговаяБазаФБИностранцаИнвалидаПредыдущегоМесяца = НалоговаяБазаФБИностранцаИнвалида;

                КонецЦикла; // обход сотров по мес.

        КонецЦикла; // обхода сотров и физлиц

        Возврат 1

КонецФункции // глСобратьДанныеДляЕСН()

//******************************************************************************
Функция глПолучитьСтавкиЕСН(Налог, КонецГода, НомерШкалыВзносов = 0, СтавкиНалога = 0, ПределыДоходовЕСН = 0) Экспорт
	
	Результат = СоздатьОбъект("СписокЗначений");
	
	Для Сч = 1 по 10 Цикл
		Результат.ДобавитьЗначение(Сч, 0);
	КонецЦикла;	
	
	ИмяСтавки = "Процент";
	НомерСтавки = 1;
	
	Если НомерШкалыВзносов > 1 Тогда
	    ИмяСтавки = ИмяСтавки + Строка(НомерШкалыВзносов);
	КонецЕсли;
	
	Ставки = СоздатьОбъект("Справочник.СтавкиНалогов");
	Ставки.ИспользоватьВладельца(Налог);
	Ставки.ПорядокКодов();
	Ставки.ВыбратьЭлементы();
	Пока Ставки.ПолучитьЭлемент() = 1 Цикл
		Ставка = Ставки.ПолучитьАтрибут(ИмяСтавки).Получить(КонецГода);
		СуммаПредела = Ставки.Предел.Получить(КонецГода);
		
		Если СтавкиНалога = 1 Тогда
			Результат.УстановитьЗначение(НомерСтавки, Ставка);
			
		ИначеЕсли ПределыДоходовЕСН = 1 Тогда
		    Результат.УстановитьЗначение(НомерСтавки, СуммаПредела);
		КонецЕсли;
		
		НомерСтавки = НомерСтавки + 1;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции // глПолучитьСтавкиЕСН()

//******************************************************************************
// глЗаполнитьШапкуИндивидуальнойКарточки(ФизЛицо,Год,Буфер)
//
// Параметры:
//		ФизЛицо - эл-т спр Сотрудники, сотрудник (одновременно явл. и физлицом)
//		Год - год, за который заполняется карточка
//      Буферр - сюда сложим значения ячеек таблицы
//		ЗаполнитьДанныеОбИнвалидности - если значение 1, то заполняются данные из справки МЭСК
//		ЭтоСвод - если значение 1, то заполняется шапка свода
//
// Описание:
//		заполняет шапку печатной формы индивидуальной карточки, как в отчете так и в форме для ввода данных
//
Процедура глЗаполнитьШапкуИндивидуальнойКарточки(ФизЛицо,Год,Буфер,ЗаполнитьДанныеОбИнвалидности = 1,ЭтоСвод = 0, ДопДанныеФизЛица)
	
	Перем Стр;
	П003 = "";
	П002 = "";
	П001 = "";
	ДатаДолжность = "";
	ДоговорНомер = "";
	Гражданство = "";
    
	Если ДопДанныеФизЛица.НайтиЗначение(глПолучитьУникальныйКодСотрудника(ФизЛицо.Код), Стр, 1) = 1 Тогда
		ДопДанныеФизЛица.ПолучитьСтрокуПоНомеру(Стр);		
		КоличествоПолей = ДопДанныеФизЛица.ДопДанные.РазмерСписка();
		П003 = ДопДанныеФизЛица.ДопДанные.ПолучитьЗначение(КоличествоПолей-5);
		П002 = ДопДанныеФизЛица.ДопДанные.ПолучитьЗначение(КоличествоПолей-4);
		П001 = ДопДанныеФизЛица.ДопДанные.ПолучитьЗначение(КоличествоПолей-3);
		ДатаДолжность =  ДопДанныеФизЛица.ДопДанные.ПолучитьЗначение(КоличествоПолей-2);
		ДоговорНомер =  ДопДанныеФизЛица.ДопДанные.ПолучитьЗначение(КоличествоПолей-1);
		Гражданство = ДопДанныеФизЛица.ДопДанные.ПолучитьЗначение(КоличествоПолей);
	КонецЕсли;
                                                                	
	Если ЭтоСвод = 0 Тогда
		
		КонецГода = КонГода(Дата(Год,12,15));
		
		Буфер.Установить("ИНН",ФизЛицо.ИНН);
		Если Год > 2001 Тогда
			Буфер.Установить("СтраховойНомер",ФизЛицо.СтраховойНомерПФР);
			Буфер.Установить("Пол",Лев(ФизЛицо.Пол,1));
		КонецЕсли;
		Буфер.Установить("Адрес",глПредставлениеАдреса(?(ПустоеЗначение(ФизЛицо.АдресФакт) = 0, ФизЛицо.АдресФакт, ФизЛицо.АдресПрописка)));
		Буфер.Установить("ДатаРождения",Формат(ФизЛицо.ДатаРождения,"ДДДММГГГГ"));
		Буфер.Установить("ФИО",ФизЛицо.Наименование);
		Буфер.Установить("Гражданство",?(ПустоеЗначение(Гражданство) = 1, ФизЛицо.Страна.Наименование, Гражданство));
		Буфер.Установить("ДокументСерия", ФизЛицо.ДокументСерия);
		Буфер.Установить("ДокументНомер", ФизЛицо.ДокументНомер);
		Если ЗаполнитьДанныеОбИнвалидности = 0 Тогда
			//Буфер.Установить("Документ", ФизЛицо.ВидДокумента); 
		Иначе
			Буфер.Установить("ДокументКемКогдаВыдан", СокрЛП(ФизЛицо.ДокументКемВыдан)+?(ПустоеЗначение(ФизЛицо.ДокументДатаВыдачи)=0,"; ","")+?(ПустоеЗначение(ФизЛицо.ДокументДатаВыдачи)=0,Формат(ФизЛицо.ДокументДатаВыдачи,"ДДДММГГГГ"),""));
		КонецЕсли;
	
		ДатаПриема = глДатаПриема(ФизЛицо);
		Приказы = СоздатьОбъект("Документ.ПриказОПриемеНаРаботу");
		Приказы.ВыбратьДокументы(ДатаПриема, ДатаПриема);
		Пока Приказы.ПолучитьДокумент() = 1 Цикл
			Если Приказы.Сотрудник = ФизЛицо Тогда
			    Прервать;
			КонецЕсли;    
		КонецЦикла;
		
		Если Приказы.Выбран() = 1 Тогда
		    НомерДог = Приказы.НомерДок;
			ДатаДог = Формат(Приказы.ДатаДок,"ДДДММГГГГ");
			ВидДог = "Трудовой";
			
		Иначе
			ДатаДог = "";
			НомерДог = "";
			ВидДог = ""; 
		КонецЕсли;
		
		Буфер.Установить("ДоговорНомер", ?(ПустоеЗначение(ДоговорНомер) = 1, ФизЛицо.Код, ДоговорНомер));
		Буфер.Установить("Должность", ФизЛицо.Должность);
		Буфер.Установить("ДатаДолжность",?(ПустоеЗначение(ДатаДолжность) = 1, Формат(глДатаПриема(ФизЛицо),"ДДДММГГГГ"), Формат(ДатаДолжность,"ДДДММГГГГ")));
		
		Если ЗаполнитьДанныеОбИнвалидности = 1 Тогда
			Буфер.ДобавитьЗначение(?(ПустоеЗначение(П001) = 1, "", П001),"П001");
			Буфер.ДобавитьЗначение(?(ПустоеЗначение(П001) = 1, "", П002),"П002");
			Буфер.ДобавитьЗначение(?(ПустоеЗначение(П001) = 1, "", П003),"П003");
		КонецЕсли;
		Если Год >= 2004 Тогда
			Буфер.ДобавитьЗначение(?(ПустоеЗначение(Гражданство) = 1, ФизЛицо.Страна.Наименование, Гражданство),"Гражданство");
		КонецЕсли;
		
	Иначе
		
		 Буфер.ДобавитьЗначение(Константа.ОфициальноеНазваниеОрганизации,"НаименованиеНалогоплательщика");		 		 
		 ИНН = Константа.ИННОрганизации
		 ;
		 Позиция = Найти(ИНН,"\");
		 Если Позиция > 0 Тогда
		 	ИНН = Лев(ИНН,Позиция-1);
		 Иначе
		 	ИНН = ИНН;
		 КонецЕсли;
		 КПП = Прав(Константа.ИННОрганизации,9);
		 Буфер.ДобавитьЗначение(ИНН,"ИНН");
		 Буфер.ДобавитьЗначение(КПП,"КПП");
		  		  
	КонецЕсли;
	                      	                       	
КонецПроцедуры // глЗаполнитьШапкуИндивидуальнойКарточки()

//	СформироватьТаблицуПоВР(ИмяЯчейки,ДоходыВычетыНалогиСотрудников,ТаблицаРасшифровокПоВР,ТекущаяСтрокаИтоговойТаблицы,ПлюсКолонка=0,МинусКолонка=0,ПлюсКолонка1=0,Разрядность=2)
//
//	Параметры: 
//  	Разрядность - кол-во знаков в колонке "Число", по умолчанию 2
//
//	Описание:
//      
Функция СформироватьТаблицуПоВР(ИмяЯчейки,ДоходыВычетыНалогиСотрудников,ТаблицаРасшифровокПоВР,ТекущаяСтрокаИтоговойТаблицы,ПлюсКолонка=0,МинусКолонка=0,ПлюсКолонка1=0,Разрядность=2)
	
	//Если ДоходыВычетыНалогиСотрудников.КоличествоКолонок() < 62 Тогда
	//	Возврат ТаблицаРасшифровокПоВР;
	//КонецЕсли;
	
	НомСтроки = 0;
	Длина = 0;
	ДоходыВычетыНалогиСотрудников.ПолучитьПараметрыКолонки(1,, Длина);
	Если Длина = 100 Тогда
	    Возврат ТаблицаРасшифровокПоВР;
	КонецЕсли;
	
	//получим таблицу по ВР за этот месяц:
	ПоВР=ДоходыВычетыНалогиСотрудников.ПолучитьЗначение(ТекущаяСтрокаИтоговойТаблицы, "ТаблицаРасшифровокПоВР");
	ПоВР.Свернуть("1","2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31");
	
	//таблица расшифровки конкретной ячейки ВР-Сумма (для каждой ячейки заполняется заново)
	ПоВРЯчейки=СоздатьОбъект("ТаблицаЗначений");
	ПоВРЯчейки.НоваяКолонка(,"Строка",100); //здесь ВР
	ПоВРЯчейки.НоваяКолонка(,"Число",15,Разрядность); //здесь сумма по этому ВР
	
	ПлюсСумма = 0;
	ПлюсСумма1 = 0;
	МинусСумма	= 0;
	//начало формирования таблички по ВР для этой ячейки:
	//сначала сформируем табличку ВР-Сумма:
	Для СчВР = 1 По ПоВР.КоличествоСтрок() Цикл
		Если ПлюсКолонка<>0 Тогда
			ПлюсСумма = ПоВР.ПолучитьЗначение(СчВР,ПлюсКолонка);
		КонецЕсли;
		Если ПлюсКолонка1<>0 Тогда
			ПлюсСумма1 = ПоВР.ПолучитьЗначение(СчВР,ПлюсКолонка1);
		КонецЕсли;
		Если МинусКолонка<>0 Тогда
			МинусСумма = ПоВР.ПолучитьЗначение(СчВР,МинусКолонка);
		КонецЕсли;
		Если (ПлюсСумма<>0) или (ПлюсСумма1<>0) или (МинусСумма<>0) Тогда
			ПоВРЯчейки.НоваяСтрока();
			ПоВРЯчейки.УстановитьЗначение(ПоВРЯчейки.КоличествоСтрок(),1,ПоВР.ПолучитьЗначение(СчВР,1));
			ПоВРЯчейки.УстановитьЗначение(ПоВРЯчейки.КоличествоСтрок(),2,ПлюсСумма-МинусСумма+ПлюсСумма1);
		КонецЕсли;
	КонецЦикла;
	//теперь ее запишем:
	ТаблицаРасшифровокПоВР.НоваяСтрока();
	ТаблицаРасшифровокПоВР.УстановитьЗначение(ТаблицаРасшифровокПоВР.КоличествоСтрок(),1,ИмяЯчейки);
	ТаблицаРасшифровокПоВР.УстановитьЗначение(ТаблицаРасшифровокПоВР.КоличествоСтрок(),2,ПоВРЯчейки);
	//конец формирования таблички по ВР для этой ячейки
	Возврат ТаблицаРасшифровокПоВР;
	
КонецФункции // СформироватьТаблицуПоВР

//******************************************************************************
// РассчитатьЕСНилиВзносыВПФР(НалоговаяБаза,Ставки[],ИспользуетсяРегрессивнаяШкалаПоЕСН)
//
// Параметры:
//		НалоговаяБаза - число - база для исчисления ЕСН или взносов
//		Ставки[] - массив чисел - ставки
//		ИспользуетсяРегрессивнаяШкалаПоЕСН - число - флажок применения регрессивной шкалы
//		ПределыДоходовЕСН - массив чисел - пределы
//		РазмерСдвигаПредела - число - размер льготы для инвалидов
//		Трассировать = 1, если вызывается из модулей видов расчетов и возможно требует трассировку
//           ЧастьНалога = "ТФОМС","ФФОМС","ФСС","Фед. бюджет"
//		ДатаОконч = дата окончания действия вида расчета
//		ВсегоСтавок - количество ставок налога
//
// Возвращаемое значение:
//		число  
//
// Описание:
//		реализует исчисление налога (взноса) с учетом возможной регрессивности  
//
Функция глРассчитатьЕСНилиВзносыВПФР(НалоговаяБаза,Ставки[],ИспользуетсяРегрессивнаяШкалаПоЕСН, ПределыДоходовЕСН[], РазмерСдвигаПределов = 0, Трассировать = 0, ЧастьНалога = "", ДатаОконч = "..", ВсегоСтавок = 4)  Экспорт

	Перем ПределыСоСдвигом[10];      // те же пределы , но со сдвигом на сумму "инвалидного" заработка

	Если ИспользуетсяРегрессивнаяШкалаПоЕСН = Нет тогда // организация не имеет права на применение регрессивной шкалы ЕСН - см. п. 2 ст. 241 НК РФ
		
		ИсчисленоПоТекущийМесяц =  НалоговаяБаза*Ставки[1]/100;
		
		Если Трассировать = 1 Тогда
			глСообщениеТрассировки(глСообщенияТрассировки, "", 0, 0);
			глСообщениеТрассировки(глСообщенияТрассировки, "Регрессивная шкала ЕСН не используется, ставка ЕСН в части "+ЧастьНалога+" составила " + Ставки[1] + "%", 0, 0);
			глСообщениеТрассировки(глСообщенияТрассировки, "Данные нарастающим итогом с начала года по _П01:" ,0 , 1, ДатаОконч, "ДММММГГГГ");
			глСообщениеТрассировки(глСообщенияТрассировки, "Налоговая база:_П01; Исчислено налога:_П02", 0, 1, НалоговаяБаза, "Ч15.2", ИсчисленоПоТекущийМесяц, "Ч18.5");
		КонецЕсли;
		
		Возврат ИсчисленоПоТекущийМесяц;
		
	Иначе // расчет с использованием регрессивной шкалы
		
		// определим пределы с учетом сдвига
		Для Сч = 1 По ВсегоСтавок - 1 Цикл // (последний предел не надо менять, т.к. он бесконечность)
			ПределыСоСдвигом[Сч] = ПределыДоходовЕСН[Сч] - РазмерСдвигаПределов;
		КонецЦикла;
		ПределыСоСдвигом[ВсегоСтавок] = ПределыДоходовЕСН[ВсегоСтавок];
			
		Если Трассировать = 1 Тогда
			глСообщениеТрассировки(глСообщенияТрассировки, "", 0, 0);
			глСообщениеТрассировки(глСообщенияТрассировки, "Используется регрессивная шкала ЕСН", 0, 0);
			глСообщениеТрассировки(глСообщенияТрассировки, "Данные нарастающим итогом с начала года по _П01:" ,0 , 1, ДатаОконч, "ДММММГГГГ");
			глСообщениеТрассировки(глСообщенияТрассировки, "Налоговая база:_П01", 0, 1, НалоговаяБаза, "Ч15.2");
		КонецЕсли;
		
		ИсчисленоПоТекущийМесяц = 0; 
		Если НалоговаяБаза <> 0 Тогда 
			ОстатокНалоговойБазы = НалоговаяБаза;           
			Для сч = 1 по ВсегоСтавок Цикл
				Если НалоговаяБаза >= ПределыСоСдвигом[сч] тогда
					ИсчисленоПоТекущийМесяц = ИсчисленоПоТекущийМесяц + (ПределыСоСдвигом[сч] - ?(сч=1,0,ПределыСоСдвигом[сч-1]))*Ставки[сч]/100;
					Если НалоговаяБаза < ПределыСоСдвигом[сч+1] тогда
						ОстатокНалоговойБазы = ОстатокНалоговойБазы - ПределыСоСдвигом[сч];
						Если Трассировать = 1 Тогда
							глСообщениеТрассировки(глСообщенияТрассировки, "Налоговая база превысила " + Сч + "-й предел шкалы доходов (_П01 руб.)", 0, 1, ПределыСоСдвигом[сч],"Ч10.2");
							глСообщениеТрассировки(глСообщенияТрассировки, "Сумма ЕСН по " + Сч + "-ому пределу шкалы составила _П01 руб.; к остатку налоговой базы (_П02 руб.) будет применена ставка " + Ставки[сч+1] + "%", 0, 1, ИсчисленоПоТекущийМесяц, "Ч18.5", ОстатокНалоговойБазы,"Ч15.2");
						КонецЕсли;
						Прервать;                                                                                                    
					КонецЕсли;                                                    
				Иначе
					Если Трассировать = 1 Тогда
						глСообщениеТрассировки(глСообщенияТрассировки, "Налоговая база не превысила 1-го предела шкалы доходов (_П01 руб.), будет применена ставка ЕСН " + Ставки[1] + "%", 0, 1, ПределыСоСдвигом[сч], "Ч10.2");
					КонецЕсли;
					сч = сч - 1;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			ИсчисленоПоТекущийМесяц = ИсчисленоПоТекущийМесяц + ОстатокНалоговойБазы*Ставки[сч+1]/100;
		КонецЕсли;
		Если Трассировать = 1 Тогда
			Если ЧастьНалога = "Фед. фонд" Тогда
				глСообщениеТрассировки(глСообщенияТрассировки, "Исчислено налога в Фед. фонд (без сумм обязательных взносов):_П01", 0, -1, ИсчисленоПоТекущийМесяц, "Ч18.5");
			Иначе
				глСообщениеТрассировки(глСообщенияТрассировки, "Всего исчислено налога:_П01", 0, -1, ИсчисленоПоТекущийМесяц, "Ч18.5");
			КонецЕсли;
		КонецЕсли;

		Возврат ИсчисленоПоТекущийМесяц  
		
	КонецЕсли;
	
КонецФункции // РассчитатьЕСНилиВзносыВПФР()

//******************************************************************************
// глЗаполнитьИндивидуальнуюКарточкуПоЕСН2004(ФизЛицо,Год,РежимПечати,МесяцыИнвалидности[],ДоходыВычетыНалогиСотрудников,СтрокаИтоговойТаблицы,Карточка,Буфер, ПоследнийМесяц = 0)
//
// Параметры:
//		ФизЛицо - эл-т спр Сотрудники, сотрудник (одновременно явл. и физлицом)
//		Год - год, за который заполняется карточка
//		ДоходыВычетыНалогиСотрудников - таблица значений с доходами физлица
//      БуферРазделовСпр - сюда сложим значения ячеек таблицы только по справочникам
//      ТаблицаРасшифровокПоВР - таблица из двух колонок: 1-я- имя области карточки, 2-я- таблица сумм по ВР для этой области
//		ЭтоСвод - если значение 1, то заполняется шапка свода
//
// Описание:
//		заполняет печатную форму индивидуальной карточки, как в отчете так и в форме для ввода данных
//         
Процедура глЗаполнитьИндивидуальнуюКарточкуПоЕСН2004(ФизЛицо,Год,РежимПечати,МесяцыИнвалидности[],ДоходыВычетыНалогиСотрудников,СтрокаИтоговойТаблицы, Буфер, ПоследнийМесяц = 0,БуферРазделовСпр="",ТаблицаРасшифровокПоВР="", ЭтоСвод = 0,ДопДанныеФизЛица) Экспорт
	
	Перем ПределыДоходовЕСН[10];
	Перем СтавкиНалогаПФР[10];
	Перем СтавкиНалогаТФОМС[10];
	Перем СтавкиНалогаФФОМС[10];
	Перем СтавкиНалогаФСС[10];
	Перем СтавкиВзносаПФРСтраховаяЧасть[10];
	Перем СтавкиВзносаПФРНакопительнаяЧасть[10];
	Перем СтавкиНалогаПФРвзносы[10];
	                                                                                                                                              
	КонецГода = КонГода(Дата(Год,12,15));
	
	Если ТипЗначенияСтр(БуферРазделовСпр)<>"СписокЗначений" Тогда
		БуферРазделовСпр = СоздатьОбъект("СписокЗначений");
	КонецЕсли;

	// подготовим дополнительные данные для исчисления ЕСН
	РегрессивнаяШкала = ?(ДатаГод(КонецГода) < 2005, Константа.ИспользоватьРегрессивнуюШкалу.Получить(КонецГода), Да);
	
	// для расчета взносов в ПФР используется отдельная константа
	РегрессивнаяШкалаПФР = ?(ДатаГод(КонецГода) < 2005, Константа.ИспользоватьРегрессивнуюШкалуПФР.Получить(КонецГода), Да);
	
	ПорядокИсчисленияЕСН = Константа.ПорядокИсчисленияЕСН.Получить(КонецГода);
	
	НомерШкалыВзносов = глНомерШкалыСтраховыхВзносовПФР(ФизЛицо);
	Если НомерШкалыВзносов < 0 Тогда
		Для НомерСтавки = 1 По 10 Цикл
			СтавкиВзносаПФРСтраховаяЧасть[НомерСтавки] = 0;
			СтавкиВзносаПФРНакопительнаяЧасть[НомерСтавки] = 0;
		КонецЦикла;
	КонецЕсли;
	НаименованиеШкалыВзносовСтраховойЧасти = "СтрахПенс"+НомерШкалыВзносов;
	НаименованиеШкалыВзносовНакопительнойЧасти = "НакопПенс"+НомерШкалыВзносов;
	КонецГода = КонГода(Дата(Год,12,15));
	
	СписокСтавкиНалогаПФР = глПолучитьСтавкиЕСН(глПолучитьНалог("ЕСН_ФБ"), КонецГода,, 1);
	СписокСтавкиНалогаФСС = глПолучитьСтавкиЕСН(глПолучитьНалог("ФСС"), КонецГода,, 1);
	СписокСтавкиНалогаФФОМС = глПолучитьСтавкиЕСН(глПолучитьНалог("ФФОМС"), КонецГода,, 1);
	СписокСтавкиНалогаТФОМС = глПолучитьСтавкиЕСН(глПолучитьНалог("ТФОМС"), КонецГода,, 1);
	СписокСтавкиВзносаПФРСтраховаяЧасть = глПолучитьСтавкиЕСН(глПолучитьНалог("ПФР_страх"), КонецГода, НомерШкалыВзносов, 1);
	СписокСтавкиВзносаПФРНакопительнаяЧасть = глПолучитьСтавкиЕСН(глПолучитьНалог("ПФР_нак"), КонецГода, НомерШкалыВзносов, 1);
	СписокПределыДоходовЕСН = глПолучитьСтавкиЕСН(глПолучитьНалог("ЕСН_ФБ"), КонецГода,, 0, 1);
	
	Для Сч = 1 по 10 Цикл
		СтавкиНалогаПФР[Сч] = СписокСтавкиНалогаПФР.ПолучитьЗначение(Сч);
		СтавкиНалогаФСС[Сч] = СписокСтавкиНалогаФСС.ПолучитьЗначение(Сч);
		СтавкиНалогаФФОМС[Сч] = СписокСтавкиНалогаФФОМС.ПолучитьЗначение(Сч);
		СтавкиНалогаТФОМС[Сч] = СписокСтавкиНалогаТФОМС.ПолучитьЗначение(Сч);
		СтавкиВзносаПФРСтраховаяЧасть[Сч] = СписокСтавкиВзносаПФРСтраховаяЧасть.ПолучитьЗначение(Сч);
		СтавкиВзносаПФРНакопительнаяЧасть[Сч] = СписокСтавкиВзносаПФРНакопительнаяЧасть.ПолучитьЗначение(Сч);
		ПределыДоходовЕСН[Сч] = СписокПределыДоходовЕСН.ПолучитьЗначение(Сч);
		
		СтавкиНалогаПФРвзносы[Сч] = СтавкиВзносаПФРСтраховаяЧасть[Сч] + СтавкиВзносаПФРНакопительнаяЧасть[Сч];
	КонецЦикла;
	
	//таблица расшифровок ячеек 
	ТаблицаРасшифровокПоВР=СоздатьОбъект("ТаблицаЗначений");
	ТаблицаРасшифровокПоВР.НоваяКолонка(,"Строка",10); //здесь имя ячейки типа "П0105"
	ТаблицаРасшифровокПоВР.НоваяКолонка(,"ТаблицаЗначений"); //здесь находится таблица сумм по ВР для этой ячейки 
	
    СтрокаИтоговойТаблицы=?(ПустоеЗначение(СтрокаИтоговойТаблицы)=1,0,СтрокаИтоговойТаблицы);//можно будет забыть передать 0
	
	// заполняем "шапку" формы
	Если ЭтоСвод = 0 Тогда
		Буфер.Установить("Название","Индивидуальная карточка учета сумм начисленных выплат и иных вознаграждений, сумм начисленного единого социального налога, страховых взносов на обязательное пенсионное страхование (налогового вычета) за "+Год+" год");
	Иначе
		Буфер.Установить("Название","Сводная карточка учета сумм начисленных выплат и иных вознаграждений, сумм начисленного единого социального налога, страховых взносов на обязательное пенсионное страхование (налогового вычета) за "+Год+" год по:");
	КонецЕсли;
	
	глЗаполнитьШапкуИндивидуальнойКарточки(ФизЛицо,Год,Буфер,1,ЭтоСвод,ДопДанныеФизЛица);

	ОблагаемаяПФР = 0;
	ЕСНОблагаемаяФБ = 0;
	ЕСНОблагаемаяФСС = 0;
	ЕСНОблагаемаяОМС = 0;
	ПФРУд = 0;
	ФФОМСУд = 0;
	ТФОМСУд = 0;
	ФССУд = 0;                          
	УдержаноПФРнаСтраховуюПенсию = 0;
	УдержаноПФРнаНакопительнуюПенсию = 0;
	ПособийЗаСчетФСС = 0; 
	НачисленоВсего = 0;
	НачисленоЕНВД = 0;
	НачисленоИностранцу = 0;
	ЛьготВсего = 0;
	ЛьготаПоЕСНп1ст236 = 0;
	ЛьготаПоЕСНп2ст238абз2 = 0;
	ЛьготаПоЕСНп2ст238абз3 = 0;
	ЛьготаПоЕСНпп13п1ст238 = 0;
	ДоговораПодряда = 0;
	Лицензионные = 0;
	НачисленоЗаСчетПрибыли = 0;
	НачисленоИнвалиду = 0;
	НачисленоИнвалидуПФР = 0;
	ДовольствиеВоенных = 0;
	СодержаниеПрокуроров = 0;
	ПрочихЛьготПоСт238 = 0;
	ЛьготВсегоПФР = 0;
	ЛьготаПоЕСНп1ст236ПФР = 0;
	ЛьготаПоЕСНп2ст238абз2ПФР = 0;
	ЛьготаПоЕСНп2ст238абз3ПФР = 0;
	ЛьготаПоЕСНпп13п1ст238ПФР = 0;
	ПрочихЛьготПоСт238ПФР = 0;
	ПособийЗаСчетФССПФР = 0; 	
	ЛьготПоСт239ПФР = 0;
	ЛьготПоСт239ФСС = 0;
	ЛьготПоСт239ОМС = 0;
	ОблагаемаяВзносамиПФР_ЕНВД = 0;
	
	ОблагаемаяПФРПредыдМесяца = 0;
	ЕСНОблагаемаяФБПредыдМесяца = 0;
	ЕСНОблагаемаяФССПредыдМесяца = 0;
	ЕСНОблагаемаяОМСПредыдМесяца = 0;
	ПФРУдПредыдМесяца = 0;
	ФФОМСУдПредыдМесяца = 0;
	ТФОМСУдПредыдМесяца = 0;
	ФССУдПредыдМесяца = 0;                          
	УдержаноПФРнаСтраховуюПенсиюПредыдМесяца = 0;
	УдержаноПФРнаНакопительнуюПенсиюПредыдМесяца = 0;
	ПособийЗаСчетФССПредыдМесяца = 0;                          
	НачисленоВсегоПредыдМесяца = 0;
	НачисленоЕНВДПредыдМесяца = 0;
	НачисленоИностранцуПредыдМесяца = 0;
	ЛьготВсегоПредыдМесяца = 0;
	ЛьготаПоЕСНп1ст236ПредыдМесяца = 0;
	ЛьготаПоЕСНп2ст238абз2ПредыдМесяца = 0;
	ЛьготаПоЕСНп2ст238абз3ПредыдМесяца = 0;
	ЛьготаПоЕСНпп13п1ст238ПредыдМесяца = 0;
	ДоговораПодрядаПредыдМесяца = 0;
	ЛицензионныеПредыдМесяца = 0;
	НачисленоЗаСчетПрибылиПредыдМесяца = 0;
	НачисленоИнвалидуПредыдМесяца = 0;
	ДовольствиеВоенныхПредыдМесяца = 0;
	СодержаниеПрокуроровПредыдМесяца = 0;
	ПрочихЛьготПоСт238ПредыдМесяца = 0;
	ЛьготВсегоПФРПредыдМесяца = 0;
	ЛьготаПоЕСНп1ст236ПФРПредыдМесяца = 0;
	ЛьготаПоЕСНп2ст238абз2ПФРПредыдМесяца = 0;
	ЛьготаПоЕСНп2ст238абз3ПФРПредыдМесяца = 0;
	ЛьготаПоЕСНпп13п1ст238ПФРПредыдМесяца = 0;
	ПрочихЛьготПоСт238ПФРПредыдМесяца = 0;
	ПособийЗаСчетФССПФРПредыдМесяца = 0;
	ЛьготПоСт239ПФРПредыдМесяца = 0;
	ЛьготПоСт239ФССПредыдМесяца = 0;
	ЛьготПоСт239ОМСПредыдМесяца = 0;
	
	НеПодлежитУплатеФБПредыдМесяца = 0; // в связи с применением льгот п.1 ст. 239
	НеПодлежитУплатеФССПредыдМесяца = 0;
	НеПодлежитУплатеФФОМСПредыдМесяца = 0;
	НеПодлежитУплатеТФОМСПредыдМесяца = 0;
	
	СписокПредыдущегоМесяца = "";
	ПоследнийМесяц = 1;
	
	// обойдем помесячно таблицу с данными о доходах
	Для Месяц = 1 По 12 Цикл
		
		// выясним, изменились ли доходы по сравнению с предыдущим месяцем
		СписокДляСравнения = СоздатьОбъект("СписокЗначений");
		ДоходыВычетыНалогиСотрудников.Выгрузить(СписокДляСравнения,СтрокаИтоговойТаблицы+Месяц,СтрокаИтоговойТаблицы+Месяц,"1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25");
		СписокДляСравнения.УдалитьЗначение(1);
		
		Если Месяц>1  Тогда
			// если не изменились - пока ничего выводить не будем
			Если  глСпискиИдентичны(СписокДляСравнения,СписокПредыдущегоМесяца) = 1 Тогда
				Продолжить
			КонецЕсли;
		КонецЕсли; 
		
		СписокПредыдущегоМесяца = СписокДляСравнения;		
		
		//НеВзиматьНаСтрахПФР = ФизЛицо.НеВзиматьНаСтрахПФР.Получить(КонМесяца(Дата("01."+глДополнитьСтроку(Месяц,2)+"."+Год)));
		НеВзиматьНаСтрахПФР = ?(Год < 2005, ПустоеЗначение(СтрЗаменить(ФизЛицо.СтраховойНомерПФР, "-", "")), 0);
		
		Если (Месяц > 1) и (ПоследнийМесяц + 1 <= Месяц - 1) Тогда // было пропущено несколько месяцев - выведем только итоговые строки
			
			Для Сч = ПоследнийМесяц + 1 По Месяц - 1 Цикл
				
				МесяцСтрокой=глДополнитьСтроку(Сч,2); 
				
				//строка "с начала года"
				Буфер.Установить("СНГ"+МесяцСтрокой+"02",Формат(НачисленоВсего,"Ч012.2."));
				Буфер.Установить("СНГ"+МесяцСтрокой+"03",Формат(НачисленоЗаСчетПрибыли,"Ч012.2."));
				
				Если РежимПечати = 1 Тогда // печатная форма и форма для ввода несколько различаются
				Иначе                                                                          
					Буфер.Установить("СНГ"+МесяцСтрокой+"02а",Формат(Лицензионные,"Ч012.2."));
					Буфер.Установить("СНГ"+МесяцСтрокой+"02б",Формат(НачисленоЕНВД,"Ч012.2."));					
					Буфер.Установить("СНГ"+МесяцСтрокой+"02в",Формат(НачисленоИностранцу,"Ч012.2."));					
					Буфер.Установить("СНГ"+МесяцСтрокой+"04а",Формат(ЛьготаПоЕСНп1ст236,"Ч012.2."));
					Буфер.Установить("СНГ"+МесяцСтрокой+"04б",Формат(ЛьготаПоЕСНп2ст238абз2,"Ч012.2."));
					Буфер.Установить("СНГ"+МесяцСтрокой+"04в",Формат(ЛьготаПоЕСНп2ст238абз3,"Ч012.2."));
					Буфер.Установить("СНГ"+МесяцСтрокой+"04г",Формат(ЛьготаПоЕСНпп13п1ст238,"Ч012.2."));
					Буфер.Установить("СНГ"+МесяцСтрокой+"04д",Формат(ПрочихЛьготПоСт238,"Ч012.2."));
				КонецЕсли;
				
				Буфер.Установить("ВСЕГО_СНГ"+МесяцСтрокой,Формат(ЛьготВсего,"Ч012.2."));
				Буфер.Установить("СНГ"+МесяцСтрокой+"05",Формат(ДоговораПодряда,"Ч012.2."));
				Буфер.Установить("СНГ"+МесяцСтрокой+"06",Формат(СодержаниеПрокуроров,"Ч012.2."));
				
				Буфер.Установить("НБ_ФБ_СНГ"+МесяцСтрокой,Формат(НачисленоВсего-НачисленоЗаСчетПрибыли-ЛьготВсего-НачисленоЕНВД,"Ч012.2."));
				Буфер.Установить("НБ_ФСС_СНГ"+МесяцСтрокой,Формат(НачисленоВсего-НачисленоЗаСчетПрибыли-ЛьготВсего-ДоговораПодряда-НачисленоЕНВД,"Ч012.2."));
				Буфер.Установить("НБ_ОМС_СНГ"+МесяцСтрокой,Формат(НачисленоВсего-НачисленоЗаСчетПрибыли-ЛьготВсего-НачисленоЕНВД,"Ч012.2."));
				
				Если (РегрессивнаяШкала = Нет) и (НачисленоВсего <> 0) Тогда                                                                                                      
					Буфер.Установить("СНГ"+МесяцСтрокой+"08",Строка(СтавкиНалогаПФР[1]) + " %");					
					Буфер.Установить("СНГ"+МесяцСтрокой+"10",Строка(СтавкиНалогаФСС[1])+" %");
					Буфер.Установить("СНГ"+МесяцСтрокой+"12",Строка(СтавкиНалогаФФОМС[1]+СтавкиНалогаТФОМС[1])+" %");
				КонецЕсли;
				
				Буфер.Установить("СНГ"+МесяцСтрокой+"13",Формат(ПФРУд + НеПодлежитУплатеФБПредыдМесяца + УдержаноПФРнаСтраховуюПенсию + УдержаноПФРнаНакопительнуюПенсию,"Ч018.5."));
				Буфер.Установить("СНГ"+МесяцСтрокой+"14",Формат(ФССУд + НеПодлежитУплатеФССПредыдМесяца,"Ч018.5."));
				Буфер.Установить("СНГ"+МесяцСтрокой+"15",Формат(ФФОМСУд + НеПодлежитУплатеФФОМСПредыдМесяца,"Ч018.5."));
				Буфер.Установить("СНГ"+МесяцСтрокой+"16",Формат(ТФОМСУд + НеПодлежитУплатеТФОМСПредыдМесяца,"Ч018.5."));
				
				Буфер.Установить("ОБЛ_ПФР_СНГ"+МесяцСтрокой,Формат(ОблагаемаяПФР,"Ч012.2."));
				
				Если (РегрессивнаяШкалаПФР = Нет) и (НеВзиматьНаСтрахПФР = 0) и (НачисленоВсего <> 0)Тогда
					Буфер.Установить("СНГ"+МесяцСтрокой+"18",Строка(СтавкиВзносаПФРСтраховаяЧасть[1])+" %");
					Буфер.Установить("СНГ"+МесяцСтрокой+"19",Строка(СтавкиВзносаПФРНакопительнаяЧасть[1])+" %");
				КонецЕсли; 		
				
				Буфер.Установить("СНГ"+МесяцСтрокой+"20",Формат(УдержаноПФРнаСтраховуюПенсию + УдержаноПФРнаНакопительнуюПенсию,"Ч018.5."));
				Буфер.Установить("СНГ"+МесяцСтрокой+"21",Формат(УдержаноПФРнаСтраховуюПенсию,"Ч018.5."));				
				Буфер.Установить("СНГ"+МесяцСтрокой+"22",Формат(УдержаноПФРнаНакопительнуюПенсию,"Ч018.5."));
				Буфер.Установить("СНГ"+МесяцСтрокой+"23",Формат(НачисленоИнвалиду,"Ч012.2."));                                                                            
				Буфер.Установить("СНГ"+МесяцСтрокой+"24",Формат(НеПодлежитУплатеФБПредыдМесяца,"Ч018.5."));
				Буфер.Установить("СНГ"+МесяцСтрокой+"25",Формат(НеПодлежитУплатеФССПредыдМесяца,"Ч018.5."));
				Буфер.Установить("СНГ"+МесяцСтрокой+"26",Формат(НеПодлежитУплатеФФОМСПредыдМесяца,"Ч018.5."));
				Буфер.Установить("СНГ"+МесяцСтрокой+"27",Формат(НеПодлежитУплатеТФОМСПредыдМесяца,"Ч018.5."));				
				Буфер.Установить("СНГ"+МесяцСтрокой+"28",Формат(ПФРУд,"Ч018.5."));  
				Буфер.Установить("СНГ"+МесяцСтрокой+"29",Формат(ФССУд,"Ч018.5."));
				Буфер.Установить("СНГ"+МесяцСтрокой+"30",Формат(ФФОМСУд,"Ч018.5."));
				Буфер.Установить("СНГ"+МесяцСтрокой+"31",Формат(ТФОМСУд,"Ч018.5."));				
				Буфер.Установить("СНГ"+МесяцСтрокой+"32",Формат(ПособийЗаСчетФСС,"Ч012.2."));
				Буфер.Установить("СНГ"+МесяцСтрокой+"33",Формат(ДовольствиеВоенных,"Ч012.2."));

			КонецЦикла;
			
		КонецЕсли;
		
		ПоследнийМесяц = Месяц;
		
		// все данные берем из соответствующих колонок таблицы значений
		ТекущаяСтрокаИтоговойТаблицы = СтрокаИтоговойТаблицы+Месяц; // запомним, чтобы 10 раз не считать
		
		ЕСНОблагаемаяФБ = ДоходыВычетыНалогиСотрудников.ПолучитьЗначение(ТекущаяСтрокаИтоговойТаблицы,2);
		ЕСНОблагаемаяОМС = ДоходыВычетыНалогиСотрудников.ПолучитьЗначение(ТекущаяСтрокаИтоговойТаблицы,3);
		ЕСНОблагаемаяФСС = ДоходыВычетыНалогиСотрудников.ПолучитьЗначение(ТекущаяСтрокаИтоговойТаблицы,4);
		
		ПФРУд = ДоходыВычетыНалогиСотрудников.ПолучитьЗначение(ТекущаяСтрокаИтоговойТаблицы,5);
		ФФОМСУд = ДоходыВычетыНалогиСотрудников.ПолучитьЗначение(ТекущаяСтрокаИтоговойТаблицы,6);
		ТФОМСУд = ДоходыВычетыНалогиСотрудников.ПолучитьЗначение(ТекущаяСтрокаИтоговойТаблицы,7);
		ФССУд = ДоходыВычетыНалогиСотрудников.ПолучитьЗначение(ТекущаяСтрокаИтоговойТаблицы,8);
		УдержаноПФРнаСтраховуюПенсию = ДоходыВычетыНалогиСотрудников.ПолучитьЗначение(ТекущаяСтрокаИтоговойТаблицы,42);
		УдержаноПФРнаНакопительнуюПенсию = ДоходыВычетыНалогиСотрудников.ПолучитьЗначение(ТекущаяСтрокаИтоговойТаблицы,43);
		
		ПособийЗаСчетФСС = ДоходыВычетыНалогиСотрудников.ПолучитьЗначение(ТекущаяСтрокаИтоговойТаблицы,9);                          
		НачисленоВсего = ДоходыВычетыНалогиСотрудников.ПолучитьЗначение(ТекущаяСтрокаИтоговойТаблицы,10);                          
		НачисленоЕНВД = ДоходыВычетыНалогиСотрудников.ПолучитьЗначение(ТекущаяСтрокаИтоговойТаблицы,25);                          
		НачисленоИностранцу = ДоходыВычетыНалогиСотрудников.ПолучитьЗначение(ТекущаяСтрокаИтоговойТаблицы,33);
		НачисленоВсегоИностранцу = ДоходыВычетыНалогиСотрудников.ПолучитьЗначение(ТекущаяСтрокаИтоговойТаблицы,41);
		ЛьготаПоЕСНп1ст236 = ДоходыВычетыНалогиСотрудников.ПолучитьЗначение(ТекущаяСтрокаИтоговойТаблицы,12);
		ЛьготаПоЕСНп2ст238абз2 = ДоходыВычетыНалогиСотрудников.ПолучитьЗначение(ТекущаяСтрокаИтоговойТаблицы,14);
		ЛьготаПоЕСНп2ст238абз3 = ДоходыВычетыНалогиСотрудников.ПолучитьЗначение(ТекущаяСтрокаИтоговойТаблицы,15);
		ЛьготаПоЕСНпп13п1ст238 = ДоходыВычетыНалогиСотрудников.ПолучитьЗначение(ТекущаяСтрокаИтоговойТаблицы,16);
		ПрочихЛьготПоСт238 = ПособийЗаСчетФСС + ДоходыВычетыНалогиСотрудников.ПолучитьЗначение(ТекущаяСтрокаИтоговойТаблицы,17);
		ДоговораПодряда = ДоходыВычетыНалогиСотрудников.ПолучитьЗначение(ТекущаяСтрокаИтоговойТаблицы,18);
		Лицензионные = ДоходыВычетыНалогиСотрудников.ПолучитьЗначение(ТекущаяСтрокаИтоговойТаблицы,24);
		НачисленоВсего = НачисленоВсего - Лицензионные;
		ДовольствиеВоенных = ДоходыВычетыНалогиСотрудников.ПолучитьЗначение(ТекущаяСтрокаИтоговойТаблицы,11);
		СодержаниеПрокуроров = ДоходыВычетыНалогиСотрудников.ПолучитьЗначение(ТекущаяСтрокаИтоговойТаблицы,19);
		НачисленоЗаСчетПрибыли = ДоходыВычетыНалогиСотрудников.ПолучитьЗначение(ТекущаяСтрокаИтоговойТаблицы,13);
		НачисленоИнвалиду = ДоходыВычетыНалогиСотрудников.ПолучитьЗначение(ТекущаяСтрокаИтоговойТаблицы,20);
		ЛьготПоСт239ПФР = ДоходыВычетыНалогиСотрудников.ПолучитьЗначение(ТекущаяСтрокаИтоговойТаблицы,"ЛьготаИнвалидуФдБ");
		ЛьготПоСт239ФСС = ДоходыВычетыНалогиСотрудников.ПолучитьЗначение(ТекущаяСтрокаИтоговойТаблицы,"ЛьготаИнвалидуФСС");
		ЛьготПоСт239ОМС = ДоходыВычетыНалогиСотрудников.ПолучитьЗначение(ТекущаяСтрокаИтоговойТаблицы,"ЛьготаИнвалидуОМС");		
		
		ЛьготаПоЕСНп1ст236ПФР = ДоходыВычетыНалогиСотрудников.ПолучитьЗначение(ТекущаяСтрокаИтоговойТаблицы,26);
		ЛьготаПоЕСНп2ст238абз2ПФР = ДоходыВычетыНалогиСотрудников.ПолучитьЗначение(ТекущаяСтрокаИтоговойТаблицы,27);
		ЛьготаПоЕСНп2ст238абз3ПФР = ДоходыВычетыНалогиСотрудников.ПолучитьЗначение(ТекущаяСтрокаИтоговойТаблицы,28);
		ЛьготаПоЕСНпп13п1ст238ПФР = ДоходыВычетыНалогиСотрудников.ПолучитьЗначение(ТекущаяСтрокаИтоговойТаблицы,29);
		ПрочихЛьготПоСт238ПФР = ДоходыВычетыНалогиСотрудников.ПолучитьЗначение(ТекущаяСтрокаИтоговойТаблицы,30);
		ПособийЗаСчетФССПФР = ПрочихЛьготПоСт238ПФР + ДоходыВычетыНалогиСотрудников.ПолучитьЗначение(ТекущаяСтрокаИтоговойТаблицы,31);
		
		ЛьготВсего = ПрочихЛьготПоСт238+ЛьготаПоЕСНп1ст236+ЛьготаПоЕСНпп13п1ст238+ЛьготаПоЕСНп2ст238абз3+
					 ЛьготаПоЕСНп2ст238абз2;
		ЛьготВсегоПФР = ПрочихЛьготПоСт238ПФР+ЛьготаПоЕСНп1ст236ПФР+ЛьготаПоЕСНпп13п1ст238ПФР+ЛьготаПоЕСНп2ст238абз3ПФР+
					 ЛьготаПоЕСНп2ст238абз2ПФР;

		ОблагаемаяПФРВсего = Макс(НачисленоВсего + Лицензионные - НачисленоВсегоИностранцу - ЛьготВсегоПФР - НачисленоЗаСчетПрибыли - ДовольствиеВоенных, 0);
		ОБЛ_ПФР_ЕНВД = Макс(НачисленоЕНВД - (НачисленоВсегоИностранцу - НачисленоИностранцу) - (ЛьготВсегоПФР - ЛьготВсего),0);
		ОблагаемаяПФР = ОблагаемаяПФРВсего - ОБЛ_ПФР_ЕНВД;
		                                  
		КонецМесяца = КонМесяца(Дата(Год, Месяц, 1));
		Инвалид = ?((ФизЛицо.Инвалид.Получить(КонецМесяца) = 1) или (Константа.ИнвалиднаяОрганизация.Получить(КонецМесяца) = Да), 1, 0);
		Если Инвалид = 1 Тогда
		    НачисленоИнвалидуПФР = Мин(НачисленоИнвалидуПФР + (ОблагаемаяПФР - ОблагаемаяПФРПредыдМесяца), 100000);
		КонецЕсли;

		НеПодлежитУплатеФБ = ЛьготПоСт239ПФР*СтавкиНалогаПФР[1]/100 - НачисленоИнвалидуПФР*(СтавкиВзносаПФРСтраховаяЧасть[1]+СтавкиВзносаПФРНакопительнаяЧасть[1])/100;
		НеПодлежитУплатеФСС = ЛьготПоСт239ФСС*СтавкиНалогаФСС[1]/100;
		НеПодлежитУплатеФФОМС = ЛьготПоСт239ОМС*СтавкиНалогаФФОМС[1]/100;
		НеПодлежитУплатеТФОМС = ЛьготПоСт239ОМС*СтавкиНалогаТФОМС[1]/100;
		
		МесяцСтрокой = глДополнитьСтроку(Месяц,2);
		
		//строка "за месяц"
		ИмяЯчейки = "П"+МесяцСтрокой+"02";
		Буфер.ДобавитьЗначение(НачисленоВсего-НачисленоВсегоПредыдМесяца,ИмяЯчейки);
		//по ВР:               		
		ТаблицаРасшифровокПоВР=СформироватьТаблицуПоВР(ИмяЯчейки,ДоходыВычетыНалогиСотрудников,ТаблицаРасшифровокПоВР,ТекущаяСтрокаИтоговойТаблицы,10);		
		
		ИмяЯчейки = "П"+МесяцСтрокой+"03";
		Буфер.ДобавитьЗначение(НачисленоЗаСчетПрибыли-НачисленоЗаСчетПрибылиПредыдМесяца,ИмяЯчейки);
		//по ВР:
		ТаблицаРасшифровокПоВР=СформироватьТаблицуПоВР(ИмяЯчейки,ДоходыВычетыНалогиСотрудников,ТаблицаРасшифровокПоВР,ТекущаяСтрокаИтоговойТаблицы,13);		
 		
		Если РежимПечати <> 1 Тогда // печатная форма и форма для ввода несколько различаются
			ИмяЯчейки = "П"+МесяцСтрокой+"02а";
			Буфер.ДобавитьЗначение(Лицензионные-ЛицензионныеПредыдМесяца,ИмяЯчейки);
	 		ТаблицаРасшифровокПоВР=СформироватьТаблицуПоВР(ИмяЯчейки,ДоходыВычетыНалогиСотрудников,ТаблицаРасшифровокПоВР,ТекущаяСтрокаИтоговойТаблицы,24);		
			
			ИмяЯчейки = "П"+МесяцСтрокой+"02б";
			Буфер.ДобавитьЗначение(НачисленоЕНВД-НачисленоЕНВДПредыдМесяца,ИмяЯчейки);
	 		ТаблицаРасшифровокПоВР=СформироватьТаблицуПоВР(ИмяЯчейки,ДоходыВычетыНалогиСотрудников,ТаблицаРасшифровокПоВР,ТекущаяСтрокаИтоговойТаблицы,25);
	 		
	 		ИмяЯчейки = "П"+МесяцСтрокой+"02в";
			Буфер.ДобавитьЗначение(НачисленоИностранцу-НачисленоИностранцуПредыдМесяца,ИмяЯчейки);
						
			ИмяЯчейки = "П"+МесяцСтрокой+"04а";
			Буфер.ДобавитьЗначение(ЛьготаПоЕСНп1ст236-ЛьготаПоЕСНп1ст236ПредыдМесяца,ИмяЯчейки);
	 		ТаблицаРасшифровокПоВР=СформироватьТаблицуПоВР(ИмяЯчейки,ДоходыВычетыНалогиСотрудников,ТаблицаРасшифровокПоВР,ТекущаяСтрокаИтоговойТаблицы,12);		
			
			ИмяЯчейки = "П"+МесяцСтрокой+"04б";
	 		Буфер.ДобавитьЗначение(ЛьготаПоЕСНп2ст238абз2-ЛьготаПоЕСНп2ст238абз2ПредыдМесяца,ИмяЯчейки);
	 		ТаблицаРасшифровокПоВР=СформироватьТаблицуПоВР(ИмяЯчейки,ДоходыВычетыНалогиСотрудников,ТаблицаРасшифровокПоВР,ТекущаяСтрокаИтоговойТаблицы,14);
	 		
			ИмяЯчейки = "П"+МесяцСтрокой+"04в";
 			Буфер.ДобавитьЗначение(ЛьготаПоЕСНп2ст238абз3-ЛьготаПоЕСНп2ст238абз3ПредыдМесяца,ИмяЯчейки);
	 		ТаблицаРасшифровокПоВР=СформироватьТаблицуПоВР(ИмяЯчейки,ДоходыВычетыНалогиСотрудников,ТаблицаРасшифровокПоВР,ТекущаяСтрокаИтоговойТаблицы,15);
			
			ИмяЯчейки = "П"+МесяцСтрокой+"04г";
	 		Буфер.ДобавитьЗначение(ЛьготаПоЕСНпп13п1ст238-ЛьготаПоЕСНпп13п1ст238ПредыдМесяца,ИмяЯчейки);
	 		ТаблицаРасшифровокПоВР=СформироватьТаблицуПоВР(ИмяЯчейки,ДоходыВычетыНалогиСотрудников,ТаблицаРасшифровокПоВР,ТекущаяСтрокаИтоговойТаблицы,16);
	 		
			ИмяЯчейки = "П"+МесяцСтрокой+"04д";
	 		Буфер.ДобавитьЗначение(ПрочихЛьготПоСт238-ПрочихЛьготПоСт238ПредыдМесяца,ИмяЯчейки);
	 		ТаблицаРасшифровокПоВР=СформироватьТаблицуПоВР(ИмяЯчейки,ДоходыВычетыНалогиСотрудников,ТаблицаРасшифровокПоВР,ТекущаяСтрокаИтоговойТаблицы,9,0,17);
	 				 		
 		КонецЕсли;
		Буфер.ДобавитьЗначение(ЛьготВсего-ЛьготВсегоПредыдМесяца,"ВСЕГО"+МесяцСтрокой);

		ИмяЯчейки = "П"+МесяцСтрокой+"05";
		Буфер.ДобавитьЗначение(ДоговораПодряда-ДоговораПодрядаПредыдМесяца,ИмяЯчейки);
	 	ТаблицаРасшифровокПоВР=СформироватьТаблицуПоВР(ИмяЯчейки,ДоходыВычетыНалогиСотрудников,ТаблицаРасшифровокПоВР,ТекущаяСтрокаИтоговойТаблицы,18);
	 	
	 	ИмяЯчейки = "П"+МесяцСтрокой+"06";                                            
	 	Буфер.ДобавитьЗначение(СодержаниеПрокуроров-СодержаниеПрокуроровПредыдМесяца,ИмяЯчейки);
		ТаблицаРасшифровокПоВР=СформироватьТаблицуПоВР(ИмяЯчейки,ДоходыВычетыНалогиСотрудников,ТаблицаРасшифровокПоВР,ТекущаяСтрокаИтоговойТаблицы,19);
		
		Буфер.Установить("П"+МесяцСтрокой+"08", "");					
		Буфер.Установить("П"+МесяцСтрокой+"10", "");
		Буфер.Установить("П"+МесяцСтрокой+"12", "");
		Буфер.Установить("П"+МесяцСтрокой+"18", "");
		Буфер.Установить("П"+МесяцСтрокой+"19", "");
		Буфер.Установить("СНГ"+МесяцСтрокой+"08", "");
		Буфер.Установить("СНГ"+МесяцСтрокой+"10", "");
		Буфер.Установить("СНГ"+МесяцСтрокой+"12", "");
		Буфер.Установить("СНГ"+МесяцСтрокой+"18", "");
		Буфер.Установить("СНГ"+МесяцСтрокой+"19", "");
				
		Если (РегрессивнаяШкала = Да) и (НачисленоВсего <> 0) Тогда			
			ИмяЯчейки = "П"+МесяцСтрокой+"08";
			Если Макс (((НачисленоВсего-НачисленоЗаСчетПрибыли-ЛьготВсего-НачисленоЕНВД) - 
			(НачисленоВсегоПредыдМесяца-НачисленоЗаСчетПрибылиПредыдМесяца-ЛьготВсегоПредыдМесяца-НачисленоЕНВДПредыдМесяца)),0) <>0 Тогда
				
				Если НачисленоВсего-НачисленоЗаСчетПрибыли-ЛьготВсего-НачисленоЕНВД <= ПределыДоходовЕСН[1] Тогда
					Если НачисленоВсего-НачисленоЗаСчетПрибыли-ЛьготВсего-НачисленоЕНВД <> 0 Тогда
						Буфер.ДобавитьЗначение(Строка(СтавкиНалогаПФР[1]) + " %",ИмяЯчейки);
						Буфер.ДобавитьЗначение(Строка(СтавкиНалогаФФОМС[1]+СтавкиНалогаТФОМС[1]) + " %","П"+МесяцСтрокой+"12");
					КонецЕсли;
					
				ИначеЕсли НачисленоВсего-НачисленоЗаСчетПрибыли-ЛьготВсего-НачисленоЕНВД <= ПределыДоходовЕСН[2] Тогда				
					Буфер.ДобавитьЗначение(Строка(ПределыДоходовЕСН[1]*СтавкиНалогаПФР[1]/100) + " руб." + РазделительСтрок + Строка(СтавкиНалогаПФР[2])+ " %",ИмяЯчейки);	
					Буфер.ДобавитьЗначение(Строка(ПределыДоходовЕСН[1]*(СтавкиНалогаФФОМС[1]+СтавкиНалогаТФОМС[1])/100) + " руб." + РазделительСтрок + Строка(СтавкиНалогаФФОМС[2]+СтавкиНалогаТФОМС[2]) + " %","П"+МесяцСтрокой+"12");
					
				ИначеЕсли НачисленоВсего-НачисленоЗаСчетПрибыли-ЛьготВсего-НачисленоЕНВД <= ПределыДоходовЕСН[3] Тогда
					Буфер.ДобавитьЗначение(Строка(ПределыДоходовЕСН[1]*СтавкиНалогаПФР[1]/100 + (ПределыДоходовЕСН[2]-ПределыДоходовЕСН[1])*СтавкиНалогаПФР[2]/100) + " руб." + РазделительСтрок + Строка(СтавкиНалогаПФР[3]) + " %",ИмяЯчейки);
					Буфер.ДобавитьЗначение(Строка(ПределыДоходовЕСН[1]*(СтавкиНалогаФФОМС[1]+СтавкиНалогаТФОМС[1])/100 + (ПределыДоходовЕСН[2]-ПределыДоходовЕСН[1])*(СтавкиНалогаФФОМС[2]+СтавкиНалогаТФОМС[2])/100) + " руб." + РазделительСтрок + Строка(СтавкиНалогаФФОМС[3]+СтавкиНалогаТФОМС[3]) + " %","П"+МесяцСтрокой+"12");
					
				Иначе
					Буфер.ДобавитьЗначение(Строка((ПределыДоходовЕСН[3]-ПределыДоходовЕСН[2])*СтавкиНалогаПФР[3]/100+ ПределыДоходовЕСН[1]*СтавкиНалогаПФР[1]/100 + (ПределыДоходовЕСН[2]-ПределыДоходовЕСН[1])*СтавкиНалогаПФР[2]/100) + " руб."
					+ РазделительСтрок + Строка(СтавкиНалогаПФР[4]) + " %",ИмяЯчейки);					
					
					Буфер.ДобавитьЗначение(Строка((ПределыДоходовЕСН[3]-ПределыДоходовЕСН[2])*(СтавкиНалогаФФОМС[3]+СтавкиНалогаТФОМС[3])/100
					+ ПределыДоходовЕСН[1]*(СтавкиНалогаФФОМС[1]+СтавкиНалогаТФОМС[1])/100 + (ПределыДоходовЕСН[2]-ПределыДоходовЕСН[1])*(СтавкиНалогаФФОМС[2]+СтавкиНалогаТФОМС[2])/100) + " руб."
					+ РазделительСтрок + Строка(СтавкиНалогаФФОМС[4]+СтавкиНалогаТФОМС[4]) + " %","П"+МесяцСтрокой+"12");
				КонецЕсли;
				
				ИмяЯчейки = "П"+МесяцСтрокой+"10";
				Если НачисленоВсего-НачисленоЗаСчетПрибыли-ЛьготВсего-ДоговораПодряда-НачисленоЕНВД <= ПределыДоходовЕСН[1] Тогда
					Если НачисленоВсего-НачисленоЗаСчетПрибыли-ЛьготВсего-ДоговораПодряда-НачисленоЕНВД <> 0 Тогда
						Буфер.ДобавитьЗначение(Строка(СтавкиНалогаФСС[1]) + " %",ИмяЯчейки); 
					КонецЕсли;
				ИначеЕсли НачисленоВсего-НачисленоЗаСчетПрибыли-ЛьготВсего-ДоговораПодряда-НачисленоЕНВД <= ПределыДоходовЕСН[2] Тогда
					Буфер.ДобавитьЗначение(Строка(ПределыДоходовЕСН[1]*СтавкиНалогаФСС[1]/100) + " руб." + РазделительСтрок + Строка(СтавкиНалогаФСС[2]) + " %",ИмяЯчейки);
				ИначеЕсли НачисленоВсего-НачисленоЗаСчетПрибыли-ЛьготВсего-ДоговораПодряда-НачисленоЕНВД <= ПределыДоходовЕСН[3] Тогда
					Буфер.ДобавитьЗначение(Строка(ПределыДоходовЕСН[1]*СтавкиНалогаФСС[1]/100 + (ПределыДоходовЕСН[2]-ПределыДоходовЕСН[1])*(СтавкиНалогаФСС[2])/100) + " руб." + РазделительСтрок + Строка(СтавкиНалогаФСС[3]) + " %",ИмяЯчейки);
				Иначе
					Буфер.ДобавитьЗначение(Строка((ПределыДоходовЕСН[3]-ПределыДоходовЕСН[2])*СтавкиНалогаФСС[3]/100 + ПределыДоходовЕСН[1]*СтавкиНалогаФСС[1]/100 + (ПределыДоходовЕСН[2]-ПределыДоходовЕСН[1])*СтавкиНалогаФСС[2]/100) + " руб."
					+ РазделительСтрок + Строка(СтавкиНалогаФСС[4]) + " %",ИмяЯчейки);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
 		           
 		Буфер.Установить("НБ_ФБ"+МесяцСтрокой,Формат((НачисленоВсего-НачисленоЗаСчетПрибыли-ЛьготВсего-НачисленоЕНВД - ДовольствиеВоенных)
													-(НачисленоВсегоПредыдМесяца-НачисленоЗаСчетПрибылиПредыдМесяца-ЛьготВсегоПредыдМесяца-НачисленоЕНВДПредыдМесяца - ДовольствиеВоенныхПредыдМесяца),"Ч012.2."));		
		Буфер.Установить("НБ_ФСС"+МесяцСтрокой,Формат((НачисленоВсего-НачисленоЗаСчетПрибыли-ЛьготВсего-ДоговораПодряда-НачисленоЕНВД - ДовольствиеВоенных)
													-(НачисленоВсегоПредыдМесяца-НачисленоЗаСчетПрибылиПредыдМесяца-ЛьготВсегоПредыдМесяца-ДоговораПодрядаПредыдМесяца-НачисленоЕНВДПредыдМесяца - ДовольствиеВоенныхПредыдМесяца),"Ч012.2."));
		Буфер.Установить("НБ_ОМС"+МесяцСтрокой,Формат((НачисленоВсего-НачисленоЗаСчетПрибыли-ЛьготВсего-НачисленоЕНВД - ДовольствиеВоенных)
													-(НачисленоВсегоПредыдМесяца-НачисленоЗаСчетПрибылиПредыдМесяца-ЛьготВсегоПредыдМесяца-НачисленоЕНВДПредыдМесяца - ДовольствиеВоенныхПредыдМесяца),"Ч012.2."));
		
		ИмяЯчейки = "П"+МесяцСтрокой+"13";
		ВзносыВПФРзаМесяц = (УдержаноПФРнаСтраховуюПенсию + УдержаноПФРнаНакопительнуюПенсию) - (УдержаноПФРнаСтраховуюПенсиюПредыдМесяца + УдержаноПФРнаНакопительнуюПенсиюПредыдМесяца);
		Буфер.ДобавитьЗначение(Формат((ПФРУд - ПФРУдПредыдМесяца) + (НеПодлежитУплатеФБ - НеПодлежитУплатеФБПредыдМесяца) + ВзносыВПФРзаМесяц,"Ч018.5."),ИмяЯчейки);
 		
		ИмяЯчейки = "П"+МесяцСтрокой+"14";
		Буфер.ДобавитьЗначение(Формат((ФССУд - ФССУдПредыдМесяца) + (НеПодлежитУплатеФСС - НеПодлежитУплатеФССПредыдМесяца),"Ч018.5."),ИмяЯчейки);
		
		ИмяЯчейки = "П"+МесяцСтрокой+"15";
		Буфер.ДобавитьЗначение(Формат((ФФОМСУд - ФФОМСУдПредыдМесяца) + (НеПодлежитУплатеФФОМС - НеПодлежитУплатеФФОМСПредыдМесяца),"Ч018.5."),ИмяЯчейки);
		
		ИмяЯчейки = "П"+МесяцСтрокой+"16";
		Буфер.ДобавитьЗначение(Формат((ТФОМСУд - ТФОМСУдПредыдМесяца) + (НеПодлежитУплатеТФОМС - НеПодлежитУплатеТФОМСПредыдМесяца),"Ч018.5."),ИмяЯчейки);		
 		                                  
		ИмяЯчейки = "ОБЛ_ПФР"+МесяцСтрокой;
		Буфер.ДобавитьЗначение(ОблагаемаяПФР-ОблагаемаяПФРПредыдМесяца,ИмяЯчейки);
		
		ОблагаемаяПФРЕНВД = ОблагаемаяПФР + НачисленоЕНВД;
		Если (РегрессивнаяШкалаПФР = Да) и (ОблагаемаяПФРЕНВД <> 0) и ((ОблагаемаяПФР-ОблагаемаяПФРПредыдМесяца)<>0) Тогда
			Если ОблагаемаяПФРЕНВД <= ПределыДоходовЕСН[1] Тогда
				Буфер.ДобавитьЗначение(Строка(СтавкиВзносаПФРСтраховаяЧасть[1]) + " %", "П"+МесяцСтрокой+"18");
				Буфер.ДобавитьЗначение(Строка(СтавкиВзносаПФРНакопительнаяЧасть[1]) + " %", "П"+МесяцСтрокой+"19");
			
			ИначеЕсли ОблагаемаяПФРЕНВД <= ПределыДоходовЕСН[2] Тогда				
				Буфер.ДобавитьЗначение(Строка(ПределыДоходовЕСН[1]*СтавкиВзносаПФРСтраховаяЧасть[1]/100) + " руб."
				+ РазделительСтрок + Строка(СтавкиВзносаПФРСтраховаяЧасть[2]) + " %", "П"+МесяцСтрокой+"18");
				
				Буфер.ДобавитьЗначение(Строка(ПределыДоходовЕСН[1]*СтавкиВзносаПФРНакопительнаяЧасть[1]/100) + " руб."
				+ РазделительСтрок + Строка(СтавкиВзносаПФРНакопительнаяЧасть[2]) + " %", "П"+МесяцСтрокой+"19");
			
			ИначеЕсли ОблагаемаяПФРЕНВД <= ПределыДоходовЕСН[3] Тогда				
				Буфер.ДобавитьЗначение(Строка(ПределыДоходовЕСН[1]*СтавкиВзносаПФРСтраховаяЧасть[1]/100 + (ПределыДоходовЕСН[2]-ПределыДоходовЕСН[1])*(СтавкиВзносаПФРСтраховаяЧасть[2])/100) + " руб."
				+ РазделительСтрок + Строка(СтавкиВзносаПФРСтраховаяЧасть[3]) + " %", "П"+МесяцСтрокой+"18");
				
				Буфер.ДобавитьЗначение(Строка(ПределыДоходовЕСН[1]*СтавкиВзносаПФРНакопительнаяЧасть[1]/100 + (ПределыДоходовЕСН[2]-ПределыДоходовЕСН[1])*(СтавкиВзносаПФРНакопительнаяЧасть[2])/100) + " руб."
				+ РазделительСтрок + Строка(СтавкиВзносаПФРНакопительнаяЧасть[3]) + " %", "П"+МесяцСтрокой+"19");
			
			Иначе
				Буфер.ДобавитьЗначение(Строка((ПределыДоходовЕСН[3]-ПределыДоходовЕСН[2])*СтавкиВзносаПФРСтраховаяЧасть[3]/100 + ПределыДоходовЕСН[1]*СтавкиВзносаПФРСтраховаяЧасть[1]/100 + (ПределыДоходовЕСН[2]-ПределыДоходовЕСН[1])*СтавкиВзносаПФРСтраховаяЧасть[2]/100) + " руб."
				+ РазделительСтрок + Строка(СтавкиВзносаПФРСтраховаяЧасть[4]) + " %", "П"+МесяцСтрокой+"18");
				
				Буфер.ДобавитьЗначение(Строка((ПределыДоходовЕСН[3]-ПределыДоходовЕСН[2])*СтавкиВзносаПФРНакопительнаяЧасть[3]/100 + ПределыДоходовЕСН[1]*СтавкиВзносаПФРНакопительнаяЧасть[1]/100 + (ПределыДоходовЕСН[2]-ПределыДоходовЕСН[1])*СтавкиВзносаПФРНакопительнаяЧасть[2]/100) + " руб."
				+ РазделительСтрок + Строка(СтавкиВзносаПФРНакопительнаяЧасть[4]) + " %", "П"+МесяцСтрокой+"19");
			КонецЕсли;
		КонецЕсли;
		
		ИмяЯчейки = "П"+МесяцСтрокой+"20"; 
		Буфер.ДобавитьЗначение(Формат(УдержаноПФРнаСтраховуюПенсию + УдержаноПФРнаНакопительнуюПенсию-(УдержаноПФРнаСтраховуюПенсиюПредыдМесяца + УдержаноПФРнаНакопительнуюПенсиюПредыдМесяца),"Ч018.5."),ИмяЯчейки);
		
		ИмяЯчейки = "П"+МесяцСтрокой+"21";
		Буфер.ДобавитьЗначение(Формат(УдержаноПФРнаСтраховуюПенсию-УдержаноПФРнаСтраховуюПенсиюПредыдМесяца,"Ч018.5."),ИмяЯчейки);
		ТаблицаРасшифровокПоВР=СформироватьТаблицуПоВР(ИмяЯчейки,ДоходыВычетыНалогиСотрудников,ТаблицаРасшифровокПоВР,ТекущаяСтрокаИтоговойТаблицы,21);
		
		ИмяЯчейки = "П"+МесяцСтрокой+"22";
		Буфер.ДобавитьЗначение(Формат(УдержаноПФРнаНакопительнуюПенсию-УдержаноПФРнаНакопительнуюПенсиюПредыдМесяца,"Ч018.5."),ИмяЯчейки);
		ТаблицаРасшифровокПоВР=СформироватьТаблицуПоВР(ИмяЯчейки,ДоходыВычетыНалогиСотрудников,ТаблицаРасшифровокПоВР,ТекущаяСтрокаИтоговойТаблицы,22);
		
		ИмяЯчейки = "П"+МесяцСтрокой+"23";
		Буфер.ДобавитьЗначение(НачисленоИнвалиду-НачисленоИнвалидуПредыдМесяца,ИмяЯчейки);
		ТаблицаРасшифровокПоВР=СформироватьТаблицуПоВР(ИмяЯчейки,ДоходыВычетыНалогиСотрудников,ТаблицаРасшифровокПоВР,ТекущаяСтрокаИтоговойТаблицы,20);
		
		ИмяЯчейки = "П"+МесяцСтрокой+"24";
		Буфер.ДобавитьЗначение(Формат(НеПодлежитУплатеФБ - НеПодлежитУплатеФБПредыдМесяца,"Ч018.5."),ИмяЯчейки);
		
		ИмяЯчейки = "П"+МесяцСтрокой+"25";
		Буфер.ДобавитьЗначение(Формат(НеПодлежитУплатеФСС - НеПодлежитУплатеФССПредыдМесяца,"Ч018.5."),ИмяЯчейки);
		
		ИмяЯчейки = "П"+МесяцСтрокой+"26";
		Буфер.ДобавитьЗначение(Формат(НеПодлежитУплатеФФОМС - НеПодлежитУплатеФФОМСПредыдМесяца,"Ч018.5."),ИмяЯчейки);
		
		ИмяЯчейки = "П"+МесяцСтрокой+"27";
		Буфер.ДобавитьЗначение(Формат(НеПодлежитУплатеТФОМС - НеПодлежитУплатеТФОМСПредыдМесяца,"Ч018.5."),ИмяЯчейки);
		
		ИмяЯчейки = "П"+МесяцСтрокой+"28";
		Буфер.ДобавитьЗначение(Формат(ПФРУд-ПФРУдПредыдМесяца,"Ч018.5."),ИмяЯчейки);
		ТаблицаРасшифровокПоВР=СформироватьТаблицуПоВР(ИмяЯчейки,ДоходыВычетыНалогиСотрудников,ТаблицаРасшифровокПоВР,ТекущаяСтрокаИтоговойТаблицы,5,,,5);
		
		ИмяЯчейки = "П"+МесяцСтрокой+"29";
		Буфер.ДобавитьЗначение(Формат(ФССУд-ФССУдПредыдМесяца,"Ч018.5."),ИмяЯчейки);
		ТаблицаРасшифровокПоВР=СформироватьТаблицуПоВР(ИмяЯчейки,ДоходыВычетыНалогиСотрудников,ТаблицаРасшифровокПоВР,ТекущаяСтрокаИтоговойТаблицы,8,,,5);
		
		ИмяЯчейки = "П"+МесяцСтрокой+"30";
		Буфер.ДобавитьЗначение(Формат(ФФОМСУд-ФФОМСУдПредыдМесяца,"Ч018.5."),ИмяЯчейки);
		ТаблицаРасшифровокПоВР=СформироватьТаблицуПоВР(ИмяЯчейки,ДоходыВычетыНалогиСотрудников,ТаблицаРасшифровокПоВР,ТекущаяСтрокаИтоговойТаблицы,6,,,5);
		
		ИмяЯчейки = "П"+МесяцСтрокой+"31";
		Буфер.ДобавитьЗначение(Формат(ТФОМСУд-ТФОМСУдПредыдМесяца,"Ч018.5."),ИмяЯчейки);
		ТаблицаРасшифровокПоВР=СформироватьТаблицуПоВР(ИмяЯчейки,ДоходыВычетыНалогиСотрудников,ТаблицаРасшифровокПоВР,ТекущаяСтрокаИтоговойТаблицы,7,,,5);
		
		ИмяЯчейки = "П"+МесяцСтрокой+"32";
		Буфер.ДобавитьЗначение(ПособийЗаСчетФСС-ПособийЗаСчетФССПредыдМесяца,ИмяЯчейки);
		ТаблицаРасшифровокПоВР=СформироватьТаблицуПоВР(ИмяЯчейки,ДоходыВычетыНалогиСотрудников,ТаблицаРасшифровокПоВР,ТекущаяСтрокаИтоговойТаблицы,9);
		
		ИмяЯчейки = "П"+МесяцСтрокой+"33";
		Буфер.ДобавитьЗначение(ДовольствиеВоенных-ДовольствиеВоенныхПредыдМесяца,ИмяЯчейки);
		ТаблицаРасшифровокПоВР=СформироватьТаблицуПоВР(ИмяЯчейки,ДоходыВычетыНалогиСотрудников,ТаблицаРасшифровокПоВР,ТекущаяСтрокаИтоговойТаблицы,11);
			
 		//строка "с начала года"
 		Буфер.Установить("СНГ"+МесяцСтрокой+"02",Формат(НачисленоВсего,"Ч012.2."));
 		Буфер.Установить("СНГ"+МесяцСтрокой+"03",Формат(НачисленоЗаСчетПрибыли,"Ч012.2."));
 		
 		Если РежимПечати = 1 Тогда // печатная форма и форма для ввода несколько различаются
 		Иначе                                                                          
 			Буфер.Установить("СНГ"+МесяцСтрокой+"02а",Формат(Лицензионные,"Ч012.2."));
 			Буфер.Установить("СНГ"+МесяцСтрокой+"02б",Формат(НачисленоЕНВД,"Ч012.2."));					
 			Буфер.Установить("СНГ"+МесяцСтрокой+"02в",Формат(НачисленоИностранцу,"Ч012.2."));
 			Буфер.Установить("СНГ"+МесяцСтрокой+"04а",Формат(ЛьготаПоЕСНп1ст236,"Ч012.2."));
 			Буфер.Установить("СНГ"+МесяцСтрокой+"04б",Формат(ЛьготаПоЕСНп2ст238абз2,"Ч012.2."));
 			Буфер.Установить("СНГ"+МесяцСтрокой+"04в",Формат(ЛьготаПоЕСНп2ст238абз3,"Ч012.2."));
 			Буфер.Установить("СНГ"+МесяцСтрокой+"04г",Формат(ЛьготаПоЕСНпп13п1ст238,"Ч012.2."));
 			Буфер.Установить("СНГ"+МесяцСтрокой+"04д",Формат(ПрочихЛьготПоСт238,"Ч012.2."));
 		КонецЕсли;
 		
 		Буфер.Установить("ВСЕГО_СНГ"+МесяцСтрокой,Формат(ЛьготВсего,"Ч012.2."));
 		Буфер.Установить("СНГ"+МесяцСтрокой+"05",Формат(ДоговораПодряда,"Ч012.2."));
 		Буфер.Установить("СНГ"+МесяцСтрокой+"06",Формат(СодержаниеПрокуроров,"Ч012.2."));
 		
 		Буфер.Установить("НБ_ФБ_СНГ"+МесяцСтрокой,Формат(НачисленоВсего-НачисленоЗаСчетПрибыли-ЛьготВсего-НачисленоЕНВД - ДовольствиеВоенных,"Ч012.2."));
 		Буфер.Установить("НБ_ФСС_СНГ"+МесяцСтрокой,Формат(НачисленоВсего-НачисленоЗаСчетПрибыли-ЛьготВсего-ДоговораПодряда-НачисленоЕНВД - ДовольствиеВоенных,"Ч012.2."));
 		Буфер.Установить("НБ_ОМС_СНГ"+МесяцСтрокой,Формат(НачисленоВсего-НачисленоЗаСчетПрибыли-ЛьготВсего-НачисленоЕНВД - ДовольствиеВоенных,"Ч012.2."));
 		
 		Если (РегрессивнаяШкала = Нет) и (НачисленоВсего <> 0) Тогда
 			Буфер.Установить("СНГ"+МесяцСтрокой+"08",Строка(СтавкиНалогаПФР[1]) + " %");
 			Буфер.Установить("СНГ"+МесяцСтрокой+"10",Строка(СтавкиНалогаФСС[1]) + " %");
 			Буфер.Установить("СНГ"+МесяцСтрокой+"12",Строка(СтавкиНалогаФФОМС[1]+СтавкиНалогаТФОМС[1]) + " %");
 		КонецЕсли;                      
		
 		Буфер.Установить("СНГ"+МесяцСтрокой+"13",Формат(ПФРУд + НеПодлежитУплатеФБ + УдержаноПФРнаСтраховуюПенсию + УдержаноПФРнаНакопительнуюПенсию,"Ч018.5."));
 		Буфер.Установить("СНГ"+МесяцСтрокой+"14",Формат(ФССУд + НеПодлежитУплатеФСС,"Ч018.5."));
 		Буфер.Установить("СНГ"+МесяцСтрокой+"15",Формат(ФФОМСУд + НеПодлежитУплатеФФОМС,"Ч018.5."));
 		Буфер.Установить("СНГ"+МесяцСтрокой+"16",Формат(ТФОМСУд + НеПодлежитУплатеТФОМС,"Ч018.5."));
 		
 		Если (РегрессивнаяШкалаПФР = Нет) и (ОблагаемаяПФР <> 0) Тогда
 			Буфер.Установить("СНГ"+МесяцСтрокой+"18",Строка(СтавкиВзносаПФРСтраховаяЧасть[1])+" %");
 			Буфер.Установить("СНГ"+МесяцСтрокой+"19",Строка(СтавкиВзносаПФРНакопительнаяЧасть[1])+" %");
 		КонецЕсли; 		 		
 		
 		Буфер.Установить("ОБЛ_ПФР_СНГ"+МесяцСтрокой,Формат(ОблагаемаяПФР,"Ч012.2."));				
 		Буфер.Установить("СНГ"+МесяцСтрокой+"20",Формат(УдержаноПФРнаСтраховуюПенсию + УдержаноПФРнаНакопительнуюПенсию,"Ч018.5."));
 		Буфер.Установить("СНГ"+МесяцСтрокой+"21",Формат(УдержаноПФРнаСтраховуюПенсию,"Ч018.5."));				
 		Буфер.Установить("СНГ"+МесяцСтрокой+"22",Формат(УдержаноПФРнаНакопительнуюПенсию,"Ч018.5."));
 		Буфер.Установить("СНГ"+МесяцСтрокой+"23",Формат(НачисленоИнвалиду,"Ч012.2."));
 		Буфер.Установить("СНГ"+МесяцСтрокой+"24",Формат(НеПодлежитУплатеФБ,"Ч018.5."));
 		Буфер.Установить("СНГ"+МесяцСтрокой+"25",Формат(НеПодлежитУплатеФСС,"Ч018.5."));
 		Буфер.Установить("СНГ"+МесяцСтрокой+"26",Формат(НеПодлежитУплатеФФОМС,"Ч018.5."));
 		Буфер.Установить("СНГ"+МесяцСтрокой+"27",Формат(НеПодлежитУплатеТФОМС,"Ч018.5."));				
 		Буфер.Установить("СНГ"+МесяцСтрокой+"28",Формат(ПФРУд,"Ч018.5."));  
 		Буфер.Установить("СНГ"+МесяцСтрокой+"29",Формат(ФССУд,"Ч018.5."));
 		Буфер.Установить("СНГ"+МесяцСтрокой+"30",Формат(ФФОМСУд,"Ч018.5."));
 		Буфер.Установить("СНГ"+МесяцСтрокой+"31",Формат(ТФОМСУд,"Ч018.5."));				
 		Буфер.Установить("СНГ"+МесяцСтрокой+"32",Формат(ПособийЗаСчетФСС,"Ч018.2."));
 		Буфер.Установить("СНГ"+МесяцСтрокой+"33",Формат(ДовольствиеВоенных,"Ч018.2."));		

		ОблагаемаяПФРПредыдМесяца = ОблагаемаяПФР;
		ЕСНОблагаемаяФБПредыдМесяца = ЕСНОблагаемаяФБ;
		ЕСНОблагаемаяФССПредыдМесяца = ЕСНОблагаемаяФСС;
		ЕСНОблагаемаяОМСПредыдМесяца = ЕСНОблагаемаяОМС;
		ПФРУдПредыдМесяца = ПФРУд;
		ФФОМСУдПредыдМесяца = ФФОМСУд;
		ТФОМСУдПредыдМесяца = ТФОМСУд;
		ФССУдПредыдМесяца = ФССУд;                          
		УдержаноПФРнаСтраховуюПенсиюПредыдМесяца = УдержаноПФРнаСтраховуюПенсию;
		УдержаноПФРнаНакопительнуюПенсиюПредыдМесяца = УдержаноПФРнаНакопительнуюПенсию;
		ПособийЗаСчетФССПредыдМесяца = ПособийЗаСчетФСС; 
		НачисленоВсегоПредыдМесяца = НачисленоВсего;
		НачисленоЕНВДПредыдМесяца = НачисленоЕНВД;
		НачисленоИностранцуПредыдМесяца = НачисленоИностранцу;
		ЛьготВсегоПредыдМесяца = ЛьготВсего;
		ЛьготаПоЕСНп1ст236ПредыдМесяца = ЛьготаПоЕСНп1ст236;
		ЛьготаПоЕСНп2ст238абз2ПредыдМесяца = ЛьготаПоЕСНп2ст238абз2;
		ЛьготаПоЕСНп2ст238абз3ПредыдМесяца = ЛьготаПоЕСНп2ст238абз3;
		ЛьготаПоЕСНпп13п1ст238ПредыдМесяца = ЛьготаПоЕСНпп13п1ст238;
		ПрочихЛьготПоСт238ПредыдМесяца = ПрочихЛьготПоСт238;
		НачисленоИнвалидуПредыдМесяца = НачисленоИнвалиду;
		ЛьготПоСт239ПФРПредыдМесяца = ЛьготПоСт239ПФР;
		ЛьготПоСт239ФССПредыдМесяца = ЛьготПоСт239ФСС;
		ЛьготПоСт239ОМСПредыдМесяца = ЛьготПоСт239ОМС;
		
		ДовольствиеВоенныхПредыдМесяца = ДовольствиеВоенных;
		СодержаниеПрокуроровПредыдМесяца = СодержаниеПрокуроров;
		ДоговораПодрядаПредыдМесяца = ДоговораПодряда;
		ЛицензионныеПредыдМесяца = Лицензионные;
		НачисленоЗаСчетПрибылиПредыдМесяца = НачисленоЗаСчетПрибыли;
		ЛьготВсегоПФРПредыдМесяца = ЛьготВсегоПФР;
		ЛьготаПоЕСНп1ст236ПФРПредыдМесяца = ЛьготаПоЕСНп1ст236ПФР;
		ЛьготаПоЕСНп2ст238абз2ПФРПредыдМесяца = ЛьготаПоЕСНп2ст238абз2ПФР;
		ЛьготаПоЕСНп2ст238абз3ПФРПредыдМесяца = ЛьготаПоЕСНп2ст238абз3ПФР;
		ЛьготаПоЕСНпп13п1ст238ПФРПредыдМесяца = ЛьготаПоЕСНпп13п1ст238ПФР;
		ПрочихЛьготПоСт238ПФРПредыдМесяца = ПрочихЛьготПоСт238ПФР;
		ПособийЗаСчетФССПФРПредыдМесяца = ПособийЗаСчетФССПФР;
		
		НеПодлежитУплатеФБПредыдМесяца = НеПодлежитУплатеФБ;
		НеПодлежитУплатеФССПредыдМесяца = НеПодлежитУплатеФСС;
		НеПодлежитУплатеФФОМСПредыдМесяца = НеПодлежитУплатеФФОМС;
		НеПодлежитУплатеТФОМСПредыдМесяца = НеПодлежитУплатеТФОМС;
	КонецЦикла;
	
КонецПроцедуры // глЗаполнитьИндивидуальнуюКарточкуПоЕСН2004()

//******************************************************************************
// глЗаполнитьИндивидуальнуюКарточкуПоОПС(ФизЛицо,Год,РежимПечати,МесяцыИнвалидности[],ДоходыВычетыНалогиСотрудников,СтрокаИтоговойТаблицы,Карточка,Буфер, ПоследнийМесяц = 0)
//
// Параметры:
//		ФизЛицо - эл-т спр Сотрудники, сотрудник (одновременно явл. и физлицом)
//		Год - год, за который заполняется карточка
//		ДоходыВычетыНалогиСотрудников - таблица значений с доходами физлица
//      БуферРазделовСпр - сюда сложим значения ячеек таблицы только по справочникам
//      ТаблицаРасшифровокПоВР - таблица из двух колонок: 1-я- имя области карточки, 2-я- таблица сумм по ВР для этой области
//		ЭтоСвод - если значение 1, то заполняется шапка свода
//
// Описание:
//		заполняет печатную форму индивидуальной карточки по ОПС, как в отчете так и в форме для ввода данных
//
Процедура глЗаполнитьИндивидуальнуюКарточкуПоОПС(ФизЛицо,Год,РежимПечати,ДоходыВычетыНалогиСотрудников,СтрокаИтоговойТаблицы,Буфер,ПоследнийМесяц="",БуферРазделовСпр="",ТаблицаРасшифровокПоВР="",ЭтоСвод = 0,ДопДанныеФизЛица) Экспорт
	
	Перем СтавкиВзносаПФРНакопительнаяЧасть[10];
	Перем СтавкиВзносаПФРСтраховаяЧасть[10];
	Перем ПределыДоходовЕСН[10];
	
	КонецГода = КонГода(Дата(Год,12,15));
	
	Если ТипЗначенияСтр(БуферРазделовСпр)<>"СписокЗначений" Тогда
		БуферРазделовСпр = СоздатьОбъект("СписокЗначений");
	КонецЕсли;
	
	// заполняем "шапку" формы
	Если ЭтоСвод = 0 Тогда
		Буфер.Установить("Название","Индивидуальная карточка учета сумм начисленных выплат и иных вознаграждений, cумм страховых взносов на обязательное пенсионное страхование за "+Год+" год по:");
	Иначе
		Буфер.Установить("Название","Сводная карточка учета сумм начисленных выплат и иных вознаграждений, сумм страховых взносов на обязательное пенсионное страхование за "+Год+" год по:");
	КонецЕсли;
	
	глЗаполнитьШапкуИндивидуальнойКарточки(ФизЛицо,Год,Буфер,0,ЭтоСвод,ДопДанныеФизЛица);
	
	//таблица расшифровок ячеек 
	ТаблицаРасшифровокПоВР=СоздатьОбъект("ТаблицаЗначений");
	ТаблицаРасшифровокПоВР.НоваяКолонка(,"Строка",10); //здесь имя ячейки типа "П0105"
	ТаблицаРасшифровокПоВР.НоваяКолонка(,"ТаблицаЗначений"); //здесь находится таблица сумм по ВР для этой ячейки 	
	
    СтрокаИтоговойТаблицы=?(ПустоеЗначение(СтрокаИтоговойТаблицы)=1,0,СтрокаИтоговойТаблицы);//можно будет забыть передать 0	
	
	// для расчета взносов в ПФР используется отдельная константа
	РегрессивнаяШкалаПФР = ?(Год < 2005, Константа.ИспользоватьРегрессивнуюШкалуПФР.Получить(КонецГода), Да);	
	
	НомерШкалыВзносов = глНомерШкалыСтраховыхВзносовПФР(ФизЛицо);
	КонецГода = КонГода(Дата(Год,12,15));
	
	СписокСтавкиВзносаПФРСтраховаяЧасть = глПолучитьСтавкиЕСН(глПолучитьНалог("ПФР_страх"), КонецГода, НомерШкалыВзносов, 1);
	СписокСтавкиВзносаПФРНакопительнаяЧасть = глПолучитьСтавкиЕСН(глПолучитьНалог("ПФР_нак"), КонецГода, НомерШкалыВзносов, 1);
	СписокПределыДоходовЕСН = глПолучитьСтавкиЕСН(глПолучитьНалог("ЕСН_ФБ"), КонецГода,, 0, 1);
	
	Для Сч = 1 по 10 Цикл
		СтавкиВзносаПФРСтраховаяЧасть[Сч] = СписокСтавкиВзносаПФРСтраховаяЧасть.ПолучитьЗначение(Сч);
		СтавкиВзносаПФРНакопительнаяЧасть[Сч] = СписокСтавкиВзносаПФРНакопительнаяЧасть.ПолучитьЗначение(Сч);
		ПределыДоходовЕСН[Сч] = СписокПределыДоходовЕСН.ПолучитьЗначение(Сч);
	КонецЦикла;		
	
	ОблагаемаяПФР = 0;
	УдержаноПФРнаСтраховуюПенсию = 0;
	УдержаноПФРнаНакопительнуюПенсию = 0;
	УдержаноПФРнаСтраховуюПенсиюВычет = 0;
	УдержаноПФРнаНакопительнуюПенсиюВычет = 0;
	ПособийЗаСчетФСС = 0; 
	НачисленоВсего = 0;
	НачисленоВсегоИностранцу = 0;
	НачисленоЕНВД = 0;
	НачисленоЕНВДИностранцу = 0;
	ЛьготВсего = 0;
	ЛьготаПоЕСНп1ст236 = 0;
	ЛьготаПоЕСНп2ст238абз2 = 0;
	ЛьготаПоЕСНп2ст238абз3 = 0;
	ЛьготаПоЕСНпп13п1ст238 = 0;
	НачисленоЗаСчетПрибыли = 0;
	ПрочихЛьготПоСт238 = 0;
	ВсегоЛьготПоСт238 = 0;
	ЛьготаПоЕСНп1ст236ПФР = 0;
	ЛьготаПоЕСНп2ст238абз2ПФР = 0;
	ЛьготаПоЕСНп2ст238абз3ПФР = 0;
	ЛьготаПоЕСНпп13п1ст238ПФР = 0;
	ПрочихЛьготПоСт238ПФР = 0;
	ПособийЗаСчетФССПФР = 0;
	ВсегоЛьготПоСт238ПФР = 0;
	ОБЛ_ПФР_ЕНВД = 0;
	ДенежноеДовольствие = 0;
	
	ОблагаемаяПФРПредыдМесяца = 0;
	УдержаноПФРнаСтраховуюПенсиюПредыдМесяца = 0;
	УдержаноПФРнаНакопительнуюПенсиюПредыдМесяца = 0;
	УдержаноПФРнаСтраховуюПенсиюВычетПредыдМесяца = 0;
	УдержаноПФРнаНакопительнуюПенсиюВычетПредыдМесяца = 0;
	ПособийЗаСчетФССПредыдМесяца = 0;                          
	НачисленоВсегоПредыдМесяца = 0;
	НачисленоВсегоИностранцуПредыдМесяца = 0;
	НачисленоЕНВДПредыдМесяца = 0;
	НачисленоЕНВДИностранцуПредыдМесяца = 0;
	ЛьготВсегоПредыдМесяца = 0;   	
	ЛьготаПоЕСНп1ст236ПредыдМесяца = 0;
	ЛьготаПоЕСНп2ст238абз2ПредыдМесяца = 0;
	ЛьготаПоЕСНп2ст238абз3ПредыдМесяца = 0;
	ЛьготаПоЕСНпп13п1ст238ПредыдМесяца = 0;
	НачисленоЗаСчетПрибылиПредыдМесяца = 0;
	ВсегоЛьготПоСт238ПредыдМесяца = 0;	
	ПрочихЛьготПоСт238ПредыдМесяца = 0;
	ЛьготВсегоПФРПредыдМесяца = 0;
	ЛьготаПоЕСНп1ст236ПФРПредыдМесяца = 0;
	ЛьготаПоЕСНп2ст238абз2ПФРПредыдМесяца = 0;
	ЛьготаПоЕСНп2ст238абз3ПФРПредыдМесяца = 0;
	ЛьготаПоЕСНпп13п1ст238ПФРПредыдМесяца = 0;
	ПрочихЛьготПоСт238ПФРПредыдМесяца = 0;
	ПособийЗаСчетФССПФРПредыдМесяца = 0; 
    ВсегоЛьготПоСт238ПФРПредыдМесяца = 0;
	ОБЛ_ПФР_ЕНВДПредыдМесяца = 0;
	ДенежноеДовольствиеПредыдМесяца = 0;
	
	СписокПредыдущегоМесяца = "";
	ПоследнийМесяц = 1;
	
		// обойдем помесячно таблицу с данными о доходах
	Для Месяц = 1 По 12 Цикл
		
		// выясним, изменились ли доходы по сравнению с предыдущим месяцем
		СписокДляСравнения = СоздатьОбъект("СписокЗначений");
		ДоходыВычетыНалогиСотрудников.Выгрузить(СписокДляСравнения,СтрокаИтоговойТаблицы+Месяц,СтрокаИтоговойТаблицы+Месяц,"1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25");
		СписокДляСравнения.УдалитьЗначение(1);
		
		Если Месяц>1  Тогда
			// если не изменились - пока ничего выводить не будем
			Если  глСпискиИдентичны(СписокДляСравнения,СписокПредыдущегоМесяца) = 1 Тогда
				Продолжить
			КонецЕсли;
		КонецЕсли; 
		
		СписокПредыдущегоМесяца = СписокДляСравнения;
		
		Если (Месяц > 1) и (ПоследнийМесяц + 1 <= Месяц - 1) Тогда // было пропущено несколько месяцев - выведем только итоговые строки
			
			Для Сч = ПоследнийМесяц + 1 По Месяц - 1 Цикл
				
				МесяцСтрокой=глДополнитьСтроку(Сч,2);
				
				ОБЛ_ПФР_ЕНВД = ОблагаемаяПФР - (НачисленоВсего-НачисленоЗаСчетПрибыли-ВсегоЛьготПоСт238-НачисленоЕНВД);
				
				//строка "с начала года"
				Буфер.Установить("СНГ102"+МесяцСтрокой,Формат(НачисленоВсего - НачисленоЕНВД,"Ч015.2."));
				Буфер.Установить("СНГ103"+МесяцСтрокой,Формат(НачисленоЗаСчетПрибыли,"Ч015.2."));
				
				Если РежимПечати = 0 Тогда // печатная форма и форма для ввода несколько различаются
					Буфер.Установить("СНГ12а"+МесяцСтрокой,Формат(НачисленоВсегоИностранцу - НачисленоЕНВДИностранцу,"Ч012.2."));
					Буфер.Установить("СНГ14а"+МесяцСтрокой,Формат(ЛьготаПоЕСНп1ст236,"Ч012.2."));
					Буфер.Установить("СНГ14б"+МесяцСтрокой,Формат(ЛьготаПоЕСНп2ст238абз2,"Ч012.2."));
					Буфер.Установить("СНГ14в"+МесяцСтрокой,Формат(ЛьготаПоЕСНп2ст238абз3,"Ч012.2."));
					Буфер.Установить("СНГ14г"+МесяцСтрокой,Формат(ЛьготаПоЕСНпп13п1ст238,"Ч012.2."));
					Буфер.Установить("СНГ14д"+МесяцСтрокой,Формат(ПрочихЛьготПоСт238,"Ч012.2."));
					Буфер.Установить("СНГ14е"+МесяцСтрокой,Формат(ПособийЗаСчетФСС,"Ч012.2."));
					Буфер.Установить("СНГ22а"+МесяцСтрокой,Формат(НачисленоЕНВДИностранцу,"Ч012.2."));
					Буфер.Установить("СНГ24а"+МесяцСтрокой,Формат(ЛьготаПоЕСНп1ст236ПФР - ЛьготаПоЕСНп1ст236,"Ч012.2."));
					Буфер.Установить("СНГ24б"+МесяцСтрокой,Формат(ЛьготаПоЕСНп2ст238абз2ПФР - ЛьготаПоЕСНп2ст238абз2,"Ч012.2."));
					Буфер.Установить("СНГ24в"+МесяцСтрокой,Формат(ЛьготаПоЕСНп2ст238абз3ПФР - ЛьготаПоЕСНп2ст238абз3,"Ч012.2."));
					Буфер.Установить("СНГ24г"+МесяцСтрокой,Формат(ЛьготаПоЕСНпп13п1ст238ПФР - ЛьготаПоЕСНпп13п1ст238,"Ч012.2."));
					Буфер.Установить("СНГ24д"+МесяцСтрокой,Формат(ПрочихЛьготПоСт238ПФР - ПрочихЛьготПоСт238,"Ч012.2."));
					Буфер.Установить("СНГ24е"+МесяцСтрокой,Формат(ПособийЗаСчетФССПФР - ПособийЗаСчетФСС,"Ч012.2."));					
					Буфер.Установить("СНГ32а"+МесяцСтрокой,Формат(Буфер.Получить("СНГ12а"+МесяцСтрокой) + Буфер.Получить("СНГ22а"+МесяцСтрокой),"Ч012.2."));				
					Буфер.Установить("СНГ34а"+МесяцСтрокой,Формат(Буфер.Получить("СНГ14а"+МесяцСтрокой) + Буфер.Получить("СНГ24а"+МесяцСтрокой),"Ч012.2."));				
					Буфер.Установить("СНГ34б"+МесяцСтрокой,Формат(Буфер.Получить("СНГ14б"+МесяцСтрокой) + Буфер.Получить("СНГ24б"+МесяцСтрокой),"Ч012.2."));
					Буфер.Установить("СНГ34в"+МесяцСтрокой,Формат(Буфер.Получить("СНГ14в"+МесяцСтрокой) + Буфер.Получить("СНГ24в"+МесяцСтрокой),"Ч012.2."));
					Буфер.Установить("СНГ34г"+МесяцСтрокой,Формат(Буфер.Получить("СНГ14г"+МесяцСтрокой) + Буфер.Получить("СНГ24г"+МесяцСтрокой),"Ч012.2."));
					Буфер.Установить("СНГ34д"+МесяцСтрокой,Формат(Буфер.Получить("СНГ14д"+МесяцСтрокой) + Буфер.Получить("СНГ24д"+МесяцСтрокой),"Ч012.2."));
					Буфер.Установить("СНГ34е"+МесяцСтрокой,Формат(Буфер.Получить("СНГ14е"+МесяцСтрокой) + Буфер.Получить("СНГ24е"+МесяцСтрокой),"Ч012.2."));				
				КонецЕсли;				
				
				Буфер.Установить("СНГ104"+МесяцСтрокой,Формат(ВсегоЛьготПоСт238,"Ч015.2."));
				Буфер.Установить("СНГ105"+МесяцСтрокой,Формат(ОблагаемаяПФР-ОБЛ_ПФР_ЕНВД - НачисленоВсегоИностранцу - НачисленоЕНВДИностранцу,"Ч015.2."));
				
				СНГ108 = 0;
				СНГ109 = 0;
				СНГ110 = 0;
				СНГ208 = 0;
				СНГ209 = 0;
				СНГ210 = 0;				
				Для СчМесяцев = 1 По Сч Цикл
					СчМесяцСтрокой = глДополнитьСтроку(СчМесяцев,2);
					СНГ108 = СНГ108 + Число(Буфер.Получить("П108"+СчМесяцСтрокой));
					СНГ109 = СНГ109 + Число(Буфер.Получить("П109"+СчМесяцСтрокой));
					СНГ110 = СНГ110 + Число(Буфер.Получить("П110"+СчМесяцСтрокой));
					СНГ208 = СНГ208 + Число(Буфер.Получить("П208"+СчМесяцСтрокой));
					СНГ209 = СНГ209 + Число(Буфер.Получить("П209"+СчМесяцСтрокой));
					СНГ210 = СНГ210 + Число(Буфер.Получить("П210"+СчМесяцСтрокой));				
				КонецЦикла; 
				
				Буфер.Установить("СНГ108"+МесяцСтрокой,Формат(СНГ108,"Ч018.5."));				
				Буфер.Установить("СНГ109"+МесяцСтрокой,Формат(СНГ109,"Ч018.5."));
				Буфер.Установить("СНГ110"+МесяцСтрокой,Формат(СНГ110,"Ч018.5."));
				
				Буфер.Установить("СНГ202"+МесяцСтрокой,Формат(НачисленоЕНВД,"Ч015.2."));                                                                                                                                   
				Буфер.Установить("СНГ204"+МесяцСтрокой,Формат(ВсегоЛьготПоСт238ПФР - ВсегоЛьготПоСт238,"Ч015.2."));
				Буфер.Установить("СНГ205"+МесяцСтрокой,Формат(Макс(ОблагаемаяПФР - (НачисленоВсего-НачисленоЗаСчетПрибыли-ВсегоЛьготПоСт238-НачисленоЕНВД),0),"Ч015.2."));
                                                                                                                                    			
				Буфер.Установить("СНГ208"+МесяцСтрокой,Формат(СНГ208,"Ч018.5."));
				Буфер.Установить("СНГ209"+МесяцСтрокой,Формат(СНГ209,"Ч018.5."));
				Буфер.Установить("СНГ210"+МесяцСтрокой,Формат(СНГ210,"Ч018.5."));

				Буфер.Установить("СНГ302"+МесяцСтрокой,Формат(НачисленоВсего,"Ч015.2."));
				Буфер.Установить("СНГ303"+МесяцСтрокой,Формат(НачисленоЗаСчетПрибыли,"Ч015.2."));
				Буфер.Установить("СНГ304"+МесяцСтрокой,Формат(2*ВсегоЛьготПоСт238-ВсегоЛьготПоСт238ПФР,"Ч015.2."));
				Буфер.Установить("СНГ305"+МесяцСтрокой,Формат(ОблагаемаяПФР,"Ч015.2."));
				
				Если (РегрессивнаяШкалаПФР = Нет) и (ЭтоСвод = 0) и (НачисленоВсего <> 0) Тогда
					Буфер.Установить("СНГ106"+МесяцСтрокой,Строка(СтавкиВзносаПФРСтраховаяЧасть[1])+" %");
					Буфер.Установить("СНГ107"+МесяцСтрокой,Строка(СтавкиВзносаПФРНакопительнаяЧасть[1])+" %");										
					Буфер.Установить("СНГ206"+МесяцСтрокой,Строка(СтавкиВзносаПФРСтраховаяЧасть[1])+" %");
					Буфер.Установить("СНГ207"+МесяцСтрокой,Строка(СтавкиВзносаПФРНакопительнаяЧасть[1])+" %");					
					Буфер.Установить("СНГ306"+МесяцСтрокой,Строка(СтавкиВзносаПФРСтраховаяЧасть[1])+" %");
					Буфер.Установить("СНГ307"+МесяцСтрокой,Строка(СтавкиВзносаПФРНакопительнаяЧасть[1])+" %");
				КонецЕсли; 						
				
				Буфер.Установить("СНГ308"+МесяцСтрокой,Формат(УдержаноПФРнаСтраховуюПенсию + УдержаноПФРнаНакопительнуюПенсию,"Ч018.5."));				
				Буфер.Установить("СНГ309"+МесяцСтрокой,Формат(УдержаноПФРнаСтраховуюПенсию,"Ч018.5."));
				Буфер.Установить("СНГ310"+МесяцСтрокой,Формат(УдержаноПФРнаНакопительнуюПенсию,"Ч018.5."));				
				
			КонецЦикла;
			
		КонецЕсли;
		
		ПоследнийМесяц = Месяц;                   
		
		МесяцСтрокой = глДополнитьСтроку(Месяц,2);
		
		// все данные берем из соответствующих колонок таблицы значений
		ТекущаяСтрокаИтоговойТаблицы = СтрокаИтоговойТаблицы+Месяц; // запомним, чтобы 10 раз не считать
		
		УдержаноПФРнаСтраховуюПенсию = ДоходыВычетыНалогиСотрудников.ПолучитьЗначение(ТекущаяСтрокаИтоговойТаблицы,21);
		УдержаноПФРнаНакопительнуюПенсию = ДоходыВычетыНалогиСотрудников.ПолучитьЗначение(ТекущаяСтрокаИтоговойТаблицы,22);
		УдержаноПФРнаСтраховуюПенсиюВычет = ДоходыВычетыНалогиСотрудников.ПолучитьЗначение(ТекущаяСтрокаИтоговойТаблицы,42);
		УдержаноПФРнаНакопительнуюПенсиюВычет = ДоходыВычетыНалогиСотрудников.ПолучитьЗначение(ТекущаяСтрокаИтоговойТаблицы,43);
		
		ПособийЗаСчетФСС = ДоходыВычетыНалогиСотрудников.ПолучитьЗначение(ТекущаяСтрокаИтоговойТаблицы,9);
		        
		НачисленоВсего = ДоходыВычетыНалогиСотрудников.ПолучитьЗначение(ТекущаяСтрокаИтоговойТаблицы,10);                          
		НачисленоВсегоИностранцу = ДоходыВычетыНалогиСотрудников.ПолучитьЗначение(ТекущаяСтрокаИтоговойТаблицы,41);
		НачисленоЕНВД = ДоходыВычетыНалогиСотрудников.ПолучитьЗначение(ТекущаяСтрокаИтоговойТаблицы,25);
		НачисленоЕНВДИностранцу = НачисленоВсегоИностранцу - ДоходыВычетыНалогиСотрудников.ПолучитьЗначение(ТекущаяСтрокаИтоговойТаблицы,33);
		НачисленоЗаСчетПрибыли = ДоходыВычетыНалогиСотрудников.ПолучитьЗначение(ТекущаяСтрокаИтоговойТаблицы,13);
		НачисленоИнвалиду = ДоходыВычетыНалогиСотрудников.ПолучитьЗначение(ТекущаяСтрокаИтоговойТаблицы,20);
		
		ЛьготаПоЕСНп1ст236 = ДоходыВычетыНалогиСотрудников.ПолучитьЗначение(ТекущаяСтрокаИтоговойТаблицы,12);
		ЛьготаПоЕСНп2ст238абз2 = ДоходыВычетыНалогиСотрудников.ПолучитьЗначение(ТекущаяСтрокаИтоговойТаблицы,14);
		ЛьготаПоЕСНп2ст238абз3 = ДоходыВычетыНалогиСотрудников.ПолучитьЗначение(ТекущаяСтрокаИтоговойТаблицы,15);
		ЛьготаПоЕСНпп13п1ст238 = ДоходыВычетыНалогиСотрудников.ПолучитьЗначение(ТекущаяСтрокаИтоговойТаблицы,16);
		ПрочихЛьготПоСт238 = ДоходыВычетыНалогиСотрудников.ПолучитьЗначение(ТекущаяСтрокаИтоговойТаблицы,17);
		                    
		ВсегоЛьготПоСт238 = ПрочихЛьготПоСт238+ЛьготаПоЕСНп1ст236+ЛьготаПоЕСНпп13п1ст238+ЛьготаПоЕСНп2ст238абз3+ЛьготаПоЕСНп2ст238абз2+ПособийЗаСчетФСС;
		ЛьготВсего = ПрочихЛьготПоСт238+ЛьготаПоЕСНп1ст236+ЛьготаПоЕСНпп13п1ст238+ЛьготаПоЕСНп2ст238абз3+
					 ЛьготаПоЕСНп2ст238абз2+ПособийЗаСчетФСС;		

		ЛьготаПоЕСНп1ст236ПФР = ДоходыВычетыНалогиСотрудников.ПолучитьЗначение(ТекущаяСтрокаИтоговойТаблицы,26);
		ЛьготаПоЕСНп2ст238абз2ПФР = ДоходыВычетыНалогиСотрудников.ПолучитьЗначение(ТекущаяСтрокаИтоговойТаблицы,27);
		ЛьготаПоЕСНп2ст238абз3ПФР = ДоходыВычетыНалогиСотрудников.ПолучитьЗначение(ТекущаяСтрокаИтоговойТаблицы,28);
		ЛьготаПоЕСНпп13п1ст238ПФР = ДоходыВычетыНалогиСотрудников.ПолучитьЗначение(ТекущаяСтрокаИтоговойТаблицы,29);
		ПрочихЛьготПоСт238ПФР = ДоходыВычетыНалогиСотрудников.ПолучитьЗначение(ТекущаяСтрокаИтоговойТаблицы,30);
		ПособийЗаСчетФССПФР = ДоходыВычетыНалогиСотрудников.ПолучитьЗначение(ТекущаяСтрокаИтоговойТаблицы,31);

		ЛьготВсегоПФР = ПрочихЛьготПоСт238ПФР+ЛьготаПоЕСНп1ст236ПФР+ЛьготаПоЕСНпп13п1ст238ПФР+ЛьготаПоЕСНп2ст238абз3ПФР+
						ЛьготаПоЕСНп2ст238абз2ПФР+ПособийЗаСчетФССПФР;

		ВсегоЛьготПоСт238ПФР = ПрочихЛьготПоСт238ПФР+ЛьготаПоЕСНп1ст236ПФР+ЛьготаПоЕСНпп13п1ст238ПФР+ЛьготаПоЕСНп2ст238абз3ПФР+ЛьготаПоЕСНп2ст238абз2ПФР+ПособийЗаСчетФССПФР;
				
		ОблагаемаяПФР = Макс(НачисленоВсего-НачисленоВсегоИностранцу-НачисленоЗаСчетПрибыли-ЛьготВсегоПФР,0);
		ОблагаемаяПФРПредыдМесяца = Макс(НачисленоВсегоПредыдМесяца-НачисленоВсегоИностранцуПредыдМесяца-НачисленоЗаСчетПрибылиПредыдМесяца-ЛьготВсегоПФРПредыдМесяца,0);
		
		ОБЛ_ПФР_ЕНВД = Макс((НачисленоЕНВД-НачисленоЕНВДИностранцу-(ЛьготВсегоПФР-ЛьготВсего))
						   -(НачисленоЕНВДПредыдМесяца-НачисленоЕНВДИностранцуПредыдМесяца-(ЛьготВсегоПФРПредыдМесяца-ЛьготВсегоПредыдМесяца)),0);							
		
		Если РежимПечати = 0 Тогда
			ИмяЯчейки = "П12а"+МесяцСтрокой;
			Буфер.ДобавитьЗначение((НачисленоВсегоИностранцу-НачисленоЕНВДИностранцу)-(НачисленоВсегоИностранцуПредыдМесяца-НачисленоЕНВДИностранцуПредыдМесяца),ИмяЯчейки);
	 		
			ИмяЯчейки = "П14а"+МесяцСтрокой;
			Буфер.ДобавитьЗначение(ЛьготаПоЕСНп1ст236-ЛьготаПоЕСНп1ст236ПредыдМесяца,ИмяЯчейки);
	 		ТаблицаРасшифровокПоВР=СформироватьТаблицуПоВР(ИмяЯчейки,ДоходыВычетыНалогиСотрудников,ТаблицаРасшифровокПоВР,ТекущаяСтрокаИтоговойТаблицы,12);		
			
			ИмяЯчейки = "П14б"+МесяцСтрокой;
	 		Буфер.ДобавитьЗначение(ЛьготаПоЕСНп2ст238абз2-ЛьготаПоЕСНп2ст238абз2ПредыдМесяца,ИмяЯчейки);
	 		ТаблицаРасшифровокПоВР=СформироватьТаблицуПоВР(ИмяЯчейки,ДоходыВычетыНалогиСотрудников,ТаблицаРасшифровокПоВР,ТекущаяСтрокаИтоговойТаблицы,14);
	 		
			ИмяЯчейки = "П14в"+МесяцСтрокой;
 			Буфер.ДобавитьЗначение(ЛьготаПоЕСНп2ст238абз3-ЛьготаПоЕСНп2ст238абз3ПредыдМесяца,ИмяЯчейки);
	 		ТаблицаРасшифровокПоВР=СформироватьТаблицуПоВР(ИмяЯчейки,ДоходыВычетыНалогиСотрудников,ТаблицаРасшифровокПоВР,ТекущаяСтрокаИтоговойТаблицы,15);
			
			ИмяЯчейки = "П14г"+МесяцСтрокой;
	 		Буфер.ДобавитьЗначение(ЛьготаПоЕСНпп13п1ст238-ЛьготаПоЕСНпп13п1ст238ПредыдМесяца,ИмяЯчейки);
	 		ТаблицаРасшифровокПоВР=СформироватьТаблицуПоВР(ИмяЯчейки,ДоходыВычетыНалогиСотрудников,ТаблицаРасшифровокПоВР,ТекущаяСтрокаИтоговойТаблицы,16);
	 		
			ИмяЯчейки = "П14д"+МесяцСтрокой;
	 		Буфер.ДобавитьЗначение(ПрочихЛьготПоСт238-ПрочихЛьготПоСт238ПредыдМесяца,ИмяЯчейки);
	 		ТаблицаРасшифровокПоВР=СформироватьТаблицуПоВР(ИмяЯчейки,ДоходыВычетыНалогиСотрудников,ТаблицаРасшифровокПоВР,ТекущаяСтрокаИтоговойТаблицы,17);
	 		
			ИмяЯчейки = "П14е"+МесяцСтрокой;
	 		Буфер.ДобавитьЗначение(ПособийЗаСчетФСС-ПособийЗаСчетФССПредыдМесяца,ИмяЯчейки);
	 		ТаблицаРасшифровокПоВР=СформироватьТаблицуПоВР(ИмяЯчейки,ДоходыВычетыНалогиСотрудников,ТаблицаРасшифровокПоВР,ТекущаяСтрокаИтоговойТаблицы,9);	 		
	 		
			ИмяЯчейки = "П22а"+МесяцСтрокой;
			Буфер.ДобавитьЗначение(НачисленоЕНВДИностранцу-НачисленоЕНВДИностранцуПредыдМесяца,ИмяЯчейки);
	 		
	 		ИмяЯчейки = "П24а"+МесяцСтрокой;
			Буфер.ДобавитьЗначение(ЛьготаПоЕСНп1ст236ПФР-ЛьготаПоЕСНп1ст236ПФРПредыдМесяца - (ЛьготаПоЕСНп1ст236-ЛьготаПоЕСНп1ст236ПредыдМесяца),ИмяЯчейки);
	 		ТаблицаРасшифровокПоВР=СформироватьТаблицуПоВР(ИмяЯчейки,ДоходыВычетыНалогиСотрудников,ТаблицаРасшифровокПоВР,ТекущаяСтрокаИтоговойТаблицы,26);
			
			ИмяЯчейки = "П24б"+МесяцСтрокой;
	 		Буфер.ДобавитьЗначение(ЛьготаПоЕСНп2ст238абз2ПФР-ЛьготаПоЕСНп2ст238абз2ПФРПредыдМесяца - (ЛьготаПоЕСНп2ст238абз2-ЛьготаПоЕСНп2ст238абз2ПредыдМесяца),ИмяЯчейки);
	 		ТаблицаРасшифровокПоВР=СформироватьТаблицуПоВР(ИмяЯчейки,ДоходыВычетыНалогиСотрудников,ТаблицаРасшифровокПоВР,ТекущаяСтрокаИтоговойТаблицы,27);
	 		
			ИмяЯчейки = "П24в"+МесяцСтрокой;
 			Буфер.ДобавитьЗначение(ЛьготаПоЕСНп2ст238абз3ПФР-ЛьготаПоЕСНп2ст238абз3ПФРПредыдМесяца - (ЛьготаПоЕСНп2ст238абз3-ЛьготаПоЕСНп2ст238абз3ПредыдМесяца),ИмяЯчейки);
	 		ТаблицаРасшифровокПоВР=СформироватьТаблицуПоВР(ИмяЯчейки,ДоходыВычетыНалогиСотрудников,ТаблицаРасшифровокПоВР,ТекущаяСтрокаИтоговойТаблицы,28);
		
			ИмяЯчейки = "П24г"+МесяцСтрокой;
	 		Буфер.ДобавитьЗначение(ЛьготаПоЕСНпп13п1ст238ПФР-ЛьготаПоЕСНпп13п1ст238ПФРПредыдМесяца - (ЛьготаПоЕСНпп13п1ст238-ЛьготаПоЕСНпп13п1ст238ПредыдМесяца),ИмяЯчейки);
	 		ТаблицаРасшифровокПоВР=СформироватьТаблицуПоВР(ИмяЯчейки,ДоходыВычетыНалогиСотрудников,ТаблицаРасшифровокПоВР,ТекущаяСтрокаИтоговойТаблицы,29);
	 		
			ИмяЯчейки = "П24д"+МесяцСтрокой;
	 		Буфер.ДобавитьЗначение(ПрочихЛьготПоСт238ПФР-ПрочихЛьготПоСт238ПФРПредыдМесяца - (ПрочихЛьготПоСт238-ПрочихЛьготПоСт238ПредыдМесяца),ИмяЯчейки);
	 		ТаблицаРасшифровокПоВР=СформироватьТаблицуПоВР(ИмяЯчейки,ДоходыВычетыНалогиСотрудников,ТаблицаРасшифровокПоВР,ТекущаяСтрокаИтоговойТаблицы,30);
	 		
			ИмяЯчейки = "П24е"+МесяцСтрокой;
	 		Буфер.ДобавитьЗначение(ПособийЗаСчетФССПФР-ПособийЗаСчетФССПФРПредыдМесяца - (ПособийЗаСчетФСС-ПособийЗаСчетФССПредыдМесяца),ИмяЯчейки);
	 		ТаблицаРасшифровокПоВР=СформироватьТаблицуПоВР(ИмяЯчейки,ДоходыВычетыНалогиСотрудников,ТаблицаРасшифровокПоВР,ТекущаяСтрокаИтоговойТаблицы,31);
	 		
			ИмяЯчейки = "П32а"+МесяцСтрокой;
			Буфер.ДобавитьЗначение(НачисленоВсегоИностранцу-НачисленоВсегоИностранцуПредыдМесяца,ИмяЯчейки);
	 		
	 		ИмяЯчейки = "П34а"+МесяцСтрокой;
			Буфер.ДобавитьЗначение(Число(Буфер.Получить("П14а"+МесяцСтрокой))+Число(Буфер.Получить("П24а"+МесяцСтрокой)),ИмяЯчейки);
			
			ИмяЯчейки = "П34б"+МесяцСтрокой;
			Буфер.ДобавитьЗначение(Число(Буфер.Получить("П14б"+МесяцСтрокой))+Число(Буфер.Получить("П24б"+МесяцСтрокой)),ИмяЯчейки);
			
			ИмяЯчейки = "П34в"+МесяцСтрокой;
			Буфер.ДобавитьЗначение(Число(Буфер.Получить("П14в"+МесяцСтрокой))+Число(Буфер.Получить("П24в"+МесяцСтрокой)),ИмяЯчейки);
			
			ИмяЯчейки = "П34г"+МесяцСтрокой;
			Буфер.ДобавитьЗначение(Число(Буфер.Получить("П14г"+МесяцСтрокой))+Число(Буфер.Получить("П24г"+МесяцСтрокой)),ИмяЯчейки);
	 		
			ИмяЯчейки = "П34д"+МесяцСтрокой;
	 		Буфер.ДобавитьЗначение(Число(Буфер.Получить("П14д"+МесяцСтрокой))+Число(Буфер.Получить("П24д"+МесяцСтрокой)),ИмяЯчейки);

			ИмяЯчейки = "П34е"+МесяцСтрокой;
	 		Буфер.ДобавитьЗначение(Число(Буфер.Получить("П14е"+МесяцСтрокой))+Число(Буфер.Получить("П24е"+МесяцСтрокой)),ИмяЯчейки);
			
		КонецЕсли;				
		
		//строка "за месяц"
		ИмяЯчейки = "П102"+МесяцСтрокой;
		Буфер.ДобавитьЗначение(Формат(НачисленоВсего - НачисленоВсегоПредыдМесяца - (НачисленоЕНВД - НачисленоЕНВДПредыдМесяца),"Ч015.2."),ИмяЯчейки);
		ТаблицаРасшифровокПоВР=СформироватьТаблицуПоВР(ИмяЯчейки,ДоходыВычетыНалогиСотрудников,ТаблицаРасшифровокПоВР,ТекущаяСтрокаИтоговойТаблицы,10,25);

		ИмяЯчейки = "П103"+МесяцСтрокой;
		Буфер.ДобавитьЗначение(Формат(НачисленоЗаСчетПрибыли-НачисленоЗаСчетПрибылиПредыдМесяца,"Ч015.2."),ИмяЯчейки);
		ТаблицаРасшифровокПоВР=СформироватьТаблицуПоВР(ИмяЯчейки,ДоходыВычетыНалогиСотрудников,ТаблицаРасшифровокПоВР,ТекущаяСтрокаИтоговойТаблицы,13);
		
		ИмяЯчейки = "П104"+МесяцСтрокой;
		Буфер.ДобавитьЗначение(Формат(ВсегоЛьготПоСт238 - ВсегоЛьготПоСт238ПредыдМесяца,"Ч015.2."),ИмяЯчейки);
		
		ИмяЯчейки = "П105"+МесяцСтрокой;
		Буфер.ДобавитьЗначение(Формат(ОблагаемаяПФР - ОблагаемаяПФРПредыдМесяца - ОБЛ_ПФР_ЕНВД,"Ч015.2."),ИмяЯчейки);
		
		ИмяЯчейки = "П108"+МесяцСтрокой;
		Буфер.ДобавитьЗначение(Формат((УдержаноПФРнаСтраховуюПенсиюВычет - УдержаноПФРнаСтраховуюПенсиюВычетПредыдМесяца) + (УдержаноПФРнаНакопительнуюПенсиюВычет - УдержаноПФРнаНакопительнуюПенсиюВычетПредыдМесяца),"Ч018.5."),ИмяЯчейки);

		ИмяЯчейки = "П109"+МесяцСтрокой;
		Буфер.ДобавитьЗначение(Формат(УдержаноПФРнаСтраховуюПенсиюВычет - УдержаноПФРнаСтраховуюПенсиюВычетПредыдМесяца,"Ч018.5."),ИмяЯчейки);

		ИмяЯчейки = "П110"+МесяцСтрокой;
		Буфер.ДобавитьЗначение(Формат(УдержаноПФРнаНакопительнуюПенсиюВычет - УдержаноПФРнаНакопительнуюПенсиюВычетПредыдМесяца,"Ч018.5."),ИмяЯчейки);
		
		ИмяЯчейки = "П202"+МесяцСтрокой;
		Буфер.ДобавитьЗначение(Формат(НачисленоЕНВД - НачисленоЕНВДПредыдМесяца,"Ч015.2."),ИмяЯчейки);

	 	ТаблицаРасшифровокПоВР=СформироватьТаблицуПоВР(ИмяЯчейки,ДоходыВычетыНалогиСотрудников,ТаблицаРасшифровокПоВР,ТекущаяСтрокаИтоговойТаблицы,25);
		 
		ИмяЯчейки = "П204"+МесяцСтрокой;
		Буфер.ДобавитьЗначение(Формат((ВсегоЛьготПоСт238ПФР - ВсегоЛьготПоСт238ПФРПредыдМесяца) - (ВсегоЛьготПоСт238 - ВсегоЛьготПоСт238ПредыдМесяца),"Ч015.2."),ИмяЯчейки);		
				
		ИмяЯчейки = "П205"+МесяцСтрокой;
		Буфер.ДобавитьЗначение(Формат(ОБЛ_ПФР_ЕНВД,"Ч015.2."),ИмяЯчейки);
		
		ИмяЯчейки = "П208"+МесяцСтрокой;
		Буфер.ДобавитьЗначение(Формат((УдержаноПФРнаСтраховуюПенсию - УдержаноПФРнаСтраховуюПенсиюВычет) + 
									  (УдержаноПФРнаНакопительнуюПенсию - УдержаноПФРнаНакопительнуюПенсиюВычет) - 
									  (УдержаноПФРнаСтраховуюПенсиюПредыдМесяца - УдержаноПФРнаСтраховуюПенсиюВычетПредыдМесяца) - 
									  (УдержаноПФРнаНакопительнуюПенсиюПредыдМесяца - УдержаноПФРнаНакопительнуюПенсиюВычетПредыдМесяца),"Ч018.5."),ИмяЯчейки);
				
		ИмяЯчейки = "П209"+МесяцСтрокой;		
		Буфер.ДобавитьЗначение(Формат((УдержаноПФРнаСтраховуюПенсию - УдержаноПФРнаСтраховуюПенсиюВычет) - (УдержаноПФРнаСтраховуюПенсиюПредыдМесяца - УдержаноПФРнаСтраховуюПенсиюВычетПредыдМесяца),"Ч018.5."),ИмяЯчейки);
		
		ИмяЯчейки = "П210"+МесяцСтрокой;
		Буфер.ДобавитьЗначение(Формат((УдержаноПФРнаНакопительнуюПенсию - УдержаноПФРнаНакопительнуюПенсиюВычет) - (УдержаноПФРнаНакопительнуюПенсиюПредыдМесяца - УдержаноПФРнаНакопительнуюПенсиюВычетПредыдМесяца),"Ч018.5."),ИмяЯчейки);

		ИмяЯчейки = "П302"+МесяцСтрокой;
		Буфер.ДобавитьЗначение(Формат(НачисленоВсего - НачисленоВсегоПредыдМесяца,"Ч015.2."),ИмяЯчейки);
		ТаблицаРасшифровокПоВР=СформироватьТаблицуПоВР(ИмяЯчейки,ДоходыВычетыНалогиСотрудников,ТаблицаРасшифровокПоВР,ТекущаяСтрокаИтоговойТаблицы,10);
		
		ИмяЯчейки = "П303"+МесяцСтрокой;
		Буфер.ДобавитьЗначение(Формат(НачисленоЗаСчетПрибыли-НачисленоЗаСчетПрибылиПредыдМесяца,"Ч015.2."),ИмяЯчейки);

		ТаблицаРасшифровокПоВР=СформироватьТаблицуПоВР(ИмяЯчейки,ДоходыВычетыНалогиСотрудников,ТаблицаРасшифровокПоВР,ТекущаяСтрокаИтоговойТаблицы,13);		
		
		ИмяЯчейки = "П304"+МесяцСтрокой;
		Буфер.ДобавитьЗначение(Формат(Число(Буфер.Получить("П104"+МесяцСтрокой)) + Число(Буфер.Получить("П204"+МесяцСтрокой)),"Ч015.2."),ИмяЯчейки);
		
		ИмяЯчейки = "П305"+МесяцСтрокой;
		Буфер.ДобавитьЗначение(Формат(ОблагаемаяПФР - ОблагаемаяПФРПредыдМесяца,"Ч015.2."),ИмяЯчейки);
		
		Если (РегрессивнаяШкалаПФР = Да) и (ЭтоСвод = 0) Тогда
			Если ((ОблагаемаяПФР - ОблагаемаяПФРПредыдМесяца) - (Макс((НачисленоЕНВД-НачисленоЕНВДИностранцу-(ЛьготВсегоПФР-ЛьготВсего))
						   -(НачисленоЕНВДПредыдМесяца-НачисленоЕНВДИностранцуПредыдМесяца-(ЛьготВсегоПФРПредыдМесяца-ЛьготВсегоПредыдМесяца)),0))) <> 0 Тогда
			    Если ОблагаемаяПФР <= ПределыДоходовЕСН[1] Тогда
					Буфер.ДобавитьЗначение(Строка(СтавкиВзносаПФРСтраховаяЧасть[1])+" %","П106"+МесяцСтрокой);
					Буфер.ДобавитьЗначение(Строка(СтавкиВзносаПФРНакопительнаяЧасть[1])+" %","П107"+МесяцСтрокой);
				ИначеЕсли ОблагаемаяПФР <= ПределыДоходовЕСН[2] Тогда
					Буфер.ДобавитьЗначение(Строка(ПределыДоходовЕСН[1]*СтавкиВзносаПФРСтраховаяЧасть[1]/100 + " руб.") + РазделительСтрок + Строка(СтавкиВзносаПФРСтраховаяЧасть[2])+" %","П106"+МесяцСтрокой);
					Буфер.ДобавитьЗначение(Строка(ПределыДоходовЕСН[1]*СтавкиВзносаПФРНакопительнаяЧасть[1]/100 + " руб.") + РазделительСтрок + Строка(СтавкиВзносаПФРНакопительнаяЧасть[2])+" %","П107"+МесяцСтрокой);
				ИначеЕсли ОблагаемаяПФР <= ПределыДоходовЕСН[3] Тогда
					Буфер.ДобавитьЗначение(Строка(ПределыДоходовЕСН[1]*СтавкиВзносаПФРСтраховаяЧасть[1]/100 + (ПределыДоходовЕСН[2]-ПределыДоходовЕСН[1])*СтавкиВзносаПФРСтраховаяЧасть[2]/100 + " руб.") + РазделительСтрок + Строка(СтавкиВзносаПФРСтраховаяЧасть[3])+" %","П106"+МесяцСтрокой);
					Буфер.ДобавитьЗначение(Строка(ПределыДоходовЕСН[1]*СтавкиВзносаПФРНакопительнаяЧасть[1]/100 + (ПределыДоходовЕСН[2]-ПределыДоходовЕСН[1])*СтавкиВзносаПФРНакопительнаяЧасть[2]/100 + " руб.") + РазделительСтрок + Строка(СтавкиВзносаПФРНакопительнаяЧасть[3])+" %","П107"+МесяцСтрокой);
				Иначе
					Буфер.ДобавитьЗначение(Строка((ПределыДоходовЕСН[3]-ПределыДоходовЕСН[2])*СтавкиВзносаПФРСтраховаяЧасть[3]/100+ ПределыДоходовЕСН[1]*СтавкиВзносаПФРСтраховаяЧасть[1]/100 + (ПределыДоходовЕСН[2]-ПределыДоходовЕСН[1])*СтавкиВзносаПФРСтраховаяЧасть[2]/100 + " руб.")
											+ РазделительСтрок + Строка(СтавкиВзносаПФРСтраховаяЧасть[4])+" %","П106"+МесяцСтрокой);
					Буфер.ДобавитьЗначение(Строка((ПределыДоходовЕСН[3]-ПределыДоходовЕСН[2])*СтавкиВзносаПФРНакопительнаяЧасть[3]/100+ ПределыДоходовЕСН[1]*СтавкиВзносаПФРНакопительнаяЧасть[1]/100 + (ПределыДоходовЕСН[2]-ПределыДоходовЕСН[1])*СтавкиВзносаПФРНакопительнаяЧасть[2]/100 + " руб.")
											+ РазделительСтрок + Строка(СтавкиВзносаПФРНакопительнаяЧасть[4])+" %","П107"+МесяцСтрокой);
				КонецЕсли;
			КонецЕсли;
			
			Если (Макс((НачисленоЕНВД-НачисленоЕНВДИностранцу-(ЛьготВсегоПФР-ЛьготВсего))
						   -(НачисленоЕНВДПредыдМесяца-НачисленоЕНВДИностранцуПредыдМесяца-(ЛьготВсегоПФРПредыдМесяца-ЛьготВсегоПредыдМесяца)),0)) <> 0 Тогда
				Если ОблагаемаяПФР <= ПределыДоходовЕСН[1] Тогда
					Буфер.ДобавитьЗначение(Строка(СтавкиВзносаПФРСтраховаяЧасть[1])+" %","П206"+МесяцСтрокой);
					Буфер.ДобавитьЗначение(Строка(СтавкиВзносаПФРНакопительнаяЧасть[1])+" %","П207"+МесяцСтрокой);
				ИначеЕсли ОблагаемаяПФР <= ПределыДоходовЕСН[2] Тогда
					Буфер.ДобавитьЗначение(Строка(ПределыДоходовЕСН[1]*СтавкиВзносаПФРСтраховаяЧасть[1]/100 + " руб.") + РазделительСтрок + Строка(СтавкиВзносаПФРСтраховаяЧасть[2])+" %","П206"+МесяцСтрокой);
					Буфер.ДобавитьЗначение(Строка(ПределыДоходовЕСН[1]*СтавкиВзносаПФРНакопительнаяЧасть[1]/100 + " руб.") + РазделительСтрок + Строка(СтавкиВзносаПФРНакопительнаяЧасть[2])+" %","П207"+МесяцСтрокой);
				ИначеЕсли ОблагаемаяПФР <= ПределыДоходовЕСН[3] Тогда
					Буфер.ДобавитьЗначение(Строка(ПределыДоходовЕСН[1]*СтавкиВзносаПФРСтраховаяЧасть[1]/100 + (ПределыДоходовЕСН[2]-ПределыДоходовЕСН[1])*СтавкиВзносаПФРСтраховаяЧасть[2]/100 + " руб.") + РазделительСтрок + Строка(СтавкиВзносаПФРСтраховаяЧасть[3])+" %","П206"+МесяцСтрокой);
					Буфер.ДобавитьЗначение(Строка(ПределыДоходовЕСН[1]*СтавкиВзносаПФРНакопительнаяЧасть[1]/100 + (ПределыДоходовЕСН[2]-ПределыДоходовЕСН[1])*СтавкиВзносаПФРНакопительнаяЧасть[2]/100 + " руб.") + РазделительСтрок + Строка(СтавкиВзносаПФРНакопительнаяЧасть[3])+" %","П207"+МесяцСтрокой);
				Иначе
					Буфер.ДобавитьЗначение(Строка((ПределыДоходовЕСН[3]-ПределыДоходовЕСН[2])*СтавкиВзносаПФРСтраховаяЧасть[3]/100+ ПределыДоходовЕСН[1]*СтавкиВзносаПФРСтраховаяЧасть[1]/100 + (ПределыДоходовЕСН[2]-ПределыДоходовЕСН[1])*СтавкиВзносаПФРСтраховаяЧасть[2]/100 + " руб.")
											+ РазделительСтрок + Строка(СтавкиВзносаПФРСтраховаяЧасть[4])+" %","П206"+МесяцСтрокой);
					Буфер.ДобавитьЗначение(Строка((ПределыДоходовЕСН[3]-ПределыДоходовЕСН[2])*СтавкиВзносаПФРНакопительнаяЧасть[3]/100+ ПределыДоходовЕСН[1]*СтавкиВзносаПФРНакопительнаяЧасть[1]/100 + (ПределыДоходовЕСН[2]-ПределыДоходовЕСН[1])*СтавкиВзносаПФРНакопительнаяЧасть[2]/100 + " руб.")
											+ РазделительСтрок + Строка(СтавкиВзносаПФРНакопительнаяЧасть[4])+" %","П207"+МесяцСтрокой);
				КонецЕсли;    
			КонецЕсли;
			
			Если (ОблагаемаяПФР-ОблагаемаяПФРПредыдМесяца) <> 0 Тогда
			    Если ОблагаемаяПФР <= ПределыДоходовЕСН[1] Тогда
					Буфер.ДобавитьЗначение(Строка(СтавкиВзносаПФРСтраховаяЧасть[1])+" %","П306"+МесяцСтрокой);
					Буфер.ДобавитьЗначение(Строка(СтавкиВзносаПФРНакопительнаяЧасть[1])+" %","П307"+МесяцСтрокой);
				ИначеЕсли ОблагаемаяПФР <= ПределыДоходовЕСН[2] Тогда
					Буфер.ДобавитьЗначение(Строка(ПределыДоходовЕСН[1]*СтавкиВзносаПФРСтраховаяЧасть[1]/100 + " руб.") + РазделительСтрок + Строка(СтавкиВзносаПФРСтраховаяЧасть[2])+" %","П306"+МесяцСтрокой);
					Буфер.ДобавитьЗначение(Строка(ПределыДоходовЕСН[1]*СтавкиВзносаПФРНакопительнаяЧасть[1]/100 + " руб.") + РазделительСтрок + Строка(СтавкиВзносаПФРНакопительнаяЧасть[2])+" %","П307"+МесяцСтрокой);
				ИначеЕсли ОблагаемаяПФР <= ПределыДоходовЕСН[3] Тогда
					Буфер.ДобавитьЗначение(Строка(ПределыДоходовЕСН[1]*СтавкиВзносаПФРСтраховаяЧасть[1]/100 + (ПределыДоходовЕСН[2]-ПределыДоходовЕСН[1])*СтавкиВзносаПФРСтраховаяЧасть[2]/100 + " руб.") + РазделительСтрок + Строка(СтавкиВзносаПФРСтраховаяЧасть[3])+" %","П306"+МесяцСтрокой);
					Буфер.ДобавитьЗначение(Строка(ПределыДоходовЕСН[1]*СтавкиВзносаПФРНакопительнаяЧасть[1]/100 + (ПределыДоходовЕСН[2]-ПределыДоходовЕСН[1])*СтавкиВзносаПФРНакопительнаяЧасть[2]/100 + " руб.") + РазделительСтрок + Строка(СтавкиВзносаПФРНакопительнаяЧасть[3])+" %","П307"+МесяцСтрокой);
				Иначе
					Буфер.ДобавитьЗначение(Строка((ПределыДоходовЕСН[3]-ПределыДоходовЕСН[2])*СтавкиВзносаПФРСтраховаяЧасть[3]/100+ ПределыДоходовЕСН[1]*СтавкиВзносаПФРСтраховаяЧасть[1]/100 + (ПределыДоходовЕСН[2]-ПределыДоходовЕСН[1])*СтавкиВзносаПФРСтраховаяЧасть[2]/100 + " руб.")
											+ РазделительСтрок + Строка(СтавкиВзносаПФРСтраховаяЧасть[4])+" %","П306"+МесяцСтрокой);
					Буфер.ДобавитьЗначение(Строка((ПределыДоходовЕСН[3]-ПределыДоходовЕСН[2])*СтавкиВзносаПФРНакопительнаяЧасть[3]/100+ ПределыДоходовЕСН[1]*СтавкиВзносаПФРНакопительнаяЧасть[1]/100 + (ПределыДоходовЕСН[2]-ПределыДоходовЕСН[1])*СтавкиВзносаПФРНакопительнаяЧасть[2]/100 + " руб.")
											+ РазделительСтрок + Строка(СтавкиВзносаПФРНакопительнаяЧасть[4])+" %","П307"+МесяцСтрокой);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли; 		
		
		ИмяЯчейки = "П308"+МесяцСтрокой;
		Буфер.ДобавитьЗначение(Формат(УдержаноПФРнаСтраховуюПенсию + УдержаноПФРнаНакопительнуюПенсию - (УдержаноПФРнаСтраховуюПенсиюПредыдМесяца + УдержаноПФРнаНакопительнуюПенсиюПредыдМесяца),"Ч018.5."),ИмяЯчейки);

		ИмяЯчейки = "П309"+МесяцСтрокой;
		Буфер.ДобавитьЗначение(Формат(УдержаноПФРнаСтраховуюПенсию - УдержаноПФРнаСтраховуюПенсиюПредыдМесяца,"Ч018.5."),ИмяЯчейки);
 		ТаблицаРасшифровокПоВР=СформироватьТаблицуПоВР(ИмяЯчейки,ДоходыВычетыНалогиСотрудников,ТаблицаРасшифровокПоВР,ТекущаяСтрокаИтоговойТаблицы,21,,,5); 		

		ИмяЯчейки = "П310"+МесяцСтрокой;
		Буфер.ДобавитьЗначение(Формат(УдержаноПФРнаНакопительнуюПенсию - УдержаноПФРнаНакопительнуюПенсиюПредыдМесяца,"Ч018.5."),ИмяЯчейки);
 		ТаблицаРасшифровокПоВР=СформироватьТаблицуПоВР(ИмяЯчейки,ДоходыВычетыНалогиСотрудников,ТаблицаРасшифровокПоВР,ТекущаяСтрокаИтоговойТаблицы,22,,,5);						
		
		//строка "с начала года"
		ОБЛ_ПФР_ЕНВД = Макс(НачисленоЕНВД-НачисленоЕНВДИностранцу-(ЛьготВсегоПФР-ЛьготВсего),0);
		
		Буфер.Установить("СНГ102"+МесяцСтрокой,Формат(НачисленоВсего - НачисленоЕНВД,"Ч015.2."));
		Буфер.Установить("СНГ103"+МесяцСтрокой,Формат(НачисленоЗаСчетПрибыли,"Ч015.2."));
		Если РежимПечати = 0 Тогда // печатная форма и форма для ввода несколько различаются
			Буфер.Установить("СНГ12а"+МесяцСтрокой,Формат(НачисленоВсегоИностранцу-НачисленоЕНВДИностранцу,"Ч012.2."));
			Буфер.Установить("СНГ14а"+МесяцСтрокой,Формат(ЛьготаПоЕСНп1ст236,"Ч012.2."));
			Буфер.Установить("СНГ14б"+МесяцСтрокой,Формат(ЛьготаПоЕСНп2ст238абз2,"Ч012.2."));
			Буфер.Установить("СНГ14в"+МесяцСтрокой,Формат(ЛьготаПоЕСНп2ст238абз3,"Ч012.2."));
			Буфер.Установить("СНГ14г"+МесяцСтрокой,Формат(ЛьготаПоЕСНпп13п1ст238,"Ч012.2."));
			Буфер.Установить("СНГ14д"+МесяцСтрокой,Формат(ПрочихЛьготПоСт238,"Ч012.2."));
			Буфер.Установить("СНГ14е"+МесяцСтрокой,Формат(ПособийЗаСчетФСС,"Ч012.2."));
			Буфер.Установить("СНГ22а"+МесяцСтрокой,Формат(НачисленоЕНВДИностранцу,"Ч012.2."));
			Буфер.Установить("СНГ24а"+МесяцСтрокой,Формат(ЛьготаПоЕСНп1ст236ПФР - ЛьготаПоЕСНп1ст236,"Ч012.2."));
			Буфер.Установить("СНГ24б"+МесяцСтрокой,Формат(ЛьготаПоЕСНп2ст238абз2ПФР - ЛьготаПоЕСНп2ст238абз2,"Ч012.2."));
			Буфер.Установить("СНГ24в"+МесяцСтрокой,Формат(ЛьготаПоЕСНп2ст238абз3ПФР - ЛьготаПоЕСНп2ст238абз3,"Ч012.2."));
			Буфер.Установить("СНГ24г"+МесяцСтрокой,Формат(ЛьготаПоЕСНпп13п1ст238ПФР - ЛьготаПоЕСНпп13п1ст238,"Ч012.2."));
			Буфер.Установить("СНГ24д"+МесяцСтрокой,Формат(ПрочихЛьготПоСт238ПФР - ПрочихЛьготПоСт238,"Ч012.2."));
			Буфер.Установить("СНГ24е"+МесяцСтрокой,Формат(ПособийЗаСчетФССПФР - ПособийЗаСчетФСС,"Ч012.2."));					
			Буфер.Установить("СНГ32а"+МесяцСтрокой,Формат(Число(Буфер.Получить("СНГ12а"+МесяцСтрокой))+ Число(Буфер.Получить("СНГ22а"+МесяцСтрокой)),"Ч012.2."));
			Буфер.Установить("СНГ34а"+МесяцСтрокой,Формат(Число(Буфер.Получить("СНГ14а"+МесяцСтрокой))+ Число(Буфер.Получить("СНГ24а"+МесяцСтрокой)),"Ч012.2."));
			Буфер.Установить("СНГ34б"+МесяцСтрокой,Формат(Число(Буфер.Получить("СНГ14б"+МесяцСтрокой)) + Число(Буфер.Получить("СНГ24б"+МесяцСтрокой)),"Ч012.2."));
			Буфер.Установить("СНГ34в"+МесяцСтрокой,Формат(Число(Буфер.Получить("СНГ14в"+МесяцСтрокой)) + Число(Буфер.Получить("СНГ24в"+МесяцСтрокой)),"Ч012.2."));
			Буфер.Установить("СНГ34г"+МесяцСтрокой,Формат(Число(Буфер.Получить("СНГ14г"+МесяцСтрокой)) + Число(Буфер.Получить("СНГ24г"+МесяцСтрокой)),"Ч012.2."));
			Буфер.Установить("СНГ34д"+МесяцСтрокой,Формат(Число(Буфер.Получить("СНГ14д"+МесяцСтрокой)) + Число(Буфер.Получить("СНГ24д"+МесяцСтрокой)),"Ч012.2."));
			Буфер.Установить("СНГ34е"+МесяцСтрокой,Формат(Число(Буфер.Получить("СНГ14е"+МесяцСтрокой)) + Число(Буфер.Получить("СНГ24е"+МесяцСтрокой)),"Ч012.2."));				
		КонецЕсли;				
		Буфер.Установить("СНГ104"+МесяцСтрокой,Формат(ВсегоЛьготПоСт238,"Ч015.2."));
		Буфер.Установить("СНГ105"+МесяцСтрокой,Формат(ОблагаемаяПФР-ОБЛ_ПФР_ЕНВД,"Ч015.2."));
		
		СНГ108 = 0;
		СНГ109 = 0;
		СНГ110 = 0;
		СНГ208 = 0;
		СНГ209 = 0;
		СНГ210 = 0;				
		Для СчМесяцев = 1 По Месяц Цикл
			СНГ108 = СНГ108 + Число(Буфер.Получить("П108"+глДополнитьСтроку(СчМесяцев,2)));
			СНГ109 = СНГ109 + Число(Буфер.Получить("П109"+глДополнитьСтроку(СчМесяцев,2)));
			СНГ110 = СНГ110 + Число(Буфер.Получить("П110"+глДополнитьСтроку(СчМесяцев,2)));
			СНГ208 = СНГ208 + Число(Буфер.Получить("П208"+глДополнитьСтроку(СчМесяцев,2)));
			СНГ209 = СНГ209 + Число(Буфер.Получить("П209"+глДополнитьСтроку(СчМесяцев,2)));
			СНГ210 = СНГ210 + Число(Буфер.Получить("П210"+глДополнитьСтроку(СчМесяцев,2)));				
		КонецЦикла;		
		
		Буфер.Установить("СНГ108"+МесяцСтрокой,Формат(СНГ108,"Ч018.5."));				
		Буфер.Установить("СНГ109"+МесяцСтрокой,Формат(СНГ109,"Ч018.5."));
		Буфер.Установить("СНГ110"+МесяцСтрокой,Формат(СНГ110,"Ч018.5."));
		
		Буфер.Установить("СНГ202"+МесяцСтрокой,Формат(НачисленоЕНВД,"Ч015.2."));
		Буфер.Установить("СНГ204"+МесяцСтрокой,Формат(ВсегоЛьготПоСт238ПФР - ВсегоЛьготПоСт238,"Ч015.2."));
		Буфер.Установить("СНГ205"+МесяцСтрокой,Формат(ОБЛ_ПФР_ЕНВД,"Ч015.2."));		
		
		Буфер.Установить("СНГ208"+МесяцСтрокой,Формат(СНГ208,"Ч018.5."));				
		Буфер.Установить("СНГ209"+МесяцСтрокой,Формат(СНГ209,"Ч018.5."));
		Буфер.Установить("СНГ210"+МесяцСтрокой,Формат(СНГ210,"Ч018.5."));
		
		Буфер.Установить("СНГ302"+МесяцСтрокой,Формат(НачисленоВсего,"Ч015.2."));
		Буфер.Установить("СНГ303"+МесяцСтрокой,Формат(НачисленоЗаСчетПрибыли,"Ч015.2."));
		Буфер.Установить("СНГ304"+МесяцСтрокой,Число(Буфер.Получить("СНГ104"+МесяцСтрокой))+Число(Буфер.Получить("СНГ204"+МесяцСтрокой)));
		Буфер.Установить("СНГ305"+МесяцСтрокой,Формат(ОблагаемаяПФР,"Ч015.2."));
		
		Если (РегрессивнаяШкалаПФР = Нет) и (ЭтоСвод = 0) и (НачисленоВсего <> 0) Тогда
			Если ОблагаемаяПФР <> 0 Тогда
				Буфер.Установить("СНГ106"+МесяцСтрокой,Строка(СтавкиВзносаПФРСтраховаяЧасть[1])+" %");
				Буфер.Установить("СНГ107"+МесяцСтрокой,Строка(СтавкиВзносаПФРНакопительнаяЧасть[1])+" %");										
			КонецЕсли;
			
			Если (НачисленоЕНВД-НачисленоЕНВДИностранцу-(ЛьготВсегоПФР-ЛьготВсего)) <> 0 Тогда
				Буфер.Установить("СНГ206"+МесяцСтрокой,Строка(СтавкиВзносаПФРСтраховаяЧасть[1])+" %");
				Буфер.Установить("СНГ207"+МесяцСтрокой,Строка(СтавкиВзносаПФРНакопительнаяЧасть[1])+" %");					
			КонецЕсли;
			
			Если ОблагаемаяПФР <> 0 Тогда
				Буфер.Установить("СНГ306"+МесяцСтрокой,Строка(СтавкиВзносаПФРСтраховаяЧасть[1])+" %");
				Буфер.Установить("СНГ307"+МесяцСтрокой,Строка(СтавкиВзносаПФРНакопительнаяЧасть[1])+" %");
			КонецЕсли;
		КонецЕсли; 				
		
		Буфер.Установить("СНГ308"+МесяцСтрокой,Формат(УдержаноПФРнаСтраховуюПенсию + УдержаноПФРнаНакопительнуюПенсию,"Ч018.5."));				
		Буфер.Установить("СНГ309"+МесяцСтрокой,Формат(УдержаноПФРнаСтраховуюПенсию,"Ч018.5."));
		Буфер.Установить("СНГ310"+МесяцСтрокой,Формат(УдержаноПФРнаНакопительнуюПенсию,"Ч018.5."));			

		ОблагаемаяПФРПредыдМесяца = ОблагаемаяПФР;
		УдержаноПФРнаСтраховуюПенсиюПредыдМесяца = УдержаноПФРнаСтраховуюПенсию;
		УдержаноПФРнаНакопительнуюПенсиюПредыдМесяца = УдержаноПФРнаНакопительнуюПенсию;
		УдержаноПФРнаСтраховуюПенсиюВычетПредыдМесяца = УдержаноПФРнаСтраховуюПенсиюВычет;
		УдержаноПФРнаНакопительнуюПенсиюВычетПредыдМесяца = УдержаноПФРнаНакопительнуюПенсиюВычет;
		ПособийЗаСчетФССПредыдМесяца = ПособийЗаСчетФСС; 
		НачисленоВсегоПредыдМесяца = НачисленоВсего;
		НачисленоВсегоИностранцуПредыдМесяца = НачисленоВсегоИностранцу;
		НачисленоЕНВДПредыдМесяца = НачисленоЕНВД;
		НачисленоЕНВДИностранцуПредыдМесяца = НачисленоЕНВДИностранцу;
		ЛьготВсегоПредыдМесяца = ЛьготВсего;
		ЛьготВсегоПФРПредыдМесяца = ЛьготВсегоПФР;
		ЛьготаПоЕСНп1ст236ПредыдМесяца = ЛьготаПоЕСНп1ст236;
		ЛьготаПоЕСНп2ст238абз2ПредыдМесяца = ЛьготаПоЕСНп2ст238абз2;
		ЛьготаПоЕСНп2ст238абз3ПредыдМесяца = ЛьготаПоЕСНп2ст238абз3;
		ЛьготаПоЕСНпп13п1ст238ПредыдМесяца = ЛьготаПоЕСНпп13п1ст238;
		ПрочихЛьготПоСт238ПредыдМесяца = ПрочихЛьготПоСт238;
		НачисленоЗаСчетПрибылиПредыдМесяца = НачисленоЗаСчетПрибыли;
		ВсегоЛьготПоСт238ПредыдМесяца = ВсегоЛьготПоСт238;
		ЛьготаПоЕСНп1ст236ПФРПредыдМесяца = ЛьготаПоЕСНп1ст236ПФР;
		ЛьготаПоЕСНп2ст238абз2ПФРПредыдМесяца = ЛьготаПоЕСНп2ст238абз2ПФР;
		ЛьготаПоЕСНп2ст238абз3ПФРПредыдМесяца = ЛьготаПоЕСНп2ст238абз3ПФР;
		ЛьготаПоЕСНпп13п1ст238ПФРПредыдМесяца = ЛьготаПоЕСНпп13п1ст238ПФР;
		ПрочихЛьготПоСт238ПФРПредыдМесяца = ПрочихЛьготПоСт238ПФР;
		ПособийЗаСчетФССПФРПредыдМесяца = ПособийЗаСчетФССПФР;
		ВсегоЛьготПоСт238ПФРПредыдМесяца = ВсегоЛьготПоСт238ПФР;
		ОБЛ_ПФР_ЕНВДПредыдМесяца = ОБЛ_ПФР_ЕНВД;
	КонецЦикла;
		
КонецПроцедуры //глЗаполнитьИндивидуальнуюКарточкуПоОПС

//	СформироватьТаблицуПоВРСтраховыеВзносы(ИмяЯчейки,ДоходыВычетыНалогиСотрудников,ТаблицаРасшифровокПоВР,ТекущаяСтрокаИтоговойТаблицы,Разрядность=2)
//
//	Параметры: 
//  	Разрядность - кол-во знаков в колонке "Число", по умолчанию 2
//
//	Описание:
//      
Функция СформироватьТаблицуПоВРСтраховыеВзносы(ИмяЯчейки,ДоходыВычетыНалогиСотрудников,ТаблицаРасшифровокПоВР,ТекущаяСтрокаИтоговойТаблицы,НомерКолонки,Разрядность=2)
	
	Если ДоходыВычетыНалогиСотрудников.КоличествоКолонок() < 80 Тогда
		Возврат ТаблицаРасшифровокПоВР;
	КонецЕсли;
	
	
	//получим таблицу по ВР за этот месяц:
	ПоВР=ДоходыВычетыНалогиСотрудников.ПолучитьЗначение(ТекущаяСтрокаИтоговойТаблицы,"ТаблицаРасшифровки");
	ПоВР.Свернуть("1","2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,39,40,
	|ИсчисленоФСС,ИсчисленоФССИнвалид,ИсчисленоФССЕНВД,ИсчисленоФФОМС,ИсчисленоФФОМСИнвалид,ИсчисленоФФОМСЕНВД,ИсчисленоТФОМС,
	|ИсчисленоТФОМСИнвалид,ИсчисленоТФОМСЕНВД,ИсчисленоПФРНак,ИсчисленоПФРНакИнвалид,ИсчисленоПФРНакЕНВД,
	|ИсчисленоПФРСтрах,ИсчисленоПФРСтрахИнвалид,ИсчисленоПФРСтрахЕНВД,ИсчисленоДопТариф"); 
	
	
	//таблица расшифровки конкретной ячейки ВР-Сумма (для каждой ячейки заполняется заново)
	ПоВРЯчейки=СоздатьОбъект("ТаблицаЗначений");
	ПоВРЯчейки.НоваяКолонка(,"Строка",100); //здесь ВР
	ПоВРЯчейки.НоваяКолонка(,"Число",15,Разрядность); //здесь сумма по этому ВР
	
	//начало формирования таблички по ВР для этой ячейки:
	//сначала сформируем табличку ВР-Сумма:
	Для СчВР = 1 По ПоВР.КоличествоСтрок() Цикл
		
		Сумма = ПоВР.ПолучитьЗначение(СчВР,НомерКолонки);
		
		Если Сумма<> 0 Тогда 
			ПоВРЯчейки.НоваяСтрока();
			ПоВРЯчейки.УстановитьЗначение(ПоВРЯчейки.КоличествоСтрок(),1,ПоВР.ПолучитьЗначение(СчВР,1));
			ПоВРЯчейки.УстановитьЗначение(ПоВРЯчейки.КоличествоСтрок(),2,Сумма);
		КонецЕсли;
		
	КонецЦикла;
	//теперь ее запишем:
	ТаблицаРасшифровокПоВР.НоваяСтрока();
	ТаблицаРасшифровокПоВР.УстановитьЗначение(ТаблицаРасшифровокПоВР.КоличествоСтрок(),1,ИмяЯчейки);
	ТаблицаРасшифровокПоВР.УстановитьЗначение(ТаблицаРасшифровокПоВР.КоличествоСтрок(),2,ПоВРЯчейки);
	//конец формирования таблички по ВР для этой ячейки
	Возврат ТаблицаРасшифровокПоВР;
	
КонецФункции // СформироватьТаблицуПоВР

//******************************************************************************
// глЗаполнитьКарточкаУчетаПоСтраховымВзносам(ФизЛицо,Год,РежимПечати,МесяцыИнвалидности[],ДоходыВычетыНалогиСотрудников,СтрокаИтоговойТаблицы,Карточка,Буфер, ПоследнийМесяц = 0)
//
// Параметры:
//		ФизЛицо - эл-т спр Сотрудники, сотрудник (одновременно явл. и физлицом)
//		Год - год, за который заполняется карточка 
//		РежимПечати: - 0 - для редактирования данных, 1 - печать карточки
//		ДоходыВычетыНалогиСотрудников - таблица значений с доходами физлица
//		СтрокаИтоговойТаблицы - номер первой строки сотрудника в таблице минус 1
//		Буфер - список значений
//      БуферРазделовСпр - сюда сложим значения ячеек таблицы только по справочникам
//      ТаблицаРасшифровокПоВР - таблица из двух колонок: 1-я- имя области карточки, 2-я- таблица сумм по ВР для этой области
//
// Описание:
//		заполняет печатную форму индивидуальной карточки по ОПС, как в отчете так и в форме для ввода данных
//
Процедура глЗаполнитьКарточкаУчетаПоСтраховымВзносам(ФизЛицо,Год,РежимПечати,ДоходыВычетыНалогиСотрудников,СтрокаИтоговойТаблицы,Буфер,ПоследнийМесяцДоходов=0,БуферРазделовСпр="",ТаблицаРасшифровокПоВР="") Экспорт
	
	
	КонецГода = КонГода(Дата(Год,12,15));
	
	Если ТипЗначенияСтр(БуферРазделовСпр)<>"СписокЗначений" Тогда
		БуферРазделовСпр = СоздатьОбъект("СписокЗначений");
	КонецЕсли;  
	
	ТаблицаОсновныхТарифов = глПолучитьТаблицуосновныхТарифов(КонецГода); 
	
	НомерШкалыВзносов = глПолучитНомерШкалыСтраховыхВзносовПФР(ФизЛицо);
	Если НомерШкалыВзносов = 0 Тогда
		Сообщить(СокрЛП(ФизЛицо.Наименование)+": не указана дата рождения, невозможно получить ставку взносов в ПФР!");
	ИначеЕсли НомерШкалыВзносов < 0 Тогда	
		Сообщить(СокрЛП(ФизЛицо.Наименование)+": неправильно указана дата рождения, невозможно получить ставку взносов в ПФР!");
	КонецЕсли;

	//таблица расшифровок ячеек 
	ТаблицаРасшифровокПоВР=СоздатьОбъект("ТаблицаЗначений");
	ТаблицаРасшифровокПоВР.НоваяКолонка(,"Строка",10); //здесь имя ячейки типа "П0105"
	ТаблицаРасшифровокПоВР.НоваяКолонка(,"ТаблицаЗначений"); //здесь находится таблица сумм по ВР для этой ячейки 	
	
	СтрокаИтоговойТаблицы=?(ПустоеЗначение(СтрокаИтоговойТаблицы)=1,0,СтрокаИтоговойТаблицы);//можно будет забыть передать 0	
	 
	// это просто определение переменной
	ОсновнойТариф = Константа.ТарифСтраховыхВзносов.Получить(КонецГода);
	ТаблицаСтавок = глПолучитьТаблицуСтавокСтраховыхВзносовПоТарифам(КонецГода);
	
	Для СчТарифов = 1 По 3 Цикл 
		
		РазлелТаблицы = (СчТарифов-1) * 13;
		ИмяРаздела = ?(СчТарифов = 1,"",?(СчТарифов = 2,"Инвалид","ЕНВД"));
		
		СписокПредыдущегоМесяца = "";
		ПоследнийМесяц = 1; 
		
		НачисленоВсего 		= 0;
		НеЯвляетсяОбъектом  = 0;
		НеОблагаетсяЦеликом = 0;
		РасходыЗаСчетФСС = 0;
		ДенежноеДовольствиеВоеннослужащих = 0;
		ДенежноеСодержаниеПрокуроров = 0;
		Матпомощь = 0;
		МатпомощьПриРожденииРебенка = 0;
		ДоговорыПодряда = 0;
		Авторские = 0;   
		СкидкаМатпомощь = 0;
		СкидкаМатпомощьПриРожденииРебенка = 0;
		СкидкаАвторские = 0;
		
		БазаПФР  = 0;
		БазаФСС  = 0;
		БазаФОМС = 0;
		
		ИсчисленоПФРНак   = 0; 
		ИсчисленоПФРСтрах = 0; 
		ИсчисленоФСС      = 0;
		ИсчисленоТФОМС    = 0;
		ИсчисленоФФОМС	  = 0;
		ИсчисленоДопТариф = 0;
		
		НачисленоВсегоСпр 		= 0;
		НеЯвляетсяОбъектомСпр  = 0;
		НеОблагаетсяЦеликомСпр = 0;
		РасходыЗаСчетФСССпр = 0;
		ДенежноеДовольствиеВоеннослужащихСпр = 0;
		ДенежноеСодержаниеПрокуроровСпр = 0;
		МатпомощьСпр = 0;
		МатпомощьПриРожденииРебенкаСпр = 0;
		ДоговорыПодрядаСпр = 0;
		АвторскиеСпр = 0;   
		СкидкаМатпомощьСпр = 0;
		СкидкаМатпомощьПриРожденииРебенкаСпр = 0;
		СкидкаАвторскиеСпр = 0;
		ИсчисленоПФРНакСпр   = 0; 
		ИсчисленоПФРСтрахСпр = 0; 
		ИсчисленоФСССпр      = 0;
		ИсчисленоТФОМССпр    = 0;
		ИсчисленоФФОМССпр	  = 0;
		ИсчисленоДопТарифСпр = 0;
		
		
		// обойдем помесячно таблицу с данными о доходах
		Для Месяц = 1 По 12 Цикл 
			
			// все данные берем из соответствующих колонок таблицы значений
			ТекущаяСтрокаИтоговойТаблицы = СтрокаИтоговойТаблицы+Месяц; // запомним, чтобы 10 раз не считать
			
			// выясним, изменились ли доходы по сравнению с предыдущим месяцем
			СписокДляСравнения = СоздатьОбъект("СписокЗначений"); 
			Если СчТарифов = 1 Тогда
				ДоходыВычетыНалогиСотрудников.Выгрузить(СписокДляСравнения,СтрокаИтоговойТаблицы+Месяц,СтрокаИтоговойТаблицы+Месяц,"1,2,3,4,5,6,7,8,9,10,11,12,13,14");
			ИначеЕсли СчТарифов = 2 Тогда
				ДоходыВычетыНалогиСотрудников.Выгрузить(СписокДляСравнения,СтрокаИтоговойТаблицы+Месяц,СтрокаИтоговойТаблицы+Месяц,"1,15,16,17,18,19,20,21,22,23,24,25,26,27");
			Иначе
				ДоходыВычетыНалогиСотрудников.Выгрузить(СписокДляСравнения,СтрокаИтоговойТаблицы+Месяц,СтрокаИтоговойТаблицы+Месяц,"1,28,29,30,31,32,33,34,35,36,37,38,39,40");
			КонецЕсли;	
			
			СписокДляСравнения.УдалитьЗначение(1);
			
			Если Месяц>1  Тогда
				// если не изменились - пока ничего выводить не будем
				Если  глСпискиИдентичны(СписокДляСравнения,СписокПредыдущегоМесяца) = 1 Тогда
					Продолжить
				КонецЕсли;
			КонецЕсли; 
			
			СписокПредыдущегоМесяца = СписокДляСравнения;  
			
			Если (Месяц > 1) и (ПоследнийМесяц + 1 <= Месяц - 1) Тогда // было пропущено несколько месяцев - выведем только итоговые строки
				
				Для Сч = ПоследнийМесяц + 1 По Месяц - 1 Цикл
					
					МесяцСтрокой=глДополнитьСтроку(Сч,2);
					
					ИмяЯчейки = "СНГ" + СчТарифов +"02"+МесяцСтрокой;
					Буфер.ДобавитьЗначение(Формат(НачисленоВсего,"Ч015.2."),ИмяЯчейки);
					
					ИмяЯчейки = "СНГ" + СчТарифов +"03"+МесяцСтрокой;
					Буфер.ДобавитьЗначение(Формат(НеЯвляетсяОбъектом,"Ч015.2."),ИмяЯчейки);
					
					ИмяЯчейки = "СНГ" + СчТарифов +"04"+МесяцСтрокой;
					Буфер.ДобавитьЗначение(Формат(НеОблагаетсяЦеликом,"Ч015.2."),ИмяЯчейки);
					
					ИмяЯчейки = "СНГ" + СчТарифов +"05"+МесяцСтрокой;
					Буфер.ДобавитьЗначение(Формат(РасходыЗаСчетФСС,"Ч015.2."),ИмяЯчейки);
					
					ИмяЯчейки = "СНГ" + СчТарифов +"06"+МесяцСтрокой;
					Буфер.ДобавитьЗначение(Формат(ДенежноеДовольствиеВоеннослужащих,"Ч015.2."),ИмяЯчейки);
					
					ИмяЯчейки = "СНГ" + СчТарифов +"07"+МесяцСтрокой;
					Буфер.ДобавитьЗначение(Формат(ДенежноеСодержаниеПрокуроров,"Ч015.2."),ИмяЯчейки);
					
					ИмяЯчейки = "СНГ" + СчТарифов +"09"+МесяцСтрокой;
					Буфер.ДобавитьЗначение(Формат(Матпомощь,"Ч015.2."),ИмяЯчейки);
					
					ИмяЯчейки = "СНГ" + СчТарифов +"08"+МесяцСтрокой;
					Буфер.ДобавитьЗначение(Формат(МатпомощьПриРожденииРебенка,"Ч015.2."),ИмяЯчейки);
					
					ИмяЯчейки = "СНГ" + СчТарифов +"10"+МесяцСтрокой;
					Буфер.ДобавитьЗначение(Формат(ДоговорыПодряда,"Ч015.2."),ИмяЯчейки);
					
					ИмяЯчейки = "СНГ" + СчТарифов +"11"+МесяцСтрокой;
					Буфер.ДобавитьЗначение(Формат(Авторские,"Ч015.2."),ИмяЯчейки);
					
					ИмяЯчейки = "СНГ" + СчТарифов +"12"+МесяцСтрокой;
					Буфер.ДобавитьЗначение(Формат(БазаПФР,"Ч015.2."),ИмяЯчейки);
					
					ИмяЯчейки = "СНГ" + СчТарифов +"13"+МесяцСтрокой;
					Буфер.ДобавитьЗначение(Формат(БазаФСС,"Ч015.2."),ИмяЯчейки);
					
					ИмяЯчейки = "СНГ" + СчТарифов +"14"+МесяцСтрокой;
					Буфер.ДобавитьЗначение(Формат(БазаФОМС,"Ч015.2."),ИмяЯчейки); 
					
					// исчисленные налоги
					
					ИмяЯчейки = "СНГ" + СчТарифов +"16"+МесяцСтрокой;
					Буфер.ДобавитьЗначение(Формат(ИсчисленоПФРНак,"Ч015.2."),ИмяЯчейки);
					
					ИмяЯчейки = "СНГ" + СчТарифов +"18"+МесяцСтрокой;
					Буфер.ДобавитьЗначение(Формат(ИсчисленоПФРСтрах,"Ч015.2."),ИмяЯчейки);
					
					Если СчТарифов = 1 Тогда
						ИмяЯчейки = "СНГ120"+МесяцСтрокой;
						Буфер.ДобавитьЗначение(Формат(ИсчисленоДопТариф,"Ч015.2."),ИмяЯчейки);
					КонецЕсли;
					
					ИмяЯчейки = "СНГ" + СчТарифов +"22"+МесяцСтрокой;
					Буфер.ДобавитьЗначение(Формат(ИсчисленоФСС,"Ч015.2."),ИмяЯчейки);
					
					ИмяЯчейки = "СНГ" + СчТарифов +"24"+МесяцСтрокой;
					Буфер.ДобавитьЗначение(Формат(ИсчисленоФФОМС,"Ч015.2."),ИмяЯчейки);
					
					ИмяЯчейки = "СНГ" + СчТарифов +"26"+МесяцСтрокой;
					Буфер.ДобавитьЗначение(Формат(ИсчисленоТФОМС,"Ч015.2."),ИмяЯчейки);
					
					Если РежимПечати = 0 Тогда
						// для формы ввода данных дополнительно заполним колоки со скидками
						
						ИмяЯчейки = "СНГ" + СчТарифов +"09а"+МесяцСтрокой;
						Буфер.ДобавитьЗначение(Формат(СкидкаМатпомощь,"Ч015.2."),ИмяЯчейки);
						
						ИмяЯчейки = "СНГ" + СчТарифов +"08а"+МесяцСтрокой;
						Буфер.ДобавитьЗначение(Формат(СкидкаМатпомощьПриРожденииРебенка,"Ч015.2."),ИмяЯчейки);
						
						ИмяЯчейки = "СНГ" + СчТарифов +"11а"+МесяцСтрокой;
						Буфер.ДобавитьЗначение(Формат(СкидкаАвторские,"Ч015.2."),ИмяЯчейки);
						
					КонецЕсли;
					
				КонецЦикла;
				
			КонецЕсли;
			
			ПоследнийМесяц = Месяц; 
			
			МесяцСтрокой=глДополнитьСтроку(Месяц,2);
				
			НачисленоВсего 		= ДоходыВычетыНалогиСотрудников.ПолучитьЗначение(ТекущаяСтрокаИтоговойТаблицы, 2+РазлелТаблицы);
			НеЯвляетсяОбъектом  = ДоходыВычетыНалогиСотрудников.ПолучитьЗначение(ТекущаяСтрокаИтоговойТаблицы, 3+РазлелТаблицы);
			НеОблагаетсяЦеликом = ДоходыВычетыНалогиСотрудников.ПолучитьЗначение(ТекущаяСтрокаИтоговойТаблицы, 4+РазлелТаблицы);
			РасходыЗаСчетФСС = ДоходыВычетыНалогиСотрудников.ПолучитьЗначение(ТекущаяСтрокаИтоговойТаблицы, 5+РазлелТаблицы);
			ДенежноеДовольствиеВоеннослужащих = ДоходыВычетыНалогиСотрудников.ПолучитьЗначение(ТекущаяСтрокаИтоговойТаблицы, 6+РазлелТаблицы);
			ДенежноеСодержаниеПрокуроров = ДоходыВычетыНалогиСотрудников.ПолучитьЗначение(ТекущаяСтрокаИтоговойТаблицы, 7+РазлелТаблицы);
			Матпомощь = ДоходыВычетыНалогиСотрудников.ПолучитьЗначение(ТекущаяСтрокаИтоговойТаблицы, 10+РазлелТаблицы);
			МатпомощьПриРожденииРебенка = ДоходыВычетыНалогиСотрудников.ПолучитьЗначение(ТекущаяСтрокаИтоговойТаблицы, 8+РазлелТаблицы);
			ДоговорыПодряда = ДоходыВычетыНалогиСотрудников.ПолучитьЗначение(ТекущаяСтрокаИтоговойТаблицы, 12+РазлелТаблицы);
			Авторские = ДоходыВычетыНалогиСотрудников.ПолучитьЗначение(ТекущаяСтрокаИтоговойТаблицы, 13+РазлелТаблицы);  
			
			Если РежимПечати = 0 Тогда
				// для формы ввода данных дополнительно заполним колоки со скидками
				
				СкидкаМатпомощь = ДоходыВычетыНалогиСотрудников.ПолучитьЗначение(ТекущаяСтрокаИтоговойТаблицы, 11+РазлелТаблицы);
				СкидкаМатпомощьПриРожденииРебенка = ДоходыВычетыНалогиСотрудников.ПолучитьЗначение(ТекущаяСтрокаИтоговойТаблицы, 9+РазлелТаблицы);
				СкидкаАвторские = ДоходыВычетыНалогиСотрудников.ПолучитьЗначение(ТекущаяСтрокаИтоговойТаблицы, 14+РазлелТаблицы);
				
				НачисленоВсегоСпр 		= ДоходыВычетыНалогиСотрудников.ПолучитьЗначение(ТекущаяСтрокаИтоговойТаблицы, 39+2+РазлелТаблицы);
				НеЯвляетсяОбъектомСпр  = ДоходыВычетыНалогиСотрудников.ПолучитьЗначение(ТекущаяСтрокаИтоговойТаблицы, 39+3+РазлелТаблицы);
				НеОблагаетсяЦеликомСпр = ДоходыВычетыНалогиСотрудников.ПолучитьЗначение(ТекущаяСтрокаИтоговойТаблицы, 39+4+РазлелТаблицы);
				РасходыЗаСчетФСССпр = ДоходыВычетыНалогиСотрудников.ПолучитьЗначение(ТекущаяСтрокаИтоговойТаблицы, 39+5+РазлелТаблицы);
				ДенежноеДовольствиеВоеннослужащихСпр = ДоходыВычетыНалогиСотрудников.ПолучитьЗначение(ТекущаяСтрокаИтоговойТаблицы, 39+6+РазлелТаблицы);
				ДенежноеСодержаниеПрокуроровСпр = ДоходыВычетыНалогиСотрудников.ПолучитьЗначение(ТекущаяСтрокаИтоговойТаблицы, 39+7+РазлелТаблицы);
				МатпомощьСпр = ДоходыВычетыНалогиСотрудников.ПолучитьЗначение(ТекущаяСтрокаИтоговойТаблицы, 39+10+РазлелТаблицы);
				МатпомощьПриРожденииРебенкаСпр = ДоходыВычетыНалогиСотрудников.ПолучитьЗначение(ТекущаяСтрокаИтоговойТаблицы, 39+8+РазлелТаблицы);
				ДоговорыПодрядаСпр = ДоходыВычетыНалогиСотрудников.ПолучитьЗначение(ТекущаяСтрокаИтоговойТаблицы, 39+12+РазлелТаблицы);
				АвторскиеСпр = ДоходыВычетыНалогиСотрудников.ПолучитьЗначение(ТекущаяСтрокаИтоговойТаблицы, 39+13+РазлелТаблицы);
				
				СкидкаМатпомощьСпр = ДоходыВычетыНалогиСотрудников.ПолучитьЗначение(ТекущаяСтрокаИтоговойТаблицы, 39+11+РазлелТаблицы);
				СкидкаМатпомощьПриРожденииРебенкаСпр = ДоходыВычетыНалогиСотрудников.ПолучитьЗначение(ТекущаяСтрокаИтоговойТаблицы, 39+9+РазлелТаблицы);
				СкидкаАвторскиеСпр = ДоходыВычетыНалогиСотрудников.ПолучитьЗначение(ТекущаяСтрокаИтоговойТаблицы, 39+14+РазлелТаблицы);
				
				ИсчисленоПФРНакСпр   = ДоходыВычетыНалогиСотрудников.ПолучитьЗначение(ТекущаяСтрокаИтоговойТаблицы, "ИсчисленоПФРНакСпр"+ИмяРаздела); 
				ИсчисленоПФРСтрахСпр = ДоходыВычетыНалогиСотрудников.ПолучитьЗначение(ТекущаяСтрокаИтоговойТаблицы, "ИсчисленоПФРСтрахСпр"+ИмяРаздела); 
				ИсчисленоФСССпр      = ДоходыВычетыНалогиСотрудников.ПолучитьЗначение(ТекущаяСтрокаИтоговойТаблицы, "ИсчисленоФСССпр"+ИмяРаздела);
				ИсчисленоТФОМССпр    = ДоходыВычетыНалогиСотрудников.ПолучитьЗначение(ТекущаяСтрокаИтоговойТаблицы, "ИсчисленоТФОМССпр"+ИмяРаздела);
				ИсчисленоФФОМССпр    = ДоходыВычетыНалогиСотрудников.ПолучитьЗначение(ТекущаяСтрокаИтоговойТаблицы, "ИсчисленоФФОМССпр"+ИмяРаздела);
				
			КонецЕсли;
			
			
			Если СчТарифов = 1 Тогда 
				ТаблицаБазы = ДоходыВычетыНалогиСотрудников.ПолучитьЗначение(ТекущаяСтрокаИтоговойТаблицы, "ОграниченнаяБаза"); 
				БазаПФР  = ТаблицаБазы.Итог("БазаПФР");
				БазаФСС  = ТаблицаБазы.Итог("БазаФСС");
				БазаФОМС = ТаблицаБазы.Итог("БазаФОМС");
				ОсновнойТариф = ТаблицаБазы.ВидТарифа;
				ИсчисленоДопТариф = ДоходыВычетыНалогиСотрудников.ПолучитьЗначение(ТекущаяСтрокаИтоговойТаблицы, "ИсчисленоДопТариф");
			Иначе
				БазаПФР  = ДоходыВычетыНалогиСотрудников.ПолучитьЗначение(ТекущаяСтрокаИтоговойТаблицы, "ОграниченнаяБазаПФР"+ИмяРаздела);
				БазаФСС  = ДоходыВычетыНалогиСотрудников.ПолучитьЗначение(ТекущаяСтрокаИтоговойТаблицы, "ОграниченнаяБазаФСС"+ИмяРаздела);
				БазаФОМС = ДоходыВычетыНалогиСотрудников.ПолучитьЗначение(ТекущаяСтрокаИтоговойТаблицы, "ОграниченнаяБазаФОМС"+ИмяРаздела);
			КонецЕсли; 
			
			ИсчисленоПФРНак   = ДоходыВычетыНалогиСотрудников.ПолучитьЗначение(ТекущаяСтрокаИтоговойТаблицы, "ИсчисленоПФРНак"+ИмяРаздела); 
			ИсчисленоПФРСтрах = ДоходыВычетыНалогиСотрудников.ПолучитьЗначение(ТекущаяСтрокаИтоговойТаблицы, "ИсчисленоПФРСтрах"+ИмяРаздела); 
			ИсчисленоФСС      = ДоходыВычетыНалогиСотрудников.ПолучитьЗначение(ТекущаяСтрокаИтоговойТаблицы, "ИсчисленоФСС"+ИмяРаздела);
			ИсчисленоТФОМС    = ДоходыВычетыНалогиСотрудников.ПолучитьЗначение(ТекущаяСтрокаИтоговойТаблицы, "ИсчисленоТФОМС"+ИмяРаздела);
			ИсчисленоФФОМС    = ДоходыВычетыНалогиСотрудников.ПолучитьЗначение(ТекущаяСтрокаИтоговойТаблицы, "ИсчисленоФФОМС"+ИмяРаздела);
			
			
			Если Месяц = 1 Тогда 
				
				НачисленоВсегоЗаМесяц 	   = НачисленоВсего;
				НеЯвляетсяОбъектомЗаМесяц  = НеЯвляетсяОбъектом;
				НеОблагаетсяЦеликомЗаМесяц = НеОблагаетсяЦеликом;
				РасходыЗаСчетФССЗаМесяц = РасходыЗаСчетФСС;
				ДенежноеДовольствиеВоеннослужащихЗаМесяц = ДенежноеДовольствиеВоеннослужащих;
				ДенежноеСодержаниеПрокуроровЗаМесяц = ДенежноеСодержаниеПрокуроров;
				МатпомощьЗаМесяц = Матпомощь;
				МатпомощьПриРожденииРебенкаЗаМесяц = МатпомощьПриРожденииРебенка;
				ДоговорыПодрядаЗаМесяц = ДоговорыПодряда;
				АвторскиеЗаМесяц = Авторские;
				
				Если РежимПечати = 0 Тогда
					// для формы ввода данных дополнительно заполним колоки со скидками
					
					СкидкаМатпомощьЗаМесяц = СкидкаМатпомощь;
					СкидкаМатпомощьПриРожденииРебенкаЗаМесяц = СкидкаМатпомощьПриРожденииРебенка;
					СкидкаАвторскиеЗаМесяц = СкидкаАвторские;
					
				КонецЕсли;
				
				БазаПФРЗаМесяц  = БазаПФР;
				БазаФССЗаМесяц  = БазаФСС;
				БазаФОМСЗаМесяц = БазаФОМС; 
				
				ИсчисленоПФРНакЗаМесяц   = ИсчисленоПФРНак; 
				ИсчисленоПФРСтрахЗаМесяц = ИсчисленоПФРСтрах; 
				ИсчисленоФССЗаМесяц      = ИсчисленоФСС;
				ИсчисленоТФОМСЗаМесяц    = ИсчисленоТФОМС;
				ИсчисленоФФОМСЗаМесяц    = ИсчисленоФФОМС;
				
				Если СчТарифов = 1 Тогда
					ИсчисленоДопТарифЗаМесяц = ИсчисленоДопТариф;
				КонецЕсли;
				
			Иначе    
				
				НачисленоВсегоЗаМесяц 		= НачисленоВсего - ДоходыВычетыНалогиСотрудников.ПолучитьЗначение(ТекущаяСтрокаИтоговойТаблицы-1, 2+РазлелТаблицы);
				НеЯвляетсяОбъектомЗаМесяц  = НеЯвляетсяОбъектом - ДоходыВычетыНалогиСотрудников.ПолучитьЗначение(ТекущаяСтрокаИтоговойТаблицы-1, 3+РазлелТаблицы);
				НеОблагаетсяЦеликомЗаМесяц = НеОблагаетсяЦеликом - ДоходыВычетыНалогиСотрудников.ПолучитьЗначение(ТекущаяСтрокаИтоговойТаблицы-1, 4+РазлелТаблицы);
				РасходыЗаСчетФССЗаМесяц = РасходыЗаСчетФСС - ДоходыВычетыНалогиСотрудников.ПолучитьЗначение(ТекущаяСтрокаИтоговойТаблицы-1, 5+РазлелТаблицы);
				ДенежноеДовольствиеВоеннослужащихЗаМесяц = ДенежноеДовольствиеВоеннослужащих - ДоходыВычетыНалогиСотрудников.ПолучитьЗначение(ТекущаяСтрокаИтоговойТаблицы-1, 6+РазлелТаблицы);
				ДенежноеСодержаниеПрокуроровЗаМесяц = ДенежноеСодержаниеПрокуроров - ДоходыВычетыНалогиСотрудников.ПолучитьЗначение(ТекущаяСтрокаИтоговойТаблицы-1, 7+РазлелТаблицы);
				МатпомощьЗаМесяц = Матпомощь - ДоходыВычетыНалогиСотрудников.ПолучитьЗначение(ТекущаяСтрокаИтоговойТаблицы-1, 10+РазлелТаблицы);
				МатпомощьПриРожденииРебенкаЗаМесяц = МатпомощьПриРожденииРебенка - ДоходыВычетыНалогиСотрудников.ПолучитьЗначение(ТекущаяСтрокаИтоговойТаблицы-1, 8+РазлелТаблицы);
				ДоговорыПодрядаЗаМесяц = ДоговорыПодряда - ДоходыВычетыНалогиСотрудников.ПолучитьЗначение(ТекущаяСтрокаИтоговойТаблицы-1, 12+РазлелТаблицы);
				АвторскиеЗаМесяц = Авторские - ДоходыВычетыНалогиСотрудников.ПолучитьЗначение(ТекущаяСтрокаИтоговойТаблицы-1, 13+РазлелТаблицы);	
				
				Если РежимПечати = 0 Тогда
					// для формы ввода данных дополнительно заполним колоки со скидками
					
					СкидкаМатпомощьЗаМесяц = СкидкаМатпомощь - ДоходыВычетыНалогиСотрудников.ПолучитьЗначение(ТекущаяСтрокаИтоговойТаблицы-1, 11+РазлелТаблицы);
					СкидкаМатпомощьПриРожденииРебенкаЗаМесяц = СкидкаМатпомощьПриРожденииРебенка - ДоходыВычетыНалогиСотрудников.ПолучитьЗначение(ТекущаяСтрокаИтоговойТаблицы-1, 9+РазлелТаблицы);
					СкидкаАвторскиеЗаМесяц = СкидкаАвторские - ДоходыВычетыНалогиСотрудников.ПолучитьЗначение(ТекущаяСтрокаИтоговойТаблицы-1, 14+РазлелТаблицы);
					
				КонецЕсли;
				
				Если СчТарифов = 1 Тогда 
					ТаблицаБазы = ДоходыВычетыНалогиСотрудников.ПолучитьЗначение(ТекущаяСтрокаИтоговойТаблицы-1, "ОграниченнаяБаза");
					БазаПФРЗаМесяц  = БазаПФР - ТаблицаБазы.Итог("БазаПФР");
					БазаФССЗаМесяц  = БазаФСС - ТаблицаБазы.Итог("БазаФСС");
					БазаФОМСЗаМесяц = БазаФОМС- ТаблицаБазы.Итог("БазаФОМС");
					ИсчисленоДопТарифЗаМесяц = ИсчисленоДопТариф - ДоходыВычетыНалогиСотрудников.ПолучитьЗначение(ТекущаяСтрокаИтоговойТаблицы-1, "ИсчисленоДопТариф");
				Иначе
					БазаПФРЗаМесяц  = БазаПФР - ДоходыВычетыНалогиСотрудников.ПолучитьЗначение(ТекущаяСтрокаИтоговойТаблицы-1, "ОграниченнаяБазаПФР"+ИмяРаздела);
					БазаФССЗаМесяц  = БазаФСС - ДоходыВычетыНалогиСотрудников.ПолучитьЗначение(ТекущаяСтрокаИтоговойТаблицы-1, "ОграниченнаяБазаФСС"+ИмяРаздела);
					БазаФОМСЗаМесяц = БазаФОМС- ДоходыВычетыНалогиСотрудников.ПолучитьЗначение(ТекущаяСтрокаИтоговойТаблицы-1, "ОграниченнаяБазаФОМС"+ИмяРаздела);
				КонецЕсли; 
				
				ИсчисленоПФРНакЗаМесяц   = ИсчисленоПФРНак - ДоходыВычетыНалогиСотрудников.ПолучитьЗначение(ТекущаяСтрокаИтоговойТаблицы-1, "ИсчисленоПФРНак"+ИмяРаздела); 
				ИсчисленоПФРСтрахЗаМесяц = ИсчисленоПФРСтрах - ДоходыВычетыНалогиСотрудников.ПолучитьЗначение(ТекущаяСтрокаИтоговойТаблицы-1, "ИсчисленоПФРСтрах"+ИмяРаздела); 
				ИсчисленоФССЗаМесяц      = ИсчисленоФСС - ДоходыВычетыНалогиСотрудников.ПолучитьЗначение(ТекущаяСтрокаИтоговойТаблицы-1, "ИсчисленоФСС"+ИмяРаздела);
				ИсчисленоТФОМСЗаМесяц    = ИсчисленоТФОМС - ДоходыВычетыНалогиСотрудников.ПолучитьЗначение(ТекущаяСтрокаИтоговойТаблицы-1, "ИсчисленоТФОМС"+ИмяРаздела);
				ИсчисленоФФОМСЗаМесяц    = ИсчисленоФФОМС - ДоходыВычетыНалогиСотрудников.ПолучитьЗначение(ТекущаяСтрокаИтоговойТаблицы-1, "ИсчисленоФФОМС"+ИмяРаздела);
				
			КонецЕсли;
			
			ИмяЯчейки = "П" + СчТарифов +"02"+МесяцСтрокой;
			Буфер.ДобавитьЗначение(Формат(НачисленоВсегоЗаМесяц,"Ч015.2."),ИмяЯчейки);
			БуферРазделовСпр.ДобавитьЗначение(Формат(НачисленоВсегоСпр,"Ч015.2."),ИмяЯчейки);
			ТаблицаРасшифровокПоВР = СформироватьТаблицуПоВРСтраховыеВзносы(ИмяЯчейки,ДоходыВычетыНалогиСотрудников,ТаблицаРасшифровокПоВР,ТекущаяСтрокаИтоговойТаблицы,2+РазлелТаблицы);
			
			ИмяЯчейки = "СНГ" + СчТарифов +"02"+МесяцСтрокой;
			Буфер.ДобавитьЗначение(Формат(НачисленоВсего,"Ч015.2."),ИмяЯчейки);
			
			ИмяЯчейки = "П" + СчТарифов +"03"+МесяцСтрокой;
			Буфер.ДобавитьЗначение(Формат(НеЯвляетсяОбъектомЗаМесяц,"Ч015.2."),ИмяЯчейки);
			БуферРазделовСпр.ДобавитьЗначение(Формат(НеЯвляетсяОбъектомСпр,"Ч015.2."),ИмяЯчейки);
			ТаблицаРасшифровокПоВР = СформироватьТаблицуПоВРСтраховыеВзносы(ИмяЯчейки,ДоходыВычетыНалогиСотрудников,ТаблицаРасшифровокПоВР,ТекущаяСтрокаИтоговойТаблицы,3+РазлелТаблицы);
			
			ИмяЯчейки = "СНГ" + СчТарифов +"03"+МесяцСтрокой;
			Буфер.ДобавитьЗначение(Формат(НеЯвляетсяОбъектом,"Ч015.2."),ИмяЯчейки);
			
			ИмяЯчейки = "П" + СчТарифов +"04"+МесяцСтрокой;
			Буфер.ДобавитьЗначение(Формат(НеОблагаетсяЦеликомЗаМесяц,"Ч015.2."),ИмяЯчейки);
			БуферРазделовСпр.ДобавитьЗначение(Формат(НеОблагаетсяЦеликомСпр,"Ч015.2."),ИмяЯчейки);
			ТаблицаРасшифровокПоВР = СформироватьТаблицуПоВРСтраховыеВзносы(ИмяЯчейки,ДоходыВычетыНалогиСотрудников,ТаблицаРасшифровокПоВР,ТекущаяСтрокаИтоговойТаблицы,4+РазлелТаблицы);
			
			ИмяЯчейки = "СНГ" + СчТарифов +"04"+МесяцСтрокой;
			Буфер.ДобавитьЗначение(Формат(НеОблагаетсяЦеликом,"Ч015.2."),ИмяЯчейки);
			
			ИмяЯчейки = "П" + СчТарифов +"05"+МесяцСтрокой;
			Буфер.ДобавитьЗначение(Формат(РасходыЗаСчетФССЗаМесяц,"Ч015.2."),ИмяЯчейки);
			БуферРазделовСпр.ДобавитьЗначение(Формат(РасходыЗаСчетФСССпр,"Ч015.2."),ИмяЯчейки);
			ТаблицаРасшифровокПоВР = СформироватьТаблицуПоВРСтраховыеВзносы(ИмяЯчейки,ДоходыВычетыНалогиСотрудников,ТаблицаРасшифровокПоВР,ТекущаяСтрокаИтоговойТаблицы,5+РазлелТаблицы);
			
			ИмяЯчейки = "СНГ" + СчТарифов +"05"+МесяцСтрокой;
			Буфер.ДобавитьЗначение(Формат(РасходыЗаСчетФСС,"Ч015.2."),ИмяЯчейки);
			
			ИмяЯчейки = "П" + СчТарифов +"06"+МесяцСтрокой;
			Буфер.ДобавитьЗначение(Формат(ДенежноеДовольствиеВоеннослужащихЗаМесяц,"Ч015.2."),ИмяЯчейки);
			БуферРазделовСпр.ДобавитьЗначение(Формат(ДенежноеДовольствиеВоеннослужащихСпр,"Ч015.2."),ИмяЯчейки);
			ТаблицаРасшифровокПоВР = СформироватьТаблицуПоВРСтраховыеВзносы(ИмяЯчейки,ДоходыВычетыНалогиСотрудников,ТаблицаРасшифровокПоВР,ТекущаяСтрокаИтоговойТаблицы,6+РазлелТаблицы);
			
			ИмяЯчейки = "СНГ" + СчТарифов +"06"+МесяцСтрокой;
			Буфер.ДобавитьЗначение(Формат(ДенежноеДовольствиеВоеннослужащих,"Ч015.2."),ИмяЯчейки);
			
			ИмяЯчейки = "П" + СчТарифов +"07"+МесяцСтрокой;
			Буфер.ДобавитьЗначение(Формат(ДенежноеСодержаниеПрокуроровЗаМесяц,"Ч015.2."),ИмяЯчейки);
			БуферРазделовСпр.ДобавитьЗначение(Формат(ДенежноеСодержаниеПрокуроровСпр,"Ч015.2."),ИмяЯчейки);
			ТаблицаРасшифровокПоВР = СформироватьТаблицуПоВРСтраховыеВзносы(ИмяЯчейки,ДоходыВычетыНалогиСотрудников,ТаблицаРасшифровокПоВР,ТекущаяСтрокаИтоговойТаблицы,7+РазлелТаблицы);
			
			ИмяЯчейки = "СНГ" + СчТарифов +"07"+МесяцСтрокой;
			Буфер.ДобавитьЗначение(Формат(ДенежноеСодержаниеПрокуроров,"Ч015.2."),ИмяЯчейки);
			
			ИмяЯчейки = "П" + СчТарифов +"09"+МесяцСтрокой;
			Буфер.ДобавитьЗначение(Формат(МатпомощьЗаМесяц,"Ч015.2."),ИмяЯчейки);
			БуферРазделовСпр.ДобавитьЗначение(Формат(МатпомощьСпр,"Ч015.2."),ИмяЯчейки);
			ТаблицаРасшифровокПоВР = СформироватьТаблицуПоВРСтраховыеВзносы(ИмяЯчейки,ДоходыВычетыНалогиСотрудников,ТаблицаРасшифровокПоВР,ТекущаяСтрокаИтоговойТаблицы,10+РазлелТаблицы);
			
			ИмяЯчейки = "СНГ" + СчТарифов +"09"+МесяцСтрокой;
			Буфер.ДобавитьЗначение(Формат(Матпомощь,"Ч015.2."),ИмяЯчейки);
			
			ИмяЯчейки = "П" + СчТарифов +"08"+МесяцСтрокой;
			Буфер.ДобавитьЗначение(Формат(МатпомощьПриРожденииРебенкаЗаМесяц,"Ч015.2."),ИмяЯчейки);
			БуферРазделовСпр.ДобавитьЗначение(Формат(МатпомощьПриРожденииРебенкаСпр,"Ч015.2."),ИмяЯчейки);
			ТаблицаРасшифровокПоВР = СформироватьТаблицуПоВРСтраховыеВзносы(ИмяЯчейки,ДоходыВычетыНалогиСотрудников,ТаблицаРасшифровокПоВР,ТекущаяСтрокаИтоговойТаблицы,8+РазлелТаблицы);
			
			ИмяЯчейки = "СНГ" + СчТарифов +"08"+МесяцСтрокой;
			Буфер.ДобавитьЗначение(Формат(МатпомощьПриРожденииРебенка,"Ч015.2."),ИмяЯчейки);
			
			ИмяЯчейки = "П" + СчТарифов +"10"+МесяцСтрокой;
			Буфер.ДобавитьЗначение(Формат(ДоговорыПодрядаЗаМесяц,"Ч015.2."),ИмяЯчейки);
			БуферРазделовСпр.ДобавитьЗначение(Формат(ДоговорыПодрядаСпр,"Ч015.2."),ИмяЯчейки); 
			ТаблицаРасшифровокПоВР = СформироватьТаблицуПоВРСтраховыеВзносы(ИмяЯчейки,ДоходыВычетыНалогиСотрудников,ТаблицаРасшифровокПоВР,ТекущаяСтрокаИтоговойТаблицы,12+РазлелТаблицы);
			
			ИмяЯчейки = "СНГ" + СчТарифов +"10"+МесяцСтрокой;
			Буфер.ДобавитьЗначение(Формат(ДоговорыПодряда,"Ч015.2."),ИмяЯчейки);
			
			ИмяЯчейки = "П" + СчТарифов +"11"+МесяцСтрокой;
			Буфер.ДобавитьЗначение(Формат(АвторскиеЗаМесяц,"Ч015.2."),ИмяЯчейки);
			БуферРазделовСпр.ДобавитьЗначение(Формат(АвторскиеСпр,"Ч015.2."),ИмяЯчейки);
			ТаблицаРасшифровокПоВР = СформироватьТаблицуПоВРСтраховыеВзносы(ИмяЯчейки,ДоходыВычетыНалогиСотрудников,ТаблицаРасшифровокПоВР,ТекущаяСтрокаИтоговойТаблицы,13+РазлелТаблицы);
			
			ИмяЯчейки = "СНГ" + СчТарифов +"11"+МесяцСтрокой;
			Буфер.ДобавитьЗначение(Формат(Авторские,"Ч015.2."),ИмяЯчейки);
			
			Если РежимПечати = 0 Тогда
				// для формы ввода данных дополнительно заполним колоки со скидками
				
				ИмяЯчейки = "П" + СчТарифов +"09а"+МесяцСтрокой;
				Буфер.ДобавитьЗначение(Формат(СкидкаМатпомощьЗаМесяц,"Ч015.2."),ИмяЯчейки);
				БуферРазделовСпр.ДобавитьЗначение(Формат(СкидкаМатпомощьСпр,"Ч015.2."),ИмяЯчейки);
				ТаблицаРасшифровокПоВР = СформироватьТаблицуПоВРСтраховыеВзносы(ИмяЯчейки,ДоходыВычетыНалогиСотрудников,ТаблицаРасшифровокПоВР,ТекущаяСтрокаИтоговойТаблицы,11+РазлелТаблицы);
				
				ИмяЯчейки = "СНГ" + СчТарифов +"09а"+МесяцСтрокой;
				Буфер.ДобавитьЗначение(Формат(СкидкаМатпомощь,"Ч015.2."),ИмяЯчейки);
				 
				ИмяЯчейки = "П" + СчТарифов +"08а"+МесяцСтрокой;
				Буфер.ДобавитьЗначение(Формат(СкидкаМатпомощьПриРожденииРебенкаЗаМесяц,"Ч015.2."),ИмяЯчейки);
				БуферРазделовСпр.ДобавитьЗначение(Формат(СкидкаМатпомощьПриРожденииРебенкаСпр,"Ч015.2."),ИмяЯчейки);
				ТаблицаРасшифровокПоВР = СформироватьТаблицуПоВРСтраховыеВзносы(ИмяЯчейки,ДоходыВычетыНалогиСотрудников,ТаблицаРасшифровокПоВР,ТекущаяСтрокаИтоговойТаблицы,9+РазлелТаблицы);
				



				ИмяЯчейки = "СНГ" + СчТарифов +"08а"+МесяцСтрокой;
				Буфер.ДобавитьЗначение(Формат(СкидкаМатпомощьПриРожденииРебенка,"Ч015.2."),ИмяЯчейки);
				
				ИмяЯчейки = "П" + СчТарифов +"11а"+МесяцСтрокой;
				Буфер.ДобавитьЗначение(Формат(СкидкаАвторскиеЗаМесяц,"Ч015.2."),ИмяЯчейки);
				БуферРазделовСпр.ДобавитьЗначение(Формат(СкидкаАвторскиеСпр,"Ч015.2."),ИмяЯчейки);
				ТаблицаРасшифровокПоВР = СформироватьТаблицуПоВРСтраховыеВзносы(ИмяЯчейки,ДоходыВычетыНалогиСотрудников,ТаблицаРасшифровокПоВР,ТекущаяСтрокаИтоговойТаблицы,14+РазлелТаблицы);
				
				ИмяЯчейки = "СНГ" + СчТарифов +"11а"+МесяцСтрокой;
				Буфер.ДобавитьЗначение(Формат(СкидкаАвторские,"Ч015.2."),ИмяЯчейки);
				
			КонецЕсли;
			
			ИмяЯчейки = "П" + СчТарифов +"12"+МесяцСтрокой;
			Буфер.ДобавитьЗначение(Формат(БазаПФРЗаМесяц,"Ч015.2."),ИмяЯчейки);  
			
			ИмяЯчейки = "СНГ" + СчТарифов +"12"+МесяцСтрокой;
			Буфер.ДобавитьЗначение(Формат(БазаПФР,"Ч015.2."),ИмяЯчейки);
			
			ИмяЯчейки = "П" + СчТарифов +"13"+МесяцСтрокой;
			Буфер.ДобавитьЗначение(Формат(БазаФССЗаМесяц,"Ч015.2."),ИмяЯчейки);  
			
			ИмяЯчейки = "СНГ" + СчТарифов +"13"+МесяцСтрокой;
			Буфер.ДобавитьЗначение(Формат(БазаФСС,"Ч015.2."),ИмяЯчейки);
			
			ИмяЯчейки = "П" + СчТарифов +"14"+МесяцСтрокой;
			Буфер.ДобавитьЗначение(Формат(БазаФОМСЗаМесяц,"Ч015.2."),ИмяЯчейки); 
			
			ИмяЯчейки = "СНГ" + СчТарифов +"14"+МесяцСтрокой;
			Буфер.ДобавитьЗначение(Формат(БазаФОМС,"Ч015.2."),ИмяЯчейки);
			
			Если СчТарифов = 1 Тогда
				
				Если НомерШкалыВзносов > 0 Тогда
					ТарифПФРНак   = глПолучитьСтавкуВзноса(ОсновнойТариф,"ПФРНак" + НомерШкалыВзносов,КонецГода);    
					ТарифПФРСтрах = глПолучитьСтавкуВзноса(ОсновнойТариф,"ПФРСтрах" + НомерШкалыВзносов,КонецГода); 
				Иначе          
					ТарифПФРНак = 0;
					ТарифПФРСтрах = 0;
				КонецЕсли;
				ТарифФСС      = глПолучитьСтавкуВзноса(ОсновнойТариф,"ФСС",КонецГода);
				ТарифФФОМС 	  = глПолучитьСтавкуВзноса(ОсновнойТариф,"ФФОМС",КонецГода);
				ТарифТФОМС 	  = глПолучитьСтавкуВзноса(ОсновнойТариф,"ТФОМС",КонецГода);
				
			ИначеЕсли СчТарифов = 2 Тогда
				
				ТарифИнвалидов = Перечисление.ТарифыСтраховыхВзносов.ОрганизацияИнвалидов;
				
				Если НомерШкалыВзносов > 0 Тогда
					ТарифПФРНак   = глПолучитьСтавкуВзноса(ТарифИнвалидов,"ПФРНак" + НомерШкалыВзносов,КонецГода);    
					ТарифПФРСтрах = глПолучитьСтавкуВзноса(ТарифИнвалидов,"ПФРСтрах" + НомерШкалыВзносов,КонецГода); 
				Иначе          
					ТарифПФРНак = 0;
					ТарифПФРСтрах = 0;
				КонецЕсли;
				ТарифФСС      = глПолучитьСтавкуВзноса(ТарифИнвалидов,"ФСС",КонецГода);
				ТарифФФОМС 	  = глПолучитьСтавкуВзноса(ТарифИнвалидов,"ФФОМС",КонецГода);
				ТарифТФОМС 	  = глПолучитьСтавкуВзноса(ТарифИнвалидов,"ТФОМС",КонецГода);
				
			Иначе //тариф ЕНВД
				
				ТарифЕНВД = Перечисление.ТарифыСтраховыхВзносов.ЕНВД;
				
				Если НомерШкалыВзносов > 0 Тогда
					ТарифПФРНак   = глПолучитьСтавкуВзноса(ТарифИнвалидов,"ПФРНак" + НомерШкалыВзносов,КонецГода);    
					ТарифПФРСтрах = глПолучитьСтавкуВзноса(ТарифИнвалидов,"ПФРСтрах" + НомерШкалыВзносов,КонецГода); 
				Иначе          
					ТарифПФРНак = 0;
					ТарифПФРСтрах = 0;
				КонецЕсли;
				ТарифФСС      = глПолучитьСтавкуВзноса(ТарифИнвалидов,"ФСС",КонецГода);
				ТарифФФОМС 	  = глПолучитьСтавкуВзноса(ТарифИнвалидов,"ФФОМС",КонецГода);
				ТарифТФОМС 	  = глПолучитьСтавкуВзноса(ТарифИнвалидов,"ТФОМС",КонецГода);
				
			КонецЕсли;
			
			ИмяЯчейки = "Т" + СчТарифов + "ПФРНак"+МесяцСтрокой;
			Буфер.ДобавитьЗначение(Формат(ТарифПФРНак,"Ч5.2."),ИмяЯчейки);
			
			ИмяЯчейки = "Т" + СчТарифов + "ПФРСтрах"+МесяцСтрокой;
			Буфер.ДобавитьЗначение(Формат(ТарифПФРСтрах,"Ч5.2."),ИмяЯчейки);
			
			ИмяЯчейки = "Т" + СчТарифов + "ФСС"+МесяцСтрокой;
			Буфер.ДобавитьЗначение(Формат(ТарифФСС,"Ч5.2."),ИмяЯчейки);
			
			ИмяЯчейки = "Т" + СчТарифов + "ФФОМС"+МесяцСтрокой;
			Буфер.ДобавитьЗначение(Формат(ТарифФФОМС,"Ч5.2."),ИмяЯчейки);
			
			ИмяЯчейки = "Т" + СчТарифов + "ТФОМС"+МесяцСтрокой;
			Буфер.ДобавитьЗначение(Формат(ТарифТФОМС,"Ч5.2."),ИмяЯчейки); 
			
			// исчисленные налоги
			
			ИмяЯчейки = "П" + СчТарифов +"16"+МесяцСтрокой;   
			Буфер.ДобавитьЗначение(Формат(ИсчисленоПФРСтрахЗаМесяц,"Ч015.2."),ИмяЯчейки);
			БуферРазделовСпр.ДобавитьЗначение(Формат(ИсчисленоПФРСтрахСпр,"Ч015.2."),ИмяЯчейки);
			ТаблицаРасшифровокПоВР = СформироватьТаблицуПоВРСтраховыеВзносы(ИмяЯчейки,ДоходыВычетыНалогиСотрудников,ТаблицаРасшифровокПоВР,ТекущаяСтрокаИтоговойТаблицы,"ИсчисленоПФРСтрах"+ИмяРаздела);
			
			ИмяЯчейки = "СНГ" + СчТарифов +"16"+МесяцСтрокой; 
			Буфер.ДобавитьЗначение(Формат(ИсчисленоПФРСтрах,"Ч015.2."),ИмяЯчейки);
			
			ИмяЯчейки = "П" + СчТарифов +"18"+МесяцСтрокой;
			Буфер.ДобавитьЗначение(Формат(ИсчисленоПФРНакЗаМесяц,"Ч015.2."),ИмяЯчейки);
			БуферРазделовСпр.ДобавитьЗначение(Формат(ИсчисленоПФРНакСпр,"Ч015.2."),ИмяЯчейки);
			ТаблицаРасшифровокПоВР = СформироватьТаблицуПоВРСтраховыеВзносы(ИмяЯчейки,ДоходыВычетыНалогиСотрудников,ТаблицаРасшифровокПоВР,ТекущаяСтрокаИтоговойТаблицы,"ИсчисленоПФРНак"+ИмяРаздела);
			
			ИмяЯчейки = "СНГ" + СчТарифов +"18"+МесяцСтрокой;
			Буфер.ДобавитьЗначение(Формат(ИсчисленоПФРНак,"Ч015.2."),ИмяЯчейки);
			
			Если СчТарифов = 1 Тогда
				ИмяЯчейки = "П120"+МесяцСтрокой;
				Буфер.ДобавитьЗначение(Формат(ИсчисленоДопТарифЗаМесяц,"Ч015.2."),ИмяЯчейки); 
				БуферРазделовСпр.ДобавитьЗначение(Формат(ИсчисленоДопТарифСпр,"Ч015.2."),ИмяЯчейки); 
				ТаблицаРасшифровокПоВР = СформироватьТаблицуПоВРСтраховыеВзносы(ИмяЯчейки,ДоходыВычетыНалогиСотрудников,ТаблицаРасшифровокПоВР,ТекущаяСтрокаИтоговойТаблицы,"ИсчисленоДопТариф"+ИмяРаздела);
				
				ИмяЯчейки = "СНГ120"+МесяцСтрокой;
				Буфер.ДобавитьЗначение(Формат(ИсчисленоДопТариф,"Ч015.2."),ИмяЯчейки);
			КонецЕсли;
			
			ИмяЯчейки = "П" + СчТарифов +"22"+МесяцСтрокой;
			Буфер.ДобавитьЗначение(Формат(ИсчисленоФССЗаМесяц,"Ч015.2."),ИмяЯчейки); 
			БуферРазделовСпр.ДобавитьЗначение(Формат(ИсчисленоФСССпр,"Ч015.2."),ИмяЯчейки); 
			ТаблицаРасшифровокПоВР = СформироватьТаблицуПоВРСтраховыеВзносы(ИмяЯчейки,ДоходыВычетыНалогиСотрудников,ТаблицаРасшифровокПоВР,ТекущаяСтрокаИтоговойТаблицы,"ИсчисленоФСС"+ИмяРаздела);
			
			ИмяЯчейки = "СНГ" + СчТарифов +"22"+МесяцСтрокой;
			Буфер.ДобавитьЗначение(Формат(ИсчисленоФСС,"Ч015.2."),ИмяЯчейки);
			
			ИмяЯчейки = "П" + СчТарифов +"24"+МесяцСтрокой;
			Буфер.ДобавитьЗначение(Формат(ИсчисленоФФОМСЗаМесяц,"Ч015.2."),ИмяЯчейки);
			БуферРазделовСпр.ДобавитьЗначение(Формат(ИсчисленоФФОМССпр,"Ч015.2."),ИмяЯчейки);
			ТаблицаРасшифровокПоВР = СформироватьТаблицуПоВРСтраховыеВзносы(ИмяЯчейки,ДоходыВычетыНалогиСотрудников,ТаблицаРасшифровокПоВР,ТекущаяСтрокаИтоговойТаблицы,"ИсчисленоФФОМС"+ИмяРаздела);
			
			ИмяЯчейки = "СНГ" + СчТарифов +"24"+МесяцСтрокой;
			Буфер.ДобавитьЗначение(Формат(ИсчисленоФФОМС,"Ч015.2."),ИмяЯчейки);
			
			ИмяЯчейки = "П" + СчТарифов +"26"+МесяцСтрокой;
			Буфер.ДобавитьЗначение(Формат(ИсчисленоТФОМСЗаМесяц,"Ч015.2."),ИмяЯчейки);
			БуферРазделовСпр.ДобавитьЗначение(Формат(ИсчисленоТФОМССпр,"Ч015.2."),ИмяЯчейки);
			ТаблицаРасшифровокПоВР = СформироватьТаблицуПоВРСтраховыеВзносы(ИмяЯчейки,ДоходыВычетыНалогиСотрудников,ТаблицаРасшифровокПоВР,ТекущаяСтрокаИтоговойТаблицы,"ИсчисленоТФОМС"+ИмяРаздела);
			
			ИмяЯчейки = "СНГ" + СчТарифов +"26"+МесяцСтрокой;
			Буфер.ДобавитьЗначение(Формат(ИсчисленоТФОМС,"Ч015.2."),ИмяЯчейки); 
			
		КонецЦикла; // цикл по месяцам	
		
		ПоследнийМесяцДоходов = ?(ПоследнийМесяц > ПоследнийМесяцДоходов,ПоследнийМесяц,ПоследнийМесяцДоходов);
		
	КонецЦикла; // цикл по разделам
	
КонецПроцедуры //глЗаполнитьКарточкаУчетаПоСтраховымВзносам  

//*****************************************************************************
// глЗаменитьОдниСимволыДругими(Что,Где,НаЧто)
//
// Параметры
//		Что - строка, символы, которые будут заменены
//		Где - строка, в этой строке будут заменяться символы
//		НаЧто - строка, символы, на которые производится замена,
//      		длины строк Что и НаЧто должны совпадать
//
// Возвращаемое значение
//		строка
//
// Описание
//		в переданной строке Где символы из строки Что заменяются
//		соответствующими по номерам символами из строки НаЧто
//
Функция глЗаменитьОдниСимволыДругими(Что,Где,НаЧто) Экспорт
	Рез = Где;
	Для Сч=1 По СтрДлина(Что) Цикл
		Рез = СтрЗаменить(Рез,Сред(Что,Сч,1),Сред(НаЧто,Сч,1));
	КонецЦикла;
	Возврат Рез;
КонецФункции //глЗаменитьОдниСимволыДругими

//*****************************************************************************
// глПроверкаНомераУдостоверенияЛичности(КодДокумента,Номер,Сообщать)
//
// Параметры
//		КодДокумента - строка, код документа по классификатору МНС
//		Номер - строка, номер документа
//		Сообщать - число, 1 - выводить сообщения об ошибке, 0 - нет
//
// Возвращаемое значение
//		число:
//			1 - соответствует требованиям МНС
//			0 - не соответствует требованиям МНС
//
// Описание
//		Номер документа, удостоверяющего личность, проверяется на соответствие
//		требованиям МНС
//
Функция глПроверкаНомераУдостоверенияЛичности(КодДокумента,Номер,Сообщать) Экспорт
    
	Если Найти("01,03,06,21",КодДокумента)<>0 Тогда
		Если ПустаяСтрока(глЗаменитьОдниСимволыДругими("0123456789",Номер,"          "))=0 Тогда
			Если Сообщать=1 Тогда
				Предупреждение("Реквизиты документа, удостоверяющего личность, указаны некорректно.
		   					   |Ошибка в номере!",3);
		   	КонецЕсли;
		   	Возврат 0;
		КонецЕсли;
		Если СтрДлина(СокрЛП(Номер))<>6 Тогда
			Если Сообщать=1 Тогда
				Предупреждение("Реквизиты документа, удостоверяющего личность, указаны некорректно.
		   					   |Ошибка в длине номера!",3);
		   	КонецЕсли;
		   	Возврат 0;
		КонецЕсли;
	ИначеЕсли Найти("09,22",КодДокумента)<>0 Тогда
		Если ПустаяСтрока(глЗаменитьОдниСимволыДругими("0123456789",Номер,"          "))=0 Тогда
			Если Сообщать=1 Тогда
				Предупреждение("Реквизиты документа, удостоверяющего личность, указаны некорректно.
		   					   |Ошибка в номере!",3);
		   	КонецЕсли;
		   	Возврат 0;
		КонецЕсли;
		Если СтрДлина(СокрЛП(Номер))<>7 Тогда
			Если Сообщать=1 Тогда
				Предупреждение("Реквизиты документа, удостоверяющего личность, указаны некорректно.
		   					   |Ошибка в длине номера!",3);
		   	КонецЕсли;
		   	Возврат 0;
		КонецЕсли;
	ИначеЕсли Найти("02,04,07,27,26",КодДокумента)<>0 Тогда
		Если ПустаяСтрока(глЗаменитьОдниСимволыДругими("0123456789",Номер,"          "))=0 Тогда
			Если Сообщать=1 Тогда
				Предупреждение("Реквизиты документа, удостоверяющего личность, указаны некорректно.
		   					   |Ошибка в номере!",3);
		   	КонецЕсли;
		   	Возврат 0;
		КонецЕсли;
		Если (СтрДлина(СокрЛП(Номер))<6) или (СтрДлина(СокрЛП(Номер))>7) Тогда
			Если Сообщать=1 Тогда
				Предупреждение("Реквизиты документа, удостоверяющего личность, указаны некорректно.
		   					   |Ошибка в длине номера!",3);
		   	КонецЕсли;
		   	Возврат 0;
		КонецЕсли;
	КонецЕсли;
	Возврат 1;
КонецФункции //глПроверкаНомераУдостоверенияЛичности

//*****************************************************************************
// ПреобразоватьЦифруВРимскуюНотацию(Цифра,РимскаяЕдиница,РимскаяПятерка,РимскаяДесятка)
//
// Параметры
//		Цифра - число, целое, от 0 до 9
//      РимскаяЕдиница,РимскаяПятерка,РимскаяДесятка - строки, соответствующие римские цифры
//
// Возвращаемое значение
//		строка
//
// Описание
//		записывает "обычную" цифру римскими цифрами,
//		например:
//				ПреобразоватьЦифруВРимскуюНотацию(7,"I","V","X") = "VII"
//
Функция ПреобразоватьЦифруВРимскуюНотацию(Цифра,РимскаяЕдиница,РимскаяПятерка,РимскаяДесятка)
	РимскаяЦифра="";
	Если Цифра = 1 Тогда
	   РимскаяЦифра = РимскаяЕдиница
	ИначеЕсли Цифра = 2 Тогда
	   РимскаяЦифра = РимскаяЕдиница+РимскаяЕдиница;
	ИначеЕсли Цифра = 3 Тогда
	   РимскаяЦифра = РимскаяЕдиница+РимскаяЕдиница+РимскаяЕдиница;
	ИначеЕсли Цифра = 4 Тогда
	   РимскаяЦифра = РимскаяЕдиница+РимскаяПятерка;
	ИначеЕсли Цифра = 5 Тогда
	   РимскаяЦифра = РимскаяПятерка;
	ИначеЕсли Цифра = 6 Тогда
	   РимскаяЦифра = РимскаяПятерка+РимскаяЕдиница;
	ИначеЕсли Цифра = 7 Тогда
	   РимскаяЦифра = РимскаяПятерка+РимскаяЕдиница+РимскаяЕдиница;
	ИначеЕсли Цифра = 8 Тогда
	   РимскаяЦифра = РимскаяПятерка+РимскаяЕдиница+РимскаяЕдиница+РимскаяЕдиница;
	ИначеЕсли Цифра = 9 Тогда
	   РимскаяЦифра = РимскаяЕдиница+РимскаяДесятка;
	КонецЕсли;
	Возврат РимскаяЦифра;
КонецФункции //ПреобразоватьЦифруВРимскуюНотацию

//*****************************************************************************
// ПреобразоватьЧислоВРимскуюНотацию(АрабскоеЧисло)
//
// Параметры
//		АрабскоеЧисло - число, целое, от 0 до 999
//
// Возвращаемое значение
//		строка
//
// Описание
//		записывает "обычное" число римскими цифрами,
//		например:
//				ПреобразоватьЧислоВРимскуюНотацию(17) = "ХVII"
//
Функция ПреобразоватьЧислоВРимскуюНотацию(АрабскоеЧисло)
    
	РимскоеЧисло="";
	cRab=глДополнитьСтроку(АрабскоеЧисло,3);

	c1 = "1";c5 = "У";c10 = "Х";c50 = "Л";c100 ="С";c500 = "М";c1000 = "Д";

	nEd = Число(Сред(cRab,3,1));
	nDs = Число(Сред(cRab,2,1));
	nSt = Число(Сред(cRab,1,1));

	РимскоеЧисло = РимскоеЧисло+ПреобразоватьЦифруВРимскуюНотацию(nSt,c100,c500,c1000);
	РимскоеЧисло = РимскоеЧисло+ПреобразоватьЦифруВРимскуюНотацию(nDs,c10,c50,c100);
	РимскоеЧисло = РимскоеЧисло+ПреобразоватьЦифруВРимскуюНотацию(nEd,c1,c5,c10);

	Возврат РимскоеЧисло;
	
КонецФункции //ПреобразоватьЧислоВРимскуюНотацию

//*****************************************************************************
// ПреобразоватьЧислоВАрабскуюНотацию(РимскоеЧисло)
//
// Параметры
//		РимскоеЧисло - строка, число, записанное римскими цифрами
//
// Возвращаемое значение
//		число
//
// Описание
//		преобразует число, записанное римскими цифрами, в "обычное" число,
//		например:
//				ПреобразоватьЧислоВАрабскуюНотацию("ХVII") = 17
//
Функция ПреобразоватьЧислоВАрабскуюНотацию(РимскоеЧисло)
    
	АрабскоеЧисло=0;

	c1 = "1";c5 = "У";c10 = "Х";c50 = "Л";c100 ="С";c500 = "М";c1000 = "Д";

	РимскоеЧисло = СокрЛП(РимскоеЧисло);
	ЧислоСимволов = СтрДлина(РимскоеЧисло);

	Для Сч=1 По ЧислоСимволов Цикл
	   Если Сред(РимскоеЧисло,Сч,1) = c1000 Тогда
	      АрабскоеЧисло = АрабскоеЧисло+1000;
	   ИначеЕсли Сред(РимскоеЧисло,Сч,1) = c500 Тогда
	      АрабскоеЧисло = АрабскоеЧисло+500;
	   ИначеЕсли Сред(РимскоеЧисло,Сч,1) = c100 Тогда
	      Если (Сч < ЧислоСимволов) И ((Сред(РимскоеЧисло,Сч+1,1) = c500) ИЛИ (Сред(РимскоеЧисло,Сч+1,1) = c1000)) Тогда
	         АрабскоеЧисло = АрабскоеЧисло-100;
	      Иначе
	         АрабскоеЧисло = АрабскоеЧисло+100;
	      КонецЕсли;
	   ИначеЕсли Сред(РимскоеЧисло,Сч,1) = c50 Тогда
	      АрабскоеЧисло = АрабскоеЧисло+50;
	   ИначеЕсли Сред(РимскоеЧисло,Сч,1) = c10 Тогда
	      Если (Сч < ЧислоСимволов) И ((Сред(РимскоеЧисло,Сч+1,1) = c50) ИЛИ (Сред(РимскоеЧисло,Сч+1,1) = c100)) Тогда
	         АрабскоеЧисло = АрабскоеЧисло-10;
	      Иначе
	         АрабскоеЧисло = АрабскоеЧисло+10;
	      КонецЕсли;
	   ИначеЕсли Сред(РимскоеЧисло,Сч,1) = c5 Тогда
	      АрабскоеЧисло = АрабскоеЧисло+5;
	   ИначеЕсли Сред(РимскоеЧисло,Сч,1) = c1 Тогда
	      Если (Сч < ЧислоСимволов) И ((Сред(РимскоеЧисло,Сч+1,1) = c5) ИЛИ (Сред(РимскоеЧисло,Сч+1,1) = c10)) Тогда
	         АрабскоеЧисло = АрабскоеЧисло-1;
	      Иначе
	         АрабскоеЧисло = АрабскоеЧисло+1;
	      КонецЕсли;
	   КонецЕсли;
	КонецЦикла;
	Возврат АрабскоеЧисло;
КонецФункции //ПреобразоватьЧислоВАрабскуюНотацию

//*****************************************************************************
// глПроверкаСерииУдостоверенияЛичности(КодДокумента,Знач Серия,Сообщать)
//
// Параметры
//		КодДокумента - строка, код документа по классификатору МНС
//		Серия - строка, серия документа
//		Крик - число, 1 - выводить сообщения об ошибке, 0 - нет
//
// Возвращаемое значение
//		число:
//			1 - соответствует требованиям МНС
//			0 - не соответствует требованиям МНС
//
// Описание
//		Серия документа, удостоверяющего личность, проверяется на соответствие
//		требованиям МНС
//
Функция глПроверкаСерииУдостоверенияЛичности(КодДокумента,Знач Серия,Сообщать) Экспорт

	// проверка
	Если Найти("01,03",КодДокумента)<>0 Тогда
		ТипДока=1;
	ИначеЕсли Найти("04,06,07,26,27",КодДокумента)<>0 Тогда
		ТипДока=2;
	ИначеЕсли Найти("02,09,22",КодДокумента)<>0 Тогда
		ТипДока=3;
	ИначеЕсли Найти("21",КодДокумента)<>0 Тогда
		ТипДока=4;
	Иначе
		ТипДока=5;
	КонецЕсли;

	Если ТипДока = 1 Тогда // паспорт и свид о рожд

		Ч1 = СокрЛП(Лев(Серия,Найти(Серия,"-")-1));
	    Ч2 = СокрЛП(Сред(Серия,Найти(Серия,"-")+1,2));

		КоличРазд = 1;
		Поз = Найти(Серия,"-");
		Если Поз=0 Тогда
			КоличРазд=0;
		КонецЕсли;
		Серия = Сред(Серия,Поз+1);
		Если Найти(Серия,"-")<>0 Тогда
			КоличРазд=2;
		КонецЕсли;

		Если КоличРазд = 0 Тогда
			Если Сообщать=1 Тогда
		   		Предупреждение("Реквизиты документа, удостоверяющего личность, указаны некорректно.
		   					   |Отсутствует разделитель ""-"" частей серии");
		   	КонецЕсли;
		   	Возврат 0;
		ИначеЕсли КоличРазд > 1 Тогда
			Если Сообщать=1 Тогда
		   		Предупреждение("Реквизиты документа, удостоверяющего личность, указаны некорректно.
		   					   |Лишний разделитель ""-"" в серии");
		   	КонецЕсли;
		   	Возврат 0;
		ИначеЕсли ПустаяСтрока(Ч1)=1 Тогда
			Если Сообщать=1 Тогда
		   		Предупреждение("Реквизиты документа, удостоверяющего личность, указаны некорректно.
		   					   |Отсутствует числовая часть серии");
		   	КонецЕсли;
		   	Возврат 0;
		ИначеЕсли  ПустаяСтрока(глЗаменитьОдниСимволыДругими("IVXLC1УХЛС",Ч1,"          "))=0 Тогда
			Если Сообщать=1 Тогда
		   		Предупреждение("Реквизиты документа, удостоверяющего личность, указаны некорректно.
		   					   |Числовая часть серии должна указываться символами 1 У Х Л С  или  I V X L C");
		   	КонецЕсли;
		   	Возврат 0;
		ИначеЕсли глЗаменитьОдниСимволыДругими("IVXLC",Ч1,"1УХЛС") <> ПреобразоватьЧислоВРимскуюНотацию(ПреобразоватьЧислоВАрабскуюНотацию(глЗаменитьОдниСимволыДругими("IVXLC",Ч1,"1УХЛС"))) Тогда
			Если Сообщать=1 Тогда
		   		Предупреждение("Реквизиты документа, удостоверяющего личность, указаны некорректно.
		   					   |Некорректна числовая часть серии");
		   	КонецЕсли;
		   	Возврат 0;
		ИначеЕсли 	(ПустаяСтрока(Ч2)=1) ИЛИ
					(СтрДлина(Ч2)<>2) ИЛИ
		   			(ПустаяСтрока(глЗаменитьОдниСимволыДругими("АБВГДЕЁЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯ",Ч2,"                                 "))=0) Тогда
			Если Сообщать=1 Тогда
		   		Предупреждение("Реквизиты документа, удостоверяющего личность, указаны некорректно.
		   					   |После разделителя ""-"" в серии должны быть ДВЕ pусcкие заглавные буквы");
		   	КонецЕсли;
		   	Возврат 0;
		КонецЕсли;
	ИначеЕсли ТипДока=2 Тогда // серия - две буквы
		Серия = СокрЛП(Серия);
		Если (СтрДлина(Серия) <> 2) ИЛИ
		   (ПустаяСтрока(глЗаменитьОдниСимволыДругими("АБВГДЕЁЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯ",Серия,"                                 "))=0) Тогда
			Если Сообщать=1 Тогда
		   		Предупреждение("Реквизиты документа, удостоверяющего личность, указаны некорректно.
		   					   |Должны быть ДВЕ pусcкие заглавные буквы в серии");
		   	КонецЕсли;
		   	Возврат 0;
		КонецЕсли;
	ИначеЕсли ТипДока=3 Тогда // серия - две цифры
		Серия = СокрЛП(Серия);
		Если (СтрДлина(Серия) <> 2) ИЛИ
		   (ПустаяСтрока(глЗаменитьОдниСимволыДругими("0123456789",Серия,"          "))=0) Тогда
			Если Сообщать=1 Тогда
		   		Предупреждение("Реквизиты документа, удостоверяющего личность, указаны некорректно.
		   					   |Должны быть ДВЕ цифры в серии!");
		   	КонецЕсли;
		   	Возврат 0;
		КонецЕсли;
	ИначеЕсли ТипДока=4 Тогда // новый паспорт
		Серия = СокрЛП(Серия);
		Поз = Найти(Серия," ");
		Если Поз=0 Тогда
			Если Сообщать=1 Тогда
				Предупреждение("Реквизиты документа, удостоверяющего личность, указаны некорректно.
		   					   |Должны быть две группы цифр в серии!");
			КонецЕсли;
			Возврат 0;
		КонецЕсли;
		ПервЧасть = Лев(Серия,Поз-1);
		ВторЧасть = СокрЛП(Сред(Серия,Поз+1));
		Поз = Найти(ВторЧасть," ");
		Если Поз<>0 Тогда
			Если Сообщать=1 Тогда
				Предупреждение("Реквизиты документа, удостоверяющего личность, указаны некорректно.
		   					   |Должны быть только две группы цифр в серии!");
			КонецЕсли;
			Возврат 0;
		КонецЕсли;
		Если (СтрДлина(ПервЧасть) <> 2) ИЛИ
		   (ПустаяСтрока(глЗаменитьОдниСимволыДругими("0123456789",ПервЧасть,"          "))=0) Тогда
			Если Сообщать=1 Тогда
		   		Предупреждение("Реквизиты документа, удостоверяющего личность, указаны некорректно.
		   					   |Первая группа символов серии должна содержать две цифры!");
		   	КонецЕсли;
		   	Возврат 0;
		КонецЕсли;
		Если (СтрДлина(ВторЧасть) <> 2) ИЛИ
		   (ПустаяСтрока(глЗаменитьОдниСимволыДругими("0123456789",ВторЧасть,"          "))=0) Тогда
			Если Сообщать=1 Тогда
		   		Предупреждение("Реквизиты документа, удостоверяющего личность, указаны некорректно.
		   					   |Вторая группа символов серии должна содержать две цифры!");
		   	КонецЕсли;
		   	Возврат 0;
		КонецЕсли;
	КонецЕсли;
	Возврат 1;
КонецФункции //глПроверкаСерииУдостоверенияЛичности

//******************************************************************************
// глПереченьМПЗВСоставеОС(ПровМатериал,Документ )
//
// Параметры:
//  ПровМатериал.- проверяемый материал
//
// Вызывается из формул элементов диалога:
//  Нет.
//
// Описание:
//  Составляет список ОС в которых в реквизите МатериалДляОтраженияВСоставеМПЗ
//  использован данный материал
//	Выполняется для предупреждения пользователя о необходимости контроля данных объектов.
//
Функция глПереченьМПЗВСоставеОС(ПровМатериал,Документ)  Экспорт
	Если Документ.Вид()="ПередачаМатериаловСпецназначенияВПроизводство" Тогда
		ИтоговыйТекст="Передается инвентарь,возможно учтенный в налоговом учете как ОС.
		|Для соответствующих объектов ОС необходимо установить флажок ""Начислять амортизацию"" в справочнике ""Основные средства""."
	ИначеЕсли Документ.Вид()="ОтпускМатериаловНаСторону" Тогда
		ИтоговыйТекст="Отгружается инвентарь, возможно учтенный в налоговом учете как ОС.
		|Выбытие соответствующего объекта ОС должно быть отражено документом Передача ОС."
	ИначеЕсли   (Документ.Вид()="ТребованиеНакладная") или (Документ.Вид()="ГотоваяПродукция") Тогда
		ИтоговыйТекст="Списывается инвентарь, возможно учтенный в налоговом учете как ОС.
		|Для соответствующих объектов ОС необходимо установить флажок ""Начислять амортизацию"" в справочнике ""Основные средства""."
	ИначеЕсли Документ.Вид()="ИнвентаризацияТМЦ" Тогда
		ИтоговыйТекст="Списывается инвентарь, возможно учтенный в налоговом учете как ОС.
		|Выбытие соответствующего объекта ОС должно быть отражено документом Списание ОС."
	КонецЕсли;
	ИтоговыйТекстСписок="
	|Список ОС, отраженных в бухгалтерском учете в качестве материала "+ПровМатериал;
	СпрОС=СоздатьОбъект("Справочник.ОсновныеСредства");
	Если СпрОс.ВыбратьЭлементыПоРеквизиту("МатериалДляОтраженияВСоставеМПЗ",ПровМатериал,0,0)=1 Тогда
		Пока СпрОс.ПолучитьЭлемент()=1 Цикл
			ИтоговыйТекстСписок = ИтоговыйТекстСписок+"
			|Инв.№ "+Строка(СокрЛП(СпрОс.Код))+" - "+СокрЛП(СпрОс.Наименование); 
		КонецЦикла;
		Возврат(ИтоговыйТекст+ИтоговыйТекстСписок);
	Иначе
		Возврат("");
	КонецЕсли;
КонецФункции // глПереченьМПЗВСоставеОС 

//******************************************************************************
// глРасчитатьКоэффициентыРаспределения(НачДата,КонДата,Документ)
//
// Параметры:
//  НачДата - дата начала расчета
//  КонДата - дата окончания расчета
//  Документ - документ, из которого производится вызов функции
//
// Вызывается из формул элементов диалога:
//  Нет.
//
// Описание:
//  Рассчитывает коэффициент распределения между видами деятельности ЕНВД и ОСН
//
Функция глРасчитатьКоэффициентыРаспределения(НачДата,КонДата,Документ="") Экспорт

	// Определим долю выручки от продаж, облагаемых ЕНВД.
	СписокКоэффициентов = СоздатьОбъект("СписокЗначений");
	
	БухИт90 = СоздатьОбъект("БухгалтерскиеИтоги");
	БухИт90.ВключатьСубсчета(1);
	БухИт90.ИспользоватьСубконто(ВидыСубконто.ВидыНоменклатуры);
	БухИт90.ВыполнитьЗапрос(НачМесяца(НачДата), КонМесяца(КонДата), "90",,,, "Месяц");
	
	БухИт90.ВыбратьПериоды(1);
	Пока БухИт90.ПолучитьПериод() = 1 Цикл
		ВыручкаОбщая = 0;
		СебестоимостьОбщая = 0;
		ВыручкаБезЕНВД = 0;
		СебестоимостьБезЕНВД = 0;
		Налоги = 0;
		
		БухИт90.ВыбратьСубконто();
		Пока БухИт90.ПолучитьСубконто() = 1 Цикл
			
			// Если установлен режим распределения расходов по видам деятельности
			// пропорционально доле дохода за вычетом покупной стоимости товаров, то
			// необходимо рассчитать покупную стоимость товаров.
			Если Константа.УчитыватьПокупнуюСтоимостьТоваров.Получить(КонМесяца(КонДата)) <> Нет Тогда
				Если БухИт90.Субконто().ТипНоменклатуры = Перечисление.ТипыНоменклатуры.Товар Тогда
					Если БухИт90.ПолучитьСчет(,"90.2") = 1 Тогда
						СебестоимостьОбщая = СебестоимостьОбщая + БухИт90.ДО();
					КонецЕсли;
					
					Если БухИт90.ПолучитьСчет(,"90.2.1") = 1 Тогда
						СебестоимостьБезЕНВД = СебестоимостьБезЕНВД + БухИт90.ДО();
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
			Если БухИт90.ПолучитьСчет(,"90.1") = 1 Тогда
				ВыручкаОбщая = ВыручкаОбщая + БухИт90.КО();
			КонецЕсли;
			Если БухИт90.ПолучитьСчет(,"90.1.1") = 1 Тогда
				ВыручкаБезЕНВД = ВыручкаБезЕНВД + БухИт90.КО();
			КонецЕсли;
			Если БухИт90.ПолучитьСчет(,"90.3") = 1 Тогда
				Налоги = Налоги + БухИт90.ДО();
			КонецЕсли;
			Если БухИт90.ПолучитьСчет(,"90.4") = 1 Тогда
				Налоги = Налоги + БухИт90.ДО();
			КонецЕсли;
			Если БухИт90.ПолучитьСчет(,"90.5") = 1 Тогда
				Налоги = Налоги + БухИт90.ДО();
			КонецЕсли;
			Если БухИт90.ПолучитьСчет(,"90.6") = 1 Тогда
				Налоги = Налоги + БухИт90.ДО();
			КонецЕсли;
		КонецЦикла;
		
		ПрибыльОбщая = ВыручкаОбщая - СебестоимостьОбщая - Налоги;
		Если ПрибыльОбщая = 0 Тогда 
			Если ПустоеЗначение(Документ) = 0 Тогда
				Если (Документ.Вид() = "ЗакрытиеМесяца") и (Константа.ОрганизацияЯвляетсяПлательщикомЕНВД  = Да) Тогда
					ТекстСообщения = "Нет выручки по счету 90.1. Налоги и сборы с расходов на оплату труда, которые распределяются по видам деятельности, будут отнесены на расходы по деятельности не облагаемой ЕНВД!";
					глСообщениеПроведения(ТекстСообщения, Документ, -1);
				КонецЕсли;
			КонецЕсли;
			
			К = 1;
			
		Иначе
			К = (ВыручкаБезЕНВД - СебестоимостьБезЕНВД - Налоги)/ПрибыльОбщая ;
		КонецЕсли;
		
		Если ПустоеЗначение(Документ) = 0 Тогда
			Возврат К;
		КонецЕсли;
		
		СписокКоэффициентов.Установить(Строка(БухИт90.КонДата), К); // представление - последняя дата месяца
	КонецЦикла; 
	Возврат СписокКоэффициентов;
КонецФункции   //глРасчитатьКоэффициентыРаспределения

//******************************************************************************
// Общие процедуры и функции отчетов и документов для выгрузки ПФР
//******************************************************************************

//******************************************************************************
// глЗаменитьСимволВСтроке(ТекстоваяСтрока)
//
// Параметры: 
//		ТекстоваяСтрока - текстовая строка в которой необходимо заменить "ё" на "е"	
//
// 	Вызывается из формул элементов диалога:
//		
//
//	Описание:
//		
//
Функция глЗаменитьСимволВСтроке(ТекстоваяСтрока) Экспорт
	
	Возврат СтрЗаменить(СтрЗаменить(ТекстоваяСтрока,"ё","е"),"Ё","Е");	
	
КонецФункции //глЗаменитьСимволВСтроке();

//******************************************************************************
//	глхмлСтрахователь(хмлСоставительПачки, ИНН, КПП)
//
//	Параметры:
//		хмлСоставительПачки - исходный тег
//		ИНН
//      КПП
// 
//	Описание:
//		Формирует теги о страхователе
//
Процедура глхмлСтрахователь(хмлСоставительПачки, ИНН, КПП, РегНомерПФР) Экспорт
	
	хмлНалоговыйНомер	= хмлСоставительПачки.СоздатьПодчиненныйЭлемент("НалоговыйНомер");
	
	хмлИНН				= хмлНалоговыйНомер.СоздатьПодчиненныйЭлемент("ИНН");
	хмлИНН.Значение		= ИНН;
	
	хмлКПП				= хмлНалоговыйНомер.СоздатьПодчиненныйЭлемент("КПП");
	хмлКПП.Значение		= КПП;				
	
	Если СтрДлина(ИНН) = 10 Тогда
		хмлКодЕГРЮЛ			= хмлСоставительПачки.СоздатьПодчиненныйЭлемент("КодЕГРЮЛ");
		хмлКодЕГРЮЛ.Значение= СокрЛП(Константа.ОГРН);
	Иначе
		хмлКодЕГРИП			= хмлСоставительПачки.СоздатьПодчиненныйЭлемент("КодЕГРИП");
		хмлКодЕГРИП.Значение= СокрЛП(Константа.ОГРН);		
	КонецЕсли;
		
	хмлФорма			= хмлСоставительПачки.СоздатьПодчиненныйЭлемент("Форма");
	хмлФорма.Значение	= ВРЕГ(СокрЛП(Константа.ОргПравФорма));
	
	хмлНаименованиеОрганизации			= хмлСоставительПачки.СоздатьПодчиненныйЭлемент("НаименованиеОрганизации");
	хмлНаименованиеОрганизации.Значение	= ВРЕГ(СокрЛП(Константа.ОфициальноеНазваниеОрганизации));				
	
	хмлНаименованиеКраткое	= хмлСоставительПачки.СоздатьПодчиненныйЭлемент("НаименованиеКраткое");
	хмлНаименованиеКраткое.Значение	= ВРЕГ(СокрЛП(Константа.НазваниеОрганизации));  
	
	хмлРегистрационныйНомер = хмлСоставительПачки.СоздатьПодчиненныйЭлемент("РегистрационныйНомер");
	хмлРегистрационныйНомер.Значение = РегНомерПФР;
	
КонецПроцедуры //глхмлСтрахователь

//******************************************************************************
// глПолучитьГеографическоеНазваниеиСокращение(Адрес,ВозвращаемоеЗначеие)
//
// Параметры: 
//  ЧастьАдреса - Часть адреса, например регион будет выглядеть так "Московская обл"
//	ВозвращаемоеЗначеие - если 1, тогда вернет "МОСКОВСКАЯ", если 2, то "ОБЛ"
//
// Возвращаемое значение:
//		Если ВозвращаемоеЗначеие = 1, тогда вернет "МОСКОВСКАЯ", если ВозвращаемоеЗначеие = 2, то "ОБЛ"
// Описание:
//
Функция глПолучитьГеографическоеНазваниеиСокращение(ЧастьАдреса,ВозвращаемоеЗначеие) Экспорт
	    
	ПерваяЧастьАдреса	= "";
	ВтораяЧастьАдреса	= "";
	СчСимволов = СтрДлина(ЧастьАдреса);
	Пока СчСимволов > 0 Цикл		
		    
		ПолученныйСимвол = Сред(ЧастьАдреса,СчСимволов,1);
		
		Если ПолученныйСимвол = " " Тогда			
			Прервать;
		ИначеЕсли ВозвращаемоеЗначеие = 2 Тогда
			ВтораяЧастьАдреса = ПолученныйСимвол + ВтораяЧастьАдреса;
		КонецЕсли;		
		
		СчСимволов = СчСимволов - 1;
	КонецЦикла;
	
	Если ВозвращаемоеЗначеие = 1 Тогда
		Возврат Лев(ЧастьАдреса, СчСимволов);
	ИначеЕсли ВозвращаемоеЗначеие = 2 Тогда
		Возврат ВтораяЧастьАдреса;
	КонецЕсли;
	
КонецФункции //глПолучитьГеографическоеНазваниеиСокращение

//******************************************************************************
//	глxmlРоссийскийАдрес(хмлРоссийскийАдрес, АдресСписком)
//
//	Параметры:
//		хмлРоссийскийАдрес - тег адреса 
//		АдресСписком - адрес списком
// 
// Описание:
//		Выводит адрес по формату 7.00
//
//
Процедура глxmlРоссийскийАдрес(хмлРоссийскийАдрес, АдресСписком) Экспорт
	
	хмлСостояниеАдреса		= хмлРоссийскийАдрес.СоздатьПодчиненныйЭлемент("СостояниеАдреса"); 
	хмлСостояниеАдреса.Значение = "ПРАВИЛЬНЫЙ";
	
	Если ПустоеЗначение(АдресСписком.ПолучитьЗначение(3)) = 0 Тогда						
		хмлРегион					= хмлРоссийскийАдрес.СоздатьПодчиненныйЭлемент("Регион"); 						
		хмлГеографическоеНазвание	= хмлРегион.СоздатьПодчиненныйЭлемент("ГеографическоеНазвание"); 												
		хмлГеографическоеНазвание.Значение	= ВРег(глЗаменитьСимволВСтроке(СОКРЛП(глПолучитьГеографическоеНазваниеиСокращение(АдресСписком.ПолучитьЗначение(3),1))));
		хмлСокращение			= хмлРегион.СоздатьПодчиненныйЭлемент("Сокращение"); 
		хмлСокращение.Значение	=   ВРег(глЗаменитьСимволВСтроке(СОКРЛП(глПолучитьГеографическоеНазваниеиСокращение(АдресСписком.ПолучитьЗначение(3),2))));
	КонецЕсли;
	Если ПустоеЗначение(АдресСписком.ПолучитьЗначение(4)) = 0 Тогда						
		хмлРайон							= хмлРоссийскийАдрес.СоздатьПодчиненныйЭлемент("Район");
		хмлГеографическоеНазвание			= хмлРайон.СоздатьПодчиненныйЭлемент("ГеографическоеНазвание"); 												
		хмлГеографическоеНазвание.Значение	= ВРег(глЗаменитьСимволВСтроке(СОКРЛП(глПолучитьГеографическоеНазваниеиСокращение(АдресСписком.ПолучитьЗначение(4),1))));
		хмлСокращение						= хмлРайон.СоздатьПодчиненныйЭлемент("Сокращение"); 
		хмлСокращение.Значение				= ВРег(глЗаменитьСимволВСтроке(СОКРЛП(глПолучитьГеографическоеНазваниеиСокращение(АдресСписком.ПолучитьЗначение(4),2))));
	КонецЕсли;
	Если ПустоеЗначение(АдресСписком.ПолучитьЗначение(5)) = 0 Тогда						
		хмлГород							= хмлРоссийскийАдрес.СоздатьПодчиненныйЭлемент("Город");
		хмлГеографическоеНазвание			= хмлГород.СоздатьПодчиненныйЭлемент("ГеографическоеНазвание"); 												
		хмлГеографическоеНазвание.Значение	= ВРег(глЗаменитьСимволВСтроке(СОКРЛП(глПолучитьГеографическоеНазваниеиСокращение(АдресСписком.ПолучитьЗначение(5),1))));
		хмлСокращение						= хмлГород.СоздатьПодчиненныйЭлемент("Сокращение"); 
		хмлСокращение.Значение				= ВРег(глЗаменитьСимволВСтроке(СОКРЛП(глПолучитьГеографическоеНазваниеиСокращение(АдресСписком.ПолучитьЗначение(5),2))));							
	КонецЕсли;
	Если ПустоеЗначение(АдресСписком.ПолучитьЗначение(6)) = 0 Тогда
		хмлНаселенныйПункт					= хмлРоссийскийАдрес.СоздатьПодчиненныйЭлемент("НаселенныйПункт");
		хмлГеографическоеНазвание			= хмлНаселенныйПункт.СоздатьПодчиненныйЭлемент("ГеографическоеНазвание");
		хмлГеографическоеНазвание.Значение	= ВРег(глЗаменитьСимволВСтроке(СОКРЛП(глПолучитьГеографическоеНазваниеиСокращение(АдресСписком.ПолучитьЗначение(6),1))));
		хмлСокращение						= хмлНаселенныйПункт.СоздатьПодчиненныйЭлемент("Сокращение");
		хмлСокращение.Значение				= ВРег(глЗаменитьСимволВСтроке(СОКРЛП(глПолучитьГеографическоеНазваниеиСокращение(АдресСписком.ПолучитьЗначение(6),2))));
	КонецЕсли;     
	Если ПустоеЗначение(АдресСписком.ПолучитьЗначение(7)) = 0 Тогда
		хмлУлица							= хмлРоссийскийАдрес.СоздатьПодчиненныйЭлемент("Улица");
		хмлГеографическоеНазвание			= хмлУлица.СоздатьПодчиненныйЭлемент("ГеографическоеНазвание");
		хмлГеографическоеНазвание.Значение	= ВРег(глЗаменитьСимволВСтроке(СОКРЛП(глПолучитьГеографическоеНазваниеиСокращение(АдресСписком.ПолучитьЗначение(7),1))));
		хмлСокращение						= хмлУлица.СоздатьПодчиненныйЭлемент("Сокращение");
		хмлСокращение.Значение				= ВРег(глЗаменитьСимволВСтроке(СОКРЛП(глПолучитьГеографическоеНазваниеиСокращение(АдресСписком.ПолучитьЗначение(7),2))));
	КонецЕсли;
	Если ПустоеЗначение(АдресСписком.ПолучитьЗначение(8)) = 0 Тогда
		хмлДом								= хмлРоссийскийАдрес.СоздатьПодчиненныйЭлемент("Дом");						
		хмлСокращение						= хмлДом.СоздатьПодчиненныйЭлемент("Сокращение");						
		хмлСокращение.Значение				= "Д";
		хмлНомер							= хмлДом.СоздатьПодчиненныйЭлемент("Номер");
		хмлНомер.Значение					= ВРег(СОКРЛП(глПолучитьГеографическоеНазваниеиСокращение(АдресСписком.ПолучитьЗначение(8),2)));
	КонецЕсли;                             
	Если ПустоеЗначение(АдресСписком.ПолучитьЗначение(9)) = 0 Тогда
		хмлКорпус							= хмлРоссийскийАдрес.СоздатьПодчиненныйЭлемент("Корпус");
		хмлСокращение						= хмлКорпус.СоздатьПодчиненныйЭлемент("Сокращение");
		хмлСокращение.Значение				= "КОРП";							
		хмлНомер							= хмлКорпус.СоздатьПодчиненныйЭлемент("Номер");
		хмлНомер.Значение					= ВРег(СОКРЛП(глПолучитьГеографическоеНазваниеиСокращение(АдресСписком.ПолучитьЗначение(9),2)));
	КонецЕсли;
	Если ПустоеЗначение(АдресСписком.ПолучитьЗначение(10)) = 0 Тогда
		хмлКвартира							= хмлРоссийскийАдрес.СоздатьПодчиненныйЭлемент("Квартира");
		хмлСокращение						= хмлКвартира.СоздатьПодчиненныйЭлемент("Сокращение");
		хмлСокращение.Значение				= "КВ";							
		хмлНомер							= хмлКвартира.СоздатьПодчиненныйЭлемент("Номер");
		хмлНомер.Значение					= ВРег(СОКРЛП(глПолучитьГеографическоеНазваниеиСокращение(АдресСписком.ПолучитьЗначение(10),2)));
	КонецЕсли
	
	
КонецПроцедуры //глxmlРоссийскийАдрес

//******************************************************************************
//	глЗаписатьУзелВФайл(РезФайл, ХМЛУзел, СтрокаТабуляции)
//
//	Параметры:
//		РезФайл
//		ХМЛУзел
//		СтрокаТабуляции   
// 
// Описание:
//		Рекурсивно записывается узел в файл, с форматированием выводимого текста.
//
//
Процедура глЗаписатьУзелВФайл(РезФайл, ХМЛУзел, СтрокаТабуляции) Экспорт
	КоличПодчиненных = ХМЛУзел.КоличествоПодчиненных();
	Если КоличПодчиненных = 1 Тогда
		КоличПодчиненныхПодчиненного = ХМЛУзел.ПолучитьПодчиненныйПоНомеру(1).КоличествоПодчиненных();
	Иначе
		КоличПодчиненныхПодчиненного = 1;
	КонецЕсли;
	Если КоличПодчиненныхПодчиненного = 0 Тогда
		ЗаписываемаяСтрока = СтрокаТабуляции + ХМЛУзел.ПредставлениеXML();          
		РезФайл.ЗаписатьСтроку(ЗаписываемаяСтрока);
	Иначе   
		Если  ХМЛУзел.Наименование = "ПачкаВходящихДокументов" Тогда
			ЗаписываемаяСтрока = "<ПачкаВходящихДокументов Окружение=""В составе файла"" Стадия=""До обработки"">";
		Иначе
			ЗаписываемаяСтрока = СтрокаТабуляции + "<" + ХМЛУзел.Наименование + ">";       
		КонецЕсли;
		
		РезФайл.ЗаписатьСтроку(ЗаписываемаяСтрока);
		Для Сч = 1 По КоличПодчиненных Цикл
			глЗаписатьУзелВФайл(РезФайл, ХМЛУзел.ПолучитьПодчиненныйПоНомеру(Сч), СтрокаТабуляции+СимволТабуляции);
			
		КонецЦикла;
		ЗаписываемаяСтрока = СтрокаТабуляции + "</" + ХМЛУзел.Наименование + ">";       
		РезФайл.ЗаписатьСтроку(ЗаписываемаяСтрока);
	КонецЕсли;
КонецПроцедуры //глЗаписатьУзелВФайл


//******************************************************************************
//	глЗаписатьXMLФайлПФР(ИмяФайла,ХМЛФайлДанных)
//
//	Параметры:
//		хмлРоссийскийАдрес - тег адреса 
//		АдресСписком - адрес списком
// 
// Описание:
//		записывает и показывает xml файл
//
//
Процедура глЗаписатьXMLФайлПФР(ИмяФайла,ХМЛФайлДанных) Экспорт
	РезФайл		=	СоздатьОбъект("AddIn.V7TextFile");
	РезФайл.ОткрытьФайл(ИмяФайла, 1);
	
	
	Данные = ХМЛФайлДанных.ВыбратьУзел("ФайлПФР");
	РезФайл.ЗаписатьСтроку("<?xml version=""1.0"" encoding=""windows-1251""?>");					
	РезФайл.ЗаписатьСтроку("<ФайлПФР>");
	Для Сч = 1 По Данные.КоличествоПодчиненных() Цикл
		глЗаписатьУзелВФайл(РезФайл, Данные.ПолучитьПодчиненныйПоНомеру(Сч),СимволТабуляции);                                   
	КонецЦикла;
	РезФайл.ЗаписатьСтроку("</ФайлПФР>");				
	РезФайл.ЗакрытьФайл();					

КонецПроцедуры //глЗаписатьXMLФайлПФР

//******************************************************************************
// глСтрокаНаписанаПоРусски(СтрокаПараметр)
//
// Параметры:
//		СтрокаПараметр - строка, проверяемая строка.
//
// Возвращаемое значение:
//		1 - строка состоит из допустимых символов
//		0 - в строке встречаются недопустимые символы
//
// Описание:
//		Строке проверяется на наличие только русских букв; кроме того,
//		допускаются пробелы и дефис
//
Функция глСтрокаНаписанаПоРусски(Знач СтрокаПараметр) Экспорт
	//если получили реквизит справочника - подстрахуемся
	СтрокаПараметр = СокрЛП(СтрокаПараметр);	
    
	СписокДопустимыхЗначений = СоздатьОбъект("СписокЗначений");
	СписокДопустимыхЗначений.ДобавитьЗначение(184); 
	СписокДопустимыхЗначений.ДобавитьЗначение(168);
	СписокДопустимыхЗначений.ДобавитьЗначение(45);
	СписокДопустимыхЗначений.ДобавитьЗначение(46);
	СписокДопустимыхЗначений.ДобавитьЗначение(32);
	СписокДопустимыхЗначений.ДобавитьЗначение(48);
	СписокДопустимыхЗначений.ДобавитьЗначение(49);
	СписокДопустимыхЗначений.ДобавитьЗначение(50);
	СписокДопустимыхЗначений.ДобавитьЗначение(51);
	СписокДопустимыхЗначений.ДобавитьЗначение(52);
	СписокДопустимыхЗначений.ДобавитьЗначение(53);
	СписокДопустимыхЗначений.ДобавитьЗначение(54);
	СписокДопустимыхЗначений.ДобавитьЗначение(55);
	СписокДопустимыхЗначений.ДобавитьЗначение(56);
	СписокДопустимыхЗначений.ДобавитьЗначение(57);
	
	Для Сч=1 По СтрДлина(СтрокаПараметр) Цикл
		Код = КодСимв(Сред(СтрокаПараметр,Сч));
		Если (Код<192) И (СписокДопустимыхЗначений.Принадлежит(Код) = 0) Тогда
			Возврат 0;
		КонецЕсли;
	КонецЦикла;
	
	Возврат 1;
	
КонецФункции // глСтрокаНаписанаПоРусски()

Функция ПроверитьЛегальностьПолученияОбновления()
	
	Если Константа.НомерРелиза <> Лев(Метаданные.Комментарий, 8) Тогда
		
		ПодтверждениеЛегитимности = ВосстановитьЗначение("ЛегальностьПолученияОбновления");
		Если ПодтверждениеЛегитимности = 1 Тогда
			СохранитьЗначение("ЛегальностьПолученияОбновления",0);			
			Возврат 1;
		КонецЕсли;
		
		ПодтверждениеЛегитимности = 0;
		ОткрытьФормуМодально("Обработка.ЛегальностьПолученияОбновлений",ПодтверждениеЛегитимности);
		Если ПодтверждениеЛегитимности = 2 Тогда
			СохранитьЗначение("НеЗапрашиватьПодтверждениеПриВыходе",1);
			ЗавершитьРаботуСистемы();
			Возврат 0;
		КонецЕсли;
	КонецЕсли;
	Возврат 1;
	
КонецФункции 

//******************************************************************************
// глУдалитьСтрокуИзСписка(Объект)
//
// Параметры:
//		Объект - список значений
//
// Вызывается из формул элементов диалога:
//		Удалить
//  
// Описание:
//		Удаляет текущую строку из списка; если список пуст, либо
//		текущая строка не выставлена - удаления не происходит
//
Процедура глУдалитьСтрокуИзСписка(Объект) Экспорт
    
	Если (Объект.РазмерСписка() > 0) и (Объект.ТекущаяСтрока() > 0) Тогда
		Объект.УдалитьЗначение(Объект.ТекущаяСтрока());	
	КонецЕсли;	
	
КонецПроцедуры // глУдалитьСтрокуИзСписка()

//******************************************************************************
//	глПодборПоСотрудникам(КонтекстФормы)
//
//	Параметры:
//		КонтекстФормы - контекст формы (документа, справочника, ...), где осуществляется подбор.
//
//	Описание:
//		Открывает справочник Сотрудники для подбора, если это возможно.
//
Процедура глПодборПоСотрудникам(КонтекстФормы) Экспорт

	Если КонтекстФормы.Форма.МодальныйРежим()=1 Тогда
		Предупреждение("Невозможно открыть подбор в модальном режиме!",10);
	Иначе
		КонтекстФормы.ОткрытьПодбор("Справочник.Сотрудники","ДляВыбора",,1);
	КонецЕсли;

КонецПроцедуры	// глПодборПоСотрудникам

//******************************************************************************
//	глОчистить(Объект)
//
//	Параметры:
//		Объект - контекст формы, таблица значений, список значений
//
//	Описание:
//		Удаляет все строки табличной части документа, если передан контекст документа
//		Удаляет все строки таблицы значений, если передана таблица значений
//		Удаляет все элементы списка значений, если передан список значений
//		Вызывается из диалогов по кнопке "Очистить"
//
Процедура глОчистить(Объект) Экспорт
	Если ТипЗначенияСтр(Объект)="СписокЗначений" Тогда
		// если передали список значений
		Если Объект.РазмерСписка()>0 Тогда
			Если Вопрос("Список будет очищен, а существующие строки удалены."
						"Продолжить?","Да+Нет")="Да" Тогда
				Объект.УдалитьВсе();
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли ТипЗначения(Объект)=100 Тогда
		// если передали таблицу значений или контекст документа
		Если ТипЗначенияСтр(Объект)<>"ТаблицаЗначений" Тогда
			Если Объект.Форма.ТолькоПросмотр() = 1 Тогда // документ, открытый только для чтения - делать ничего нельзя
		        Возврат
		    КонецЕсли;
		КонецЕсли;
		Если Объект.КоличествоСтрок()>0 Тогда
			Если Вопрос(?(ТипЗначенияСтр(Объект)="ТаблицаЗначений","Таблица","Табличная часть документа")
						+" будет очищена, а существующие строки удалены."
						"Продолжить?","Да+Нет")="Да" Тогда
				Объект.УдалитьСтроки();
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры	// глОчистить 

//******************************************************************************
//	глСортироватьСотрудниковВФормеОтчета()
//
//	Параметры:
//		СписокСотрудников - контрол формы отчета со списком сотрудников
// 
//	Вызывается из форм отчетов, которые готовятся по списку сотрудников (по кнопке Сортировать)
//
//	Описание:
//		Запрос типа сортировки и сортировка сотрудников в спсике значений 
//		(который представляет собой контрол формы отчета)
//
Процедура глСортироватьСотрудниковВФормеОтчета(СписокСотрудников) Экспорт
	Перем Способ;

	// текущий сотрудник (для позиционирования после сортировки)
	ТекущийСотр = "";
	Если СписокСотрудников.ТекущаяСтрока()>0 Тогда
		ТекущийСотр = СписокСотрудников.ПолучитьЗначение(СписокСотрудников.ТекущаяСтрока());
	КонецЕсли;
	
	СпособыСортировки = СоздатьОбъект("СписокЗначений");
	СпособыСортировки.ДобавитьЗначение("ФизЛицо+", "По ФИО");
	СпособыСортировки.ДобавитьЗначение("ТН+", "По табельному номеру (коду)");
	Если СпособыСортировки.ВыбратьЗначение(Способ,,,,1) <> 1 Тогда
		Возврат;
	КонецЕсли;
	Если Способ = "ФизЛицо+" Тогда
		СписокСотрудников.Сортировать();
	Иначе
		ТаблФизЛиц = СоздатьОбъект("ТаблицаЗначений");
		ТаблФизЛиц.НоваяКолонка(,"Строка",10,,,,,);
		ТаблФизЛиц.НоваяКолонка(,"Справочник.Сотрудники",,,,,,);
		Для Номер = 1 по СписокСотрудников.РазмерСписка() Цикл
			Сотр = СписокСотрудников.ПолучитьЗначение(Номер);
            ТаблФизЛиц.НоваяСтрока();
			ТаблФизЛиц.УстановитьЗначение(Номер,1,Сотр.Код);
			ТаблФизЛиц.УстановитьЗначение(Номер,2,Сотр);
		КонецЦикла;
		ТаблФизЛиц.Сортировать("1");
		СписокСотрудников.УдалитьВсе();
		Для Сч=1 По ТаблФизЛиц.КоличествоСтрок() Цикл
			Сотр = ТаблФизЛиц.ПолучитьЗначение(Сч,2);
			СписокСотрудников.ДобавитьЗначение(Сотр,""+Сотр+?(Сотр.ТекущийЭлемент() = Сотр,""," (Внутр. совм.)"));
		КонецЦикла;
	КонецЕсли;
	Если ТекущийСотр<>"" Тогда
		СписокСотрудников.ТекущаяСтрока(СписокСотрудников.НайтиЗначение(ТекущийСотр));
	КонецЕсли;
	
КонецПроцедуры   // глСортироватьСотрудниковВФормеОтчета

//******************************************************************************
// Функция запуска перехода на БП 8
//******************************************************************************

Функция ВыгрузкаВ1СБухгалтерию8(ДатаНачала, ДатаОкончания, ИмяФайлаВыгрузки, ИмяФайлаПравил, ИмяФайлаДанных) Экспорт
    
	Попытка
		ИмяКоманды = "Выгрузить";		
		Конт = СоздатьОбъект("СписокЗначений");
		Конт.ДобавитьЗначение(Дата(ДатаНачала), "ДатаНачала"); 
		Конт.ДобавитьЗначение(Дата(ДатаОкончания), "ДатаОкончания");
		Конт.ДобавитьЗначение(ИмяФайлаПравил, "ИмяФайлаПравил");
		Конт.ДобавитьЗначение(ИмяФайлаДанных, "ИмяФайлаДанных"); 	
		Конт.ДобавитьЗначение(ИмяКоманды, "ИмяКоманды"); 
		Конт.ДобавитьЗначение(0, "КомментироватьВыгрузкуОбъектов");
		ТаблицаНастройкиПараметров = СоздатьОбъект("СписокЗначений");
		ТаблицаНастройкиПараметров.ДобавитьЗначение(Перечисление.Булево.Нет, "ВыгружатьКоды                                     "); // пробелы в таком количестве неспроста, для обработки важна длина строки с параметрами (50 символов)
		Конт.ДобавитьЗначение(ТаблицаНастройкиПараметров, "ТаблицаНастройкиПараметров");
		ОткрытьФормуМодально("Отчет", Конт, ИмяФайлаВыгрузки);
		Возврат Конт.ВСтрокуСРазделителями();		
	Исключение
		Возврат 0;		
	КонецПопытки
	
КонецФункции
//******************************************************************************
//NDline
Процедура глЗаполнитьШапку(Конт, Скопирован) Экспорт
	Конт.ЮрЛицо = Константа.ОсновноеЮрЛицо;
	Префикс = СокрЛП(Константа.ПрефиксИБ) + СокрЛП(Конт.ЮрЛицо.ПрефиксНомеровДокументов);
	Если ПустаяСтрока(Префикс) = 1 Тогда
		Конт.УстановитьНовыйНомер("0");
	Иначе
		Конт.УстановитьНовыйНомер(Префикс);
	КонецЕсли;
КонецПроцедуры
//_____________________________________________________________________________
Процедура глПриИзмененииЮрЛица(Конт) Экспорт
	Префикс = Конт.ЮрЛицо.ПрефиксНомеровДокументов;Префикс = СокрЛП(Константа.ПрефиксИБ) + СокрЛП(Конт.ЮрЛицо.ПрефиксНомеровДокументов);
	Если ПустаяСтрока(Префикс) = 1 Тогда
		Конт.УстановитьНовыйНомер("0");
	Иначе
		Конт.УстановитьНовыйНомер(Префикс);
	КонецЕсли;
КонецПроцедуры
//NDline
//******************************************************************************
// Инициализация переменных необходимых для стандартных отчетов
//
глФлагРасшифровки = 0;
глОбновить = 0;
БухИтоги = СоздатьОбъект("БухгалтерскиеИтоги");
УстановитьФорматСумм();

///////////////////////////////////////////////////////////////////////////
// Инициализация переменных правовой поддержки и Видеокурса
Если ЗагрузитьВнешнююКомпоненту("1CRtInf.dll") = 1 Тогда
	Норм_Компонента = СоздатьОбъект("AddIn.DBExtension");
КонецЕсли;

Если ЗагрузитьВнешнююКомпоненту("videoAdd.dll") = 1 Тогда
	Видео_Компонента = СоздатьОбъект("AddIn.1C:VideoCourse");
КонецЕсли;

///////////////////////////////////////////////////////////////////////////
//
глТаблицаСчетов = СоздатьОбъект("ТаблицаЗначений");
глТаблицаСчетов.НоваяКолонка("Счет");
глТаблицаСчетов.НоваяКолонка("Субконто1");
глТаблицаСчетов.НоваяКолонка("Субконто2");
глТаблицаСчетов.НоваяКолонка("Субконто3");
глТаблицаСчетов.НоваяКолонка("Валюта");
глТаблицаСчетов.НоваяКолонка("Курс");
глТаблицаСчетов.НоваяКолонка("РублевыйОстаток");
глТаблицаСчетов.НоваяКолонка("ВалютныйОстаток");

глСписокОбщихЖурналов = СоздатьОбъект("СписокЗначений");
глСписокОбщихЖурналов.ДобавитьЗначение("ЖурналОпераций");
глСписокОбщихЖурналов.ДобавитьЗначение("Общий");
глСписокОбщихЖурналов.ДобавитьЗначение("СчетаФактурыВыданные");
глСписокОбщихЖурналов.ДобавитьЗначение("СчетаФактурыПолученные");

глОбщиеУстановки = ВосстановитьЗначение("ОбщиеУстановки");

глПоОплате = Перечисление.МетодыОпределенияВыручки.ПоОплате;
глПоОтгрузке = Перечисление.МетодыОпределенияВыручки.ПоОтгрузке;

Да = Перечисление.Булево.Да;
Нет = Перечисление.Булево.Нет;

глИмяДоговораДляПлатежейБезДоговора = "Без договора (служебный; для платежей без указания договора)";
глИмяДоговораДляПлатежейБезДоговораТорг = "Без договора (служебный, торг.; для платежей без указания договора)";
глИмяСотрудникаПоВсем = "По всем сотрудникам";
глИмяСтатьиРасходовБудущихПериодовДляОбмена = "По оплате труда и фондам (используется при обмене данными)";
глФондыЕСН = "ЕСН_ФБ,ПФР_страх,ПФР_нак,ФСС,ФФОМС,ТФОМС";
глСпрТарифСтраховыхВзносов = СоздатьОбъект("Справочник.ТарифСтраховыхВзносов");

глКаталогПечФорм = КаталогИБ()+"ExtForms\PrnForms\";
глКаталогОписаний = КаталогИБ() + "ExtForms\Equip\";