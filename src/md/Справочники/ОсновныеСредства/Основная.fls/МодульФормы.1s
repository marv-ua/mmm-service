////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ
// 
Перем ТаблицаПечФорм;  // список печатных форм справочника
Перем НомерТекущейФормы;
Перем СписокНедоступныхКолонок;
Перем ИдентификаторФормы;
Перем ПолныйСписокКолонок;
Перем Сч01_1, Сч02_1, Сч02_2, Сч03_1, Сч03_2, Сч03_3, Сч03_4, Сч010;
Перем ТекИспользоватьДату;

//_____________________________________________________________________________
Функция ИнформационнаяСтрока()
	Перем Стр;

	Стр = "";
	Если ТекущийЭлемент().Выбран() = 0 Тогда
	ИначеЕсли ТекущийЭлемент().ЭтоГруппа() = 1 Тогда
	ИначеЕсли КонМесяца(РабочаяДата()) > КонецРассчитанногоПериодаБИ() Тогда
		Стр = "На " + Формат(РабочаяДата(), "Д (0)ДДММГГГ") + " бухгалтерские итоги не рассчитаны!"+РазделительСтрок+
			"Расчет итогов выполняется в режиме"+РазделительСтрок+
			"""Операции - Управление бухгалтерскими итогами"".";
	Иначе
		СведенияОбОС = глРасчетАмортизацииОС(ТекущийЭлемент(), ТекИспользоватьДату, 0);
		СчетНачисленияАмортизации = СведенияОбОС.Получить("СчетНачисленияАмортизации");
		СчетУчета = СведенияОбОС.Получить("СчетУчета");
		НачисленнаяАмортизация = СведенияОбОС.Получить("НачисленнаяАмортизацияКон");
		БалансоваяСтоимость = СведенияОбОС.Получить("БалансоваяСтоимостьКон");
		ОстаточнаяСтоимость = БалансоваяСтоимость - НачисленнаяАмортизация;

		Если ТекущийЭлемент().ПодлежитАмортизации = 1 Тогда
		    Стр = "Начисленная амортизация";
		Иначе
			Стр = "Начисленный износ";
		КонецЕсли;
		
		СчетНачисленияАмортизации = ?(ПустоеЗначение(СчетНачисленияАмортизации)=0, " ("+СчетНачисленияАмортизации+") : ", " : ");
		СчетУчета = ?(ПустоеЗначение(СчетУчета)=0, " ("+СчетУчета+") : ", " : ");
		Стр = "Балансовая стоимость" + СчетУчета + СокрЛ(ФорматС(БалансоваяСтоимость)) + РазделительСтрок +
			  Стр + СчетНачисленияАмортизации + СокрЛ(ФорматС(НачисленнаяАмортизация)) + РазделительСтрок +
			  "Остаточная стоимость : " + СокрЛ(ФорматС(ОстаточнаяСтоимость)) + РазделительСтрок +
			  "Данные актуальны на конец дня " + Формат(КонМесяца(ИспользоватьДату()), "Д (0)ДДММГГГГ");
	КонецЕсли;

	Возврат Стр;
КонецФункции //ИнформационнаяСтрока

//******************************************************************************
Процедура ПостроитьОтчет()
	Расшифровка = СоздатьОбъект("СписокЗначений");
    Расшифровка.Установить("Отчет", "ОтчетПоОС");
    Расшифровка.Установить("ВариантФормирования", 1);
    Расшифровка.Установить("ДатаНач", НачалоПериодаБИ());
    Расшифровка.Установить("ДатаКон", КонецПериодаБИ());
    Расшифровка.Установить("ОбъектОС", );
    
	СписокВозможныхГруппировок = СоздатьОбъект("СписокЗначений");
	СписокВозможныхГруппировок.ДобавитьЗначение("Группа", "Вид (группа) ОС");
	СписокВозможныхГруппировок.ДобавитьЗначение("Подразделение", "Место эксплуатации");
	СписокВозможныхГруппировок.ДобавитьЗначение("МОЛ", "Ответственное лицо");
	СписокВозможныхГруппировок.ДобавитьЗначение("АмортизационнаяГруппа", "Амортизационная группа");
	СписокВозможныхГруппировок.ДобавитьЗначение("СтавкаНалогаНаИмущество", "Ставка налога на имущество");
	СписокВозможныхГруппировок.Пометка(1,1);
	
	Сортировка = СоздатьОбъект("СписокЗначений");
	Сортировка.ДобавитьЗначение("ОС","По наименованию");
	Сортировка.ДобавитьЗначение("Код","По коду");
	Сортировка.ДобавитьЗначение("ДатаВвода","По дате ввода в эксплуатацию");
		
	Расшифровка.Установить("СписокВозможныхГруппировок", СписокВозможныхГруппировок);
	Расшифровка.Установить("Сортировка", Сортировка);
	Расшифровка.Установить("СтрокаСортировки",1);
	Расшифровка.Установить("ОС", ТекущийЭлемент());
		
	глРасшифровка = Расшифровка;
	глФлагРасшифровки = 1;
	глОбновить = 0;
	ОткрытьФорму("Отчет.ОтчетПоОС");
	глФлагРасшифровки = 0;
КонецПроцедуры //ПостроитьОтчет

//******************************************************************************
Процедура Отчет()
	Расшифровка = СоздатьОбъект("СписокЗначений");
	Расшифровка.Установить("Отчет", "АнализСубконто");
	Расшифровка.Установить("РазделительУчета", БухИтоги.ИспользоватьРазделительУчета());
	Расшифровка.Установить("Дата1", НачМесяца(РабочаяДата()));
	Расшифровка.Установить("Дата2", КонМесяца(РабочаяДата()));
	Расшифровка.Установить("ВидСубконто1", ВидыСубконто.ОсновныеСредства);
	Если ТекущийЭлемент().Выбран() = 1 Тогда
		Расшифровка.Установить("Субконто1", ТекущийЭлемент());
		Если ТекущийЭлемент().ЭтоГруппа() = 1 Тогда
			Расшифровка.Установить("ПоГруппам1", 1);
			Расшифровка.Установить("ОтборСубконто1", 1);
		Иначе
			Расшифровка.Установить("ПоГруппам1", 0);
			Расшифровка.Установить("ОтборСубконто1", 2);
		КонецЕсли;
	КонецЕсли;
	Расшифровка.Установить("ДанныеПоСубсчетам", 1);

	глРасшифровка = Расшифровка;
	глОбновить = 2;
	глТаблица = "";
	глФлагРасшифровки = 1;
	ОткрытьФорму("Отчет.АнализСубконто");
	глФлагРасшифровки = 0;
	глОбновить = 0;
КонецПроцедуры //Отчет

//******************************************************************************
Процедура Печать()
	Если ТекущийЭлемент().Выбран() = 0 Тогда
	    Предупреждение("Нельзя сформировать инвентарную карточку, не указав Основное средство.
						|Введите Основное средство.");
	ИначеЕсли ТекущийЭлемент().ЭтоГруппа() = 1 Тогда
	    Предупреждение("Нельзя сформировать инвентарную карточку для группы Основных средств.
						|Выберите конкретное Основное средство.");
	Иначе
		Если РабочаяДата()<Дата("23.03.2003") Тогда
			Таб = СоздатьОбъект("Таблица");
			Таб.ИсходнаяТаблица("ОС-6_97");
			
			ИсторияИзмененияСостояний = СоздатьОбъект("Периодический");
			ИсторияИзмененияСостояний.ИспользоватьОбъект("Состояние", ТекущийЭлемент());
			ИсторияИзмененияСостояний.ВыбратьЗначения();
			ДокументПоступления = "";
			ДокументВводаВЭксплуатацию = "";
			ДокументВыбытия = "";
			Пока ИсторияИзмененияСостояний.ПолучитьЗначение() = 1 Цикл
				ИстДок = ИсторияИзмененияСостояний.ТекущийДокумент();
				Если ИстДок.Выбран() = 1 Тогда
					Если ИстДок.Вид() = "ПоступлениеОС" Тогда
						ДокументПоступления = ИстДок;
						
					ИначеЕсли ИстДок.Вид() = "ВводВЭксплуатациюОС" Тогда
						ДокументВводаВЭксплуатацию = ИстДок;
						
					ИначеЕсли (ИстДок.Вид() = "ПередачаОС") или (ИстДок.Вид() = "СписаниеОС") Тогда
						ДокументВыбытия = ИстДок;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			Если ТипЗначенияСтр(ДокументПоступления) = "Документ" Тогда
				ДокументаПоступленияДата = ДокументПоступления.ДатаДок;
				ДокументаПоступленияНомер = ДокументПоступления.НомерДок;
			Иначе
				ДокументаПоступленияДата = ТекущийЭлемент().ДатаПриобретения;
				ДокументаПоступленияНомер = "";
			КонецЕсли;
			Если ТипЗначенияСтр(ДокументВводаВЭксплуатацию) = "Документ" Тогда
				ДокументВводаВЭксплуатациюДата = ДокументВводаВЭксплуатацию.ДатаДок;
				ДокументВводаВЭксплуатациюНомер = ДокументВводаВЭксплуатацию.НомерДок;
			Иначе
				Если ПустоеЗначение(ДатаВводаВЭксплуатацию) = 0 Тогда
					ДокументВводаВЭксплуатациюДата = ДатаВводаВЭксплуатацию;
				Иначе
					ДокументВводаВЭксплуатациюДата = "";
				КонецЕсли;
				ДокументВводаВЭксплуатациюНомер = "";
			КонецЕсли;
			Если ТипЗначенияСтр(ДокументВыбытия) = "Документ" Тогда
				ДокументВыбытияДата = ДокументВыбытия.ДатаДок;
				ДокументВыбытияНомер = ДокументВыбытия.НомерДок;
			Иначе
				ДокументВыбытияДата = "";
				ДокументВыбытияНомер = "";
			КонецЕсли;
			
			Ит = СоздатьОбъект("БухгалтерскиеИтоги"); 
			Ит.Рассчитать(, РабочаяДата(), "01.1, 03.1, 03.2, 03.3, 03.4, 02.1, 02.2, 001, 010, 011",,,);
			СписокСчетов = СоздатьОбъект("СписокЗначений");
			СписокСчетов.ДобавитьЗначение("01.1");
			СписокСчетов.ДобавитьЗначение("03.1");
			СписокСчетов.ДобавитьЗначение("03.2");
			СписокСчетов.ДобавитьЗначение("03.3");
			СписокСчетов.ДобавитьЗначение("03.4");
			СписокСчетов.ДобавитьЗначение("001");
			СписокСчетов.ДобавитьЗначение("011");
			БалансоваяСтоимость = 0;
			Индекс = 1;
			Пока (Индекс <= СписокСчетов.РазмерСписка()) и (БалансоваяСтоимость = 0) Цикл
				СубСчет = СписокСчетов.ПолучитьЗначение(Индекс);
				БалансоваяСтоимость = Ит.СКД(СубСчет, "С",, ТекущийЭлемент());
				Индекс = Индекс + 1;
			КонецЦикла; 
			Если БалансоваяСтоимость = 0 Тогда
				СубСчет = "";
			КонецЕсли;
			
			Если (СубСчет = "01.1") или (Лев(СубСчет, 2) = "03") Тогда
				Если ТекущийЭлемент().Группа = Перечисление.ГруппыОС.ЗемельныеУчастки Тогда
					НачисленнаяАмортизация = "";
					//ИначеЕсли ТекущийЭлемент().Группа = Перечисление.ГруппыОС.ЖилищныйФонд Тогда
					//	НачисленнаяАмортизация = Ит.СКД("010", "С",, ТекущийЭлемент());
				ИначеЕсли ТекущийЭлемент().Группа = Перечисление.ГруппыОС.ОбъектыПриродопользования Тогда
					НачисленнаяАмортизация = "";
				Иначе
					НачисленнаяАмортизация = Ит.СКК("02.1", "С",, ТекущийЭлемент());
				КонецЕсли;
			Иначе
				НачисленнаяАмортизация = "";
			КонецЕсли;
			
			
			КодНормы = "";
			НормаАмортизации = "";
			Если (ТекущийЭлемент().ПодлежитАмортизации = 0)
			или (ТекущийЭлемент().СпособНачисленияАмортизации = Перечисление.СпособыНачисленияАмортизацииОС.ПоЕдинымНормам) Тогда
				НормаАмортизации = ТекущийЭлемент().КоэффициентАмортизации.Получить(РабочаяДата());
				Если ТекущийЭлемент().ШифрПоЕНАОФ.Выбран() = 1 Тогда
					КодНормы = ТекущийЭлемент().ШифрПоЕНАОФ.Код;
				Иначе
					КодНормы = "";
				КонецЕсли;
			КонецЕсли;
			
			Если ТекущийЭлемент().СчетЗатрат.Получить(РабочаяДата()).Выбран() = 1 Тогда
				КодСчетаЗатрат = ТекущийЭлемент().СчетЗатрат.Получить(РабочаяДата()).Код;
			Иначе
				КодСчетаЗатрат = "";
			КонецЕсли;
			
			Таб.Вывести();
			Таб.Опции(0,0,0,0,"ОпцииПечатиОС6","ОкноОС6");
			Таб.ТолькоПросмотр(1);
			Таб.ПараметрыСтраницы(2,,,,,,,,,,,);
			Таб.Показать("Инвентарная карточка"); 
		Иначе
			
			Таб = СоздатьОбъект("Таблица");
			Таб.ИсходнаяТаблица("ОС-6");
			Таб.ВывестиСекцию("ОборотШапка");
			ДатаВвода = ТекущийЭлемент().ДатаВводаВЭксплуатацию;
			ТекДата = ИспользоватьДату();
			// Определяем первоначальную стоимость на дату принятия объекта к учету.
			ОКОФ = СтрЗаменить(ТекущийЭлемент().КодПоОКОФ,"_"," ");
			НачСтоимость = 0;
			ПериодическийРеквизит = СоздатьОбъект("Периодический"); 
			ПериодическийРеквизит.ИспользоватьОбъект("ПервоначальнаяСтоимость", ТекущийЭлемент());
			НачСтоимость = ПериодическийРеквизит.ЗначениеНаДату(ДатаВвода);
			ПериодическийРеквизит.ВыбратьЗначения(ДатаВвода,);
			Пока (НачСтоимость = 0) и (ПериодическийРеквизит.ПолучитьЗначение() = 1) Цикл
				НачСтоимость = ПериодическийРеквизит.Значение;
			КонецЦикла;
			НачСтоимостьДоМодернизации = НачСтоимость;
			Модернизация = СоздатьОбъект("Периодический");
			Модернизация.ИспользоватьОбъект("ОбъектМодернизирован", ТекущийЭлемент());
			Модернизация.ВыбратьЗначения(ДатаВвода, ТекДата);
			Пока Модернизация.ПолучитьЗначение() = 1 Цикл				
				ДокМодернизации = "";
				ДокМодернизацииНомер = "";
				ДокМодернизацииДата = "";
				ЗатратыНаМодернизацию = "";
				НачСтоимостьДоМодернизации = "";		
				ИстДок = Модернизация.ТекущийДокумент();
				Если ИстДок.Выбран() = 1 Тогда
					Если ИстДок.Вид() = "МодернизацияОС" Тогда
						ДокМодернизации = "Акт ОС-3";
						ДокМодернизацииНомер = ИстДок.НомерДок;
						ДокМодернизацииДата = ИстДок.ДатаДок;                   
						Если ИстДок.КоличествоСтрок() > 0 Тогда
						    ЗатратыНаМодернизацию = Окр(ИстДок.СуммаРасходов/ИстДок.КоличествоСтрок(), 2);
						Иначе
							ЗатратыНаМодернизацию = 0;
						КонецЕсли;
					ИначеЕсли Модернизация.Значение = 0 Тогда
						Продолжить;
					Иначе
						ДокМодернизации = "";
						ДокМодернизацииНомер = "";
						ДокМодернизацииДата = Модернизация.ДатаЗнач;
						ЗатратыНаМодернизацию = НачСтоимостьДоМодернизации -  ТекущийЭлемент().ПервоначальнаяСтоимость.Получить(Модернизация.ДатаЗнач);
						НачСтоимостьДоМодернизации = НачСтоимостьДоМодернизации + ЗатратыНаМодернизацию;
					КонецЕсли;
				КонецЕсли;
				Если (ПустоеЗначение(ЗатратыНаМодернизацию) = 1) И (ПустоеЗначение(НачСтоимостьДоМодернизации) = 1) Тогда
					Продолжить;				    
				КонецЕсли;
				ЗатратыНаМодернизацию = Формат(ЗатратыНаМодернизацию,"Ч015.2");
				Таб.ВывестиСекцию("ОборотСтрока");
			КонецЦикла;
			Таб.ВывестиСекцию("ОборотПодвал");
			Таб.Опции(0,0,0,0,"ОпцииПечатиОС_6_об","ОкноОС_6_об");
			Таб.ТолькоПросмотр(1);
			Таб.ПараметрыСтраницы(2);
			
			Таб.Показать("ОС-6 (оборотная сторона)");
			
			Таб = СоздатьОбъект("Таблица");
			Таб.ИсходнаяТаблица("ОС-6");
			
			Организация = СокрЛП(Константа.НазваниеОрганизации);
			Подразделение = ТекущийЭлемент().Подразделение.Получить(ТекДата);
			НаимОС = ТекущийЭлемент().Наименование;
			
			НомерГруппы = Формат(ТекущийЭлемент().АмортизационнаяГруппа.ПорядковыйНомер(),"Ч05");
			ИнвНомер = ТекущийЭлемент().Код;
			
			ДатаСписания = ТекущийЭлемент().ДатаВыбытия; 
			
			СведенияОбОС = глРасчетАмортизацииОС(ТекущийЭлемент(), ТекДата, 0);
			НачАмортизация = СведенияОбОС.Получить("НачисленнаяАмортизацияКон");
			БалансоваяСтоимость = СведенияОбОС.Получить("БалансоваяСтоимостьКон");
					
			ОстСтоимость = БалансоваяСтоимость - НачАмортизация;
			
			// Определяем срок полезного использования на дату принятия объекта к учету.
			СрокПолезнИсп = 0;
			ПериодическийРеквизит = СоздатьОбъект("Периодический"); 
			ПериодическийРеквизит.ИспользоватьОбъект("СрокПолезногоИспользования", ТекущийЭлемент());
			СрокПолезнИсп = ПериодическийРеквизит.ЗначениеНаДату(ДатаВвода);
			ПериодическийРеквизит.ВыбратьЗначения(ДатаВвода,);
			Пока (СрокПолезнИсп = 0) и (ПериодическийРеквизит.ПолучитьЗначение() = 1) Цикл
				СрокПолезнИсп = ПериодическийРеквизит.Значение;
			КонецЦикла;
						
			НачСтоимость = Формат(НачСтоимость,"Ч015.2");

			СрокПолезнИсп = Строка(СрокПолезнИсп)+" мес.";
			Таб.ВывестиСекцию("Шапка1|Лист1");
			НачДата = ТекДата;
			Если ПустоеЗначение(ДатаВвода)=0 Тогда
			    Если ДатаВвода < ТекДата Тогда
			        НачДата = ДатаВвода;
			    КонецЕсли;
			КонецЕсли;
			
			ЗапросПоДвижениям = СоздатьОбъект("Запрос");
			ТекстЗапроса = 
			"//{{ЗАПРОС(ЗапросПоДвижениям)
			|Период с НачДата по ТекДата;
			|Обрабатывать НеПомеченныеНаУдаление;
			|Док = Документ.ВводВЭксплуатациюОС.ТекущийДокумент, Документ.ПеремещениеОС.ТекущийДокумент, Документ.ПередачаОС.ТекущийДокумент, Документ.СписаниеОС.ТекущийДокумент;
			|ОС = Документ.ВводВЭксплуатациюОС.ОсновноеСредство, Документ.ПередачаОС.ОсновноеСредство, Документ.ПеремещениеОС.ОсновноеСредство, Документ.СписаниеОС.ОсновноеСредство;
			|Группировка Док упорядочить по Док.ДатаДок;
			|Условие(ОС = ТекущийЭлемент());
			|"//}}ЗАПРОС
			;
			Если ЗапросПоДвижениям.Выполнить(ТекстЗапроса) = 0 Тогда
				Возврат;
			КонецЕсли;
			
			ИтАм = СоздатьОбъект("БухгалтерскиеИтоги");
			ИтОС = СоздатьОбъект("БухгалтерскиеИтоги");
			
			Пока ЗапросПоДвижениям.Группировка(1) = 1 Цикл
				ДатаНомерДокДвиж = ЗапросПоДвижениям.Док.НомерДок+" от "+ ЗапросПоДвижениям.Док.ДатаДок;
				ДокДвиж = ЗапросПоДвижениям.Док.ПредставлениеВида();
				ПодрПриемникДвиж = ТекущийЭлемент().Подразделение.Получить(ЗапросПоДвижениям.Док.ДатаДок);
				МОЛДвиж = ФИО(ТекущийЭлемент().МОЛ.Получить(ЗапросПоДвижениям.Док.ДатаДок));
				
				СведенияОбОС = глРасчетАмортизацииОС(ТекущийЭлемент(), ЗапросПоДвижениям.Док.ДатаДок, 0);								
				
				Если ЗапросПоДвижениям.Док.Вид() = "ПередачаОС" Тогда
					ДокЗапроса = ?(ЗапросПоДвижениям.Док.ДокументПодготовкаКПередаче.Выбран() = 1, ЗапросПоДвижениям.Док.ДокументПодготовкаКПередаче, ЗапросПоДвижениям.Док);
					ИтОС.ИспользоватьСубконто(ВидыСубконто.ОсновныеСредства, ТекущийЭлемент());
					ИтОС.ВыполнитьЗапрос(ДокЗапроса,,"01.1, 03.1, 03.2, 03.3, 03.4, 02.1, 02.2, 001, 010, 011",,,3);
					ИтАм.ИспользоватьСубконто(ВидыСубконто.ОсновныеСредства,ТекущийЭлемент());
					ИтАм.ВыполнитьЗапрос(ДокЗапроса,ДокЗапроса,"02.1, 02.2, 010",,,3);
					
					НачСтоимостьДвиж = ИтОС.СНД("С");
					НачАмортизацияДвиж = ИтОС.СНК("С") + ИТАм.КО("С");				
				Иначе
					
					НачСтоимостьДвиж = СведенияОбОС.Получить("БалансоваяСтоимостьКон");
					НачАмортизацияДвиж = СведенияОбОС.Получить("НачисленнаяАмортизацияКон");
					
				КонецЕсли;				
				
				ОстСтоимостьДвиж = НачСтоимостьДвиж - НачАмортизацияДвиж; 					
				ОстСтоимостьДвиж = Формат(ОстСтоимостьДвиж,"Ч015.2");
				Таб.ВывестиСекцию("Строка1|Лист1");
			КонецЦикла;
			Таб.ВывестиСекцию("Подвал1|Лист1");
			Таб.Опции(0,0,0,0,"ОпцииПечатиОС_6","ОкноОС_6");
			Таб.ПараметрыСтраницы(1);
			Таб.ТолькоПросмотр(1);
			Таб.Показать("ОС-6");
						
		КонецЕсли;	
	КонецЕсли;
КонецПроцедуры //Печать

//******************************************************************************
// ИнвентранаяКнига()
//
// Параметры:
//  Нет.
//
// Вызывается из формул элементов диалога:
//  Нет.
//
// Описание:
//  Здесь описывается процедура.
//
Процедура ИнвентарнаяКнига()
	
	ОткрытьФорму("Отчет.ИнвентарнаяКнигаОС");
	
КонецПроцедуры // ИнвентранаяКнига()

//******************************************************************************
// ПоКнопкеПечать()
// 
// Параметры: 
//	Нет
//
// Описание:
// 	Вызывается по кнопке "Печать"  
// 	
Процедура ПоКнопкеПечать(СразуНаПринтер = 0,КолЭкз = 1)
	
	Если  ПустоеЗначение(НомерТекущейФормы) = 1  Тогда
		НомерТекущейФормы = 1;
		Форма.кнПечать.Заголовок(ТаблицаПечФорм.ПолучитьЗначение(НомерТекущейФормы, "Кнопка"));
	КонецЕсли;
	
	Если НомерТекущейФормы = 1  Тогда //Инвентарная карточка ОС-6
		Печать();
	
	ИначеЕсли НомерТекущейФормы = 2  Тогда //Инвентарная книга ОС-6б
		ИнвентарнаяКнига()
		
	ИначеЕсли НомерТекущейФормы = 3  Тогда //Отчет по группам ОС
		ПостроитьОтчет()
		
	ИначеЕсли НомерТекущейФормы = 4  Тогда //Анализ субконто ""Основные средства""
		Отчет();
		
	Иначе
		Параметры = СоздатьОбъект("СписокЗначений");
		Параметры.ДобавитьЗначение(Контекст, "Контекст");
		Параметры.ДобавитьЗначение(СразуНаПринтер, "Устройство");
		Параметры.ДобавитьЗначение(КолЭкз, "КоличествоКопий");
		
		ОткрытьФорму("Отчет", Параметры, глКаталогПечФорм+ТаблицаПечФорм.ПолучитьЗначение(НомерТекущейФормы,"Файл"));
	КонецЕсли;
	
КонецПроцедуры // ПоКнопкеПечать()

//******************************************************************************
// ПоКнопкеВыборПечатнойФормы()
//
// Параметры:
//  нет.    
//
// Возвращаемое значение:
//  нет.
//
// Описание:
//  - открывает список для выбора способа печати. 
//  - формирует таблицу по выбранному способу.
//
Процедура ПоКнопкеВыборПечатнойФормы()
	
    ВыбНомер = глВыборПечатнойФормы("Справочник." + Вид(), ТаблицаПечФорм);
	Если ВыбНомер > 0 Тогда
		НомерТекущейФормы = ВыбНомер;
		Форма.кнПечать.Заголовок(ТаблицаПечФорм.ПолучитьЗначение(НомерТекущейФормы, "Кнопка"));
		ПоКнопкеПечать();
	КонецЕсли;

КонецПроцедуры // ПоКнопкеВыборПечатнойФормы()

//******************************************************************************
// ПоКнопкеВыбораДаты()
//
// Параметры:
//
// Возвращаемое значение:
//  Нет.
//
// Вызывается из формул элементов диалога:
//  Кнопка выбора даты.
//
// Описание:
//  Выбирается дата просмотра значений периодических реквизитов.
//
Процедура ПоКнопкеВыбораДаты()
	
	ТекИспользоватьДату = ИспользоватьДату();
	глВвестиДатуПериодическихРеквизитов(Контекст, 0);
	Если ИспользоватьДату() > КонецРассчитанногоПериодаБИ() Тогда
		Предупреждение("За выбранный период итоги не рассчитаны!"+РазделительСтрок+
		               "Расчет итогов выполняется в режиме"+РазделительСтрок+
					   """Операции - Управление бухгалтерскими итогами"".");
		ИспользоватьДату(ТекИспользоватьДату);
		
	Иначе
		ТекИспользоватьДату = ИспользоватьДату();
	КонецЕсли;
	
КонецПроцедуры // ПоКнопкеВыбораДаты()

//******************************************************************************
// ПоКнопкеИстория()
//
// Параметры:
//
// Возвращаемое значение:
//  Нет.
//
// Вызывается из формул элементов диалога:
//  Кнопка "История".
//
// Описание:
//  Вызывается обработка "ЗначенияПериодическихРеквизитов" для просмотра истории 
// значений периодических реквизитов.
//
Процедура ПоКнопкеИстория()
	
    Перем ВидимыеРеквизиты;
	
	Стр = "Подразделение,МОЛ,Состояние,ОбъектМодернизирован,НачислятьАмортизацию," +
		  "НаходитсяВЗалоге,ПервоначальнаяСтоимость, СрокПолезногоИспользования," +
		  "ОбщийОбъемПродукцииРабот,ФактическийОбъемПродукцииРаботЗаМесяц,"+
		  "СчетЗатрат,Субконто1,Субконто2,Субконто3,КоэффициентАмортизации, ОстаточнаяСтоимостьПослеМодернизации"+
		  "СпециальныйКоэффициент,ПервоначальнаяСтоимостьН, СрокПолезногоИспользованияН,"+
		  "БазоваяСтоимость, ВидРасхода, ЭлементРасхода,Объект, СтавкаНалогаНаИмущество";
	
	Меню = СоздатьОбъект("СписокЗначений");
	Меню.Установить("Все реквизиты", Стр);
	Меню.Установить("Состояние ОС",  "Состояние");
	Меню.Установить("Счет затрат",   "СчетЗатрат, Субконто1, Субконто2, Субконто3");
	Меню.Установить("Вид расхода",   "ВидРасхода, ЭлементРасхода, Объект");
	Меню.Установить("Модернизация",  "ОбъектМодернизирован, ПервоначальнаяСтоимость,
								     |ОстаточнаяСтоимостьПослеМодернизации, СрокПолезногоИспользования,
									 |ОбщийОбъемПродукцииРабот, ПервоначальнаяСтоимостьН,
									 |СрокПолезногоИспользованияН");
	
	Если Меню.ВыбратьЗначение(ВидимыеРеквизиты, "", 0, 60, 1) <> 1 Тогда
	    Возврат;
	КонецЕсли;

	глЗначенияПериодическихРеквизитов(Контекст, , , ВидимыеРеквизиты);
	
КонецПроцедуры // ПоКнопкеИстория()

//******************************************************************************
// УправлениеДиалогом()
//
// Параметры:
//  Нет
//
// Описание:
//  Управляет доступностью колонок
//
Процедура УправлениеДиалогом()
	
	Для Сч = 1 По СписокНедоступныхКолонок.РазмерСписка() Цикл
		Форма.ПолучитьАтрибут(СписокНедоступныхКолонок.ПолучитьЗначение(Сч)).Доступность(0);
	КонецЦикла;
	
КонецПроцедуры // УправлениеДиалогом()

////////////////////////////////////////////////////////////////////////////////
// ПРЕДОПРЕДЕЛЕННЫЕ ПРОЦЕДУРЫ
//
//_____________________________________________________________________________
Процедура ПриОткрытии() //предопределенная
	РедактироватьВДиалоге(1,1);

	Сч01_1 = СчетПоКоду("01.1");
	Сч02_1 = СчетПоКоду("02.1");
	Сч02_2 = СчетПоКоду("02.2");
	Сч03_1 = СчетПоКоду("03.1");
	Сч03_2 = СчетПоКоду("03.2");
	Сч03_3 = СчетПоКоду("03.3");
	Сч03_4 = СчетПоКоду("03.4");
	Сч08_4 = СчетПоКоду("08.4");
	Сч010 = СчетПоКоду("010");
	
	ТекИспользоватьДату = ИспользоватьДату();
	
	РедактироватьВДиалоге(1,1);
	// Заполним таблицу для выбора печатной формы
	НомерТекущейФормы = глУстановкаКнопкиПечать(Контекст, "Справочник." + Вид(),ТаблицаПечФорм);
	
	// Управление видимостью колонок	
	глУстановитьВидимостьКолонок(Контекст, ИдентификаторФормы, ПолныйСписокКолонок, 1);
	
	СохранениеПериодическихРеквизитов(0);

КонецПроцедуры //ПриОткрытии

//******************************************************************************
// Предопределенная процедура
//
Процедура ПриРедактированииНовойСтроки()
	
	УправлениеДиалогом();
	
	ИспользоватьДату('01.01.1980');
	НачислятьАмортизацию = 0;
	
	Копирование = ?(ПустоеЗначение(Наименование) = 1, 0, 1);
	Если Копирование = 1 Тогда
	    ОбъектМодернизирован = 0;
		ОстаточнаяСтоимостьПослеМодернизации = 0;
		Возврат;
	КонецЕсли;

	Собственное = 1;
	Группа = Перечисление.ГруппыОС.МашиныИОборудование;
	ПодлежитАмортизации = 1;
	СпособНачисленияАмортизации = Перечисление.СпособыНачисленияАмортизацииОС.Линейный;
	ПриниматьКНалоговомуУчету = 1;
	
КонецПроцедуры // ПриРедактированииНовойСтроки()

//******************************************************************************
// Предопределенная процедура
//
Процедура ПриНачалеРедактированияСтроки()
	
	УправлениеДиалогом();
	
КонецПроцедуры // ПриНачалеРедактированияСтроки()

////////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ
//
ИдентификаторФормы	=	"Справочник_ОсновныеСредства_ФормаСписка_Основная";

ТаблицаПечФорм		= СоздатьОбъект("ТаблицаЗначений");
ТаблицаПечФорм.НоваяКолонка("Название","Строка",,,,30);
ТаблицаПечФорм.НоваяКолонка("Файл","Строка",,,"Файл",10);
ТаблицаПечФорм.НоваяКолонка("Кнопка","Строка",,,,10); 
ТаблицаПечФорм.НоваяКолонка("ФайлОписания","Строка");
	
// добавим информацию о встроенной форме
ТаблицаПечФорм.НоваяСтрока();
ТаблицаПечФорм.Название     = "Инвентарная карточка ОС-6";
ТаблицаПечФорм.Кнопка       = "ОС-6";

ТаблицаПечФорм.НоваяСтрока();
ТаблицаПечФорм.Название     = "Инвентарная книга ОС-6б";
ТаблицаПечФорм.Кнопка       = "ОС-6б";
                                     
ТаблицаПечФорм.НоваяСтрока();
ТаблицаПечФорм.Название     = "Отчет по основным средствам";
ТаблицаПечФорм.Кнопка       = "Отчет";

ТаблицаПечФорм.НоваяСтрока();
ТаблицаПечФорм.Название     = "Анализ субконто ""Основные средства""";
ТаблицаПечФорм.Кнопка       = "Анализ";

// Список колонок видимостью которых будем управлять
ПолныйСписокКолонок = СоздатьОбъект("СписокЗначений");
ПолныйСписокКолонок.ДобавитьЗначение("Код", "Код");
ПолныйСписокКолонок.ДобавитьЗначение("Наименование", "Наименование");
ПолныйСписокКолонок.ДобавитьЗначение("Группа", "Группа");
ПолныйСписокКолонок.ДобавитьЗначение("Подразделение", "Место эксплуатации (редактируется в форме элемента)");
ПолныйСписокКолонок.ДобавитьЗначение("СобственноеТекст", "Тип основного средства (редактируется в форме элемента)"); // выводится формулой
ПолныйСписокКолонок.ДобавитьЗначение("ДатаПриобретения", "Дата приобретения");
ПолныйСписокКолонок.ДобавитьЗначение("СпособПоступления", "Способ поступления");
ПолныйСписокКолонок.ДобавитьЗначение("МОЛ", "Ответственное лицо (редактируется в форме элемента)");
ПолныйСписокКолонок.ДобавитьЗначение("Состояние", "Состояние (редактируется в форме элемента)");
ПолныйСписокКолонок.ДобавитьЗначение("ОбъектМодернизированТекст", "Объект модернизирован (редактируется в форме элемента)");
ПолныйСписокКолонок.ДобавитьЗначение("ПервоначальнаяСтоимость", "Первоначальная стоимость");
ПолныйСписокКолонок.ДобавитьЗначение("ДатаВводаВЭксплуатацию", "Дата ввода в эксплуатацию (редактируется в форме элемента)");
ПолныйСписокКолонок.ДобавитьЗначение("ПодлежитАмортизацииТекст", "Подлежит амортизации (редактируется в форме элемента)"); // выводится формулой
ПолныйСписокКолонок.ДобавитьЗначение("НачислятьАмортизациюТекст", "Начислять амортизацию (износ) (редактируется в форме элемента)");  // выводится формулой
ПолныйСписокКолонок.ДобавитьЗначение("СпособНачисленияАмортизации", "Способ начисления амортизации");
ПолныйСписокКолонок.ДобавитьЗначение("СрокПолезногоИспользования", "Срок полезного использования");
ПолныйСписокКолонок.ДобавитьЗначение("СчетЗатрат", "Счет затрат (редактируется в форме элемента)");
ПолныйСписокКолонок.ДобавитьЗначение("Субконто1", "Субконто 1 (редактируется в форме элемента)");
ПолныйСписокКолонок.ДобавитьЗначение("Субконто2", "Субконто 2 (редактируется в форме элемента)");
ПолныйСписокКолонок.ДобавитьЗначение("Субконто3", "Субконто 3 (редактируется в форме элемента)");
ПолныйСписокКолонок.ДобавитьЗначение("АмортизацияНачисленнаяДо2002", "Сумма амортизации, начисленной до 01.01.2002 г.");
ПолныйСписокКолонок.ДобавитьЗначение("ПервоначальнаяСтоимостьН", "Первоначальная стоимость НУ");
ПолныйСписокКолонок.ДобавитьЗначение("СрокПолезногоИспользованияН", "Срок полезного использования НУ (редактируется в форме элемента)");
ПолныйСписокКолонок.ДобавитьЗначение("АмортизационнаяГруппа", "Амортизационная группа НУ");
ПолныйСписокКолонок.ДобавитьЗначение("МетодНачисленияАмортизации", "Метод начисления амортизации в налоговом учете");
ПолныйСписокКолонок.ДобавитьЗначение("ВидРасхода", "Вид расхода (редактируется в форме элемента)");
ПолныйСписокКолонок.ДобавитьЗначение("ЭлементРасхода", "Элемент расхода (редактируется в форме элемента)");
ПолныйСписокКолонок.ДобавитьЗначение("Объект", "Объект (редактируется в форме элемента)");
ПолныйСписокКолонок.ДобавитьЗначение("ДатаВыбытия", "Дата выбытия");
ПолныйСписокКолонок.ДобавитьЗначение("ПричинаВыбытия", "Причина выбытия");
ПолныйСписокКолонок.ДобавитьЗначение("СтавкаНалогаНаИмущество", "Ставка налога на имущество (редактируется в форме элемента)");

//	При первом запуске, пока пользователь не настроил видимость колонок,
//  будут видимы только колонки "Код","Наименование"
ПолныйСписокКолонок.Пометка(1,	1);
ПолныйСписокКолонок.Пометка(2, 	1);

// Список недоступных для редактирования колонок
СписокНедоступныхКолонок = СоздатьОбъект("СписокЗначений");
СписокНедоступныхКолонок.ДобавитьЗначение("Подразделение");
СписокНедоступныхКолонок.ДобавитьЗначение("МОЛ");
СписокНедоступныхКолонок.ДобавитьЗначение("Состояние");
СписокНедоступныхКолонок.ДобавитьЗначение("ДатаВводаВЭксплуатацию");
СписокНедоступныхКолонок.ДобавитьЗначение("ПервоначальнаяСтоимость");
СписокНедоступныхКолонок.ДобавитьЗначение("СрокПолезногоИспользования");
СписокНедоступныхКолонок.ДобавитьЗначение("СчетЗатрат");
СписокНедоступныхКолонок.ДобавитьЗначение("Субконто1");
СписокНедоступныхКолонок.ДобавитьЗначение("Субконто2");
СписокНедоступныхКолонок.ДобавитьЗначение("Субконто3");
СписокНедоступныхКолонок.ДобавитьЗначение("ПервоначальнаяСтоимостьН");
СписокНедоступныхКолонок.ДобавитьЗначение("СрокПолезногоИспользованияН");
СписокНедоступныхКолонок.ДобавитьЗначение("ВидРасхода");
СписокНедоступныхКолонок.ДобавитьЗначение("ЭлементРасхода");
СписокНедоступныхКолонок.ДобавитьЗначение("Объект");
СписокНедоступныхКолонок.ДобавитьЗначение("СтавкаНалогаНаИмущество");