////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ
//

Перем ПодписьСтатьиОтчисленийНаСоцНужды;
Перем ПодписьСтатьиПрочихОтчисленийНаСоцНужды;
Перем Сч70;
Перем СписокХарактеровРаботы;
Перем ТекущееУведомление;

Перем ВычетыСотрудниковПоНДФЛ;
Перем ВычетыНДФЛСсылки;

////////////////////////////////////////////////////////////////////////////////
// ФУНКЦИИ И ПРОЦЕДУРЫ, ВЫЗЫВАЕМЫЕ ИЗ ФОРМУЛ ЭЛЕМЕНТОВ ДИАЛОГА
//

//******************************************************************************
Процедура ПриИзмененииФлагаВзносов()
	
	НеВзиматьВзносыФОМС = НеВзиматьВзносыПФРиФСС;
	
КонецПроцедуры

//******************************************************************************
// ТекущееЗначениеУведомления()
//
Функция ТекущееЗначениеУведомления()
	
	НайденноеЗначение = ПолучитьПустоеЗначение();
	
	Если Выбран() = 1 Тогда
		ТекГод = ДатаГод(ИспользоватьДату());
		ИмущВычеты = СоздатьОбъект("Справочник.ИмущественныеВычеты");
		ИмущВычеты.ИспользоватьВладельца(ТекущийЭлемент());
		ИмущВычеты.ВыбратьЭлементы();
		Пока ИмущВычеты.ПолучитьЭлемент() = 1 Цикл
		    Если ИмущВычеты.Код <= Строка(ТекГод) Тогда
		        НайденноеЗначение = ИмущВычеты.ТекущийЭлемент();
		    КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат НайденноеЗначение;
	
КонецФункции // ТекущееЗначениеУведомления()

//******************************************************************************
// ОткрытьСписокУведомлений()
//
Процедура ОткрытьСписокУведомлений()
	
	Если Выбран() = 0 Тогда
		Если Вопрос("Имущественные вычеты можно ввести только 
		            |после записи элемента справочника ""Сотрудники"".
		            |Записать элемент?", "Да+Нет") = "Да" Тогда
			Записать();
		КонецЕсли;
	КонецЕсли;
	
	Если Выбран() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	КонтекстФормы = ТекущееУведомление;
	ОткрытьФормуМодально("Справочник.ИмущественныеВычеты", КонтекстФормы);
	ТекущееУведомление = ТекущееЗначениеУведомления();
	
КонецПроцедуры // ОткрытьСписокУведомлений()  

//******************************************************************************
// ПодготовитьТаблицуВычетов()
//
Процедура ПодготовитьТаблицуВычетов()
	
	ВычетыНДФЛ.УдалитьСтроки();
	ВычетыНДФЛСсылки.УдалитьСтроки();
	
	ВычетыСотрудниковПоНДФЛ.ИспользоватьВладельца(ТекущийЭлемент());	
	ВычетыСотрудниковПоНДФЛ.ВыбратьЭлементы();
	Пока ВычетыСотрудниковПоНДФЛ.ПолучитьЭлемент() = 1 Цикл
		Если ВычетыСотрудниковПоНДФЛ.ПометкаУдаления() = 1  Тогда
			Продолжить;
		КонецЕсли;
		ВычетыНДФЛ.НоваяСтрока();		
		ВычетыНДФЛ.Наименование = ВычетыСотрудниковПоНДФЛ.ВидВычета.Код +" ("+ВычетыСотрудниковПоНДФЛ.ВидВычета.Наименование+")";
		ВычетыНДФЛ.ДатаНачала = ВычетыСотрудниковПоНДФЛ.ДатаНачала;
		ВычетыНДФЛ.ДатаОкончания = ВычетыСотрудниковПоНДФЛ.ДатаОкончания;
		
		ВычетыНДФЛСсылки.НоваяСтрока();
		ВычетыНДФЛСсылки.ВидВычета = ВычетыСотрудниковПоНДФЛ.ТекущийЭлемент();
	КонецЦикла;
	
	Если ВычетыНДФЛ.КоличествоСтрок() = 0 Тогда
		ВычетыНДФЛ.НоваяСтрока();
		ВычетыНДФЛСсылки.НоваяСтрока();
	КонецЕсли;
	
КонецПроцедуры 

//******************************************************************************
// ДобавитьВычет()
//
Процедура ДобавитьВычет() 
	
	Если Выбран() = 0 Тогда
		Если Вопрос("Добавить сведения о вычетах можно
		|только после записи сотрудника.
		|Записать сотрудника?", "Да+Нет") = "Да" Тогда
			Записать();
		КонецЕсли;
	КонецЕсли;
	
	Если Выбран() = 1 Тогда
		ОткрытьФормуМодально("Элемент.ВычетыСотрудниковПоНДФЛ",,,, ТекущийЭлемент());
		ПодготовитьТаблицуВычетов();
		ВычетыНДФЛ.ТекущаяСтрока(1);
	КонецЕсли;
	
КонецПроцедуры

//******************************************************************************
// РедактироватьВычет()
//
Процедура РедактироватьВычет()
	
	Если Форма.ТолькоПросмотр() = 1 Тогда
		Возврат;
	КонецЕсли;
	Если ПустоеЗначение(ВычетыНДФЛ.Наименование) = 1 Тогда
		ДобавитьВычет();
	Иначе
		ВычетНДФЛ = ВычетыНДФЛСсылки.ПолучитьЗначение(ВычетыНДФЛ.НомерСтроки, "ВидВычета");
		ОткрытьФормуМодально(ВычетНДФЛ);
		ПодготовитьТаблицуВычетов();
		Стр = 0;
		ВычетыНДФЛСсылки.НайтиЗначение(ВычетНДФЛ,Стр,"ВидВычета");
		ВычетыНДФЛ.ТекущаяСтрока(Стр);
	КонецЕсли;
	
КонецПроцедуры

//******************************************************************************
// УдалитьВычет()
//
Процедура УдалитьВычет()
	
	ВычетНДФЛ = ВычетыНДФЛСсылки.ПолучитьЗначение(ВычетыНДФЛ.НомерСтроки, "ВидВычета");
	
	Если ВычетыСотрудниковПоНДФЛ.НайтиЭлемент(ВычетНДФЛ) = 1 Тогда
		ВычетыСотрудниковПоНДФЛ.Удалить(0);
		ПодготовитьТаблицуВычетов();
		ВычетыНДФЛ.ТекущаяСтрока(1);	
	КонецЕсли;
	
КонецПроцедуры


//******************************************************************************
// СведенияОВычетах()
//
Функция СведенияОВычетах()
	
	ПредоставленныеВычеты = "<<Вычеты не предоставляются>>";
	Если ПустоеЗначение(ТекущееУведомление) = 0 Тогда
	    ПредоставленныеВычеты = "Уведомление № "		+ СокрЛП(ТекущееУведомление.НомерУведомления) +
								" от "		+ ТекущееУведомление.ДатаУведомления +
								" на сумму "+ СокрЛ(ФорматС(ТекущееУведомление.Сумма311 + ТекущееУведомление.Сумма312)) + " руб.";
	КонецЕсли;
	
	Возврат ПредоставленныеВычеты;
	
КонецФункции // СведенияОВычетах()

//******************************************************************************
//	ПересчетВДниИзМесяцевИДней()
//
Функция ПересчетВДниИзМесяцевИДней()
	
	КоличествоДнейБолезни = МесяцБЛ * 30 + ДеньБЛ;
	МесяцБЛ = Цел(КоличествоДнейБолезни/30);
	ДеньБЛ = КоличествоДнейБолезни - МесяцБЛ*30;
	
	КоличествоДнейОтпуска = МесяцОтп * 30 + ДеньОтп;
	МесяцОтп = Цел(КоличествоДнейОтпуска/30);
	ДеньОтп = КоличествоДнейОтпуска - МесяцОтп*30;
	
КонецФункции	// ПересчетВДниИзМесяцевИДней()

//******************************************************************************
//	ПредставлениеМестаРождения()
//
//	Параметры:
//		нет
//
//	Возвращаемое значение:
//		Строка - представление места рождения
//
//	Описание:
//		Предназначена для вывода в удобочитаемом виде
//
Функция ПредставлениеМестаРождения()
	
	Представление = "";
	СЗ = глРазложить(МестоРождения);
	Для Номер = 2 по СЗ.РазмерСписка() Цикл
		Если ПустоеЗначение(СЗ.ПолучитьЗначение(Номер))=0 Тогда
			Представление = Представление+?(ПустоеЗначение(Представление)=1,"",", ")+СокрЛП(СЗ.ПолучитьЗначение(Номер))
		КонецЕсли;
	КонецЦикла;
	Возврат ?(ПустоеЗначение(Представление)=1,"<<Место рождения не задано>>",Представление)
	
КонецФункции	// ПредставлениеМестаРождения()

//******************************************************************************
// МожноВыбиратьСтатьюОтчислений()
//
Функция МожноВыбиратьСтатьюОтчислений()
	
	Если СчетЗатрат.Выбран() = 1 Тогда
		Для А = 1 По 3 Цикл
			Если (СчетЗатрат.ВидСубконто(А) = ВидыСубконто.СтатьиЗатратНаПроизводство) или
				 (СчетЗатрат.ВидСубконто(А) = ВидыСубконто.СтатьиЗатратОбслуживающихПроизводств) или
				 (СчетЗатрат.ВидСубконто(А) = ВидыСубконто.СтатьиОбщепроизводственныхЗатрат) или
				 (СчетЗатрат.ВидСубконто(А) = ВидыСубконто.СтатьиОбщехозяйственныхЗатрат) или
				 (СчетЗатрат.ВидСубконто(А) = ВидыСубконто.СтатьиИздержекОбращения) или
				 (СчетЗатрат.ВидСубконто(А) = ВидыСубконто.СтатьиКоммерческихРасходов) или
				 (СчетЗатрат.ВидСубконто(А) = ВидыСубконто.СтатьиРасходовНаПродажу) Тогда
				Возврат А;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат 0;
	
КонецФункции // МожноВыбиратьСтатьюОтчислений()

//******************************************************************************
// ИнформОНачДанных()
//
// Описание:
//  Формирует текст элемента диалога "Текст" в слое ДанныеСНачалаГода.
//
Функция ИнформОНачДанных()
	
    Перем Стр;
	Стр = "Начальные данные для расчета налогов";
	Если ДатаПриема = Дата(0)  Тогда
	    Стр = Стр+" (используются при расчете сумм налогов с ФОТ и удерживаемого НДФЛ, только если указана дата начала ведения учета налогов в программе)";
	Иначе
	    Стр = Стр+" за "+ДатаГод(ДатаПриема)+" год";
	КонецЕсли;
	Возврат Стр;
	
КонецФункции // ИнформОНачДанных()

//******************************************************************************
// ИнформОНачДопДанных()
//
// Описание:
//  Формирует текст элемента диалога "Текст" в слое ДанныеСНачалаГода.
//
Функция ИнформОНачДопДанных()
    Перем Стр;
	
	Стр = "    Валовой доход с начала года по месяц, предшествующий началу учета в типовой "+
	"конфигурации, включительно, составляют суммы заработной платы, "+
	"начисленные сотруднику на нашем предприятии и на предыдущих местах работы. 
	|    Для ввода сумм  НДФЛ, ЕСН и соответствующих им налоговых баз, исчисленных "+
	"за время работы сотрудника на нашем предприятии с начала года, следует "+
	"использовать карточки налогового учета ""Налоговая карточка"" и "+ 
	"""Индивидуальная карточка"". Открыть карточки сотрудника можно в списке сотрудников "+
	"по кнопке ""Налоги на доходы"".
	|    Ввод данных о начисленных налогах следует "+
	"использовать при начале ведения учета в типовой конфигурации не с начала "+
	"года. В этом случае следует указать дату начала ведения учета налогов.";
	
	Возврат Стр;
	
КонецФункции // ИнформОНачДопДанных()

//******************************************************************************
// ПоКнопкеВыбораДаты()
//
// Вызывается из формул элементов диалога:
//  Кнопка выбора даты.
//
// Описание:
//  Выбирается дата просмотра и редактирования значений периодических реквизитов 
// выбирается по кнопке, чтобы не менялся признак модифицированности формы.
//
Процедура ПоКнопкеВыбораДаты()
	
	глВвестиДатуПериодическихРеквизитов(Контекст, 1);
	ТекущееУведомление = ТекущееЗначениеУведомления();
	
	Если Форма.Закладки.ТекущаяСтрока() = 3 Тогда
		Если ДатаГод(ИспользоватьДату()) < 2010 Тогда
			Форма.ИспользоватьСлой("Основной, Дополнительно, НачислятьНалогиСФОТ",2);
		Иначе
			Форма.ИспользоватьСлой("Основной, Дополнительно, НачислятьВзносыСФОТ",2);
		КонецЕсли;
	КонецЕсли;
	
	Если Форма.Закладки.ТекущаяСтрока() = 2 Тогда
		НомерСубконто = МожноВыбиратьСтатьюОтчислений();
		Если НомерСубконто > 0 Тогда
			
			Если ДатаГод(ИспользоватьДату()) < 2010 Тогда
				ПодписьСтатьиОтчисленийНаСоцНужды = "Статья затрат по начисленному ЕСН";
				ПодписьСтатьиПрочихОтчисленийНаСоцНужды = "Статья затрат по прочим отчисл. с ФОТ";
				Форма.СтатьяПрочихОтчисленийНаСоцНужды.Видимость(1);			
			Иначе
				ПодписьСтатьиОтчисленийНаСоцНужды = "Статья затрат по страховым взносам";
				Форма.СтатьяПрочихОтчисленийНаСоцНужды.Видимость(0);
				ПодписьСтатьиПрочихОтчисленийНаСоцНужды = "";
			КонецЕсли;		
		Иначе
			ПодписьСтатьиОтчисленийНаСоцНужды = "";
			ПодписьСтатьиПрочихОтчисленийНаСоцНужды = "";
			Форма.СтатьяОтчисленийНаСоцНужды.Видимость(0);
			Форма.СтатьяПрочихОтчисленийНаСоцНужды.Видимость(0);
		КонецЕсли;		
	КонецЕсли;
	
КонецПроцедуры // ПоКнопкеВыбораДаты()

//******************************************************************************
// ПоКнопкеИстория(ВидимыеРеквизиты)
//
// Параметры:
//  ВидимыеРеквизиты - "строка" - идентификаторы периодических реквизитов,
//                     значения которых надо показать, разделенные запятыми;
//                     если не передана - показываются все реквизиты.
//
// Вызывается из формул элементов диалога:
//  Кнопка "История".
//
// Описание:
//  Вызывается обработка "ЗначенияПериодическихРеквизитов" для просмотра истории 
// значений периодических реквизитов.
//
Процедура ПоКнопкеИстория(ВидимыеРеквизиты="")
	
	Если Константа.УчетЗарплатыВоВнешнейПрограмме = Да Тогда
		ВидимыеРеквизиты = "Подразделение";
	КонецЕсли;
	
	Стр = "Статус,Инвалид,КоличествоДнейБолезни,КоличествоДнейОтпуска,
	      |НачислятьНалогиСФОТ,НеВзиматьВзносыПФРиФСС,Оклад,Подразделение,ПроцентСевернойНадбавки,
		  |СальдоНалогаНаДоходы,СтатьяОтчисленийНаСоцНужды,СтатьяПрочихОтчисленийНаСоцНужды,
		  |СчетЗатрат,Субконто1,Субконто2,Субконто3,ХарактерРаботы";
	
    Меню = СоздатьОбъект("СписокЗначений");
	Меню.Установить("Все реквизиты", Стр);
	Меню.Установить("Подразделение", "Подразделение");
	Меню.Установить("Характер работы", "ХарактерРаботы");
	Меню.Установить("Инвалид", "Инвалид");
	Меню.Установить("Оклад", "Оклад,ПроцентСевернойНадбавки");
	Меню.Установить("Счет затрат", "СчетЗатрат,Субконто1,Субконто2,Субконто3,СтатьяОтчисленийНаСоцНужды,СтатьяПрочихОтчисленийНаСоцНужды");	
	Меню.Установить("Налог на доходы", "СальдоНалогаНаДоходы");
	Меню.Установить("Статус резидента", "Статус");
	Меню.Установить("Данные в ПФР", "КоличествоДнейБолезни,КоличествоДнейОтпуска");
	Меню.Установить("Начисление налогов с ФОТ", "НачислятьНалогиСФОТ,НеВзиматьВзносыПФРиФСС");

	Если ПустоеЗначение(ВидимыеРеквизиты) = 1 Тогда
		Если Меню.ВыбратьЗначение(ВидимыеРеквизиты, "", 0, 60, 1) = 0 Тогда
		    Возврат;
		КонецЕсли;
		
	Иначе
		ВидимыеРеквизиты = Меню.Получить(ВидимыеРеквизиты);
	КонецЕсли;

	глЗначенияПериодическихРеквизитов(Контекст,,, ВидимыеРеквизиты);
		
КонецПроцедуры // ПоКнопкеИстория()

//******************************************************************************
// ПриВыбореСчета()
// 
// Вызывается из формул элементов диалога:
//  СчетЗатрат.
//
// Описание:
//  Устанавливает тип объектов аналитического учета по счету затрат.
//
Процедура ПриВыбореСчета()
	
	Для А = 1 По 3 Цикл
		НазначитьТип("Субконто"+А,СчетЗатрат.ВидСубконто(А));
	КонецЦикла;
        
	НомерСубконто = МожноВыбиратьСтатьюОтчислений();
	Если НомерСубконто > 0 Тогда
		Если ДатаГод(ИспользоватьДату()) < 2010 Тогда
			ПодписьСтатьиОтчисленийНаСоцНужды = "Статья затрат по начисленному ЕСН";
			ПодписьСтатьиПрочихОтчисленийНаСоцНужды = "Статья затрат по прочим отчисл. с ФОТ";
			Форма.СтатьяПрочихОтчисленийНаСоцНужды.Видимость(1);
		Иначе
			ПодписьСтатьиОтчисленийНаСоцНужды = "Статья затрат по страховым взносам";
			Форма.СтатьяПрочихОтчисленийНаСоцНужды.Видимость(0);
			ПодписьСтатьиПрочихОтчисленийНаСоцНужды = "";
		КонецЕсли;
		
		Форма.СтатьяОтчисленийНаСоцНужды.Видимость(1);
		
		НазначитьВид(СтатьяОтчисленийНаСоцНужды, СчетЗатрат.ВидСубконто(НомерСубконто));
		НазначитьВид(СтатьяПрочихОтчисленийНаСоцНужды, СчетЗатрат.ВидСубконто(НомерСубконто));
		
	Иначе
		ПодписьСтатьиОтчисленийНаСоцНужды = "";
		ПодписьСтатьиПрочихОтчисленийНаСоцНужды = "";
		Форма.СтатьяОтчисленийНаСоцНужды.Видимость(0);
		Форма.СтатьяПрочихОтчисленийНаСоцНужды.Видимость(0);
	КонецЕсли;
	
КонецПроцедуры // ПриВыбореСчета()

//******************************************************************************
// ПолучитьНачальныеДанные(ИмяРеквизита)
//
Функция ПолучитьНачальныеДанные(ИмяРеквизита)
	
	Если Выбран() = 0 Тогда
	    Возврат 0;
	КонецЕсли;
	
	Сумма = 0;
	а = ДатаМесяц(ДатаПриема) - 1;
	Реквизит = СоздатьОбъект("Периодический");
	Реквизит.ИспользоватьОбъект(ИмяРеквизита, ТекущийЭлемент());
	
	ТекМесяц = "31.01." + ДатаГод(ДатаПриема);
	Для НомерМесяца = 1 по а Цикл
		Месяц = Формат(НомерМесяца,"Ч(0)2");
		Сумма = Сумма + Реквизит.ЗначениеНаДату(ТекМесяц);
		ТекМесяц = КонМесяца(ДобавитьМесяц(ТекМесяц, 1));
	КонецЦикла;
	
	Возврат Сумма;
	
КонецФункции // ПолучитьНачальныеДанные()

//******************************************************************************
// Предопределенная процедура
//
Процедура ВводНового(Копирование)
	
	ТипВычета = Перечисление.ТипыВычетов.БезВычетов;
	Дети = 0;
	Если Копирование = 1 Тогда
	    Возврат;
	КонецЕсли;

	СпрОКСМ = СоздатьОбъект("Справочник.ОКСМ");
	Если СпрОКСМ.НайтиПоКоду("643") = 1 Тогда
	    Страна = СпрОКСМ.ТекущийЭлемент();
	КонецЕсли;
	
	НачислятьНалогиСФОТ = 1;
	Статус = 1;
	Подразделение = глЗначениеПоУмолчанию("ОсновноеПодразделение");
	ТипВычета = Перечисление.ТипыВычетов.Обычный;
	
КонецПроцедуры // ВводНового()

//******************************************************************************
// Предопределенная процедура
//
Процедура ПриОткрытии()
	
	Форма.СтатьяОтчисленийНаСоцНужды.НеИзменятьВид(1);
	Форма.СтатьяПрочихОтчисленийНаСоцНужды.НеИзменятьВид(1);

	Форма.ИспользоватьЗакладки(1);
	Форма.Закладки.ДобавитьЗначение(1,"Общие сведения");
	Если Константа.УчетЗарплатыВоВнешнейПрограмме = Нет Тогда
		Форма.Закладки.ДобавитьЗначение(2,"Начисление з/пл");
		Форма.Закладки.ДобавитьЗначение(3,"Налоги и отчисления");
		Форма.Закладки.ДобавитьЗначение(4,"Начальные данные");
	КонецЕсли;
	Форма.Закладки.ДобавитьЗначение(5,"Прочее");
	Форма.ИспользоватьСлой("Основной, Общий",2);
	
	Если Форма.ТолькоПросмотр() = 1 Тогда
	    Форма.кнВводАдресаРегистрации.Доступность(0);
		Форма.кнВводАдресаМестаЖительства.Доступность(0);
		Форма.кнВводАдресаВСтранеПроживания.Доступность(0);
		Форма.кнМестоРождения.Доступность(0);
	КонецЕсли;
	
	СохранениеПериодическихРеквизитов(2, "*");
	
	МесяцБЛ = Цел(КоличествоДнейБолезни/30);
	ДеньБЛ = КоличествоДнейБолезни - МесяцБЛ*30;
	
	МесяцОтп = Цел(КоличествоДнейОтпуска/30);
	ДеньОтп = КоличествоДнейОтпуска - МесяцОтп*30;
	
	ТекущееУведомление = ТекущееЗначениеУведомления();
	
	ПодготовитьТаблицуВычетов();
	
КонецПроцедуры // ПриОткрытии()

//******************************************************************************
// Предопределенная процедура
//
Процедура ПриВыбореЗакладки(Ном,Значение)
	
	Если Значение = 1 Тогда
		Форма.ИспользоватьСлой("Основной, Общий",2);

	ИначеЕсли Значение = 2 Тогда
		Форма.ИспользоватьСлой("Основной, ЗП",2);

		Если МожноВыбиратьСтатьюОтчислений() > 0 Тогда
			
			Если ДатаГод(ИспользоватьДату()) < 2010 Тогда
				ПодписьСтатьиОтчисленийНаСоцНужды = "Статья затрат по начисленному ЕСН";
				ПодписьСтатьиПрочихОтчисленийНаСоцНужды = "Статья затрат по прочим отчисл. с ФОТ";
				Форма.СтатьяПрочихОтчисленийНаСоцНужды.Видимость(1);			
			Иначе
				ПодписьСтатьиОтчисленийНаСоцНужды = "Статья затрат по страховым взносам";
				Форма.СтатьяПрочихОтчисленийНаСоцНужды.Видимость(0);
				ПодписьСтатьиПрочихОтчисленийНаСоцНужды = "";
			КонецЕсли;		
			
			Форма.СтатьяОтчисленийНаСоцНужды.Видимость(1);
			
		Иначе
			ПодписьСтатьиОтчисленийНаСоцНужды = "";
			ПодписьСтатьиПрочихОтчисленийНаСоцНужды = "";
			Форма.СтатьяОтчисленийНаСоцНужды.Видимость(0);
			Форма.СтатьяПрочихОтчисленийНаСоцНужды.Видимость(0);
		КонецЕсли;
        
	ИначеЕсли Значение = 3 Тогда
		Если ДатаГод(ИспользоватьДату()) < 2010 Тогда
			Форма.ИспользоватьСлой("Основной, Дополнительно, НачислятьНалогиСФОТ",2);
		Иначе
			Форма.ИспользоватьСлой("Основной, Дополнительно, НачислятьВзносыСФОТ",2);
		КонецЕсли;
		
	ИначеЕсли Значение = 4 Тогда
		Форма.ИспользоватьСлой("Основной, ДанныеСНачалаГода",2);
		Если ДоходОблагаемыйНДФЛ_СНачалаГода +
			 НачисленныйНДФЛ_СНачалаГода +
			 ДоходОблагаемыйЕСН_СНачалаГода +
			 НачисленныйЕСН_ПФР_СНачалаГода +
			 НачисленныйЕСН_ФОМС_СНачалаГода +
			 НачисленныйЕСН_ТОМС_СНачалаГода +
			 ДоходОблагаемыйЕСН_ФСС_СНачалаГода +
			 НачисленныйЕСН_ФСС_СНачалаГода +
			 НачисленныйПФР_нак_СНачалаГода +
			 НачисленныйПФР_страх_СНачалаГода = 0 Тогда
		    Форма.ИспользоватьСлой("ДополнительныеНачальныеДанные", 0);
			Форма.Инструкция.Видимость(1);
		Иначе
			Форма.ИспользоватьСлой("ДополнительныеНачальныеДанные", 1);
			Форма.Инструкция.Видимость(0);
		КонецЕсли;

	ИначеЕсли Значение = 5 Тогда
		Форма.ИспользоватьСлой("Основной, Паспорт",2);
	КонецЕсли;
	
КонецПроцедуры // ПриВыбореЗакладки()

//*****************************************************************************
// Предопределенная процедура
//
Процедура ПриНачалеВыбораЗначения(ЭлементДиалога, Флаг)
	
	Если (ЭлементДиалога = "СчетЗатрат") и (Константа.ИспользоватьСписокКорректныхПроводок = Да) Тогда
		СписокКорректныхПроводок = СоздатьОбъект("СписокЗначений");
		СписокКорректныхПроводок.Установить("Счет", Сч70);
		глЗначениеОтбора = СписокКорректныхПроводок;
		
	ИначеЕсли ЭлементДиалога = "СтатьяОтчисленийНаСоцНужды" Тогда
		
		Если МожноВыбиратьСтатьюОтчислений() > 0 Тогда
			ПриВыбореСчета();
			ОткрытьФорму("Справочник."+СтатьяОтчисленийНаСоцНужды.Вид(), Перечисление.ГруппыВидыРасходов.ЕСН);
		КонецЕсли;
		Флаг = 0;
		
	ИначеЕсли ЭлементДиалога = "СтатьяПрочихОтчисленийНаСоцНужды" Тогда
		
		Если МожноВыбиратьСтатьюОтчислений() > 0 Тогда
			ПриВыбореСчета();
			Если  ПустоеЗначение(СтатьяПрочихОтчисленийНаСоцНужды) = 1 Тогда
				ОткрытьФорму("Справочник."+СтатьяПрочихОтчисленийНаСоцНужды.Вид(), Перечисление.ГруппыВидыРасходов.ДругиеРасходы);
			Иначе
				Если (СтатьяПрочихОтчисленийНаСоцНужды.ВидРасходовДляНалоговогоУчета = Перечисление.ГруппыВидыРасходов.НалогиИСборы) Тогда
					ОткрытьФорму("Справочник."+СтатьяПрочихОтчисленийНаСоцНужды.Вид());
				Иначе
					ОткрытьФорму("Справочник."+СтатьяПрочихОтчисленийНаСоцНужды.Вид(), Перечисление.ГруппыВидыРасходов.ДругиеРасходы);
				КонецЕсли;					
			КонецЕсли;
			
		КонецЕсли;
		Флаг = 0;
		
	ИначеЕсли ЭлементДиалога = "РазмерВычетаНаРебенка" Тогда
		ВычетыНаРебенка = СоздатьОбъект("СписокЗначений");
		Если ДатаГод(ИспользоватьДату()) < 2005 Тогда
		    ВычетыНаРебенка.ДобавитьЗначение(300);
			ВычетыНаРебенка.ДобавитьЗначение(600);		
		Иначе
			Если ДатаГод(ИспользоватьДату()) < 2009 Тогда
				ВычетыНаРебенка.ДобавитьЗначение(600);
				ВычетыНаРебенка.ДобавитьЗначение(1200); 
			Иначе
				ВычетыНаРебенка.ДобавитьЗначение(1000);
				ВычетыНаРебенка.ДобавитьЗначение(2000); 
			КонецЕсли;
		КонецЕсли;
		

		ВычетыНаРебенка.ВыбратьЗначение(РазмерВычетаНаРебенка,,,, 2);
		Флаг = 0;
		
	ИначеЕсли ЭлементДиалога = "РазмерВычетаНаРебенкаИнвалида" Тогда
		ВычетыНаРебенка = СоздатьОбъект("СписокЗначений");
		Если ДатаГод(ИспользоватьДату()) < 2009 Тогда
			ВычетыНаРебенка.ДобавитьЗначение(1200);
			ВычетыНаРебенка.ДобавитьЗначение(2400);
		Иначе                                      
			ВычетыНаРебенка.ДобавитьЗначение(2000);
			ВычетыНаРебенка.ДобавитьЗначение(4000);
		КонецЕсли;
		ВычетыНаРебенка.ВыбратьЗначение(РазмерВычетаНаРебенкаИнвалида,,,, 2);
		Флаг = 0;
		
	ИначеЕсли ЭлементДиалога = "ХарактерРаботы" Тогда
		СписокХарактеровРаботы.ВыбратьЗначение(ХарактерРаботы,,,, 2);
		Флаг = 0;
	КонецЕсли;
	
КонецПроцедуры // ПриНачалеВыбораЗначения()

//*****************************************************************************
// Предопределенная процедура
//
Процедура ПриЗаписи()
	
	
	// Проверка реквизитов документа, удостоверяющего личность
	Если ПустаяСтрока(ВидДокумента) = 1 Тогда
		
		Если (ПустоеЗначение(ДокументСерия) = 0) или
			 (ПустоеЗначение(ДокументНомер) = 0) или
			 (ПустоеЗначение(ДокументДатаВыдачи) = 0) или
			 (ПустоеЗначение(ДокументКемВыдан) = 0) Тогда
		
			// Если в поле документа выбрано "пустое значение" - очищаем реквизиты 
			// документа в форме отчета.
			Если Вопрос("В качестве вида документа, удостоверяющего личность, выбрано <пустое значение>. 
			            |Реквизиты документа, удостоверяющего личность, будут очищены. Продолжить?","Да+Нет") = "Да" Тогда
				
				ДокументСерия = " ";
				ДокументНомер = " ";
				ДокументДатаВыдачи = " ";
				ДокументКемВыдан = " ";
				
			Иначе
				СтатусВозврата(0);
				Возврат;
			КонецЕсли;
		КонецЕсли;
		
	Иначе
		
		КодДокумента = ВидДокумента.КодНДФЛ;
		Ошибка = 0;

		Если глПроверкаСерииУдостоверенияЛичности(КодДокумента, ДокументСерия, 1) = 0 Тогда

			Активизировать("ДокументСерия");
			Ошибка = 1;

		ИначеЕсли глПроверкаНомераУдостоверенияЛичности(КодДокумента, ДокументНомер, 1) = 0 Тогда
			
			// Проверку номера вызываем для всех кодов документа - проверка сама знает,
			// что и как проверять
			Активизировать("ДокументНомер");
			Ошибка = 1;
			
		ИначеЕсли ПустоеЗначение(ДокументДатаВыдачи) = 1 Тогда
			
			Активизировать("ДокументДатаВыдачи");
			Предупреждение("Необходимо указать дату выдачи документа, удостоверяющего личность.");
			Ошибка = 1;

		ИначеЕсли ПустоеЗначение(ДокументКемВыдан) = 1 Тогда
			
			Активизировать("ДокументКемВыдан");
			Предупреждение("Необходимо указать, кем выдан документ, удостоверяющий личность.");
			Ошибка = 1;

		КонецЕсли;
		
		Если Ошибка = 1 Тогда
			СтатусВозврата(0);
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
	// Проверка ИНН
	Если ПустоеЗначение(ИНН) = 0 Тогда
		КонтрольИНН = ИНН;
		ДлинаИНН = СтрДлина(Строка(Число(СтрЗаменить(КонтрольИНН, "0", "9"))));
		
		Если ДлинаИНН <> 12 Тогда
			Предупреждение("Неверно указан ИНН сотрудника.");
			СтатусВозврата(0);
			Возврат;
		КонецЕсли;
	КонецЕсли;

	// Запись периодических реквизитов
	СтатусВозврата(глБухЗаписьПериодическихРеквизитов(Контекст));
	
КонецПроцедуры // ПриЗаписи()

////////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ
//

Сч70 = СчетПоКоду("70");

СписокХарактеровРаботы = СоздатьОбъект("СписокЗначений");
СписокХарактеровРаботы.ДобавитьЗначение(Перечисление.ХарактерРаботы.ТрудовойДоговор);
СписокХарактеровРаботы.ДобавитьЗначение(Перечисление.ХарактерРаботы.ТрудовыеОтношенияПрекращены);

ВычетыНДФЛ.НоваяКолонка("Наименование", "Строка",,,"Вид вычета");
ВычетыНДФЛ.НоваяКолонка("ДатаНачала", "Дата",,,"С",, "Д ДДММГГГГ");
ВычетыНДФЛ.НоваяКолонка("ДатаОкончания", "Дата",,,"По",, "Д ДДММГГГГ");

ВычетыНДФЛСсылки = СоздатьОбъект("ТаблицаЗначений");
ВычетыНДФЛСсылки.НоваяКолонка("ВидВычета");

ВычетыСотрудниковПоНДФЛ = СоздатьОбъект("Справочник.ВычетыСотрудниковПоНДФЛ");
ВычетыСотрудниковПоНДФЛ.ИспользоватьВладельца(ТекущийЭлемент());
