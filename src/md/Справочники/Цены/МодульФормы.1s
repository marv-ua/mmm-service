////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ
// 
Перем СтараяВалюта;

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ МОДУЛЯ
// 
//******************************************************************************
// ЕстьДубльЦены()
//
// Параметры: 
//  Нет
//
// Возвращаемое значение:
//  Найденный дубль, если нет дубля цены, то возвращается пустая строка
//
// Описание:
//  Функция проверяет есть ли у данного товара цена данного типа
//
Функция ЕстьДубльЦены() 
	
	ВыборкаЦен = СоздатьОбъект("Справочник.Цены");
	ВыборкаЦен.ИспользоватьВладельца(Владелец);
	ВыборкаЦен.ВыбратьЭлементы();
	
	Пока ВыборкаЦен.ПолучитьЭлемент() = 1 Цикл
		
		Если ВыборкаЦен.ТипЦен <> ТипЦен Тогда
			Продолжить;
		КонецЕсли;
		
		Если Выбран() = 0 Тогда
			
			// Новый элемент
			Возврат ВыборкаЦен.ТекущийЭлемент();
		Иначе           
			
			// Для сохраненного элемента проверить несовпадение типов цен
			// недостаточно, т.к. из выборки можно получить редактируемый элемент
			Если ТекущийЭлемент() <> ВыборкаЦен.ТекущийЭлемент() Тогда
				Возврат ВыборкаЦен.ТекущийЭлемент();
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат "";
	
КонецФункции // ЕстьДубльЦены()

//******************************************************************************
// ПоКнопкеВыбораДаты()
//
// Параметры:
//
// Возвращаемое значение:
//  Нет.
//
// Вызывается из формул элементов диалога:
//  Кнопка выбора даты.
//
// Описание:
//  Выбирается дата просмотра и редактирования значений периодических реквизитов 
// выбирается по кнопке, чтобы не менялся признак модифицированности формы.
//
Процедура ПоКнопкеВыбораДаты()
	
	глВвестиДатуПериодическихРеквизитов(Контекст, 1);
	
КонецПроцедуры // ПоКнопкеВыбораДаты()

//******************************************************************************
// ПоКнопкеИстория()
//
// Параметры:
//
// Возвращаемое значение:
//  Нет.
//
// Вызывается из формул элементов диалога:
//  Кнопка "История".
//
// Описание:
//  Вызывается обработка "ЗначенияПериодическихРеквизитов" для просмотра истории 
// значений периодических реквизитов.
//
Процедура ПоКнопкеИстория()
	
    глЗначенияПериодическихРеквизитов(Контекст);
	
КонецПроцедуры // ПоКнопкеИстория()


//*****************************************************************************
// ПриИзмененииВалюты()
//
// Параметры: 
//	Нет
//
// Возвращаемое значение:
//  Нет
//
// Вызывается из формул элементов диалога:
//  реквизит "Валюта"
//
// Описание:
//  Вызывается при выборе валюты. Пересчитывает цену из "старой" в 
// "новую" валюту по курсу на рабочую дату.
//
Процедура ПриИзмененииВалюты()
	
	Если (Цена = 0) Тогда
		
		СтараяВалюта = Валюта;
		Возврат;
	КонецЕсли;
	
	Если (СтараяВалюта <> Валюта) Тогда // изменили валюту
		                    
		Если Вопрос("Изменилась валюта задания цены. Пересчитать цену?", "Да+Нет", 60) = "Да" Тогда
			
			Цена = глПересчет(Цена, СтараяВалюта, РабочаяДата(), Валюта, РабочаяДата());
			
		КонецЕсли;
		
	КонецЕсли;
	
	СтараяВалюта = Валюта;
	
КонецПроцедуры // ПриИзмененииВалюты()

//******************************************************************************
// ПриВыбореУпрВалютойЦены()
//
// Параметры:
//  Нет.
//
// Вызывается из формул элементов диалога:
//	Переключатель "Цена указана...".
// 
// Описание:
//  Если цена в рублях, то становится невозможным указать валюту.
//
Процедура ПриВыбореУпрВалютойЦены()
	
	Если УпрВалютойЦены = 1  Тогда
		Если ПустоеЗначение(Валюта) = 0 Тогда
			Валюта = "";
		КонецЕсли;
		Форма.Валюта.Доступность(0);
		
	Иначе
		Если ПустоеЗначение(Валюта) = 1 Тогда
			Валюта = Константа.ОсновнаяВалюта;
		КонецЕсли;
		Форма.Валюта.Доступность(1);
	КонецЕсли;
	ПриИзмененииВалюты();
КонецПроцедуры // ПриВыбореТипаЦенВДоговоре() 

//******************************************************************************
// ПриИзмененииТипаЦены()
//
// Параметры: 
//  
//
// Возвращаемое значение:
//  Нет
//
// Описание:
//  ТекстОписания
//
Процедура ПриИзмененииТипаЦены()
	
	Если ПустоеЗначение(ТипЦен) = 0 Тогда
		Если ПустоеЗначение(Валюта) = 1 Тогда
			Валюта	= ТипЦен.Валюта;
			Если ПустоеЗначение(Валюта) = 0 Тогда
				УпрВалютойЦены = 2;
			Иначе
				УпрВалютойЦены = 1
			КонецЕсли;
		КонецЕсли;
		ПриВыбореУпрВалютойЦены();
	КонецЕсли;

КонецПроцедуры // ПриИзмененииТипаЦены()  

////////////////////////////////////////////////////////////////////////////////
// ПРЕДОПРЕДЕЛЕННЫЕ ПРОЦЕДУРЫ
// 
//******************************************************************************
// Предопределенная процедура
//
Процедура ВводНового(ПризнКопирования)
	
КонецПроцедуры // ВводНового()

//******************************************************************************
// Предопределенная процедура.
//
Процедура ПриОткрытии()
	
    // Через параметр передается тип цены или дата показа цен
	Параметр = Форма.Параметр;
	Если ПустоеЗначение(Параметр) = 0 Тогда
		Если ТипЗначенияСтр(Параметр) = "Справочник" Тогда
			Если Параметр.Вид() = ТипЦен.Вид() Тогда
				Если ПустоеЗначение(ТипЦен) = 1  Тогда
				    ТипЦен = Параметр;
				КонецЕсли;
			КонецЕсли;
		ИначеЕсли ТипЗначенияСтр(Параметр) = "Дата" Тогда	
			ИспользоватьДату(Параметр,1);
		КонецЕсли;
	КонецЕсли;
	
	//Если цена розничная - предупредить о необходимости проведения инвентаризации
	Если (ТипЦен.Выбран()=1) и (цена<>0) Тогда
		Предупреждать = 0;
		Сообщение = "Тип цен """+ ТипЦен + """ установлен для розничных торговых точек:"+РазделительСтрок; 
		МХ = СоздатьОбъект("Справочник.МестаХранения");
		МХ.ВыбратьЭлементыПоРеквизиту("ТипЦен",ТипЦен,0,0);
		Пока МХ.ПолучитьЭлемент() = 1 Цикл
			Если МХ.ТипСклада = Перечисление.ТипыСкладов.Розничный Тогда
				Предупреждать = 1;
				Сообщение = Сообщение + МХ.Наименование + РазделительСтрок;
			КонецЕсли;
		КонецЦикла;
		Если Предупреждать = 1 Тогда
			Сообщение = Сообщение + "Перед изменением розничной цены по перечисленным"+ РазделительСтрок +
			"торговым точкам должна быть проведена инвентаризация."+РазделительСтрок + "Редактировать цену?"; 
			Если Вопрос(Сообщение,"Да+Нет",60) <> "Да" Тогда
				СтатусВозврата(0);
				Возврат;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
		
	// Форме может быть передана дата просмотра и редактирования значений
	// периодических реквизитов, например, когда форма открыта из обработки
	// "ЗначенияПериодическихРеквизитов".
	глПолучитьДатуПериодическихРеквизитов(Контекст);
	
	// Системно не надо контролировать изменение периодических реквизитов.
	СохранениеПериодическихРеквизитов(0);

	Если Форма.ТолькоПросмотр() = 1 Тогда
	    
		// кнопки, которые могут изменить базу в режиме "только просмотр" недоступны
		Форма.кнЗаписать.Доступность(0);
		Форма.кнОК.Доступность(0);
		Форма.кнУстановить.Доступность(0);
		
		Форма.КнопкаПоУмолчанию("кнЗакрыть");
	Иначе
		
		Форма.КнопкаПоУмолчанию("кнОК");
	КонецЕсли;
	
	СтараяВалюта  = Валюта;
	Если ПустоеЗначение(Валюта) = 0 Тогда
		УпрВалютойЦены = 2;
	Иначе
		УпрВалютойЦены = 1
	КонецЕсли;
	ПриВыбореУпрВалютойЦены();
		
	Если ТипЦен.Выбран() = 1 Тогда  
		
		// не новый элемент - сразу на цену встанем
		Активизировать("Цена");
	КонецЕсли;
	
КонецПроцедуры // ПриОткрытии()

//******************************************************************************
// Предопределенная процедура.
//
Процедура ПриПовторномОткрытии()
	
	// Форме может быть передана дата просмотра и редактирования значений
	// периодических реквизитов, например, когда форма открыта из обработки
	// "ЗначенияПериодическихРеквизитов".
	глПолучитьДатуПериодическихРеквизитов(Контекст);
	
КонецПроцедуры // ПриПовторномОткрытии()

//******************************************************************************
// Предопределенная процедура.
//
Процедура ПриНачалеВыбораЗначения(ИдентЭлемДиалога, ФлагСтандОбр)
	
КонецПроцедуры // ПриНачалеВыбораЗначения()

//******************************************************************************
// Предопределенная процедура.
//
Процедура ПриЗаписи()
	
	// ПРОВЕРКА ЗАПОЛНЕНИЯ ОБЯЗАТЕЛЬНЫХ ПОЛЕЙ
	Если ПустоеЗначение(ТипЦен) = 1 Тогда
		Предупреждение("Не заполнен ""Тип Цен""",60);
		Активизировать("ТипЦен");
		СтатусВозврата(0);
		Возврат;
	КонецЕсли;
	
	// ПРОВЕРКА ДУБЛИРОВАНИЯ ЦЕНЫ
	Дубль = ЕстьДубльЦены();
	Если ПустоеЗначение(Дубль) = 0 Тогда
	    
		Предупреждение("У номенклатурной позиции уже есть цена типа """ + ТипЦен + """" +
		              ?(Дубль.ПометкаУдаления() = 1," (помечена на удаление).","."), 60);
		Активизировать("ТипЦен");
		СтатусВозврата(0);
		Возврат;
	КонецЕсли;
	
	// Обработке ЗаписьПериодическихРеквизитов необходимо передать
	// значения периодических реквизитов, введенные в форме диалога.
	Список = СоздатьОбъект("СписокЗначений");
	Список.Установить("Цена"   , Цена);
	
	// При записи вызывается обработка ЗаписьПериодическихРеквизитов 
	// для управления записью значений периодических реквизитов.
	Если глЗаписьПериодическихРеквизитов(Контекст, Список, , '01.01.1980') = 0 Тогда
		СтатусВозврата(0);
	КонецЕсли;

КонецПроцедуры // ПриЗаписи()
