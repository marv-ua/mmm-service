Перем ТабЦен;

//******************************************************************************
//
Процедура ЗаполнитьТаблицуЦен()
	ТабЦен = СоздатьОбъект("ТаблицаЗначений");
	ТабЦен.Очистить();
	ТабЦен.НоваяКолонка("Элемент"); 
	ТабЦен.НоваяКолонка("Удален",,,," ");
	ТабЦен.НоваяКолонка("ТипЦен",,,,"Тип цены");
	ТабЦен.НоваяКолонка("Цена");
	ТабЦен.НоваяКолонка("Валюта",,,,"Валюта");
	ТабЦен.НоваяКолонка("ПослИзменение",,,,"Установлена",,,);
	
	ДатаЦен = ИспользоватьДату();
	СпрЦены = СоздатьОбъект("Справочник.Цены");
	ПериодЦена 	= СоздатьОбъект("Периодический");
	СпрЦены.ИспользоватьВладельца(ТекущийЭлемент());
	СпрЦены.ИспользоватьДату(ДатаЦен);
	СпрЦены.ВыбратьЭлементы();
	Пока СпрЦены.ПолучитьЭлемент() = 1 Цикл
		Если СпрЦены.ЭтоГруппа() = 1 Тогда
			Продолжить;
		КонецЕсли;
		ТабЦен.НоваяСтрока(); 
		ТабЦен.Элемент = СпрЦены.ТекущийЭлемент();
		ТабЦен.Удален = ?(СпрЦены.ТекущийЭлемент().ПометкаУдаления() = 1,12,14);
		ТабЦен.ТипЦен = СпрЦены.ТипЦен;
		ТабЦен.Цена = СпрЦены.Цена;
		ТабЦен.Валюта = ?(ПустоеЗначение(СпрЦены.Валюта) = 1,"руб.",СпрЦены.Валюта);
		ПериодЦена.ИспользоватьОбъект("Цена",СпрЦены.ТекущийЭлемент());
		ПериодЦена.НайтиЗначение(ДатаЦен,-1);
		ТабЦен.ПослИзменение = ПериодЦена.ДатаЗнач;
	КонецЦикла;
	ТабЦен.Выгрузить(ТаблицаЦен);
	ТаблицаЦен.ВидимостьКолонки("Элемент",0);
	ТаблицаЦен.ВыводитьПиктограммы("Удален");
	ТаблицаЦен.УстановитьПараметрыКолонки("Удален",,,,,3,,);
	ТаблицаЦен.УстановитьПараметрыКолонки("ТипЦен",,,,,25,,);
	ТаблицаЦен.УстановитьПараметрыКолонки("Цена",,,,,15,"Ч17.2,.",2);
	ТаблицаЦен.УстановитьПараметрыКолонки("Валюта",,,,,15,,);	
	ТаблицаЦен.УстановитьПараметрыКолонки("ПослИзменение",,,,,15,,2);
	ТаблицаЦен.ТекущаяСтрока(1);
КонецПроцедуры

//******************************************************************************
//
Процедура ОбработкаТаблицыЦен()
	Если ТаблицаЦен.ТекущаяСтрока()>0 Тогда
		Если Выбран() = 0 Тогда
			Если Вопрос("Цены можно редактировать
			|только после записи номенклатуры.
			|Записать номенклатуру?", "Да+Нет") = "Да" Тогда
				Записать();
			КонецЕсли;
		КонецЕсли;
		Если Выбран() = 0 Тогда
			Возврат;
		КонецЕсли;
		ОткрытьФормуМодально(ТаблицаЦен.Элемент,ИспользоватьДату());
		ЗаполнитьТаблицуЦен();
	КонецЕсли;
КонецПроцедуры

//******************************************************************************
// ОткрытьСправочникЦены()
//
// Параметры:
//
// Возвращаемое значение:
//  Нет.
Процедура ОткрытьСправочникЦены()
	Если Выбран() = 0 Тогда
		Если Вопрос("Перейти в справочник ""Цены""
		|только после записи номенклатуры.
		|Записать номенклатуру?", "Да+Нет") = "Да" Тогда
			Записать();
		КонецЕсли;
	КонецЕсли;
	Если Выбран() = 0 Тогда
		Возврат;
	КонецЕсли;
	ОткрытьФормуМодально("Справочник.Цены.ФормаСписка",ТекущийЭлемент());
	ЗаполнитьТаблицуЦен();
КонецПроцедуры

//******************************************************************************
// ДобавитьЦену()
//
// Параметры:
//
// Возвращаемое значение:
//  Нет.
Процедура ДобавитьЦену()
	Если Выбран() = 0 Тогда
			Если Вопрос("Добавление цены возможно
			|только после записи номенклатуры.
			|Записать номенклатуру?", "Да+Нет") = "Да" Тогда
				Записать();
			КонецЕсли;
		КонецЕсли;
		Если Выбран() = 0 Тогда
			Возврат;
		КонецЕсли;
	ОткрытьФормуМодально("Элемент.Цены",ИспользоватьДату(),,0,ТекущийЭлемент());
	ЗаполнитьТаблицуЦен();
КонецПроцедуры

//******************************************************************************
// ИзменитьЦену()
//
// Параметры:
//
// Возвращаемое значение:
//  Нет.
Процедура ИзменитьЦену()
	Если ТаблицаЦен.ТекущаяСтрока()>0 Тогда
		Если Выбран() = 0 Тогда
			Если Вопрос("Цены можно редактировать
			|только после записи номенклатуры.
			|Записать номенклатуру?", "Да+Нет") = "Да" Тогда
				Записать();
			КонецЕсли;
		КонецЕсли;
		Если Выбран() = 0 Тогда
			Возврат;
		КонецЕсли;
		ОткрытьФормуМодально(ТаблицаЦен.Элемент,ИспользоватьДату());
		ЗаполнитьТаблицуЦен();
	КонецЕсли;
КонецПроцедуры

//******************************************************************************
// Пересчет()
//
// Параметры:
//  Нет.
//
// Вызывается из формул элементов диалога:
//  Реквизит СтавкаНДС,
//  Реквизит СтавкаНП,
//  Реквизит ЦенаБезНалогов,
//  Реквизит ЦенаБезНП,
//  Реквизит ЦенаВключаяНП,
//
Процедура Пересчет()
	
	Если СтавкаНДС.Выбран() = 1 Тогда
	    СтНДС = СтавкаНДС.Ставка;
	Иначе
		СтНДС = 0;
	КонецЕсли;
	Если СтавкаНП.Выбран() = 1 Тогда
	    СтНП = СтавкаНП.Ставка;
	Иначе
		СтНП = 0;
	КонецЕсли;

	Если ПорядокХраненияОтпускнойЦены = 1 Тогда //Без налогов
		Если (СтНДС = 20) или (СтНДС = 18) или (СтНДС = 10) или (СтНДС = 0) Тогда //установленные налоговые ставки
		    ЦенаБезНП = Окр(ЦенаБезНалогов*(100+СтНДС)/100, 2, 1);
			ЦенаВключаяНП = Окр(ЦенаБезНП*(100+СтНП)/100, 2, 1);
			
		Иначе //расчетные ставки
		    ЦенаБезНП = Окр(ЦенаБезНалогов*100/(100-СтНДС), 2, 1);
			ЦенаВключаяНП = Окр(ЦенаБезНП*(100+СтНП)/100, 2, 1);
		КонецЕсли;

		Если Цена <> ЦенаБезНалогов Тогда
		    Цена = ЦенаБезНалогов;
		КонецЕсли;

	ИначеЕсли ПорядокХраненияОтпускнойЦены = 2 Тогда //Без НП
		Если (СтНДС = 20) или (СтНДС = 18) или (СтНДС = 10) или (СтНДС = 0) Тогда //установленные налоговые ставки
		    ЦенаБезНалогов = Окр(ЦенаБезНП*100/(100+СтНДС), 2, 1);
			ЦенаВключаяНП = Окр(ЦенаБезНП*(100+СтНП)/100, 2, 1);
			
		Иначе //расчетные ставки
		    ЦенаБезНалогов = Окр(ЦенаБезНП*(100-СтНДС)/100, 2, 1);
			ЦенаВключаяНП = Окр(ЦенаБезНП*(100+СтНП)/100, 2, 1);
		КонецЕсли;

		Если Цена <> ЦенаБезНП Тогда
		    Цена = ЦенаБезНП;
		КонецЕсли;

	ИначеЕсли ПорядокХраненияОтпускнойЦены = 3 Тогда //Включая НП
		Если (СтНДС = 20) или (СтНДС = 18) или (СтНДС = 10) или (СтНДС = 0) Тогда //установленные налоговые ставки
		    ЦенаБезНП = Окр(ЦенаВключаяНП*100/(100+СтНП),2,1);
		    ЦенаБезНалогов = Окр(ЦенаБезНП*100/(100+СтНДС),2,1);
			
		Иначе //расчетные ставки
		    ЦенаБезНП = Окр(ЦенаВключаяНП*100/(100+СтНП),2,1);
		    ЦенаБезНалогов = Окр(ЦенаБезНП*(100-СтНДС)/100, 2, 1);
		КонецЕсли;

		Если Цена <> ЦенаВключаяНП Тогда
		    Цена = ЦенаВключаяНП;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // Пересчет()

// ПриВыбореТипаЦены()
//
// Параметры:
//  Нет.
//
// Вызывается из формул элементов диалога:
//  Переключатель "Цены указаны...".
//
Процедура ПриВыбореТипаЦены()
	
	Если ТипЦены = 1  Тогда //в рублях
		Если ПустоеЗначение(Валюта) = 0 Тогда
			Валюта = "";
		КонецЕсли;
		Форма.Валюта.Доступность(0);
		
	Иначе  //в валюте
		Если ПустоеЗначение(Валюта) = 1 Тогда
			Валюта = Константа.ОсновнаяВалюта;
		КонецЕсли;
		Форма.Валюта.Доступность(1);
	КонецЕсли;
	
КонецПроцедуры // ПриВыбореТипаЦен() 

//******************************************************************************
// ПриВыбореПорядкаХраненияОтпускнойЦены()
//
// Параметры:
//  Нет.
//
// Вызывается из формул элементов диалога:
//  Реквизит ПорядокХраненияОтпускнойЦены.
//
Процедура ПриВыбореПорядкаХраненияОтпускнойЦены()
	
	Если ПорядокХраненияОтпускнойЦены = 1 Тогда //Без налогов
		Форма.ЦенаБезНалогов.Доступность(1);
		Форма.ЦенаБезНП.Доступность(0);
		Форма.ЦенаВключаяНП.Доступность(0);
		
		
	ИначеЕсли ПорядокХраненияОтпускнойЦены = 2 Тогда //Без НП
		Форма.ЦенаБезНалогов.Доступность(0);
		Форма.ЦенаБезНП.Доступность(1);
		Форма.ЦенаВключаяНП.Доступность(0);

	ИначеЕсли ПорядокХраненияОтпускнойЦены = 3 Тогда //Включая НП
		Форма.ЦенаБезНалогов.Доступность(0);
		Форма.ЦенаБезНП.Доступность(0);
		Форма.ЦенаВключаяНП.Доступность(1);
	КонецЕсли;
	
	Пересчет();
	
КонецПроцедуры // ПриВыбореПорядкаХраненияОтпускнойЦены()

//******************************************************************************
// ПоКнопкеВыбораДаты()
//
// Параметры:
//
// Возвращаемое значение:
//  Нет.
//
// Вызывается из формул элементов диалога:
//  Кнопка выбора даты.
//
// Описание:
//  Выбирается дата просмотра и редактирования значений периодических реквизитов 
// выбирается по кнопке, чтобы не менялся признак модифицированности формы.
//
Процедура ПоКнопкеВыбораДаты()
	
	глВвестиДатуПериодическихРеквизитов(Контекст, 1);
	
КонецПроцедуры // ПоКнопкеВыбораДаты()

//******************************************************************************
// УправлениеДиалогом()
//
// Параметры:
//  Нет.
//
// Вызывается из формул элементов диалога:
//  Реквизит ТипНоменклатуры.
//
// Описание:
//  В зависимости от типа номенклатуры устанавливается видимость некоторых 
// реквизитов и изменяются подписи.
//
Процедура УправлениеДиалогом(НомерЗакладки = 1)
	
	Если ПустоеЗначение(ТипНоменклатуры) = 1 Тогда
	    ТипНоменклатуры = Перечисление.ТипыНоменклатуры.Товар;
	КонецЕсли;
	
	Если НомерЗакладки = 2 Тогда
	    
		Если Константа.ИспользоватьТипыЦен = Нет Тогда
		    Если ТипНоменклатуры = Перечисление.ТипыНоменклатуры.Товар Тогда
				Форма.ИспользоватьСлой("БезТиповЦен, Общий, БезТиповЦенТ",2);
			Иначе
				Форма.ИспользоватьСлой("БезТиповЦен, Общий",2);
			КонецЕсли;
		Иначе
			Форма.ИспользоватьСлой("Цены, Общий",2);
		КонецЕсли;
		
    ИначеЕсли ТипНоменклатуры = Перечисление.ТипыНоменклатуры.Продукция Тогда
		Форма.ИспользоватьСлой("Основной, Общий, ПлановаяСебестоимость",2);
		
	ИначеЕсли ТипНоменклатуры = Перечисление.ТипыНоменклатуры.Полуфабрикат Тогда
		Форма.ИспользоватьСлой("Основной, Общий, ПлановаяСебестоимость",2);
	
	ИначеЕсли ТипНоменклатуры = Перечисление.ТипыНоменклатуры.Работа Тогда 
		Форма.ИспользоватьСлой("Основной, Общий, ПлановаяСебестоимость",2);
		
	ИначеЕсли (ТипНоменклатуры = Перечисление.ТипыНоменклатуры.Услуга) Тогда
		Форма.ИспользоватьСлой("Основной, Общий, ПлановаяСебестоимость",2);
		
	ИначеЕсли (ТипНоменклатуры = Перечисление.ТипыНоменклатуры.УслугаЕНВД) Тогда
		Форма.ИспользоватьСлой("Основной, Общий, ПлановаяСебестоимость",2);
		
	ИначеЕсли (ТипНоменклатуры = Перечисление.ТипыНоменклатуры.ПосредническаяУслуга) Тогда
		Форма.ИспользоватьСлой("Основной, Общий ",2);

	Иначе //Если ТипНоменклатуры = Перечисление.ТипыНоменклатуры.Товар Тогда
		Форма.ИспользоватьСлой("Основной, Общий, Товар ",2);
	КонецЕсли;
	
	Если (ТипНоменклатуры <> Перечисление.ТипыНоменклатуры.Продукция)
	   и (ТипНоменклатуры <> Перечисление.ТипыНоменклатуры.Полуфабрикат) Тогда
	   	Форма.КнопкаНормативы.Видимость(0);
	   	
	Иначе
	   	Форма.КнопкаНормативы.Видимость(1);
	КонецЕсли;
		
КонецПроцедуры // УправлениеДиалогом()


//******************************************************************************
// ПриВыбореТипаНоменклатуры()
//
// Параметры:
//  Нет.
//
// Вызывается из формул элементов диалога:
//  Реквизит ТипНоменклатуры.
//
// Описание:
//  Здесь описывается процедура.
//
Процедура ПриВыбореТипаНоменклатуры()
	
	Если (ТипНоменклатуры <> ВидНоменклатуры.ТипНоменклатуры)
	   и (ПустоеЗначение(ВидНоменклатуры) = 0) Тогда
        ВидНоменклатуры = ПолучитьПустоеЗначение();
	КонецЕсли;
	
	Если (ТипНоменклатуры <> Перечисление.ТипыНоменклатуры.Товар)
	   и (ТипТовара <> Перечисление.ТипыТоваров.Собственный) Тогда
	    ТипТовара = Перечисление.ТипыТоваров.Собственный;
	КонецЕсли;
		   
	Если ТипНоменклатуры = Перечисление.ТипыНоменклатуры.УслугаЕНВД Тогда
	    Если СтавкаНДС <> глБезНалога("НДС") Тогда
	        СтавкаНДС = глБезНалога("НДС");
		КонецЕсли;
		Если СтавкаНП <> глБезНалога("НП") Тогда
	        СтавкаНП = глБезНалога("НП");
	    КонецЕсли;
	КонецЕсли;
	
	УправлениеДиалогом();
	
КонецПроцедуры // ПриВыбореТипаНоменклатуры()

//******************************************************************************
// ПриВыбореТипаТовара()
//
// Параметры:
//  Нет.
//
// Вызывается из формул элементов диалога:
//  Реквизит ТипТовара.
//
Процедура ПриВыбореТипаТовара()
	
	Если (ТипНоменклатуры = Перечисление.ТипыНоменклатуры.Товар) и
		(ПустоеЗначение(ТипТовара) = 1) Тогда
	    ТипТовара = Перечисление.ТипыТоваров.Собственный;
	КонецЕсли;
	
КонецПроцедуры // ПриВыбореТипаТовара()

//******************************************************************************
//
Процедура ОткрытьНормативы()
             
	Если Выбран() = 0 Тогда
		Предупреждение("Нормативы расходов могут быть только
		               |у записанного элемента номенклатуры.
		               |Запишите элемент и повторите операцию.", 60);
		Возврат;

	КонецЕсли;
	
	ОткрытьФорму("Справочник.НормыРасходов#" + ЗначениеВСтрокуВнутр(ТекущийЭлемент()), ТекущийЭлемент());

КонецПроцедуры // ОткрытьНормативы()

//****************************************************************************** 
// Предопределенная процедура
//
Процедура ВводНового(Копирование)
	
	ИспользоватьДату('01.01.1980');
	Если Копирование = 1 Тогда
		Возврат;
	КонецЕсли;
	
	ТипНоменклатуры = Перечисление.ТипыНоменклатуры.Товар;
	ТипТовара = Перечисление.ТипыТоваров.Собственный;
	СтавкаНДС = глЗначениеПоУмолчанию("ОсновнаяСтавкаНДС");
	СтавкаНП = глЗначениеПоУмолчанию("ОсновнаяСтавкаНП");
	ЕдиницаИзмерения = глЗначениеПоУмолчанию("ОсновнаяЕдиницаИзмерения");
	СтранаПроисхожд = 1;
	Если Константа.ОсновнойВариантОтпускнойЦены = Перечисление.ВариантыОтпускныхЦен.БезНП Тогда
		ПорядокХраненияОтпускнойЦены = 2;
	ИначеЕсли Константа.ОсновнойВариантОтпускнойЦены = Перечисление.ВариантыОтпускныхЦен.ВключаяНП Тогда
		ПорядокХраненияОтпускнойЦены = 3;
	Иначе
		ПорядокХраненияОтпускнойЦены = 1;
	КонецЕсли;
	
КонецПроцедуры // ВводНового()

//******************************************************************************
// Предопределенная процедура
//
Процедура ПриОткрытии()
	Форма.ИспользоватьЗакладки(1);
	Форма.Закладки.ДобавитьЗначение(1,"Основная");
	Форма.Закладки.ДобавитьЗначение(2,"Цены");
	УправлениеДиалогом(1); 
	СохранениеПериодическихРеквизитов(2, "*");
	Если Константа.ИспользоватьТипыЦен = Нет Тогда
		Если ПорядокХраненияОтпускнойЦены = 1 Тогда //Без налогов
			ЦенаБезНалогов = Цена;
		ИначеЕсли ПорядокХраненияОтпускнойЦены = 2 Тогда //Без НП
			ЦенаБезНП = Цена;
		ИначеЕсли ПорядокХраненияОтпускнойЦены = 3 Тогда //Включая НП
			ЦенаВключаяНП = Цена;
		КонецЕсли;
		
		ПриВыбореПорядкаХраненияОтпускнойЦены();
		Если ПустоеЗначение(Валюта) = 0 Тогда
			ТипЦены = 2;
		Иначе
			ТипЦены = 1
		КонецЕсли;
		ПриВыбореТипаЦены();
	Иначе
		ЗаполнитьТаблицуЦен();
	КонецЕсли;
	
КонецПроцедуры // ПриОткрытии()

//******************************************************************************
// Предопределенная процедура
//
Процедура ПриНачалеВыбораЗначения(РеквДиалога, Флаг)
	
    Если (РеквДиалога = "ВидНоменклатуры") и (ТипНоменклатуры.Выбран() = 1) Тогда
        ОтборНоменклатуры = ТипНоменклатуры;
	КонецЕсли;
	
КонецПроцедуры // ПриНачалеВыбораЗначения()

//******************************************************************************
// Предопределенная процедура
//
Процедура ПриВыбореЗакладки(Номер,Значение)
	 УправлениеДиалогом(Номер);
КонецПроцедуры
//******************************************************************************
// Предопределенная процедура
//
Процедура ПриЗаписи()
	
	Если ТипНоменклатуры <> Перечисление.ТипыНоменклатуры.Товар Тогда
		СтранаПроисхожд = 0;
	КонецЕсли;
	Если (ТипНоменклатуры = Перечисление.ТипыНоменклатуры.Товар) Тогда
		СтрСписок = СохранениеПериодическихРеквизитов(5);
		СохранениеПериодическихРеквизитов(5, СтрЗаменить(СтрСписок,",ПлановаяСебестоимость",""));
	КонецЕсли;
	СтатусВозврата(глБухЗаписьПериодическихРеквизитов(Контекст));
	
КонецПроцедуры // ПриЗаписи()
//******************************************************************************
// Предопределенная процедура
//
Процедура ПриЗакрытии()
	
	// При вводе ручной проводки, в которой участвует покупной 
	// товар, сумма проводки рассчитывается автоматически
	// как произведение плановой себестоимости на количество,
	// указанное в проводке.
	// По этой причине для покупных товаров необходимо непосредственно
	// установить плановую стоимость.
	Если (ТипНоменклатуры = Перечисление.ТипыНоменклатуры.Товар)
	   и (ПлановаяСебестоимость <> Себестоимость) Тогда
	    Номенкл = СоздатьОбъект("Справочник.Номенклатура");
		Если Номенкл.НайтиЭлемент(ТекущийЭлемент()) = 1 Тогда
		    Номенкл.ПлановаяСебестоимость.Установить('01.01.1980', Себестоимость);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ПриЗакрытии()