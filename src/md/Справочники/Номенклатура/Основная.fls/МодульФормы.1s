////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ
// 
Перем ТаблицаПечФорм;  // список печатных форм документа
Перем НомерТекущейФормы;
Перем СписокНедоступныхКолонок;
Перем ИдентификаторФормы;
Перем ПолныйСписокКолонок;
Перем БухИт;
Перем Сч43, Сч41_1, Сч41_3, Сч41_4, Сч004;

//******************************************************************************
// ПоказатьСебестоимость()
// 
// Возвращаемое значение:
//  Число - себестоимость номенклатуры.
//
// Вызывается из формул элементов диалога:
//  Колонка "Себест."
//
// Описание:
//  Для продукции возвращает значение периодического реквизита "Плановая 
// "себестоимость", для товаров учетную цену - реквизит "Себестоимость".
//
Функция ПоказатьСебестоимость()
	
	Если ТекущийЭлемент().ТипНоменклатуры = Перечисление.ТипыНоменклатуры.Товар Тогда
	    Если Константа.ИспользоватьТипыЦен = Нет Тогда
	        Возврат ФорматС(Себестоимость);
		Иначе
			Возврат "";
	    КонецЕсли;
				
	ИначеЕсли (ТекущийЭлемент().ТипНоменклатуры = Перечисление.ТипыНоменклатуры.Продукция) или 
			  (ТекущийЭлемент().ТипНоменклатуры = Перечисление.ТипыНоменклатуры.Полуфабрикат) или 
			  (ТекущийЭлемент().ТипНоменклатуры = Перечисление.ТипыНоменклатуры.Услуга) или
			  (ТекущийЭлемент().ТипНоменклатуры = Перечисление.ТипыНоменклатуры.УслугаЕНВД) или
			  (ТекущийЭлемент().ТипНоменклатуры = Перечисление.ТипыНоменклатуры.Работа) Тогда
		Возврат ФорматС(ПлановаяСебестоимость);
		
	Иначе
		Возврат "";
	КонецЕсли;
	
КонецФункции // ПоказатьСебестоимость()

//******************************************************************************
// ИнформационнаяСтрока()
//
// Параметры:
//  Нет.
//
// Возвращаемое значение:
//  Строка - сведения о номенклатурной единице.
//
// Вызывается из формул элементов диалога:
//  Текст под списком.
//
Функция ИнформационнаяСтрока()
	
	Перем Стр;

	Стр = "";
	Если ТекущийЭлемент().Выбран() = 0 Тогда
	ИначеЕсли ТекущийЭлемент().ЭтоГруппа() = 0 Тогда
		СчетУчета = "";
		Если ТекущийЭлемент().ТипНоменклатуры = Перечисление.ТипыНоменклатуры.Продукция Тогда
			СчетУчета = Сч43;
		ИначеЕсли ТекущийЭлемент().ТипНоменклатуры = Перечисление.ТипыНоменклатуры.Товар Тогда
			Если ТекущийЭлемент().ТипТовара = Перечисление.ТипыТоваров.Тара Тогда
				СчетУчета = Сч41_3;
			ИначеЕсли ТекущийЭлемент().ТипТовара = Перечисление.ТипыТоваров.ПокупныеИзделия Тогда
				СчетУчета = Сч41_4;
			ИначеЕсли ТекущийЭлемент().ТипТовара = Перечисление.ТипыТоваров.НаКомиссии Тогда
				СчетУчета = Сч004;
			Иначе //Если ТекущийЭлемент().ТипТовара = Перечисление.ТипыТоваров.Собственный Тогда
				СчетУчета = Сч41_1;
			КонецЕсли;
		КонецЕсли;

		Если ПустоеЗначение(СчетУчета) = 1 Тогда
		ИначеЕсли КонМесяца(ИспользоватьДату()) > КонецРассчитанногоПериодаБИ() Тогда
			Стр = "На " + КонМесяца(ИспользоватьДату()) + " бухгалтерские итоги не рассчитаны!"+РазделительСтрок+
			"Расчет итогов выполняется в режиме"+РазделительСтрок+
			"""Операции - Управление бухгалтерскими итогами"".";

		Иначе
			Стр = СчетУчета.Наименование + ": " + БухИт.СКД(СчетУчета,"К",,ТекущийЭлемент()) +
				" " +ТекущийЭлемент().ЕдиницаИзмерения + РазделительСтрок +
				"Данные актуальны на конец дня " + КонМесяца(ИспользоватьДату());
		КонецЕсли;
	КонецЕсли;

	Возврат Стр;
	
КонецФункции // ИнформационнаяСтрока()

//******************************************************************************
// ТипЦеныВСписке()
//
// Параметры:
//  Нет.
//
// Возвращаемое значение:
//  Здесь описывается возвращаемое значение.
//
// Вызывается из формул элементов диалога:
//  Нет.
//
// Описание:
//  Здесь описывается функция.
//
Функция ТипЦеныВСписке()
	
	Если ПорядокХраненияОтпускнойЦены = 1 Тогда
	    Тип = "Без налогов";
		
	ИначеЕсли ПорядокХраненияОтпускнойЦены = 2 Тогда
		Тип = "Без НП";
		
	ИначеЕсли ПорядокХраненияОтпускнойЦены = 3 Тогда
		Тип = "Включая НП";
	КонецЕсли;
	 
	Возврат Тип;
	
КонецФункции // ТипЦеныВСписке()

//******************************************************************************
// Отчет()
//
// Параметры:
//  Нет.
//
// Вызывается из формул элементов диалога:
//  Нет.
//
// Описание:
//  Вызывается стандартный отчет "Анализ субконто".
//
Процедура Отчет()
	
	Расшифровка = СоздатьОбъект("СписокЗначений");
	Расшифровка.Установить("Отчет", "АнализСубконто");
	Расшифровка.Установить("РазделительУчета", БухИтоги.ИспользоватьРазделительУчета());
	Расшифровка.Установить("Дата1", НачМесяца(РабочаяДата()));
	Расшифровка.Установить("Дата2", КонМесяца(РабочаяДата()));
	Расшифровка.Установить("ВидСубконто1", ВидыСубконто.Номенклатура);
	Если ТекущийЭлемент().Выбран() = 1 Тогда
		Расшифровка.Установить("Субконто1", ТекущийЭлемент());
		Если ТекущийЭлемент().ЭтоГруппа() = 1 Тогда
			Расшифровка.Установить("ПоГруппам1", 1);
			Расшифровка.Установить("ОтборСубконто1", 1);
		Иначе
			Расшифровка.Установить("ПоГруппам1", 0);
			Расшифровка.Установить("ОтборСубконто1", 2);
		КонецЕсли;
	КонецЕсли;
	Расшифровка.Установить("ДанныеПоСубсчетам", 1);

	глРасшифровка = Расшифровка;
	глОбновить = 2;
	глТаблица = "";
	глФлагРасшифровки = 1;
	ОткрытьФорму("Отчет.АнализСубконто");
	глФлагРасшифровки = 0;
	глОбновить = 0;
	
КонецПроцедуры // Отчет()

//******************************************************************************
// ПечатьСписка()
//
// Параметры:
//  Нет.
//
// Вызывается из формул элементов диалога:
//  Кнопка "Печать списка".
//
// Описание:
//  Вызов отчета "Список номенклатуры".
//
Процедура ПечатьСписка()
	
	фИмя = "";
	фЗнач = "";
	глРасшифровка = СоздатьОбъект("СписокЗначений");
	глРасшифровка.Установить("ВыбРодитель",ИспользоватьРодителя());
	ПолучитьОтбор(фИмя,фЗнач);
	Если фИмя = "" Тогда
		глРасшифровка.Установить("ТекФильтр", 2);
		глРасшифровка.Установить("ФильтроватьПо","");	    
	Иначе
		глРасшифровка.Установить("ТекФильтр", 3);
		глРасшифровка.Установить("ФильтроватьПо",фЗнач);	  
	КонецЕсли;
	Если (Сортировка()="Код") Тогда
		глРасшифровка.Установить("Сортировать", 1);            
	ИначеЕсли (Сортировка()="Наименование") Тогда
		глРасшифровка.Установить("Сортировать", 2);            
	Иначе
		глРасшифровка.Установить("Сортировать", 2);
	КонецЕсли;			
	глФлагРасшифровки = 1;
	ОткрытьФорму("Отчет.СписокНоменклатуры");
	глФлагРасшифровки = 0;
	
КонецПроцедуры // ПечатьСписка()

//******************************************************************************
// ПоКнопкеПечать()
// 
// Параметры: 
//	Нет
//
// Описание:
// 	Вызывается по кнопке "Печать"  
// 	
Процедура ПоКнопкеПечать(СразуНаПринтер = 0,КолЭкз = 1)
	
	Если  ПустоеЗначение(НомерТекущейФормы) = 1  Тогда
		НомерТекущейФормы = 1;
		Форма.кнПечать.Заголовок(ТаблицаПечФорм.ПолучитьЗначение(НомерТекущейФормы, "Кнопка"));
	КонецЕсли;
	
	Если НомерТекущейФормы = 1  Тогда
		Отчет();
		
	ИначеЕсли НомерТекущейФормы = 2  Тогда
		ПечатьСписка();
		
	Иначе
		Параметры = СоздатьОбъект("СписокЗначений");
		Параметры.ДобавитьЗначение(Контекст, "Контекст");
		Параметры.ДобавитьЗначение(СразуНаПринтер, "Устройство");
		Параметры.ДобавитьЗначение(КолЭкз, "КоличествоКопий");
		
		ОткрытьФорму("Отчет", Параметры, глКаталогПечФорм+ТаблицаПечФорм.ПолучитьЗначение(НомерТекущейФормы,"Файл"));
	КонецЕсли;
	
КонецПроцедуры // ПоКнопкеПечать()

//******************************************************************************
// ПоКнопкеВыборПечатнойФормы()
//
// Параметры:
//  нет.    
//
// Возвращаемое значение:
//  нет.
//
// Описание:
//  - открывает список для выбора способа печати. 
//  - формирует таблицу по выбранному способу.
//
Процедура ПоКнопкеВыборПечатнойФормы()
	
    ВыбНомер = глВыборПечатнойФормы("Справочник." + Вид(), ТаблицаПечФорм);
	Если ВыбНомер > 0 Тогда
		НомерТекущейФормы = ВыбНомер;
		Форма.кнПечать.Заголовок(ТаблицаПечФорм.ПолучитьЗначение(НомерТекущейФормы, "Кнопка"));
		ПоКнопкеПечать();
	КонецЕсли;

КонецПроцедуры // ПоКнопкеВыборПечатнойФормы()

//******************************************************************************
// ПоКнопкеВыбораДаты()
//
// Параметры:
//
// Возвращаемое значение:
//  Нет.
//
// Вызывается из формул элементов диалога:
//  Кнопка выбора даты.
//
// Описание:
//  Выбирается дата просмотра и редактирования значений периодических реквизитов 
// выбирается по кнопке, чтобы не менялся признак модифицированности формы.
//
Процедура ПоКнопкеВыбораДаты()
	
	ТекИспользоватьДату = ИспользоватьДату();
	глВвестиДатуПериодическихРеквизитов(Контекст, 0);
	Если ИспользоватьДату() > КонецРассчитанногоПериодаБИ() Тогда
		Предупреждение("За выбранный период итоги не рассчитаны!"+РазделительСтрок+
		               "Расчет итогов выполняется в режиме"+РазделительСтрок+
					   """Операции - Управление бухгалтерскими итогами"".");
		ИспользоватьДату(ТекИспользоватьДату);
		
	Иначе
		БухИт.ПериодМ(ИспользоватьДату());
	КонецЕсли;
		
КонецПроцедуры // ПоКнопкеВыбораДаты()

//******************************************************************************
// ОткрытьНормативы()
//
// Параметры:
//  Нет.
//
// Вызывается из формул элементов диалога:
//  - кнопка "Нормативы".
//
// Описание:
//  Открывает справочник нормативов продукции.
//
Процедура ОткрытьНормативы()

	Если (ТекущийЭлемент().Выбран() = 0) Тогда
	
		Предупреждение("Установите курсор на элемент справочника.", 60);
		Возврат;
	
	КонецЕсли;
	
	Если (ТекущийЭлемент().ЭтоГруппа() = 1) Тогда
	
		Предупреждение("Установите курсор на элемент справочника, а не на группу.", 60);
		Возврат;
	
	КонецЕсли;
	
	Если (ТекущийЭлемент().ТипНоменклатуры <> Перечисление.ТипыНоменклатуры.Продукция)
	   и (ТекущийЭлемент().ТипНоменклатуры <> Перечисление.ТипыНоменклатуры.Полуфабрикат) Тогда
	   	
	   	Предупреждение("Нормативы сущетствуют только для продукции или  полуфабриката!",60);
		Возврат;
	    
	КонецЕсли;

	ОткрытьФорму("Справочник.НормыРасходов#НФСО", ТекущийЭлемент());

КонецПроцедуры // ОткрытьНормативы()

//******************************************************************************
// УправлениеДиалогом()
//
// Параметры:
//  Нет
//
// Описание:
//  Управляет доступностью колонок
//
Процедура УправлениеДиалогом()
	
	Для Сч = 1 По СписокНедоступныхКолонок.РазмерСписка() Цикл
		Форма.ПолучитьАтрибут(СписокНедоступныхКолонок.ПолучитьЗначение(Сч)).Доступность(0);
	КонецЦикла;
	
КонецПроцедуры // УправлениеДиалогом()

//******************************************************************************
// Предопределенная процедура
//
Процедура ПриОткрытии()
	
	Сч43 = СчетПоКоду("43");
	Сч41_1 = СчетПоКоду("41.1");
	Сч41_3 = СчетПоКоду("41.3");
	Сч41_4 = СчетПоКоду("41.4");
	Сч004 = СчетПоКоду("004");

	БухИт = СоздатьОбъект("БухгалтерскиеИтоги");
	БухИт.ПериодМ(ИспользоватьДату());
	
	Если ТипЗначенияСтр(Форма.Параметр) = "Перечисление" Тогда
		УстановитьОтбор("ТипНоменклатуры", Форма.Параметр);
	КонецЕсли;
	
	Если Константа.ИспользоватьТипыЦен = Нет Тогда
	    Форма.кнУстановкаЦен.Видимость(0);
	Иначе
		Форма.кнУстановкаЦен.Видимость(1);
	КонецЕсли;
	
	РедактироватьВДиалоге(1,1);
	
	// Заполним таблицу для выбора печатной формы
	НомерТекущейФормы = глУстановкаКнопкиПечать(Контекст, "Справочник." + Вид(),ТаблицаПечФорм);
	
	// Управление видимостью колонок	
	глУстановитьВидимостьКолонок(Контекст, ИдентификаторФормы, ПолныйСписокКолонок, 1);
	
	СохранениеПериодическихРеквизитов(0);
	
КонецПроцедуры // ПриОткрытии()

//******************************************************************************
// Предопределенная процедура
//
Процедура ПриРедактированииНовойСтроки()
	
	УправлениеДиалогом();
	
	Копирование = ?(ПустоеЗначение(Наименование) = 1, 0, 1);
	Если Копирование = 1 Тогда
	    Возврат;
	КонецЕсли;
	
	ТипНоменклатуры = Перечисление.ТипыНоменклатуры.Товар;
	ТипТовара = Перечисление.ТипыТоваров.Собственный;
	СтавкаНДС = глЗначениеПоУмолчанию("ОсновнаяСтавкаНДС");
	СтавкаНП = глЗначениеПоУмолчанию("ОсновнаяСтавкаНП");
	СтранаПроисхожд = 1;
	ЕдиницаИзмерения = глЗначениеПоУмолчанию("ОсновнаяЕдиницаИзмерения");
	Если Константа.ОсновнойВариантОтпускнойЦены = Перечисление.ВариантыОтпускныхЦен.БезНП Тогда
		ПорядокХраненияОтпускнойЦены = 2;
	ИначеЕсли Константа.ОсновнойВариантОтпускнойЦены = Перечисление.ВариантыОтпускныхЦен.ВключаяНП Тогда
		ПорядокХраненияОтпускнойЦены = 3;
	Иначе
		ПорядокХраненияОтпускнойЦены = 1;
	КонецЕсли;
	
КонецПроцедуры // ПриРедактированииНовойСтроки()

//******************************************************************************
// Предопределенная процедура
//
Процедура ПриНачалеРедактированияСтроки()
	
	УправлениеДиалогом();
	
КонецПроцедуры // ПриНачалеРедактированияСтроки()

////////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ
//
ИдентификаторФормы	=	"Справочник_Номенклатура_ФормаСписка_Основная";

ТаблицаПечФорм		= СоздатьОбъект("ТаблицаЗначений");
ТаблицаПечФорм.НоваяКолонка("Название","Строка",,,,30);
ТаблицаПечФорм.НоваяКолонка("Файл","Строка",,,"Файл",10);
ТаблицаПечФорм.НоваяКолонка("Кнопка","Строка",,,,10); 
ТаблицаПечФорм.НоваяКолонка("ФайлОписания","Строка");

// добавим информацию о встроенной форме
ТаблицаПечФорм.НоваяСтрока();
ТаблицаПечФорм.Название     = "Анализ субконто ""Номенклатура""";
ТаблицаПечФорм.Кнопка       = "Анализ";

ТаблицаПечФорм.НоваяСтрока();
ТаблицаПечФорм.Название     = "Печать списка";
ТаблицаПечФорм.Кнопка       = "Список";

// Список колонок видимостью которых будем управлять
ПолныйСписокКолонок = СоздатьОбъект("СписокЗначений");
ПолныйСписокКолонок.ДобавитьЗначение("Код", "Код");
ПолныйСписокКолонок.ДобавитьЗначение("Наименование", "Наименование");
ПолныйСписокКолонок.ДобавитьЗначение("ПолнНаименование", "Полное наименование");
ПолныйСписокКолонок.ДобавитьЗначение("ТипНоменклатуры", "Тип номенклатуры");
ПолныйСписокКолонок.ДобавитьЗначение("ВидНоменклатуры", "Вид номенклатуры (редактируется в форме элемента)");
ПолныйСписокКолонок.ДобавитьЗначение("ЕдиницаИзмерения", "Единица измерения");
ПолныйСписокКолонок.ДобавитьЗначение("СебестоимостьТекст", "Себестоимость (учетная цена) (редактируется в форме элемента)");
ПолныйСписокКолонок.ДобавитьЗначение("СтавкаНДС", "Ставка НДС (редактируется в форме элемента)");
ПолныйСписокКолонок.ДобавитьЗначение("СтавкаНП", "Ставка НП (редактируется в форме элемента)");
Если Константа.ИспользоватьТипыЦен = Нет Тогда
    ПолныйСписокКолонок.ДобавитьЗначение("НалогиТекст", "Налоги (редактируется в форме элемента)");
	ПолныйСписокКолонок.ДобавитьЗначение("Цена", "Цена");
	ПолныйСписокКолонок.ДобавитьЗначение("Валюта", "Валюта");
Иначе
	Форма.НалогиТекст.Видимость(0);
	Форма.Цена.Видимость(0);
	Форма.Валюта.Видимость(0);
КонецЕсли;
ПолныйСписокКолонок.ДобавитьЗначение("СтранаТекст", "Страна происхождения (редактируется в форме элемента)"); 

//	При первом запуске, пока пользователь не настроил видимость колонок,
//  будут видимы только колонки "Код","Наименование"
ПолныйСписокКолонок.Пометка(1,	1);
ПолныйСписокКолонок.Пометка(2, 	1);

// Список недоступных для редактирования колонок
СписокНедоступныхКолонок = СоздатьОбъект("СписокЗначений");
СписокНедоступныхКолонок.ДобавитьЗначение("СебестоимостьТекст");
СписокНедоступныхКолонок.ДобавитьЗначение("ВидНоменклатуры");
СписокНедоступныхКолонок.ДобавитьЗначение("СтавкаНДС"); 
СписокНедоступныхКолонок.ДобавитьЗначение("СтавкаНП");
Если Константа.ИспользоватьТипыЦен = Нет Тогда
    СписокНедоступныхКолонок.ДобавитьЗначение("НалогиТекст");
КонецЕсли;
СписокНедоступныхКолонок.ДобавитьЗначение("СтранаТекст");