////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ
//
Перем ТаблицаПечФорм;  // список печатных форм документа
Перем НомерТекущейФормы;
Перем КонтекстФормыДокумента;
Перем СписокНедоступныхКолонок;
Перем ИдентификаторФормы;
Перем ПолныйСписокКолонок;
Перем БухИт, Сч21, Сч43, Сч41_1, Сч41_2, Сч41_3, Сч41_4, Сч45, Сч004, СчКТР, СчКМС;
Перем СчетУчета;
Перем ВидДвижения;
Перем Валюта, Курс;

//******************************************************************************
// ПоказатьСебестоимость()
// 
// Возвращаемое значение:
//  Число - себестоимость номенклатуры.
//
// Вызывается из формул элементов диалога:
//  Колонка "Себест."
//
// Описание:
//  Для продукции возвращает значение периодического реквизита "Плановая 
// "себестоимость", для товаров учетную цену - реквизит "Себестоимость".
//
Функция ПоказатьСебестоимость()
	
	Если ТекущийЭлемент().ТипНоменклатуры = Перечисление.ТипыНоменклатуры.Товар Тогда
	    Если Константа.ИспользоватьТипыЦен = Нет Тогда
	        Возврат ФорматС(Себестоимость);
		Иначе
			Возврат "";
	    КонецЕсли;
		
	ИначеЕсли (ТекущийЭлемент().ТипНоменклатуры = Перечисление.ТипыНоменклатуры.Продукция) или 
			  (ТекущийЭлемент().ТипНоменклатуры = Перечисление.ТипыНоменклатуры.Полуфабрикат) или 
			  (ТекущийЭлемент().ТипНоменклатуры = Перечисление.ТипыНоменклатуры.Услуга) или
			  (ТекущийЭлемент().ТипНоменклатуры = Перечисление.ТипыНоменклатуры.УслугаЕНВД) или
			  (ТекущийЭлемент().ТипНоменклатуры = Перечисление.ТипыНоменклатуры.Работа) Тогда
		Возврат ФорматС(ПлановаяСебестоимость);
		
	Иначе
		Возврат "";
	КонецЕсли;
	
КонецФункции // ПоказатьСебестоимость()

//******************************************************************************
Функция ВернутьЦену()
	Если Форма.КолонкаЦены.Видимость() = 0 Тогда
		Форма.ИспользоватьСлой("ТипЦен", 0);
		Возврат "";
	КонецЕсли;
	Если Константа.ИспользоватьТипыЦен = Нет Тогда
		Форма.ИспользоватьСлой("ТипЦен", 0);
	Иначе
		Форма.ИспользоватьСлой("ТипЦен", 1);
	КонецЕсли;
	Если ТекущийЭлемент().Выбран() = 0 Тогда
	    Возврат "";
	КонецЕсли;
	Если ТекущийЭлемент().ЭтоГруппа() = 1 Тогда
	    Возврат "";
	КонецЕсли;
	Если (ТипЦен.Выбран() = 1) или (Константа.ИспользоватьТипыЦен = Нет) Тогда
	    ЗнЦены = глПолучитьЦену(КонтекстФормыДокумента,ТекущийЭлемент(),ТипЦен,КонтекстФормыДокумента.ДатаДок, Валюта, Курс);
		Возврат Формат(ЗнЦены,"Ч15.2.,");
	КонецЕсли;
	Возврат "";
КонецФункции
//******************************************************************************
// ОстатокНаСкладе(РасчетИзКолонки=1)
//
// Параметры:
//  РасчетИзКолонки - Число 1.0;
//					  1 - расчет производится для графы списка "Остаток",
//					  0 - расчет производится информационной строки.
//
// Возвращаемое значение:
//  Строка - остаток товара (продукции) по данным бухгалтерского учета.
//
// Вызывается из формул элементов диалога:
//  Вызывается из текстовой строки или колонки, в зависимости от того, где
// показываются остатки.
//
Функция ОстатокНаСкладе(РасчетИзКолонки=1)
	
    Остаток = 0;
	Если (РасчетИзКолонки = 0) или ((РасчетИзКолонки = 1) и (Форма.КолонкаОстатка.Видимость() = 1)) Тогда
		Если (КонМесяца(КонтекстФормыДокумента.ДатаДок) <= КонецРассчитанногоПериодаБИ()) 
			и (ТекущийЭлемент().Выбран() = 1) Тогда
			Если ВидДвижения <> 2 Тогда  // не отгруженый без перехода права собственности товар
				Если ТекущийЭлемент().ТипНоменклатуры = Перечисление.ТипыНоменклатуры.Товар Тогда
					Если ТекущийЭлемент().ТипТовара = Перечисление.ТипыТоваров.Тара Тогда
						СчетУчета = Сч41_3;
						Форма.ИспользоватьСлой("Комитент, Отгружено45Счет", 0);
						Форма.ИспользоватьСлой("Склад", 1);
						
					ИначеЕсли ТекущийЭлемент().ТипТовара = Перечисление.ТипыТоваров.ПокупныеИзделия Тогда
						СчетУчета = Сч41_4;
						Форма.ИспользоватьСлой("Комитент, Отгружено45Счет", 0);
						Форма.ИспользоватьСлой("Склад", 1);
						
					ИначеЕсли ТекущийЭлемент().ТипТовара = Перечисление.ТипыТоваров.НаКомиссии Тогда
						
						Если ВидДвижения = 1 Тогда // розница
							СчетУчета = СчКТР;
							
						Иначе
							СчетУчета = Сч004;
						КонецЕсли;
						Форма.ИспользоватьСлой("Склад, Отгружено45Счет", 0);
						Форма.ИспользоватьСлой("Комитент", 1);
						
					Иначе //Если ТекущийЭлемент().ТипТовара = Перечисление.ТипыТоваров.Собственный Тогда
						Если ВидДвижения = 1 Тогда
						    СчетУчета = Сч41_2;
						Иначе
							СчетУчета = Сч41_1;
						КонецЕсли;
						Форма.ИспользоватьСлой("Комитент, Отгружено45Счет", 0);
						Форма.ИспользоватьСлой("Склад", 1);
					КонецЕсли;
					
				ИначеЕсли ТекущийЭлемент().ТипНоменклатуры = Перечисление.ТипыНоменклатуры.Продукция Тогда
					СчетУчета = Сч43;
					Форма.ИспользоватьСлой("Комитент, Отгружено45Счет", 0);
					Форма.ИспользоватьСлой("Склад", 1);
					
				ИначеЕсли ТекущийЭлемент().ТипНоменклатуры = Перечисление.ТипыНоменклатуры.Полуфабрикат Тогда
					СчетУчета = Сч21;
					Форма.ИспользоватьСлой("Комитент, Отгружено45Счет", 0);
					Форма.ИспользоватьСлой("Склад", 1);
					
				Иначе
					СчетУчета = "";
					Форма.ИспользоватьСлой("Склад, Комитент, Отгружено45Счет", 0);
				КонецЕсли;	
				
			Иначе // отгруженый без перехода права собственности товар
				Если (ТекущийЭлемент().ТипНоменклатуры = Перечисление.ТипыНоменклатуры.Товар)
			 	 или (ТекущийЭлемент().ТипНоменклатуры = Перечисление.ТипыНоменклатуры.Продукция)
			 	 или (ТекущийЭлемент().ТипНоменклатуры = Перечисление.ТипыНоменклатуры.Полуфабрикат) Тогда
					СчетУчета = Сч45;
					Если ТекущийЭлемент().ТипНоменклатуры = Перечисление.ТипыНоменклатуры.Товар Тогда
						Если ТекущийЭлемент().ТипТовара = Перечисление.ТипыТоваров.НаКомиссии Тогда
							СчетУчета = СчКМС;
						КонецЕсли;
					КонецЕсли;
					
					Форма.ИспользоватьСлой("Склад, Комитент", 0);
					Форма.ИспользоватьСлой("Отгружено45Счет", 1);
					
				Иначе
					СчетУчета = "";
					Форма.ИспользоватьСлой("Склад, Комитент, Отгружено45Счет", 0);
				КонецЕсли;
			КонецЕсли;

			Если ПустоеЗначение(СчетУчета) = 0 Тогда
				Если СчетУчета = Сч004 Тогда
					Если Комитент.Выбран() = 1 Тогда
						Если ДоговорКомиссии.Выбран() = 1 Тогда
							Остаток = БухИт.СКД(СчетУчета, "К",, ТекущийЭлемент(), Комитент, ДоговорКомиссии)
									- БухИт.СКД(СчКТР, "К",, ТекущийЭлемент(),, ДоговорКомиссии)
									- БухИт.СКД(СчКМС, "К",, ТекущийЭлемент(), ДоговорКомиссии);
									
						Иначе
							Остаток = БухИт.СКД(СчетУчета, "К",, ТекущийЭлемент(), Комитент);
						КонецЕсли;
						
					Иначе
						Остаток = БухИт.СКД(СчетУчета, "К",, ТекущийЭлемент())
								- БухИт.СКД(СчКТР, "К",, ТекущийЭлемент())
								- БухИт.СКД(СчКМС, "К",, ТекущийЭлемент());
					КонецЕсли;
							
				ИначеЕсли СчетУчета = СчКМС Тогда
					Если Договор.Выбран() = 1 Тогда
						Остаток = БухИт.СКД(СчетУчета, "К",, ТекущийЭлемент(), , Договор);
						
					Иначе
						Остаток = БухИт.СКД(СчетУчета, "К",, ТекущийЭлемент());
					КонецЕсли;
					
				ИначеЕсли СчетУчета = СчКТР Тогда
					Если ДоговорКомиссии.Выбран() = 1 Тогда
						Остаток = БухИт.СКД(СчетУчета, "К",, ТекущийЭлемент(), МестоХранения, ДоговорКомиссии);
								
					Иначе
						Остаток = БухИт.СКД(СчетУчета, "К",, ТекущийЭлемент(), МестоХранения,);
					КонецЕсли;
				
				ИначеЕсли СчетУчета = Сч45 Тогда
					Если Контрагент.Выбран() = 1 Тогда
			 			Если Договор.Выбран() = 1 Тогда
			 				Остаток = БухИт.СКД(Сч45, "К",, Контрагент, Договор, ТекущийЭлемент());
			 			Иначе
			 				Остаток = БухИт.СКД(Сч45, "К",, Контрагент, , ТекущийЭлемент());
			 			КонецЕсли;
			 		Иначе
			 			Остаток = БухИт.СКД(Сч45, "К",, , , ТекущийЭлемент());
			 		КонецЕсли;
					
					
				Иначе
					Если МестоХранения.Выбран() = 1  Тогда
						Остаток = БухИт.СКД(СчетУчета, "К",, ТекущийЭлемент(), МестоХранения);
					Иначе
						Остаток = БухИт.СКД(СчетУчета, "К",, ТекущийЭлемент());
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
    
	Возврат СокрЛ(Формат(Остаток, "Ч15.3."));
	
КонецФункции // ОстатокНаСкладе()

//******************************************************************************
// СкладДокумента()
//
// Параметры:
//  Нет.
//
// Возвращаемое значение:
//  Строка - предупреждающее сообщение о том, что склад в форме выбора и 
//           документе расходятся.
//
// Вызывается из формул элементов диалога:
//  Из текста под реквизитом "Склад".
//
Функция СкладДокумента()
	
	Если Метаданные.Документ(КонтекстФормыДокумента.Вид()).РеквизитШапки("МестоХранения").Выбран() = 1 Тогда
		Если КонтекстФормыДокумента.МестоХранения <> МестоХранения Тогда
			Возврат "Склад в документе: " + КонтекстФормыДокумента.МестоХранения.Наименование + "!";
		Иначе
			Возврат "";
		КонецЕсли;
	Иначе
		Возврат "";
	КонецЕсли;
	
КонецФункции // СкладДокумента() 

//******************************************************************************
// ТипЦенДокумента()
//
// Параметры:
//  Нет.
//
// Возвращаемое значение:
//  Строка - предупреждающее сообщение о том, что склад в форме выбора и 
//           документе расходятся.
//
// Вызывается из формул элементов диалога:
//  Из текста под реквизитом "Тип цен".
//
Функция ТипЦенДокумента()
	Если Константа.ИспользоватьТипыЦен = Нет Тогда
		Возврат "";
	КонецЕсли;
	Если Метаданные.Документ(КонтекстФормыДокумента.Вид()).РеквизитШапки("ТипЦен").Выбран() = 1 Тогда
		Если КонтекстФормыДокумента.ТипЦен <> ТипЦен Тогда
			Возврат "Тип цен в документе: " + КонтекстФормыДокумента.ТипЦен.Наименование + "!";
		Иначе
			Возврат "";
		КонецЕсли;
	Иначе
		Возврат "";
	КонецЕсли;
	
КонецФункции // ТипЦенДокумента() 
//******************************************************************************
// ИнформацияОДокументе()
//
// Параметры:
//  Нет.
//
// Возвращаемое значение:
//  Строка - сведения о документе подбора.
//
// Вызывается из формул элементов диалога:
//  Текст под списком номенклатуры.
//
Функция ИнформацияОДокументе()
	Перем Стр;
	Если ТипЦен.Выбран() = 0 Тогда
	    Возврат "";
	КонецЕсли;
	Стр = "Цены указаны в "+?(ПустоеЗначение(Валюта) = 1, "рублях", "валюте " + Валюта);
	Если (КонтекстФормыДокумента.Вид() = "РасходнаяНакладная") или
	(КонтекстФормыДокумента.Вид() = "РеализацияОтгруженнойПродукции") или
	(КонтекстФормыДокумента.Вид() = "ОказаниеУслуг") или
	(КонтекстФормыДокумента.Вид() = "Счет") или
	(КонтекстФормыДокумента.Вид() = "ПродажаВРозницу") или
	(КонтекстФормыДокумента.Вид() = "ВыполнениеЭтапаРабот") или
	(КонтекстФормыДокумента.Вид() = "ПоступлениеТоваров") Тогда
		Если КонтекстФормыДокумента.ВариантРасчетаНалогов.Выбран() = 1 Тогда
			СуммаВключаетНДС = КонтекстФормыДокумента.ВариантРасчетаНалогов.СуммаВключаетНДС; 
			СуммаВключаетНП = КонтекстФормыДокумента.ВариантРасчетаНалогов.СуммаВключаетНП;
		ИначеЕсли Константа.ОсновнойВариантРасчетаНалоговОтгрузки.Выбран() = 1 Тогда
			СуммаВключаетНДС = Константа.ОсновнойВариантРасчетаНалоговОтгрузки.СуммаВключаетНДС; 
			СуммаВключаетНП = Константа.ОсновнойВариантРасчетаНалоговОтгрузки.СуммаВключаетНП;
		Иначе
			СуммаВключаетНДС = 0; 
			СуммаВключаетНП = 0;
		КонецЕсли;
	ИначеЕсли  (КонтекстФормыДокумента.Вид() = "ИнвентаризацияТМЦ") Тогда
		СуммаВключаетНДС = 1; 
		СуммаВключаетНП = 1; 
	Иначе
		СуммаВключаетНДС = ТипЦен.ЦенаВклНДС;  
		СуммаВключаетНП = ТипЦен.ЦенаВклНП;
	КонецЕсли;  
	ПорядокХраненияОтпускнойЦены = 1 + СуммаВключаетНДС + СуммаВключаетНП;
	Если ПорядокХраненияОтпускнойЦены = 1 Тогда
	    Тип = "без налогов";
	ИначеЕсли ПорядокХраненияОтпускнойЦены = 2 Тогда
		Тип = "включая НДС";
	ИначеЕсли ПорядокХраненияОтпускнойЦены = 3 Тогда
		Тип = "включая НДС, включая НП";
	КонецЕсли;
	Стр = Стр + " " + Тип;
	Возврат Стр;
КонецФункции // ИнформацияОДокументе()
//******************************************************************************
// ИнформационнаяСтрока()
//
// Параметры:
//  Нет.
//
// Возвращаемое значение:
//  Строка - сведения о номенклатурной единице.
//
// Вызывается из формул элементов диалога:
//  Текст под списком номенклатуры.
//
Функция ИнформационнаяСтрока()
	
	Перем Стр;

	Стр = "";
	Если КонМесяца(КонтекстФормыДокумента.ДатаДок) > КонецРассчитанногоПериодаБИ() Тогда
		Стр = "На " + Формат(КонтекстФормыДокумента.ДатаДок, "Д (0)ДДММГГГГ") + " бухгалтерские итоги не рассчитаны!"+РазделительСтрок+
				"Расчет итогов выполняется в режиме" + РазделительСтрок +
				"""Операции - Управление бухгалтерскими итогами"".";

	Иначе
		Если ТекущийЭлемент().Выбран() = 1 Тогда
			Если ТекущийЭлемент().ЭтоГруппа() = 0 Тогда
				Если (ТекущийЭлемент().ТипНоменклатуры = Перечисление.ТипыНоменклатуры.Товар)
					или (ТекущийЭлемент().ТипНоменклатуры = Перечисление.ТипыНоменклатуры.Продукция)
					или (ТекущийЭлемент().ТипНоменклатуры = Перечисление.ТипыНоменклатуры.Полуфабрикат) Тогда
					Ост = ОстатокНаСкладе(0);
					Стр = "Остаток по счету " + СчетУчета + " """ + СчетУчета.ПолнНаименование + """: " +
						 Ост + " " +ТекущийЭлемент().ЕдиницаИзмерения;
				КонецЕсли;
				Стр = Стр + РазделительСтрок + "Тип номенклатуры: " + ТекущийЭлемент().ТипНоменклатуры;
				Если ТекущийЭлемент().ТипНоменклатуры = Перечисление.ТипыНоменклатуры.Товар Тогда
					Стр = Стр + " (" + ТекущийЭлемент().ТипТовара + ")";
				КонецЕсли;
				Стр = Стр + РазделительСтрок + "Данные актуальны на конец дня " + Формат(КонМесяца(КонтекстФормыДокумента.ДатаДок), "Д (0)ДДММГГГГ");
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

	Возврат Стр;
	
КонецФункции // ИнформационнаяСтрока()

//******************************************************************************
// Отчет()
//
// Параметры:
//  Нет.
//
// Вызывается из формул элементов диалога:
//  Кнопка "ОСВ по счету".
//
// Описание:
//  Вызов оборотно-сальдовой ведомости по счету.
//
Процедура Отчет()
	
	Меню = СоздатьОбъект("СписокЗначений");
	Меню.ДобавитьЗначение("21", "счет 21");
	Меню.ДобавитьЗначение("41", "счет 41");
	Меню.ДобавитьЗначение("43", "счет 43");
	Меню.ДобавитьЗначение("45", "счет 45");
	Меню.ДобавитьЗначение("004", "счет 004");
	КодСчета = "";
	Если Меню.ВыбратьЗначение(КодСчета,,,,1) = 1 Тогда
		Расшифровка = СоздатьОбъект("СписокЗначений");
		Расшифровка.Установить("Отчет", "ОборотноСальдоваяВедомостьПоСчету");
		Расшифровка.Установить("РазделительУчета", БухИтоги.ИспользоватьРазделительУчета());
		Расшифровка.Установить("Счет", СчетПоКоду(КодСчета));
		Расшифровка.Установить("Дата1", НачМесяца(КонтекстФормыДокумента.ДатаДок));
		Расшифровка.Установить("Дата2", КонМесяца(КонтекстФормыДокумента.ДатаДок));
		Если (КодСчета = "21") или (КодСчета = "43") Тогда
			Расшифровка.Установить("ДанныеПоСубсчетам", 0);
			Расшифровка.Установить("ВидСубконто1", ВидыСубконто.Номенклатура);
			Если ТекущийЭлемент().Выбран() = 1 Тогда
				Расшифровка.Установить("Субконто1", ТекущийЭлемент());
				Если ТекущийЭлемент().ЭтоГруппа() = 1 Тогда
					Расшифровка.Установить("ПоГруппам1", 1);
					Расшифровка.Установить("ОтборСубконто1", 1);
				Иначе
					Расшифровка.Установить("ПоГруппам1", 0);
					Расшифровка.Установить("ОтборСубконто1", 2);
				КонецЕсли;
			КонецЕсли;
			Расшифровка.Установить("ВидСубконто2", ВидыСубконто.МестаХранения);
			Расшифровка.Установить("Субконто2", МестоХранения);
			Если МестоХранения.Выбран() = 1 Тогда
				Расшифровка.Установить("ОтборСубконто2", 2);
			Иначе
				Расшифровка.Установить("ОтборСубконто2", 1);
			КонецЕсли;
			
		ИначеЕсли КодСчета = "41" Тогда
			Расшифровка.Установить("ДанныеПоСубсчетам", 1);
			Расшифровка.Установить("ВидСубконто1", ВидыСубконто.Номенклатура);
			Если ТекущийЭлемент().Выбран() = 1 Тогда
				Расшифровка.Установить("Субконто1", ТекущийЭлемент());
				Если ТекущийЭлемент().ЭтоГруппа() = 1 Тогда
					Расшифровка.Установить("ПоГруппам1", 1);
					Расшифровка.Установить("ОтборСубконто1", 1);
				Иначе
					Расшифровка.Установить("ПоГруппам1", 0);
					Расшифровка.Установить("ОтборСубконто1", 2);
				КонецЕсли;
			КонецЕсли;
			Расшифровка.Установить("ВидСубконто2", ВидыСубконто.МестаХранения);
			Расшифровка.Установить("Субконто2", МестоХранения);
			Если МестоХранения.Выбран() = 1 Тогда
				Расшифровка.Установить("ОтборСубконто2", 2);
			Иначе
				Расшифровка.Установить("ОтборСубконто2", 1);
			КонецЕсли;
			
		ИначеЕсли КодСчета = "45" Тогда
			Расшифровка.Установить("Счет", Сч45);
			Расшифровка.Установить("ДанныеПоСубсчетам", 0);
			Расшифровка.Установить("ВидСубконто1", ВидыСубконто.Контрагенты);
			Если Контрагент.Выбран() = 1 Тогда
				Расшифровка.Установить("Субконто1", Контрагент);
				Если Контрагент.ЭтоГруппа() = 1 Тогда
					Расшифровка.Установить("ПоГруппам1", 1);
					Расшифровка.Установить("ОтборСубконто1", 1);
				Иначе
					Расшифровка.Установить("ПоГруппам1", 0);
					Расшифровка.Установить("ОтборСубконто1", 2);
				КонецЕсли;
			КонецЕсли;
			Расшифровка.Установить("ВидСубконто2", ВидыСубконто.Договоры);
			Если Договор.Выбран() = 1 Тогда
				Расшифровка.Установить("Субконто2", Договор);
				Если Договор.ЭтоГруппа() = 1 Тогда
					Расшифровка.Установить("ПоГруппам2", 1);
					Расшифровка.Установить("ОтборСубконто2", 1);
				Иначе
					Расшифровка.Установить("ПоГруппам2", 0);
					Расшифровка.Установить("ОтборСубконто2", 2);
				КонецЕсли;
			КонецЕсли;
			Расшифровка.Установить("ВидСубконто3", ВидыСубконто.Номенклатура);
			Если ТекущийЭлемент().Выбран() = 1 Тогда
				Расшифровка.Установить("Субконто3", ТекущийЭлемент());
				Если ТекущийЭлемент().ЭтоГруппа() = 1 Тогда
					Расшифровка.Установить("ПоГруппам3", 1);
					Расшифровка.Установить("ОтборСубконто3", 1);
				Иначе
					Расшифровка.Установить("ПоГруппам3", 0);
					Расшифровка.Установить("ОтборСубконто3", 2);
				КонецЕсли;
			КонецЕсли;
			
		ИначеЕсли КодСчета = "004" Тогда
			Расшифровка.Установить("ВидСубконто1", ВидыСубконто.Номенклатура);
			Если ТекущийЭлемент().Выбран() = 1 Тогда
				Расшифровка.Установить("Субконто1", ТекущийЭлемент());
				Если ТекущийЭлемент().ЭтоГруппа() = 1 Тогда
					Расшифровка.Установить("ПоГруппам1", 1);
					Расшифровка.Установить("ОтборСубконто1", 1);
				Иначе
					Расшифровка.Установить("ПоГруппам1", 0);
					Расшифровка.Установить("ОтборСубконто1", 2);
				КонецЕсли;
			КонецЕсли;
			Расшифровка.Установить("ВидСубконто2", ВидыСубконто.Контрагенты);
			Если Комитент.Выбран() = 1 Тогда
				Расшифровка.Установить("Субконто2", Комитент);
				Если Комитент.ЭтоГруппа() = 1 Тогда
					Расшифровка.Установить("ПоГруппам2", 1);
					Расшифровка.Установить("ОтборСубконто2", 1);
				Иначе
					Расшифровка.Установить("ПоГруппам2", 0);
					Расшифровка.Установить("ОтборСубконто2", 2);
				КонецЕсли;
			КонецЕсли;
			Расшифровка.Установить("ВидСубконто3", ВидыСубконто.Договоры);
			Если ДоговорКомиссии.Выбран() = 1 Тогда
				Расшифровка.Установить("Субконто3", ДоговорКомиссии);
				Если ДоговорКомиссии.ЭтоГруппа() = 1 Тогда
					Расшифровка.Установить("ПоГруппам3", 1);
					Расшифровка.Установить("ОтборСубконто3", 1);
				Иначе
					Расшифровка.Установить("ПоГруппам3", 0);
					Расшифровка.Установить("ОтборСубконто3", 2);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;

		глРасшифровка = Расшифровка;
		глОбновить = 2;
		глТаблица = "";
		глФлагРасшифровки = 1;
		ОткрытьФорму("Отчет.ОборотноСальдоваяВедомостьПоСчету");
		глФлагРасшифровки = 0;
		глОбновить = 0;
	КонецЕсли;
	
КонецПроцедуры // Отчет()

//******************************************************************************
// ПоКнопкеПечать()
// 
// Параметры: 
//	Нет
//
// Описание:
// 	Вызывается по кнопке "Печать"  
// 	
Процедура ПоКнопкеПечать(СразуНаПринтер = 0,КолЭкз = 1)
	
	Если  ПустоеЗначение(НомерТекущейФормы) = 1  Тогда
		НомерТекущейФормы = 1;
		Форма.кнПечать.Заголовок(ТаблицаПечФорм.ПолучитьЗначение(НомерТекущейФормы, "Кнопка"));
	КонецЕсли;
	
	Если НомерТекущейФормы = 1  Тогда
		Отчет();
		
	Иначе
		Параметры = СоздатьОбъект("СписокЗначений");
		Параметры.ДобавитьЗначение(Контекст, "Контекст");
		Параметры.ДобавитьЗначение(СразуНаПринтер, "Устройство");
		Параметры.ДобавитьЗначение(КолЭкз, "КоличествоКопий");
		
		ОткрытьФорму("Отчет", Параметры, глКаталогПечФорм+ТаблицаПечФорм.ПолучитьЗначение(НомерТекущейФормы,"Файл"));
	КонецЕсли;
	
КонецПроцедуры // ПоКнопкеПечать()

//******************************************************************************
// ПоКнопкеВыборПечатнойФормы()
//
// Параметры:
//  нет.    
//
// Возвращаемое значение:
//  нет.
//
// Описание:
//  - открывает список для выбора способа печати. 
//  - формирует таблицу по выбранному способу.
//
Процедура ПоКнопкеВыборПечатнойФормы()
	
    ВыбНомер = глВыборПечатнойФормы("Справочник." + Вид(), ТаблицаПечФорм);
	Если ВыбНомер > 0 Тогда
		НомерТекущейФормы = ВыбНомер;
		Форма.кнПечать.Заголовок(ТаблицаПечФорм.ПолучитьЗначение(НомерТекущейФормы, "Кнопка"));
		ПоКнопкеПечать();
	КонецЕсли;

КонецПроцедуры // ПоКнопкеВыборПечатнойФормы()

//******************************************************************************
// ПоКнопкеВыбораДаты()
//
// Параметры:
//
// Возвращаемое значение:
//  Нет.
//
// Вызывается из формул элементов диалога:
//  Кнопка выбора даты.
//
// Описание:
//  Выбирается дата просмотра и редактирования значений периодических реквизитов 
// выбирается по кнопке, чтобы не менялся признак модифицированности формы.
//
Процедура ПоКнопкеВыбораДаты()
	
	ТекИспользоватьДату = ИспользоватьДату();
	глВвестиДатуПериодическихРеквизитов(Контекст, 0);
	Если ИспользоватьДату() > КонецРассчитанногоПериодаБИ() Тогда
		Предупреждение("За выбранный период итоги не рассчитаны!"+РазделительСтрок+
		               "Расчет итогов выполняется в режиме"+РазделительСтрок+
					   """Операции - Управление бухгалтерскими итогами"".");
		ИспользоватьДату(ТекИспользоватьДату);
		
	Иначе
		БухИт.ПериодМ(ИспользоватьДату());
	КонецЕсли;
		
КонецПроцедуры // ПоКнопкеВыбораДаты()

//******************************************************************************
// ЗаполнениеФормы(Параметр)
//
// Параметры:
//  Параметр - Список значений - список значений, переданный в форму в качестве 
//			   параметра.
//
// Вызывается из формул элементов диалога:
//  Нет.
//
// Описание:
//  Разбор списка значений, переданного в качестве параметра.
//
Процедура ЗаполнениеФормы(Параметр)
	
	Если ТипЗначенияСтр(Параметр) = "СписокЗначений" Тогда
		КонтекстФормыДокумента = Параметр.Получить("Контекст");
		МестоХранения = Параметр.Получить("МестоХранения");
		Контрагент    = Параметр.Получить("Контрагент");
		Договор       = Параметр.Получить("Договор");
		Если Метаданные.Документ(КонтекстФормыДокумента.Вид()).РеквизитШапки("ТипЦен").Выбран() = 1 Тогда
			ТипЦен = КонтекстФормыДокумента.ТипЦен;
		КонецЕсли;
		Если Метаданные.Документ(КонтекстФормыДокумента.Вид()).РеквизитШапки("Договор").Выбран() = 1 Тогда
			Валюта = ?(КонтекстФормыДокумента.Договор.Выбран() = 0,"",КонтекстФормыДокумента.Договор.ВалютаДоговора);
		КонецЕсли;
		Если Метаданные.Документ(КонтекстФормыДокумента.Вид()).РеквизитШапки("Курс").Выбран() = 1 Тогда
			Курс = КонтекстФормыДокумента.Курс;
		КонецЕсли;
		Комитент = Параметр.Получить("Комитент");
		ОтборПоТипу = Параметр.Получить("ОтборПоТипу");
		Если ПустоеЗначение(ОтборПоТипу) = 0 Тогда
		    УстановитьОтбор("ТипНоменклатуры", ОтборПоТипу);
		КонецЕсли;
		ДоговорКомиссии = Параметр.Получить("ДоговорКомиссии");
		
		Если КонтекстФормыДокумента.Вид() = "ПродажаВРозницу" Тогда
		    ВидДвижения = 1;
		
		ИначеЕсли КонтекстФормыДокумента.Вид() = "ПеремещениеТоваров" Тогда
			ВП = Параметр.Получить("ВидПеремещения");
			Если (ВП = 2) или (ВП = 3) Тогда // розница
			    ВидДвижения = 1;
			Иначе
				ВидДвижения = 0;
			КонецЕсли;
			
		ИначеЕсли КонтекстФормыДокумента.Вид() = "РеализацияОтгруженнойПродукции" Тогда
			ВидДвижения = 2;
			
		Иначе
			ВидДвижения = 0;
		КонецЕсли;
		БухИт.ПериодМ(КонтекстФормыДокумента.ДатаДок);
	КонецЕсли;
	
КонецПроцедуры // ЗаполнениеФормы()

//******************************************************************************
// Предопределенная процедура
//
Процедура ПриОткрытии()
	
	БухИт = СоздатьОбъект("БухгалтерскиеИтоги");
	Сч21 = СчетПоКоду("21");
	Сч43 = СчетПоКоду("43");
	Сч41_1 = СчетПоКоду("41.1");
	Сч41_2 = СчетПоКоду("41.2");
	Сч41_3 = СчетПоКоду("41.3");
	Сч41_4 = СчетПоКоду("41.4");
	Сч45   = СчетПоКоду("45");
	Сч004 = СчетПоКоду("004");
	СчКТР = СчетПоКоду("КТР");
	СчКМС = СчетПоКоду("КМС");

	ЗаполнениеФормы(Форма.Параметр);
	Форма.ИспользоватьСлой("Основной", 2);
	
	// Заполним таблицу для выбора печатной формы
	НомерТекущейФормы = глУстановкаКнопкиПечать(Контекст, "Справочник." + Вид(),ТаблицаПечФорм);
	
	// Управление видимостью колонок	
	глУстановитьВидимостьКолонок(Контекст, ИдентификаторФормы, ПолныйСписокКолонок, 1);
	
	РедактироватьВДиалоге(1,0);
	
КонецПроцедуры // ПриОткрытии()

//******************************************************************************
// Предопределенная процедура
//
Процедура ПриПовторномОткрытии()
	
	ЗаполнениеФормы(Форма.Параметр);
	
КонецПроцедуры // ПриПовторномОткрытии()

////////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ
//
ИдентификаторФормы	=	"Справочник_Номенклатура_ФормаСписка_ДляПодбора";

ТаблицаПечФорм		= СоздатьОбъект("ТаблицаЗначений");
ТаблицаПечФорм.НоваяКолонка("Название","Строка",,,,30);
ТаблицаПечФорм.НоваяКолонка("Файл","Строка",,,"Файл",10);
ТаблицаПечФорм.НоваяКолонка("Кнопка","Строка",,,,10); 
ТаблицаПечФорм.НоваяКолонка("ФайлОписания","Строка");
	
// добавим информацию о встроенной форме
ТаблицаПечФорм.НоваяСтрока();
ТаблицаПечФорм.Название     = "Оборотно-сальдовая ведомость по счету";
ТаблицаПечФорм.Кнопка       = "ОСВ";   

// Список колонок видимостью которых будем управлять
ПолныйСписокКолонок = СоздатьОбъект("СписокЗначений");
ПолныйСписокКолонок.ДобавитьЗначение("Код", "Код");
ПолныйСписокКолонок.ДобавитьЗначение("Наименование", "Наименование");
ПолныйСписокКолонок.ДобавитьЗначение("ПолнНаименование", "Полное наименование");
ПолныйСписокКолонок.ДобавитьЗначение("ТипНоменклатуры", "Тип номенклатуры");
ПолныйСписокКолонок.ДобавитьЗначение("ВидНоменклатуры", "Вид номенклатуры ");
ПолныйСписокКолонок.ДобавитьЗначение("ЕдиницаИзмерения", "Единица измерения");
ПолныйСписокКолонок.ДобавитьЗначение("СебестоимостьТекст", "Себестоимость (учетная цена)");
ПолныйСписокКолонок.ДобавитьЗначение("СтавкаНДС", "Ставка НДС");
ПолныйСписокКолонок.ДобавитьЗначение("СтавкаНП", "Ставка НП");
ПолныйСписокКолонок.ДобавитьЗначение("СтранаТекст", "Страна происхождения");
ПолныйСписокКолонок.ДобавитьЗначение("КолонкаЦены", "Цена");
ПолныйСписокКолонок.ДобавитьЗначение("КолонкаОстатка", "Остаток");

//	При первом запуске, пока пользователь не настроил видимость колонок,
//  будут видимы только колонки "Код","Наименование"
ПолныйСписокКолонок.Пометка(1,	1);
ПолныйСписокКолонок.Пометка(2, 	1);

// Список недоступных для редактирования колонок
СписокНедоступныхКолонок = СоздатьОбъект("СписокЗначений");
