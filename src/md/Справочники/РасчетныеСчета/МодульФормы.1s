//******************************************************************************
//	ПроверкаНомераСчета(НомерСчета)
//
//	Параметры:          
//  	НомерСчета (строка) - Номер проверяемого счета
//
//	Возвращаемое значение:
//  	0 - если все нормально
//  	не 0 - если счет указан неверно.
//
//	Описание:
//		Функция проверяет правильность указания номера расчетного счета
// 		по алгоритму проверки правильности расчета контрольного ключа.

Функция ПроверкаНомераСчета(НомерСчета)
	
	Перем Поз; // счетчик цикла

	// Весовые коэффициенты
	Вес="71371371371371371371371";
	КонтрСумма=0;
	Для Поз=1 По 23 Цикл
		Произв=Число(Сред(НомерСчета, Поз, 1))*Число(Сред(Вес, Поз, 1));
		МладшийРазряд=Число(Прав(Строка(Произв),1));
		КонтрСумма=КонтрСумма+МладшийРазряд;
	КонецЦикла;
	Проверка=КонтрСумма/10-Цел(КонтрСумма/10);
	
	Возврат Проверка;

КонецФункции // ПроверкаНомераСчета()

//******************************************************************************
//	ПроверкаСчета()
//
//	Описание:
//		Процедура предназначена для проверки правильности указания номеров 
//		расчетных счетов и БИК, так как вероятность ошибки при вводе 20-разрядного
//		номера велика, и такая проверка будет удобным дополнительным сервисом.
//		Правильность указания банковских реквизитов проверяется по следующим критериям:
//		- длина номера счета должна быть 20 символов;
//		- длина БИК должна быть 9 символов;
//		- БИК должен быть числом (проверять номер счета на число нельзя, так как в случае
//		  использования клиринговой валюты в 6-м разряде номера может стоять символ
//		  (хотя это редкий случай));
//		- номера счетов и БИК совместно проверяются по алгоритму проверки правильности
//		  расчета контрольного ключа.
//		Если какое-либо из этих условий не выполняется, выдается сообщение в окно сообщений,
//		но информация о расчетном счете все равно записывается в справочник.

Процедура ПроверкаСчета()
	
	ПроверятьКлючРасчСчета=1;
	
	Если ПустаяСтрока(Номер) = 1 Тогда
    	Сообщить( "Не указан номер счета.", "!" );
		ПроверятьКлючРасчСчета=0;
	// Длина номера счета должна быть равна 20
	ИначеЕсли СтрДлина(СокрЛП(Номер)) <> 20 Тогда
	    Сообщить( "Возможно, номер счета указан неверно.", "!" );
	    ПроверятьКлючРасчСчета=0;
	КонецЕсли;
	
	// Если указан БИК, начинаем проверять его
	Если ПустоеЗначение(БанкОрганизации) = 1 Тогда
    	Сообщить( "Не указан банк, в котором открыт расчетный счет.", "!" );
		ПроверятьКлючРасчСчета=0;
	ИначеЕсли (СтрДлина(СокрЛП(БанкОрганизации.Код)) <> 9) ИЛИ 
	          (Число(БанкОрганизации.Код) = 0) Тогда
    	Сообщить( "Возможно, БИК банка, в котором открыт расчетный счет, указан неверно.", "!" );
    	ПроверятьКлючКоррСчета=0;
	КонецЕсли;

	Если ПроверятьКлючРасчСчета=1 Тогда
		// Для проверки к номеру счета слева добавляются 3 последние цифры БИК
		Если (ПроверкаНомераСчета(Прав(БанкОрганизации.Код, 3)+Номер) <> 0) и
			 (ПроверкаНомераСчета("0"+Сред(БанкОрганизации.Код, 5, 2 )+Номер) <> 0) Тогда
		    Сообщить( "Возможно, номер счета или БИК банка указаны неверно.", "!" );
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры // ПроверкаСчета()

//******************************************************************************
//	Печать()
//
//	Описание:
// 		Инициализирует печать формы платежного поручения
// 		На основании введенных реквизитов справочника

Процедура Печать()
	
  	Перем СтрОрганизация, СтрБанк, РасчСчет, БИК, КоррСчет, ИНН, КПП;
  	
	Таб = СоздатьОбъект("Таблица");
  	ИмяФайлаПечатнойФормы = КаталогИБ()+"ExtForms\PrnForms\1cbpp03.mxl";
  	Если ФС.СуществуетФайл(ИмяФайлаПечатнойФормы) = 1 Тогда
  		Таб.ИсходнаяТаблица(ИмяФайлаПечатнойФормы);
  	Иначе
  		Таб.ИсходнаяТаблица("ПлПор");
  	КонецЕсли;
	Таб.Вывести();

	Таб.Область("НаименованиеНомер").Текст = "ПЛАТЕЖНОЕ ПОРУЧЕНИЕ № 1";
	
	глПлатежныеРеквизиты(Контекст, СтрОрганизация, СтрБанк, РасчСчет, БИК, КоррСчет, ИНН, КПП, 2);

	Таб.Область("Плательщик").Текст = СтрОрганизация;
	Таб.Область("НомерСчетаПлательщика").Текст = РасчСчет;
  	Таб.Область("БанкПлательщика").Текст = СтрБанк;
	Таб.Область("БИКБанкаПлательщика").Текст = БИК;
	Таб.Область("СчетБанкаПлательщика").Текст = КоррСчет;
	
	Таб.Область("ИННПлательщика").Текст = "ИНН " +  ИНН;
	Таб.Область("ИННПолучателя").Текст = "ИНН " +  ИНН;
	Таб.Область("КПППлательщика").Текст = "КПП " + ?(ПустаяСтрока(КПП)=1,"0", КПП);
	Таб.Область("КПППолучателя").Текст = "КПП " + ?(ПустаяСтрока(КПП)=1,"0", КПП);
		
	Таб.Область("Получатель").Текст = СтрОрганизация;
	Таб.Область("НомерСчетаПолучателя").Текст = РасчСчет;
  	Таб.Область("БанкПолучателя").Текст = СтрБанк;
	Таб.Область("БИКБанкаПолучателя").Текст = БИК;
	Таб.Область("СчетБанкаПолучателя").Текст = КоррСчет;
	Таб.Область("НазначениеПлатежа").Текст = Назначение;

	Таб.Опции(0,0,0,0,"ОпцииПечатиПлПор","ПараметрыОкнаПлПор");
	Таб.ТолькоПросмотр(1);
	Таб.ПараметрыСтраницы(,,,,0,,,,,);
	Таб.Показать("Печать платежного поручения","");
	
КонецПроцедуры // Печать()

//******************************************************************************
//	РедактироватьБанк(ИмяРеквизита)
//
//	Параметры:
//		ИмяРеквизита (строка) - имя реквизита: "БанкОрганизации" или "БанкДляРасчетов"
//
//	Вызывается из формул элементов диалога:
//		Кнопка справа от БанкОрганизации 
//		Кнопка справа от БанкДляРасчетов
//
//	Описание:
//		Если реквизит заполнен - открывает модально форму элемента справочника банки для 
//		редактирования, иначе открывает форму списка справочника банкт для выбора банка.

Процедура РедактироватьБанк(ИмяРеквизита)
	
	СтарыйБанк=ПолучитьАтрибут(ИмяРеквизита);

	Если СтарыйБанк.Выбран()=1 Тогда
		ОткрытьФормуМодально(СтарыйБанк, , 0);
	Иначе
		Активизировать(ИмяРеквизита, 1);
		Возврат;
	КонецЕсли;
	
	// банк изменился, но Контекст об этом не знает
	НовыйБанк=СтарыйБанк.ТекущийЭлемент();

	// проверка, чтобы не модифицировать Форму зря
	Если (НовыйБанк.Код<>СтарыйБанк.Код) ИЛИ
	     (НовыйБанк.Наименование<>СтарыйБанк.Наименование) ИЛИ
	     (НовыйБанк.Местонахождение<>СтарыйБанк.Местонахождение) ИЛИ
	     (НовыйБанк.КоррСчет<>СтарыйБанк.КоррСчет) Тогда

		// иначе обновить Банк не получается
		УстановитьАтрибут(ИмяРеквизита, "");
		ПолучитьАтрибут(ИмяРеквизита);
		УстановитьАтрибут(ИмяРеквизита, НовыйБанк);
	КонецЕсли;
	
	Если РедактироватьТекст=0 Тогда
		глПлатежныеРеквизиты(Контекст,ТекстКорреспондент,,,,,,,2);
	КонецЕсли;
	
КонецПроцедуры // РедактироватьБанк()

//******************************************************************************
//	ПриРедактированииТекста()
//
//	Вызывается из формул элементов диалога:
//  	БанкОрганизации
//		БанкДляРасчетов
//		РедактироватьТекст
//		ТекстКорреспондент

Процедура ПриРедактированииТекста()
	
	Если РедактироватьТекст=0 Тогда
		Корреспондент="";
		глПлатежныеРеквизиты(Контекст,ТекстКорреспондент,,,,,,,2);
		Форма.ТекстКорреспондент.Доступность(0);
	Иначе
		Корреспондент=ТекстКорреспондент;
		Форма.ТекстКорреспондент.Доступность(1);
	КонецЕсли;
	
КонецПроцедуры //ПриРедактированииТекста()
	
//******************************************************************************
//	Предопределенная процедура.

Процедура ВводНового(Копирование)
	
	Если Копирование = 0 Тогда
		Наименование="Основной";
	КонецЕсли;

КонецПроцедуры // ВводНового()

//******************************************************************************
//	Предопределенная процедура.

Процедура ПриОткрытии()
	
	глПлатежныеРеквизиты(Контекст,ТекстКорреспондент,,,,,,,2);

	Если ПустоеЗначение(Корреспондент)=1 Тогда
		РедактироватьТекст=0;
		Форма.ТекстКорреспондент.Доступность(0);
	Иначе
		РедактироватьТекст=1;
		Форма.ТекстКорреспондент.Доступность(1);
	КонецЕсли;
	
КонецПроцедуры // ПриОткрытии()

//******************************************************************************
// Предопределенная процедура.

Процедура ПриЗаписи()
	
	ПроверкаСчета();
	
КонецПроцедуры // ПриЗаписи()
