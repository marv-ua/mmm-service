Перем СписокВидовРасходов;

//******************************************************************************
// ПриВыбореСчета()
// 
// Вызывается из формул элементов диалога:
//  Счет, Расходы.
//
// Описание:
//  Устанавливает тип объектов аналитического учета по счету затрат.
//
Процедура ПриВыбореСчета()
	
	Если Форма.АктивныйЭлемент() = "СчетЗатрат" Тогда
		Если СчетЗатрат.Забалансовый = 1 Тогда
		    Предупреждение("Счет отнесения затрат должен быть балансовым.");
		КонецЕсли;
	КонецЕсли;
	
	Для А = 1 По 3 Цикл
		НазначитьТип("Субконто" + А, СчетЗатрат.ВидСубконто(А));
	КонецЦикла;
	
КонецПроцедуры // ПриВыбореСчета()

//******************************************************************************
// ПриВыбореСпособаНачисленияАмортизации()
//
// Параметры:
//  Нет.
//
// Вызывается из формул элементов диалога:
//  Нет.
//
// Описание:
//  Здесь описывается процедура.
//
Процедура ПриВыбореСпособаНачисленияАмортизации()
	
	Если СпособНачисленияАмортизации = Перечисление.СпособыНачисленияАмортизацииНМА.ПропорциональноОбъемуПродукцииРабот Тогда
		Форма.ИспользоватьСлой("ОбъемПродукции",1);

	Иначе
		Форма.ИспользоватьСлой("ОбъемПродукции",0);
	КонецЕсли;
	
	Если СпособНачисленияАмортизации = Перечисление.СпособыНачисленияАмортизацииНМА.УменьшаемогоОстатка Тогда
		Форма.ИспользоватьСлой("Коэффициент",1);
	Иначе
		Форма.ИспользоватьСлой("Коэффициент",0);
	КонецЕсли;

КонецПроцедуры // ПриВыбореСпособаНачисленияАмортизации()

//******************************************************************************
// ПриВыбореМетодаНачисленияАмортизации()
//
// Параметры:
//  Нет.
//
// Вызывается из формул элементов диалога:
//  Нет.
//
// Описание:
//  Здесь описывается процедура.
//
Процедура ПриВыбореМетодаНачисленияАмортизации()
	
	Если МетодНачисленияАмортизации = Перечисление.МетодыНачисленияАмортизации.Нелинейный Тогда
		Форма.ИспользоватьСлой("БазоваяСтоимость", 1);

	Иначе
		Форма.ИспользоватьСлой("БазоваяСтоимость", 0);
	КонецЕсли;
	
КонецПроцедуры // ПриВыбореМетодаНачисленияАмортизации()

//******************************************************************************
// ПриВыбореВидаРасхода()
//
// Параметры:
//  Нет.
//
// Вызывается из формул элементов диалога:
//  Нет.
//
// Описание:
//
Процедура ПриВыбореВидаРасхода()
	      
	Если (ВидРасхода = Перечисление.ВидыРасходов.ПрямыеРасходы)
	 или (ВидРасхода = Перечисление.ВидыРасходов.КосвенныеРасходы)	Тогда
	    ЭлементРасхода = Перечисление.ГруппыВидыРасходов.Амортизация;
	КонецЕсли;
	
КонецПроцедуры //ПриВыбореВидаРасхода

//******************************************************************************
// ПриВыбореВидаОбъектаУчета()
//
// Параметры:
//  Нет.
//
// Вызывается из формул элементов диалога:
//  Нет.
//
// Описание:
//  Здесь описывается процедура.
//
Процедура ПриВыбореВидаОбъектаУчета()
	        
	Если СписокВидовОбъекта.НайтиЗначение(ВидОбъектаУчета) <> СписокВидовОбъекта.ТекущаяСтрока() Тогда
	    ВидОбъектаУчета = СписокВидовОбъекта.ПолучитьЗначение(СписокВидовОбъекта.ТекущаяСтрока());
	КонецЕсли;
	                                      
	// Для НИОКР не должно быть учтановленов качестве способа
	// списания - способ уменьшаемого остатка
	Если ВидОбъектаУчета = 1 Тогда //НИОКР
		Если СпособНачисленияАмортизации = Перечисление.СпособыНачисленияАмортизацииНМА.УменьшаемогоОстатка Тогда
		    СпособНачисленияАмортизации = Перечисление.СпособыНачисленияАмортизацииНМА.Линейный;
		КонецЕсли;
	КонецЕсли;
	
	// Для НИОКР закладка "Налоговый учет" не нужна.
	НомерПозиции = Форма.Закладки.НайтиЗначение("Налоговый учет");
	Если ВидОбъектаУчета = 0 Тогда //НМА
		Если НомерПозиции = 0 Тогда
		    Форма.Закладки.ДобавитьЗначение("Налоговый учет");
		КонецЕсли;
		
	Иначе // НИКОР
		Если НомерПозиции <> 0 Тогда
		    Форма.Закладки.УдалитьЗначение(НомерПозиции); 
		КонецЕсли;
	КонецЕсли;
	
	Если Форма.Закладки.ТекущаяСтрока() = 1 Тогда // закладка "Общие сведения"
	    Если ВидОбъектаУчета = 0 Тогда
			Форма.РамкаНачислятьАмортизацию.Заголовок("Начисление амортизации");
			Форма.ПорядокНачисленияАмортизации.Заголовок("Не подлежит начислению амортизации");
			Форма.ПорядокНачисленияАмортизации05.Заголовок("Начислять амортизацию по кредиту счета 05");
			Форма.РамкаПрочиеСведения.Заголовок("Прочие сведения о нематериальном активе");
			Форма.ИспользоватьСлой("ОбщиеСведенияНМА", 1);
			
		Иначе
			Форма.РамкаНачислятьАмортизацию.Заголовок("Списание расходов по НИОКР");
			Форма.ПорядокНачисленияАмортизации.Заголовок("Не списывать расходы");
			Форма.ПорядокНачисленияАмортизации05.Заголовок("Списывать расходы");
			Форма.РамкаПрочиеСведения.Заголовок("Прочие сведения о расходах на НИОКР");
			Форма.ИспользоватьСлой("ОбщиеСведенияНМА", 0);
		КонецЕсли;
		
	ИначеЕсли Форма.Закладки.ТекущаяСтрока() = 2 Тогда // закладка "Бухгалтерский учет"
		Если ВидОбъектаУчета = 0 Тогда // НМА
			Форма.СтатикПервоначальнаяСтоимость.Заголовок("Первоначальная стоимость:");
			Форма.СтатикСрокПолезногоИспользования.Заголовок("Срок полезного использ. (в месяцах):");
			Форма.ДанныеПоНачислениюАмортизации.Заголовок("Данные по начислению амортизации для целей бухгалтерского учета");
			Форма.СтатикСпособНачисленияАморизации.Заголовок("Способ начисления амортизации:");
			Форма.РамкаСчетИАналитика.Заголовок("Счет отнесения затрат по начисленной амортизации");
			
		Иначе
			Форма.СтатикПервоначальнаяСтоимость.Заголовок("Cовокупность расходов:");
			Форма.СтатикСрокПолезногоИспользования.Заголовок("Срок списания (в месяцах):");
			Форма.ДанныеПоНачислениюАмортизации.Заголовок("Данные по списанию расходов для целей бухгалтерского учета");
			Форма.СтатикСпособНачисленияАморизации.Заголовок("Способ списания расходов:");
			Форма.РамкаСчетИАналитика.Заголовок("Счет и аналитика по списанию на расходы");
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ПриВыбореВидаОбъектаУчета()

//******************************************************************************
//
// ПриИзмененииВидаРасхода()
//
// Параметры:
//  Нет.
//
// Вызывается из формул элементов диалога:
//  Графа "Вид расхода".
//
// Описание:
//  Осуществляется управление реквизитов "объект" и "элемент расхода"
//  в зависимости от выбранного вида расхода.
//
Процедура ПриИзмененииВидаРасхода()
	
	ТипЭлементаРасхода = "";
	ВидыОбъекта = "";
	Если ВидРасхода = Перечисление.ВидыРасходов.ПриобретениеТоваров Тогда
		ВидыОбъекта = "Номенклатура";
		
	ИначеЕсли ВидРасхода = Перечисление.ВидыРасходов.ПриобретениеМатериалов Тогда
		ВидыОбъекта = "Материалы";
		
	ИначеЕсли ВидРасхода = Перечисление.ВидыРасходов.ПриобретениеОсновныхСредств Тогда
		ВидыОбъекта = "ОбъектыСтроительства,Оборудование";
		
	ИначеЕсли ВидРасхода = Перечисление.ВидыРасходов.СтроительствоОсновныхСредств Тогда
		ВидыОбъекта = "ОбъектыСтроительства";
		
	ИначеЕсли ВидРасхода = Перечисление.ВидыРасходов.ПриобретениеНематериальныхАктивов Тогда
		ВидыОбъекта = "ОбъектыСтроительства";
		
	ИначеЕсли ВидРасхода = Перечисление.ВидыРасходов.ПриобретениеЦенныхБумаг Тогда
		ВидыОбъекта = "ЦенныеБумаги";
		
	ИначеЕсли ВидРасхода = Перечисление.ВидыРасходов.ПриобретениеПрав Тогда
		ВидыОбъекта = "Договоры";
		
	ИначеЕсли ВидРасхода = Перечисление.ВидыРасходов.ГарантийныйРемонтИОбслуживание Тогда
		ВидыОбъекта = "Номенклатура";
		
	ИначеЕсли ВидРасхода = Перечисление.ВидыРасходов.НИОКР Тогда
		ВидыОбъекта = "ОбъектыСтроительства";
		
	ИначеЕсли ВидРасхода = Перечисление.ВидыРасходов.ОсвоениеПриродныхРесурсов Тогда
		ВидыОбъекта = "РасходыБудущихПериодов";
		
	ИначеЕсли ВидРасхода = Перечисление.ВидыРасходов.КосвенныеРасходы Тогда
		ТипЭлементаРасхода = "Перечисление.ГруппыВидыРасходов";
		
	ИначеЕсли ВидРасхода = Перечисление.ВидыРасходов.ПрямыеРасходы Тогда
		ТипЭлементаРасхода = "Перечисление.ГруппыВидыРасходов";
		ВидыОбъекта = "ВидыНоменклатуры";
		
	ИначеЕсли ВидРасхода = Перечисление.ВидыРасходов.ВнереализационныеРасходы Тогда
		ТипЭлементаРасхода = "Перечисление.ВнереализационныеРасходы";
		
	ИначеЕсли ВидРасхода = Перечисление.ВидыРасходов.РеализацияОсновныхСредств Тогда
		ВидыОбъекта = "ОсновныеСредства";
		
	ИначеЕсли ВидРасхода = Перечисление.ВидыРасходов.РеализацияНематериальныхАктивов Тогда
		ВидыОбъекта = "НематериальныеАктивы";
		
	ИначеЕсли ВидРасхода = Перечисление.ВидыРасходов.РеализацияПрочегоИмущества Тогда
		ВидыОбъекта = "Материалы,Оборудование,ОбъектыСтроительства,ЦенныеБумаги";
		
	ИначеЕсли ВидРасхода = Перечисление.ВидыРасходов.ВыбытиеИмущества Тогда
		ВидыОбъекта = "Материалы,Оборудование,ОсновныеСредства,НематериальныеАктивы,ОбъектыСтроительства,ЦенныеБумаги";
	КонецЕсли;
	
	НазначитьТип("ЭлементРасхода", ТипЭлементаРасхода);
	Если ПустоеЗначение(ТипЭлементаРасхода) = 1 Тогда
		Форма.ЭлементРасхода.Доступность(0);
		Форма.ПодписьЭлементРасхода.Доступность(0);
		
	Иначе
		Форма.ЭлементРасхода.Доступность(1);
		Форма.ПодписьЭлементРасхода.Доступность(1);
	КонецЕсли;
	
	Если ПустоеЗначение(ВидыОбъекта) = 0 Тогда
		Если Найти("," + ВидыОбъекта + ",", "," + Объект.Вид() + ",") = 0 Тогда
			Объект = "";
		КонецЕсли;
		Объект.ВидыДляВыбора(ВидыОбъекта);
		Форма.Объект.Доступность(1);
		Форма.ПодписьОбъект.Доступность(1);
		
	Иначе
		Объект = "";
		Форма.Объект.Доступность(0);
		Форма.ПодписьОбъект.Доступность(0);
	КонецЕсли;
	
КонецПроцедуры // ПриИзмененииВидаРасхода()

//******************************************************************************
// ПоКнопкеВыбораДаты()
//
// Параметры:
//
// Возвращаемое значение:
//  Нет.
//
// Вызывается из формул элементов диалога:
//  Кнопка выбора даты.
//
// Описание:
//  Выбирается дата просмотра и редактирования значений периодических реквизитов 
// выбирается по кнопке, чтобы не менялся признак модифицированности формы.
//
Процедура ПоКнопкеВыбораДаты()
	
	глВвестиДатуПериодическихРеквизитов(Контекст, 1);
	
КонецПроцедуры // ПоКнопкеВыбораДаты()

//******************************************************************************
// ПоКнопкеИстория(ВидимыеРеквизиты)
//
// Параметры:
//  ВидимыеРеквизиты - "строка" - идентификаторы периодических реквизитов,
//                     значения которых надо показать, разделенные запятыми;
//                     если не передана - показываются все реквизиты.
//
// Возвращаемое значение:
//  Нет.
//
// Вызывается из формул элементов диалога:
//  Кнопка "История".
//
// Описание:
//  Вызывается обработка "ЗначенияПериодическихРеквизитов" для просмотра истории 
// значений периодических реквизитов.
//
Процедура ПоКнопкеИстория(ВидимыеРеквизиты="")
	
	Стр = "МОЛ,Состояние,ФактическийОбъемПродукцииРаботЗаМесяц,СпециальныйКоэффициент,"+
		  "СчетЗатрат,Субконто1,Субконто2,Субконто3,"+
		  "ВидРасхода,ЭлементРасхода,Объект";
	
	Если ПустоеЗначение(ВидимыеРеквизиты) = 1 Тогда
	    Меню = СоздатьОбъект("СписокЗначений");
		Меню.Установить("Все реквизиты", Стр);
		Меню.Установить("Состояние НМА", "Состояние");
		Меню.Установить("Счет затрат",   "СчетЗатрат, Субконто1, Субконто2, Субконто3");
		Меню.Установить("Вид расхода",   "ВидРасхода, ЭлементРасхода, Объект");
		
		Если Меню.ВыбратьЗначение(ВидимыеРеквизиты, "", 0, 60, 1) <> 1 Тогда
		    Возврат;
		КонецЕсли;
	КонецЕсли;

	глЗначенияПериодическихРеквизитов(Контекст, , , ВидимыеРеквизиты);
	
КонецПроцедуры // ПоКнопкеИстория()

////////////////////////////////////////////////////////////////////////////////
// ПРЕДОПРЕДЕЛЕННЫЕ ПРОЦЕДУРЫ
//
//****************************************************************************** 
// Предопределенная процедура
//
Процедура ВводНового(Копирование)
	
	ИспользоватьДату('01.01.1980');

	Если Копирование = 1 Тогда
	    Возврат;
	КонецЕсли;

	ПорядокНачисленияАмортизации = 2; //Начислять амортизацию по кредиту счета 05
	СпособНачисленияАмортизации = Перечисление.СпособыНачисленияАмортизацииНМА.Линейный;
	СпециальныйКоэффициент = 1;
	Коэффициент = 1;
	
КонецПроцедуры // ВводНового()

//******************************************************************************
// ИнформационнаяСтрока(Учет)
//
// Параметры:
//  Нет.
//
// Возвращаемое значение:
//  Здесь описывается возвращаемое значение.
//
// Вызывается из формул элементов диалога:
//  Нет.
//
// Описание:
//  Здесь описывается функция.
//
Функция ИнформационнаяСтрока()

	Если ПорядокНачисленияАмортизации = 1 Тогда
		Если ВидОбъектаУчета = 0 Тогда // НМА
	    	Стр = "Нематериальный актив не подлежит амортизации.";
			
		Иначе // НИОКР
			Стр = "Расходы на НИОКР не списываются.";
		КонецЕсли;

	Иначе
	    Стр = "";
	КонецЕсли;
	
	Возврат Стр;
	
КонецФункции // ИнформационнаяСтрока()

//******************************************************************************
// Предопределенная процедура
//
Процедура ПриВыбореЗакладки(Номер, Значение)
	
	Если Значение = "Общие сведения" Тогда
		Форма.ИспользоватьСлой("Основной, ОбщиеСведения",2);
		ПриВыбореВидаОбъектаУчета();

	ИначеЕсли Значение = "Бухгалтерский учет" Тогда
		Форма.ИспользоватьСлой("Основной, БухгалтерскийУчет",2);
		Если ПорядокНачисленияАмортизации <> 1 Тогда
			Форма.ИспользоватьСлой("Амортизация", 1);
			ПриВыбореСпособаНачисленияАмортизации();
		КонецЕсли;
		ПриВыбореВидаОбъектаУчета();

	ИначеЕсли Значение = "Налоговый учет" Тогда
		Форма.ИспользоватьСлой("Основной. НалоговыйУчет",2);
		Если ПорядокНачисленияАмортизации <> 1 Тогда
			Форма.ИспользоватьСлой("АмортизацияН", 1);
			ПриВыбореМетодаНачисленияАмортизации();
			Если ДатаПринятияКУчету < '01.01.2002' Тогда
			    Форма.ИспользоватьСлой("АмортизацияДо2002", 1);
			Иначе
				Форма.ИспользоватьСлой("АмортизацияДо2002", 0);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ПриВыбореЗакладки()

//*****************************************************************************
// Предопределенная процедура
//
Процедура ПриНачалеВыбораЗначения(ЭлементДиалога, Флаг)
	
	Если ЭлементДиалога = "ВидРасхода" Тогда
		Флаг = 0;
		Позиция = СписокВидовРасходов.НайтиЗначение(ВидРасхода);
		ВыбранныйВидРасхода = ВидРасхода;
		Если СписокВидовРасходов.ВыбратьЗначение(ВыбранныйВидРасхода,, Позиция,, 2) = 1 Тогда
			Если ВидРасхода <> ВыбранныйВидРасхода Тогда
				ВидРасхода = ВыбранныйВидРасхода;
			    ПриИзмененииВидаРасхода();
				ПриВыбореВидаРасхода();
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли ЭлементДиалога = "ЭлементРасхода" Тогда
		Если ЭлементРасхода.Вид() = "ГруппыВидыРасходов" Тогда
			Флаг = 0;
		КонецЕсли;
		
	ИначеЕсли ЭлементДиалога = "СпособНачисленияАмортизации" Тогда
		Если ВидОбъектаУчета = 1 Тогда // НИОКР
		    Флаг = 0;
			СписокСпособовНачисленияАмортизации = СоздатьОбъект("СписокЗначений");
			СписокСпособовНачисленияАмортизации.ДобавитьЗначение(Перечисление.СпособыНачисленияАмортизацииНМА.Линейный);
			СписокСпособовНачисленияАмортизации.ДобавитьЗначение(Перечисление.СпособыНачисленияАмортизацииНМА.ПропорциональноОбъемуПродукцииРабот);
			СписокСпособовНачисленияАмортизации.ВыбратьЗначение(СпособНачисленияАмортизации,,,, 2);
			ПриВыбореСпособаНачисленияАмортизации();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ПриНачалеВыбораЗначения()

//******************************************************************************
// Предопределенная процедура
//
Процедура ПриОткрытии()
	
	// Форме может быть передана дата просмотра и редактирования значений
	// периодических реквизитов, например, когда форма открыта из обработки
	// "ЗначенияПериодическихРеквизитов".
	глПолучитьДатуПериодическихРеквизитов(Контекст);
	
	// Системно не надо контролировать изменение периодических реквизитов.
	СохранениеПериодическихРеквизитов(2, "*");
	
	Форма.ИспользоватьЗакладки(1);
	Форма.Закладки.ДобавитьЗначение("Общие сведения");
	Форма.Закладки.ДобавитьЗначение("Бухгалтерский учет");
	Форма.Закладки.ДобавитьЗначение("Налоговый учет");
	ПриВыбореЗакладки(, "Общие сведения");
	
	Если ТипЗначенияСтр(Форма.Параметр) = "СписокЗначений" Тогда
		Закладка=Форма.Параметр.Получить("Закладка");
		Если СокрЛП(Закладка) <> "" Тогда 
			Позиция = Форма.Закладки.НайтиЗначение(Закладка);
			Форма.Закладки.ТекущаяСтрока(Позиция);
			ПриВыбореЗакладки(Позиция, Закладка);
		КонецЕсли;
	КонецЕсли;	
	
	СписокВидовОбъекта.ДобавитьЗначение(0, "Нематериальный актив");
	СписокВидовОбъекта.ДобавитьЗначение(1, "Расходы на НИОКР");
	СписокВидовОбъекта.ТекущаяСтрока(СписокВидовОбъекта.НайтиЗначение(ВидОбъектаУчета));
	
	СписокВидовРасходов = СоздатьОбъект("СписокЗначений");
	СписокВидовРасходов.ДобавитьЗначение(Перечисление.ВидыРасходов.КосвенныеРасходы);
	СписокВидовРасходов.ДобавитьЗначение(Перечисление.ВидыРасходов.ПрямыеРасходы);
	СписокВидовРасходов.ДобавитьЗначение(Перечисление.ВидыРасходов.ПриобретениеТоваров);
	СписокВидовРасходов.ДобавитьЗначение(Перечисление.ВидыРасходов.ПриобретениеМатериалов);
	СписокВидовРасходов.ДобавитьЗначение(Перечисление.ВидыРасходов.ПриобретениеОсновныхСредств);
	СписокВидовРасходов.ДобавитьЗначение(Перечисление.ВидыРасходов.СтроительствоОсновныхСредств);
	СписокВидовРасходов.ДобавитьЗначение(Перечисление.ВидыРасходов.ПриобретениеНематериальныхАктивов);
	СписокВидовРасходов.ДобавитьЗначение(Перечисление.ВидыРасходов.ПриобретениеЦенныхБумаг);
	СписокВидовРасходов.ДобавитьЗначение(Перечисление.ВидыРасходов.ПриобретениеПрав);
	СписокВидовРасходов.ДобавитьЗначение(Перечисление.ВидыРасходов.ТранспортныеРасходы);	
	СписокВидовРасходов.ДобавитьЗначение(Перечисление.ВидыРасходов.ПредставительскиеРасходы);
	СписокВидовРасходов.ДобавитьЗначение(Перечисление.ВидыРасходов.РасходыНаРекламу);
	СписокВидовРасходов.ДобавитьЗначение(Перечисление.ВидыРасходов.ГарантийныйРемонтИОбслуживание);
	СписокВидовРасходов.ДобавитьЗначение(Перечисление.ВидыРасходов.НИОКР);
	СписокВидовРасходов.ДобавитьЗначение(Перечисление.ВидыРасходов.ОсвоениеПриродныхРесурсов);
	СписокВидовРасходов.ДобавитьЗначение(Перечисление.ВидыРасходов.ВнереализационныеРасходы);
	СписокВидовРасходов.ДобавитьЗначение(Перечисление.ВидыРасходов.РеализацияОсновныхСредств);
	СписокВидовРасходов.ДобавитьЗначение(Перечисление.ВидыРасходов.РеализацияПрочегоИмущества);
	СписокВидовРасходов.ДобавитьЗначение(Перечисление.ВидыРасходов.БезвозмезднаяПередачаИмущества);
	СписокВидовРасходов.ДобавитьЗначение(Перечисление.ВидыРасходов.НеПринимаемые);
	
	ПриИзмененииВидаРасхода();
	
КонецПроцедуры // ПриОткрытии()

//******************************************************************************
// Предопределенная процедура.
//
Процедура ПриПовторномОткрытии()
	
	// Форме может быть передана дата просмотра и редактирования значений
	// периодических реквизитов, например, когда форма открыта из обработки
	// "ЗначенияПериодическихРеквизитов".
	глПолучитьДатуПериодическихРеквизитов(Контекст);
	
КонецПроцедуры // ПриПовторномОткрытии()

//******************************************************************************
// Предопределенная процедура
//
Процедура ПриЗаписи()
	
	СтатусВозврата(глБухЗаписьПериодическихРеквизитов(Контекст));
	
КонецПроцедуры // ПриЗаписи()