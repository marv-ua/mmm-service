Перем Таб;
Перем ИтогСуммаУпр;
Перем ИтогСуммаПроизв;
Перем ИтогНеПринимаемыеСумма;
Перем ДатаНачалаНалоговогоПериода2003;

//******************************************************************************
// ПроверкаПериода()
//
// Возвращаемое значение:
//  1 - корректно выбран период в диалоге
//  0 - не корректно выбран период в диалоге
//
// Описание:
// Функция проверяет корректность ввода интервала дат в дилоге
//
Функция ПроверкаПериода()
	
	Если (НачДата > КонДата) Тогда
		Предупреждение("Неправильно задан период формирования отчета!"+РазделительСтрок+
		               "Дата начала больше даты окончания периода.", 60);
		Возврат 0;

	ИначеЕсли ПустоеЗначение(ДатаНачалаНалоговогоПериода2003) = 0 Тогда
		
		Если ((НачДата < ДатаНачалаНалоговогоПериода2003)
		   и  (КонДата >= ДатаНачалаНалоговогоПериода2003)) Тогда
			Предупреждение("Неправильно задан период формирования отчета!"+РазделительСтрок+
			               "В выбранном интервале налоговый учет велся по"+РазделительСтрок+
						   "разным правилам."+РазделительСтрок+
						   "Отчет за данный период сформировать невозможно!", 60);
			Возврат 0;
		    
		КонецЕсли;

	КонецЕсли;
	
	Возврат 1;
	
КонецФункции // ПроверкаПериода()

//******************************************************************************
// ПолучитьСписокСоответствияВидовРасхода()
//
// Параметры:
//  Нет.
//
// Возвращаемое значение:
//  СписокЗначений -список соответствий счетов
//  налогового учета видам расходов.
//
// Описание:
//  Здесь описывается функция.
//
Функция ПолучитьСписокСоответствияВидовРасхода()
	
	// Наименование операции
	СписокСоответствия = СоздатьОбъект("СписокЗначений");
	
	// Внеоборотные активы
	СписокСоответствия.ДобавитьЗначение(СчетПоКоду("Н01.01"), "Приобретение ОС");
	СписокСоответствия.ДобавитьЗначение(СчетПоКоду("Н01.02"), "Приобретение оборудования");
	СписокСоответствия.ДобавитьЗначение(СчетПоКоду("Н01.03"), "Расходы на НИОКР");
	СписокСоответствия.ДобавитьЗначение(СчетПоКоду("Н01.04"), "Расходы на освоение приретение ресурсов");
	СписокСоответствия.ДобавитьЗначение(СчетПоКоду("Н01.05"), "Прямые расходы");
	СписокСоответствия.ДобавитьЗначение(СчетПоКоду("Н01.06"), "Прямые расходы подлежащие распределению");
	СписокСоответствия.ДобавитьЗначение(СчетПоКоду("Н01.07"), "Транспортные расходы");
	СписокСоответствия.ДобавитьЗначение(СчетПоКоду("Н01.08"), "Расходы на приобретение НМА");
	СписокСоответствия.ДобавитьЗначение(СчетПоКоду("Н01.09"), "Расходы строительство ОС");
	
	// ТМЦ
	СписокСоответствия.ДобавитьЗначение(СчетПоКоду("Н02.01"), "Поступление материалов");
	СписокСоответствия.ДобавитьЗначение(СчетПоКоду("Н02.02.1"), "Приобретение товаров");
	СписокСоответствия.ДобавитьЗначение(СчетПоКоду("Н02.02.2"), "Приобретение товаров");
	СписокСоответствия.ДобавитьЗначение(СчетПоКоду("Н02.05"), "Приобретение ценных бумаг");
	СписокСоответствия.ДобавитьЗначение(СчетПоКоду("Н02.06"), "Приобретение прав требования");
	
	// Нормируемые			
	СписокСоответствия.ДобавитьЗначение(СчетПоКоду("Н03.01"), "Расходы на гарантийный ремонт");
	СписокСоответствия.ДобавитьЗначение(СчетПоКоду("Н03.03"), "Представительские расходы");
	СписокСоответствия.ДобавитьЗначение(СчетПоКоду("Н03.04"), "Расходы на рекламу (нормируемые)");
	
	// Приобретение работ и услуг относящихся к РБП
	СписокСоответствия.ДобавитьЗначение(СчетПоКоду("Н04.05"), "Долгосрочное страхование жизни");
	СписокСоответствия.ДобавитьЗначение(СчетПоКоду("Н04.06"), "Страхование на оплату медицинских расходов");
	СписокСоответствия.ДобавитьЗначение(СчетПоКоду("Н04.07"), "Страхование на случай смерти и утраты трудоспосбности");
	СписокСоответствия.ДобавитьЗначение(СчетПоКоду("Н04.08"), "Страхование имущества");
	СписокСоответствия.ДобавитьЗначение(СчетПоКоду("Н04.09"), "Принятие к учету РБП");
	
	// Приобретение работ и услуг относящихся на текущие расходы
	СписокСоответствия.ДобавитьЗначение(СчетПоКоду("Н07.06"), "Расходы связанные с реализацией прочего имущества");
	СписокСоответствия.ДобавитьЗначение(СчетПоКоду("Н07.07"), "Расходы связанные с реализацией ОС");
	СписокСоответствия.ДобавитьЗначение(СчетПоКоду("Н07.08"), "Расходы связанные с реализацией НМА");
	
	СписокСоответствия.ДобавитьЗначение(СчетПоКоду("Н07.13"), "Расходы обслуживающих производств");
	СписокСоответствия.ДобавитьЗначение(СчетПоКоду("Н07.14"), "Расходы, связанные с приобретением ЦБ");
	СписокСоответствия.ДобавитьЗначение(СчетПоКоду("Н12"),    "Целевое финансирование");
	
	Возврат СписокСоответствия;
	
КонецФункции // ПолучитьСписокСоответствияВидовРасхода() 

//******************************************************************************
// ПолучитьВидРасходовИОбъектУчета()
//
// Параметры:
//  Нет.
//
// Возвращаемое значение:
//  Здесь описывается возвращаемое значение.
//
// Вызывается из формул элементов диалога:
//  Нет.
//
// Описание:
//  Здесь описывается функция.
//
Функция ПолучитьВидРасходовИОбъектУчета(СписокСоответствияВидовРасхода, Счет, Субконто1, Субконто2, Субконто3,
	                                    ВидРасхода, ОбъектУчета) Экспорт
										
	ВидРасхода = ""; ОбъектУчета ="";
	Найдено = СписокСоответствияВидовРасхода.НайтиЗначение(Счет);
	                 
	// Счет найден в списке
	Если Найдено <> 0 Тогда
		СписокСоответствияВидовРасхода.ПолучитьЗначение(Найдено, ВидРасхода);
	                                          
	// Если в таблице не найден вид расходов по счету,
	// то в этом случае вид расходов определяется особым образом.
	ИначеЕсли ПустоеЗначение(ВидРасхода) = 1 Тогда 
        Если Субконто1 = Перечисление.ГруппыВидыРасходов.НеПринимаемые Тогда
            ВидРасхода = Субконто1;
			
	    ИначеЕсли Счет.Код = "Н07.04.1" Тогда
	        ВидРасхода = "Косвенные расходы (" + Субконто1 + ")";
			
		ИначеЕсли Счет.Код = "Н07.04.2" Тогда
	        ВидРасхода = "Косвенные расходы (" + Субконто1 + ")";
			
		ИначеЕсли Счет.Код = "Н09" Тогда
		    ВидРасхода = Субконто1;
	    КонецЕсли;
	КонецЕсли;
	
КонецФункции // ПолучитьВидРасходовИОбъектУчета() 

//******************************************************************************
// ФормированиеПоСтарому()
//
// Параметры:
//  Нет.
//
// Вызывается из формул элементов диалога:
//  Нет.
//
// Описание:
//  Формирование регистра производится по старому образцу.
//
Процедура ФормированиеПоСтарому()
	
	ТаблицаОпераций = СоздатьОбъект("ТаблицаЗначений");
	ТаблицаОпераций.НоваяКолонка("Документ", "Документ");
	ТаблицаОпераций.НоваяКолонка("Сотрудник", "Справочник.Сотрудники");
	ТаблицаОпераций.НоваяКолонка("ВидПерсонала", "Строка", 6);
	ТаблицаОпераций.НоваяКолонка("НаименованиеРасхода", "Перечисление.ВидыНачисленийПоОплатеТруда" );
	ТаблицаОпераций.НоваяКолонка("Сумма", "Число", 15, 2);
	ТаблицаОпераций.НоваяКолонка("ОбъектУчета", "Строка");
	
	//Создание объекта типа Запрос
	Запрос = СоздатьОбъект("Запрос");
	ТекстЗапроса = 
	"//{{ЗАПРОС(Сформировать)
	|Период с НачДата по КонДата;
	|ОбрабатыватьДокументы все;
	|Обрабатывать НеПомеченныеНаУдаление;
	|
	|ДатаДок = Документ.РасходыНаОплатуТруда.ДатаДок;
	|Сотрудник = Документ.РасходыНаОплатуТруда.Сотрудник;
	|ВидПерсонала = Документ.РасходыНаОплатуТруда.ВидПерсонала;
	|ВидНачисления = Документ.РасходыНаОплатуТруда.ВидНачисления;
	|Сумма = Документ.РасходыНаОплатуТруда.Сумма;
	|ВидРасхода = Документ.РасходыНаОплатуТруда.ВидРасхода;
	|Объект = Документ.РасходыНаОплатуТруда.Объект;
	|
	|Функция СуммаСумма = Сумма(Сумма);
	|
	|Группировка Документ;
	|Группировка СтрокаДокумента;
	|
	|Условие(ВидРасхода <> Перечисление.ВидыРасходов.РасходыБудущихПериодов);
	|"//}}ЗАПРОС
	;

	Запрос.Выполнить(ТекстЗапроса);

	Состояние("Заполнение выходной таблицы...");

	Пока Запрос.Группировка("Документ") = 1 Цикл
		Пока Запрос.Группировка("СтрокаДокумента") = 1 Цикл
			Если Запрос.ВидПерсонала = "+" Тогда
			    АУП = "АУП";
				ИтогСуммаУпр = ИтогСуммаУпр + Запрос.СуммаСумма;
			Иначе
				АУП = "Прочие";
				ИтогСуммаПроизв= ИтогСуммаПроизв + Запрос.СуммаСумма;
			КонецЕсли;
			
			ОбъектУчета = "" + Запрос.ВидРасхода;
			Если ПустоеЗначение(Запрос.Объект) = 0 Тогда
			    ОбъектУчета = ОбъектУчета + ", " + Запрос.Объект;
			КонецЕсли;
			                
			ТаблицаОпераций.НоваяСтрока();
			ТаблицаОпераций.Документ            = Запрос.Документ;
			ТаблицаОпераций.Сотрудник           = Запрос.Сотрудник;
			ТаблицаОпераций.ВидПерсонала        = АУП;
			ТаблицаОпераций.НаименованиеРасхода = Запрос.ВидНачисления;
			ТаблицаОпераций.Сумма               = Запрос.СуммаСумма;
			ТаблицаОпераций.ОбъектУчета         = ОбъектУчета;
		КонецЦикла;
	КонецЦикла;
	
	
	// Отберем проводки с кредита счета Н04.10 (РБП)
	Опер = СоздатьОбъект("Операция");  
	Опер.ВыбратьОперацииСПроводками(НачДата, КонДата, "*,Н04.10");
	Пока Опер.ПолучитьПроводку() = 1 Цикл                   
		Документ = Опер.Документ;
		СтатьяРасхода = Опер.Кредит.РасходыБудущихПериодов;
		Сотрудник = Опер.Кредит.Сотрудники;
		Сумма = Опер.Сумма;
		ВидПерсонала = Сотрудник.Подразделение.Получить(Документ.ДатаДок).Административное;
		Если ВидПерсонала = 1 Тогда
		    АУП = "АУП";
			ИтогСуммаУпр = ИтогСуммаУпр + Сумма;
		Иначе
			АУП = "Прочие";
			ИтогСуммаПроизв= ИтогСуммаПроизв + Сумма;
		КонецЕсли;
		
		ОбъектУчета = "" + СтатьяРасхода.ВидРасхода;
		Если ПустоеЗначение(СтатьяРасхода.Объект) = 0 Тогда
		    ОбъектУчета = ОбъектУчета + ", " + СтатьяРасхода.Объект;
		КонецЕсли;
		
		ТаблицаОпераций.НоваяСтрока();
		ТаблицаОпераций.Документ     = Документ;
		ТаблицаОпераций.Сотрудник    = Сотрудник;
		ТаблицаОпераций.ВидПерсонала = АУП;
		ТаблицаОпераций.НаименованиеРасхода = СтатьяРасхода.ВидНачисления;
		ТаблицаОпераций.Сумма        = Сумма;
		ТаблицаОпераций.ОбъектУчета  = ОбъектУчета;
	КонецЦикла;
	                                                   
	ТаблицаОпераций.Сортировать("Документ", 1);
	
	ТаблицаОпераций.ВыбратьСтроки();
	Пока ТаблицаОпераций.ПолучитьСтроку() = 1 Цикл
		Док                 = ТаблицаОпераций.Документ;
	    ДатаРасхода         = ТаблицаОпераций.Документ.ДатаДок;
		Сотрудник           = ТаблицаОпераций.Сотрудник;
		ВидПерсонала        = ТаблицаОпераций.ВидПерсонала;
		НаименованиеРасхода = ТаблицаОпераций.НаименованиеРасхода;;
		ПечСумма            = ФорматС(ТаблицаОпераций.Сумма);
		ОбъектУчета         = ТаблицаОпераций.ОбъектУчета;
		Таб.ВывестиСекцию("Строка");
	КонецЦикла;

КонецПроцедуры // ФормированиеПоСтарому()

//******************************************************************************
// ФормированиеПоНовому()
//
// Параметры:
//  Нет.
//
// Вызывается из формул элементов диалога:
//  Нет.
//
// Описание:
//  Формирование регистра производится
//  в соответствии с новыми методами ведения налогового учета.
//
Процедура ФормированиеПоНовому()
	                   
	СписокСоответствияВидовРасхода = ПолучитьСписокСоответствияВидовРасхода();
	        
	Опер = СоздатьОбъект("Операция");  
	Опер.ВыбратьОперацииСПроводками(НачДата, КонДата, "*,Н14; *,Н04.10",,,);
	Пока Опер.ПолучитьПроводку() = 1 Цикл
		Док         = Опер.Документ;
		ДатаРасхода = Док.ДатаДок;
		Сотрудник   = Опер.Кредит.Сотрудники;
		СчетКредита = Опер.Кредит.Счет;
		Сумма = Опер.Сумма;
		
		Если СчетКредита.Код = "Н14.01" Тогда
			ВидПерсонала        = "АУП";
			НаименованиеРасхода = Опер.Кредит.ВидыНачисленийПоОплатеТруда;
			Если Опер.Дебет.Субконто(1) = Перечисление.ГруппыВидыРасходов.НеПринимаемые Тогда
				ИтогНеПринимаемыеСумма = ИтогНеПринимаемыеСумма + Сумма;
				
			Иначе
				ИтогСуммаУпр = ИтогСуммаУпр + Сумма;
			КонецЕсли;
			
		ИначеЕсли СчетКредита.Код = "Н14.02" Тогда
			ВидПерсонала        = "Прочие";
			НаименованиеРасхода = Опер.Кредит.ВидыНачисленийПоОплатеТруда;
			Если Опер.Дебет.Субконто(1) = Перечисление.ГруппыВидыРасходов.НеПринимаемые Тогда
				ИтогНеПринимаемыеСумма = ИтогНеПринимаемыеСумма + Сумма;
				
			Иначе
				ИтогСуммаПроизв= ИтогСуммаПроизв + Сумма;
			КонецЕсли;
			
		Иначе // счет = Н04.10
			
			СтатьяРасхода = Опер.Кредит.РасходыБудущихПериодов;
			НаименованиеРасхода = СтатьяРасхода.ВидНачисления;
			
			АУП = Сотрудник.Подразделение.Получить(Док.ДатаДок).Административное;
			Если АУП = 1 Тогда
			    ВидПерсонала = "АУП";
				Если СтатьяРасхода.ВидРасхода = Перечисление.ГруппыВидыРасходов.НеПринимаемые Тогда
					ИтогНеПринимаемыеСумма = ИтогНеПринимаемыеСумма + Сумма;
					
				Иначе
					ИтогСуммаУпр = ИтогСуммаУпр + Сумма;
				КонецЕсли;
				
			Иначе
				ВидПерсонала = "Прочие";
				Если СтатьяРасхода.ВидРасхода = Перечисление.ГруппыВидыРасходов.НеПринимаемые Тогда
					ИтогНеПринимаемыеСумма = ИтогНеПринимаемыеСумма + Сумма;
					
				Иначе
					ИтогСуммаПроизв= ИтогСуммаПроизв + Сумма;
				КонецЕсли;
			КонецЕсли;
			
			
		КонецЕсли;
		
		ВидРасхода = ""; Объект = "";
		ПолучитьВидРасходовИОбъектУчета(СписокСоответствияВидовРасхода,
		                                Опер.Дебет.Счет, Опер.Дебет.Субконто(1),
										Опер.Дебет.Субконто(2), Опер.Дебет.Субконто(3),
	                                    ВидРасхода, Объект);
										
		ОбъектУчета = ?(ВидРасхода = "", "", "" + ВидРасхода) + Объект;
		Если ТипЗначенияСтр(Опер.Дебет.Субконто(1)) = "Справочник"  Тогда
		    ОбъектУчета = ОбъектУчета + ", " + Опер.Дебет.Субконто(1);
		КонецЕсли;
		
		ПечСумма = ФорматС(Сумма);
		Таб.ВывестиСекцию("Строка");
	КонецЦикла;
	
КонецПроцедуры // ФормированиеПоНовому()

//******************************************************************************
//
Процедура Сформировать()
	
	ДатаНачалаНалоговогоПериода2003 = ПолучитьПустоеЗначение("Дата");
	глНовыеПравилаВеденияНУ(КонДата, ДатаНачалаНалоговогоПериода2003);

	Если ПроверкаПериода() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Таб = СоздатьОбъект("Таблица");
	СтрНалогоплательщик = Константа.ОфициальноеНазваниеОрганизации;
	Если ПустаяСтрока(СтрНалогоплательщик) = 1 Тогда
		СтрНалогоплательщик = Константа.НазваниеОрганизации;	    
	КонецЕсли;
	ИНН = Константа.ИННОрганизации;
	Таб.ВывестиСекцию("Шапка");
	
	ИтогСуммаУпр    = 0;
	ИтогСуммаПроизв = 0;
	ИтогНеПринимаемыеСумма =0;
	
	Если глНовыеПравилаВеденияНУ(КонДата) = 1 Тогда
	    ФормированиеПоНовому();
		
	Иначе
		ФормированиеПоСтарому();
	КонецЕсли;
	
	ОтветственныйЗаСоставление = ФИО(Константа.ОтветственныйЗаСоставлениеРегистровНУ);
	ИтогСуммаУпр = ФорматС(ИтогСуммаУпр);
	ИтогСуммаПроизв = ФорматС(ИтогСуммаПроизв);    
	ИтогНеПринимаемыеСумма = ФорматС(ИтогНеПринимаемыеСумма);
	Таб.ВывестиСекцию("Подвал");
	
	
	Таб.ТолькоПросмотр(1);
	Таб.ОбластьПечати(,2,,);
	Таб.Опции(0, 0, 0, 0, "ПечатьРегистрУчетаРасходовНаОплатуТруда", "ОкноРегистрУчетаРасходовНаОплатуТруда");
	Таб.Показать("Регистр учета расходов по оплате труда");

КонецПроцедуры // Сформировать  

//_____________________________________________________________________________
Процедура ПриОткрытии() //предопределенная
	НачДата = НачалоПериодаБИ();
	КонДата = КонецПериодаБИ();
КонецПроцедуры //ПриОткрытии
