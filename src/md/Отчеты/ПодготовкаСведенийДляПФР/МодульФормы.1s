Перем Год;						// год за который формируем данные
Перем ПрошлыйГод;  				// год перед изменением
Перем ДатаНачала;  				// дата начала отчетного периода
Перем ДатаОкончания;			// дата окончания отчетного периода
Перем НомерОтображаемойПачки;	// номер пачки, документы которой отображаются в контроле Документы
Перем ИмяТекущегоФайлаНастроек;	// имя текущего файла настроек

Перем констДлинаОписателяПачки;
Перем констРазмерПачки;

Перем констКод10;
Перем констКод1;

Перем ТипФормыПачки;
                                      
Перем КатегорияВсех;

Функция ВыбратьПачку(ВУПЛ=1, Печать=0) Далее
Процедура СохранитьТаблицуПеречислений() Далее
Процедура ВосстановитьТаблицуПеречислений() Далее 

Процедура НаДиск(ПереданныйНомерПачки = "", Показать = 1) Далее    
Функция глДополнитьСтроку(Знач Парам, Длина, Символ = "0", Режим = 0) Далее


//******************************************************************************
//	хмлТарифСтраховыхВзносов(хмлПачкаСЗВ4)
//
//	Параметры:
//		хмлПачкаСЗВ4 - тег СЗВ4   
// 
//	Описание:
//		Формирует теги о страхователе
//
Процедура хмлТарифСтраховыхВзносов(хмлПачкаСЗВ4, КодАВИА)
	         
	СХПредприятие = 0;
	
	хмл_ТарифСтраховыхВзносов	= хмлПачкаСЗВ4.СоздатьПодчиненныйЭлемент("ТарифСтраховыхВзносов");
	
	хмлКодКатегории				= хмл_ТарифСтраховыхВзносов.СоздатьПодчиненныйЭлемент("КодКатегории");	
	хмлКодКатегории.Значение	= ?(СХПредприятие = 0, "НР", "СХ");
	
	хмлКодДополнительногоТарифа			= хмл_ТарифСтраховыхВзносов.СоздатьПодчиненныйЭлемент("КодДополнительногоТарифа");
	хмлКодДополнительногоТарифа.Значение= КодАВИА;
	
	хмлНазваниеКатегории			= хмл_ТарифСтраховыхВзносов.СоздатьПодчиненныйЭлемент("НазваниеКатегории");
	хмлНазваниеКатегории.Значение	= ?(СХПредприятие = 0, "НАЕМ/РАБОТНИК", "С/Х ОРГАНИЗАЦИЯ");  
	
	хмлНазваниеДополнительногоТарифа			= хмл_ТарифСтраховыхВзносов.СоздатьПодчиненныйЭлемент("НазваниеДополнительногоТарифа");
	хмлНазваниеДополнительногоТарифа.Значение	= КодАВИА;	
	
КонецПроцедуры //хмлТарифСтраховыхВзносов

//******************************************************************************
// НайтиПервыйСуществующийФайл(СписокВозможныхМест)
//
// Параметры: 
//  СписокВозможныхМест
//
// Возвращаемое значение:
//
// Описание:
//
Функция НайтиПервыйСуществующийФайл(СписокВозможныхМест)
	
	Для Сч = 1 По СписокВозможныхМест.РазмерСписка() Цикл
		ПолноеИмя	=	СписокВозможныхМест.ПолучитьЗначение(Сч);
		Если Фс.СуществуетФайл(ПолноеИмя) = 1 Тогда	Возврат(ПолноеИмя)	КонецЕсли;
	КонецЦикла;

	Возврат("");

КонецФункции // НайтиПервыйСуществующийФайл()

//******************************************************************************

//	ПриВыбореГода()
//
//	Параметры:
//		нет   
// 
//	Вызывается из формул элементов диалога:
//		Год
// 
// 	Возвращаемое значение:
//		нет
//
//	Описание:
//
Процедура ПриВыбореГода()
	Год				=	ДатаГод(ДатаПо);
	ДатаНачалаГода	=	НачГода(ДатаПо); 
	ДатаОкончания	=	НачГода(ДатаПо); 
	ДатаКонцаГода	=	ДатаПо;
	ДатаОкончания	=	ДатаПо;
	ТекстПериода	=	ПериодСтр(ДатаНачалаГода,ДатаПо);
	Если (Год > 2006) и (ТипФормируемыхДокументов < 3) Тогда
		Форматы.ТекущаяСтрока(2);
	КонецЕсли;
	
КонецПроцедуры //ПриВыбореГода


//*****************************************************************************
// глДатаПрописьюВОтчет(ДатаОтчета)
//
// Параметры
//
// Возвращаемое значение
//		возвращает строку в виде "ДД" ММММ ГГГГ
//		где ДД - день ММММ - месяц прописью и ГГГГ - год числом.
//
// Описание
//
Функция глДатаПрописьюВОтчет(ДатаОтчета) Экспорт
	ДатаСтрокой = СокрЛП(Формат(ДатаОтчета, "ДДДММММГГГГ"));
	Если (ПустоеЗначение(ДатаСтрокой) =  0) и (СтрДлина(ДатаСтрокой) > 4) тогда
		ПозДня = Найти(ДатаСтрокой, " ");
		День = Лев(ДатаСтрокой, ПозДня - 1);
		ОстальнаяЧасть = СокрЛП(Прав(ДатаСтрокой, СтрДлина(ДатаСтрокой) - ПозДня));
		Возврат """" + День + """ " + ОстальнаяЧасть;
	Иначе 
		Возврат """____"" ___________________ 200_ года";
	КонецЕсли;
КонецФункции // глДатаПрописьюВОтчет

//******************************************************************************
//	глРазделить(Стр,Разделитель)
//
//	Параметры:
//		Стр			- строка, которую необходимо разложить на подстроки
//		Разделитель - строка-разделитель, по умолчанию - запятая
//
//	Возвращаемое значение:
//		Многострочная строка, составленная из подстрок
//
//	Описание:
//		Разбивает строку на многострочную строку по разделителю
//
Функция глРазделить(Знач Стр,Разделитель=",")
	Если Разделитель=" " Тогда
		Пока Найти(Стр,"  ")>0 Цикл
			Стр = СтрЗаменить(Стр,"  "," ")
		КонецЦикла
	КонецЕсли;
	Возврат СтрЗаменить(Стр,Разделитель,РазделительСтрок)
КонецФункции	// глРазделить

//******************************************************************************
//	глКатегорияПФР()
//
Функция глКатегорияПФР() 
	
	Возврат Перечисление.КатегорияПлательщикаПФ.НР;

КонецФункции	// глКатегорияПФР

//******************************************************************************
//	глТипВидЗначения(Значение)
//
//	Параметры:
//		Значение - какое-то значение
//
//	Возвращаемое значение:
//		Возвращает строковое обозначение типа данных: Тип.Вид
//
//	Описание:
//		Разбирает тип данных и возвращает тип.вид данных через точку
//
Функция глТипВидЗначения(Значение)

	Попытка
		Возврат ТипЗначенияСтр(Значение)+"."+Значение.Вид()
	Исключение
	КонецПопытки;
	Возврат ТипЗначенияСтр(Значение)

КонецФункции	// глТипВидЗначения

//******************************************************************************
// глДополнитьСтроку(Парам,Длина)
//
// Параметры:
//		Парам - число или строка
//  	Длина - число (целое), длина строки.
//		Символ - символ, которым будет дополняться строка до нужной длины
//		Режим - число - режим дополнения: 0 - слева, 1 - справа
//
// Возвращаемое значение:
//      строка
//
// Описание:
//      пример использования: 
//      глДополнитьСтроку(8,2) = "08"
//      глДополнитьСтроку("стр", 5, "-") = "--стр"
//      глДополнитьСтроку(12,4,"0",1) = "1200"
//
Функция глДополнитьСтроку(Знач Парам, Длина, Символ = "0", Режим = 0)
	Парам = ""+Парам;  // превращаем параметр в строку
	Добавить = Длина - СтрДлина(Парам);
	Если Добавить>0  Тогда
		Добавок="";
		Для Сч = 1 По Добавить  Цикл
			Добавок=Добавок+Символ
		КонецЦикла;
		Возврат ?(Режим=0,Добавок+Парам, Парам+Добавок);
	Иначе
		Возврат	Парам;
	КонецЕсли;
КонецФункции // глДополнитьСтроку()

//******************************************************************************
// глСобратьСтрокуПенсииЗаВыслугуЛет(КодОснования,СписокПараметров)
//
// Параметры:
//		КодОснования -	эл-т перечисления СЗВОснованияВыслугиЛет, основание
//						пенсии за выслугу лет
//		СписокПараметров -	список значений, дополнительные параметры
//
// Возвращаемое значение:
//		строка
//
// Описание:
//		Предназначена для формирования строки "дополнительных сведений" по выслуге 
//		лет в "удобочитаемом" виде для отражения в формах.
//
Функция глСобратьСтрокуПенсииЗаВыслугуЛет(КодОснования,СписокПараметров)
	
	ПервыйПараметр=СписокПараметров.ПолучитьЗначение(1);
	ВторойПараметр=СписокПараметров.ПолучитьЗначение(2);
	
	Если (КодОснования=Перечисление.СЗВОснованияВыслугиЛет.ИСПКЛС1) или (КодОснования=Перечисление.СЗВОснованияВыслугиЛет.САМОЛЕТ) или (КодОснования=Перечисление.СЗВОснованияВыслугиЛет.СПЕЦАВ) или (КодОснования=Перечисление.СЗВОснованияВыслугиЛет.ЛЕТИСП) или (КодОснования=Перечисление.СЗВОснованияВыслугиЛет.ИТСИСП) или (КодОснования=Перечисление.СЗВОснованияВыслугиЛет.ИНСПЕКТ) 
	или (КодОснования=Перечисление.СЗВОснованияВыслугиЛет2002.ИСПКЛС1) или (КодОснования=Перечисление.СЗВОснованияВыслугиЛет2002.САМОЛЕТ) или (КодОснования=Перечисление.СЗВОснованияВыслугиЛет2002.СПЕЦАВ) или (КодОснования=Перечисление.СЗВОснованияВыслугиЛет2002.ЛЕТИСП) или (КодОснования=Перечисление.СЗВОснованияВыслугиЛет2002.ИТСИСП) или (КодОснования=Перечисление.СЗВОснованияВыслугиЛет2002.ИНСПЕКТ)
	или (КодОснования=Перечисление.СЗВОснованияВыслугиЛет2002.ИТСМАВ) или (КодОснования=Перечисление.СЗВОснованияВыслугиЛет2002.ОПЫТИСП) Тогда
		Возврат ?(ПервыйПараметр>0,""+ПервыйПараметр+" ч ","")+?(ВторойПараметр>0,""+ВторойПараметр+" мин","");
	ИначеЕсли (КодОснования=Перечисление.СЗВОснованияВыслугиЛет.РЕАКТИВН) или (КодОснования=Перечисление.СЗВОснованияВыслугиЛет.НОРМСП) 
	или (КодОснования=Перечисление.СЗВОснованияВыслугиЛет2002.РЕАКТИВН) или (КодОснования=Перечисление.СЗВОснованияВыслугиЛет2002.НОРМСП) Тогда
		Возврат ?(ПервыйПараметр>0,""+ПервыйПараметр+" прыжков ","");
	ИначеЕсли (КодОснования=Перечисление.СЗВОснованияВыслугиЛет.УВД) или (КодОснования=Перечисление.СЗВОснованияВыслугиЛет.ИТС) 
	или (КодОснования=Перечисление.СЗВОснованияВыслугиЛет2002.ст27п14) или (КодОснования=Перечисление.СЗВОснованияВыслугиЛет2002.ст27п15) Тогда
		Возврат ?(ПервыйПараметр>0,""+ПервыйПараметр+" м ","")+?(ВторойПараметр>0,""+ВторойПараметр+" дн ","");
	ИначеЕсли (КодОснования=Перечисление.СЗВОснованияВыслугиЛет.ХИРУРГД) или (КодОснования=Перечисление.СЗВОснованияВыслугиЛет.ХИРУРСМ) или (КодОснования=Перечисление.СЗВОснованияВыслугиЛет.ЗП81ГД) или (КодОснования=Перечисление.СЗВОснованияВыслугиЛет.ЗП81СМ) 
	или (КодОснования=Перечисление.СЗВОснованияВыслугиЛет2002.ст28пГДХР) или (КодОснования=Перечисление.СЗВОснованияВыслугиЛет2002.ст28пСМХР) или (КодОснования=Перечисление.СЗВОснованияВыслугиЛет2002.ст28пГД) или (КодОснования=Перечисление.СЗВОснованияВыслугиЛет2002.ст28пСМ) Тогда
		ТретийПараметр=СписокПараметров.ПолучитьЗначение(3);
		Возврат ?(ТретийПараметр>0,""+ТретийПараметр+" ставок ","");
	ИначеЕсли (КодОснования=Перечисление.СЗВОснованияВыслугиЛет.ЗП80РК) или (КодОснования=Перечисление.СЗВОснованияВыслугиЛет.ЗП80ПД) 
	или (КодОснования=Перечисление.СЗВОснованияВыслугиЛет2002.ст28пПДРК) или (КодОснования=Перечисление.СЗВОснованияВыслугиЛет2002.ст28пПД) Тогда
		ТретийПараметр=СписокПараметров.ПолучитьЗначение(3);
		Возврат ?(ПервыйПараметр>0,""+ПервыйПараметр+" ч ","")+?(ТретийПараметр>0,""+ТретийПараметр+" ставок ","");
	КонецЕсли;
	
КонецФункции // глСобратьСтрокуПенсииЗаВыслугуЛет()

//******************************************************************************
// глПолучитьУникальныйКодСотрудника(Код)
//
// Параметры:
//		Код - строка - код элемента спр. Сотрудники
//			или эл-т справочника Сотрудники
//
// Возвращаемое значение:
//		строка длины 10  
//
// Описание:
//  
//
Функция глПолучитьУникальныйКодСотрудника(Код)
	
	Если ТипЗначения(Код) = 2 Тогда // передана строка
	    СтрокаКода = СокрЛП(Код);
	ИначеЕсли глТипВидЗначения(Код) = "Справочник.Сотрудники" Тогда
		СтрокаКода = СокрЛП(Код.Код);
	Иначе
		Возврат ""
	КонецЕсли;
	
	Возврат глДополнитьСтроку(СтрокаКода,10,":")
	
КонецФункции // глПолучитьУникальныйКодСотрудника()

//******************************************************************************
//	
//
//	Параметры:
//		ВвестиКлюч - число. 1 - создать ключевую колонку для поиска, 0 - не создавать
//					по умолчанию - 0
// 
// 	Возвращаемое значение:
//		Таблица значений для хранения распределения документов по пачкам
//
//	Описание:
// 		Инициализирует таблицу значений определенной структуры
//
Функция ПолучитьКлюч(Сотр,Катег="",ТипФормы="",СчМес="")
	Ключ = Формат(	ЗначениеВСтрокуВнутр(Сотр)
		+?(Число(Год)<2002,ЗначениеВСтрокуВнутр(Катег),"")
		+?(ПустоеЗначение(ТипФормы)=1,"",ЗначениеВСтрокуВнутр(ТипФормы))+
		СчМес,"С200");
	Возврат Ключ;
	
КонецФункции

//******************************************************************************
// СобратьДанныеДляЕСН(ДоходыВычетыНалогиСотрудников,ОбобщенныйСотрудник)
//
// Параметры:
//  ОбобщенныйСотрудник - эл-т спр.Сотрудники (соответствует "основному" элементу 
//                        сотрудника) или список таких элементов, 
//                        определяет список сотрудников, для которых выполняется
//                        обработка данных; если список пуст - то по всем сотрудникам
// Возвращаемое значение:
//      число 1 или 0 - удалось (не удалось) собрать данные в таблицу
//
// Описание:
//  
//
Функция СобратьДанныеДляЕСН(ДоходыВычетыНалогиСотрудников, ОбобщенныйСотрудник)
	
	//  проинициализируем выходную таблицу значений
	ДоходыВычетыНалогиСотрудников=СоздатьОбъект("ТаблицаЗначений");
	ДоходыВычетыНалогиСотрудников.НоваяКолонка(,"Строка",12); 
	ДоходыВычетыНалогиСотрудников.НоваяКолонка(,"Число",15,2); // 2-Взносы на страховую пенсию
	ДоходыВычетыНалогиСотрудников.НоваяКолонка(,"Число",15,2); // 3-Взносы на накопительную пенсию
	
	Сч69_2_2 = СчетПоКоду("69.2.2");
	
	БухИт = СоздатьОбъект("БухгалтерскиеИтоги");
	БухИт.ИспользоватьСубконто(ВидыСубконто.Сотрудники, ОбобщенныйСотрудник);
	БухИт.ИспользоватьСубконто(ВидыСубконто.ВидыПлатежейВБюджет, Перечисление.ВидыПлатежейВБюджет.Налог, 2);
	БухИт.ВыполнитьЗапрос(ДатаНачала, ДатаПо, "69.2.2, 69.2.3",,,, "Месяц");
	// БухИт.ВыбратьСубконто(ВидыСубконто.Сотрудники);

	Если ТипЗначения(ОбобщенныйСотрудник)=11  Тогда //здесь был передан элемент справочника - добавим его в только что созданный список
		Сотрудники=СоздатьОбъект("СписокЗначений");
		Сотрудники.ДобавитьЗначение(ОбобщенныйСотрудник);
	Иначе //а здесь был передан список элементов - будем использовать непосредственно его
		Сотрудники=ОбобщенныйСотрудник; 
	КонецЕсли;
	ВсегоСотров = Сотрудники.РазмерСписка();
	КодВозврата = 0;
	ГодОтчета = ДатаГод(ДатаОкончания);
	
	Для СчСотров = 1 По ВсегоСотров Цикл
		Сотрудник = Сотрудники.ПолучитьЗначение(СчСотров);
		ВсегоСтрах = 0;
		ВсегоНак = 0;
		ГодНачалаУчета = ДатаГод(Сотрудник.ДатаПриема);
		МесяцДоНачалаУчета = ДатаМесяц(Сотрудник.ДатаПриема) - 1;
		
		БухИт.ВыбратьПериоды(1);
		Пока БухИт.ПолучитьПериод() = 1 Цикл
			ТекМесяц = ДатаМесяц(БухИт.КонДата);
			ДоходыВычетыНалогиСотрудников.НоваяСтрока();
			СотрудникСтрокой = глПолучитьУникальныйКодСотрудника(Сотрудник) + глДополнитьСтроку(ТекМесяц, 2);
			НомСтроки = ДоходыВычетыНалогиСотрудников.НомерСтроки;
			ДоходыВычетыНалогиСотрудников.УстановитьЗначение(НомСтроки, 1, СотрудникСтрокой);
			
			Если ПустоеЗначение(СтрЗаменить(Сотрудник.СтраховойНомерПФР,"-","")) = 1 Тогда
				Продолжить
			КонецЕсли;
			
			Если БухИт.ПолучитьСубконто(ВидыСубконто.Сотрудники,, Сотрудник) = 1 Тогда
				БухИт.ВыбратьСчета();
				Пока БухИт.ПолучитьСчет() = 1 Цикл
				    Если БухИт.Счет = Сч69_2_2 Тогда
				        ВсегоСтрах = ВсегоСтрах + БухИт.КО();
						
					Иначе
						ВсегоНак = ВсегоНак + БухИт.КО();
				    КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			          
			Если (ГодНачалаУчета = ГодОтчета) и (МесяцДоНачалаУчета = ТекМесяц) Тогда
				ВсегоСтрах = ВсегоСтрах + Сотрудник.НачисленныйПФР_страх_СНачалаГода;
				ВсегоНак = ВсегоНак + Сотрудник.НачисленныйПФР_нак_СНачалаГода;
			КонецЕсли;
			
			ДоходыВычетыНалогиСотрудников.УстановитьЗначение(НомСтроки, 2, ВсегоСтрах);
			ДоходыВычетыНалогиСотрудников.УстановитьЗначение(НомСтроки, 3, ВсегоНак);
		КонецЦикла;
	КонецЦикла;
	
	Возврат 1;
	
КонецФункции // СобратьДанныеДляЕСН()

//******************************************************************************
// глСобратьДанныеДляСЗВ2002()
//
// Параметры:
//		Режим - строка, режим сбора данных, значения: "Отчетность", "ВводДанных", "СохранениеДанных"
//
//
// Возвращаемое значение:
//      число 1 или 0 - удалось (не удалось) собрать данные в таблицу
//
// Описание:
//  
//
Функция глСобратьДанныеДляСЗВ2002(ДоходыСотрудников,СтажСотрудников, ОбобщенныйСотрудник, ДатаАктуальности, ДанныеПоЕСН, Форма ="", Режим = "Отчетность")
	
	чГод = ДатаГод(ДатаАктуальности);
	Если чГод<2002 Тогда
		Сообщить("Год не должен быть раньше 2002-го!");
		Возврат 0
	КонецЕсли;
	Месяц = ДатаМесяц(ДатаАктуальности);
	
	//  проинициализируем выходные таблицы значений
	ДоходыСотрудников=СоздатьОбъект("ТаблицаЗначений");
	СтажСотрудников=СоздатьОбъект("ТаблицаЗначений");

	// 1-ая колонка (строка, 12) - ключевое поле для поиска данных; 
	// состоит из 10 символов табельного номера сотрудника и 2-х символов месяца. 
	ДоходыСотрудников.НоваяКолонка("КодСотрудника","Строка",12);   // 1
	ДоходыСотрудников.НоваяКолонка("Сотрудник","Справочник.Сотрудники");//2 
	ДоходыСотрудников.НоваяКолонка("ВзносовСтр","Число",15,2);// всего доходов 	//3-я кол начислено взносов на страховую часть пенсии
	ДоходыСотрудников.НоваяКолонка("ВзносовНкп","Число",15,2);// по б/л        	//4-ая кол начислено взносов на накопительную часть пенсии
	ДоходыСотрудников.НоваяКолонка("ВзносовДоп","Число",15,2);// стипендии     	//5-ая кол начислено взносов по доп тарифу
	ДоходыСотрудников.НоваяКолонка("ДнейБолезн","Число",3,0); // по б/л        	//6-ая кол дней болел
	ДоходыСотрудников.НоваяКолонка("ДнейОтпСвСч","Число",3,0);// отп св сч    	//7-ая кол дней гулял
	
	СтажСотрудников.НоваяКолонка("Сотрудник","Справочник.Сотрудники");
	СтажСотрудников.НоваяКолонка("ТаблицаЗаписейОСтаже","ТаблицаЗначений"); // записи о стаже
	
	ТУ = Константа.ТерриториальныеУсловия;
	ХарактерРаботы = СоздатьОбъект("Периодический");
	
	Если ПустоеЗначение(ДанныеПоЕСН) = 1 Тогда
	    СобратьДанныеДляЕСН(ДанныеПоЕСН, ОбобщенныйСотрудник)
	КонецЕсли;

	// далее в запросах будем использовать список сотрудников
	Если ТипЗначения(ОбобщенныйСотрудник)=11  Тогда //здесь был передан элемент справочника - добавим его в только что созданный список
		Сотрудники=СоздатьОбъект("СписокЗначений");
		Сотрудники.ДобавитьЗначение(ОбобщенныйСотрудник);
	Иначе //а здесь был передан список элементов - будем использовать непосредственно его
		Сотрудники=ОбобщенныйСотрудник; 
	КонецЕсли;
	ВсегоСотров = Сотрудники.РазмерСписка();
	
	СписокХР = СоздатьОбъект("СписокЗначений");
	
	Для СчСотров = 1 По ВсегоСотров Цикл
		Сотрудник = Сотрудники.ПолучитьЗначение(СчСотров);
		
		Для ПоследнийМесяц = 1 по ДатаМесяц(ДатаПо) Цикл
			СтрокаИтоговойТаблицы = 0;
			ДанныеПоЕСН.НайтиЗначение(глПолучитьУникальныйКодСотрудника(Сотрудник)+глДополнитьСтроку(Строка(ПоследнийМесяц),2),СтрокаИтоговойТаблицы,1);
		
			ДоходыСотрудников.НоваяСтрока();
			ДоходыСотрудников.КодСотрудника = ДанныеПоЕСН.ПолучитьЗначение(СтрокаИтоговойТаблицы, 1);
			ДоходыСотрудников.Сотрудник = Сотрудник;
			ДоходыСотрудников.ВзносовСтр = ДанныеПоЕСН.ПолучитьЗначение(СтрокаИтоговойТаблицы, 2);
			ДоходыСотрудников.ВзносовНкп = ДанныеПоЕСН.ПолучитьЗначение(СтрокаИтоговойТаблицы, 3);
			ДоходыСотрудников.ДнейБолезн = Сотрудник.КоличествоДнейБолезни.Получить(ДатаОкончания);
			ДоходыСотрудников.ДнейОтпСвСч = Сотрудник.КоличествоДнейОтпуска.Получить(ДатаОкончания);
			
			// Заполнение таблицы "Стаж сотрудников"
			СтажСотрудников.НоваяСтрока();
			СтажСотрудников.Сотрудник = Сотрудник;
			СтажСотрудников.ТаблицаЗаписейОСтаже = СоздатьОбъект("ТаблицаЗначений");
			СтажСотрудников.ТаблицаЗаписейОСтаже.НоваяКолонка("ТипЗаписи","Строка",14,,,,,);
			СтажСотрудников.ТаблицаЗаписейОСтаже.НоваяКолонка("НомерЗаписи","Число",2,0,,,,);
			СтажСотрудников.ТаблицаЗаписейОСтаже.НоваяКолонка("Начало","Дата",,,,,,);
			СтажСотрудников.ТаблицаЗаписейОСтаже.НоваяКолонка("Окончание","Дата",,,,,,);
			СтажСотрудников.ТаблицаЗаписейОСтаже.НоваяКолонка("ТерриториальныеУсловия","Перечисление.ТерриториальныеУсловия",,,,,,);
			СтажСотрудников.ТаблицаЗаписейОСтаже.НоваяКолонка("СЗВОсобыеУсловияТруда","Перечисление.СЗВОсобыеУсловияТруда2002",,,,,,);
			СтажСотрудников.ТаблицаЗаписейОСтаже.НоваяКолонка("СЗВОснованияИТС","Перечисление.СЗВОснованияИТС2002",,,,,,);
			СтажСотрудников.ТаблицаЗаписейОСтаже.НоваяКолонка("СЗВПараметр1ИТС","Число",5,0,,,,);
			СтажСотрудников.ТаблицаЗаписейОСтаже.НоваяКолонка("СЗВПараметр2ИТС","Число",2,0,,,,);
			СтажСотрудников.ТаблицаЗаписейОСтаже.НоваяКолонка("СЗВПараметр3ИТС","Перечисление.СЗВПараметр3ИТС",,,,,,);
			СтажСотрудников.ТаблицаЗаписейОСтаже.НоваяКолонка("СЗВОснованияВыслугиЛет","Перечисление.СЗВОснованияВыслугиЛет2002",,,,,,);
			СтажСотрудников.ТаблицаЗаписейОСтаже.НоваяКолонка("СЗВПараметр1ВыслугиЛет","Число",5,0,,,,);
			СтажСотрудников.ТаблицаЗаписейОСтаже.НоваяКолонка("СЗВПараметр2ВыслугиЛет","Число",4,0,,,,);
			СтажСотрудников.ТаблицаЗаписейОСтаже.НоваяКолонка("СЗВПараметр3ВыслугиЛет","Число",8,2,,,,);
			СтажСотрудников.ТаблицаЗаписейОСтаже.НоваяКолонка("РК","Число",4,2,,,,);
			СтажСотрудников.ТаблицаЗаписейОСтаже.НоваяКолонка("КПС","Строка",20,,,,,);
			
			СписокХР.УдалитьВсе();
			Если (Сотрудник.ХарактерРаботы.Получить(ДатаНачала) <> Перечисление.ХарактерРаботы.ТрудовыеОтношенияПрекращены) и
				 (ПустоеЗначение(Сотрудник.ХарактерРаботы.Получить(ДатаНачала)) = 0) Тогда
			    СписокХР.ДобавитьЗначение(ДатаНачала);
			КонецЕсли;
			
			ХарактерРаботы.ИспользоватьОбъект("ХарактерРаботы", Сотрудник);
			ХарактерРаботы.ВыбратьЗначения(ДатаНачала + 1, ДатаОкончания - 1);
			Пока ХарактерРаботы.ПолучитьЗначение() = 1 Цикл
				Если (СписокХР.НайтиЗначение(ХарактерРаботы.ДатаЗнач) = 0) и 
					 (ПустоеЗначение(ХарактерРаботы.Значение) = 0) Тогда
				    СписокХР.ДобавитьЗначение(ХарактерРаботы.ДатаЗнач);
				КонецЕсли;
			КонецЦикла;
			
			НомерЗаписи = 1;
			ПеридОткрыт = 0;
			Для НомерСтрокиСписка = 1 по СписокХР.РазмерСписка() Цикл
				ДатаЗнач = СписокХР.ПолучитьЗначение(НомерСтрокиСписка);
			    Значение = Сотрудник.ХарактерРаботы.Получить(ДатаЗнач);
				Если (Значение = Перечисление.ХарактерРаботы.ТрудовыеОтношенияПрекращены) и (ПеридОткрыт = 1) Тогда
					СтажСотрудников.ТаблицаЗаписейОСтаже.Окончание = ДатаЗнач;
					ПеридОткрыт = 0;
				
				ИначеЕсли ПеридОткрыт = 0 Тогда
					СтажСотрудников.ТаблицаЗаписейОСтаже.НоваяСтрока();
					СтажСотрудников.ТаблицаЗаписейОСтаже.ТипЗаписи = "Основная";
					СтажСотрудников.ТаблицаЗаписейОСтаже.НомерЗаписи = НомерЗаписи;
					СтажСотрудников.ТаблицаЗаписейОСтаже.Начало = ДатаЗнач;
					СтажСотрудников.ТаблицаЗаписейОСтаже.Окончание = ДатаОкончания;
					СтажСотрудников.ТаблицаЗаписейОСтаже.ТерриториальныеУсловия = ТУ;
					НомерЗаписи = НомерЗаписи + 1;
					ПеридОткрыт = 1;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	
	Возврат 1;

КонецФункции // глСобратьДанныеДляСЗВ2002()

//*****************************************************************************
// Функция глПроверкаСтраховогоНомера(СтраховойНомер)
//
// Параметры
//		СтраховойНомер - строка, страховой номер ПФР
//
// Возвращаемое значение
//		число 0/1
//
// Описание
//		Номер страхового свидетельства проверяется на соответствие
//		требованиям ПФР
//
Функция глПроверкаСтраховогоНомера(СтраховойНомер)
	Хорошо=1;
	СтрокаЦифр=СтрЗаменить(Лев(СтраховойНомер,11),"-","");
	КонтрольноеЧисло=Число(Прав(СтраховойНомер,2));
	Если ПустаяСтрока(СтрокаЦифр)=0  Тогда
		Если Число(Лев(СтрокаЦифр,9))>1001998 Тогда
			Всего=0;
			Для Сч = 1 По 9 Цикл
				Всего=Всего+Число(Сред(СтрокаЦифр,10-Сч,1))*Сч
			КонецЦикла;
			Остаток=Всего%101;
			Остаток=?(Остаток=100,0,Остаток);
			Если Остаток<>КонтрольноеЧисло Тогда
				Хорошо=0;
			КонецЕсли;
		КонецЕсли;
	Иначе
		Хорошо=0;
	КонецЕсли;
	Возврат Хорошо;
КонецФункции // глПроверкаСтраховогоНомера

//******************************************************************************
//	ПолучитьПризнакТарифа(НомерПачки)
//
//	Параметры:
//		ДатаПолученияПризнака - дата, на которую надо определить признак тарифа
// 
// 	Возвращаемое значение:
//		возвращает соответствующую признаку тарифа букву - регрессивная шкала ЕСН или нет
//
//	Описание:
//		
Функция ПолучитьПризнакТарифа(ДатаПолученияПризнака)
	
	Если ДатаГод(ДатаПолученияПризнака) < 2005 Тогда
	    Возврат ?(Константа.ИспользоватьРегрессивнуюШкалуПФР.Получить(ДатаПолученияПризнака)=Да,"Р","М");
		
	Иначе
		Возврат "Р";
	КонецЕсли;
	
КонецФункции

//******************************************************************************
//	УстановитьТекущуюПачку(НомерПачки)
//
//	Параметры:
//		НомерПачки - номер пачки, которая делается текущей
// 
// 	Возвращаемое значение:
//		нет
//
//	Описание:
//		Процедура устанавливает номер строки списка значений для пачки
//		и выбирает соответствующую таблицу значений для отражения в контроле Документы
//
Процедура УстановитьТекущуюПачку(НомерПачки)

	Если Пачки.КоличествоСтрок() > 0 Тогда

		Пачки.ТекущаяСтрока(НомерПачки); // пачки - список таблиц значения
		Пачки.ПолучитьЗначение(НомерПачки, "ТаблицаДокументов").Выгрузить(Документы);
		НомерОтображаемойПачки = НомерПачки;
		Форма.НадписьДокументы.Заголовок("Документы по пачке № " + НомерОтображаемойПачки);
	КонецЕсли;
		
	Если Документы.КоличествоСтрок() > 0 Тогда
		Документы.ТекущаяСтрока(1);
	КонецЕсли;       
	
	Если Документы.КоличествоСтрок() = 0 Тогда 	              
		Документы.ВидимостьКолонки("ПередаватьАдрес",0);  
		Форма.КнопкаИзменитьПередачуАдреса.Доступность(0);
	ИначеЕсли (ТипФормируемыхДокументов=1) и Не(СОКРЛП(Пачки.ПолучитьЗначение(НомерПачки, "СтрокСтажаПачки"))="АДВ-11") Тогда
		Документы.ВидимостьКолонки("ПередаватьАдрес",1); 
		Форма.КнопкаИзменитьПередачуАдреса.Доступность(1);
	Иначе
		Документы.ВидимостьКолонки("ПередаватьАдрес",0);  
		Форма.КнопкаИзменитьПередачуАдреса.Доступность(0);
	КонецЕсли;
	
	Документы.ВидимостьКолонки("ТН,Договор",0);
	Документы.ВидимостьКолонки("Категория,ТипФормы,ТУвПачке,СтрокСтажа",0);
КонецПроцедуры

//******************************************************************************
//	СоздатьСписокДокументовСЗВ(ВвестиКлюч = 0)
//
//	Параметры:
//		ВвестиКлюч - число. 1 - создать ключевую колонку для поиска, 0 - не создавать
//					по умолчанию - 0
// 
// 	Возвращаемое значение:
//		Таблица значений для хранения распределения документов по пачкам
//
//	Описание:
// 		Инициализирует таблицу значений определенной структуры
//
Функция СоздатьСписокДокументов(ВвестиКлюч = 0)
	СписокДокументов = СоздатьОбъект("ТаблицаЗначений");
	СписокДокументов.НоваяКолонка("Сотрудник"			, );
	СписокДокументов.НоваяКолонка("СтрокСтажа"			,"Число",2,0);//для 2002 года и позднее
	СписокДокументов.НоваяКолонка("ТУ"					,"Строка",3);//для 2002 года и позднее
	СписокДокументов.НоваяКолонка("Категория"			, );
	СписокДокументов.НоваяКолонка("ТипФормы"			, "Перечисление.СЗВТипФормы");
	СписокДокументов.НоваяКолонка("Договор"				, "Документ.ДоговорГраждПравХаракт");
	СписокДокументов.НоваяКолонка("Пачка"				, "Число", 5, 0);
	СписокДокументов.НоваяКолонка("Номер"				, "Число", 3, 0);
	
	СписокДокументов.НоваяКолонка("СтрокСтажаПачки"		,"Строка",12,0); // "СЗВ-4-2" или "СЗВ-4-1" или "АДВ-11"
	СписокДокументов.НоваяКолонка("ТипФормыПачки"		,"Строка",4,0);
	СписокДокументов.НоваяКолонка("ДопТип"				,"Строка",4,0);
	СписокДокументов.НоваяКолонка("ПередаватьАдрес"		,"Число",1,0);
	
	Если ВвестиКлюч=1 Тогда
		СписокДокументов.НоваяКолонка("Ключ", "Строка", 200, 0);
	КонецЕсли;
	
	Возврат СписокДокументов;
	
КонецФункции

//******************************************************************************
//	СоздатьТаблицуПачки()
//
//	Параметры:
//		нет
// 
// 	Возвращаемое значение:
//		Таблица значений для хранения документов пачки
//
//	Описание:
// 		Инициализирует таблицу значений определенной структуры
//
Функция СоздатьТаблицуПачки()
	ТаблицаПачки = СоздатьОбъект("ТаблицаЗначений");
	ТаблицаПачки.НоваяКолонка("Сотрудник",,,,,12);
	ТаблицаПачки.НоваяКолонка("Категория", ,,,"Кат.",5);
	ТаблицаПачки.НоваяКолонка("ТипФормы", "Перечисление.СЗВТипФормы",,,"Тип",5);
	ТаблицаПачки.НоваяКолонка("Договор", "Документ.ДоговорГраждПравХаракт",,,,6);
	ТаблицаПачки.НоваяКолонка("СтрокСтажа", "Число",2,0,,2);
	ТаблицаПачки.НоваяКолонка("ТН", "Строка", 10);
	ТаблицаПачки.НоваяКолонка("ТУвПачке",,,,"Тер. усл.",6);
	ТаблицаПачки.НоваяКолонка("ПередаватьАдрес","Число",1,0,"Адрес",3);//"СЗВ-4-2" или "СЗВ-4-1"
	Возврат ТаблицаПачки;
	
КонецФункции


//******************************************************************************
//	УстановитьСостояниеКнопок()
//
//	Параметры:
//		нет
// 
// 	Возвращаемое значение:
//		нет
//
//	Описание:
//		Процедура устанавливает доступность кнопок формы в зависимости от
//		состояния контролов 
//
Процедура УстановитьСостояниеКнопок()
	НомерДокумента = Документы.ТекущаяСтрока();
	НомерПачки = Пачки.ТекущаяСтрока();
	КоличествоДокументов = Документы.КоличествоСтрок();
	КоличествоПачек = Пачки.КоличествоСтрок();
	Если (КоличествоДокументов < 2) ИЛИ (НомерДокумента = 1) Тогда
		Форма.КнопкаДокументВверх.Доступность(0);
	Иначе
		Форма.КнопкаДокументВверх.Доступность(1);
	КонецЕсли;
	Если (КоличествоДокументов < 2) ИЛИ (НомерДокумента = КоличествоДокументов) Тогда
		Форма.КнопкаДокументВниз.Доступность(0);
	Иначе
		Форма.КнопкаДокументВниз.Доступность(1);
	КонецЕсли;
	Если НомерДокумента > 0 Тогда
		Форма.КнопкаДокументУдалить.Доступность(1);
	Иначе
		Форма.КнопкаДокументУдалить.Доступность(0);
	КонецЕсли;
	Если КоличествоПачек > 0 Тогда
		Форма.КнопкаДокументНовый.Доступность(1);
		Форма.КнопкаДокументНовый.Доступность(1);
	КонецЕсли;
	Если Форма.Документы.Видимость()=1 Тогда
		Форма.КнопкаДокументНовый.Видимость(1);
	КонецЕсли;
	Если (КоличествоПачек < 2) ИЛИ (КоличествоДокументов = 0) Тогда
		Форма.КнопкаДокументВПачку.Доступность(0);
	Иначе
		Форма.КнопкаДокументВПачку.Доступность(1);
	КонецЕсли;
	Если НомерПачки = 0 Тогда
		Форма.КнопкаПачкаИзменить.Доступность(0);
		Форма.КнопкаПачкаУдалить.Доступность(0);
		Форма.КнопкаДокументСортировать.Доступность(0);
	Иначе
		Форма.КнопкаПачкаИзменить.Доступность(1);
		Форма.КнопкаПачкаУдалить.Доступность(1);
		Форма.КнопкаДокументСортировать.Доступность(1);
	КонецЕсли;
КонецПроцедуры

//******************************************************************************
//	ИмяФайлаНастроек()
//
//	Параметры:
//		нет
// 
// 	Возвращемое значение:
//		Строка - имя файла, в котором содержится настройка распределения форм СЗВ и АДВ по пачкам
//
//	Описание:
//		Функция формирует название файла. Применяется при восстановлении и записи настроек
//
Функция ИмяФайлаНастроек()
	ИмяТекущегоФайлаНастроек = КаталогИБ()+"_"+ТипФормируемыхДокументов+"_"+Год+"_"+"ф4"+".pf";  //+"_"+ПериодОтчетности.Идентификатор()
	Возврат ИмяТекущегоФайлаНастроек;
КонецФункции

//******************************************************************************
//	УстановитьДатыПериодаОтчетности()
//
//	Параметры:
//		нет
// 
// 	Возвращемое значение:
//		нет
//
//	Описание:
//		Устанавливает даты начала и окончания периода отчетности для использования 
//		в запросах при заполнении и обновления списка документов, при выводе на 
//		печать или в файл
//
Процедура УстановитьДатыПериодаОтчетности(КодПериода = "",Квартал1 = "",Квартал2 = "",Квартал3 = "",Квартал4 = "")

	Год				= ДатаГод(ДатаПо);
	ДатаНачала 		= НачГода(ДатаПо);
	ДатаОкончания 	= ДатаПо;
	КодПериода		= 0; 
	Квартал1		= "Х";
	Квартал2		= "Х";
	Квартал3		= "Х";
	Квартал4		= "Х";
	
КонецПроцедуры	// УстановитьДатыПериодаОтчетности()


//******************************************************************************
//	ПолучитьАктуальныйСписокДокументов()
//
//	Параметры:
//		нет
// 
// 	Возвращаемое значение:
//		таблица значений определенной структуруы - список документов для передачи в ПФР
//
//	Описание:
//		Процедура формирует по умолчанию список документов СЗВ или АДВ
//
//
Функция ПолучитьАктуальныйСписокДокументов()
	Перем ВремСписокДокументов;
	
	СписокДокументов = СоздатьСписокДокументов(ТипФормируемыхДокументов);
	
	Если ТипФормируемыхДокументов=1 Тогда
		
		УстановитьДатыПериодаОтчетности();

		БухИт = СоздатьОбъект("БухгалтерскиеИтоги");
		БухИт.ИспользоватьСубконто(ВидыСубконто.Сотрудники);
		БухИт.ВыполнитьЗапрос(ДатаНачала, ДатаОкончания, "69.2.2, 69.2.3");
		БухИт.ВыбратьСубконто(ВидыСубконто.Сотрудники);

		Пока БухИт.ПолучитьСубконто(ВидыСубконто.Сотрудники) = 1 Цикл
			Если БухИт.КО() <= 0 Тогда
			    Продолжить;
			КонецЕсли;
			
			Сотрудник = БухИт.Субконто(ВидыСубконто.Сотрудники);
			Если ПустоеЗначение(СтрЗаменить(Сотрудник.СтраховойНомерПФР, "-", "")) = 1 Тогда
				Продолжить
			КонецЕсли;

			Ключ = ПолучитьКлюч(Сотрудник);
			
			Если СписокДокументов.НайтиЗначение(Ключ,, "Ключ")=0 Тогда
				СписокДокументов.НоваяСтрока();
				СписокДокументов.Сотрудник = Сотрудник;
				СписокДокументов.Ключ = Ключ;
			КонецЕсли;
		КонецЦикла;
		
		ГодОтчета = ДатаГод(ДатаОкончания);
		СпрСотр = СоздатьОбъект("Справочник.Сотрудники");
		СпрСотр.ВыбратьЭлементы();
		Пока СпрСотр.ПолучитьЭлемент() = 1 Цикл
		    Если (СпрСотр.ЭтоГруппа() = 0) и (СпрСотр.ПометкаУдаления() = 0) Тогда
				Ключ = ПолучитьКлюч(СпрСотр.ТекущийЭлемент());
				Если СписокДокументов.НайтиЗначение(Ключ,, "Ключ")=0 Тогда
					ГодНачалаУчета = ДатаГод(СпрСотр.ДатаПриема);
					Если (ГодНачалаУчета = ГодОтчета) и ((СпрСотр.НачисленныйПФР_страх_СНачалаГода + СпрСотр.НачисленныйПФР_нак_СНачалаГода) > 0) Тогда
					    СписокДокументов.НоваяСтрока();
						СписокДокументов.Сотрудник = СпрСотр.ТекущийЭлемент();
						СписокДокументов.Ключ = Ключ;
					КонецЕсли;
				КонецЕсли;
		    КонецЕсли;
		КонецЦикла;
		
		СписокДокументов.Сортировать("Сотрудник+"); //Категория+,
		Если СписокДокументов.КоличествоСтрок() = 0 Тогда
			Предупреждение("Данных о доходах за  "+Год+" года не обнаружено!");  //период "+ПериодОтчетности+"
		Иначе
						//после 2002 года начинает иметь значение количество строк стажа:
			Если Число(Год) >= 2002 Тогда
				
				СписокСотров = СоздатьОбъект("СписокЗначений");
				СписокДокументов.Выгрузить(СписокСотров,,,"Сотрудник");
				ДоходыСотрудников = "";
				СтажСотрудников = "";
				ДоходыВычетыНалогиСотрудников = "";
				Если глСобратьДанныеДляСЗВ2002(ДоходыСотрудников,СтажСотрудников,СписокСотров,ДатаПо,ДоходыВычетыНалогиСотрудников,Контекст) <> 0 Тогда
					Для СчДокументов = 1 По СписокДокументов.КоличествоСтрок() Цикл
						Сотрудник = СписокДокументов.ПолучитьЗначение(СчДокументов,"Сотрудник");
						
						// получили таблицу стажа, обработаем ее:
						НомерСтроки = "";
						
						СтажСотрудников.НайтиЗначение(Сотрудник,НомерСтроки,"Сотрудник");
						СтрокСтажа = 0;
						Если НомерСтроки <> 0 Тогда // в таблице есть стаж текущего сотрудника
							ТекущийСписокСтажа = СтажСотрудников.ПолучитьЗначение(НомерСтроки,"ТаблицаЗаписейОСтаже");
							СтрокСтажа = ТекущийСписокСтажа.КоличествоСтрок();
							ТУ=""; 
							//кроме количества строк стажа важно что там внутри:
							Если СтрокСтажа >0 Тогда
								ТУ=Строка(ТекущийСписокСтажа.ПолучитьЗначение(1,"ТерриториальныеУсловия"));
							КонецЕсли;
								
							//кроме количества строк стажа важно что там внутри:
							Если СтрокСтажа = 1 Тогда
								
								НомПериод=""; НачПериод=""; КонПериод=""; УТ=""; ОснованиеИТС="";
								ДопИТС=""; ОснованиеВыслуги="";  ДопВЛ=""; РК=""; КодПрофессии="";
								
								НомерСтрокиТаблицыСтажа = 1;
								
								ВидСтроки= ТекущийСписокСтажа.ПолучитьЗначение(НомерСтрокиТаблицыСтажа,"ТипЗаписи");
								Если ПустоеЗначение(ВидСтроки)=0  Тогда // обнаружено описание заполненной строки
									
									Если СокрЛП(ВидСтроки) = "Основная"  Тогда
										НомПериод=ТекущийСписокСтажа.ПолучитьЗначение(НомерСтрокиТаблицыСтажа,"НомерЗаписи");
										НачПериод=ТекущийСписокСтажа.ПолучитьЗначение(НомерСтрокиТаблицыСтажа,"Начало");
										КонПериод=ТекущийСписокСтажа.ПолучитьЗначение(НомерСтрокиТаблицыСтажа,"Окончание");
									Иначе  // в дополнительной строке номер и даты периода не указываются
										НомПериод="";
										НачПериод="";
										КонПериод="";
									КонецЕсли; 
									
									УТ=ТекущийСписокСтажа.ПолучитьЗначение(НомерСтрокиТаблицыСтажа,"СЗВОсобыеУсловияТруда");
									ОснованиеИТС=ТекущийСписокСтажа.ПолучитьЗначение(НомерСтрокиТаблицыСтажа,"СЗВОснованияИТС");
									СписокПараметров = СоздатьОбъект("СписокЗначений");
									СписокПараметров.ДобавитьЗначение(ТекущийСписокСтажа.ПолучитьЗначение(НомерСтрокиТаблицыСтажа,"СЗВПараметр1ИТС"));
									СписокПараметров.ДобавитьЗначение(ТекущийСписокСтажа.ПолучитьЗначение(НомерСтрокиТаблицыСтажа,"СЗВПараметр2ИТС"));
									СписокПараметров.ДобавитьЗначение(ТекущийСписокСтажа.ПолучитьЗначение(НомерСтрокиТаблицыСтажа,"СЗВПараметр3ИТС"));
									ДопИТС="";
									ОснованиеВыслуги=ТекущийСписокСтажа.ПолучитьЗначение(НомерСтрокиТаблицыСтажа,"СЗВОснованияВыслугиЛет");
									СписокПараметров = СоздатьОбъект("СписокЗначений");
									СписокПараметров.ДобавитьЗначение(ТекущийСписокСтажа.ПолучитьЗначение(НомерСтрокиТаблицыСтажа,"СЗВПараметр1ВыслугиЛет"));
									СписокПараметров.ДобавитьЗначение(ТекущийСписокСтажа.ПолучитьЗначение(НомерСтрокиТаблицыСтажа,"СЗВПараметр2ВыслугиЛет"));
									СписокПараметров.ДобавитьЗначение(ТекущийСписокСтажа.ПолучитьЗначение(НомерСтрокиТаблицыСтажа,"СЗВПараметр3ВыслугиЛет"));
									ДопВЛ=глСобратьСтрокуПенсииЗаВыслугуЛет(ОснованиеВыслуги,СписокПараметров);
									РК=ТекущийСписокСтажа.ПолучитьЗначение(НомерСтрокиТаблицыСтажа,"РК");
									КодПрофессии=ТекущийСписокСтажа.ПолучитьЗначение(НомерСтрокиТаблицыСтажа,"КПС");
								КонецЕсли;
								
								Если 
									(ПустоеЗначение(УТ) = 0)или
									(ПустоеЗначение(ОснованиеИТС) = 0)или
									(ПустоеЗначение(ДопИТС) = 0)или
									(ПустоеЗначение(ОснованиеВыслуги) = 0)или
									(ПустоеЗначение(ДопВЛ) = 0)или
									(ПустоеЗначение(КодПрофессии) = 0) Тогда  // (ПустоеЗначение(ТУ) = 0) или (ПустоеЗначение(РК) = 0) или
								 
										СтрокСтажа = 2;	
								КонецЕсли;
									
							КонецЕсли;
									
							СписокДокументов.УстановитьЗначение(СчДокументов,"СтрокСтажа",СтрокСтажа);
							СписокДокументов.УстановитьЗначение(СчДокументов,"ТУ",ТУ);
						КонецЕсли;
						
					КонецЦикла;
					
					СписокДокументов.Сортировать("СтрокСтажа+,ТУ+,Сотрудник+");// Категория+,
				КонецЕсли;
				
			КонецЕсли; 	
			
		КонецЕсли;


	Иначе
		
		СписокДокументов = СоздатьСписокДокументов();
		
		Спр = СоздатьОбъект("Справочник.Сотрудники");
		
		Спр.ВыбратьЭлементы();
		Пока Спр.ПолучитьЭлемент() = 1 Цикл
			Если (Спр.ЭтоГруппа() = 1) или (Спр.ПометкаУдаления() = 1) Тогда
			    Продолжить;
			КонецЕсли;
			
			Сотр = Спр.ТекущийЭлемент();
			Если ПустоеЗначение(СтрЗаменить(Спр.СтраховойНомерПФР,"-","")) = 1 Тогда
				СписокДокументов.НоваяСтрока();
				СписокДокументов.Сотрудник = Сотр;
			КонецЕсли;
		КонецЦикла;
		СписокДокументов.Сортировать("Сотрудник+");
		
	КонецЕсли;
	
	Возврат СписокДокументов;
	
КонецФункции	// ПолучитьАктуальныйСписокДокументов

//******************************************************************************
//	Заполнить()
//
//	Параметры:
//		нет
// 
//	Вызывается из формул элементов диалога:
//		Заполнить
//
// 	Возвращаемое значение:
//		нет
//
//	Описание:
//		Процедура формирует список документов СЗВ или АДВ и 
//		распределяет их по пачкам по умолчанию 
//
Процедура Заполнить()
	
	ЧислоГод = Число(Год);
	Если ТипФормируемыхДокументов=1 Тогда
		Меню = СоздатьОбъект("СписокЗначений");
		Меню.ДобавитьЗначение("ИСХД","Тип сведений ИСХД");
		Меню.ДобавитьЗначение("КОРР","Тип корректировки КОРР");
		Меню.ДобавитьЗначение("ОТМН","Тип корректировки ОТМН");
		ТипФормыПачки = "";
		Если Меню.ВыбратьЗначение(ТипФормыПачки,,,,1)=0 Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	НомерПачки = 1;
	Если Пачки.КоличествоСтрок() > 0 Тогда
		НомерПачки   = Пачки.ПолучитьЗначение(Пачки.КоличествоСтрок(),"Номер") + 1;
		Ответ = Вопрос("При заполнении может быть удален последний комплект пачек документов"+РазделительСтрок
		+" и произведено распределение по умолчанию. "+РазделительСтрок
		+"Вы хотите удалить последний комплект пачек?", "Да+Нет+Отмена");
		Если Ответ = "Отмена" Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	Если ВвестиЧисло(НомерПачки,"Введите номер первой пачки", 5, 0) <> 1 Тогда
		Возврат;
	КонецЕсли;
	
	СписокДокументов = ПолучитьАктуальныйСписокДокументов();
	Если СписокДокументов.КоличествоСтрок() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	//попробуем понять есть ли у нас вероятность перехода к новой пачке из-за того, что кол-во строк стажа >1
	СтрокСтажа = СписокДокументов.ПолучитьЗначение(1,"СтрокСтажа");
	Если СтрокСтажа>1 Тогда // к новой пачке из-за стажа переходить не придется
		КолСтрокСтажаПредыд = 2;// больше 1
		КолСтрокСтажаОчер = 2;
	Иначе
		КолСтрокСтажаПредыд = 1;
		КолСтрокСтажаОчер = 1;
	КонецЕсли;
	первыйраз=0;
	
	// дополним этот список данными о количестве строк стажа:
	НомерВПачке = констРазмерПачки+1;
	
	НомерПачки = НомерПачки - 1;
	ПредыдущаяКатегория = ""; 

	Если Ответ = "Да" Тогда
		Если ТипФормируемыхДокументов=1 Тогда
			Если Пачки.КоличествоСтрок() > 0 Тогда
				Если СокрЛП(Пачки.ПолучитьЗначение(Пачки.КоличествоСтрок(),"СтрокСтажаПачки")) = "АДВ-11" Тогда
					Пачки.УдалитьСтроку(Пачки.КоличествоСтрок());
				КонецЕсли;    
				Если Пачки.КоличествоСтрок() > 0 Тогда
					Пока СокрЛП(Пачки.ПолучитьЗначение(Пачки.КоличествоСтрок(),"СтрокСтажаПачки")) <> "АДВ-11" Цикл
						Пачки.УдалитьСтроку(Пачки.КоличествоСтрок());
						Если (Пачки.КоличествоСтрок() = 0) Тогда
							Прервать
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
			КонецЕсли;
		Иначе
			Пачки.УдалитьСтроки()
		КонецЕсли;
	КонецЕсли;
	
	БылоТУ = СписокДокументов.ПолучитьЗначение(1,"ТУ");;
	Для Счетчик = 1 По СписокДокументов.КоличествоСтрок() Цикл
		
		СтрокСтажа	= СписокДокументов.ПолучитьЗначение(Счетчик,"СтрокСтажа");
		ТУ			= СписокДокументов.ПолучитьЗначение(Счетчик,"ТУ");

		Если СтрокСтажа > 1 Тогда
			КолСтрокСтажаОчер = 2;
			Если первыйраз=1 Тогда
				КолСтрокСтажаПредыд = 2;// больше не надо будет, отдельная пачка уже делается
			КонецЕсли;
			первыйраз=1;
		КонецЕсли;
		
		Если (ЧислоГод<2002)и
		((НомерВПачке > констРазмерПачки) или (ПредыдущаяКатегория <> СписокДокументов.ПолучитьЗначение(Счетчик, "Категория")))
		или (ЧислоГод>=2002)и
		((НомерВПачке > констРазмерПачки) или (ТУ<>БылоТУ) или (КолСтрокСтажаОчер = 2)и(КолСтрокСтажаОчер <> КолСтрокСтажаПредыд))
		Тогда
			НомерПачки = НомерПачки+1;
			НомерВПачке = 1;
			ТаблицаПачки = СоздатьТаблицуПачки();
			Пачки.НоваяСтрока();
			КолСтр = Пачки.КоличествоСтрок();
			Пачки.УстановитьЗначение(КолСтр,1,НомерПачки);
			Пачки.УстановитьЗначение(КолСтр,"ТипФормыПачки",ТипФормыПачки);
			Пачки.УстановитьЗначение(КолСтр,"СтрокСтажаПачки",?(СтрокСтажа>1,"СЗВ-4-1","СЗВ-4-2"));
			Пачки.УстановитьЗначение(КолСтр,"ТаблицаДокументов",ТаблицаПачки);
			
		КонецЕсли;
		СписокДокументов.УстановитьЗначение(Счетчик, "Пачка", НомерПачки);
		СписокДокументов.УстановитьЗначение(Счетчик, "Номер", НомерВПачке);
		ТаблицаПачки.НоваяСтрока();
		ТаблицаПачки.Сотрудник = СписокДокументов.ПолучитьЗначение(Счетчик, "Сотрудник");
		ТаблицаПачки.ТН = СписокДокументов.ПолучитьЗначение(Счетчик, 1).Код;
		ТаблицаПачки.Категория = СписокДокументов.ПолучитьЗначение(Счетчик, "Категория");
		ТаблицаПачки.ТипФормы = СписокДокументов.ПолучитьЗначение(Счетчик, "ТипФормы");
		ТаблицаПачки.СтрокСтажа = СтрокСтажа;
		ТаблицаПачки.ТУвПачке = ТУ;
		//		ТаблицаПачки.Договор = СписокДокументов.ПолучитьЗначение(Счетчик, "Договор");
		НомерВПачке = НомерВПачке + 1;
		ПредыдущаяКатегория = СписокДокументов.ПолучитьЗначение(Счетчик, "Категория");
		
		БылоТУ = ТУ;
	КонецЦикла;
	
	Если ТипФормируемыхДокументов=1 Тогда
		НомерПачки = НомерПачки+1;
		ТаблицаПачки = СоздатьТаблицуПачки();
		Пачки.НоваяСтрока();
		КолСтр = Пачки.КоличествоСтрок();
		Пачки.УстановитьЗначение(КолСтр,1,НомерПачки);
		Пачки.УстановитьЗначение(КолСтр,"ТипФормыПачки","ВУПЛ");
		Пачки.УстановитьЗначение(КолСтр,"СтрокСтажаПачки","АДВ-11");
		Пачки.УстановитьЗначение(КолСтр,"ТаблицаДокументов",ТаблицаПачки);
		ТаблицаПачки.НоваяСтрока();
		ТаблицаПачки.Сотрудник = "Ведомость уплаты взносов";
	КонецЕсли;
	
	Если Пачки.КоличествоСтрок()> 0 Тогда 
		УстановитьТекущуюПачку(1);
	КонецЕсли;
	
КонецПроцедуры  // Заполнить

//******************************************************************************
//	Обновить()
//
//	Параметры:
//		нет
// 
//	Вызывается из формул элементов диалога:
//		Обновить
//
// 	Возвращаемое значение:
//		нет
//
//	Описание:
//		Процедура обновляет форму
//
Процедура Обновить()
	
	// обновим вид таблиц:
	Форма.Обновить();
	
КонецПроцедуры    // Обновить

//*****************************************************************************
// Процедура ИзменитьДанныеАДВ11()
//
// Параметры
//		нет
//
// Вызывается из формул элементов диалога:
//		таблицы значений на закладке "Форма АДВ-10"
//
// Возвращаемое значение
//		нет
//
// Описание
//		обеспечивает ввод числа в ячейки таблицы
//
Процедура ИзменитьДанныеАДВ11()
	Кол = ТаблицаПеречислений1.ТекущаяКолонка();
	Стр = ТаблицаПеречислений1.ТекущаяСтрока();
	Если Стр=0 Тогда
		ТаблицаПеречислений1.НоваяСтрока();
		Стр=1;
	КонецЕсли;
	
	СписокТиповДанных = СоздатьОбъект("СписокЗначений");
	СписокТиповДанных.ДобавитьЗначение("Hачальная задолженность","Задолженность по уплате страховых взносов на начало расчетного периода");
	СписокТиповДанных.ДобавитьЗначение("Ит. уплачено","Уплачено страховых взносов в расчетном периоде");
	СписокТиповДанных.ДобавитьЗначение("Конечная задолженность","Задолженность по уплате страховых взносов на конец расчетного периода");
	Если Кол = "ТипДанных" Тогда
		ВыбЗнач = "";
		Если СписокТиповДанных.ВыбратьЗначение(ВыбЗнач, , , , 1) = 0 тогда
			Возврат;
		Иначе
			ТаблицаПеречислений1.УстановитьЗначение(Стр, Кол, ВыбЗнач);
		КонецЕсли;
	ИначеЕсли Кол = "Год" Тогда
		
		ВыбЗнач = "";
		Если ВвестиЧисло(ВыбЗнач, "Введите год", 4,0) = 1 тогда
			ТаблицаПеречислений1.УстановитьЗначение(Стр, Кол, ВыбЗнач);
		КонецЕсли;
		
	Иначе //надо ввести сумму
		
		//определим текст:
		текстПредложения = "Введите сумму ";
		ВыбЗнач = ТаблицаПеречислений1.ПолучитьЗначение(Стр, Кол);
		СодТипа = ТаблицаПеречислений1.ПолучитьЗначение(Стр, 1);
		СодГода = ТаблицаПеречислений1.ПолучитьЗначение(Стр, 2);
		
		текстПредложения = текстПредложения +?( Найти(СодТипа,"Hачальная")>0 , "задолженности на начало",?(Найти(СодТипа,"уплачено")>0,"уплаченных взносов","задолженности на конец"));
		
		// предложим ввести сумму
		ВыбЗнач = "";
		Если ВвестиЧисло(ВыбЗнач, текстПредложения, 13, 2) = 1 тогда
			ТаблицаПеречислений1.УстановитьЗначение(Стр, Кол, ВыбЗнач);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры //ИзменитьДанныеАДВ11

//*****************************************************************************
// Процедура УдалСтроку()
//
// Параметры
//		нет
//
// Описание
//		удаляет текущуюю строку из таблицы АДВ-11
//
Процедура УдалСтроку()
	Стр = ТаблицаПеречислений1.ТекущаяСтрока();
	Если Стр <> 0 Тогда
		ТаблицаПеречислений1.УдалитьСтроку(Стр);
	КонецЕсли;
КонецПроцедуры //УдалСтроку

//*****************************************************************************
// Процедура новСтрока()
//
// Параметры
//		нет
//
// Описание
//		добавляет новую строку в таблицу АДВ-11
//
Процедура новСтрока()
	ТаблицаПеречислений1.НоваяСтрока();
	ТаблицаПеречислений1.ТекущаяСтрока(ТаблицаПеречислений1.КоличествоСтрок());
	ТаблицаПеречислений1.ТекущаяКолонка(1);
	ИзменитьДанныеАДВ11();
КонецПроцедуры //новСтрока

//******************************************************************************
//	ВосстановитьНастройки()
//
//	Параметры:
//		ИмяФайлаНастроек - строка - полное наименование файла настроек
// 
// 	Возвращемое значение:
//		нет
//
//	Описание:
//		Процедура восстанавливает таблицу значений ранее сформированных документов 
// 		СЗВ или АДВ из файла для определенного года, и отчетного периода
//
Процедура ВосстановитьНастройки(ИмяФайлаНастроек)
//	глСтатусСтрока(Контекст,"Восстанавливается распределение документов по пачкам для заданного периода...");
	СписокДокументов = СоздатьСписокДокументов();
	Пачки.УдалитьСтроки();
	Документы.УдалитьСтроки();
	Если ФС.СуществуетФайл(ИмяФайлаНастроек) =1 Тогда
		ФайлНастроек = СоздатьОбъект("Текст");
		ФайлНастроек.Открыть(ИмяФайлаНастроек);
		__Стр = "";
		Для Счетчик = 1 По ФайлНастроек.КоличествоСтрок() Цикл
			__Стр = __Стр + ФайлНастроек.ПолучитьСтроку(Счетчик);
		КонецЦикла;
		__Стр = СтрЗаменить(__Стр, констКод1, констКод10);
		СписокДокументов = ЗначениеИзСтрокиВнутр(__Стр);
		Если ТипЗначенияСтр(СписокДокументов) <> "ТаблицаЗначений" Тогда
			СписокДокументов = СоздатьСписокДокументов();
		КонецЕсли;
	КонецЕсли;
	СписокДокументов.Сортировать("Пачка+,Номер+");
	Для Счетчик = 1 По СписокДокументов.КоличествоСтрок() Цикл
		//НомСтрочки = Счетчик;
		НомСтрочки = СписокДокументов.ПолучитьЗначение(Счетчик, "Пачка"); // см. функцию  СоздатьСписокДокументов
		
		Если Пачки.КоличествоСтрок() = 0 Тогда
			Пачки.НоваяСтрока();
			ТаблицаПачки = СоздатьТаблицуПачки();
			Пачки.УстановитьЗначение(1,1,НомСтрочки);
			Пачки.УстановитьЗначение(1,"ТаблицаДокументов",ТаблицаПачки);
			Пачки.УстановитьЗначение(1,"СтрокСтажаПачки",СписокДокументов.ПолучитьЗначение(Счетчик, "СтрокСтажаПачки"));
			Пачки.УстановитьЗначение(1,"ТипФормыПачки",СписокДокументов.ПолучитьЗначение(Счетчик, "ТипФормыПачки"));
			Пачки.УстановитьЗначение(1,"ДопТип",СписокДокументов.ПолучитьЗначение(Счетчик, "ДопТип"));
		ИначеЕсли Пачки.ПолучитьЗначение(Пачки.КоличествоСтрок(),"Номер") <> НомСтрочки Тогда
			Пачки.НоваяСтрока();
			ОчерПачка = Пачки.КоличествоСтрок();
			ТаблицаПачки = СоздатьТаблицуПачки();
			Пачки.УстановитьЗначение(ОчерПачка,1,НомСтрочки);
			Пачки.УстановитьЗначение(ОчерПачка,"ТаблицаДокументов",ТаблицаПачки);
			Пачки.УстановитьЗначение(ОчерПачка,"СтрокСтажаПачки",СписокДокументов.ПолучитьЗначение(Счетчик, "СтрокСтажаПачки"));
			Пачки.УстановитьЗначение(ОчерПачка,"ТипФормыПачки",СписокДокументов.ПолучитьЗначение(Счетчик, "ТипФормыПачки"));
			Пачки.УстановитьЗначение(ОчерПачка,"ДопТип",СписокДокументов.ПолучитьЗначение(Счетчик, "ДопТип"));
		КонецЕсли;
		
		ТаблицаПачки.НоваяСтрока();
		ТаблицаПачки.Сотрудник = СписокДокументов.ПолучитьЗначение(Счетчик, "Сотрудник");
		Попытка
			ТаблицаПачки.ТН = СписокДокументов.ПолучитьЗначение(Счетчик, "Сотрудник").Код;
		Исключение
		КонецПопытки;
		ТаблицаПачки.Категория = СписокДокументов.ПолучитьЗначение(Счетчик, "Категория");
		ТаблицаПачки.ТипФормы = СписокДокументов.ПолучитьЗначение(Счетчик, "ТипФормы");
		
		ТаблицаПачки.СтрокСтажа = СписокДокументов.ПолучитьЗначение(Счетчик, "СтрокСтажа");;//для 2002 года и позднее
		Если ТипФормируемыхДокументов=1 Тогда
			//восстанавливаем через попытку, т.к. при первом восстановлении, после обновления конфигурации,
			//в сохраненных данных еще нет колонки "ПередаватьАдрес"
			Попытка
				ТаблицаПачки.ПередаватьАдрес = СписокДокументов.ПолучитьЗначение(Счетчик, "ПередаватьАдрес");
			Исключение
			КонецПопытки;
		КонецЕсли;
	КонецЦикла;
	
	Если Пачки.КоличествоСтрок()> 0 Тогда
		УстановитьТекущуюПачку(1);
	КонецЕсли;
	УстановитьСостояниеКнопок();                 
//	глСтатусСтрока(Контекст,"");
	
КонецПроцедуры	// ВосстановитьНастройки()

//******************************************************************************
//	СохранитьНастройки(ИмяФайлаНастроек)
//
//	Параметры:
//		ИмяФайлаНастроек - строка - имя файла для сохранения настроек
// 
// 	Возвращаемое значение:
//		нет
//
//	Описание:
//		Процедура записывает таблицу значений сформированных документов 
// 		СЗВ или АДВ в файла для определенного года, и отчетного периода
//
Функция СохранитьНастройки(ИмяФайлаНастроек)
//	глСтатусСтрока(Контекст,"Сохраняется настройка распределения документов по пачкам...");
	
	СохранитьТаблицуПеречислений();
	ФайлНастроек = СоздатьОбъект("Текст");
	СписокДокументов = СоздатьСписокДокументов();
	Для Счетчик1 = 1 По Пачки.КоличествоСтрок() Цикл
		
		ТаблицаПачки = Пачки.ПолучитьЗначение(Счетчик1,"ТаблицаДокументов");
		НомерПачки = Пачки.ПолучитьЗначение(Счетчик1,"Номер");
		
		СтрокСтажаПачки = Пачки.ПолучитьЗначение(Счетчик1, "СтрокСтажаПачки"); 
		ТипФормыПачки = Пачки.ПолучитьЗначение(Счетчик1, "ТипФормыПачки"); 
		ДопТип = Пачки.ПолучитьЗначение(Счетчик1, "ДопТип");
		
		Для Счетчик2 = 1 По ТаблицаПачки.КоличествоСтрок() Цикл
			СписокДокументов.НоваяСтрока();
			СписокДокументов.Сотрудник 			= ТаблицаПачки.ПолучитьЗначение(Счетчик2, "Сотрудник");
			СписокДокументов.Категория 			= ТаблицаПачки.ПолучитьЗначение(Счетчик2, "Категория");
			СписокДокументов.ТипФормы 			= ТаблицаПачки.ПолучитьЗначение(Счетчик2, "ТипФормы");
			СписокДокументов.ПередаватьАдрес    = ТаблицаПачки.ПолучитьЗначение(Счетчик2, "ПередаватьАдрес"); 
			СписокДокументов.СтрокСтажа 		= ТаблицаПачки.ПолучитьЗначение(Счетчик2, "СтрокСтажа");;//для 2002 года и позднее
			СписокДокументов.Пачка				= НомерПачки;
			СписокДокументов.Номер 				= Счетчик2;       //одинаковое значение для всей пачки
			СписокДокументов.СтрокСтажаПачки 	= СтрокСтажаПачки;//одинаковое значение для всей пачки
			СписокДокументов.ДопТип 			= ДопТип;         //одинаковое значение для всей пачки
			СписокДокументов.ТипФормыПачки 		= ТипФормыПачки;  //одинаковое значение для всей пачки
		КонецЦикла;
		
	КонецЦикла;
	СтрокаДляСохранения = ЗначениеВСтрокуВнутр(СписокДокументов);
	СтрокаДляСохранения = СтрЗаменить(СтрокаДляСохранения, констКод10, констКод1);
	ФайлНастроек.ДобавитьСтроку(СтрокаДляСохранения);
	ФайлНастроек.Записать(ИмяФайлаНастроек);
//	глСтатусСтрока(Контекст,"");
КонецФункции	// СохранитьНастройки()

//******************************************************************************
//	КнопкаПачкаНовая()
//	КнопкаПачкаИзменить()
//	КнопкаПачкаУдалить()
//	КнопкаДокументВверх()
//	КнопкаДокументВниз()
//	КнопкаДокументВПачку()
//	КнопкаДокументНовый()
//	КнопкаДокументУдалить()
//
//	Параметры:
//		нет
// 
// 	Возвращаемое значение:
//		нет
//
//	Описание:
//		Процедуры обрабатывают кнопки формы, управляющие настройкой 
// 		распределения документов по пачкам
//
//	КнопкаПачкаНовая() - ввод новой пачки с запросом номера
//	КнопкаПачкаИзменить() - изменение номера пачки
//	КнопкаПачкаУдалить() - удаление пачки, если в ней нет ни одного документа
//	КнопкаДокументВверх() - перемещение документа вверх по списку
//	КнопкаДокументВниз() - перемещение документа вниз по списку
//	КнопкаДокументВПачку() - перенос документа в другую пачку
//	КнопкаДокументНовый() - ввод нового документа в пачку
//	КнопкаАнкетаНовая() - ввод новой анкеты
//	КнопкаДокументУдалить() - удаление документа из пачки
//
Процедура КнопкаПачкаНовая()    // ввод новой пачки с запросом номера
	Меню = СоздатьОбъект("СписокЗначений");
	Меню.ДобавитьЗначение("ИСХД","Тип сведений ИСХД");
	Меню.ДобавитьЗначение("ВУПЛ","Ведомость уплаты взносов АДВ-11");
	Меню.ДобавитьЗначение("КОРР","Тип корректировки КОРР");
	Меню.ДобавитьЗначение("ОТМН","Тип корректировки ОТМН");
	Меню.ДобавитьЗначение("ПЕНС","Тип сведений ПЕНС");
	Меню.ДобавитьЗначение("ПЕНС_Кор","Тип сведений ПЕНС, тип корректировки КОРР");
	Меню.ДобавитьЗначение("ПЕНС_Отм","Тип сведений ПЕНС, тип корректировки ОТМН");
	ТипФормыПачки = "";
	Если Меню.ВыбратьЗначение(ТипФормыПачки,,,,1)=0 Тогда
		Возврат;
	КонецЕсли;
	ТаблицаПачки = СоздатьТаблицуПачки();
	НомерПачки = 0;
	Для Счетчик = 1 По Пачки.КоличествоСтрок() Цикл
		НомерПачки = Макс(НомерПачки, Пачки.ПолучитьЗначение(Счетчик,"Номер"));
	КонецЦикла;
	НомерПачки = НомерПачки+1;
	Пачки.НоваяСтрока(); 
	КолСтрок = Пачки.КоличествоСтрок();
	Пачки.УстановитьЗначение(КолСтрок,"ТаблицаДокументов", ТаблицаПачки);
	Пачки.УстановитьЗначение(КолСтрок,"Номер", НомерПачки);
	Пачки.УстановитьЗначение(КолСтрок,"ТипФормыПачки",Лев(ТипФормыПачки,4) );
	Если ТипФормыПачки = "ПЕНС_Кор" Тогда
		Пачки.УстановитьЗначение(КолСтрок,"ДопТип","КОРР");
	ИначеЕсли ТипФормыПачки = "ПЕНС_Отм" Тогда 
		Пачки.УстановитьЗначение(КолСтрок,"ДопТип","ОТМН");
	Иначе
		Пачки.УстановитьЗначение(КолСтрок,"ДопТип","");
	КонецЕсли;
	
	Если ТипФормыПачки = "ВУПЛ" Тогда
		Пачки.УстановитьЗначение(КолСтрок,"СтрокСтажаПачки","АДВ-11");
		ТаблицаПачки.НоваяСтрока();
		ТаблицаПачки.Сотрудник = "Ведомость уплаты взносов";
		ТаблицаПачки.ТУвПачке = Константа.ТерриториальныеУсловия;
	КонецЕсли;
	Пачки.ТекущаяСтрока(КолСтрок);
	УстановитьТекущуюПачку(КолСтрок);		
КонецПроцедуры //  КнопкаПачкаНовая()

Процедура КнопкаПачкаИзменить()  //	 изменение номера пачки
	ДокументыПачки = Пачки.ПолучитьЗначение(Пачки.ТекущаяСтрока(),"ТаблицаДокументов");
	НомерПачки = Пачки.ПолучитьЗначение(Пачки.ТекущаяСтрока(),"Номер");
	Если ВвестиЧисло(НомерПачки,"Новый номер пачки", 5, 0) = 1 Тогда
		Пачки.УстановитьЗначение(Пачки.ТекущаяСтрока(),1, НомерПачки);
		Пачки.УстановитьЗначение(Пачки.ТекущаяСтрока(),"ТаблицаДокументов", ДокументыПачки);
	КонецЕсли;
КонецПроцедуры //  КнопкаПачкаИзменить()

Процедура КнопкаПачкаУдалить()  //	 удаление пачки, если в ней нет ни одного документа

	Если (Пачки.ПолучитьЗначение(Пачки.ТекущаяСтрока(),"ТаблицаДокументов").КоличествоСтрок() <> 0) и (СокрЛП(Пачки.ПолучитьЗначение(Пачки.ТекущаяСтрока(),"СтрокСтажаПачки")) <> "АДВ-11") Тогда
		Предупреждение("Для удаления пачки прежде необходимо перенести все документы этой пачки в другие пачки");
	ИначеЕсли СокрЛП(Пачки.ПолучитьЗначение(Пачки.ТекущаяСтрока(),"СтрокСтажаПачки")) = "АДВ-11" Тогда
		Пачки.УдалитьСтроку();
		Если Пачки.ТекущаяСтрока() = 0 Тогда
			Если Документы.КоличествоСтрок() > 0 Тогда
			    Документы.УдалитьСтроки();
			КонецЕсли;
			
		Иначе                       
			УстановитьТекущуюПачку(Пачки.ТекущаяСтрока())
		КонецЕсли;
	Иначе
		Пачки.УдалитьСтроку();
	КонецЕсли;
КонецПроцедуры //  КнопкаПачкаУдалить()

Процедура КнопкаДокументВверх()   // перемещение документа вверх по списку
	НомерВСписке = Документы.ТекущаяСтрока();
	Документы.СдвинутьСтроку(-1, Документы.ТекущаяСтрока());
	Документы.ТекущаяСтрока(НомерВСписке-1);
КонецПроцедуры   // КнопкаДокументВверх()

Процедура КнопкаДокументВниз()   // перемещение документа вниз по списку
	НомерВСписке = Документы.ТекущаяСтрока();
	Документы.СдвинутьСтроку(1, Документы.ТекущаяСтрока());
	Документы.ТекущаяСтрока(НомерВСписке+1);
КонецПроцедуры   // КнопкаДокументВниз()

Процедура КнопкаДокументВПачку()   // перемещение документа в другую пачку
	
	Если СокрЛП(Пачки.ПолучитьЗначение(НомерОтображаемойПачки,"СтрокСтажаПачки")) = "АДВ-11" Тогда
		Предупреждение("Ведомость уплаты взносов не содержит документов по сотрудникам!",8);
		Возврат;
	КонецЕсли;
	
	ПозицияПачки = ВыбратьПачку(0); // в АДВ-11 переносить нельзя
	Если ПозицияПачки = 0 Тогда
		Возврат;
	КонецЕсли;
	ДокументыПачкиВ = Пачки.ПолучитьЗначение(ПозицияПачки,"ТаблицаДокументов");
	НомерПачки = Пачки.ПолучитьЗначение(ПозицияПачки,"Номер");
	Если НомерОтображаемойПачки = ПозицияПачки Тогда
		Предупреждение("Документ уже находится в пачке № "+НомерПачки);
		Возврат;
	КонецЕсли;
	Если ДокументыПачкиВ.КоличествоСтрок() >= констРазмерПачки Тогда
		Предупреждение("В пачке № "+НомерПачки+" уже содержится "+констРазмерПачки+" документов. "+РазделительСтрок+"Ввод нового документа в пачку невозможен!");
		Возврат;
	КонецЕсли;
	
	НомерДокумента = Документы.ТекущаяСтрока();
	ДокументыПачкиИз = Пачки.ПолучитьЗначение(НомерОтображаемойПачки,"ТаблицаДокументов");
	
	Если ДокументыПачкиВ.КоличествоСтрок()>0 Тогда
		СтрСт 		= ДокументыПачкиВ.ПолучитьЗначение(1,"СтрокСтажа");
		ТекСтрСт 	= ДокументыПачкиИз.ПолучитьЗначение(НомерДокумента,"СтрокСтажа");
		
		Если (СтрСт > 1) и (ТекСтрСт <= 1) или (СтрСт <= 1) и (ТекСтрСт > 1) Тогда
			Предупреждение("В пачке № "+НомерПачки+" уже содержатся документы с "+?(СтрСт > 1," не ","")+"одной строкой стажа. "+РазделительСтрок+"Ввод выбранного документа в пачку невозможен!");
			Возврат;
		КонецЕсли;
	КонецЕсли;
	СтрокСтажа = Документы.ПолучитьЗначение(НомерДокумента, "СтрокСтажа");
	Если ДокументыПачкиВ.КоличествоСтрок()=0 Тогда
		//Пачки.НоваяКолонка("Номер"				,"Число"		,5,0 ,"№ пачки",7);
		//Пачки.НоваяКолонка("СтрокСтажаПачки"	,"Строка"		,12,0,"Строк стажа",12); // "СЗВ-4-2" или "СЗВ-4-1"
		//Пачки.НоваяКолонка("ТипФормыПачки"		,"Строка"		,4,0 ,"Тип формы",6);
		//Пачки.НоваяКолонка("ДопТип"				,"Строка"		,4,0 ,"Доп.тип",6);
		//Пачки.НоваяКолонка("ТаблицаДокументов"	,"ТаблицаЗначений");
		//Пачки.ВидимостьКолонки("ТаблицаДокументов",0);
		Пачки.УстановитьЗначение(ПозицияПачки,"СтрокСтажаПачки",?(СтрокСтажа>1,"СЗВ-4-1","СЗВ-4-2"));
	КонецЕсли;
	СотрудникВ = Документы.ПолучитьЗначение(НомерДокумента, "Сотрудник"); 
	Если ДокументыПачкиВ.НайтиЗначение(СотрудникВ,,"Сотрудник") = 1 Тогда
		Предупреждение("Выбранный сотрудник уже есть в пачке № "+НомерПачки);
		Возврат;
	КонецЕсли;
	
	ДокументыПачкиВ.НоваяСтрока();
	ДокументыПачкиВ.Сотрудник = Документы.ПолучитьЗначение(НомерДокумента, "Сотрудник");
	ДокументыПачкиВ.Категория = Документы.ПолучитьЗначение(НомерДокумента, "Категория");
	ДокументыПачкиВ.ТипФормы = Документы.ПолучитьЗначение(НомерДокумента, "ТипФормы");
	ДокументыПачкиВ.Договор = Документы.ПолучитьЗначение(НомерДокумента, "Договор");
	ДокументыПачкиВ.СтрокСтажа = СтрокСтажа;
	ДокументыПачкиВ.ТН = Документы.ПолучитьЗначение(НомерДокумента, "ТН");
	//	ДокументыПачкиВ.Договор = Документы.ПолучитьЗначение(НомерДокумента, "Договор");
	Документы.УдалитьСтроку(НомерДокумента);
	ДокументыПачкиИз.УдалитьСтроку(НомерДокумента);
	
	Документы.ТекущаяСтрока(Мин(НомерДокумента,Документы.КоличествоСтрок()));
	
КонецПроцедуры   // КнопкаДокументВПачку()

Процедура КнопкаДокументНовый()    // ввод нового документа 
	
	Если Пачки.КоличествоСтрок()=0 Тогда
		Предупреждение("Нет ни одной пачки!",6);
		Возврат;
	КонецЕсли;
		
	Если СокрЛП(Пачки.ПолучитьЗначение(Пачки.ТекущаяСтрока(),"СтрокСтажаПачки")) = "АДВ-11" Тогда
		Предупреждение("Ведомость уплаты взносов не содержит документов по сотрудникам!",8);
		Возврат;
	КонецЕсли;
	
	ПерваяСтрочка=0;
	Если Документы.КоличествоСтрок() >= констРазмерПачки Тогда
		Предупреждение("В пачке № "+НомерОтображаемойПачки+" уже содержится "+констРазмерПачки+" документов. "+РазделительСтрок+"Ввод нового документа в пачку невозможен!");
		Возврат;
	ИначеЕсли Документы.КоличествоСтрок()=0 Тогда // вводится первый документ в пачку, надо устанавливать стаж
		ПерваяСтрочка=1;
	КонецЕсли;
	
	//выбор сотрудника:
	Сотрудник = "";
	СпрСотрудники = СоздатьОбъект("Справочник.Сотрудники");
	Если СпрСотрудники.Выбрать("Выберите сотрудника","ДляВыбора") = 1 Тогда
		Сотрудник=СпрСотрудники.ТекущийЭлемент();
	Иначе
		Возврат;
	КонецЕсли;

	Если ТипФормируемыхДокументов=1 Тогда
		
		//проверим его стаж:
		ДоходыСотрудников = "";
		СтажСотрудников = "";
		ДоходыВычетыНалогиСотрудников = "";
		ДатаНачала = Дата(Год, 01, 01);
		ДатаОкончания = ДатаПо;
		Если глСобратьДанныеДляСЗВ2002(ДоходыСотрудников,СтажСотрудников,Сотрудник,ДатаПо,ДоходыВычетыНалогиСотрудников,Контекст) <> 0 Тогда

			//стаж:
			ТекущийСписокСтажа = СтажСотрудников.ПолучитьЗначение(1,"ТаблицаЗаписейОСтаже");
			
			СтрокСтажа = ТекущийСписокСтажа.КоличествоСтрок();

			//кроме количества строк стажа важно что там внутри:
			Если СтрокСтажа = 1 Тогда
				
				Если ТипЗначения(ТекущийСписокСтажа) <> 100 Тогда
					ТекущийСписокСтажа  = СоздатьОбъект("ТаблицаЗначений");
					ТекущийСписокСтажа.НоваяКолонка("ТипЗаписи","Строка",14,,,,,);
					ТекущийСписокСтажа.НоваяКолонка("НомерЗаписи","Число",2,0,,,,);
					ТекущийСписокСтажа.НоваяКолонка("Начало","Дата",,,,,,);
					ТекущийСписокСтажа.НоваяКолонка("Окончание","Дата",,,,,,);
					ТекущийСписокСтажа.НоваяКолонка("ТерриториальныеУсловия","Перечисление.ТерриториальныеУсловия",,,,,,);
					ТекущийСписокСтажа.НоваяКолонка("СЗВОсобыеУсловияТруда","Перечисление.СЗВОсобыеУсловияТруда",,,,,,);
					ТекущийСписокСтажа.НоваяКолонка("СЗВОснованияИТС","Перечисление.СЗВОснованияИТС",,,,,,);
					ТекущийСписокСтажа.НоваяКолонка("СЗВПараметр1ИТС","Число",5,0,,,,);
					ТекущийСписокСтажа.НоваяКолонка("СЗВПараметр2ИТС","Число",2,0,,,,);
					ТекущийСписокСтажа.НоваяКолонка("СЗВПараметр3ИТС","Перечисление.СЗВПараметр3ИТС",,,,,,);
					ТекущийСписокСтажа.НоваяКолонка("СЗВОснованияВыслугиЛет","Перечисление.СЗВОснованияВыслугиЛет",,,,,,);
					ТекущийСписокСтажа.НоваяКолонка("СЗВПараметр1ВыслугиЛет","Число",5,0,,,,);
					ТекущийСписокСтажа.НоваяКолонка("СЗВПараметр2ВыслугиЛет","Число",4,0,,,,);
					ТекущийСписокСтажа.НоваяКолонка("СЗВПараметр3ВыслугиЛет","Число",8,2,,,,);
					ТекущийСписокСтажа.НоваяКолонка("РК","Число",4,2,,,,);
					ТекущийСписокСтажа.НоваяКолонка("КПС","Строка",20,,,,,);
				КонецЕсли;
				
				НомПериод=""; НачПериод=""; КонПериод=""; ТУ=""; УТ=""; ОснованиеИТС="";
				ДопИТС=""; ОснованиеВыслуги="";  ДопВЛ=""; РК=""; КодПрофессии="";
				
				НомерСтрокиТаблицыСтажа = 1;
				
				ВидСтроки= ТекущийСписокСтажа.ПолучитьЗначение(НомерСтрокиТаблицыСтажа,"ТипЗаписи");
				Если ПустоеЗначение(ВидСтроки)=0  Тогда // обнаружено описание заполненной строки
					
					Если СокрЛП(ВидСтроки) = "Основная"  Тогда
						НомПериод=ТекущийСписокСтажа.ПолучитьЗначение(НомерСтрокиТаблицыСтажа,"НомерЗаписи");
						НачПериод=ТекущийСписокСтажа.ПолучитьЗначение(НомерСтрокиТаблицыСтажа,"Начало");
						КонПериод=ТекущийСписокСтажа.ПолучитьЗначение(НомерСтрокиТаблицыСтажа,"Окончание");
					Иначе  // в дополнительной строке номер и даты периода не указываются
						НомПериод="";
						НачПериод="";
						КонПериод="";
					КонецЕсли; 
					
					ТУ=ТекущийСписокСтажа.ПолучитьЗначение(НомерСтрокиТаблицыСтажа,"ТерриториальныеУсловия");
					УТ=ТекущийСписокСтажа.ПолучитьЗначение(НомерСтрокиТаблицыСтажа,"СЗВОсобыеУсловияТруда");
					ОснованиеИТС=ТекущийСписокСтажа.ПолучитьЗначение(НомерСтрокиТаблицыСтажа,"СЗВОснованияИТС");
					СписокПараметров = СоздатьОбъект("СписокЗначений");
					СписокПараметров.ДобавитьЗначение(ТекущийСписокСтажа.ПолучитьЗначение(НомерСтрокиТаблицыСтажа,"СЗВПараметр1ИТС"));
					СписокПараметров.ДобавитьЗначение(ТекущийСписокСтажа.ПолучитьЗначение(НомерСтрокиТаблицыСтажа,"СЗВПараметр2ИТС"));
					СписокПараметров.ДобавитьЗначение(ТекущийСписокСтажа.ПолучитьЗначение(НомерСтрокиТаблицыСтажа,"СЗВПараметр3ИТС"));
					ДопИТС="";
					ОснованиеВыслуги=ТекущийСписокСтажа.ПолучитьЗначение(НомерСтрокиТаблицыСтажа,"СЗВОснованияВыслугиЛет");
					СписокПараметров = СоздатьОбъект("СписокЗначений");
					СписокПараметров.ДобавитьЗначение(ТекущийСписокСтажа.ПолучитьЗначение(НомерСтрокиТаблицыСтажа,"СЗВПараметр1ВыслугиЛет"));
					СписокПараметров.ДобавитьЗначение(ТекущийСписокСтажа.ПолучитьЗначение(НомерСтрокиТаблицыСтажа,"СЗВПараметр2ВыслугиЛет"));
					СписокПараметров.ДобавитьЗначение(ТекущийСписокСтажа.ПолучитьЗначение(НомерСтрокиТаблицыСтажа,"СЗВПараметр3ВыслугиЛет"));
					ДопВЛ=глСобратьСтрокуПенсииЗаВыслугуЛет(ОснованиеВыслуги,СписокПараметров);
					РК=ТекущийСписокСтажа.ПолучитьЗначение(НомерСтрокиТаблицыСтажа,"РК");
					КодПрофессии=ТекущийСписокСтажа.ПолучитьЗначение(НомерСтрокиТаблицыСтажа,"КПС");
				КонецЕсли;
				
				Если 
				(ПустоеЗначение(УТ) = 0)или
				(ПустоеЗначение(ОснованиеИТС) = 0)или
				(ПустоеЗначение(ДопИТС) = 0)или
				(ПустоеЗначение(ОснованиеВыслуги) = 0)или
				(ПустоеЗначение(ДопВЛ) = 0)или
				(ПустоеЗначение(КодПрофессии) = 0) Тогда  // (ПустоеЗначение(ТУ) = 0) или (ПустоеЗначение(РК) = 0) или
					
					СтрокСтажа = 2;	
				КонецЕсли;
			КонецЕсли;
			
			Если ПерваяСтрочка=1 Тогда
				Пачки.УстановитьЗначение(Пачки.ТекущаяСтрока(),"СтрокСтажаПачки",?(СтрокСтажа>1,"СЗВ-4-1","СЗВ-4-2"));
				Документы.ВидимостьКолонки("СтрокСтажа",?(СтрокСтажа>1,1,0));
				
			Иначе //если строчка не первая - надо сравнить с пачкой:
				СтрокСтажаПачки = Пачки.ПолучитьЗначение(Пачки.ТекущаяСтрока(),"СтрокСтажаПачки");
				Если (СтрокСтажа>1) и (СокрЛП(СтрокСтажаПачки)="СЗВ-4-2")Тогда 
					Предупреждение("Данные выбранного сотрудника по параметрам стажа должны быть помещены в пачку СЗВ-4-1!");
					Возврат;
				ИначеЕсли(СтрокСтажа<2) и (СокрЛП(СтрокСтажаПачки)="СЗВ-4-1")Тогда
					Предупреждение("Данные выбранного сотрудника по параметрам стажа должны быть помещены в пачку СЗВ-4-2!");
					Возврат;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	Иначе
		// проверим нет ли у него страхового номера:
		Если ПустоеЗначение(СтрЗаменить(Сотрудник.СтраховойНомерПФР,"-","")) = 0 Тогда
			Предупреждение("У выбранного сотрудника уже есть страховой номер!");
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	// проверим не выбрано ли внутр. совмещение
	//Если Сотрудник <> Сотрудник.ОсновнойЭлемент Тогда
	//	Предупреждение("Выбрано внутреннее совместительство. 
	//	|Заменено на основное место работы.");
	//	Сотрудник = Сотрудник.ОсновнойЭлемент;
	//КонецЕсли;
	// проверим нет ли такого сотрудника уже в таблице:
	Если Документы.НайтиЗначение(Сотрудник,,"Сотрудник")=1 Тогда
		Предупреждение("Выбранный сотрудник уже есть в таблице!");
		Возврат;
	КонецЕсли;
	Документы.НоваяСтрока();
	Документы.Сотрудник = Сотрудник;
	
	ТипФормы = "";
	Если (Пачки.ТипФормыПачки = "ПЕНС_Кор") или (Пачки.ТипФормыПачки = "ПЕНС_Отм") Тогда
		ТипФормы = Перечисление.СЗВТипФормы.НазПенс;
	ИначеЕсли Пачки.ТипФормыПачки = "КОРР" Тогда 
		ТипФормы = Перечисление.СЗВТипФормы.Коррект; 
	ИначеЕсли Пачки.ТипФормыПачки = "ОТМН" Тогда 
		ТипФормы = Перечисление.СЗВТипФормы.Отмен;
	ИначеЕсли Пачки.ТипФормыПачки = "ИСХД" Тогда 
		ТипФормы = Перечисление.СЗВТипФормы.Исход;
	КонецЕсли;
	Документы.ТипФормы = ТипФормы;
	ДокументыПачки = Пачки.ПолучитьЗначение(Пачки.ТекущаяСтрока(),"ТаблицаДокументов");
	ДокументыПачки.НоваяСтрока();
	ДокументыПачки.Сотрудник = Сотрудник;
	Если ТипФормируемыхДокументов = 1 Тогда
		ДокументыПачки.СтрокСтажа = СтрокСтажа;
	КонецЕсли;
	
	ДокументыПачки.ТипФормы = ТипФормы;
	ДокументыПачки.ТУвПачке = ТУ;
	Документы.ТекущаяСтрока(Документы.КоличествоСтрок());
	УстановитьТекущуюПачку(Пачки.ТекущаяСтрока());		
	
КонецПроцедуры //  КнопкаДокументНовый()

Процедура КнопкаДокументУдалить()  //	 удаление документа из пачки (или из списка документов, если пачек нет)
	
	Если СокрЛП(Пачки.ПолучитьЗначение(НомерОтображаемойПачки,"СтрокСтажаПачки")) = "АДВ-11" Тогда
		Предупреждение("Ведомость уплаты взносов не содержит документов по сотрудникам!",8);
		Возврат;
	КонецЕсли;
	
	МенюВыбора = СоздатьОбъект("СписокЗначений");
	МенюВыбора.ДобавитьЗначение("Текущий", "Удалить текущий документ из пачки");//-3
	МенюВыбора.ДобавитьЗначение("ВсеВПачке", "Удалить все документы из пачки");//-3
	МенюВыбора.ДобавитьЗначение("Все", "Удалить все документы и все пачки");//-3 
	Номер = "";
	Если МенюВыбора.ВыбратьЗначение(Номер,,,,1)=0 Тогда
		Возврат;
	КонецЕсли;
	НомерСтроки = Документы.ТекущаяСтрока();
	ЕстьПачки = Пачки.КоличествоСтрок();
	
	Если Номер = "Текущий" Тогда
		Если Вопрос("Вы действительно хотите удалить документ по сотруднику "+Документы.Сотрудник+?(ЕстьПачки <> 0," из пачки?","?"), "Да+Нет") <> "Да" Тогда
			Возврат;
		КонецЕсли;
		Если ЕстьПачки <> 0 Тогда
			ДокументыПачки = Пачки.ПолучитьЗначение(НомерОтображаемойПачки,"ТаблицаДокументов");// Пачки.ТекущаяСтрока()
			ДокументыПачки.УдалитьСтроку(НомерСтроки);
		КонецЕсли;
		Документы.УдалитьСтроку(НомерСтроки);
	ИначеЕсли Номер = "ВсеВПачке" Тогда
		Если Вопрос("Вы действительно хотите удалить все документы "+?(ЕстьПачки <> 0," из пачки?","?"), "Да+Нет") <> "Да" Тогда
			Возврат;
		КонецЕсли;
		Если ЕстьПачки <> 0 Тогда
			ДокументыПачки = Пачки.ПолучитьЗначение(Пачки.ТекущаяСтрока(),"ТаблицаДокументов");
			Пока ДокументыПачки.КоличествоСтрок()>0 Цикл
				ДокументыПачки.УдалитьСтроку(ДокументыПачки.КоличествоСтрок());
			КонецЦикла;
		Иначе
		КонецЕсли;
		Пока Документы.КоличествоСтрок()>0 Цикл
			Документы.УдалитьСтроку(Документы.КоличествоСтрок());
		КонецЦикла;
	Иначе	
		Если Вопрос("Вы действительно хотите удалить все документы "+?(ЕстьПачки <> 0," из всех пачек?","?"), "Да+Нет") <> "Да" Тогда
			Возврат;
		КонецЕсли;
		Если ЕстьПачки <> 0 Тогда
			Пока Пачки.КоличествоСтрок()>0 Цикл
				РазмерСписка = Пачки.КоличествоСтрок();
				ДокументыПачки = Пачки.ПолучитьЗначение(РазмерСписка,"ТаблицаДокументов");
				Пока ДокументыПачки.КоличествоСтрок()>0 Цикл
					ДокументыПачки.УдалитьСтроку(ДокументыПачки.КоличествоСтрок());
				КонецЦикла; 
				Пачки.УдалитьСтроку(РазмерСписка);
			КонецЦикла;  
		КонецЕсли;
		Пока Документы.КоличествоСтрок()>0 Цикл
			Документы.УдалитьСтроку(Документы.КоличествоСтрок());
		КонецЦикла;
	КонецЕсли;
	
	// обновим вид таблиц:
	Форма.Обновить();
	
	
КонецПроцедуры //  КнопкаДокументУдалить()  

//******************************************************************************  
// Процедура позволяет изменить флаги передачи адреса информирования в выбранной
//пачке документов
Процедура ИзменитьФлагиПередачиАдреса() 
	
	ДатаНачала = Дата(Год, 01, 01);
			
	Если Документы.КоличествоСтрок()=0 Тогда
		//в пачке нет документов
		Возврат;
	КонецЕсли;
	
	СписокДействий = СоздатьОбъект("СписокЗначений");
	СписокДействий.ДобавитьЗначение("Отменить у всех");
	СписокДействий.ДобавитьЗначение("Установить у всех");
	СписокДействий.ДобавитьЗначение("Установить только новым сотрудникам");
	СписокДействий.ДобавитьЗначение("Добавить новым сотрудникам");
	НомерЗначения="";
	СписокДействий.ВыбратьЗначение( , ,НомерЗначения, ,1); 
	
	НомерПачки=Пачки.ТекущаяСтрока();
	СписокДокументов=Пачки.ПолучитьЗначение(НомерПачки,"ТаблицаДокументов");
	Если (НомерЗначения=1) ИЛИ (НомерЗначения=2) Тогда
		//получим таблицу из пачки, изменим в ней и перезапишим таблицу
		
		СписокДокументов.ВыбратьСтроки();
		Пока СписокДокументов.ПолучитьСтроку()=1 Цикл
			СписокДокументов.ПередаватьАдрес=?(НомерЗначения=1,0,1);
		КонецЦикла;                                                 
		
	ИначеЕсли НомерЗначения=3 Тогда
		//очистим у всех и установим только новым сотрудникам
		//новый сотрудник, это сотрудник, имеющий пустое состояние физлица на начало
		//расчетного периода                             
		СписокДокументов.ВыбратьСтроки();
		Пока СписокДокументов.ПолучитьСтроку()=1 Цикл
			Сотрудник=СписокДокументов.Сотрудник;			
			СписокДокументов.ПередаватьАдрес=?(глСотрудникЧислитсяРаботающим(Сотрудник, ДатаНачала) = 1,0,1);		
		КонецЦикла; 
	ИначеЕсли НомерЗначения=4 Тогда
		//установим только новым сотрудникам
		//новый сотрудник, это сотрудник, имеющий пустое состояние физлица на начало
		//расчетного периода                             
		СписокДокументов.ВыбратьСтроки();
		Пока СписокДокументов.ПолучитьСтроку()=1 Цикл
			Сотрудник=СписокДокументов.Сотрудник;
			Если глСотрудникЧислитсяРаботающим(Сотрудник, ДатаНачала) = 0 Тогда
				СписокДокументов.ПередаватьАдрес=1;    
			КонецЕсли;			
		КонецЦикла; 	
	КонецЕсли;  
	
	Пачки.УстановитьЗначение(НомерПачки,"ТаблицаДокументов",СписокДокументов);
	УстановитьТекущуюПачку(НомерПачки);
	
КонецПроцедуры //ИзменитьФлагиПередачиАдреса

//******************************************************************************
//	Подсказка()
//
//	Параметры:
//		нет
// 
// 	Возвращаемое значение:
//		строка, описывающая текущий документ (тот на котором курсор таблицы Документы)
//
//	Описание:
//		предназначена отображения подсказки по документу и 
//		для вызова функции УстановитьСостояниеКнопок()
//		обновляет состояние кнопок при отрисовке формы
//
Функция Подсказка()
	УстановитьСостояниеКнопок();
	НомерДокумента = Документы.ТекущаяСтрока();
	Если НомерДокумента > 0 Тогда
		СтрокаПодсказки = ""+Документы.ПолучитьЗначение(НомерДокумента,"Сотрудник");
		Если (ТипФормируемыхДокументов=1) и Не(СОКРЛП(Пачки.ПолучитьЗначение(Пачки.ТекущаяСтрока(), "СтрокСтажаПачки"))="АДВ-11") Тогда
			Документы.ВыводитьПиктограммы("ПередаватьАдрес",2);
			СтрАдреса=?(Документы.ПолучитьЗначение(НомерДокумента,"ПередаватьАдрес")=0,"Адрес для информирования не передается","Адрес для информирования будет передан");
			СтрокаПодсказки = СтрокаПодсказки+РазделительСтрок+СтрАдреса;
		КонецЕсли;
	КонецЕсли;
	
	Возврат СтрокаПодсказки;
КонецФункции	// Подсказка

//******************************************************************************
//	ПодсказкаПоПачке()
//
//	Параметры:
//		нет
// 
// 	Возвращаемое значение:
//		строка - подсказка по числу документов в пачке
//
//	Описание:
//		предназначена отображения подсказки по пачке документов
//
Функция ПодсказкаПоПачке()
	НомерПачки = Пачки.ТекущаяСтрока();
	Если НомерПачки > 0 Тогда
		СтрокаПодсказки = "Документов в пачке: "+Пачки.ПолучитьЗначение(НомерПачки,"ТаблицаДокументов").КоличествоСтрок();
	Иначе
		СтрокаПодсказки = "";
	КонецЕсли;
	
	Возврат СтрокаПодсказки;
КонецФункции    // ПодсказкаПоПачке

//******************************************************************************
//	СменаНастроек()
//
//	Параметры:
//		нет
// 
// 	Возвращаемое значение:
//		нет
//
//	Описание:
//		Вызывается при выборе контролов, которые отвечают за уникальность настроек
//		год, период и тип документа
//
Процедура СменаНастроек()
	
	СохранитьНастройки(ИмяТекущегоФайлаНастроек);
	ВосстановитьНастройки(ИмяФайлаНастроек());
	Если ПрошлыйГод <> Год Тогда
		СохранитьТаблицуПеречислений();
		ВосстановитьТаблицуПеречислений();
		ПрошлыйГод = Год;
	КонецЕсли;
	Пачки.ВидимостьКолонки("СтрокСтажаПачки",	?(ТипФормируемыхДокументов = 1,1,0));
	Пачки.ВидимостьКолонки("ТипФормыПачки", 	?(ТипФормируемыхДокументов = 1,1,0));
	Пачки.ВидимостьКолонки("ДопТип",			?(ТипФормируемыхДокументов = 1,1,0));
	
	Если ТипФормируемыхДокументов = 1 Тогда
		Форма.ДатаПо.Доступность(1);
		Документы.ВидимостьКолонки("ПередаватьАдрес",1);
		Форма.Форматы.Доступность(1);
	Иначе
		Форма.ДатаПо.Доступность(0);
		Документы.ВидимостьКолонки("ПередаватьАдрес",0);		
		Если ТипФормируемыхДокументов = 3 Тогда
			Форматы.ТекущаяСтрока(1);
			Форма.Форматы.Доступность(0);
		Иначе
			Форма.Форматы.Доступность(1);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры	// СменаНастроек  

//******************************************************************************
//	ПечатьСпискаЗастрахованныхЛиц()
//
//	Параметры:
//		нет
// 
//	Описание:
//		Вызывается при нажатии на кнопку печать, если в диалоге выбран переключатель выводить Индивидуальные сведения или СЗВ-К
//
Процедура ПечатьСпискаЗастрахованныхЛиц() 
	ВыходнаяТаблица = СоздатьОбъект("Таблица");
	ВыходнаяТаблица.ИсходнаяТаблица("Списки");

	ИННОрганизации=СокрЛП(Константа.ИННОрганизации);
	ОдинадцатыйСимвол=Сред(ИННОрганизации,11,1);
	Если (Строка(Число(ОдинадцатыйСимвол))=ОдинадцатыйСимвол) и (ПустаяСтрока(ОдинадцатыйСимвол) = 0) Тогда // оказалось физическое лицо
		ИНН=Лев(ИННОрганизации,12);
		КПП = "";
	Иначе // оказалась организация	
		ИНН = Лев(ИННОрганизации,10);
		КПП = Прав(ИННОрганизации,9);
	КонецЕсли;

	Наименование = СокрЛП(Константа.НазваниеОрганизации);
	РегНомерПФР = СокрЛП(глПолучитьНалог("ПФР_страх").РегНомер);
	
	ДатаВыдачиСведенияПФР = НРег(Формат(ДатаВыдачиСведения,"ДДДММММГГГГ"));	
	ВыводитьТаблицу = 1;
	ВыходнаяТаблица.ВывестиСекцию("Шапка"); 
	Если Пачки.КоличествоСтрок() > 0 Тогда
		ДокументыПачки = Пачки.ПолучитьЗначение(Пачки.ТекущаяСтрока(),"ТаблицаДокументов");	
		СписокСотров = СоздатьОбъект("СписокЗначений");	
		ДокументыПачки.Выгрузить(СписокСотров,,,"Сотрудник");	
		Для СчСотр = 1 По СписокСотров.РазмерСписка() Цикл
			Сотрудник = СписокСотров.ПолучитьЗначение(СчСотр);
			Если Сотрудник = "Ведомость уплаты взносов" Тогда
				Предупреждение("Для АДВ-11 список застрахованных лиц не формируется");
				ВыводитьТаблицу = 0;
				Прервать;
			КонецЕсли;   		
			ВыходнаяТаблица.ВывестиСекцию("строка");	
		КонецЦикла; 
		Если ВыводитьТаблицу = 1 Тогда
			ВыходнаяТаблица.ВывестиСекцию("Подвал");
			ВыходнаяТаблица.ТолькоПросмотр(1);       
			ВыходнаяТаблица.Показать("Списки застрахованных лиц");
		КонецЕсли;	
	КонецЕсли;
КонецПроцедуры	// ПечатьСпискаЗастрахованныхЛиц

//******************************************************************************
//	ВыбратьПачку(ВУПЛ=1, Печать=0)
//
//	Параметры:
//		ВУПЛ - число, если равно 1 - в список для выбора добавляются пачки АДВ-11 
//		Печать - число, если равно 1 то вызивается из кнопки "Печать", иначе из кнопки "В файл"
// 
// 	Возвращаемое значение:
//		число - номер позиции в списке пачек, 0 - если выбор не сделан
//
//	Описание:
//		Вызывается при выборе пачки с использованием меню (например, 
//		при перемещении документа в другую пачку)
//
Функция ВыбратьПачку(ВУПЛ=1, Печать = 0)
	
	МенюВыбора = СоздатьОбъект("СписокЗначений");
	Для Счетчик = 1 По Пачки.КоличествоСтрок() Цикл
		Номер = Пачки.ПолучитьЗначение(Счетчик, "Номер");
		Если (ВУПЛ=1) или (СокрЛП(Пачки.ПолучитьЗначение(Счетчик,"СтрокСтажаПачки")) <> "АДВ-11") Тогда
			МенюВыбора.ДобавитьЗначение(Счетчик, "Пачка №"+ Номер);
		КонецЕсли;
	КонецЦикла; 
	Если (ТипФормируемыхДокументов <> 2) и (Печать = 1) и (Документы.КоличествоСтрок() > 0) Тогда
		// добавим списки застрахованных лиц 
		МенюВыбора.ДобавитьЗначение(Счетчик, "Список застрахованных лиц");
	КонецЕсли;
	Если МенюВыбора.ВыбратьЗначение(Номер,,,,1)=1 Тогда
		Если (ТипФормируемыхДокументов <> 2) и (Печать = 1) и (Номер = Счетчик) Тогда 
			ПечатьСпискаЗастрахованныхЛиц();
			Возврат 0;			           
		Иначе
			НомерПачки = Пачки.ПолучитьЗначение(Номер, "Номер");
			// номер пачки и номер строки в таблице пачки могут отличаться
			//нам надо по номеру пачки найти строку в таблице пачек
			НомерСтрокиПачки = "";
			Если Пачки.НайтиЗначение(НомерПачки,НомерСтрокиПачки,"Номер")=1 Тогда
				Если СокрЛП(Пачки.ПолучитьЗначение(НомерСтрокиПачки,"СтрокСтажаПачки")) <> "АДВ-11" Тогда
					Возврат НомерСтрокиПачки;
				Иначе
					Возврат "Своды"+НомерСтрокиПачки
				КонецЕсли;
			Иначе
				Возврат 0;
			КонецЕсли;
		КонецЕсли;
	Иначе
		Возврат 0;
	КонецЕсли;
КонецФункции // ВыбратьПачку

//******************************************************************************
//	Сортировать()
//
//	Параметры:
//		нет
// 
//	Вызывается из формул элементов диалога:
//		кнопка сотрировки (A-Z)
//
// 	Возвращаемое значение:
//		нет
//
//	Описание:
//		Запрос типа сортировки и сортировка документов в текущей пачке
//
Процедура Сортировать()
	Перем Способ;
	
	Если НомерОтображаемойПачки <= Пачки.КоличествоСтрок() Тогда
		СпособыСортировки = СоздатьОбъект("СписокЗначений");
		СпособыСортировки.ДобавитьЗначение("Сотрудник+", "По ФИО");
		СпособыСортировки.ДобавитьЗначение("ТН+", "По табельному номеру (коду)");
		Если СпособыСортировки.ВыбратьЗначение(Способ,,,,1) <> 1 Тогда
			Возврат;
		КонецЕсли;
		Пачки.ПолучитьЗначение(НомерОтображаемойПачки,"ТаблицаДокументов").Сортировать(Способ);
		Документы.Сортировать(Способ);
	КонецЕсли;
КонецПроцедуры   // Сортировать 

//******************************************************************************
Процедура ИзменитьДокумент()
	Если Документы.ТекущаяКолонка()="Сотрудник" Тогда
	    ОткрытьФорму(Документы.Сотрудник);
	Иначе 
		Если ТипФормируемыхДокументов=1 Тогда
			
			Если Документы.КоличествоСтрок() = 0 Тогда
				Возврат;
			КонецЕсли;
			
			НомерДокумента=Документы.ТекущаяСтрока(); //номер строки в таблице значений Документы
			Если Документы.ПередаватьАдрес=0 Тогда
				ПередаватьАдрес=1;
			Иначе
				ПередаватьАдрес=0;
			КонецЕсли; 
			Документы.ПередаватьАдрес=ПередаватьАдрес;
			НомерПачки=Пачки.ТекущаяСтрока();
			Пачки.ПолучитьСтрокуПоНомеру(НомерПачки);
			Пачки.ТаблицаДокументов.УстановитьЗначение(НомерДокумента,"ПередаватьАдрес",ПередаватьАдрес); 
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры //ИзменитьДокумент

//******************************************************************************
//	Печать()
//
//	Параметры:
//		нет
// 
//	Вызывается из формул элементов диалога:
//		Печать
//
// 	Возвращаемое значение:
//		нет
//
//	Описание:
//		Вывод на печать запрошенной пачки документов
//
Процедура Печать()
	Перем Категории[12];
	Перем СредняяЧисленность[12];
	Перем ВсегоНачисленоБЛ[12];
	Перем ВсегоНачисленоЗаработка[12];
	Перем ВсегоНачисленоЕСН[12];
	
	ЧислоГод = Число(Год);
	
	Если ЧислоГод < 2001 Тогда
		Предупреждение("Формирование сведений в формате 4.00 производится"+РазделительСтрок+" только за периоды с 1 января 2001 года!");
		Возврат
	КонецЕсли;
	
	НомерПачки = ВыбратьПачку(, 1);
	
	Если НомерПачки = 0 Тогда
		Возврат
	КонецЕсли;
	
	ВыходнаяТаблица = СоздатьОбъект("Таблица");
	
	Квартал1 = ""; Квартал2 = ""; Квартал3 = ""; Квартал4 = "";
	
	ИННОрганизации = Константа.ИННОрганизации;
	ОдинадцатыйСимвол=Сред(ИННОрганизации,11,1);
	Если (Строка(Число(ОдинадцатыйСимвол))=ОдинадцатыйСимвол) и (ПустаяСтрока(ОдинадцатыйСимвол) = 0) Тогда // оказалось физическое лицо
		ИНН=Лев(ИННОрганизации,12);
		КПП = "";
	Иначе // оказалась организация	
		ИНН = Лев(ИННОрганизации,10);
		КПП = Прав(ИННОрганизации,9);
	КонецЕсли;

	Наименование = СокрЛП(Константа.НазваниеОрганизации);

    // разнесем наим. на две строки
	ДлинаНаименования = СтрДлина(Наименование);
	//НаименованиеКр1 = "";
	Если ДлинаНаименования < 60 Тогда
		НаименованиеКр1 = Наименование;
		НаименованиеКр2 = "";
	Иначе
		КоличествоПробелов = СтрЧислоВхождений(Наименование," ");
		ПозицияОчерПробела = Найти(Наименование," ");
		Если (КоличествоПробелов = 0)или(ПозицияОчерПробела > 60) Тогда
			НаименованиеКр1 = Лев(Наименование,60);
			НаименованиеКр2 = Прав(Наименование,ДлинаНаименования-60);
		Иначе
			Пока ПозицияОчерПробела <= 60 Цикл
				НаименованиеКр1 = Сред(Наименование,1,ПозицияОчерПробела);
				НаимВрем = СтрЗаменить(НаименованиеКр1," ",",")+Прав(Наименование,ДлинаНаименования-ПозицияОчерПробела);
				ПозицияОчерПробела = Найти(НаимВрем," ");
				Если ПозицияОчерПробела = 0 Тогда
				  Прервать;  
				КонецЕсли;
			КонецЦикла;
			НаименованиеКр2 = Прав(Наименование,ДлинаНаименования-СтрДлина(НаименованиеКр1));
			
		КонецЕсли;
		//если конец наименования имеет длинну > чем 65 символов без пробелов, то искать пробелы - напрасная затея:
		Если СтрДлина(НаименованиеКр2) > 60 Тогда
			НаименованиеКр1 = Лев(Наименование,60);
			НаименованиеКр2 = Прав(Наименование,ДлинаНаименования-60);
		КонецЕсли;
	КонецЕсли;
	
	РегНомерПФР = СокрЛП(глПолучитьНалог("ПФР_страх").РегНомер);
	ДатаВыдачиСведенияПФР = НРег(Формат(ДатаВыдачиСведения,"ДДДММММГГГГ"));
	ОбъектНалогообложенияПоПачке = 0;
	ПоБольничнымПоПачке = 0;
	
	ДатаОкончания = ДатаПо;
	ПервыйМесяц = 1;
	ПоследнийМесяц = ДатаМесяц(ДатаОкончания);
	
	НачисленоСтр = 0;
	НачисленоНкп = 0;
	НачисленоДоп = 0;
	
	ТипПачки = Лев(НомерПачки,5);	
		
	Если ТипПачки = "Своды" Тогда  //ПечатьАДВ11(); и (ЧислоГод >= 2002) 
		
		СохранитьТаблицуПеречислений();
		
		УстановитьДатыПериодаОтчетности(,Квартал1,Квартал2,Квартал3,Квартал4);
		
		Хорошо = 0;
		
		НомерПачки = Число(Сред(НомерПачки,6));
		
		// отсортируем: ТаблицаПеречислений1
		ТаблицаПеречислений1.Сортировать("ТипДанных,Год");
		// очистим от возможного мусора (пустое значение в первой колонке таблицы или не задан год или сумма цифр нулевая):
		ТаблицаПеречислений1.ВыбратьСтроки();
		СчСтрок = 0;
		Пока ТаблицаПеречислений1.ПолучитьСтроку() = 1 Цикл
			СчСтрок = СчСтрок + 1;
			Если (ПустоеЗначение(ТаблицаПеречислений1.ПолучитьЗначение(СчСтрок,1))=1)и(ПустоеЗначение(ТаблицаПеречислений1.ПолучитьЗначение(СчСтрок,2))=1)и
			((ТаблицаПеречислений1.ПолучитьЗначение(СчСтрок,3)+ТаблицаПеречислений1.ПолучитьЗначение(СчСтрок,4)+ТаблицаПеречислений1.ПолучитьЗначение(СчСтрок,5)) = 0) Тогда
				ТаблицаПеречислений1.УдалитьСтроку(); 
				ТаблицаПеречислений1.ВыбратьСтроки();
				СчСтрок = 0; //снова начнем выборку с первой строки, чтобы не сбиться
			ИначеЕсли (ПустоеЗначение(ТаблицаПеречислений1.ПолучитьЗначение(СчСтрок,1))=1)или(ПустоеЗначение(ТаблицаПеречислений1.ПолучитьЗначение(СчСтрок,2))=1)или
			((ТаблицаПеречислений1.ПолучитьЗначение(СчСтрок,3)+ТаблицаПеречислений1.ПолучитьЗначение(СчСтрок,4)+ТаблицаПеречислений1.ПолучитьЗначение(СчСтрок,5)) = 0) Тогда
				ТаблицаПеречислений1.ТекущаяСтрока(СчСтрок);
				Предупреждение("Текущая строка заполнена неверно!");
				Возврат;
			КонецЕсли;
			
		КонецЦикла;
		
		НомерПервойПачки = 1;
		ЗастрахованныхЛиц = 0; // эта переменная используется в таблице АДВ-11
		Для СчПачек = -НомерПачки+1 По -1 Цикл
			Если СокрЛП(Пачки.ПолучитьЗначение(-СчПачек,"СтрокСтажаПачки")) = "АДВ-11" Тогда
				НомерПервойПачки = -СчПачек + 1;
				Прервать
			Иначе
				ЗастрахованныхЛиц = ЗастрахованныхЛиц + Пачки.ПолучитьЗначение(-СчПачек,"ТаблицаДокументов").КоличествоСтрок();
			КонецЕсли;
		КонецЦикла;
		КолПачек = НомерПачки - НомерПервойПачки; // эта переменная используется в таблице АДВ-11
		
		ВыходнаяТаблица.ИсходнаяТаблица("АДВ-11");
		
		Признак = ПолучитьПризнакТарифа(Дата("31.12."+Строка(Год)));

		Сч69_2_2 = СчетПоКоду("69.2.2");
	
		БухИт = СоздатьОбъект("БухгалтерскиеИтоги");
		БухИт.ИспользоватьСубконто(ВидыСубконто.ВидыПлатежейВБюджет, Перечисление.ВидыПлатежейВБюджет.Налог, 2);
		БухИт.ВыполнитьЗапрос(ДатаНачала, ДатаОкончания, "69.2.2, 69.2.3");
	
		БухИт.ВыбратьСчета();
		Пока БухИт.ПолучитьСчет() = 1 Цикл
		    Если БухИт.Счет = Сч69_2_2 Тогда
		        НачисленоСтр = БухИт.КО();
				
			Иначе
				НачисленоНкп = БухИт.КО();
		    КонецЕсли;
		КонецЦикла;
		
		ГодОтчета = ДатаГод(ДатаОкончания);
		СпрСотр = СоздатьОбъект("Справочник.Сотрудники");
		СпрСотр.ВыбратьЭлементы();
		Пока СпрСотр.ПолучитьЭлемент() = 1 Цикл
		    Если (СпрСотр.ЭтоГруппа() = 0) и (СпрСотр.ПометкаУдаления() = 0) Тогда
				ГодНачалаУчета = ДатаГод(СпрСотр.ДатаПриема);
				Если ГодНачалаУчета = ГодОтчета Тогда
				    НачисленоСтр = НачисленоСтр + СпрСотр.НачисленныйПФР_страх_СНачалаГода;
					НачисленоНкп = НачисленоНкп + СпрСотр.НачисленныйПФР_нак_СНачалаГода;
				КонецЕсли;
		    КонецЕсли;
		КонецЦикла;
		
		Если ОкруглятьНачисленное = 1 Тогда
			НачисленоСтр = Окр(НачисленоСтр);
			НачисленоНкп = Окр(НачисленоНкп);
			НачисленоДоп = Окр(НачисленоДоп);  
		КонецЕсли;
		
		// после подсчета взносов по доп тарифу можно выводить шапку свода:
		ВыходнаяТаблица.ВывестиСекцию("Свод<");
		
		//введенная вручную задолженность:
		БылаНачЗадолж = 0;  БылаУплаченная = 0; БылаКонЗадолж = 0;
		ИтНаСтраховую = 0;  
		ИтНаНакопитлн = 0;  
		ИтПоДопТарифу = 0;
		
		// начальная задолженность за тек. год
		НачальнаяПоСтраховойГод = 0;
		НачальнаяПоНакопитлнГод = 0;
		НачальнаяПоДопТарифуГод = 0;

		Для СчСтрок = 1 По ТаблицаПеречислений1.КоличествоСтрок() Цикл
			ТекГод      = ТаблицаПеречислений1.ПолучитьЗначение(СчСтрок,"Год");
			Если ОкруглятьНачисленное = 1 Тогда
				НаСтраховую = Окр(ТаблицаПеречислений1.ПолучитьЗначение(СчСтрок,"Страховых"));
				НаНакопитлн = Окр(ТаблицаПеречислений1.ПолучитьЗначение(СчСтрок,"Накопительных"));
				ПоДопТарифу	= Окр(ТаблицаПеречислений1.ПолучитьЗначение(СчСтрок,"ДопТариф"));	
			Иначе
				НаСтраховую = ТаблицаПеречислений1.ПолучитьЗначение(СчСтрок,"Страховых");
				НаНакопитлн = ТаблицаПеречислений1.ПолучитьЗначение(СчСтрок,"Накопительных");
				ПоДопТарифу	= ТаблицаПеречислений1.ПолучитьЗначение(СчСтрок,"ДопТариф");	
			КонецЕсли;
			
			Если Найти(ТаблицаПеречислений1.ПолучитьЗначение(СчСтрок,1),"Hачальная") > 0 Тогда
				БылаНачЗадолж=1;
				ВыходнаяТаблица.ВывестиСекцию("Пенсий");
				Если Число(ТекГод) = Число(Год) Тогда
					НачальнаяПоСтраховойГод = НаСтраховую;
					НачальнаяПоНакопитлнГод = НаНакопитлн;
					НачальнаяПоДопТарифуГод = ПоДопТарифу;
				КонецЕсли;                
			ИначеЕсли Найти(ТаблицаПеречислений1.ПолучитьЗначение(СчСтрок,1),"уплач") > 0 Тогда
				//выводим очередную шапку, но сначала посмотрим, были ли суммы
				Если БылаНачЗадолж=0 Тогда 
					БылаНачЗадолж = 1;
					ВыходнаяТаблица.ВывестиСекцию("пустая");
				КонецЕсли;
				Если БылаУплаченная=0 Тогда
					ВыходнаяТаблица.ВывестиСекцию("ПодвШапка");
					ИтНаСтраховую = 0;  
					ИтНаНакопитлн = 0;  
					ИтПоДопТарифу = 0;
				КонецЕсли;
				БылаУплаченная=1;
				ВыходнаяТаблица.ВывестиСекцию("Пенсий");
			ИначеЕсли Найти(ТаблицаПеречислений1.ПолучитьЗначение(СчСтрок,1),"Конечн") > 0 Тогда 
				Если БылаНачЗадолж=0 Тогда 
					БылаНачЗадолж = 1;
					ВыходнаяТаблица.ВывестиСекцию("пустая");
				КонецЕсли;
				Если БылаУплаченная=0 Тогда 
					БылаУплаченная = 1;
					ВыходнаяТаблица.ВывестиСекцию("ПодвШапка");
					ВыходнаяТаблица.ВывестиСекцию("пустая");
					ИтНаСтраховую = 0;  
					ИтНаНакопитлн = 0;  
					ИтПоДопТарифу = 0;
				КонецЕсли;
				Если БылаКонЗадолж=0 Тогда
					ВыходнаяТаблица.ВывестиСекцию("итоги");
					ВыходнаяТаблица.ВывестиСекцию("Шапка3");
					ИтНаСтраховую = 0;  
					ИтНаНакопитлн = 0;  
					ИтПоДопТарифу = 0;
				КонецЕсли;
				БылаКонЗадолж =1;
				ВыходнаяТаблица.ВывестиСекцию("Пенсий");
			КонецЕсли;
			
			ИтНаСтраховую = ИтНаСтраховую + НаСтраховую;
			ИтНаНакопитлн = ИтНаНакопитлн + НаНакопитлн;
			ИтПоДопТарифу = ИтПоДопТарифу + ПоДопТарифу;
			
		КонецЦикла;
		
		Если (БылаНачЗадолж = 0)и(БылаУплаченная = 0)и(БылаКонЗадолж = 0) Тогда
			ВыходнаяТаблица.ВывестиСекцию("пустая");
			ВыходнаяТаблица.ВывестиСекцию("ПодвШапка");
			ВыходнаяТаблица.ВывестиСекцию("пустая");
			ВыходнаяТаблица.ВывестиСекцию("итоги");
			ВыходнаяТаблица.ВывестиСекцию("Шапка3");
			ВыходнаяТаблица.ВывестиСекцию("пустая");
		ИначеЕсли                (БылаУплаченная = 0)и(БылаКонЗадолж = 0) Тогда
			
			ВыходнаяТаблица.ВывестиСекцию("ПодвШапка");
			
			// теперь обнулим итоги и выведем остальное
			ИтНаСтраховую = 0;  
			ИтНаНакопитлн = 0;  
			ИтПоДопТарифу = 0;
			ВыходнаяТаблица.ВывестиСекцию("пустая");
			ВыходнаяТаблица.ВывестиСекцию("итоги");
			ВыходнаяТаблица.ВывестиСекцию("Шапка3");
			ВыходнаяТаблица.ВывестиСекцию("пустая");
		ИначеЕсли                                     (БылаКонЗадолж = 0) Тогда
			ВыходнаяТаблица.ВывестиСекцию("итоги");
			
			// теперь обнулим итоги и выведем остальное
			ВыходнаяТаблица.ВывестиСекцию("Шапка3");
			ВыходнаяТаблица.ВывестиСекцию("пустая");
			ИтНаСтраховую = 0;  
			ИтНаНакопитлн = 0;  
			ИтПоДопТарифу = 0;
		КонецЕсли;	
		ВыходнаяТаблица.ВывестиСекцию("итоги");
		ВыходнаяТаблица.ВывестиСекцию("Свод>");
		
		ВыходнаяТаблица.Опции(0,0,0,0, "СводСЗВ4", "СводСЗВ4");
		ВыходнаяТаблица.ПараметрыСтраницы(1,,,0,0,0,0,0,0,0,1);
		ВыходнаяТаблица.ТолькоПросмотр(1);
		ВыходнаяТаблица.Показать("Ведомость уплаты взносов (АДВ-11)"); //пачка №"+НомерПачки
		
		ВсегоДокументов = "";
		
	ИначеЕсли НомерПачки > 0 Тогда
		Сводов = "";
		ДокументыПачки = Пачки.ПолучитьЗначение(НомерПачки,"ТаблицаДокументов");
		//НомерПачки = Пачки.ПолучитьЗначение(НомерПачки,"Номер");
		ВсегоДокументов = ДокументыПачки.КоличествоСтрок();
		ДоковВПачке = ВсегоДокументов;
		
		СписокСотров = СоздатьОбъект("СписокЗначений");
		ДокументыПачки.Выгрузить(СписокСотров,,,"Сотрудник");

		НовСтраница42 = 0; //когда переходить на новую страницу

		НомПачкиВПачке = Пачки.ПолучитьЗначение(НомерПачки,"Номер");
		Если СписокСотров.РазмерСписка()=0 Тогда
			Предупреждение("В пачке №"+НомПачкиВПачке+" нет документов!");
			Возврат;
		КонецЕсли;
		
		ТипФ=Пачки.ПолучитьЗначение(НомерПачки,"ТипФормыПачки");
		ТипДоп=Пачки.ПолучитьЗначение(НомерПачки,"ДопТип");
		ТУвПачке = "";
		
		Если ТипФормируемыхДокументов = 1 Тогда
			
			Если ТипФ = "ОТМН" Тогда
				ТипДоп = "ОТМН"
			КонецЕсли;
			
			Если ДокументыПачки.ПолучитьЗначение(1,"СтрокСтажа")>1 Тогда
				Если Год < 2006 Тогда
					ВыходнаяТаблица.ИсходнаяТаблица("СЗВ-4-1");
				Иначе
					ВыходнаяТаблица.ИсходнаяТаблица("СЗВ-4-1_2007");
				КонецЕсли;
				ИсходнаяТаблица = "СЗВ-4-1";
			Иначе
				ВыходнаяТаблица.ИсходнаяТаблица("СЗВ-4-2");
				ИсходнаяТаблица = "СЗВ-4-2";
				ДоковВПачке = 1;
			КонецЕсли;
			
			УстановитьДатыПериодаОтчетности(,Квартал1,Квартал2,Квартал3,Квартал4);
			
			ДоходыВычетыНалогиСотрудников = "";
			Если СобратьДанныеДляЕСН(ДоходыВычетыНалогиСотрудников,СписокСотров) = 0 Тогда
				Возврат
			КонецЕсли;
			ДоходыСотрудников = "";
			СтажСотрудников = "";
			Если глСобратьДанныеДляСЗВ2002(ДоходыСотрудников,СтажСотрудников,СписокСотров,ДатаПо,ДоходыВычетыНалогиСотрудников,Контекст) = 0 Тогда
				Возврат 
			КонецЕсли;
			
			КолСотр = СписокСотров.РазмерСписка();
			Для СчСотров = 1 По КолСотр Цикл
				Сотрудник = СписокСотров.ПолучитьЗначение(СчСотров);
				СтрокаИтоговойТаблицы = ПоследнийМесяц + ДатаМесяц(ДатаПо) * (СчСотров-1);
				// здесь определяем взносы в ПФР на страховую часть пенсии
				НачисленоСтр = НачисленоСтр + ДоходыВычетыНалогиСотрудников.ПолучитьЗначение(СтрокаИтоговойТаблицы, 2);
				
				// здесь определяем взносы в ПФР на накопительную часть пенсии
				НачисленоНкп = НачисленоНкп + ДоходыВычетыНалогиСотрудников.ПолучитьЗначение(СтрокаИтоговойТаблицы, 3);
				
				НомерСтроки = "";
				Если ДоходыСотрудников.НайтиЗначение(Сотрудник,НомерСтроки,"Сотрудник") = 1 Тогда
					НачисленоДоп = НачисленоДоп + ДоходыСотрудников.ПолучитьЗначение(НомерСтроки,"ВзносовДоп");
				КонецЕсли;
			КонецЦикла;

			Если ОкруглятьНачисленное = 1 Тогда
				НачисленоСтр = Окр(НачисленоСтр);
				НачисленоНкп = Окр(НачисленоНкп);
				НачисленоДоп = Окр(НачисленоДоп);  
			КонецЕсли;
		
			ПервыйМесяц = ДатаМесяц(ДатаНачала);
			ПоследнийМесяц = ДатаМесяц(ДатаОкончания);
			
			ДокументыПачки.ВыбратьСтроки();
			Для СчДокументов = 1 По ВсегоДокументов Цикл
				Если ИсходнаяТаблица = "СЗВ-4-2" Тогда
				   Если (Прав(Строка(СчДокументов),1) = "1") и (СчДокументов<>1) Тогда  // по 10 человек на форме
				       НовСтраница42 = 1;
					   ДоковВПачке = ДоковВПачке + 1;
				   КонецЕсли; 
				КонецЕсли;
				
				ДокументыПачки.ПолучитьСтроку();
				Сотрудник = ДокументыПачки.Сотрудник;
				ТипФормы = ДокументыПачки.ТипФормы;
				ПередаватьАдрес=ДокументыПачки.ПередаватьАдрес;
				Если ИсходнаяТаблица = "СЗВ-4-2" Тогда
					ТУвПачке = ДокументыПачки.ТУвПачке;
				Иначе
					ТУвПачке = ""
				КонецЕсли;
				
//				глСтатусСтрока(Контекст,"Выводится в отчет ("+Окр(СчДокументов/ВсегоДокументов*100)+"%): "+Сотрудник.Наименование);
				
				Фамилия = ""; Имя = ""; Отчество = "";
				ФИО = глФамилияИмяОтчество(Сотрудник,Фамилия,Имя,Отчество);
				
				Если ЧислоГод>=2002 Тогда
					//определим адреса:  
					Если ПередаватьАдрес=1 Тогда 
						
						Если (Форматы.ПолучитьЗначение(Форматы.ТекущаяСтрока()) = "7.00") и (ПустоеЗначение(СтрЗаменить(Сотрудник.АдресВСтранеПроживания,",",""))=0) Тогда
							Адрес =  глПредставлениеАдреса(Сотрудник.АдресВСтранеПроживания);
						Иначе  
							Адрес = глПредставлениеАдреса(Сотрудник.АдресПрописка);
							Если (ПустоеЗначение(СтрЗаменить(Сотрудник.АдресФакт,",",""))=0) и (Сотрудник.АдресФакт<>Сотрудник.АдресПрописка) Тогда
								Адрес = глПредставлениеАдреса(Сотрудник.АдресФакт);
								Если глАдресСоответствуетТребованиямМНС(Сотрудник.АдресФакт) = 0 Тогда
									Сообщить("Фактический адрес работника "+ФИО+" (т.н. "+Сотрудник.Код+") не соответствует требованиям ПФР","!");
								КонецЕсли;
							Иначе
								Если глАдресСоответствуетТребованиямМНС(Сотрудник.АдресПрописка) = 0 Тогда
									Сообщить("Адрес по регистрации работника "+ФИО+" (т.н. "+Сотрудник.Код+") не соответствует требованиям ПФР","!");
								КонецЕсли;
							КонецЕсли;
						КонецЕсли;
						
					Иначе
						Адрес = "";
					КонецЕсли;
				КонецЕсли;

				СтраховойНомерПФР = Сотрудник.СтраховойНомерПФР;
				Если глПроверкаСтраховогоНомера(СтраховойНомерПФР) = 0 Тогда
					Сообщить("Страховой номер работника "+ФИО+" (т.н. "+Сотрудник.Код+") указан неверно","!");
				КонецЕсли;
				
				НомерСтроки = "";
				Если ДоходыСотрудников.НайтиЗначение(Сотрудник,НомерСтроки,"Сотрудник") = 1 Тогда
					ДопТариф = ДоходыСотрудников.ПолучитьЗначение(НомерСтроки,"ВзносовДоп");
					
					ДнейБолел = ДоходыСотрудников.ПолучитьЗначение(НомерСтроки,"ДнейБолезн");
					ДнейБолел1 = Цел(ДнейБолел/30);
					ДнейБолел2 = ДнейБолел - ДнейБолел1*30;
					Если ДнейБолел1<>0 Тогда
						ДнейБолел = "" + Формат(ДнейБолел1, "Ч2") + "мес." ;
					Иначе
						ДнейБолел = "";
					КонецЕсли;
					Если ДнейБолел2<>0 Тогда
						ДнейБолел = ДнейБолел+ Формат(ДнейБолел2, "Ч2") + "дн." ;
					КонецЕсли;
					
					ДнейГулял = ДоходыСотрудников.ПолучитьЗначение(НомерСтроки,"ДнейОтпСвСч");
					ДнейГулял1 = Цел(ДнейГулял/30);
					ДнейГулял2 = ДнейГулял - ДнейГулял1*30;
					Если ДнейГулял1<>0 Тогда
						ДнейГулял = "" + Формат(ДнейГулял1, "Ч2") + "мес." ;
					Иначе
						ДнейГулял = "";
					КонецЕсли;
					Если ДнейГулял2<>0 Тогда
						ДнейГулял = ДнейГулял+ Формат(ДнейГулял2, "Ч2") + "дн." ;
					КонецЕсли;
					
				КонецЕсли;
				
				КодАВИА = ""; 
				НалогооблагаемыйДоход = 0;
				НачисленоЕСНвЧастиПФР = 0;
				
				Если ТипДоп <> "ОТМН" Тогда
					СтрокаИтоговойТаблицы=""; 
					ДоходыВычетыНалогиСотрудников.НайтиЗначение(глПолучитьУникальныйКодСотрудника(Сотрудник)+глДополнитьСтроку(ПоследнийМесяц,2),СтрокаИтоговойТаблицы,1);     
					НачисленоЕСНвЧастиСтр = ДоходыВычетыНалогиСотрудников.ПолучитьЗначение(СтрокаИтоговойТаблицы, 2); // здесь выводим страх взносы в ПФР
					НачисленоЕСНвЧастиНкп = ДоходыВычетыНалогиСотрудников.ПолучитьЗначение(СтрокаИтоговойТаблицы, 3); // здесь выводим накоп взносы в ПФР
					
				Иначе
					НачисленоЕСНвЧастиСтр = 0;
					НачисленоЕСНвЧастиНкп = 0;
					НачисленоСтр = 0;
					НачисленоНкп = 0;
					НачисленоДоп = 0;
				КонецЕсли;

				Если (НовСтраница42 = 1) Тогда
					ВыходнаяТаблица.ВывестиСекцию("Сведения>");
					ВыходнаяТаблица.НоваяСтраница();
				КонецЕсли;

				Если (ИсходнаяТаблица <> "СЗВ-4-2")или(СчДокументов = 1)или(НовСтраница42=1) Тогда
					НовСтраница42 = 0;
					ВыходнаяТаблица.ВывестиСекцию("Сведения<");
				КонецЕсли;
				Если ИсходнаяТаблица <> "СЗВ-4-2" Тогда
					ВыходнаяТаблица.ВывестиСекцию("Сведения1");
					ВыходнаяТаблица.ВывестиСекцию("ДоСтажа");
				КонецЕсли;
				
				НомерСтроки = "";
				ТекущийСписокСтажа = "";
				Если СтажСотрудников.НайтиЗначение(Сотрудник,НомерСтроки,"Сотрудник") = 1 Тогда
					ТекущийСписокСтажа = СтажСотрудников.ПолучитьЗначение(НомерСтроки,"ТаблицаЗаписейОСтаже");
				КонецЕсли;
				
				Если ТипЗначения(ТекущийСписокСтажа) <> 100 Тогда
					ТекущийСписокСтажа  = СоздатьОбъект("ТаблицаЗначений");
					ТекущийСписокСтажа.НоваяКолонка("ТипЗаписи","Строка",14,,,,,);
					ТекущийСписокСтажа.НоваяКолонка("НомерЗаписи","Число",2,0,,,,);
					ТекущийСписокСтажа.НоваяКолонка("Начало","Дата",,,,,,);
					ТекущийСписокСтажа.НоваяКолонка("Окончание","Дата",,,,,,);
					ТекущийСписокСтажа.НоваяКолонка("ТерриториальныеУсловия","Перечисление.ТерриториальныеУсловия",,,,,,);
					ТекущийСписокСтажа.НоваяКолонка("СЗВОсобыеУсловияТруда","Перечисление.СЗВОсобыеУсловияТруда",,,,,,);
					ТекущийСписокСтажа.НоваяКолонка("СЗВОснованияИТС","Перечисление.СЗВОснованияИТС",,,,,,);
					ТекущийСписокСтажа.НоваяКолонка("СЗВПараметр1ИТС","Число",5,0,,,,);
					ТекущийСписокСтажа.НоваяКолонка("СЗВПараметр2ИТС","Число",2,0,,,,);
					ТекущийСписокСтажа.НоваяКолонка("СЗВПараметр3ИТС","Перечисление.СЗВПараметр3ИТС",,,,,,);
					ТекущийСписокСтажа.НоваяКолонка("СЗВОснованияВыслугиЛет","Перечисление.СЗВОснованияВыслугиЛет",,,,,,);
					ТекущийСписокСтажа.НоваяКолонка("СЗВПараметр1ВыслугиЛет","Число",5,0,,,,);
					ТекущийСписокСтажа.НоваяКолонка("СЗВПараметр2ВыслугиЛет","Число",4,0,,,,);
					ТекущийСписокСтажа.НоваяКолонка("СЗВПараметр3ВыслугиЛет","Число",8,2,,,,);
					ТекущийСписокСтажа.НоваяКолонка("РК","Число",4,2,,,,);
					ТекущийСписокСтажа.НоваяКолонка("КПС","Строка",20,,,,,);
				КонецЕсли;
				
				НомПериод=""; НачПериод=""; КонПериод=""; ТУ=""; УТ=""; ОснованиеИТС="";
				ДопИТС=""; ОснованиеВыслуги="";  ДопВЛ="";ДопВЛСтавка =""; РК=""; КодПрофессии="";
				
				Если ТипДоп = "ОТМН" Тогда
					ТекущийСписокСтажа.УдалитьСтроки();
					Если ИсходнаяТаблица <> "СЗВ-4-2" Тогда
						ВыходнаяТаблица.ВывестиСекцию("Стаж1");
						ВыходнаяТаблица.ВывестиСекцию("Стаж3");
					КонецЕсли;
				КонецЕсли;
				
				Для НомерСтрокиТаблицыСтажа = 1 По ТекущийСписокСтажа.КоличествоСтрок() Цикл
					
					ВидСтроки= ТекущийСписокСтажа.ПолучитьЗначение(НомерСтрокиТаблицыСтажа,"ТипЗаписи");
					Если ПустоеЗначение(ВидСтроки)=0  Тогда // обнаружено описание заполненной строки
						
						Если СокрЛП(ВидСтроки) = "Основная"  Тогда
							НомПериод=ТекущийСписокСтажа.ПолучитьЗначение(НомерСтрокиТаблицыСтажа,"НомерЗаписи");
							НачПериод=ТекущийСписокСтажа.ПолучитьЗначение(НомерСтрокиТаблицыСтажа,"Начало");
							КонПериод=ТекущийСписокСтажа.ПолучитьЗначение(НомерСтрокиТаблицыСтажа,"Окончание");
						Иначе  // в дополнительной строке номер и даты периода не указываются
							НомПериод="";
							НачПериод="";
							КонПериод="";
						КонецЕсли; 
						
						ТУ=ТекущийСписокСтажа.ПолучитьЗначение(НомерСтрокиТаблицыСтажа,"ТерриториальныеУсловия");
						УТ=ТекущийСписокСтажа.ПолучитьЗначение(НомерСтрокиТаблицыСтажа,"СЗВОсобыеУсловияТруда");
						ОснованиеИТС=ТекущийСписокСтажа.ПолучитьЗначение(НомерСтрокиТаблицыСтажа,"СЗВОснованияИТС");
						СписокПараметров = СоздатьОбъект("СписокЗначений");
						СписокПараметров.ДобавитьЗначение(ТекущийСписокСтажа.ПолучитьЗначение(НомерСтрокиТаблицыСтажа,"СЗВПараметр1ИТС"));
						СписокПараметров.ДобавитьЗначение(ТекущийСписокСтажа.ПолучитьЗначение(НомерСтрокиТаблицыСтажа,"СЗВПараметр2ИТС"));
						СписокПараметров.ДобавитьЗначение(ТекущийСписокСтажа.ПолучитьЗначение(НомерСтрокиТаблицыСтажа,"СЗВПараметр3ИТС"));
						ДопИТС="";
						ОснованиеВыслуги=ТекущийСписокСтажа.ПолучитьЗначение(НомерСтрокиТаблицыСтажа,"СЗВОснованияВыслугиЛет");
						СписокПараметров = СоздатьОбъект("СписокЗначений");
						СписокПараметров.ДобавитьЗначение(ТекущийСписокСтажа.ПолучитьЗначение(НомерСтрокиТаблицыСтажа,"СЗВПараметр1ВыслугиЛет"));
						СписокПараметров.ДобавитьЗначение(ТекущийСписокСтажа.ПолучитьЗначение(НомерСтрокиТаблицыСтажа,"СЗВПараметр2ВыслугиЛет"));
						СписокПараметров.ДобавитьЗначение(ТекущийСписокСтажа.ПолучитьЗначение(НомерСтрокиТаблицыСтажа,"СЗВПараметр3ВыслугиЛет"));
						ДопВЛ=глСобратьСтрокуПенсииЗаВыслугуЛет(ОснованиеВыслуги,СписокПараметров);
						РК=ТекущийСписокСтажа.ПолучитьЗначение(НомерСтрокиТаблицыСтажа,"РК");
						КодПрофессии=ТекущийСписокСтажа.ПолучитьЗначение(НомерСтрокиТаблицыСтажа,"КПС");
						Если ПустаяСтрока(ДопВЛ) = 0 Тогда
							ДопВЛ = СтрЗаменить(ДопВЛ,"ставок","");
						КонецЕсли;
					КонецЕсли;
					
					Если ИсходнаяТаблица <> "СЗВ-4-2" Тогда
						ВыходнаяТаблица.ВывестиСекцию("Стаж1");
						ВыходнаяТаблица.ВывестиСекцию("Стаж3");
					КонецЕсли;
					
				КонецЦикла;
				
				
				Если ИсходнаяТаблица = "СЗВ-4-2" Тогда
					ВыходнаяТаблица.ВывестиСекцию("Сведения1");
				КонецЕсли;

				Если (ИсходнаяТаблица <> "СЗВ-4-2")или(НовСтраница42 = 1) Тогда
					НовСтраница42 = 0;
					ВыходнаяТаблица.ВывестиСекцию("Сведения>");
					ВыходнаяТаблица.НоваяСтраница();
				КонецЕсли;
				
			КонецЦикла; // обхода документов в пачке
			
			Если ИсходнаяТаблица = "СЗВ-4-2" Тогда
				СчПуст =  СчДокументов;
				Пока  (СчПуст%10 - 1) <> 0  Цикл
					 СчПуст = СчПуст +1;
					ВыходнаяТаблица.ВывестиСекцию("Сведения1Пуст");
				КонецЦикла;
				ВыходнаяТаблица.ВывестиСекцию("Сведения>");
			КонецЕсли;
			
			ВыходнаяТаблица.Опции(0,0,0,0, "СЗВ3", "СЗВ3");
			ВыходнаяТаблица.ПараметрыСтраницы(1,,,0,0,0,0,0,0,0,1);
			ВыходнаяТаблица.ТолькоПросмотр(1);
			ВыходнаяТаблица.Показать("Индивидуальные сведения (СЗВ-4); пачка №"+НомерПачки);
		Иначе // анкета
			ДатаОкончания = РабочаяДата();
			Если Год < 2006 Тогда
				ВыходнаяТаблица.ИсходнаяТаблица("4_АДВ-1");
			Иначе
				ВыходнаяТаблица.ИсходнаяТаблица("7_АДВ-1");
			КонецЕсли;
			ДокументыПачки.ВыбратьСтроки();
			Для СчДокументов = 1 По ВсегоДокументов Цикл
				ДокументыПачки.ПолучитьСтроку();
				Сотрудник = ДокументыПачки.Сотрудник;
				Фамилия = ""; Имя = ""; Отчество = "";
				глФамилияИмяОтчество(Сотрудник,Фамилия,Имя,Отчество);
				//гражданство:
				Если ТипЗначенияСтр(Сотрудник.Страна)="Справочник" Тогда
					Гражданство = ?(Сотрудник.Страна.Наименование="Россия","",Сотрудник.Страна);
				Иначе
					Гражданство = "";
				КонецЕсли;
				Пол = Сотрудник.Пол;
				ДатаРождения = Формат(Сотрудник.ДатаРождения,"ДДДММММГГГГ");
				Город = ""; Район = ""; Область = ""; Страна = "";
				СпМестоРождения = глРазложить(Сотрудник.МестоРождения);
				Если СпМестоРождения.РазмерСписка() > 4 Тогда
					Город	= СпМестоРождения.ПолучитьЗначение(2);
					Район	= СпМестоРождения.ПолучитьЗначение(3);
					Область	= СпМестоРождения.ПолучитьЗначение(4);
					Страна	= СпМестоРождения.ПолучитьЗначение(5);
				КонецЕсли;
				
				ДокументСерия = СокрЛП(Сотрудник.ДокументСерия);
				ДокументНомер = СокрЛП(Сотрудник.ДокументНомер);
				СерияНомерДокумента = "серия "+ВРег(?(ПустоеЗначение(ДокументСерия)=1,"",ДокументСерия+", "))+" номер "+ДокументНомер;
				ВидДокумента = Сотрудник.ВидДокумента.КодСЗВ;
				ДатаВыдачиДокумента = Формат(Сотрудник.ДокументДатаВыдачи,"ДДДММММГГГГ");
				КемВыданДокумент = Сотрудник.ДокументКемВыдан;
				Телефон = Сотрудник.Телефон;
				ПропискаИндекс = "";
				ПропискаАдрес = "";
				ФактическийИндекс = "";
				ФактическийАдрес = "";
				Если (Форматы.ПолучитьЗначение(Форматы.ТекущаяСтрока()) = "7.00") и (ПустоеЗначение(СтрЗаменить(Сотрудник.АдресВСтранеПроживания,",",""))=0) Тогда
					ПропискаАдрес =  глПредставлениеАдреса(Сотрудник.АдресВСтранеПроживания);
				Иначе //передаем российский адрес 
					АдресСписком = глРазложить(Сотрудник.АдресПрописка);
					Если АдресСписком.РазмерСписка() > 9 Тогда
						ПропискаИндекс = АдресСписком.ПолучитьЗначение(2);
						ПропискаАдрес =  глПредставлениеАдреса(Сотрудник.АдресПрописка, 1)
					КонецЕсли;
				КонецЕсли;
				Если (ПустоеЗначение(СтрЗаменить(Сотрудник.АдресФакт,",",""))=0) и ((Сотрудник.АдресФакт<>Сотрудник.АдресПрописка) или (ПустоеЗначение(СтрЗаменить(Сотрудник.АдресВСтранеПроживания,",",""))=1)) Тогда
					АдресСписком = глРазложить(Сотрудник.АдресФакт);
					Если АдресСписком.РазмерСписка() > 9 Тогда
						ФактическийИндекс = АдресСписком.ПолучитьЗначение(2);
						ФактическийАдрес = глПредставлениеАдреса(Сотрудник.АдресФакт, 1)
					КонецЕсли;
				КонецЕсли;
				ВыходнаяТаблица.ВывестиСекцию("Анкета");
				ВыходнаяТаблица.НоваяСтраница();
			КонецЦикла;
			ВыходнаяТаблица.Опции(0,0,0,0, "АнкетаПФР", "АнкетаПФР");
			ВыходнаяТаблица.ПараметрыСтраницы(1,,,0,0,0,0,0,0,0,1);
			ВыходнаяТаблица.ТолькоПросмотр(1);
			ВыходнаяТаблица.Показать("Анкеты (АДВ-1); пачка №"+НомерПачки);
		КонецЕсли;
		
	КонецЕсли;
	
	Если ТипПачки <> "Своды" Тогда
		
		ВыходнаяТаблица = СоздатьОбъект("Таблица");
		ВыходнаяТаблица.ИсходнаяТаблица("4_АДВ-6-1");
		ВыходнаяТаблица.Вывести();
		ВыходнаяТаблица.Опции(0,0,0,0, "Опись", "Опись");
		ВыходнаяТаблица.ПараметрыСтраницы(1,,,0,0,0,0,0,0,0,1);
		ВыходнаяТаблица.ТолькоПросмотр(1);
		ВыходнаяТаблица.Показать("Опись (АДВ-6-1); пачка №"+НомерПачки);
	КонецЕсли;
	
//	глСтатусСтрока(Контекст,"");
	
КонецПроцедуры // Печать

//*****************************************************************************
// Функция ДатаФорматаПФР()
//
// Параметры
//		Дт - дата
//
// Возвращаемое значение
//		строка
//
// Описание
//		дата в формате "ДД/ММ/ГГГГ"
//
Функция ДатаФорматаПФР(Дт)
	Дтн = Формат(Дт,"ДДДММГГГГ");
	Возврат Сред(Дтн,1,2)+"/"+Сред(Дтн,4,2)+"/"+Сред(Дтн,7,4);
КонецФункции // ДатаФорматаПФР

//*****************************************************************************
// Функция ЧислоВФайл(Чсл)
//
// Параметры
//		Чсл - число, выводимое число
//
// Возвращаемое значение
//		строка
//
// Описание
//		преобразует число в формат ПФР
//
Функция ЧислоВФайл (Чсл)
	Возврат СокрЛП(?(Чсл=0,"0",Формат(Чсл,"Ч15.2.")));
КонецФункции

//******************************************************************************
// ЗаписатьИПоказатьТекст(ВыходнойТекст,ИмяФайла,ЗаголовокОкна)
//
// Параметры:
//		ВыходнойТекст - объект типа Текст, сформированный текст
//		ИмяФайла - строка - полное имя файла, куда будет записан текст
//		ЗаголовокОкна - строка - заголовок окна, в котором будет показан записанный текст
//
// Описание:
//		записывает текст в файл с указанным именем, если файл пишется на дискетку - 
//		проверяется возможность записи;
//      Под конец, вне зависимости от удачности записи, текст показывается.
//
Процедура ЗаписатьИПоказатьТекст(ВыходнойТекст,ИмяФайла,ЗаголовокОкна, Показать = 1)
	
	ФайлЗаписан = 1;
	Если Найти("A,B",Лев(ИмяФайла,1)) > 0 Тогда
		ПутьВывода = Лев(ИмяФайла,2);	
		ТекстВопроса = "Поставьте чистую дискету для файла пачки "+Сред(ЗаголовокОкна,Найти(ЗаголовокОкна,"№"));
		~Начало:Хорошо=0;
		Если Вопрос(ТекстВопроса,"ОК+Отмена")="ОК"  Тогда
			Если ФС.СуществуетФайл(ПутьВывода+"\NUL")=0  Тогда
				ТекстВопроса = "Поставьте чистую дискету для файла пачки "+Сред(ЗаголовокОкна,Найти(ЗаголовокОкна,"№"));
				Перейти ~Начало;
			КонецЕсли;
			Если ФС.СуществуетФайл(ИмяФайла)=1  Тогда
				ФС.УдалитьФайл(ИмяФайла)
			КонецЕсли;
			Если ПустаяСтрока(ФС.НайтиПервыйФайл(ПутьВывода+"\"+Прав(СокрЛП(глПолучитьНалог("ПФР_страх").РегНомер),6)+"??.*"))=0  Тогда
				ТекстВопроса = "На дискете присутствует файл, относящийся к другой пачке!"+РазделительСтрок+"Поставьте чистую дискету для файла пачки "+Сред(ЗаголовокОкна,Найти(ЗаголовокОкна,"№"));
				Перейти ~Начало;
			КонецЕсли;
		Иначе
			ФайлЗаписан = 0;
		КонецЕсли;
	КонецЕсли;
	Если ФайлЗаписан = 1 Тогда
		ВыходнойТекст.Записать(ИмяФайла);
		Если ФС.СуществуетФайл(ИмяФайла) = 0 Тогда
			Предупреждение("Не возможен вывод файла данных для передачи в ПФР в каталог "+Лев(ИмяФайла,Найти(ИмяФайла,"\")-1)+"!");
			ФайлЗаписан = 0;
		КонецЕсли;
	КонецЕсли;
	Если ФайлЗаписан = 1 Тогда
		ТекстДляПоказа = СоздатьОбъект("Текст");
		ТекстДляПоказа.КодоваяСтраница(1);
		ТекстДляПоказа.Открыть(ИмяФайла);
		Если Показать = 1 Тогда
			ТекстДляПоказа.Показать(ЗаголовокОкна);
		КонецЕсли;
	Иначе
		Если Показать = 1 Тогда
			ВыходнойТекст.Показать(ЗаголовокОкна,Прав(ИмяФайла,12));
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ЗаписатьИПоказатьТекст()

//******************************************************************************
//	НаДиск(Строчка)
//
//	Параметры:
//		Строчка - переданное строковое значение
// 
// 	Возвращаемое значение:
//		возвращает ту же строку, но без проелов и без дв. кавычек, заменяя последние на одинарную кавычку
//
Функция ПреобразованнаяСтрока(Строчка)
	Возврат СтрЗаменить(СокрЛП(Строка(Строчка)),"""","'");
КонецФункции //ПреобразованнаяСтрока  

//******************************************************************************
//	НаДискXML()
//
//	Параметры:
//		нет
// 
// 	Возвращаемое значение:
//		нет
//
//	Описание:
//		Формирование файла по запрошенной пачке документов
//
Процедура НаДискXML(ПереданныйНомерПачки = "", Показать = 1)
	
	Перем Категории[12];
	Перем СредняяЧисленность[12];
	Перем ВсегоНачисленоБЛ[12];
	Перем ВсегоНачисленоЗаработка[12];
	Перем ВсегоНачисленоЕСН[12];
	
	Ктлг=СокрЛП(Каталог);
	Если Прав(Ктлг,1)="\" Тогда
		ПутьВывода = Лев(Ктлг,СтрДлина(Ктлг)-1)
	Иначе
		ПутьВывода = Ктлг;
	КонецЕсли;
	Если (Лев(ПутьВывода, 2) <> "\\") и (Найти("A,B",Лев(ПутьВывода,1)) = 0) тогда
		Если ФС.СуществуетФайл(ПутьВывода+"\NUL")=0 Тогда
			Предупреждение("Не возможен вывод файла данных для передачи в ПФР в каталог "+ПутьВывода+"!");
			Возврат;                     
		КонецЕсли;
	КонецЕсли;
	
	СпрСтраны = СоздатьОбъект("Справочник.ОКСМ");	
	
	Если ПустоеЗначение(ПереданныйНомерПачки) = 1 Тогда  // если  № пачки не был передан
		
		НомерПачки = ВыбратьПачку();
		
		Если НомерПачки = 0 Тогда
			Возврат
		КонецЕсли;   
	Иначе
		НомерПачки = ПереданныйНомерПачки;
	КонецЕсли;
	
	Хорошо = 1;
	КодПериода = 0;
	ИНН=СокрЛП(Константа.ИННОрганизации);
	ОдинадцатыйСимвол=Сред(ИНН,11,1);
	Если (Строка(Число(ОдинадцатыйСимвол))=ОдинадцатыйСимвол) и (ПустаяСтрока(ОдинадцатыйСимвол) = 0) Тогда // оказалось физическое лицо
		Если СтрДлина(ИНН) <> 12 Тогда
			Сообщить("Неверно введен ИНН физического лица-работодателя!");
			Хорошо = 0;
		ИначеЕсли (Строка(Число(СтрЗаменить(ИНН,"0","1")))<>СтрЗаменить(ИНН,"0","1")) Тогда 
			Сообщить("Неверно введен ИНН физического лица-работодателя!");
			Хорошо = 0;
		КонецЕсли;
		ИНН=Лев(ИНН,12);
		КПП = "";
		// Выделим фамилию и имя
		Список = глРазложить(Константа.НазваниеОрганизации," ");
		Фамилия = Список.ПолучитьЗначение(1);
		Имя = "";
		Отчество = "";
		Если Список.РазмерСписка() > 1 Тогда
			Имя  = Список.ПолучитьЗначение(2);   
		КонецЕсли;
		Если Список.РазмерСписка() > 2 Тогда
			Для Сч = 3 По Список.РазмерСписка() Цикл
				Отчество = Отчество+Список.ПолучитьЗначение(Сч);
			КонецЦикла;
		КонецЕсли;
		
		Если глСтрокаНаписанаПоРусски(Константа.НазваниеОрганизации)=0 Тогда
			Сообщить("Имя физического лица-работодателя должно быть введено русскими буквами!");
			Хорошо = 0;
		КонецЕсли;
		Если (ПустаяСтрока(Фамилия)=1) или (ПустаяСтрока(Имя)=1) Тогда
			Сообщить("Должны быть указаны, как минимум, фамилия и имя физического лица-работодателя!");
			Хорошо = 0;
		КонецЕсли;
	Иначе
		Если СтрДлина(ИНН)<10 Тогда
			Сообщить("Неверно задан ИНН источника дохода "+ИНН);
			Хорошо = 0;
		КонецЕсли;
		Если ПустаяСтрока(Константа.НазваниеОрганизации) = 1 Тогда
			Сообщить("Должно быть указано сокращенное наименование организации!");
			Хорошо = 0;
		КонецЕсли;
		ИНН = Лев(Константа.ИННОрганизации,10);
		КПП = Прав(Константа.ИННОрганизации,9);
	КонецЕсли;

	Наименование = Константа.НазваниеОрганизации;
	Наименование = ВРег(СокрЛП(Лев(СтрЗаменить(Наименование,"""","'"),100)));
	НаименованиеПолное = Константа.ОфициальноеНазваниеОрганизации;
	НаименованиеПолное = ВРег(глЗаменитьСимволВСтроке(СокрЛП(Лев(СтрЗаменить(НаименованиеПолное,"""","'"),100))));	
	РегНомерПФР = СокрЛП(глПолучитьНалог("ПФР_страх").РегНомер);
	Если ПустоеЗначение(РегНомерПФР)=1 Тогда
		Сообщить("Должен быть указан регистрационный номер организации в ПФР!");
		Хорошо = 0;
	КонецЕсли;
	ДатаВыдачиСведенияПФР = ДатаФорматаПФР(ДатаВыдачиСведения);
	ОбъектНалогообложенияПоПачке = 0;
	ПоБольничнымПоПачке = 0;
	
	
	ТипПачки = Лев(НомерПачки,5);
	Если ТипПачки <> "Своды" Тогда
		
		НомПачкиВПачке = Пачки.ПолучитьЗначение(НомерПачки,"Номер");
	Иначе
		НомПачкиВПачке = Пачки.ПолучитьЗначение(Пачки.КоличествоСтрок(),"Номер");
	КонецЕсли;
	
	НомПачкаС = ?(НомПачкиВПачке<100000,глДополнитьСтроку(НомПачкиВПачке,5),Строка(НомПачкиВПачке%100000));	
	
	
	
	//Загрузим внешнюю компоненту V7Plus.dll
	СписокВозможныхМест	=	СоздатьОбъект("СписокЗначений");
	СписокВозможныхМест.ДобавитьЗначение(КаталогИБ()		+	"v7plus.dll"	);
	СписокВозможныхМест.ДобавитьЗначение(КаталогПрограммы()	+	"v7plus.dll"	);
	СписокВозможныхМест.ДобавитьЗначение(КаталогИБ()		+	"ExtForms\"	+	"v7plus.dll"	);
	
	гПутьОбъекта_КомпонентаV7plus	=	НайтиПервыйСуществующийФайл(СписокВозможныхМест);
	
	Если ЗагрузитьВнешнююКомпоненту(гПутьОбъекта_КомпонентаV7plus) <> 1	Тогда
		Предупреждение("Компонента v7plus.dll не найдена! Файл выгрузки не сформирован");
		Возврат;
	КонецЕсли;
	
	XMLАнализатор	=	СоздатьОбъект("AddIn.XMLParser");
	ХМЛФайлДанных	=	XMLАнализатор.СоздатьДокумент();
	         
//	ХМЛФайлДанных.УстановитьПространствоИмен("<?xml version=""1.0"" encoding=""windows-1251""?>");
	хмлКорень 		= ХМЛФайлДанных.СоздатьПодчиненныйЭлемент("ФайлПФР");
	
	хмлИмяФайла				= хмлКорень.СоздатьПодчиненныйЭлемент("ИмяФайла");
	ИмяФайла = "PFR-700-Y-" + Год + "-ORG-"+ Прав(РегНомерПФР,15) + "-DCK-"+Лев(НомПачкаС,5)+"-DPT-000000-DCK-00000.XML";
	хмлИмяФайла.Значение	= ИмяФайла;
	
	хмлЗаголовокФайла	 		= хмлКорень.СоздатьПодчиненныйЭлемент("ЗаголовокФайла");
	хмлВерсияФормата			= хмлЗаголовокФайла.СоздатьПодчиненныйЭлемент("ВерсияФормата");
	хмлВерсияФормата.Значение	= "07.00";
	
	хмлТипФайла				= хмлЗаголовокФайла.СоздатьПодчиненныйЭлемент("ТипФайла");
	хмлТипФайла.Значение	= "ВНЕШНИЙ";
	
	хмлПрограммаПодготовкиДанных	= хмлЗаголовокФайла.СоздатьПодчиненныйЭлемент("ПрограммаПодготовкиДанных");
	хмлНазваниеПрограммы			= хмлПрограммаПодготовкиДанных.СоздатьПодчиненныйЭлемент("НазваниеПрограммы");
	хмлНазваниеПрограммы.Значение	= "1С:БУХГАЛТЕРИЯ 7.7";
		
	хмлВерсия						= хмлПрограммаПодготовкиДанных.СоздатьПодчиненныйЭлемент("Версия");
	хмлВерсия.Значение				= Константа.НомерРелиза;
	
	хмлИсточникДанных				= хмлЗаголовокФайла.СоздатьПодчиненныйЭлемент("ИсточникДанных");
	хмлИсточникДанных.Значение		= "СТРАХОВАТЕЛЬ";
	
	хмлПачкаВходящихДокументов	 	= хмлКорень.СоздатьПодчиненныйЭлемент("ПачкаВходящихДокументов");	                          

	
	//хмлВходящаяОпись				= хмлПачкаВходящихДокументов.СоздатьПодчиненныйЭлемент("ВХОДЯЩАЯ_ОПИСЬ",,"ПачкаВходящихДокументов Окружение=""В составе файла"" Стадия=""До обработки""");		
	хмлВходящаяОпись				= хмлПачкаВходящихДокументов.СоздатьПодчиненныйЭлемент("ВХОДЯЩАЯ_ОПИСЬ");		
	//хмлОкружение = хмлВходящаяОпись.ДобавитьАтрибут("Окружение");
	//хмлОкружение.Значение = "В составе файла";
	хмлВходящаяОпись.УстановитьАтрибут("Окружение","В составе файла");
	хмлВходящаяОпись.УстановитьАтрибут("Стадия","До обработки");
	

	//ВХОДЯЩАЯ_ОПИСЬ
	хмлНомерВпачке = хмлВходящаяОпись.СоздатьПодчиненныйЭлемент("НомерВпачке");
	хмлНомерВпачке.Значение	= 1;
	
	хмлТипВходящейОписи	=  хмлВходящаяОпись.СоздатьПодчиненныйЭлемент("ТипВходящейОписи");
	хмлТипВходящейОписи.Значение = "ОПИСЬ ПАЧКИ";
	
	хмлСоставительПачки = хмлВходящаяОпись.СоздатьПодчиненныйЭлемент("СоставительПачки");
	
	глхмлСтрахователь(хмлСоставительПачки, ИНН, КПП, РегНомерПФР);
	
	хмлНомерПачки	= хмлВходящаяОпись.СоздатьПодчиненныйЭлемент("НомерПачки");
	хмлОсновной		= хмлНомерПачки.СоздатьПодчиненныйЭлемент("Основной");
	хмлОсновной.Значение = Лев(НомПачкаС,5);
	
	хмлСоставДокументов	= хмлВходящаяОпись.СоздатьПодчиненныйЭлемент("СоставДокументов");
	
	хмлКоличество			= хмлСоставДокументов.СоздатьПодчиненныйЭлемент("Количество");
	хмлКоличество.Значение	= 1;
	
	хмлНаличиеДокументов	= хмлСоставДокументов.СоздатьПодчиненныйЭлемент("НаличиеДокументов");
	
	хмлТипДокумента			= хмлНаличиеДокументов.СоздатьПодчиненныйЭлемент("ТипДокумента");
	Если ТипПачки <> "Своды" Тогда
		Если ТипФормируемыхДокументов = 1 Тогда // формы сзв-4-1 и сзв-4-2			
			Если НомерПачки > 0 Тогда
				ДокументыПачки	= Пачки.ПолучитьЗначение(НомерПачки,"ТаблицаДокументов");
				Если ДокументыПачки.ПолучитьЗначение(1,"СтрокСтажа")>1 Тогда
					хмлТипДокумента.Значение= "ИС_СЗВ-4-1";
				Иначе
					хмлТипДокумента.Значение= "ИС_СЗВ-4-2";
				КонецЕсли;
			КонецЕсли;
		ИначеЕсли ТипФормируемыхДокументов = 2 Тогда 
			хмлТипДокумента.Значение= "АНКЕТА_ЗЛ";
		КонецЕсли;
		
		Если НомерПачки > 0 Тогда		
			
			ДокументыПачки = Пачки.ПолучитьЗначение(НомерПачки,"ТаблицаДокументов");
			
		КонецЕсли;			
	Иначе
		хмлТипДокумента.Значение= "ВЕДОМОСТЬ_УПЛАТЫ";
		НомерПачки = Пачки.КоличествоСтрок();
		ДокументыПачки = Пачки.ПолучитьЗначение(НомерПачки,"ТаблицаДокументов");
	КонецЕсли;
	
	ВсегоДокументов = ДокументыПачки.КоличествоСтрок();
	
	хмлКоличество			= хмлНаличиеДокументов.СоздатьПодчиненныйЭлемент("Количество");
	хмлКоличество.Значение	= ВсегоДокументов;				
	
	хмлДатаСоставления	=  хмлВходящаяОпись.СоздатьПодчиненныйЭлемент("ДатаСоставления");			
	ДатаЗаполнения = "" + глДополнитьСтроку(Строка(ДатаЧисло(ДатаВыдачиСведения)),2,0) + "."+ глДополнитьСтроку(Строка(ДатаМесяц(ДатаВыдачиСведения)),2,0) + "."+ ДатаГод(ДатаВыдачиСведения);
	хмлДатаСоставления.Значение = ДатаЗаполнения;		
	
	НачисленоСтр = 0;
	НачисленоНкп = 0;
	НачисленоДоп = 0;
	
	Если ТипПачки = "Своды" Тогда
		
		НомПачкиВПачке = Пачки.ПолучитьЗначение(НомерПачки,"Номер");
		НомПачкаС = ?(НомПачкиВПачке<100000,глДополнитьСтроку(НомПачкиВПачке,5),Строка(НомПачкиВПачке%100000));	
		
		// ИСХД и КОРР
		ТекСтрока = "";
		ТипПачки = "ПОЛНАЯ";
		ДопТипПч = ""; 
		
		Пачки.ВыбратьСтроки();
		Пока Пачки.ПолучитьСтроку() = 1 Цикл
			Если Пачки.ТипФормыПачки = "ПЕНС" Тогда
				ТипПачки = "МЕЖРАСЧЕТНАЯ";
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		СохранитьТаблицуПеречислений();
		УстановитьДатыПериодаОтчетности(КодПериода);
		
		ПервыйМесяц = ДатаМесяц(ДатаНачала);
		ПоследнийМесяц = ДатаМесяц(ДатаОкончания);
		МесяцевОтчетногоПериода = ПоследнийМесяц - ПервыйМесяц + 1;
		
		СписокСотров = СоздатьОбъект("СписокЗначений");
		ТекстЗапроса =
		"//{{ЗАПРОС(ПодборСотрудников)
		|Сотрудник = Справочник.Сотрудники.ТекущийЭлемент;
		|Группировка Сотрудник без групп;
		|"//}}ЗАПРОС
		;
		Запрос = СоздатьОбъект("Запрос");
		глСтатусСтрока(Контекст,"Обрабатывается справочник Сотрудники");
		Если Запрос.Выполнить(ТекстЗапроса)=0 Тогда
			Сообщить("Не удалось обработать справочник Сотрудники", "!");
			Возврат 
		КонецЕсли;
		
		// выгрузим запрос в таблицу, а затем в список
		ВременнаяТаблица = СоздатьОбъект("ТаблицаЗначений");
		Запрос.Выгрузить(ВременнаяТаблица,,0);
		ВременнаяТаблица.Выгрузить(СписокСотров,,,"Сотрудник");
		
		ДоходыВычетыНалогиСотрудников = "";
		Если СобратьДанныеДляЕСН(ДоходыВычетыНалогиСотрудников,СписокСотров) = 0 Тогда
			Возврат
		КонецЕсли;
		КолСотр = СписокСотров.РазмерСписка();
		
		ИтоговаяФорма = 0;
		Задолженность = 0;

		НачисленоСтр = 0;
		НачисленоНкп = 0;
		НачисленоДоп = 0;
		
		Сч69_2_2 = СчетПоКоду("69.2.2");
	
		БухИт = СоздатьОбъект("БухгалтерскиеИтоги");
		БухИт.ИспользоватьСубконто(ВидыСубконто.ВидыПлатежейВБюджет, Перечисление.ВидыПлатежейВБюджет.Налог, 2);
		БухИт.ВыполнитьЗапрос(ДатаНачала, ДатаОкончания, "69.2.2, 69.2.3");
	
		БухИт.ВыбратьСчета();
		Пока БухИт.ПолучитьСчет() = 1 Цикл
		    Если БухИт.Счет = Сч69_2_2 Тогда
		        НачисленоСтр = БухИт.КО();
				
			Иначе
				НачисленоНкп = БухИт.КО();
		    КонецЕсли;
		КонецЦикла;
		
		ГодОтчета = ДатаГод(ДатаОкончания);
		СпрСотр = СоздатьОбъект("Справочник.Сотрудники");
		СпрСотр.ВыбратьЭлементы();
		Пока СпрСотр.ПолучитьЭлемент() = 1 Цикл
		    Если (СпрСотр.ЭтоГруппа() = 0) и (СпрСотр.ПометкаУдаления() = 0) Тогда
				ГодНачалаУчета = ДатаГод(СпрСотр.ДатаПриема);
				Если ГодНачалаУчета = ГодОтчета Тогда
				    НачисленоСтр = НачисленоСтр + СпрСотр.НачисленныйПФР_страх_СНачалаГода;
					НачисленоНкп = НачисленоНкп + СпрСотр.НачисленныйПФР_нак_СНачалаГода;
				КонецЕсли;
		    КонецЕсли;
		КонецЦикла;
		
		НачисленоСтр = Окр(НачисленоСтр);
		НачисленоНкп = Окр(НачисленоНкп);
		НачисленоДоп = Окр(НачисленоДоп);

		КодКатегории = КатегорияВсех;
		
		//признак тарифа:
		Признак = ПолучитьПризнакТарифа(Дата("31.12."+Строка(Год)));
		
		//суммы по типам данных:		
		НаСтраховуюН = 0;
		НаНакопитлнН = 0;
		ПоДопТарифуН = 0;	
		НаСтраховуюИ = 0;
		НаНакопитлнИ = 0;
		ПоДопТарифуИ = 0;	
		НаСтраховуюК = 0;
		НаНакопитлнК = 0;
		ПоДопТарифуК = 0;
		
		НачЗадолженностей = 0;
		КонЗадолженностей = 0;
		ИтУплаченных = 0;  
		
		ВремТаблица = СоздатьОбъект("ТаблицаЗначений");;
		ТаблицаПеречислений1.Выгрузить(ВремТаблица);
		ВремТаблица.Сортировать("Год+");
		КолСтрокВТабл = ВремТаблица.КоличествоСтрок();
		
		Для СчСтрок = 1 По КолСтрокВТабл Цикл
			// получим год
			ТекГод      = ВремТаблица.ПолучитьЗначение(СчСтрок,"Год");
			ТипДанн = ВремТаблица.ПолучитьЗначение(СчСтрок,"ТипДанных");
			
			НаСтраховую =  ?(ОкруглятьНачисленное = 1,Окр(ВремТаблица.ПолучитьЗначение(СчСтрок,"Страховых")), ВремТаблица.ПолучитьЗначение(СчСтрок,"Страховых"));
			НаНакопитлн =  ?(ОкруглятьНачисленное = 1,Окр(ВремТаблица.ПолучитьЗначение(СчСтрок,"Накопительных")), ВремТаблица.ПолучитьЗначение(СчСтрок,"Накопительных"));
			ПоДопТарифу =  ?(ОкруглятьНачисленное = 1,Окр(ВремТаблица.ПолучитьЗначение(СчСтрок,"ДопТариф")), ВремТаблица.ПолучитьЗначение(СчСтрок,"ДопТариф"));	
			
			Если СокрЛП(ТипДанн) = "Hачальная задолженность" Тогда
				НаСтраховуюН = НаСтраховуюН+НаСтраховую;
				НаНакопитлнН = НаНакопитлнН+НаНакопитлн;
				ПоДопТарифуН = ПоДопТарифуН+ПоДопТарифу;
				Если Число(ТекГод) = Число(Год) Тогда
					НаСтраховуюНИ = НаСтраховую;
					НаНакопитлнНИ = НаНакопитлн;
					ПоДопТарифуНИ = ПоДопТарифу;			
				КонецЕсли;
			ИначеЕсли СокрЛП(ТипДанн) = "Ит. уплачено" Тогда
				НаСтраховуюИ = НаСтраховуюИ+НаСтраховую;
				НаНакопитлнИ = НаНакопитлнИ+НаНакопитлн;
				ПоДопТарифуИ = ПоДопТарифуИ+ПоДопТарифу;	
			ИначеЕсли СокрЛП(ТипДанн) = "Конечная задолженность" Тогда
				НаСтраховуюК = НаСтраховуюК+НаСтраховую;
				НаНакопитлнК = НаНакопитлнК+НаНакопитлн;
				ПоДопТарифуК = ПоДопТарифуК+ПоДопТарифу;	
			КонецЕсли;
			СтрокаВфайлСлед = "";
			
		КонецЦикла;
		
		НомерПервойПачки = 1;
		ЗастрахованныхЛиц = 0; // эта переменная используется в таблице АДВ-11
		Для СчПачек = -НомерПачки+1 По -1 Цикл
			Если СокрЛП(Пачки.ПолучитьЗначение(-СчПачек,"СтрокСтажаПачки")) = "АДВ-11" Тогда
				НомерПервойПачки = -СчПачек + 1;
				Прервать
			Иначе
				ЗастрахованныхЛиц = ЗастрахованныхЛиц + Пачки.ПолучитьЗначение(-СчПачек,"ТаблицаДокументов").КоличествоСтрок();
			КонецЕсли;
		КонецЦикла;
		КолПачек = НомерПачки - НомерПервойПачки; // эта переменная используется в таблице АДВ-11
		
		
		хмлВЕДОМОСТЬ_УПЛАТЫ	= хмлПачкаВходящихДокументов.СоздатьПодчиненныйЭлемент("ВЕДОМОСТЬ_УПЛАТЫ");
		хмлНомерВпачке			= хмлВЕДОМОСТЬ_УПЛАТЫ.СоздатьПодчиненныйЭлемент("НомерВпачке");
		хмлНомерВпачке.Значение	= 2;
		
		
		глхмлСтрахователь			= хмлВЕДОМОСТЬ_УПЛАТЫ.СоздатьПодчиненныйЭлемент("Страхователь");
		глхмлСтрахователь(глхмлСтрахователь, ИНН, КПП, РегНомерПФР);	
		
		хмлРасчетныйПериод			= хмлВЕДОМОСТЬ_УПЛАТЫ.СоздатьПодчиненныйЭлемент("РасчетныйПериод");
		хмлРасчетныйПериод.Значение	= ДатаГод(ДатаОкончания);			
		
		хмлДатаВедомости			= хмлВЕДОМОСТЬ_УПЛАТЫ.СоздатьПодчиненныйЭлемент("ДатаВедомости");
		хмлДатаВедомости.Значение	= "" + глДополнитьСтроку(Строка(ДатаЧисло(КонГода(ДатаОкончания))),2,0) + "."+ глДополнитьСтроку(Строка(ДатаМесяц(КонГода(ДатаОкончания))),2,0) + "."+ ДатаГод(КонГода(ДатаОкончания)); 
		
		хмлТипАДВ11				= хмлВЕДОМОСТЬ_УПЛАТЫ.СоздатьПодчиненныйЭлемент("ТипАДВ-11");
		хмлТипАДВ11.Значение 	= ТипПачки;
		
		хмлЧислоПачек			= хмлВЕДОМОСТЬ_УПЛАТЫ.СоздатьПодчиненныйЭлемент("ЧислоПачек");						
		хмлЧислоПачек.Значение	= КолПачек;
		
		хмлЧислоЗастрахованныхЛиц			= хмлВЕДОМОСТЬ_УПЛАТЫ.СоздатьПодчиненныйЭлемент("ЧислоЗастрахованныхЛиц");
		хмлЧислоЗастрахованныхЛиц.Значение	= ЗастрахованныхЛиц;
		
		хмлТариф					= хмлВЕДОМОСТЬ_УПЛАТЫ.СоздатьПодчиненныйЭлемент("Тариф");
		хмлКодКатегории				= хмлТариф.СоздатьПодчиненныйЭлемент("КодКатегории");
		хмлКодКатегории.Значение	= КодКатегории;
		
		Если НачисленоДоп<>0 Тогда
			хмлКодДополнительногоТарифа				= хмлТариф.СоздатьПодчиненныйЭлемент("КодДополнительногоТарифа");
			хмлКодДополнительногоТарифа.Значение	= "АВИА";
		КонецЕсли;
		
		хмлНазваниеКатегории			= хмлТариф.СоздатьПодчиненныйЭлемент("НазваниеКатегории");
		хмлНазваниеКатегории.Значение	= ?(КодКатегории = "НР","НАЕМ/РАБОТНИК","С/Х ОРГАНИЗАЦИЯ");
		
		Если НачисленоДоп<>0 Тогда
			хмлНазваниеДополнительногоТарифа			= хмлТариф.СоздатьПодчиненныйЭлемент("НазваниеДополнительногоТарифа");
			хмлНазваниеДополнительногоТарифа.Значение   = "ЧЛЕН ЛЭВС";
		КонецЕсли; 
		
		
		
		Если (НаСтраховуюН <> 0) или (НаНакопитлнН <> 0) или (ПоДопТарифуН <> 0)  Тогда
			хмлЗадолженностьНаНачало			= хмлВЕДОМОСТЬ_УПЛАТЫ.СоздатьПодчиненныйЭлемент("ЗадолженностьНаНачало");			
			
			хмлКоличествоНаНачало		= хмлЗадолженностьНаНачало.СоздатьПодчиненныйЭлемент("Количество");
			КоличествоВыведенныхСтрок = 0;
			НаСтраховуюИтого = 0;
			НаНакопитлнИтого = 0;
			ПоДопТарифуИтого = 0;
			Для СчСтрок = 1 По КолСтрокВТабл Цикл
				// получим год
				ТипДанн 	= ВремТаблица.ПолучитьЗначение(СчСтрок,"ТипДанных");
				Если (СокрЛП(ТипДанн) = "Hачальная задолженность") и (КоличествоВыведенныхСтрок <100) Тогда
					ТекГод      = ВремТаблица.ПолучитьЗначение(СчСтрок,"Год");
					
					КоличествоВыведенныхСтрок = КоличествоВыведенныхСтрок +1;
					
					хмлСуммаЗаПериодНаНачало		= хмлЗадолженностьНаНачало.СоздатьПодчиненныйЭлемент("СуммаЗаПериод");
					
					хмлТипСтрокиНаНачало			= хмлСуммаЗаПериодНаНачало.СоздатьПодчиненныйЭлемент("ТипСтроки");
					хмлТипСтрокиНаНачало.Значение	= "ДЕТАЛЬНАЯ";
					
					хмлРасчетныйПериодНаНачало			= хмлСуммаЗаПериодНаНачало.СоздатьПодчиненныйЭлемент("РасчетныйПериод");
					хмлРасчетныйПериодНаНачало.Значение	= ТекГод;					
					
					НаСтраховую = ?(ОкруглятьНачисленное = 1, Окр(ВремТаблица.ПолучитьЗначение(СчСтрок,"Страховых")), ВремТаблица.ПолучитьЗначение(СчСтрок,"Страховых"));
					НаНакопитлн = ?(ОкруглятьНачисленное = 1, Окр(ВремТаблица.ПолучитьЗначение(СчСтрок,"Накопительных")), ВремТаблица.ПолучитьЗначение(СчСтрок,"Накопительных"));
					ПоДопТарифу = ?(ОкруглятьНачисленное = 1, Окр(ВремТаблица.ПолучитьЗначение(СчСтрок,"ДопТариф")), ВремТаблица.ПолучитьЗначение(СчСтрок,"ДопТариф"));
					
					НаСтраховуюИтого = НаСтраховуюИтого+НаСтраховую;
					НаНакопитлнИтого = НаНакопитлнИтого+НаНакопитлн;
					ПоДопТарифуИтого = ПоДопТарифуИтого+ПоДопТарифу;
					
					хмлСтраховыеВзносыНаНачало			= хмлСуммаЗаПериодНаНачало.СоздатьПодчиненныйЭлемент("СтраховыеВзносы");
					
					хмлСтраховыеНаНачало				= хмлСтраховыеВзносыНаНачало.СоздатьПодчиненныйЭлемент("Страховые");					
					хмлСтраховыеНаНачало.Значение		= ЧислоВФайл(НаСтраховую);
					
					хмлНакопительныеНаНачало			= хмлСтраховыеВзносыНаНачало.СоздатьПодчиненныйЭлемент("Накопительные");					
					хмлНакопительныеНаНачало.Значение	= ЧислоВФайл(НаНакопитлн);
					
					хмлДополнительныеНаНачало			= хмлСтраховыеВзносыНаНачало.СоздатьПодчиненныйЭлемент("Дополнительные");					
					хмлДополнительныеНаНачало.Значение	= ЧислоВФайл(ПоДопТарифу);					
					
				КонецЕсли;
				
				
			КонецЦикла;
			
			хмлСуммаЗаПериодНаНачало		= хмлЗадолженностьНаНачало.СоздатьПодчиненныйЭлемент("СуммаЗаПериод");
			
			хмлТипСтрокиНаНачало			= хмлСуммаЗаПериодНаНачало.СоздатьПодчиненныйЭлемент("ТипСтроки");
			хмлТипСтрокиНаНачало.Значение	= "ИТОГО";
			
			хмлСтраховыеВзносыНаНачало			= хмлСуммаЗаПериодНаНачало.СоздатьПодчиненныйЭлемент("СтраховыеВзносы");
			
			хмлСтраховыеНаНачало				= хмлСтраховыеВзносыНаНачало.СоздатьПодчиненныйЭлемент("Страховые");					
			хмлСтраховыеНаНачало.Значение		= ЧислоВФайл(НаСтраховуюИтого);
			
			хмлНакопительныеНаНачало			= хмлСтраховыеВзносыНаНачало.СоздатьПодчиненныйЭлемент("Накопительные");					
			хмлНакопительныеНаНачало.Значение	= ЧислоВФайл(НаНакопитлнИтого);
			
			хмлДополнительныеНаНачало			= хмлСтраховыеВзносыНаНачало.СоздатьПодчиненныйЭлемент("Дополнительные");					
			хмлДополнительныеНаНачало.Значение	= ЧислоВФайл(ПоДопТарифуИтого);	
			
			хмлКоличествоНаНачало.Значение = КоличествоВыведенныхСтрок + 1;
			
		КонецЕсли;
		хмлПризнакТарифа			= хмлВЕДОМОСТЬ_УПЛАТЫ.СоздатьПодчиненныйЭлемент("ПризнакТарифа");			
		хмлПризнакТарифа.Значение	= "Р";
		
		
		Если (НачисленоСтр <> 0) или (НачисленоНкп <> 0) или (НачисленоДоп <> 0) Тогда
			хмлНачисленияЗаПериод		= хмлВЕДОМОСТЬ_УПЛАТЫ.СоздатьПодчиненныйЭлемент("НачисленияЗаПериод");			
			
			хмлСтраховыеНачисления				= хмлНачисленияЗаПериод.СоздатьПодчиненныйЭлемент("Страховые");						     
			хмлСтраховыеНачисления.Значение		= ЧислоВФайл(?(ОкруглятьНачисленное = 1,Окр(НачисленоСтр),НачисленоСтр));
			
			хмлНакопительныеНачисления			= хмлНачисленияЗаПериод.СоздатьПодчиненныйЭлемент("Накопительные");						     
			хмлНакопительныеНачисления.Значение	= ЧислоВФайл(?(ОкруглятьНачисленное = 1,Окр(НачисленоНкп),НачисленоНкп));
			
			хмлДополнительныеНачисления			= хмлНачисленияЗаПериод.СоздатьПодчиненныйЭлемент("Дополнительные");						     
			хмлДополнительныеНачисления.Значение	= ЧислоВФайл(?(ОкруглятьНачисленное = 1,Окр(НачисленоДоп),НачисленоДоп));			
		КонецЕсли;  
		
		
		
		Если (НаСтраховуюИ <> 0) или (НаНакопитлнИ <> 0) или (ПоДопТарифуИ <> 0) Тогда
			хмлУплатаЗаПериод			= хмлВЕДОМОСТЬ_УПЛАТЫ.СоздатьПодчиненныйЭлемент("УплатаЗаПериод");			
			
			хмлКоличествоУплата			= хмлУплатаЗаПериод.СоздатьПодчиненныйЭлемент("Количество");
			
			КоличествоВыведенныхСтрок = 0;
			НаСтраховуюИтого = 0;
			НаНакопитлнИтого = 0;
			ПоДопТарифуИтого = 0;
			Для СчСтрок = 1 По КолСтрокВТабл Цикл
				// получим год					
				ТипДанн 	= ВремТаблица.ПолучитьЗначение(СчСтрок,"ТипДанных");
				Если (СокрЛП(ТипДанн) = "Ит. уплачено") и (КоличествоВыведенныхСтрок <100)  Тогда
					
					ТекГод      = ВремТаблица.ПолучитьЗначение(СчСтрок,"Год");
					
					КоличествоВыведенныхСтрок = КоличествоВыведенныхСтрок +1;
					
					хмлСуммаЗаПериодУплата		= хмлУплатаЗаПериод.СоздатьПодчиненныйЭлемент("СуммаЗаПериод");
					
					хмлТипСтрокиУплата			= хмлСуммаЗаПериодУплата.СоздатьПодчиненныйЭлемент("ТипСтроки");
					хмлТипСтрокиУплата.Значение	= "ДЕТАЛЬНАЯ";
					
					хмлРасчетныйПериодУплата			= хмлСуммаЗаПериодУплата.СоздатьПодчиненныйЭлемент("РасчетныйПериод");
					хмлРасчетныйПериодУплата.Значение	= ТекГод;					
					
					НаСтраховую = ?(ОкруглятьНачисленное = 1, Окр(ВремТаблица.ПолучитьЗначение(СчСтрок,"Страховых")), ВремТаблица.ПолучитьЗначение(СчСтрок,"Страховых"));
					НаНакопитлн = ?(ОкруглятьНачисленное = 1, Окр(ВремТаблица.ПолучитьЗначение(СчСтрок,"Накопительных")), ВремТаблица.ПолучитьЗначение(СчСтрок,"Накопительных"));
					ПоДопТарифу = ?(ОкруглятьНачисленное = 1, Окр(ВремТаблица.ПолучитьЗначение(СчСтрок,"ДопТариф")), ВремТаблица.ПолучитьЗначение(СчСтрок,"ДопТариф"));
					
					НаСтраховуюИтого = НаСтраховуюИтого+НаСтраховую;
					НаНакопитлнИтого = НаНакопитлнИтого+НаНакопитлн;
					ПоДопТарифуИтого = ПоДопТарифуИтого+ПоДопТарифу;
					
					хмлСтраховыеВзносыУплата			= хмлСуммаЗаПериодУплата.СоздатьПодчиненныйЭлемент("СтраховыеВзносы");
					
					хмлСтраховыеУплата				= хмлСтраховыеВзносыУплата.СоздатьПодчиненныйЭлемент("Страховые");					
					хмлСтраховыеУплата.Значение		= ЧислоВФайл(НаСтраховую);
					
					хмлНакопительныеУплата			= хмлСтраховыеВзносыУплата.СоздатьПодчиненныйЭлемент("Накопительные");					
					хмлНакопительныеУплата.Значение	= ЧислоВФайл(НаНакопитлн);
					
					хмлДополнительныеУплата			= хмлСтраховыеВзносыУплата.СоздатьПодчиненныйЭлемент("Дополнительные");					
					хмлДополнительныеУплата.Значение	= ЧислоВФайл(ПоДопТарифу);					
					
				КонецЕсли;
			КонецЦикла;	
			
			хмлСуммаЗаПериодУплата		= хмлУплатаЗаПериод.СоздатьПодчиненныйЭлемент("СуммаЗаПериод");
			
			хмлТипСтрокиУплата			= хмлСуммаЗаПериодУплата.СоздатьПодчиненныйЭлемент("ТипСтроки");
			хмлТипСтрокиУплата.Значение	= "ИТОГО";
			
			хмлСтраховыеВзносыУплата			= хмлСуммаЗаПериодУплата.СоздатьПодчиненныйЭлемент("СтраховыеВзносы");
			
			хмлСтраховыеУплата					= хмлСтраховыеВзносыУплата.СоздатьПодчиненныйЭлемент("Страховые");					
			хмлСтраховыеУплата.Значение			= ЧислоВФайл(НаСтраховуюИтого);
			
			хмлНакопительныеУплата				= хмлСтраховыеВзносыУплата.СоздатьПодчиненныйЭлемент("Накопительные");					
			хмлНакопительныеУплата.Значение		= ЧислоВФайл(НаНакопитлнИтого);
			
			хмлДополнительныеУплата				= хмлСтраховыеВзносыУплата.СоздатьПодчиненныйЭлемент("Дополнительные");					
			хмлДополнительныеУплата.Значение	= ЧислоВФайл(ПоДопТарифуИтого);	
			
			хмлКоличествоУплата.Значение = КоличествоВыведенныхСтрок + 1; 

		КонецЕсли;	
		
		Если (НаСтраховуюК <> 0) или (НаНакопитлнК <> 0) или (ПоДопТарифуК <> 0) Тогда
			хмлЗадолженностьНаКонец			= хмлВЕДОМОСТЬ_УПЛАТЫ.СоздатьПодчиненныйЭлемент("ЗадолженностьНаКонец");
			хмлКоличествоНаКонец			= хмлЗадолженностьНаКонец.СоздатьПодчиненныйЭлемент("Количество");
			
			КоличествоВыведенныхСтрок = 0;
			НаСтраховуюИтого = 0;
			НаНакопитлнИтого = 0;
			ПоДопТарифуИтого = 0;
			Для СчСтрок = 1 По КолСтрокВТабл Цикл
				// получим год					
				ТипДанн 	= ВремТаблица.ПолучитьЗначение(СчСтрок,"ТипДанных");
				Если (СокрЛП(ТипДанн) = "Конечная задолженность") и (КоличествоВыведенныхСтрок <100)  Тогда
					КоличествоВыведенныхСтрок = КоличествоВыведенныхСтрок +1;
					
					ТекГод      = ВремТаблица.ПолучитьЗначение(СчСтрок,"Год");
					
					хмлСуммаЗаПериодНаКонец		= хмлЗадолженностьНаКонец.СоздатьПодчиненныйЭлемент("СуммаЗаПериод");
					
					хмлТипСтрокиНаКонец				= хмлСуммаЗаПериодНаКонец.СоздатьПодчиненныйЭлемент("ТипСтроки");
					хмлТипСтрокиНаКонец.Значение	= "ДЕТАЛЬНАЯ";
					
					хмлРасчетныйПериодНаКонец			= хмлСуммаЗаПериодНаКонец.СоздатьПодчиненныйЭлемент("РасчетныйПериод");
					хмлРасчетныйПериодНаКонец.Значение	= ТекГод;					
					
					НаСтраховую = ?(ОкруглятьНачисленное = 1, Окр(ВремТаблица.ПолучитьЗначение(СчСтрок,"Страховых")), ВремТаблица.ПолучитьЗначение(СчСтрок,"Страховых"));
					НаНакопитлн = ?(ОкруглятьНачисленное = 1, Окр(ВремТаблица.ПолучитьЗначение(СчСтрок,"Накопительных")), ВремТаблица.ПолучитьЗначение(СчСтрок,"Накопительных"));
					ПоДопТарифу = ?(ОкруглятьНачисленное = 1, Окр(ВремТаблица.ПолучитьЗначение(СчСтрок,"ДопТариф")), ВремТаблица.ПолучитьЗначение(СчСтрок,"ДопТариф"));	
					
					НаСтраховуюИтого = НаСтраховуюИтого+НаСтраховую;
					НаНакопитлнИтого = НаНакопитлнИтого+НаНакопитлн;
					ПоДопТарифуИтого = ПоДопТарифуИтого+ПоДопТарифу;
					
					хмлСтраховыеВзносыНаКонец			= хмлСуммаЗаПериодНаКонец.СоздатьПодчиненныйЭлемент("СтраховыеВзносы");
					
					хмлСтраховыеНаКонец					= хмлСтраховыеВзносыНаКонец.СоздатьПодчиненныйЭлемент("Страховые");					
					хмлСтраховыеНаКонец.Значение		= ЧислоВФайл(НаСтраховую);
					
					хмлНакопительныеНаКонец			= хмлСтраховыеВзносыНаКонец.СоздатьПодчиненныйЭлемент("Накопительные");					
					хмлНакопительныеНаКонец.Значение	= ЧислоВФайл(НаНакопитлн);
					
					хмлДополнительныеНаКонец			= хмлСтраховыеВзносыНаКонец.СоздатьПодчиненныйЭлемент("Дополнительные");					
					хмлДополнительныеНаКонец.Значение	= ЧислоВФайл(ПоДопТарифу);					
					
				КонецЕсли;
			КонецЦикла;
			
			хмлСуммаЗаПериодНаКонец		= хмлЗадолженностьНаКонец.СоздатьПодчиненныйЭлемент("СуммаЗаПериод");
			
			хмлТипСтрокиНаКонец			= хмлСуммаЗаПериодНаКонец.СоздатьПодчиненныйЭлемент("ТипСтроки");
			хмлТипСтрокиНаКонец.Значение = "ИТОГО";
			
			хмлСтраховыеВзносыНаКонец			= хмлСуммаЗаПериодНаКонец.СоздатьПодчиненныйЭлемент("СтраховыеВзносы");
			
			хмлСтраховыеНаКонец					= хмлСтраховыеВзносыНаКонец.СоздатьПодчиненныйЭлемент("Страховые");					
			хмлСтраховыеНаКонец.Значение		= ЧислоВФайл(НаСтраховуюИтого);
			
			хмлНакопительныеНаКонец				= хмлСтраховыеВзносыНаКонец.СоздатьПодчиненныйЭлемент("Накопительные");					
			хмлНакопительныеНаКонец.Значение	= ЧислоВФайл(НаНакопитлнИтого);
			
			хмлДополнительныеНаКонец			= хмлСтраховыеВзносыНаКонец.СоздатьПодчиненныйЭлемент("Дополнительные");					
			хмлДополнительныеНаКонец.Значение	= ЧислоВФайл(ПоДопТарифуИтого);
			
			хмлКоличествоНаКонец.Значение = КоличествоВыведенныхСтрок + 1;

		КонецЕсли; 
		
		хмлДатаЗаполнения			= хмлВЕДОМОСТЬ_УПЛАТЫ.СоздатьПодчиненныйЭлемент("ДатаЗаполнения");
		хмлДатаЗаполнения.Значение	= ДатаЗаполнения;
		
	ИначеЕсли НомерПачки > 0 Тогда
		
		Сводов = "";
		
		ДокументыПачки = Пачки.ПолучитьЗначение(НомерПачки,"ТаблицаДокументов");
		ВсегоДокументов = ДокументыПачки.КоличествоСтрок();
		СписокСотров = СоздатьОбъект("СписокЗначений");
		ДокументыПачки.Выгрузить(СписокСотров,,,"Сотрудник");
		
		Если СписокСотров.РазмерСписка()=0 Тогда
			Предупреждение("В пачке №"+НомПачкиВПачке+" нет документов!", 60);
			Возврат;
		КонецЕсли;
		
		// ИСХД и КОРР
		ТекСтрока = "";
		ТипПачки = "";
		ДопТипПч = "";
		
		// Имя файла		
		ИмяФайла = "PFR-700-Y-" + Год + "-ORG-"+ Прав(РегНомерПФР,15) + "-DCK-"+Лев(НомПачкаС,5)+"-DPT-000000-DCK-00000.XML";
		
		Если ТипФормируемыхДокументов = 1 Тогда // формы сзв-4-1 и сзв-4-2
			
			НомерПачки = Пачки.ПолучитьЗначение(НомерПачки,"Номер");
			Если Пачки.НайтиЗначение(НомерПачки,ТекСтрока,"Номер") = 1 Тогда
				ТипПачки=СокрЛП(Пачки.ПолучитьЗначение(ТекСтрока,"ТипФормыПачки"));	
				ДопТипПч=СокрЛП(Пачки.ПолучитьЗначение(ТекСтрока,"ДопТип"));
				Если (ТипПачки = "КОРР") или (ТипПачки = "ОТМН") Тогда  
					ДопТипПч = ТипПачки;
					ТипПачки = "";
				КонецЕсли;
			Иначе
				ТипПачки = "ИСХД";
				ДопТипПч = "";
			КонецЕсли;
			
			//СЗВ4-1 или 4-2?
			Если (ДокументыПачки.ПолучитьЗначение(1,"СтрокСтажа")>1) Тогда
				ИсходнаяТаблица = "СЗВ-4-1";
			Иначе
				ИсходнаяТаблица = "СЗВ-4-2";
			КонецЕсли;
			
			УстановитьДатыПериодаОтчетности(КодПериода);
			
			ДоходыВычетыНалогиСотрудников = "";
			Если СобратьДанныеДляЕСН(ДоходыВычетыНалогиСотрудников,СписокСотров) = 0 Тогда
				Возврат
			КонецЕсли;
			ДоходыСотрудников = "";
			СтажСотрудников = "";
			Если глСобратьДанныеДляСЗВ2002(ДоходыСотрудников,СтажСотрудников,СписокСотров,ДатаПо,ДоходыВычетыНалогиСотрудников,Контекст) = 0 Тогда
				Возврат 
			КонецЕсли;
			
			
			хмлПачкаСЗВ4	= хмлВходящаяОпись.СоздатьПодчиненныйЭлемент("ПачкаСЗВ4");
			
			хмлРасчетныйПериод			= хмлПачкаСЗВ4.СоздатьПодчиненныйЭлемент("РасчетныйПериод");
			хмлРасчетныйПериод.Значение	= ДатаГод(ДатаОкончания);
			
			КодАВИА = "";

			хмлТарифСтраховыхВзносов(хмлПачкаСЗВ4, КодАВИА);
			
			
			Если ИсходнаяТаблица = "СЗВ-4-2" Тогда				
				Если ПустоеЗначение(Константа.ТерриториальныеУсловия) = 0 Тогда
					хмлТерриториальныеУсловия       = хмлПачкаСЗВ4.СоздатьПодчиненныйЭлемент("ТерриториальныеУсловия");
					хмлОснованиеТУ                          = хмлТерриториальныеУсловия.СоздатьПодчиненныйЭлемент("ОснованиеТУ");
					хмлОснованиеТУ.Значение         = ВРег(Строка(Константа.ТерриториальныеУсловия));
				КонецЕсли;
			КонецЕсли; 
			
			ПервыйМесяц = ДатаМесяц(ДатаНачала);
			ПоследнийМесяц = ДатаМесяц(ДатаОкончания);
			
			КодАВИА = "";
			ДокументыПачки.ВыбратьСтроки();
			Для СчДокументов = 1 По ВсегоДокументов Цикл
				
				//СЗВ4-1 или 4-2?
				Если ИсходнаяТаблица = "СЗВ-4-1" Тогда
					ДобавлСтр = """ИН41"",";
				Иначе
					ДобавлСтр = """ИН42"",";
				КонецЕсли;
				ДобавлСтр = ДобавлСтр+СчДокументов;
				
				ДокументыПачки.ПолучитьСтроку();
				Сотрудник = ДокументыПачки.Сотрудник;
				ТипФормы = ДокументыПачки.ТипФормы;
				ПередаватьАдрес=ДокументыПачки.ПередаватьАдрес;
				Если ИсходнаяТаблица = "СЗВ-4-2" Тогда
					ТУвПачке = ДокументыПачки.ТУвПачке;
				Иначе
					ТУвПачке = ""
				КонецЕсли;
				
//				глСтатусСтрока(Контекст,"Выводится в отчет ("+Окр(СчДокументов/ВсегоДокументов*100)+"%): "+Сотрудник.Наименование);
				
				Фамилия = ""; Имя = ""; Отчество = "";
				ФИО = глФамилияИмяОтчество(Сотрудник,Фамилия,Имя,Отчество);
				СтраховойНомерПФР = Сотрудник.СтраховойНомерПФР;
				Если глПроверкаСтраховогоНомера(СтраховойНомерПФР) = 0 Тогда
					Сообщить("Страховой номер работника "+ФИО+" указан неверно","!");
					Хорошо = 0;                                                                       
				КонецЕсли;
				
				НалогооблагаемыйДоход = 0;
				НачисленоЕСНвЧастиПФР = 0;
				
				НомерСтроки = "";
				Если ДоходыСотрудников.НайтиЗначение(Сотрудник,НомерСтроки,"Сотрудник") = 1 Тогда
					ДопТариф = ДоходыСотрудников.ПолучитьЗначение(НомерСтроки,"ВзносовДоп");
					
					ДнейБолел = ДоходыСотрудников.ПолучитьЗначение(НомерСтроки,"ДнейБолезн");
					ДнейБолел1 = Цел(ДнейБолел/30);
					ДнейБолел2 = ДнейБолел - ДнейБолел1*30;
					
					ДнейГулял = ДоходыСотрудников.ПолучитьЗначение(НомерСтроки,"ДнейОтпСвСч");
					ДнейГулял1 = Цел(ДнейГулял/30);
					ДнейГулял2 = ДнейГулял - ДнейГулял1*30;
				Иначе
					ДопТариф = 0;
					ДнейБолел1 = 0;
					ДнейБолел2 = 0;
					ДнейГулял1 = 0;
					ДнейГулял2 = 0;
				КонецЕсли;
				
				Если ДопТипПч <> "ОТМН" Тогда
					СтрокаИтоговойТаблицы=""; 
					ДоходыВычетыНалогиСотрудников.НайтиЗначение(глПолучитьУникальныйКодСотрудника(Сотрудник)+глДополнитьСтроку(ПоследнийМесяц,2),СтрокаИтоговойТаблицы,1);     
					
					// доходы по ст. 236 НК РФ
					НачисленоЕСНвЧастиСтр = ДоходыВычетыНалогиСотрудников.ПолучитьЗначение(СтрокаИтоговойТаблицы, 2); // здесь выводим страх взносы в ПФР
					НачисленоСтр = НачисленоСтр + НачисленоЕСНвЧастиСтр;
						
					НачисленоЕСНвЧастиНкп = ДоходыВычетыНалогиСотрудников.ПолучитьЗначение(СтрокаИтоговойТаблицы, 3); // здесь выводим накоп взносы в ПФР
					НачисленоНкп = НачисленоНкп + НачисленоЕСНвЧастиНкп;
						
					НачисленоДоп = НачисленоДоп + ДопТариф;

				Иначе
					НачисленоЕСНвЧастиСтр = 0;
					НачисленоЕСНвЧастиНкп = 0;
					ДопТариф = 0;
				КонецЕсли; 
				
				Ключ = ПолучитьКлюч(Сотрудник);
				
				НомерСтроки = "";
				СтажСотрудников.НайтиЗначение(Сотрудник,НомерСтроки,"Сотрудник");
				СтрокСтажа = 0;
				Если НомерСтроки <> 0 Тогда
					ТекущийСписокСтажа = СтажСотрудников.ПолучитьЗначение(НомерСтроки,"ТаблицаЗаписейОСтаже");
					СтрокСтажа = ТекущийСписокСтажа.КоличествоСтрок();
				КонецЕсли;
				
				Если (СтрокСтажа = 0) и (НачисленоЕСНвЧастиСтр = 0) и (НачисленоЕСНвЧастиНкп = 0) и (ТипФормы <> Перечисление.СЗВТипФормы.Отмен) Тогда  // нет ни доходов, ни стажа - в файл писать не будем
					Сообщить("Данных по работнику "+ФИО+ " (т.н. "+Сотрудник.Код+") не обнаружено! Удалите его из списка передаваемых документов.","!");
					Хорошо = 0;
					Продолжить
				КонецЕсли;
				
				Адрес = "";
				ТипАдреса = "РОССИЙСКИЙ";
				Если ПередаватьАдрес=1 Тогда 
					// адрес по сотруднику передаем, выберем адрес для передачи
					// если есть адрес в стране проживания, то передаем его
					
					АдресВСтранеПроживания = Сотрудник.АдресВСтранеПроживания;
					Если ПустоеЗначение(СтрЗаменить(АдресВСтранеПроживания,",",""))=0 Тогда
						
						СписокИнАдреса = глРазложить(СОКРЛП(АдресВСтранеПроживания));
						
						Если СпрСтраны.НайтиПоНаименованию(СписокИнАдреса.ПолучитьЗначение(1)) > 0 Тогда
							ТипАдреса = "ИНОСТРАННЫЙ"; 
							Адрес = АдресВСтранеПроживания;
						Иначе
							Сообщить("В адресе в стране проживания работника "+ФИО+" (т.н. "+Сотрудник.Код+") не указана страна, адрес и не будет передан","!");
						КонецЕсли;
					 
						
					Иначе //передаем российский адрес
						
						ПропискаАдрес = Сотрудник.АдресПрописка;
						ФактическийАдрес = Сотрудник.АдресФакт;
						Если (ПустоеЗначение(СтрЗаменить(ФактическийАдрес,",",""))=0) и (ФактическийАдрес<>ПропискаАдрес) Тогда
							Адрес = ФактическийАдрес;
							Если глАдресСоответствуетТребованиямМНС(Адрес) = 0 Тогда
								Сообщить("Фактический адрес работника "+ФИО+" (т.н. "+Сотрудник.Код+") не соответствует требованиям ПФР и не будет передан","!");
								Адрес = "";
							КонецЕсли;
						ИначеЕсли ПустоеЗначение(СтрЗаменить(ПропискаАдрес,",",""))=0 Тогда 
							Адрес = ПропискаАдрес;
							Если глАдресСоответствуетТребованиямМНС(Адрес) = 0 Тогда
								Сообщить("Адрес прописки работника "+ФИО+" (т.н. "+Сотрудник.Код+") не соответствует требованиям ПФР и не будет передан","!");
								Адрес = "";
							КонецЕсли;
						КонецЕсли;


					КонецЕсли;	
				КонецЕсли;				
				
				НомерСтроки = "";
				ТекущийСписокСтажа = "";
				Если СтажСотрудников.НайтиЗначение(Сотрудник,НомерСтроки,"Сотрудник") = 1 Тогда
					ТекущийСписокСтажа = СтажСотрудников.ПолучитьЗначение(НомерСтроки,"ТаблицаЗаписейОСтаже");
				КонецЕсли;
				
				Если ТипЗначения(ТекущийСписокСтажа) <> 100 Тогда
					ТекущийСписокСтажа  = СоздатьОбъект("ТаблицаЗначений");
					ТекущийСписокСтажа.НоваяКолонка("ТипЗаписи","Строка",14,,,,,);
					ТекущийСписокСтажа.НоваяКолонка("НомерЗаписи","Число",2,0,,,,);
					ТекущийСписокСтажа.НоваяКолонка("Начало","Дата",,,,,,);
					ТекущийСписокСтажа.НоваяКолонка("Окончание","Дата",,,,,,);
					ТекущийСписокСтажа.НоваяКолонка("ТерриториальныеУсловия","Перечисление.ТерриториальныеУсловия",,,,,,);
					ТекущийСписокСтажа.НоваяКолонка("СЗВОсобыеУсловияТруда","Перечисление.СЗВОсобыеУсловияТруда",,,,,,);
					ТекущийСписокСтажа.НоваяКолонка("СЗВОснованияИТС","Перечисление.СЗВОснованияИТС",,,,,,);
					ТекущийСписокСтажа.НоваяКолонка("СЗВПараметр1ИТС","Число",5,0,,,,);
					ТекущийСписокСтажа.НоваяКолонка("СЗВПараметр2ИТС","Число",2,0,,,,);
					ТекущийСписокСтажа.НоваяКолонка("СЗВПараметр3ИТС","Перечисление.СЗВПараметр3ИТС",,,,,,);
					ТекущийСписокСтажа.НоваяКолонка("СЗВОснованияВыслугиЛет","Перечисление.СЗВОснованияВыслугиЛет",,,,,,);
					ТекущийСписокСтажа.НоваяКолонка("СЗВПараметр1ВыслугиЛет","Число",5,0,,,,);
					ТекущийСписокСтажа.НоваяКолонка("СЗВПараметр2ВыслугиЛет","Число",4,0,,,,);
					ТекущийСписокСтажа.НоваяКолонка("СЗВПараметр3ВыслугиЛет","Число",8,2,,,,);
					ТекущийСписокСтажа.НоваяКолонка("РК","Число",4,2,,,,);
					ТекущийСписокСтажа.НоваяКолонка("КПС","Строка",20,,,,,);
				КонецЕсли;
				
				НомПериод=""; НачПериод=""; КонПериод=""; ТУ=""; УТ=""; ОснованиеИТС="";
				ДопИТС=""; ОснованиеВыслуги="";  ДопВЛ=""; КодПрофессии="";
				ПервПарам=""; ВторПарам=""; ТретПарам=""; ПервПарамВ=""; ВторПарамВ=""; ТретПарамВ="";
				СтрокаСоСтажемОснЗап = ""; СтрокаСоСтажемОснЗапНов = "";
				
				Если ТипФормы = Перечисление.СЗВТипФормы.Отмен Тогда
					ТекущийСписокСтажа.УдалитьСтроки();
				КонецЕсли;
				
				КолОснЗаписей = 0;
				КолДопЗаписей = 0;
				
				СноваОсновнаяЗапись = 0;//для идентификации факта ввода основной записи
				СтрокиДопСтажаВФайл = СоздатьОбъект("СписокЗначений");
				
				Если ДатаОкончания <> КонГода(ДатаОкончания) Тогда  
					
					// отрежем лишние записи о стаже и откорректируем даты окончания 
					СтрокСтажа = ТекущийСписокСтажа.КоличествоСтрок();
					СчетчикСтрокСтажа = 1;
					Пока СчетчикСтрокСтажа <= СтрокСтажа Цикл
						ВидСтроки = СокрЛП(ТекущийСписокСтажа.ПолучитьЗначение(СчетчикСтрокСтажа,"ТипЗаписи"));	
						Если ВидСтроки = "Основная"  Тогда
							
							НачПериод=ТекущийСписокСтажа.ПолучитьЗначение(СчетчикСтрокСтажа,"Начало");
							КонПериод=ТекущийСписокСтажа.ПолучитьЗначение(СчетчикСтрокСтажа,"Окончание");									
							Если НачПериод > ДатаОкончания Тогда                                                                   											
								ТекущийСписокСтажа.УдалитьСтроку(СчетчикСтрокСтажа);
								СтрокСтажа	=	СтрокСтажа	- 1; 
								
								// если удалили основную запись, нужо удалить и дополнительные
								Пока СтрокСтажа >= СчетчикСтрокСтажа Цикл                											
									ВидСтроки	=	СокрЛП(ТекущийСписокСтажа.ПолучитьЗначение(СчетчикСтрокСтажа,"ТипЗаписи"));		
									Если ВидСтроки = "Дополнительная" Тогда														
										ТекущийСписокСтажа.УдалитьСтроку(СчетчикСтрокСтажа);													
										СтрокСтажа			=	СтрокСтажа	- 1;																										
									Иначе
										Прервать;
									КонецЕсли;
								КонецЦикла;	
							Иначе               								
								Если КонПериод > ДатаОкончания Тогда 
									ТекущийСписокСтажа.УстановитьЗначение(СчетчикСтрокСтажа,"Окончание",ДатаОкончания);                                                       											
									
									// проверим: если у основной записи есть дополнительные, то надо выдать сообщение
									Если СтрокСтажа > СчетчикСтрокСтажа Тогда
										ВидСтроки	=	СокрЛП(ТекущийСписокСтажа.ПолучитьЗначение(СчетчикСтрокСтажа+1,"ТипЗаписи"));															
										Если ВидСтроки = "Дополнительная" Тогда
											Сообщить("У сотрудника "+ Сотрудник+ " по основной записи стажа с " + """" + НачПериод + " по " + КонПериод + """" + "есть дополнительная запись о стаже.");
											Сообщить("Рекомендуем рабить эту запись на несколько: до даты формирования этого отчета и после.");
										КонецЕсли;
									КонецЕсли;																						
								КонецЕсли;          
								СчетчикСтрокСтажа = СчетчикСтрокСтажа + 1;
							КонецЕсли;          									
						Иначе
							СчетчикСтрокСтажа = СчетчикСтрокСтажа + 1;
						КонецЕсли;          									
					КонецЦикла; // по строкам стажа
				КонецЕсли;				
				
				Если ДопТипПч <> "ОТМН" Тогда
					Для НомерСтрокиТаблицыСтажа = 1 По ТекущийСписокСтажа.КоличествоСтрок() Цикл
						
						ВидСтроки= СокрЛП(ТекущийСписокСтажа.ПолучитьЗначение(НомерСтрокиТаблицыСтажа,"ТипЗаписи"));
						
						Если ПустоеЗначение(ВидСтроки)=0  Тогда // обнаружено описание заполненной строки  
							
							ТУ=ТекущийСписокСтажа.ПолучитьЗначение(НомерСтрокиТаблицыСтажа,"ТерриториальныеУсловия");
							УТ=ТекущийСписокСтажа.ПолучитьЗначение(НомерСтрокиТаблицыСтажа,"СЗВОсобыеУсловияТруда");
							
							ОснованиеИТС=ТекущийСписокСтажа.ПолучитьЗначение(НомерСтрокиТаблицыСтажа,"СЗВОснованияИТС");
							
							ПервПарам = ТекущийСписокСтажа.ПолучитьЗначение(НомерСтрокиТаблицыСтажа,"СЗВПараметр1ИТС");
							ВторПарам = ТекущийСписокСтажа.ПолучитьЗначение(НомерСтрокиТаблицыСтажа,"СЗВПараметр2ИТС");
							ТретПарам =	ТекущийСписокСтажа.ПолучитьЗначение(НомерСтрокиТаблицыСтажа,"СЗВПараметр3ИТС");
							
							ОснованиеВыслуги=ТекущийСписокСтажа.ПолучитьЗначение(НомерСтрокиТаблицыСтажа,"СЗВОснованияВыслугиЛет");
							
							ПервПарамВ = ТекущийСписокСтажа.ПолучитьЗначение(НомерСтрокиТаблицыСтажа,"СЗВПараметр1ВыслугиЛет");
							ВторПарамВ = ТекущийСписокСтажа.ПолучитьЗначение(НомерСтрокиТаблицыСтажа,"СЗВПараметр2ВыслугиЛет");
							ТретПарамВ = ТекущийСписокСтажа.ПолучитьЗначение(НомерСтрокиТаблицыСтажа,"СЗВПараметр3ВыслугиЛет");
							
							КодПрофессии=СокрЛП(ТекущийСписокСтажа.ПолучитьЗначение(НомерСтрокиТаблицыСтажа,"КПС"));
							
							Если ВидСтроки = "Основная"  Тогда //новая основная запись
								
								НомПериод=ТекущийСписокСтажа.ПолучитьЗначение(НомерСтрокиТаблицыСтажа,"НомерЗаписи");
								НачПериод=ДатаФорматаПФР(ТекущийСписокСтажа.ПолучитьЗначение(НомерСтрокиТаблицыСтажа,"Начало"));
								КонПериод=ДатаФорматаПФР(ТекущийСписокСтажа.ПолучитьЗначение(НомерСтрокиТаблицыСтажа,"Окончание"));
								
								СтрокаСоСтажемОснЗап = СтрокаСоСтажемОснЗапНов;
								Если (СноваОсновнаяЗапись = 1) или (КолДопЗаписей > 0) Тогда
									
									СтрокаСоСтажемОснЗап = СтрокаСоСтажемОснЗап + КолДопЗаписей;
									
								КонецЕсли;
								
								СноваОсновнаяЗапись = 1;//для идентификации факта ввода основной записи
								
								КолОснЗаписей = КолОснЗаписей + 1;
								
							Иначе  // в дополнительной строке номер и даты периода не указываются
								
								СноваОсновнаяЗапись = 0;//для идентификации факта ввода основной записи
								
								НомПериод="";
								НачПериод="";
								КонПериод="";
								
								КолДопЗаписей = КолДопЗаписей + 1;
								
							КонецЕсли;
							
							СтрокаСоСтажемОснЗап = СтрокаСоСтажемОснЗапНов;
							
						КонецЕсли;
						
					КонецЦикла;
				КонецЕсли; 
				
				
				Если ИсходнаяТаблица = "СЗВ-4-1" Тогда
					хмлИС_СЗВ_4 = хмлПачкаВходящихДокументов.СоздатьПодчиненныйЭлемент("ИС_СЗВ-4-1");
				Иначе
					хмлИС_СЗВ_4 = хмлПачкаВходящихДокументов.СоздатьПодчиненныйЭлемент("ИС_СЗВ-4-2");
				КонецЕсли;					
				хмлНомерВпачке 			= хмлИС_СЗВ_4.СоздатьПодчиненныйЭлемент("НомерВпачке");
				хмлНомерВпачке.Значение	= СчДокументов + 1;
				
				хмлВидФормы				= хмлИС_СЗВ_4.СоздатьПодчиненныйЭлемент("ВидФормы");
				хмлВидФормы.Значение	= ИсходнаяТаблица;
				
				хмлТипСведений			= хмлИС_СЗВ_4.СоздатьПодчиненныйЭлемент("ТипСведений");
				хмлТипСведений.Значение	= ?(ДатаПо = КонГода(ДатаПо), "ИСХОДНАЯ", "ПЕНСИОННАЯ");
				
				Если ДопТипПч <> "ОТМН" Тогда
					Если ДопТипПч = "КОРР" Тогда
						хмлВидКорректировки				= хмлИС_СЗВ_4.СоздатьПодчиненныйЭлемент("ВидКорректировки");
						хмлВидКорректировки.Значение	= "КОРРЕКТИРУЮЩАЯ";	
					КонецЕсли;
				Иначе 
					хмлВидКорректировки				= хмлИС_СЗВ_4.СоздатьПодчиненныйЭлемент("ВидКорректировки");
					хмлВидКорректировки.Значение	= "ОТМЕНЯЮЩАЯ";			
				КонецЕсли;
				
				хмлСтраховойНомер			= хмлИС_СЗВ_4.СоздатьПодчиненныйЭлемент("СтраховойНомер");
				хмлСтраховойНомер.Значение	= Сотрудник.СтраховойНомерПФР;
				
				хмлФИО					= хмлИС_СЗВ_4.СоздатьПодчиненныйЭлемент("ФИО");
				
				хмлФамилия				= хмлФИО.СоздатьПодчиненныйЭлемент("Фамилия");
				хмлФамилия.Значение		= Врег(глЗаменитьСимволВСтроке(Фамилия));
				
				хмлИмя				= хмлФИО.СоздатьПодчиненныйЭлемент("Имя");
				хмлИмя.Значение		= Врег(глЗаменитьСимволВСтроке(Имя));
				
				хмлОтчество				= хмлФИО.СоздатьПодчиненныйЭлемент("Отчество");
				хмлОтчество.Значение	= Врег(глЗаменитьСимволВСтроке(Отчество));
				
							Если (ПередаватьАдрес = 1) и (ПустоеЗначение(Адрес)=0) Тогда
					
					хмлАдресЗЛ		= хмлИС_СЗВ_4.СоздатьПодчиненныйЭлемент("АдресЗЛ");
					хмлТипАдреса	= хмлАдресЗЛ.СоздатьПодчиненныйЭлемент("ТипАдреса");
					
					Если ТипАдреса = "ИНОСТРАННЫЙ" Тогда 
						
						Сообщить("Предупреждение! Для:"+ФИО+" (т.н. "+Сотрудник.Код+") в качестве адреса регистрации передается Иностранный адрес","!");
						
						хмлТипАдреса.Значение	= "ИНОСТРАННЫЙ";
						СписокИнАдреса = глРазложить(СОКРЛП(АдресВСтранеПроживания));
						
						
						хмлИностранныйАдрес		= хмлАдресЗЛ.СоздатьПодчиненныйЭлемент("ИностранныйАдрес"); 
						хмлКодСтраны			= хмлИностранныйАдрес.СоздатьПодчиненныйЭлемент("КодСтраны");
						хмлКодСтраны.Значение	= СпрСтраны.Код;
						
						хмлНазваниеСтраны			= хмлИностранныйАдрес.СоздатьПодчиненныйЭлемент("НазваниеСтраны");
						хмлНазваниеСтраны.Значение	= Врег(глЗаменитьСимволВСтроке(СпрСтраны.Наименование));
						
						хмлАдрес			= хмлИностранныйАдрес.СоздатьПодчиненныйЭлемент("Адрес");
						хмлАдрес.Значение	= Врег(глЗаменитьСимволВСтроке(СписокИнАдреса.ПолучитьЗначение(2)));							
						
					Иначе //российский адрес
						
						хмлТипАдреса.Значение	= "РОССИЙСКИЙ"; 
						
						АдресСписком = глРазложить(СокрЛП(Адрес)); 
						ИндексПрописки = АдресСписком.ПолучитьЗначение(2);
						
						Если СтрДлина(ИндексПрописки) <> 6 Тогда
							Сообщить("Индекс адреса застрахованного лица "+ФИО+" (т.н. "+ глПреобразоватьНомерДок(Сотрудник.Код) +") должен состоять из 6и символов","!");
						КонецЕсли;
						
						хмлИндекс = хмлАдресЗЛ.СоздатьПодчиненныйЭлемент("Индекс");						
						хмлИндекс.Значение	= ИндексПрописки;
						
						хмлРоссийскийАдрес		= хмлАдресЗЛ.СоздатьПодчиненныйЭлемент("РоссийскийАдрес"); 						
						
						глxmlРоссийскийАдрес(хмлРоссийскийАдрес, АдресСписком);
						
					КонецЕсли;
					
				КонецЕсли;
				
				глхмлСтрахователь		= хмлИС_СЗВ_4.СоздатьПодчиненныйЭлемент("Страхователь");
				глхмлСтрахователь(глхмлСтрахователь, ИНН, КПП, РегНомерПФР);
				
				хмлРасчетныйПериод			= хмлИС_СЗВ_4.СоздатьПодчиненныйЭлемент("РасчетныйПериод");
				хмлРасчетныйПериод.Значение	= Год;
				
				хмлДатаЗаполнения			= хмлИС_СЗВ_4.СоздатьПодчиненныйЭлемент("ДатаЗаполнения");
				хмлДатаЗаполнения.Значение	= ДатаЗаполнения;
				
				хмлТарифСтраховыхВзносов(хмлИС_СЗВ_4, КодАВИА);
				
				хмлНачисленоВзносовОсновных	= хмлИС_СЗВ_4.СоздатьПодчиненныйЭлемент("НачисленоВзносовОсновных");
				хмлСтраховые				= хмлНачисленоВзносовОсновных.СоздатьПодчиненныйЭлемент("Страховые");
				хмлСтраховые.Значение		= ЧислоВФайл(НачисленоЕСНвЧастиСтр);							
				хмлНакопительные			= хмлНачисленоВзносовОсновных.СоздатьПодчиненныйЭлемент("Накопительные");
				хмлНакопительные.Значение	= ЧислоВФайл(НачисленоЕСНвЧастиНкп);						  
				хмлДополнительные			= хмлНачисленоВзносовОсновных.СоздатьПодчиненныйЭлемент("Дополнительные");
				хмлДополнительные.Значение	= ЧислоВФайл(ДопТариф);						
				
				хмлБольничныеЛисты		= хмлИС_СЗВ_4.СоздатьПодчиненныйЭлемент("БольничныеЛисты");						
				хмлВсеГоды				= хмлБольничныеЛисты.СоздатьПодчиненныйЭлемент("ВсеГоды");
				хмлВсеГоды.Значение		= 0;						
				хмлВсеМесяцы			= хмлБольничныеЛисты.СоздатьПодчиненныйЭлемент("ВсеМесяцы");
				хмлВсеМесяцы.Значение	= ДнейБолел1;
				хмлВсеДни				= хмлБольничныеЛисты.СоздатьПодчиненныйЭлемент("ВсеДни");
				хмлВсеДни.Значение		= ДнейБолел2;							
				
				хмлАдминистративныйОтпуск	= хмлИС_СЗВ_4.СоздатьПодчиненныйЭлемент("АдминистративныйОтпуск");						
				хмлВсеГоды					= хмлАдминистративныйОтпуск.СоздатьПодчиненныйЭлемент("ВсеГоды");
				хмлВсеГоды.Значение			= 0;
				хмлВсеМесяцы				= хмлАдминистративныйОтпуск.СоздатьПодчиненныйЭлемент("ВсеМесяцы");
				хмлВсеМесяцы.Значение		= ДнейГулял1;
				хмлВсеДни					= хмлАдминистративныйОтпуск.СоздатьПодчиненныйЭлемент("ВсеДни");
				хмлВсеДни.Значение			= ДнейГулял2;
				
				
				Если ДопТипПч <> "ОТМН" Тогда
					хмлВсеПериодыРаботы	= хмлИС_СЗВ_4.СоздатьПодчиненныйЭлемент("ВсеПериодыРаботы");
					хмлКоличество	= хмлВсеПериодыРаботы.СоздатьПодчиненныйЭлемент("Количество");
					
					Если ИсходнаяТаблица = "СЗВ-4-2" Тогда						
						хмлКоличество.Значение 			= 1;						
						
						хмлПериодРаботы					= хмлВсеПериодыРаботы.СоздатьПодчиненныйЭлемент("ПериодРаботы");	
						хмлОсновнаяСтрока				= хмлПериодРаботы.СоздатьПодчиненныйЭлемент("ОсновнаяСтрока");	
						
						хмлНомерСтроки					= хмлОсновнаяСтрока.СоздатьПодчиненныйЭлемент("НомерСтроки");
						хмлНомерСтроки.Значение			= 1;
						
						хмлДатаНачалаПериода			= хмлОсновнаяСтрока.СоздатьПодчиненныйЭлемент("ДатаНачалаПериода");
						хмлДатаНачалаПериода.Значение	= СтрЗаменить(НачПериод,"/",".");
						
						хмлДатаКонцаПериода				= хмлОсновнаяСтрока.СоздатьПодчиненныйЭлемент("ДатаКонцаПериода");
						хмлДатаКонцаПериода.Значение	= СтрЗаменить(КонПериод,"/",".");					
						
					ИначеЕсли ИсходнаяТаблица = "СЗВ-4-1"  Тогда
						
						ВыведеноСтрок = 0;
						ТекущийСписокСтажа.ВыбратьСтроки();
						Пока ТекущийСписокСтажа.ПолучитьСтроку() = 1 Цикл							
							
							ВидСтроки = СокрЛП(ТекущийСписокСтажа.ТипЗаписи);
							
							Если ВидСтроки = "Основная" Тогда
								ВыведеноСтрок = ВыведеноСтрок + 1;
								хмлПериодРаботы				= хмлВсеПериодыРаботы.СоздатьПодчиненныйЭлемент("ПериодРаботы");									
								
								КоличествоДопСтрок = 0;
								хмлСтрока			= хмлПериодРаботы.СоздатьПодчиненныйЭлемент("ОсновнаяСтрока");
								хмлНомерСтроки					= хмлСтрока.СоздатьПодчиненныйЭлемент("НомерСтроки");
								хмлНомерСтроки.Значение			= ВыведеноСтрок;
								
								хмлДатаНачалаПериода			= хмлСтрока.СоздатьПодчиненныйЭлемент("ДатаНачалаПериода");
								хмлДатаНачалаПериода.Значение	= "" + глДополнитьСтроку(ДатаЧисло(ТекущийСписокСтажа.Начало),2) + "." + глДополнитьСтроку(ДатаМесяц(ТекущийСписокСтажа.Начало),2) + "." + глДополнитьСтроку(ДатаГод(ТекущийСписокСтажа.Начало),2);
								
								хмлДатаКонцаПериода			= хмлСтрока.СоздатьПодчиненныйЭлемент("ДатаКонцаПериода");									
								хмлДатаКонцаПериода.Значение	= "" + глДополнитьСтроку(ДатаЧисло(ТекущийСписокСтажа.Окончание),2) + "." + глДополнитьСтроку(ДатаМесяц(ТекущийСписокСтажа.Окончание),2) + "." + глДополнитьСтроку(ДатаГод(ТекущийСписокСтажа.Окончание),2);
								
								хмлОсобенностиУчета                     = хмлСтрока.СоздатьПодчиненныйЭлемент("ОсобенностиУчета");
								
								Если ПустоеЗначение(ТекущийСписокСтажа.ТерриториальныеУсловия) = 0  Тогда
									
									хмлТерриториальныеУсловия       = хмлОсобенностиУчета.СоздатьПодчиненныйЭлемент("ТерриториальныеУсловия");
									
									хмлОснованиеТУ                          = хмлТерриториальныеУсловия.СоздатьПодчиненныйЭлемент("ОснованиеТУ");
									хмлОснованиеТУ.Значение         = ВРег(Строка(ТекущийСписокСтажа.ТерриториальныеУсловия));
									
								КонецЕсли;
								
								Если ПустоеЗначение(ТекущийСписокСтажа.СЗВОсобыеУсловияТруда) = 0 Тогда
									хмлОсобыеУсловияТруда           = хмлОсобенностиУчета.СоздатьПодчиненныйЭлемент("ОсобыеУсловияТруда");
									
									хмлОснованиеОУТ                         = хмлОсобыеУсловияТруда.СоздатьПодчиненныйЭлемент("ОснованиеОУТ");
									хмлОснованиеОУТ.Значение        = ВРег(Строка(ТекущийСписокСтажа.СЗВОсобыеУсловияТруда));
									
									хмлПозицияСписка                        = хмлОсобыеУсловияТруда.СоздатьПодчиненныйЭлемент("ПозицияСписка");
									хмлПозицияСписка.Значение       = ВРег(СокрЛП(ТекущийСписокСтажа.КПС));
								КонецЕсли;
								
								Если ПустоеЗначение(ТекущийСписокСтажа.СЗВОснованияИТС) = 0 Тогда
									хмлИсчисляемыйСтаж                      = хмлОсобенностиУчета.СоздатьПодчиненныйЭлемент("ИсчисляемыйСтаж");
									
									хмлОснованиеИС                          = хмлИсчисляемыйСтаж.СоздатьПодчиненныйЭлемент("ОснованиеИС");
									хмлОснованиеИС.Значение         = ВРег(Строка(ТекущийСписокСтажа.СЗВОснованияИТС));
									
									Если ТекущийСписокСтажа.СЗВОснованияИТС = Перечисление.СЗВОснованияИТС2002.ВОДОЛАЗ Тогда
										хмлВыработкаВчасах              = хмлИсчисляемыйСтаж.СоздатьПодчиненныйЭлемент("ВыработкаВчасах");
										
										хмлЧасы                                 = хмлВыработкаВчасах.СоздатьПодчиненныйЭлемент("Часы");
										хмлЧасы.Значение                = ТекущийСписокСтажа.СЗВПараметр1ИТС;
										
										хмлМинуты                               = хмлВыработкаВчасах.СоздатьПодчиненныйЭлемент("Минуты");
										хмлМинуты.Значение              = ТекущийСписокСтажа.СЗВПараметр2ИТС;
										
									Иначе
										хмлВыработкаКалендарная = хмлИсчисляемыйСтаж.СоздатьПодчиненныйЭлемент("ВыработкаКалендарная");
										
										хмлВсеГоды                              = хмлВыработкаКалендарная.СоздатьПодчиненныйЭлемент("ВсеГоды");
										хмлВсеГоды.Значение             = 0;
										
										хмлВсеМесяцы                    = хмлВыработкаКалендарная.СоздатьПодчиненныйЭлемент("ВсеМесяцы");
										хмлВсеМесяцы.Значение   = ТекущийСписокСтажа.СЗВПараметр1ИТС;
										
										хмлВсеДни                               = хмлВыработкаКалендарная.СоздатьПодчиненныйЭлемент("ВсеДни");
										хмлВсеДни.Значение              = ТекущийСписокСтажа.СЗВПараметр2ИТС;
										
									КонецЕсли;
								КонецЕсли;
								
								Если ПустоеЗначение(ТекущийСписокСтажа.СЗВПараметр3ИТС) = 0 Тогда
									хмлДекретДети	= хмлОсобенностиУчета.СоздатьПодчиненныйЭлемент("ДекретДети");
									хмлДекретДети.Значение	= ВРег(Строка(ТекущийСписокСтажа.СЗВПараметр3ИТС));
								КонецЕсли;
								
								Если ПустоеЗначение(ТекущийСписокСтажа.СЗВОснованияВыслугиЛет) = 0 Тогда
									хмлВыслугаЛет	= хмлОсобенностиУчета.СоздатьПодчиненныйЭлемент("ВыслугаЛет");
									
									ОснованиеВЛ		= хмлВыслугаЛет.СоздатьПодчиненныйЭлемент("ОснованиеВЛ");
									ОснованиеВЛ.Значение = Строка(ТекущийСписокСтажа.СЗВОснованияВыслугиЛет);
									
									Если (ТекущийСписокСтажа.СЗВОснованияВыслугиЛет = Перечисление.СЗВОснованияВыслугиЛет2002.ст28пПД)
									Или	(ТекущийСписокСтажа.СЗВОснованияВыслугиЛет = Перечисление.СЗВОснованияВыслугиЛет2002.ст28пПДРК)
									Или	(ТекущийСписокСтажа.СЗВОснованияВыслугиЛет = Перечисление.СЗВОснованияВыслугиЛет2002.САМОЛЕТ)
									Или	(ТекущийСписокСтажа.СЗВОснованияВыслугиЛет = Перечисление.СЗВОснованияВыслугиЛет2002.СПЕЦАВ)
									Или	(ТекущийСписокСтажа.СЗВОснованияВыслугиЛет = Перечисление.СЗВОснованияВыслугиЛет2002.ЛЕТИСП)
									Или	(ТекущийСписокСтажа.СЗВОснованияВыслугиЛет = Перечисление.СЗВОснованияВыслугиЛет2002.ОПЫТИСП)
									Или	(ТекущийСписокСтажа.СЗВОснованияВыслугиЛет = Перечисление.СЗВОснованияВыслугиЛет2002.ИСПКЛС1)
									Или	(ТекущийСписокСтажа.СЗВОснованияВыслугиЛет = Перечисление.СЗВОснованияВыслугиЛет2002.ИТСИСП)
									Или	(ТекущийСписокСтажа.СЗВОснованияВыслугиЛет = Перечисление.СЗВОснованияВыслугиЛет2002.ИТСМАВ)
									Или	(ТекущийСписокСтажа.СЗВОснованияВыслугиЛет = Перечисление.СЗВОснованияВыслугиЛет2002.ИНСПЕКТ)
									Или	(ТекущийСписокСтажа.СЗВОснованияВыслугиЛет = Перечисление.СЗВОснованияВыслугиЛет2002.ст27п14)
									Или	(ТекущийСписокСтажа.СЗВОснованияВыслугиЛет = Перечисление.СЗВОснованияВыслугиЛет2002.ст27п15) Тогда
										
										хмлВыработкаВчасах		= хмлВыслугаЛет.СоздатьПодчиненныйЭлемент("ВыработкаВчасах");
										
										хмлЧасы					= хмлВыработкаВчасах.СоздатьПодчиненныйЭлемент("Часы");
										хмлЧасы.Значение		= ТекущийСписокСтажа.СЗВПараметр1ВыслугиЛет;
										
										хмлМинуты				= хмлВыработкаВчасах.СоздатьПодчиненныйЭлемент("Минуты");
										хмлМинуты.Значение		= ТекущийСписокСтажа.СЗВПараметр2ВыслугиЛет;											
										
									ИначеЕсли (ТекущийСписокСтажа.СЗВОснованияВыслугиЛет = Перечисление.СЗВОснованияВыслугиЛет2002.ст28пГД) 
									Или	(ТекущийСписокСтажа.СЗВОснованияВыслугиЛет = Перечисление.СЗВОснованияВыслугиЛет2002.ст28пПД)
									Или	(ТекущийСписокСтажа.СЗВОснованияВыслугиЛет = Перечисление.СЗВОснованияВыслугиЛет2002.ст28пСМ)
									Или	(ТекущийСписокСтажа.СЗВОснованияВыслугиЛет = Перечисление.СЗВОснованияВыслугиЛет2002.ст28пГДХР)
									Или	(ТекущийСписокСтажа.СЗВОснованияВыслугиЛет = Перечисление.СЗВОснованияВыслугиЛет2002.ст28пГДХР) Тогда
										
										хмлДоляСтавки			= хмлОсобыеУсловияТруда.СоздатьПодчиненныйЭлемент("ДоляСтавки");
										хмлДоляСтавки.Значение	= ТекущийСписокСтажа.СЗВПараметр1ВыслугиЛет;
									КонецЕсли;
									
								КонецЕсли;
								
							КонецЕсли;
							
						КонецЦикла;
						хмлКоличество.Значение			= ВыведеноСтрок;
						
					КонецЕсли;
				КонецЕсли;				
				
			КонецЦикла; // обхода документов в пачке 
			
			хмлТипСведений			= хмлПачкаСЗВ4.СоздатьПодчиненныйЭлемент("ТипСведений");
			хмлТипСведений.Значение	= ?(ДатаПо = КонГода(ДатаПо), "ИСХОДНАЯ", "ПЕНСИОННАЯ");

			                                              
			Если ДопТипПч <> "ОТМН" Тогда
				хмлИтогоСуммаВзносов		= хмлПачкаСЗВ4.СоздатьПодчиненныйЭлемент("ИтогоСуммаВзносов");
				хмлСтраховые				= хмлИтогоСуммаВзносов.СоздатьПодчиненныйЭлемент("Страховые");
				хмлСтраховые.Значение		= ЧислоВФайл(НачисленоСтр);
				хмлНакопительные			= хмлИтогоСуммаВзносов.СоздатьПодчиненныйЭлемент("Накопительные");
				хмлНакопительные.Значение	= ЧислоВФайл(НачисленоНкп);
				хмлДополнительные			= хмлИтогоСуммаВзносов.СоздатьПодчиненныйЭлемент("Дополнительные");
				хмлДополнительные.Значение	= ЧислоВФайл(НачисленоДоп); 				
				Если ДопТипПч = "КОРР" Тогда
					хмлВидКорректировки				= хмлПачкаСЗВ4.СоздатьПодчиненныйЭлемент("ВидКорректировки");
					хмлВидКорректировки.Значение	= "КОРРЕКТИРУЮЩАЯ";	
				КонецЕсли;
			Иначе 
				хмлВидКорректировки				= хмлПачкаСЗВ4.СоздатьПодчиненныйЭлемент("ВидКорректировки");
				хмлВидКорректировки.Значение	= "ОТМЕНЯЮЩАЯ";			
			КонецЕсли;
			
			Если ДопТипПч = "ОТМН" Тогда
				НачисленоСтр = 0;
				НачисленоНкп = 0;
				НачисленоДоп = 0; 
			Иначе	
				НачисленоСтр = Окр(НачисленоСтр);
				НачисленоНкп = Окр(НачисленоНкп);
				НачисленоДоп = Окр(НачисленоДоп);
			КонецЕсли;
			
		ИначеЕсли ТипФормируемыхДокументов = 2 Тогда //анкеты
			
			ДокументыПачки.ВыбратьСтроки();
			Для СчДокументов = 1 По ВсегоДокументов Цикл
				ДокументыПачки.ПолучитьСтроку();
				Сотрудник = ДокументыПачки.Сотрудник;
								
				ФИО = СокрЛП(Сотрудник.Наименование);
				Фамилия = ""; Имя = ""; Отчество = "";
				глФамилияИмяОтчество(Сотрудник, Фамилия,Имя,Отчество);
				Пол = Сотрудник.Пол;
				ДатаРождения = ДатаФорматаПФР(Сотрудник.ДатаРождения);
				ТипМестаРождения = 0; Город = ""; Район = ""; Область = ""; Страна = "";
				СпМестоРождения = глРазложить(Сотрудник.МестоРождения);
				Если СпМестоРождения.РазмерСписка() > 4 Тогда
					ТипМестаРождения = Число(СпМестоРождения.ПолучитьЗначение(1));
					Город	= СокрЛП(СпМестоРождения.ПолучитьЗначение(2));
					Район	= СокрЛП(СпМестоРождения.ПолучитьЗначение(3));
					Область	= СокрЛП(СпМестоРождения.ПолучитьЗначение(4));
					Страна	= СокрЛП(СпМестоРождения.ПолучитьЗначение(5));
				КонецЕсли;
				НомерДокумента = ""; СерияДокумента1 = ""; СерияДокумента2 = "";
				ВидДокумента = "";
				ДатаВыдачиДокумента = "";
				КемВыданДокумент = "";
				
				Вид = Сотрудник.ВидДокумента;
				ВидДокумента = Вид.КодСЗВ;
				КодДока = Вид.КодНДФЛ;
				СерияДокумента = СокрЛП(Сотрудник.ДокументСерия);
				НаименованиеДокумента = СокрЛП(Вид);
				Если Найти(",01,03,",","+КодДока+",")>0  Тогда
					РазделительСерии="-"
				ИначеЕсли КодДока="21"  Тогда
					РазделительСерии=" "     
				Иначе	
					РазделительСерии="???"     
				КонецЕсли;
				Тире = Найти (СерияДокумента,РазделительСерии);
				//СерияДокумента1: паспорт СССР, свид о рожд - римские цифры, остальные - остаются как есть (арабские)
				//СерияДокумента2: м.б. буквы, м.б.обычные цифры
				Если (НаименованиеДокумента="Свидетельство о рождении")или(НаименованиеДокумента="Паспорт гражданина СССР") Тогда
					СерияДокумента1 = ?(Тире = 0,СерияДокумента,глЗаменитьОдниСимволыДругими("1УХЛС",СокрЛП(Лев(СерияДокумента,Тире-1)),"IVXLC"));
				Иначе 
					СерияДокумента1 = ?(Тире = 0,СерияДокумента,СокрЛП(Лев(СерияДокумента,Тире-1)));
				КонецЕсли;
				СерияДокумента2 = ?(Тире = 0,"", СокрЛП(Сред(СерияДокумента,Тире+1)));
				НомерДокумента = СокрЛП(Сотрудник.ДокументНомер);
				ДатаВыдачиДокумента = ДатаФорматаПФР(Сотрудник.ДокументДатаВыдачи);
				КемВыданДокумент = Сотрудник.ДокументКемВыдан;
				Если ПустаяСтрока(КодДока)=1 Тогда
					Сообщить(ФИО+"(т.н. "+Сотрудник.Код+"): "+"Не задан документ, удостоверяющий личность");
					Хорошо = 0;	
				КонецЕсли;
				Если ПустаяСтрока(СерияДокумента+НомерДокумента)=1 Тогда
					Сообщить(ФИО+"(т.н. "+Сотрудник.Код+"): "+"Не заданы номер и серия документа, удостоверяющего личность");
					Хорошо = 0;
				ИначеЕсли ПустаяСтрока(КодДока)=0 Тогда
					Если (глПроверкаСерииУдостоверенияЛичности(КодДока,СерияДокумента,0)=0) Тогда
						Сообщить(ФИО+"(т.н. "+Сотрудник.Код+"): "+"Неверно указана серия документа, удостоверяющего личность");
						Хорошо = 0;
					КонецЕсли;
					Если (глПроверкаНомераУдостоверенияЛичности(КодДока,НомерДокумента,0)=0) Тогда
						Сообщить(ФИО+"(т.н. "+Сотрудник.Код+"): "+"Неверно указан номер документа, удостоверяющего личность");
						Хорошо = 0;
					КонецЕсли;
				КонецЕсли;
				
				Телефон = СокрЛП(Сотрудник.Телефон);
				ПропискаАдрес = Сотрудник.АдресПрописка;
				Если глАдресСоответствуетТребованиямМНС(ПропискаАдрес) = 0 Тогда
					Сообщить("Адрес прописки работника "+ФИО+" (т.н. "+Сотрудник.Код+") не соответствует требованиям ПФР","!");
					Хорошо = 0;                                                                       
				КонецЕсли;
				ФактическийАдрес = ?(ПустоеЗначение(СтрЗаменить(Сотрудник.АдресФакт,",","")) = 1,"",Сотрудник.АдресФакт);
				Если ПустоеЗначение(ФактическийАдрес) = 0 Тогда
					Если глАдресСоответствуетТребованиямМНС(ФактическийАдрес) = 0 Тогда
						Сообщить("Фактический адрес работника "+ФИО+" (т.н. "+Сотрудник.Код+") не соответствует требованиям ПФР","!");
						Хорошо = 0;                                                                       
					КонецЕсли;
				КонецЕсли;
				
				
				НомерДокумента = СокрЛП(НомерДокумента);
				ДлинаНомераДокумента = СтрДлина(НомерДокумента);
				НомерДокумента = ?(ДлинаНомераДокумента=0,0,НомерДокумента);
				Если ДлинаНомераДокумента > 8 Тогда //по правилам ПФР длина номера документа, удост. личность, не может быть больше 8 символов
						Сообщить("Количество цифр в номере документа, удостоверяющего личность работника
						| "+ФИО+" (т.н. "+Сотрудник.Код+"), больше восьми - это не соответствует требованиям ПФР","!");
						Хорошо = 0;                                                                       
				КонецЕсли;
				
				Если Пол.Выбран()=1 Тогда
					ПредставлениеПола=?(Пол = Перечисление.Пол.Мужской,"М","Ж");
				КонецЕсли;
				
				// гражданство возьмем из страны ПМЖ
				СтранаПМЖ = Сотрудник.Страна;
				Гражданство = ?((СтранаПМЖ.Выбран()=0) или (СтранаПМЖ.Код="643"),"",СтранаПМЖ.Наименование);
				
				
				хмлАНКЕТА_ЗЛ		= хмлПачкаВходящихДокументов.СоздатьПодчиненныйЭлемент("АНКЕТА_ЗЛ");
				
				хмлНомерВпачке			= хмлАНКЕТА_ЗЛ.СоздатьПодчиненныйЭлемент("НомерВпачке");
				хмлНомерВпачке.Значение	= СчДокументов + 1;					            
				
				хмлАнкетныеДанные	= хмлАНКЕТА_ЗЛ.СоздатьПодчиненныйЭлемент("АнкетныеДанные");
				
				хмлФИО				= хмлАнкетныеДанные.СоздатьПодчиненныйЭлемент("ФИО");
				
				хмлФамилия			= хмлФИО.СоздатьПодчиненныйЭлемент("Фамилия");
				хмлФамилия.Значение	= ВРЕГ(глЗаменитьСимволВСтроке(ПреобразованнаяСтрока(Фамилия)));
				
				хмлИмя				= хмлФИО.СоздатьПодчиненныйЭлемент("Имя");
				хмлИмя.Значение		= ВРЕГ(глЗаменитьСимволВСтроке(ПреобразованнаяСтрока(Имя)));
				
				хмлОтчество			= хмлФИО.СоздатьПодчиненныйЭлемент("Отчество");
				хмлОтчество.Значение= ВРЕГ(глЗаменитьСимволВСтроке(ПреобразованнаяСтрока(Отчество)));					
				
				хмлПол				= хмлАнкетныеДанные.СоздатьПодчиненныйЭлемент("Пол"); 
				хмлПол.Значение		= ?(ПредставлениеПола="М","МУЖСКОЙ","ЖЕНСКИЙ"); 
				
				Если (ПустоеЗначение(Город) = 1) и (ПустоеЗначение(Район) = 1) и (ПустоеЗначение(Область) = 1) и (ПустоеЗначение(Страна) = 1) Тогда
					Сообщить("Место рожднеия работника "+ФИО+" (т.н. "+ Сотрудник.Код +") не задано","!");
				КонецЕсли;
				
				хмлДатаРождения			= хмлАнкетныеДанные.СоздатьПодчиненныйЭлемент("ДатаРождения"); 
				хмлДатаРождения.Значение= СтрЗаменить(ДатаРождения,"/","."); 					
				
				хмлМестоРождения		= хмлАнкетныеДанные.СоздатьПодчиненныйЭлемент("МестоРождения");					
				
				хмлТипМестаРождения			= хмлМестоРождения.СоздатьПодчиненныйЭлемент("ТипМестаРождения");
				хмлТипМестаРождения.Значение= ?(ТипМестаРождения=0,"СТАНДАРТНОЕ","ОСОБОЕ"); 
				
				хмлГородРождения			= хмлМестоРождения.СоздатьПодчиненныйЭлемент("ГородРождения");					
				хмлГородРождения.Значение	= Врег(глЗаменитьСимволВСтроке(ПреобразованнаяСтрока(Город)));
				
				хмлРайонРождения			= хмлМестоРождения.СоздатьПодчиненныйЭлемент("РайонРождения");					
				хмлРайонРождения.Значение	= Врег(глЗаменитьСимволВСтроке(ПреобразованнаяСтрока(Район)));
				
				хмлРегионРождения			= хмлМестоРождения.СоздатьПодчиненныйЭлемент("РегионРождения");					
				хмлРегионРождения.Значение	= Врег(глЗаменитьСимволВСтроке(ПреобразованнаяСтрока(Область)));
				
				хмлСтранаРождения			= хмлМестоРождения.СоздатьПодчиненныйЭлемент("СтранаРождения");					
				хмлСтранаРождения.Значение	= Врег(глЗаменитьСимволВСтроке(ПреобразованнаяСтрока(Страна)));
				
				хмлГражданство				= хмлАнкетныеДанные.СоздатьПодчиненныйЭлемент("Гражданство"); 
				хмлГражданство.Значение		= Врег(Гражданство); 
				
				Адрес = "";
				ТипАдреса = "РОССИЙСКИЙ";
				
				АдресВСтранеПроживания = Сотрудник.АдресВСтранеПроживания;
				Если ПустоеЗначение(СтрЗаменить(АдресВСтранеПроживания,",",""))=0 Тогда
					
					СписокИнАдреса = глРазложить(СОКРЛП(АдресВСтранеПроживания));
					
					Если СпрСтраны.НайтиПоНаименованию(СписокИнАдреса.ПолучитьЗначение(1)) > 0 Тогда
						// если есть адрес в стране проживания, то передаем его
						ТипАдреса = "ИНОСТРАННЫЙ"; 
						Адрес = АдресВСтранеПроживания;
					Иначе
						Сообщить("В адресе в стране проживания работника "+ФИО+" (т.н. "+Сотрудник.Код+") не указана страна, адрес и не будет передан","!");
					КонецЕсли;
					
				Иначе //передаем российский адрес
					
					ПропискаАдрес = Сотрудник.АдресПрописка;
					Если ПустоеЗначение(СтрЗаменить(ПропискаАдрес,",",""))=0 Тогда 
						Адрес = ПропискаАдрес;
						Если глАдресСоответствуетТребованиямМНС(Адрес) = 0 Тогда
							Сообщить("Адрес прописки работника "+ФИО+" (т.н. "+Сотрудник.Код+") не соответствует требованиям ПФР и не будет передан","!");
							Адрес = "";
						КонецЕсли;
					КонецЕсли;
					
				КонецЕсли;
				
				Если ПустоеЗначение(Адрес)=0 Тогда
					
					хмлАдресРегистрации		= хмлАнкетныеДанные.СоздатьПодчиненныйЭлемент("АдресРегистрации"); 
					хмлТипАдреса			= хмлАдресРегистрации.СоздатьПодчиненныйЭлемент("ТипАдреса");
					
					Если ТипАдреса = "ИНОСТРАННЫЙ" Тогда 
						
						Сообщить("Предупреждение! Для:"+ФИО+" (т.н. "+Сотрудник.Код+") в качестве адреса регистрации передается Иностранный адрес","!");
						
						хмлТипАдреса.Значение	= "ИНОСТРАННЫЙ";
						
						хмлИностранныйАдрес		= хмлАдресРегистрации.СоздатьПодчиненныйЭлемент("ИностранныйАдрес"); 
						хмлКодСтраны			= хмлИностранныйАдрес.СоздатьПодчиненныйЭлемент("КодСтраны");
						хмлКодСтраны.Значение	= СпрСтраны.Код;
						
						хмлНазваниеСтраны			= хмлИностранныйАдрес.СоздатьПодчиненныйЭлемент("НазваниеСтраны");
						хмлНазваниеСтраны.Значение	= Врег(глЗаменитьСимволВСтроке(СпрСтраны.Наименование));
						
						хмлАдрес			= хмлИностранныйАдрес.СоздатьПодчиненныйЭлемент("Адрес");
						хмлАдрес.Значение	= Врег(глЗаменитьСимволВСтроке(СписокИнАдреса.ПолучитьЗначение(2)));							
						
						
					Иначе //российский адрес
						
						хмлТипАдреса.Значение	= "РОССИЙСКИЙ"; 
						
						АдресСписком = глРазложить(СокрЛП(Адрес)); 
						ИндексПрописки = АдресСписком.ПолучитьЗначение(2);
						
						Если СтрДлина(ИндексПрописки) <> 6 Тогда
							Сообщить("Индекс адреса застрахованного лица "+ФИО+" (т.н. "+ глПреобразоватьНомерДок(Сотрудник.Код) +") должен состоять из 6и символов","!");
						КонецЕсли;
						
						хмлИндекс = хмлАдресРегистрации.СоздатьПодчиненныйЭлемент("Индекс");						
						хмлИндекс.Значение	= ИндексПрописки;
						
						хмлРоссийскийАдрес		= хмлАдресРегистрации.СоздатьПодчиненныйЭлемент("РоссийскийАдрес"); 						
						
						глxmlРоссийскийАдрес(хмлРоссийскийАдрес, АдресСписком);
						
					КонецЕсли;
					
				КонецЕсли;
				
				АдресФактический = СОКРЛП(Сотрудник.АдресФакт);
				
				Если (ПустоеЗначение(АдресФактический) = 0) и (АдресФактический <> Сотрудник.АдресПрописка) Тогда
					
					Если глАдресСоответствуетТребованиямМНС(АдресФактический) = 1 Тогда 
						
						хмлАдресФактический		= хмлАнкетныеДанные.СоздатьПодчиненныйЭлемент("АдресФактический"); 						
						хмлТипАдреса			= хмлАдресФактический.СоздатьПодчиненныйЭлемент("ТипАдреса"); 
						
						АдресФактическийСписком = глРазложить(АдресФактический);
						ИндексРегистрации = АдресФактическийСписком.ПолучитьЗначение(2);
						
						хмлТипАдреса.Значение	= "РОССИЙСКИЙ";
						
						хмлИндекс = хмлАдресФактический.СоздатьПодчиненныйЭлемент("Индекс");						
						хмлИндекс.Значение	= ИндексРегистрации;
						
						хмлРоссийскийАдрес		= хмлАдресФактический.СоздатьПодчиненныйЭлемент("РоссийскийАдрес"); 						
						
						глxmlРоссийскийАдрес(хмлРоссийскийАдрес, АдресФактическийСписком);						
						
					КонецЕсли;
					
				КонецЕсли;					
				
				Телефон = Сотрудник.Телефон;
				Если ПустоеЗначение(Телефон) = 0 Тогда
					хмлТелефон				= хмлАнкетныеДанные.СоздатьПодчиненныйЭлемент("Телефон"); 
					хмлТелефон.Значение		= Телефон;
				КонецЕсли;
				
				хмлУдостоверяющийДокумент	= хмлАНКЕТА_ЗЛ.СоздатьПодчиненныйЭлемент("УдостоверяющийДокумент");				
				
				хмлТипУдостоверяющего			= хмлУдостоверяющийДокумент.СоздатьПодчиненныйЭлемент("ТипУдостоверяющего");
				хмлТипУдостоверяющего.Значение	= ВРег(ВидДокумента);
				
				xmlДокумент						= хмлУдостоверяющийДокумент.СоздатьПодчиненныйЭлемент("Документ");
				
				xmlНаименованиеУдостоверяющего			= xmlДокумент.СоздатьПодчиненныйЭлемент("НаименованиеУдостоверяющего");
				
				Если ВидДокумента = "ПРОЧЕЕ" Тогда
					xmlНаименованиеУдостоверяющего.Значение	= ВРег(СокрЛП(Вид.Наименование));
				Иначе
					xmlНаименованиеУдостоверяющего.Значение	= ВРег(СокрЛП(Вид.КодСЗВ));
				КонецЕсли;
				
				xmlСерияРимскиеЦифры			= xmlДокумент.СоздатьПодчиненныйЭлемент("СерияРимскиеЦифры");
				xmlСерияРимскиеЦифры.Значение	= ВРег(СерияДокумента1);				
				
				xmlСерияРусскиеБуквы			= xmlДокумент.СоздатьПодчиненныйЭлемент("СерияРусскиеБуквы");
				xmlСерияРусскиеБуквы.Значение	= ВРег(СерияДокумента2);					
				
				Если ПустоеЗначение(НомерДокумента) = 0 Тогда
					xmlНомерУдостоверяющего				= xmlДокумент.СоздатьПодчиненныйЭлемент("НомерУдостоверяющего");
					xmlНомерУдостоверяющего.Значение	= СОКРЛП(НомерДокумента);				
				КонецЕсли;
				
				xmlДатаВыдачи			= xmlДокумент.СоздатьПодчиненныйЭлемент("ДатаВыдачи");
				xmlДатаВыдачи.Значение	= СтрЗаменить(ДатаВыдачиДокумента,"/",".");
				
				xmlКемВыдан				= xmlДокумент.СоздатьПодчиненныйЭлемент("КемВыдан");
				xmlКемВыдан.Значение	= ВРег(СОКРЛП(КемВыданДокумент));
				
				хмлДатаЗаполнения	= хмлАНКЕТА_ЗЛ.СоздатьПодчиненныйЭлемент("ДатаЗаполнения");				
				хмлДатаЗаполнения.Значение	= ДатаЗаполнения;									
				
				
			КонецЦикла;						
			
		КонецЕсли;
	КонецЕсли;
	глСтатусСтрока(Контекст,"");	    
	
	Если Хорошо = 1 Тогда
		глЗаписатьXMLФайлПФР(Ктлг + "\" + ИмяФайла,ХМЛФайлДанных);
		Предупреждение("Файл успешно сформирован!", 60);
	Иначе
		Предупреждение("При подготовке сведений были обнаружены ошибки,"+РазделительСтрок+"файл данных для передачи в ПФР не сформирован!", 60)
	КонецЕсли;
	

КонецПроцедуры // НаДискXML

//******************************************************************************
//	НаДискTXT()
//
//	Параметры:
//		нет
// 
// 	Возвращаемое значение:
//		нет
//
//	Описание:
//		Формирование файла по запрошенной пачке документов
//
Процедура НаДискTXT(ПереданныйНомерПачки = "", Показать = 1)
	Перем Категории[12];
	Перем СредняяЧисленность[12];
	Перем ВсегоНачисленоБЛ[12];
	Перем ВсегоНачисленоЗаработка[12];
	Перем ВсегоНачисленоЕСН[12];
	
	ЧислоГод = Число(Год);
	
	Ктлг=СокрЛП(Каталог);
	Если Прав(Ктлг,1)="\" Тогда
		ПутьВывода = Лев(Ктлг,СтрДлина(Ктлг)-1)
	Иначе
		ПутьВывода = Ктлг;
	КонецЕсли;
	Если (Лев(ПутьВывода, 2) <> "\\") и (Найти("A,B",Лев(ПутьВывода,1)) = 0) тогда
		Если ФС.СуществуетФайл(ПутьВывода+"\NUL")=0 Тогда
			Предупреждение("Не возможен вывод файла данных для передачи в ПФР в каталог "+ПутьВывода+"!");
			Возврат;                     
		КонецЕсли;
	КонецЕсли;
	
	Если ПустоеЗначение(ПереданныйНомерПачки) = 1 Тогда  // если  № пачки не был передан
		
		НомерПачки = ВыбратьПачку();
		
		Если НомерПачки = 0 Тогда
			Возврат
		КонецЕсли;   
	Иначе
		НомерПачки = ПереданныйНомерПачки;
	КонецЕсли;
	
	Хорошо = 1;
	КодПериода = 0;
	ИНН=СокрЛП(Константа.ИННОрганизации);
	ОдинадцатыйСимвол=Сред(ИНН,11,1);
	Если (Строка(Число(ОдинадцатыйСимвол))=ОдинадцатыйСимвол) и (ПустаяСтрока(ОдинадцатыйСимвол) = 0) Тогда // оказалось физическое лицо
		Если СтрДлина(ИНН) <> 12 Тогда
			Сообщить("Неверно введен ИНН физического лица-работодателя!");
			Хорошо = 0;
		ИначеЕсли (Строка(Число(СтрЗаменить(ИНН,"0","1")))<>СтрЗаменить(ИНН,"0","1")) Тогда 
			Сообщить("Неверно введен ИНН физического лица-работодателя!");
			Хорошо = 0;
		КонецЕсли;
		ИНН=Лев(ИНН,12);
		КПП = "";
		// Выделим фамилию и имя
		Список = глРазложить(Константа.НазваниеОрганизации," ");
		Фамилия = Список.ПолучитьЗначение(1);
		Имя = "";
		Отчество = "";
		Если Список.РазмерСписка() > 1 Тогда
			Имя  = Список.ПолучитьЗначение(2);   
		КонецЕсли;
		Если Список.РазмерСписка() > 2 Тогда
			Для Сч = 3 По Список.РазмерСписка() Цикл
				Отчество = Отчество+Список.ПолучитьЗначение(Сч);
			КонецЦикла;
		КонецЕсли;
		
		Если глСтрокаНаписанаПоРусски(Константа.НазваниеОрганизации)=0 Тогда
			Сообщить("Имя физического лица-работодателя должно быть введено русскими буквами!");
			Хорошо = 0;
		КонецЕсли;
		Если (ПустаяСтрока(Фамилия)=1) или (ПустаяСтрока(Имя)=1) Тогда
			Сообщить("Должны быть указаны, как минимум, фамилия и имя физического лица-работодателя!");
			Хорошо = 0;
		КонецЕсли;
	Иначе
		Если СтрДлина(ИНН)<10 Тогда
			Сообщить("Неверно задан ИНН источника дохода "+ИНН);
			Хорошо = 0;
		КонецЕсли;
		Если ПустаяСтрока(Константа.НазваниеОрганизации) = 1 Тогда
			Сообщить("Должно быть указано сокращенное наименование организации!");
			Хорошо = 0;
		КонецЕсли;
		ИНН = Лев(Константа.ИННОрганизации,10);
		КПП = Прав(Константа.ИННОрганизации,9);
	КонецЕсли;
	Если ПустоеЗначение(ИНН)=1 Тогда
		ИНН = "0"
	КонецЕсли;
	Если ПустоеЗначение(КПП)=1 Тогда
		КПП = "0"
	КонецЕсли;
	
	Наименование = Константа.НазваниеОрганизации;
	Наименование = ВРег(СокрЛП(Лев(СтрЗаменить(Наименование,"""","'"),100)));
	РегНомерПФР = СокрЛП(глПолучитьНалог("ПФР_страх").РегНомер);
	Если ПустоеЗначение(РегНомерПФР)=1 Тогда
		Сообщить("Должен быть указан регистрационный номер организации в ПФР!");
		Хорошо = 0;
	КонецЕсли;
	ДатаВыдачиСведенияПФР = ДатаФорматаПФР(ДатаВыдачиСведения);
	ОбъектНалогообложенияПоПачке = 0;
	ПоБольничнымПоПачке = 0;
	
	ВыходнойТекст = СоздатьОбъект("Текст");
	ВыходнойТекст.КодоваяСтраница(1);
		//ВЫВОДИМ СТРОКУ В ФАЙЛ
	ВыходнойТекст.ДобавитьСтроку("""ЗГЛВ"",""04.00"",""БУХГАЛТЕРИЯ"",""7.7""");
		//ВЫВОДИМ СТРОКУ В ФАЙЛ
	ВыходнойТекст.ДобавитьСтроку("""РБТД"",""РБТД"","""+РегНомерПФР+""","+СокрЛП(ИНН)+","+СокрЛП(КПП)+","""+Наименование+"""");
	
	НачисленоСтр = 0;
	НачисленоНкп = 0;
	НачисленоДоп = 0;
	
	ТипПачки = Лев(НомерПачки,5);	
		
	Если ТипПачки = "Своды" Тогда
		
		НомерПачки = Число(Сред(НомерПачки,6));
		
		// ИСХД и КОРР
		ТекСтрока = "";
		ТипПачки = "";
		ДопТипПч = "";
		
		НомПачкиВПачке = Пачки.ПолучитьЗначение(НомерПачки,"Номер");
		НомПачкаС = ?(НомПачкиВПачке<100000,глДополнитьСтроку(НомПачкиВПачке,5),Строка(НомПачкиВПачке%100000)); //!!!
		ИмяФайла =ПутьВывода+"\"+Прав(РегНомерПФР,6)+Лев(НомПачкаС,2)+"."+ Прав(НомПачкаС,3);
		
		СохранитьТаблицуПеречислений();
		УстановитьДатыПериодаОтчетности(КодПериода);
		
		ПервыйМесяц = ДатаМесяц(ДатаНачала);
		ПоследнийМесяц = ДатаМесяц(ДатаОкончания);
		МесяцевОтчетногоПериода = ПоследнийМесяц - ПервыйМесяц + 1;
		
		СписокСотров = СоздатьОбъект("СписокЗначений");
		ТекстЗапроса =
		"//{{ЗАПРОС(ПодборСотрудников)
		|Сотрудник = Справочник.Сотрудники.ТекущийЭлемент;
		|Группировка Сотрудник без групп;
		|"//}}ЗАПРОС
		;
		Запрос = СоздатьОбъект("Запрос");
//		глСтатусСтрока(Контекст,"Обрабатывается справочник Сотрудники");
		Если Запрос.Выполнить(ТекстЗапроса)=0 Тогда
			Сообщить("Не удалось обработать справочник Сотрудники");
			Возврат 
		КонецЕсли;
		
		// выгрузим запрос в таблицу, а затем в список
		ВременнаяТаблица = СоздатьОбъект("ТаблицаЗначений");
		Запрос.Выгрузить(ВременнаяТаблица,,0);
		ВременнаяТаблица.Выгрузить(СписокСотров,,,"Сотрудник");
		
		//ДоходыВычетыНалогиСотрудников = "";
		//Если СобратьДанныеДляЕСН(ДоходыВычетыНалогиСотрудников,СписокСотров) = 0 Тогда
		//	Возврат
		//КонецЕсли;
		КолСотр = СписокСотров.РазмерСписка();
		
		ИтоговаяФорма = 0;
		Задолженность = 0;
		
		НачисленоСтр = 0;
		НачисленоНкп = 0;
		НачисленоДоп = 0;
		//Для СчСотров = 1 По КолСотр Цикл
		//	Сотрудник = СписокСотров.ПолучитьЗначение(СчСотров);
		//	СтрокаИтоговойТаблицы = ПоследнийМесяц + 12 * (СчСотров-1);
		//	// здесь определяем взносы в ПФР на страховую часть пенсии
		//	НачисленоСтр = НачисленоСтр + ДоходыВычетыНалогиСотрудников.ПолучитьЗначение(СтрокаИтоговойТаблицы, 2);
		//	
		//	// здесь определяем взносы в ПФР на накопительную часть пенсии
		//	НачисленоНкп = НачисленоНкп + ДоходыВычетыНалогиСотрудников.ПолучитьЗначение(СтрокаИтоговойТаблицы, 3);
		//	
		//КонецЦикла;
		
		Сч69_2_2 = СчетПоКоду("69.2.2");
	
		БухИт = СоздатьОбъект("БухгалтерскиеИтоги");
		БухИт.ИспользоватьСубконто(ВидыСубконто.ВидыПлатежейВБюджет, Перечисление.ВидыПлатежейВБюджет.Налог, 2);
		БухИт.ВыполнитьЗапрос(ДатаНачала, ДатаОкончания, "69.2.2, 69.2.3");
	
		БухИт.ВыбратьСчета();
		Пока БухИт.ПолучитьСчет() = 1 Цикл
		    Если БухИт.Счет = Сч69_2_2 Тогда
		        НачисленоСтр = БухИт.КО();
				
			Иначе
				НачисленоНкп = БухИт.КО();
		    КонецЕсли;
		КонецЦикла;
		
		ГодОтчета = ДатаГод(ДатаОкончания);
		СпрСотр = СоздатьОбъект("Справочник.Сотрудники");
		СпрСотр.ВыбратьЭлементы();
		Пока СпрСотр.ПолучитьЭлемент() = 1 Цикл
		    Если (СпрСотр.ЭтоГруппа() = 0) и (СпрСотр.ПометкаУдаления() = 0) Тогда
				ГодНачалаУчета = ДатаГод(СпрСотр.ДатаПриема);
				Если ГодНачалаУчета = ГодОтчета Тогда
				    НачисленоСтр = НачисленоСтр + СпрСотр.НачисленныйПФР_страх_СНачалаГода;
					НачисленоНкп = НачисленоНкп + СпрСотр.НачисленныйПФР_нак_СНачалаГода;
				КонецЕсли;
		    КонецЕсли;
		КонецЦикла;
		
		НачисленоСтр = Окр(НачисленоСтр);
		НачисленоНкп = Окр(НачисленоНкп);
		НачисленоДоп = Окр(НачисленоДоп);
		
		КодКатегории = КатегорияВсех;
		
		//признак тарифа:
		Признак = ПолучитьПризнакТарифа(Дата("31.12."+Строка(Год)));
		
		//суммы по типам данных:
		НаСтраховуюНИ = 0;
		НаНакопитлнНИ = 0;
		ПоДопТарифуНИ = 0;
		НаСтраховуюН = 0;
		НаНакопитлнН = 0;
		ПоДопТарифуН = 0;	
		НаСтраховуюИ = 0;
		НаНакопитлнИ = 0;
		ПоДопТарифуИ = 0;	
		НаСтраховуюК = 0;
		НаНакопитлнК = 0;
		ПоДопТарифуК = 0;
		
		НачЗадолженностей = 0;
		КонЗадолженностей = 0;
		ИтУплаченных = 0;  
		
		СтрокаЗНЧЛ = "";
		СтрокаУПЛЧ = "";
		СтрокаЗКНЦ = "";
		
		ВремТаблица = СоздатьОбъект("ТаблицаЗначений");;
		ТаблицаПеречислений1.Выгрузить(ВремТаблица);
		ВремТаблица.Сортировать("Год+");
		КолСтрокВТабл = ВремТаблица.КоличествоСтрок();
		Для СчСтрок = 1 По КолСтрокВТабл Цикл
			// получим год
			ТекГод      = ВремТаблица.ПолучитьЗначение(СчСтрок,"Год");
			ТипДанн = ВремТаблица.ПолучитьЗначение(СчСтрок,"ТипДанных");
			
			НаСтраховую = ?(ОкруглятьНачисленное = 1, Окр(ВремТаблица.ПолучитьЗначение(СчСтрок,"Страховых")), ВремТаблица.ПолучитьЗначение(СчСтрок,"Страховых"));
			НаНакопитлн = ?(ОкруглятьНачисленное = 1, Окр(ВремТаблица.ПолучитьЗначение(СчСтрок,"Накопительных")), ВремТаблица.ПолучитьЗначение(СчСтрок,"Накопительных"));
			ПоДопТарифу = ?(ОкруглятьНачисленное = 1, Окр(ВремТаблица.ПолучитьЗначение(СчСтрок,"ДопТариф")), ВремТаблица.ПолучитьЗначение(СчСтрок,"ДопТариф"));	
			
			Если СокрЛП(ТипДанн) = "Hачальная задолженность" Тогда
				НаСтраховуюН = НаСтраховуюН+НаСтраховую;
				НаНакопитлнН = НаНакопитлнН+НаНакопитлн;
				ПоДопТарифуН = ПоДопТарифуН+ПоДопТарифу;
				Если Число(ТекГод) = Число(Год) Тогда
					НаСтраховуюНИ = НаСтраховую;
					НаНакопитлнНИ = НаНакопитлн;
					ПоДопТарифуНИ = ПоДопТарифу;			
				КонецЕсли;
			ИначеЕсли СокрЛП(ТипДанн) = "Ит. уплачено" Тогда
				НаСтраховуюИ = НаСтраховуюИ+НаСтраховую;
				НаНакопитлнИ = НаНакопитлнИ+НаНакопитлн;
				ПоДопТарифуИ = ПоДопТарифуИ+ПоДопТарифу;	
			ИначеЕсли СокрЛП(ТипДанн) = "Конечная задолженность" Тогда
				НаСтраховуюК = НаСтраховуюК+НаСтраховую;
				НаНакопитлнК = НаНакопитлнК+НаНакопитлн;
				ПоДопТарифуК = ПоДопТарифуК+ПоДопТарифу;	
			КонецЕсли;
			СтрокаВфайлСлед = "";
			
			Если СокрЛП(ТипДанн) = "Hачальная задолженность" Тогда
				
				НачЗадолженностей = НачЗадолженностей + 1;
				СтрокаЗНЧЛ = СтрокаЗНЧЛ+ ?(ПустоеЗначение(СтрокаЗНЧЛ)=1,"",РазделительСтрок)+"""ЗНЧЛ"","+ТекГод+","+ЧислоВФайл(НаСтраховую)+","+ЧислоВФайл(НаНакопитлн)+","+ЧислоВФайл(ПоДопТарифу);
			ИначеЕсли СокрЛП(ТипДанн) = "Ит. уплачено" Тогда
				
				ИтУплаченных = ИтУплаченных + 1;
				СтрокаУПЛЧ = СтрокаУПЛЧ+ ?(ПустоеЗначение(СтрокаУПЛЧ)=1,"",РазделительСтрок)+"""УПЛЧ"","+ТекГод+","+ЧислоВФайл(НаСтраховую)+","+ЧислоВФайл(НаНакопитлн)+","+ЧислоВФайл(ПоДопТарифу);
			ИначеЕсли СокрЛП(ТипДанн) = "Конечная задолженность" Тогда
				
				КонЗадолженностей = КонЗадолженностей + 1;
				Если (НаСтраховую <> 0) или (НаНакопитлн <> 0) или (ПоДопТарифу <> 0) Тогда
					СтрокаЗКНЦ = СтрокаЗКНЦ+ ?(ПустоеЗначение(СтрокаЗКНЦ)=1,"",РазделительСтрок)+"""ЗКНЦ"","+ТекГод+","+ЧислоВФайл(НаСтраховую)+","+ЧислоВФайл(НаНакопитлн)+","+ЧислоВФайл(ПоДопТарифу);
				КонецЕсли;					
			КонецЕсли;
			
		КонецЦикла;
		
		НомерПервойПачки = 1;
		ЗастрахованныхЛиц = 0; // эта переменная используется в таблице АДВ-11
		Для СчПачек = -НомерПачки+1 По -1 Цикл
			Если СокрЛП(Пачки.ПолучитьЗначение(-СчПачек,"СтрокСтажаПачки")) = "АДВ-11" Тогда
				НомерПервойПачки = -СчПачек + 1;
				Прервать
			Иначе
				ЗастрахованныхЛиц = ЗастрахованныхЛиц + Пачки.ПолучитьЗначение(-СчПачек,"ТаблицаДокументов").КоличествоСтрок();
			КонецЕсли;
		КонецЦикла;
		КолПачек = НомерПачки - НомерПервойПачки; // эта переменная используется в таблице АДВ-11
		
		//ВЫВОДИМ СТРОКУ В ФАЙЛ
		ВыходнойТекст.ДобавитьСтроку("""ПАЧК"","+Строка(НомПачкиВПачке)+",""ОПИСЬ"",""ОП61"","""+ДатаВыдачиСведенияПФР+""",1,"+Год+","""+КатегорияВсех+""","""","""","""","""",0,0,0,0,0,0,0,0,0");
		//ВЫВОДИМ СТРОКУ В ФАЙЛ
		ВыходнойТекст.ДобавитьСтроку("""ТИПД"",""ВУПЛ"",1");
		
		//строка "заголовочной части" формы АДВ-11
		СтрокаВфайл = """ВУПЛ"",1,"+Год+","""+ДатаФорматаПФР(Мин(Дата("31.12."+Строка(Год)),ДатаВыдачиСведения))+""","+КолПачек+","+ЗастрахованныхЛиц+","""+
		КатегорияВсех+""","+?(НачисленоДоп<>0,"""АВИА""","""""")+","""+Признак+""","+
		ЧислоВФайл(?(ОкруглятьНачисленное = 1, Окр(НачисленоСтр), НачисленоСтр))+","+ЧислоВФайл(?(ОкруглятьНачисленное = 1, Окр(НачисленоНкп), НачисленоНкп))+","+ЧислоВФайл(?(ОкруглятьНачисленное = 1, Окр(НачисленоДоп), НачисленоДоп))+","+
		ЧислоВФайл(НаСтраховуюН)+","+ЧислоВФайл(НаНакопитлнН)+","+ЧислоВФайл(ПоДопТарифуН)+","+
		ЧислоВФайл(НаСтраховуюИ)+","+ЧислоВФайл(НаНакопитлнИ)+","+ЧислоВФайл(ПоДопТарифуИ)+","+
		ЧислоВФайл(НаСтраховуюК+НаСтраховуюНИ)+","+ЧислоВФайл(НаНакопитлнК+НаНакопитлнНИ)+","+ЧислоВФайл(ПоДопТарифуК+ПоДопТарифуНИ)+","""+
		ДатаВыдачиСведенияПФР+""","+НачЗадолженностей+","+ИтУплаченных+","+КонЗадолженностей;
		
		//ВЫВОДИМ СТРОКУ В ФАЙЛ
		ВыходнойТекст.ДобавитьСтроку(ВРег(СтрокаВфайл));
		Если НачЗадолженностей <> 0 Тогда
			ВыходнойТекст.ДобавитьСтроку(ВРег(СтрокаЗНЧЛ));
		КонецЕсли;
		Если ИтУплаченных <> 0 Тогда
			ВыходнойТекст.ДобавитьСтроку(ВРег(СтрокаУПЛЧ));
		КонецЕсли;
		Если КонЗадолженностей <> 0 Тогда
			ВыходнойТекст.ДобавитьСтроку(ВРег(СтрокаЗКНЦ));
		КонецЕсли;                            
		
		//ВЫВОДИМ СТРОКУ В ФАЙЛ
		ВыходнойТекст.ДобавитьСтроку("");
		
		Если Хорошо = 1 Тогда
			ЗаписатьИПоказатьТекст(ВыходнойТекст,ИмяФайла,"Ведомость уплаты страховых взносов на обязательное пенсионное страхование (АДВ-11)"); //; пачка №"+НомерПачки
		Иначе
			Предупреждение("При подготовке сведений были обнаружены ошибки,"+РазделительСтрок+"файл данных для передачи в ПФР не сформирован!")
		КонецЕсли;				;                                                                       
		
		
	ИначеЕсли НомерПачки > 0 Тогда
		
		Сводов = "";
		ДокументыПачки = Пачки.ПолучитьЗначение(НомерПачки,"ТаблицаДокументов");

		ВсегоДокументов = ДокументыПачки.КоличествоСтрок();
		СписокСотров = СоздатьОбъект("СписокЗначений");
		ДокументыПачки.Выгрузить(СписокСотров,,,"Сотрудник");
		
		НомПачкиВПачке = Пачки.ПолучитьЗначение(НомерПачки,"Номер");
		Если СписокСотров.РазмерСписка()=0 Тогда
			Предупреждение("В пачке №"+НомПачкиВПачке+" нет документов!");
			Возврат;
		КонецЕсли;

		// ИСХД и КОРР
		ТекСтрока = "";
		ТипПачки = "";
		ДопТипПч = "";
		
		НомПачкаС = ?(НомПачкиВПачке<100000,глДополнитьСтроку(НомПачкиВПачке,5),Строка(НомПачкиВПачке%100000)); //!!!
		ИмяФайла =ПутьВывода+"\"+Прав(РегНомерПФР,6)+Лев(НомПачкаС,2)+"."+ Прав(НомПачкаС,3);
		
		Если ТипФормируемыхДокументов = 1 Тогда
			Если Пачки.НайтиЗначение(НомерПачки,ТекСтрока,"Номер") = 1 Тогда
				ТипПачки = СокрЛП(Пачки.ПолучитьЗначение(ТекСтрока,"ТипФормыПачки"));
				ДопТипПч = СокрЛП(Пачки.ПолучитьЗначение(ТекСтрока,"ДопТип"));
				Если (ТипПачки = "КОРР") или (ТипПачки = "ОТМН") Тогда  
					ДопТипПч = ТипПачки;
					ТипПачки = "";
				КонецЕсли;
			Иначе
				ТипПачки = "ИСХД";
				ДопТипПч = "";
			КонецЕсли;
			//СЗВ4-1 или 4-2?
			Если ДокументыПачки.ПолучитьЗначение(1,"СтрокСтажа")>1 Тогда
				ИсходнаяТаблица = "СЗВ-4-1";
				//ВЫВОДИМ СТРОКУ В ФАЙЛ
				ВыходнойТекст.ДобавитьСтроку("""ТИПД"",""ИН41"","+ВсегоДокументов);
			Иначе
				ИсходнаяТаблица = "СЗВ-4-2";
				//ВЫВОДИМ СТРОКУ В ФАЙЛ
				ВыходнойТекст.ДобавитьСтроку("""ТИПД"",""ИН42"","+ВсегоДокументов);
			КонецЕсли;
			
			УстановитьДатыПериодаОтчетности(КодПериода);
			
			ДоходыВычетыНалогиСотрудников = "";
			Если СобратьДанныеДляЕСН(ДоходыВычетыНалогиСотрудников,СписокСотров) = 0 Тогда
				Возврат
			КонецЕсли;
			ДоходыСотрудников = "";
			СтажСотрудников = "";
			Если глСобратьДанныеДляСЗВ2002(ДоходыСотрудников,СтажСотрудников,СписокСотров,ДатаПо,ДоходыВычетыНалогиСотрудников,Контекст) = 0 Тогда
				Возврат 
			КонецЕсли;
			
			ПервыйМесяц = ДатаМесяц(ДатаНачала);
			ПоследнийМесяц = ДатаМесяц(ДатаОкончания);
			
			ДокументыПачки.ВыбратьСтроки();
			Для СчДокументов = 1 По ВсегоДокументов Цикл
				
				//СЗВ4-1 или 4-2?
				Если ИсходнаяТаблица = "СЗВ-4-1" Тогда
					ДобавлСтр = """ИН41"",";
				Иначе
					ДобавлСтр = """ИН42"",";
				КонецЕсли;
				ДобавлСтр = ДобавлСтр+СчДокументов;
				
				ДокументыПачки.ПолучитьСтроку();
				Сотрудник = ДокументыПачки.Сотрудник;
				ТипФормы = ДокументыПачки.ТипФормы;
				ПередаватьАдрес=ДокументыПачки.ПередаватьАдрес;
				Если ИсходнаяТаблица = "СЗВ-4-2" Тогда
					ТУвПачке = ДокументыПачки.ТУвПачке;
				Иначе
					ТУвПачке = ""
				КонецЕсли;
				
//				глСтатусСтрока(Контекст,"Выводится в отчет ("+Окр(СчДокументов/ВсегоДокументов*100)+"%): "+Сотрудник.Наименование);
				
				Фамилия = ""; Имя = ""; Отчество = "";
				ФИО = глФамилияИмяОтчество(Сотрудник,Фамилия,Имя,Отчество);
				СтраховойНомерПФР = Сотрудник.СтраховойНомерПФР;
				Если глПроверкаСтраховогоНомера(СтраховойНомерПФР) = 0 Тогда
					Сообщить("Страховой номер работника "+ФИО+" указан неверно","!");
					Хорошо = 0;                                                                       
				КонецЕсли;
				
				НалогооблагаемыйДоход = 0;
				НачисленоЕСНвЧастиПФР = 0;
				
				НомерСтроки = "";
				Если ДоходыСотрудников.НайтиЗначение(Сотрудник,НомерСтроки,"Сотрудник") = 1 Тогда
					ДопТариф = ДоходыСотрудников.ПолучитьЗначение(НомерСтроки,"ВзносовДоп");
					
					ДнейБолел = ДоходыСотрудников.ПолучитьЗначение(НомерСтроки,"ДнейБолезн");
					ДнейБолел1 = Цел(ДнейБолел/30);
					ДнейБолел2 = ДнейБолел - ДнейБолел1*30;
					
					ДнейГулял = ДоходыСотрудников.ПолучитьЗначение(НомерСтроки,"ДнейОтпСвСч");
					ДнейГулял1 = Цел(ДнейГулял/30);
					ДнейГулял2 = ДнейГулял - ДнейГулял1*30;
				Иначе
					ДопТариф = 0;
					ДнейБолел1 = 0;
					ДнейБолел2 = 0;
					ДнейГулял1 = 0;
					ДнейГулял2 = 0;
				КонецЕсли;
				
				Если ДопТипПч <> "ОТМН" Тогда
					СтрокаИтоговойТаблицы=""; 
					ДоходыВычетыНалогиСотрудников.НайтиЗначение(глПолучитьУникальныйКодСотрудника(Сотрудник)+глДополнитьСтроку(ПоследнийМесяц,2),СтрокаИтоговойТаблицы,1);     
					
					// доходы по ст. 236 НК РФ
					НачисленоЕСНвЧастиСтр = ДоходыВычетыНалогиСотрудников.ПолучитьЗначение(СтрокаИтоговойТаблицы, 2); // здесь выводим страх взносы в ПФР
					НачисленоСтр = НачисленоСтр + НачисленоЕСНвЧастиСтр;
						
					НачисленоЕСНвЧастиНкп = ДоходыВычетыНалогиСотрудников.ПолучитьЗначение(СтрокаИтоговойТаблицы, 3); // здесь выводим накоп взносы в ПФР
					НачисленоНкп = НачисленоНкп + НачисленоЕСНвЧастиНкп;
						
					НачисленоДоп = НачисленоДоп + ДопТариф;

				Иначе
					НачисленоЕСНвЧастиСтр = 0;
					НачисленоЕСНвЧастиНкп = 0;
					ДопТариф = 0;
				КонецЕсли;
					
				Ключ = ПолучитьКлюч(Сотрудник);
				
				НомерСтроки = "";
				СтажСотрудников.НайтиЗначение(Сотрудник,НомерСтроки,"Сотрудник");
				СтрокСтажа = 0;
				Если НомерСтроки <> 0 Тогда
					ТекущийСписокСтажа = СтажСотрудников.ПолучитьЗначение(НомерСтроки,"ТаблицаЗаписейОСтаже");
					СтрокСтажа = ТекущийСписокСтажа.КоличествоСтрок();
				КонецЕсли;
				
				Если (СтрокСтажа = 0) и (НачисленоЕСНвЧастиСтр = 0) и (НачисленоЕСНвЧастиНкп = 0) и (ДопТипПч <> "ОТМН") Тогда  // нет ни доходов, ни стажа - в файл писать не будем
					Сообщить("Данных по работнику "+ФИО+ " (т.н. "+Сотрудник.Код+") не обнаружено! Удалите его из списка передаваемых документов.","!");
					Хорошо = 0;
					Продолжить
				КонецЕсли;
				
				ПропискаАдрес = Сотрудник.АдресПрописка;
				ФактическийАдрес = Сотрудник.АдресФакт;
				Адрес = ПропискаАдрес;
				Если ПередаватьАдрес=1 Тогда
					Если (ПустоеЗначение(СтрЗаменить(ФактическийАдрес,",",""))=0) и (ФактическийАдрес<>ПропискаАдрес) Тогда
						Адрес = ФактическийАдрес;
						Если глАдресСоответствуетТребованиямМНС(ФактическийАдрес) = 0 Тогда
							Сообщить("Фактический адрес работника "+ФИО+" (т.н. "+Сотрудник.Код+") не соответствует требованиям ПФР","!");
							Хорошо = 0;                                                                       
						КонецЕсли;
					Иначе
						Если глАдресСоответствуетТребованиямМНС(ПропискаАдрес) = 0 Тогда
							Сообщить("Адрес прописки работника "+ФИО+" (т.н. "+Сотрудник.Код+") не соответствует требованиям ПФР","!");
							Хорошо = 0;                                                                       
						КонецЕсли;
					КонецЕсли;
				Иначе
					Адрес = "";
				КонецЕсли;
				
				Если ДопТипПч = "ОТМН" Тогда
					ДобавлСтр = ДобавлСтр+","""+СтраховойНомерПФР+""","""
					+Фамилия+""","""+Имя+""","""+Отчество+""","+Год+","""+СокрЛП(Адрес)+""",0,0,0,";
				Иначе	
					ДобавлСтр = ДобавлСтр+","""+СтраховойНомерПФР+""","""
					+Фамилия+""","""+Имя+""","""+Отчество+""","+Год+","""+СокрЛП(Адрес)+""","+
					ЧислоВФайл(НачисленоЕСНвЧастиСтр)+","+ ЧислоВФайл(НачисленоЕСНвЧастиНкп)+","+
					ЧислоВФайл(ДопТариф)+",";
				КонецЕсли;
				
				Если ИсходнаяТаблица <> "СЗВ-4-2" Тогда 
					Если ДопТипПч = "ОТМН" Тогда
						ДобавлСтр = ДобавлСтр+ "0,0,0,0";
					Иначе	
						ДобавлСтр = ДобавлСтр+ ДнейБолел1+","+ДнейБолел2+","+ДнейГулял1+","+ДнейГулял2;
					КонецЕсли;
					//ВЫВОДИМ СТРОКУ В ФАЙЛ и запоминаем ее номер
					ВыходнойТекст.ДобавитьСтроку("");
					НомерСтроки41 = ВыходнойТекст.КоличествоСтрок();
				КонецЕсли;
			
				НомерСтроки = "";
				ТекущийСписокСтажа = "";
				Если СтажСотрудников.НайтиЗначение(Сотрудник,НомерСтроки,"Сотрудник") = 1 Тогда
					ТекущийСписокСтажа = СтажСотрудников.ПолучитьЗначение(НомерСтроки,"ТаблицаЗаписейОСтаже");
				КонецЕсли;
				
				Если ТипЗначения(ТекущийСписокСтажа) <> 100 Тогда
					ТекущийСписокСтажа  = СоздатьОбъект("ТаблицаЗначений");
					ТекущийСписокСтажа.НоваяКолонка("ТипЗаписи","Строка",14,,,,,);
					ТекущийСписокСтажа.НоваяКолонка("НомерЗаписи","Число",2,0,,,,);
					ТекущийСписокСтажа.НоваяКолонка("Начало","Дата",,,,,,);
					ТекущийСписокСтажа.НоваяКолонка("Окончание","Дата",,,,,,);
					ТекущийСписокСтажа.НоваяКолонка("ТерриториальныеУсловия","Перечисление.ТерриториальныеУсловия",,,,,,);
					ТекущийСписокСтажа.НоваяКолонка("СЗВОсобыеУсловияТруда","Перечисление.СЗВОсобыеУсловияТруда",,,,,,);
					ТекущийСписокСтажа.НоваяКолонка("СЗВОснованияИТС","Перечисление.СЗВОснованияИТС",,,,,,);
					ТекущийСписокСтажа.НоваяКолонка("СЗВПараметр1ИТС","Число",5,0,,,,);
					ТекущийСписокСтажа.НоваяКолонка("СЗВПараметр2ИТС","Число",2,0,,,,);
					ТекущийСписокСтажа.НоваяКолонка("СЗВПараметр3ИТС","Перечисление.СЗВПараметр3ИТС",,,,,,);
					ТекущийСписокСтажа.НоваяКолонка("СЗВОснованияВыслугиЛет","Перечисление.СЗВОснованияВыслугиЛет",,,,,,);
					ТекущийСписокСтажа.НоваяКолонка("СЗВПараметр1ВыслугиЛет","Число",5,0,,,,);
					ТекущийСписокСтажа.НоваяКолонка("СЗВПараметр2ВыслугиЛет","Число",4,0,,,,);
					ТекущийСписокСтажа.НоваяКолонка("СЗВПараметр3ВыслугиЛет","Число",8,2,,,,);
					ТекущийСписокСтажа.НоваяКолонка("РК","Число",4,2,,,,);
					ТекущийСписокСтажа.НоваяКолонка("КПС","Строка",20,,,,,);
				КонецЕсли;
				
				НомПериод=""; НачПериод=""; КонПериод=""; ТУ=""; УТ=""; ОснованиеИТС="";
				ДопИТС=""; ОснованиеВыслуги="";  ДопВЛ=""; КодПрофессии="";
				ПервПарам=""; ВторПарам=""; ТретПарам=""; ПервПарамВ=""; ВторПарамВ=""; ТретПарамВ="";
				СтрокаСоСтажемОснЗап = ""; СтрокаСоСтажемОснЗапНов = "";
				
				Если ДопТипПч = "ОТМН" Тогда
					ТекущийСписокСтажа.УдалитьСтроки();
				КонецЕсли;
				
				КолОснЗаписей = 0;
				КолДопЗаписей = 0;
				
				СноваОсновнаяЗапись = 0;//для идентификации факта ввода основной записи
				СтрокиДопСтажаВФайл = СоздатьОбъект("СписокЗначений");
				
				Если ДопТипПч <> "ОТМН" Тогда
					Для НомерСтрокиТаблицыСтажа = 1 По ТекущийСписокСтажа.КоличествоСтрок() Цикл
						
						ВидСтроки= СокрЛП(ТекущийСписокСтажа.ПолучитьЗначение(НомерСтрокиТаблицыСтажа,"ТипЗаписи"));
	
						Если ПустоеЗначение(ВидСтроки)=0  Тогда // обнаружено описание заполненной строки  
							
							ТУ=ТекущийСписокСтажа.ПолучитьЗначение(НомерСтрокиТаблицыСтажа,"ТерриториальныеУсловия");
							УТ=ТекущийСписокСтажа.ПолучитьЗначение(НомерСтрокиТаблицыСтажа,"СЗВОсобыеУсловияТруда");
							
							ОснованиеИТС=ТекущийСписокСтажа.ПолучитьЗначение(НомерСтрокиТаблицыСтажа,"СЗВОснованияИТС");
							
							ПервПарам = ТекущийСписокСтажа.ПолучитьЗначение(НомерСтрокиТаблицыСтажа,"СЗВПараметр1ИТС");
							ВторПарам = ТекущийСписокСтажа.ПолучитьЗначение(НомерСтрокиТаблицыСтажа,"СЗВПараметр2ИТС");
							ТретПарам =	ТекущийСписокСтажа.ПолучитьЗначение(НомерСтрокиТаблицыСтажа,"СЗВПараметр3ИТС");
										
							ОснованиеВыслуги=ТекущийСписокСтажа.ПолучитьЗначение(НомерСтрокиТаблицыСтажа,"СЗВОснованияВыслугиЛет");
							
							ПервПарамВ = ТекущийСписокСтажа.ПолучитьЗначение(НомерСтрокиТаблицыСтажа,"СЗВПараметр1ВыслугиЛет");
							ВторПарамВ = ТекущийСписокСтажа.ПолучитьЗначение(НомерСтрокиТаблицыСтажа,"СЗВПараметр2ВыслугиЛет");
							ТретПарамВ = ТекущийСписокСтажа.ПолучитьЗначение(НомерСтрокиТаблицыСтажа,"СЗВПараметр3ВыслугиЛет");
	
							КодПрофессии=СокрЛП(ТекущийСписокСтажа.ПолучитьЗначение(НомерСтрокиТаблицыСтажа,"КПС"));
							
							Если ВидСтроки = "Основная"  Тогда //новая основная запись
	
								НомПериод=ТекущийСписокСтажа.ПолучитьЗначение(НомерСтрокиТаблицыСтажа,"НомерЗаписи");
								НачПериод=ДатаФорматаПФР(ТекущийСписокСтажа.ПолучитьЗначение(НомерСтрокиТаблицыСтажа,"Начало"));
								КонПериод=ДатаФорматаПФР(ТекущийСписокСтажа.ПолучитьЗначение(НомерСтрокиТаблицыСтажа,"Окончание"));
	 
								СтрокаСоСтажемОснЗап = СтрокаСоСтажемОснЗапНов;
								Если (СноваОсновнаяЗапись = 1) или (КолДопЗаписей > 0) Тогда
										
									СтрокаСоСтажемОснЗап = СтрокаСоСтажемОснЗап + КолДопЗаписей;
									
									Если ИсходнаяТаблица <> "СЗВ-4-2" Тогда
										//ВЫВОДИМ СТРОКУ В ФАЙЛ
										ВыходнойТекст.ДобавитьСтроку(ВРег(СтрокаСоСтажемОснЗап));
										// и сразу выведем доп записи если они были:
										Если КолДопЗаписей > 0 Тогда
											Для СчДопЗаписей = 1 По КолДопЗаписей Цикл
												СтрокаСоСтажем = СтрокиДопСтажаВФайл.ПолучитьЗначение(СчДопЗаписей);
												//ВЫВОДИМ СТРОКУ В ФАЙЛ
												ВыходнойТекст.ДобавитьСтроку(ВРег(СтрокаСоСтажем));
											КонецЦикла;
											
											КолДопЗаписей = 0;
											СтрокиДопСтажаВФайл.УдалитьВсе();//список доп записей начнем формировать заново
										КонецЕсли;
									КонецЕсли;
										
								КонецЕсли;
	
								СноваОсновнаяЗапись = 1;//для идентификации факта ввода основной записи
	
								КолОснЗаписей = КолОснЗаписей + 1;
								
								СтрокаСоСтажемОснЗапНов = """СТАЖ"","+
													КолОснЗаписей+","""+
													НачПериод+""","""+
													КонПериод+""","""+ 
													УТ+""","""+
													КодПрофессии+""","""+
													ОснованиеИТС+""","+
													ПервПарам+","+
													ВторПарам+","""+
													ТретПарам+""","""+
													ОснованиеВыслуги+""","+
													ПервПарамВ+","+
													ВторПарамВ+","+
													Формат(ТретПарамВ,"Ч4.2.")+","""+
													ТУ+""",0.00,";
	
							Иначе  // в дополнительной строке номер и даты периода не указываются
								
								СноваОсновнаяЗапись = 0;//для идентификации факта ввода основной записи
								
								НомПериод="";
								НачПериод="";
								КонПериод="";
								
								КолДопЗаписей = КолДопЗаписей + 1;
								
								СтрокаСоСтажем = """ЛГОТ"","+
													КолДопЗаписей+","""+
													УТ+""","""+
													КодПрофессии+""","""+
													ОснованиеИТС+""","+
													ПервПарам+","+
													ВторПарам+","""+
													ТретПарам+""","""+
													ОснованиеВыслуги+""","+
													ПервПарамВ+","+
													ВторПарамВ+","+
													Формат(ТретПарамВ,"Ч4.2.")+","""+
													ТУ+""",0.00";
								//добавим эту строку в список доп строк стажа:
								СтрокиДопСтажаВФайл.ДобавитьЗначение(СтрокаСоСтажем);
							КонецЕсли;
							
							СтрокаСоСтажемОснЗап = СтрокаСоСтажемОснЗапНов;
							
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
				
				Если ИсходнаяТаблица = "СЗВ-4-2" Тогда
					Если ДопТипПч = "ОТМН" Тогда
						ДобавлСтр = ДобавлСтр+""""","""",0,0,0,0,"""+ДатаВыдачиСведенияПФР+"""";
					Иначе	
						ДобавлСтр = ДобавлСтр+""""+НачПериод+""","""+КонПериод+""","+
						ДнейБолел1+","+ДнейБолел2+","+ДнейГулял1+","+ДнейГулял2+","""+ДатаВыдачиСведенияПФР+"""";
					КонецЕсли;
					//ВЫВОДИМ СТРОКУ В ФАЙЛ
					ВыходнойТекст.ДобавитьСтроку(ВРег(ДобавлСтр));
				Иначе
					Если ((СноваОсновнаяЗапись = 1) или (КолДопЗаписей > 0))Тогда
						
						СтрокаСоСтажемОснЗап = СтрокаСоСтажемОснЗап + КолДопЗаписей;
						
						//ВЫВОДИМ СТРОКУ В ФАЙЛ
						ВыходнойТекст.ДобавитьСтроку(ВРег(СтрокаСоСтажемОснЗап));
						// и сразу выведем доп записи если они были:
						Если КолДопЗаписей > 0 Тогда
							Для СчДопЗаписей = 1 По КолДопЗаписей Цикл
								СтрокаСоСтажем = СтрокиДопСтажаВФайл.ПолучитьЗначение(СчДопЗаписей);
								//ВЫВОДИМ СТРОКУ В ФАЙЛ
								ВыходнойТекст.ДобавитьСтроку(ВРег(СтрокаСоСтажем));
							КонецЦикла;
							
							КолДопЗаписей = 0;
							СтрокиДопСтажаВФайл.УдалитьВсе();//список доп записей начнем формировать заново
						КонецЕсли;
						
					КонецЕсли;
				
					ДобавлСтр = ДобавлСтр + ","""+ДатаВыдачиСведенияПФР+""","+ КолОснЗаписей;
					//ВЫВОДИМ СТРОКУ В ФАЙЛ 
					ВыходнойТекст.ЗаменитьСтроку(НомерСтроки41,ВРег(ДобавлСтр));
				КонецЕсли;
				
			КонецЦикла; // обхода документов в пачке 
			
			Если ДопТипПч = "ОТМН" Тогда
				НачисленоСтр = 0;
				НачисленоНкп = 0;
				НачисленоДоп = 0; 
			Иначе	
				НачисленоСтр = Окр(НачисленоСтр);
				НачисленоНкп = Окр(НачисленоНкп);
				НачисленоДоп = Окр(НачисленоДоп); 
			КонецЕсли;
		
			// ставим строку записи о пачке
			Если ИсходнаяТаблица = "СЗВ-4-1" Тогда
				//ВЫВОДИМ СТРОКУ В ФАЙЛ
				ВыходнойТекст.ВставитьСтроку(3,"""ПАЧК"","+Строка(НомПачкиВПачке)+",""ОПИСЬ"",""ОП61"","""+ДатаВыдачиСведенияПФР+""",1,"+Год+","""+КатегорияВсех+""","""","""","""+ТипПачки+""","""+ДопТипПч+""",0,0,0,0,"+ЧислоВФайл(НачисленоСтр)+","+ЧислоВФайл(НачисленоНкп)+","+ЧислоВФайл(НачисленоДоп)+",0,0");
			Иначе
				//ВЫВОДИМ СТРОКУ В ФАЙЛ
				ВыходнойТекст.ВставитьСтроку(3,"""ПАЧК"","+Строка(НомПачкиВПачке)+",""ОПИСЬ"",""ОП61"","""+ДатаВыдачиСведенияПФР+""",1,"+Год+","""+КатегорияВсех+""","""","""+СокрЛП(ТУвПачке)+""","""+ТипПачки+""","""+ДопТипПч+""",0,0,0,0,"+ЧислоВФайл(НачисленоСтр)+","+ЧислоВФайл(НачисленоНкп)+","+ЧислоВФайл(НачисленоДоп)+",0,0");
			КонецЕсли;
			
			//ВЫВОДИМ СТРОКУ В ФАЙЛ
			ВыходнойТекст.ДобавитьСтроку("");
			
			Если Хорошо = 1 Тогда
				ЗаписатьИПоказатьТекст(ВыходнойТекст,ИмяФайла,"Индивидуальные сведения (СЗВ-4); пачка №"+НомПачкиВПачке);
			Иначе
				Предупреждение("При подготовке сведений были обнаружены ошибки,"+РазделительСтрок+"файл данных для передачи в ПФР не сформирован!")
			КонецЕсли;				;                                                                       
			
		Иначе
			
			//ВЫВОДИМ СТРОКУ В ФАЙЛ
			ВыходнойТекст.ДобавитьСтроку("""ПАЧК"","+Строка(НомПачкиВПачке)+",""ОПИСЬ"",""ОП61"","""+ДатаВыдачиСведенияПФР+""",1,0,"""","""","""","""","""",0,0,0,0,0,0,0,0,0");
			//ВЫВОДИМ СТРОКУ В ФАЙЛ
			ВыходнойТекст.ДобавитьСтроку("""ТИПД"",""АНКТ"","+ВсегоДокументов);
			
			ДокументыПачки.ВыбратьСтроки();
			Для СчДокументов = 1 По ВсегоДокументов Цикл
				ДокументыПачки.ПолучитьСтроку();
				Сотрудник = ДокументыПачки.Сотрудник;
				ФИО = СокрЛП(Сотрудник.Наименование);
				Фамилия = ""; Имя = ""; Отчество = "";
				глФамилияИмяОтчество(Сотрудник,Фамилия,Имя,Отчество);
				Пол = Сотрудник.Пол;
				ДатаРождения = ДатаФорматаПФР(Сотрудник.ДатаРождения);
				ТипМестаРождения = 0; Город = ""; Район = ""; Область = ""; Страна = "";
				СпМестоРождения = глРазложить(Сотрудник.МестоРождения);
				Если СпМестоРождения.РазмерСписка() > 4 Тогда
					ТипМестаРождения = Число(СпМестоРождения.ПолучитьЗначение(1));
					Город	= СокрЛП(СпМестоРождения.ПолучитьЗначение(2));
					Район	= СокрЛП(СпМестоРождения.ПолучитьЗначение(3));
					Область	= СокрЛП(СпМестоРождения.ПолучитьЗначение(4));
					Страна	= СокрЛП(СпМестоРождения.ПолучитьЗначение(5));
				КонецЕсли;
				НомерДокумента = ""; СерияДокумента1 = ""; СерияДокумента2 = "";
				ВидДокумента = "";
				ДатаВыдачиДокумента = "";
				КемВыданДокумент = "";
				
				Вид = Сотрудник.ВидДокумента;
				ВидДокумента = Вид.КодСЗВ;
				КодДока = Вид.КодНДФЛ;
				СерияДокумента = СокрЛП(Сотрудник.ДокументСерия);
				НаименованиеДокумента = СокрЛП(Вид);
				Если Найти(",01,03,",","+КодДока+",")>0  Тогда
					РазделительСерии="-"
				ИначеЕсли КодДока="21"  Тогда
					РазделительСерии=" "     
				Иначе	
					РазделительСерии="???"     
				КонецЕсли;
				Тире = Найти (СерияДокумента,РазделительСерии);
				//СерияДокумента1: паспорт СССР, свид о рожд - римские цифры, остальные - остаются как есть (арабские)
				//СерияДокумента2: м.б. буквы, м.б.обычные цифры
				Если (НаименованиеДокумента="Свидетельство о рождении")или(НаименованиеДокумента="Паспорт гражданина СССР") Тогда
					СерияДокумента1 = ?(Тире = 0,СерияДокумента,глЗаменитьОдниСимволыДругими("1УХЛС",СокрЛП(Лев(СерияДокумента,Тире-1)),"IVXLC"));
				Иначе 
					СерияДокумента1 = ?(Тире = 0,СерияДокумента,СокрЛП(Лев(СерияДокумента,Тире-1)));
				КонецЕсли;
				СерияДокумента2 = ?(Тире = 0,"", СокрЛП(Сред(СерияДокумента,Тире+1)));
				НомерДокумента = СокрЛП(Сотрудник.ДокументНомер);
				ДатаВыдачиДокумента = ДатаФорматаПФР(Сотрудник.ДокументДатаВыдачи);
				КемВыданДокумент = Сотрудник.ДокументКемВыдан;
				Если ПустаяСтрока(КодДока)=1 Тогда
					Сообщить(ФИО+"(т.н. "+Сотрудник.Код+"): "+"Не задан документ, удостоверяющий личность");
					Хорошо = 0;	
				КонецЕсли;
				Если ПустаяСтрока(СерияДокумента+НомерДокумента)=1 Тогда
					Сообщить(ФИО+"(т.н. "+Сотрудник.Код+"): "+"Не заданы номер и серия документа, удостоверяющего личность");
					Хорошо = 0;
				ИначеЕсли ПустаяСтрока(КодДока)=0 Тогда
					Если (глПроверкаСерииУдостоверенияЛичности(КодДока,СерияДокумента,0)=0) Тогда
						Сообщить(ФИО+"(т.н. "+Сотрудник.Код+"): "+"Неверно указана серия документа, удостоверяющего личность");
						Хорошо = 0;
					КонецЕсли;
					Если (глПроверкаНомераУдостоверенияЛичности(КодДока,НомерДокумента,0)=0) Тогда
						Сообщить(ФИО+"(т.н. "+Сотрудник.Код+"): "+"Неверно указан номер документа, удостоверяющего личность");
						Хорошо = 0;
					КонецЕсли;
				КонецЕсли;
				
				Телефон = СокрЛП(Сотрудник.Телефон);
				ПропискаАдрес = Сотрудник.АдресПрописка;
				Если глАдресСоответствуетТребованиямМНС(ПропискаАдрес) = 0 Тогда
					Сообщить("Адрес прописки работника "+ФИО+" (т.н. "+Сотрудник.Код+") не соответствует требованиям ПФР","!");
					Хорошо = 0;                                                                       
				КонецЕсли;
				ФактическийАдрес = ?(ПустоеЗначение(СтрЗаменить(Сотрудник.АдресФакт,",","")) = 1,"",Сотрудник.АдресФакт);
				Если ПустоеЗначение(ФактическийАдрес) = 0 Тогда
					Если глАдресСоответствуетТребованиямМНС(ФактическийАдрес) = 0 Тогда
						Сообщить("Фактический адрес работника "+ФИО+" (т.н. "+Сотрудник.Код+") не соответствует требованиям ПФР","!");
						Хорошо = 0;                                                                       
					КонецЕсли;
				КонецЕсли;
				
				
				НомерДокумента = СокрЛП(НомерДокумента);
				ДлинаНомераДокумента = СтрДлина(НомерДокумента);
				НомерДокумента = ?(ДлинаНомераДокумента=0,0,НомерДокумента);
				Если ДлинаНомераДокумента > 8 Тогда //по правилам ПФР длина номера документа, удост. личность, не может быть больше 8 символов
						Сообщить("Количество цифр в номере документа, удостоверяющего личность работника
						| "+ФИО+" (т.н. "+Сотрудник.Код+"), больше восьми - это не соответствует требованиям ПФР","!");
						Хорошо = 0;                                                                       
				КонецЕсли;
				
				Если Пол.Выбран()=1 Тогда
					ПредставлениеПола=?(Пол = Перечисление.Пол.Мужской,"М","Ж");
				КонецЕсли;
				
				// гражданство возьмем из страны ПМЖ
				СтранаПМЖ = Сотрудник.Страна;
				Гражданство = ?((СтранаПМЖ.Выбран()=0) или (СтранаПМЖ.Код="643"),"",СтранаПМЖ.Наименование);

				СтрокаВфайл = """АНКТ"","+СчДокументов+","""+ДатаВыдачиСведенияПФР+""","""+ПреобразованнаяСтрока(Фамилия)+""","""+ПреобразованнаяСтрока(Имя)+""","""+ПреобразованнаяСтрока(Отчество)+""","""+ПредставлениеПола+""",""СТАНДАРТ"","""+ДатаРождения+""",0,0,0,"
							+?(ТипМестаРождения=0,"""СТАНДАРТ"",""","""ОСОБОЕ"",""")+ПреобразованнаяСтрока(Город)+""","""+ПреобразованнаяСтрока(Район)+""","""+ПреобразованнаяСтрока(Область)+""","""+ПреобразованнаяСтрока(Страна)+""","""+Гражданство+""","""
							+?(Вид.Выбран()=1,ПреобразованнаяСтрока(ВидДокумента)+""","""+ПреобразованнаяСтрока(ВидДокумента),"ПРОЧЕЕ"","""+ПреобразованнаяСтрока(НаименованиеДокумента))
							+""","""+ПреобразованнаяСтрока(СерияДокумента1)+""","""+ПреобразованнаяСтрока(СерияДокумента2)+""","+ПреобразованнаяСтрока(НомерДокумента)+","""+ДатаВыдачиДокумента+""","""+ПреобразованнаяСтрока(КемВыданДокумент)
							+""","""+ПреобразованнаяСтрока(ПропискаАдрес)+""","""+ПреобразованнаяСтрока(ФактическийАдрес)+""","""+ПреобразованнаяСтрока(Телефон)+"""";
				
				//ВЫВОДИМ СТРОКУ В ФАЙЛ
				ВыходнойТекст.ДобавитьСтроку(ВРег(СтрокаВфайл));
				
			КонецЦикла;
			
			//ВЫВОДИМ СТРОКУ В ФАЙЛ
			ВыходнойТекст.ДобавитьСтроку("");
			
			Если Хорошо = 1 Тогда
				ЗаписатьИПоказатьТекст(ВыходнойТекст,ИмяФайла,"Анкеты (АДВ-1); пачка №"+НомПачкиВПачке, Показать);
			Иначе
				Предупреждение("При подготовке сведений были обнаружены ошибки,"+РазделительСтрок+"файл данных для передачи в ПФР не сформирован!")
			КонецЕсли;				;                                                                       
			
		КонецЕсли;
	КонецЕсли;
//	глСтатусСтрока(Контекст,"");
	
КонецПроцедуры // НаДискTXT

//*****************************************************************************
Процедура НаДиск(ПереданныйНомерПачки = "", Показать = 1)

	ФорматДанных = СОКРЛП(Форматы.ПолучитьЗначение(Форматы.ТекущаяСтрока()));
	
	Если ФорматДанных = "4.00" Тогда
		НаДискTXT(ПереданныйНомерПачки, Показать);
	ИначеЕсли ФорматДанных = "7.00" Тогда
		НаДискXML(ПереданныйНомерПачки, Показать);
	КонецЕсли;
	
КонецПроцедуры //НаДиск

//*****************************************************************************
// Процедура СохранитьТаблицуПеречислений()
//
// Параметры
//
// Возвращаемое значение
//  нет
//
// Описание
//
Процедура СохранитьТаблицуПеречислений()
	
	КоличествоСтрок = ТаблицаПеречислений1.КоличествоСтрок();
	СохранитьЗначение("КоличествоСтрок"+ПрошлыйГод,КоличествоСтрок);
	
	СписокЧисел=СоздатьОбъект("СписокЗначений");
	Для Сч = 1 По КоличествоСтрок Цикл
		СписокЧисел.ДобавитьЗначение(ТаблицаПеречислений1.ПолучитьЗначение(Сч, "ТипДанных"))	
	КонецЦикла;
	СохранитьЗначение("ТипДанных"+ПрошлыйГод,СписокЧисел);
	
	СписокЧисел=СоздатьОбъект("СписокЗначений");
	Для Сч = 1 По КоличествоСтрок Цикл
		СписокЧисел.ДобавитьЗначение(ТаблицаПеречислений1.ПолучитьЗначение(Сч, "Год"))	
	КонецЦикла;
	СохранитьЗначение("Год"+ПрошлыйГод,СписокЧисел); 
	
	СписокЧисел=СоздатьОбъект("СписокЗначений");
	Для Сч = 1 По КоличествоСтрок Цикл
		СписокЧисел.ДобавитьЗначение(ТаблицаПеречислений1.ПолучитьЗначение(Сч, "Страховых"))	
	КонецЦикла;
	СохранитьЗначение("Страховых"+ПрошлыйГод,СписокЧисел);
	
	СписокЧисел=СоздатьОбъект("СписокЗначений");
	Для Сч = 1 По КоличествоСтрок Цикл
		СписокЧисел.ДобавитьЗначение(ТаблицаПеречислений1.ПолучитьЗначение(Сч, "Накопительных"))	
	КонецЦикла;
	СохранитьЗначение("Накопительных"+ПрошлыйГод,СписокЧисел);
	
	СписокЧисел=СоздатьОбъект("СписокЗначений");
	Для Сч = 1 По КоличествоСтрок Цикл
		СписокЧисел.ДобавитьЗначение(ТаблицаПеречислений1.ПолучитьЗначение(Сч, "ДопТариф"))	
	КонецЦикла;
	СохранитьЗначение("ДопТариф"+ПрошлыйГод,СписокЧисел);

КонецПроцедуры //СохранитьТаблицуПеречислений

//*****************************************************************************
// Процедура ВосстановитьТаблицуПеречислений()
//
// Параметры
//
// Возвращаемое значение
//  нет
//
// Описание
//
Процедура ВосстановитьТаблицуПеречислений()
	
	КоличествоСтрок=ВосстановитьЗначение("КоличествоСтрок"+Год);
	Если ТипЗначения(КоличествоСтрок)=1 Тогда
		Для Сч = 1 По КоличествоСтрок Цикл
			ТаблицаПеречислений1.НоваяСтрока();	
		КонецЦикла;
	КонецЕсли;
	
	СписокЧисел=ВосстановитьЗначение("ТипДанных"+Год);
	Если ТипЗначения(СписокЧисел)=100 Тогда
		Для Сч = 1 По КоличествоСтрок Цикл
			ТаблицаПеречислений1.УстановитьЗначение(Сч,"ТипДанных",СписокЧисел.ПолучитьЗначение(Сч));	
		КонецЦикла;
	КонецЕсли;
	СписокЧисел=ВосстановитьЗначение("Год"+Год);
	Если ТипЗначения(СписокЧисел)=100 Тогда
		Для Сч = 1 По КоличествоСтрок Цикл
			ТаблицаПеречислений1.УстановитьЗначение(Сч,"Год",СписокЧисел.ПолучитьЗначение(Сч));	
		КонецЦикла;
	КонецЕсли;
	СписокЧисел=ВосстановитьЗначение("Страховых"+Год);
	Если ТипЗначения(СписокЧисел)=100 Тогда
		Для Сч = 1 По КоличествоСтрок Цикл
			ТаблицаПеречислений1.УстановитьЗначение(Сч,"Страховых",СписокЧисел.ПолучитьЗначение(Сч));	
		КонецЦикла;
	КонецЕсли;
	СписокЧисел=ВосстановитьЗначение("Накопительных"+Год);
	Если ТипЗначения(СписокЧисел)=100 Тогда
		Для Сч = 1 По КоличествоСтрок Цикл
			ТаблицаПеречислений1.УстановитьЗначение(Сч,"Накопительных",СписокЧисел.ПолучитьЗначение(Сч));	
		КонецЦикла;
	КонецЕсли;
	СписокЧисел=ВосстановитьЗначение("ДопТариф"+Год);
	Если ТипЗначения(СписокЧисел)=100 Тогда
		Для Сч = 1 По КоличествоСтрок Цикл
			ТаблицаПеречислений1.УстановитьЗначение(Сч,"ДопТариф",СписокЧисел.ПолучитьЗначение(Сч));	
		КонецЦикла;
	КонецЕсли;
	//КонецЕсли;
КонецПроцедуры //ВосстановитьТаблицуПеречислений

//при выборе третьего формата откроем другую форму отчета
Процедура ПриВыбореФормата()
	//Если Форматы.ТекущаяСтрока()=2 Тогда
	//	Форма.Закрыть();
	//	ОткрытьФорму("Отчет.ПодготовкаСведенийДляПФР_3_0");
	//КонецЕсли;
КонецПроцедуры  // ПриОткрытии()
//******************************************************************************
//	Предопределенная процедура
//
Процедура ПриОткрытии(НастройкаПрочитана)
	
	Если НастройкаПрочитана = 0 Тогда
		Год = ДатаГод(РабочаяДата())-1; 
		ДатаПо = НачГода(РабочаяДата())-1;
		ТипФормируемыхДокументов = 1;
		Каталог = КаталогПользователя();
	КонецЕсли;  
	Если Число(Год)=2001 Тогда
	    Год = 2002;
	КонецЕсли;
	ПрошлыйГод = Год;
	
	Форма.ИспользоватьЗакладки(1);
	Форма.Закладки.ДобавитьЗначение("Постоянный,ФормированиеПачек","Пачки документов");
	
	Форматы.ДобавитьЗначение("4.00","  4.00");
	Форматы.ДобавитьЗначение("7.00","  7.00");
	Форматы.ТекущаяСтрока(1);
	ПриВыбореГода();
	
	Форма.Закладки.ДобавитьЗначение("Постоянный,ФормаАДВ11","Форма АДВ-11");
	
	Форма.ИспользоватьСлой("Постоянный,ФормированиеПачек",2);
	Форма.Исполнитель.ВыборГруппы(0);
	
	// определим колонки пачек
	Пачки.НоваяКолонка("Номер"				,"Число"		,5,0 ,"№ пачки",7);
	Пачки.НоваяКолонка("СтрокСтажаПачки"	,"Строка"		,12,0,"Форма",12); // "СЗВ-4-1" или "СЗВ-4-1" или "АДВ-11"
	Пачки.НоваяКолонка("ТипФормыПачки"		,"Строка"		,4,0 ,"Тип формы",6);
	Пачки.НоваяКолонка("ДопТип"				,"Строка"		,4,0 ,"Доп.тип",6);
	Пачки.НоваяКолонка("ТаблицаДокументов"	,"ТаблицаЗначений");
	Пачки.ВидимостьКолонки("ТаблицаДокументов",0);
	
	УстановитьТекущуюПачку(0);
	// и попробуем восстановить настройки
	ВосстановитьНастройки(ИмяФайлаНастроек());
	
	ТаблицаПеречислений1.НоваяКолонка("ТипДанных","Строка",23,0,"тип вводимых данных",30,,2);
	ТаблицаПеречислений1.НоваяКолонка("Год","Число",4,0,"год",8,,2);
	ТаблицаПеречислений1.НоваяКолонка("Страховых","Число",13,2,"на страховую часть трудовой пенсии",15,,2);
	ТаблицаПеречислений1.НоваяКолонка("Накопительных","Число",13,2,"на накопительную часть трудовой пенсии",15,,2);
	ТаблицаПеречислений1.НоваяКолонка("ДопТариф","Число",13,2,"по дополнительному тарифу",15,,2);
	ВосстановитьТаблицуПеречислений(); 
	
	// по умолчанию суммы в АДВ-11 надо округлять
	ОкруглятьНачисленное = 1;

КонецПроцедуры  // ПриОткрытии()

//******************************************************************************
//	Предопределенная процедура
//
Процедура ПриВыбореЗакладки(Номер,Значение)
	
	Форма.ИспользоватьСлой(Значение,2);
	
КонецПроцедуры	// ПриВыбореЗакладки

//******************************************************************************
// Предопределенная процедура
//
Процедура ПриНачалеВыбораЗначения(ИдентЭлемДиалога, ФлагСтандОбр)
	
	Если ИдентЭлемДиалога = "Каталог" Тогда
		ФлагСтандОбр = 0;   
		
		Если ФС.СуществуетФайл(Каталог+"\NUL")=1 Тогда
			Кат = Каталог;
		Иначе
			Кат = "C:\";
		КонецЕсли;
		ФС.ВыбратьКаталог(Кат,"Выбор каталога для вывода файла данных");
		Каталог = Кат;
	КонецЕсли;
	
КонецПроцедуры // ПриНачалеВыбораЗначения()

//******************************************************************************
//	Предопределенная процедура
//
Процедура ПриЗакрытии()	
	
	СохранитьНастройки(ИмяФайлаНастроек());
	
КонецПроцедуры  // ПриЗакрытии()

констДлинаОписателяПачки = 9;
констРазмерПачки = 200;

констКод10 = Симв(10);
констКод1 = Симв(1);
КатегорияВсех = глКатегорияПФР().Идентификатор(); 
ДатаВыдачиСведения = РабочаяДата();