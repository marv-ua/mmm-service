Перем ДатаНачалаНалоговогоПериода2003;

//******************************************************************************
// ПроверкаПериода()
//
// Возвращаемое значение:
//  1 - корректно выбран период в диалоге
//  0 - не корректно выбран период в диалоге
//
// Описание:
// Функция проверяет корректность ввода интервала дат в дилоге
//
Функция ПроверкаПериода()
	
	Если (НачДата > КонДата) Тогда
		Предупреждение("Неправильно задан период формирования отчета!"+РазделительСтрок+
		               "Дата начала больше даты окончания периода.", 60);
		Возврат 0;

	ИначеЕсли ПустоеЗначение(ДатаНачалаНалоговогоПериода2003) = 0 Тогда
		
		Если ((НачДата < ДатаНачалаНалоговогоПериода2003)
		   и  (КонДата >= ДатаНачалаНалоговогоПериода2003)) Тогда
			Предупреждение("Неправильно задан период формирования отчета!"+РазделительСтрок+
			               "В выбранном интервале налоговый учет велся по"+РазделительСтрок+
						   "разным правилам."+РазделительСтрок+
						   "Отчет за данный период сформировать невозможно!", 60);
			Возврат 0;
		    
		КонецЕсли;

	КонецЕсли;
	
	Возврат 1;
	
КонецФункции // ПроверкаПериода()

//******************************************************************************
//	Установить(Режим="") 
//
//	Параметры: Режим - строка, режим работы: "Все" - отметить все строки
//					   "Сброс" - снять отметку всех строк
//					   "" - инвертировать отметку всех строк
//
//	Описание: Устанавливает, снимает или инвертирует отметки выбора строк 
//
Процедура Установить(Список, Режим="") 
	Для Н = 1 По Список.РазмерСписка() Цикл
		Если Режим="Все" Тогда
			Список.Пометка(Н, 1);
		ИначеЕсли Режим="Сброс" Тогда
			Список.Пометка(Н, 0); 
		Иначе
			Список.Пометка(Н, ?(Список.Пометка(Н) = 1, 0, 1)); 
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры  //  Установить()

//******************************************************************************
// ПолучитьСписокОбъектовФильтра()
//
// Параметры:
//  Нет.
//
// Возвращаемое значение:
//  Список значений - список, объектов, которые должны попасть в регистр.
//
// Вызывается из формул элементов диалога:
//  Нет.
//
// Описание:
//  Здесь описывается функция.
//
Функция ПолучитьСписокОбъектовФильтра(ПолныйСписокОбъектов)
	
	СписокОтбираемыхОбъектов = СоздатьОбъект("СписокЗначений");
	РазмерСписка = ПолныйСписокОбъектов.РазмерСписка();
	Для СчетчикЦикла = 1 По РазмерСписка Цикл
		Если ПолныйСписокОбъектов.Пометка(СчетчикЦикла) = 1 Тогда
			Представление = "";
			Значение = ПолныйСписокОбъектов.ПолучитьЗначение(СчетчикЦикла, Представление);
		    СписокОтбираемыхОбъектов.ДобавитьЗначение(Значение, Представление);

		КонецЕсли;	
	КонецЦикла;
	
	Возврат СписокОтбираемыхОбъектов;
	
КонецФункции // ПолучитьСписокОбъектовФильтра()

//******************************************************************************
// СостояниеОтбора()
//
// Параметры:
//  Список - список значенний - список который необходимо проанализировать.
//
// Возвращаемое значение:
//  Строка - отражает, помечены ли в списке все элементы, помечены некоторые или вообще все пометки сняты.
//
// Вызывается из формул элементов диалога:
//  Нет.
//
// Описание:
//  Здесь описывается функция.
//
Функция СостояниеОтбора(Список)
	
	СписокОтбираемыхОбъектов = ПолучитьСписокОбъектовФильтра(Список);
	Если СписокОтбираемыхОбъектов.РазмерСписка() = 0 Тогда
		ТипФильтра = "Не выбраны";
		
	ИначеЕсли СписокОтбираемыхОбъектов.РазмерСписка() = Список.РазмерСписка() Тогда
		ТипФильтра = "По всем";
		
	Иначе
		ТипФильтра = "Выборочно";
	КонецЕсли;                 
	
	Возврат ТипФильтра;
	
КонецФункции // СостояниеОтбора()

//******************************************************************************
//
Процедура Сформировать()
	
	ДатаНачалаНалоговогоПериода2003 = ПолучитьПустоеЗначение("Дата");
	глНовыеПравилаВеденияНУ(КонДата, ДатаНачалаНалоговогоПериода2003);

	Если ПроверкаПериода() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Состояние("Заполнение выходной таблицы...");

	Если глНовыеПравилаВеденияНУ(КонДата) = 1 Тогда
		СписокУсловийПолученияАктивный = СписокУсловийПолучения2003;
		СписокВидовРасходовАктивный = СписокВидовРасходов2003;
	Иначе
		СписокУсловийПолученияАктивный = СписокУсловийПолучения;
		СписокВидовРасходовАктивный = СписокВидовРасходов;
	КонецЕсли;

	СписокОтбираемыхУсловийПолучения = ПолучитьСписокОбъектовФильтра(СписокУсловийПолученияАктивный);
	Если СписокОтбираемыхУсловийПолучения.РазмерСписка() = 0 Тогда
		Предупреждение("Регистр не может быть сформирован,
						|т.к. на закладке ""Условия получения"" не установлено ни одного условия получения,
						|которому должна соответствовать включаемая в регистр операция.");
		Возврат;
        
	ИначеЕсли СписокОтбираемыхУсловийПолучения.РазмерСписка() = СписокУсловийПолученияАктивный.РазмерСписка() Тогда
		ТекстШапкиУсловияПолучения = "По всем";

	Иначе		
		ТекстШапкиУсловияПолучения = "Выборочно";
		
	КонецЕсли;

	СписокОтбираемыхВидовРасхода = ПолучитьСписокОбъектовФильтра(СписокВидовРасходовАктивный);
	Если СписокОтбираемыхВидовРасхода.РазмерСписка() = 0 Тогда
		Предупреждение("Регистр не может быть сформирован,
						|т.к. на закладке ""Виды расхода"" не установлен ни один вид расхода,
						|которому должна соответствовать включаемая в регистр операция.");
		Возврат;
        
	ИначеЕсли СписокОтбираемыхВидовРасхода.РазмерСписка() = СписокВидовРасходовАктивный.РазмерСписка() Тогда
		ТекстШапкиВидыРасхода = "По всем";

	Иначе		
		ТекстШапкиВидыРасхода = "Выборочно";
		
	КонецЕсли;
	
	Таб = СоздатьОбъект("Таблица");
	СтрНалогоплательщик = Константа.ОфициальноеНазваниеОрганизации;
	Если ПустаяСтрока(СтрНалогоплательщик) = 1 Тогда
	СтрНалогоплательщик = Константа.НазваниеОрганизации;	    
	КонецЕсли;
	ИНН = Константа.ИННОрганизации;
	Таб.ВывестиСекцию("Шапка");

	Если глНовыеПравилаВеденияНУ(КонДата) = 1 Тогда

		// ФОРМИРОВАНИЕ С УЧЕТОМ НОВЫХ ПРАВИЛ НАЛОГОВОГО УЧЕТА РЕДАКЦИИ 4.4
	   	                    
		
		// Наименование операции
		НаименованияОпераций = СоздатьОбъект("СписокЗначений");
		
		// Внеоборотные активы
		НаименованияОпераций.ДобавитьЗначение(СчетПоКоду("Н01.01"), "Поступление ОС");
		НаименованияОпераций.ДобавитьЗначение(СчетПоКоду("Н01.02"), "Поступление оборудования к монтажу");
		НаименованияОпераций.ДобавитьЗначение(СчетПоКоду("Н01.03"), "Расходы на НИОКР");
		НаименованияОпераций.ДобавитьЗначение(СчетПоКоду("Н01.04"), "Расходы на освоение прир. ресурсов"); 
		НаименованияОпераций.ДобавитьЗначение(СчетПоКоду("Н01.07"), "Транспортные расходы");
		НаименованияОпераций.ДобавитьЗначение(СчетПоКоду("Н01.08"), "Расходы на приобретение НМА");
		НаименованияОпераций.ДобавитьЗначение(СчетПоКоду("Н01.09"), "Расходы связанные со строительством ОС");
		// ТМЦ
		НаименованияОпераций.ДобавитьЗначение(СчетПоКоду("Н02.01"), "Поступление материалов");
		НаименованияОпераций.ДобавитьЗначение(СчетПоКоду("Н02.02.1"), "Приобретение товаров");
		НаименованияОпераций.ДобавитьЗначение(СчетПоКоду("Н02.02.2"), "Приобретение товаров");
		НаименованияОпераций.ДобавитьЗначение(СчетПоКоду("Н02.05"), "Приобретение ценных бумаг");
		НаименованияОпераций.ДобавитьЗначение(СчетПоКоду("Н02.06"), "Приобретение прав требования");
		НаименованияОпераций.ДобавитьЗначение(СчетПоКоду("Н02.08"), "Приобретение пая");
		// Нормируемые			
		НаименованияОпераций.ДобавитьЗначение(СчетПоКоду("Н03.01"), "Расходы на гарантийный ремонт");
		НаименованияОпераций.ДобавитьЗначение(СчетПоКоду("Н03.03"), "Представительские расходы");
		НаименованияОпераций.ДобавитьЗначение(СчетПоКоду("Н03.04"), "Расходы на рекламу");
		// Приобретение работ и услуг относящихся к РБП
		НаименованияОпераций.ДобавитьЗначение(СчетПоКоду("Н04.05"), "Долгоср. страхование жизни");
		НаименованияОпераций.ДобавитьЗначение(СчетПоКоду("Н04.06"), "Страхование на оплату медицинских расходов");
		НаименованияОпераций.ДобавитьЗначение(СчетПоКоду("Н04.07"), "Страхование на случай смерти и утраты трудоспосбности");
		НаименованияОпераций.ДобавитьЗначение(СчетПоКоду("Н04.08"), "Страхование имущества");
		НаименованияОпераций.ДобавитьЗначение(СчетПоКоду("Н04.09"), "Принятие к учету РБП");
		// Приобретение работ и услуг относящихся на текущие расходы    
		НаименованияОпераций.ДобавитьЗначение(СчетПоКоду("Н01.05"), "Расходы основного производства"); 
		НаименованияОпераций.ДобавитьЗначение(СчетПоКоду("Н07.04"), "");
		НаименованияОпераций.ДобавитьЗначение(СчетПоКоду("Н07.07"), "Расходы связанные с реализацией ОС");
		НаименованияОпераций.ДобавитьЗначение(СчетПоКоду("Н07.08"), "Расходы связанные с реализацией НМА");
		НаименованияОпераций.ДобавитьЗначение(СчетПоКоду("Н07.06"), "Расходы связанные с реализацией прочего имущества");
		НаименованияОпераций.ДобавитьЗначение(СчетПоКоду("Н07.13"), "");
		НаименованияОпераций.ДобавитьЗначение(СчетПоКоду("Н07.14"), "");
		НаименованияОпераций.ДобавитьЗначение(СчетПоКоду("Н09"),    "Внереализационный расход");
		НаименованияОпераций.ДобавитьЗначение(СчетПоКоду("Н12"),    "Целевое финансирование");
		
		СчетаДляАнализа ="";
		
		Для т = 1 По СписокОтбираемыхВидовРасхода.РазмерСписка() Цикл
			Если ПустаяСтрока(СчетаДляАнализа) = 1 Тогда
				СчетаДляАнализа = СписокОтбираемыхВидовРасхода.ПолучитьЗначение(т);

			Иначе	
				СчетаДляАнализа = СчетаДляАнализа + "," + СписокОтбираемыхВидовРасхода.ПолучитьЗначение(т);
			    
			КонецЕсли;
			
		КонецЦикла;
		
		БухИт = СоздатьОбъект("БухгалтерскиеИтоги");
		БухИт.ИспользоватьПланСчетов(ОсновнойПланСчетов());

		БухИт.ВыполнитьЗапрос(НачДата, КонДата, СчетаДляАнализа,,, 3, "Проводка", "СК");
	
		ИтогСумма = 0;

		БухИт.ВыбратьПериоды(,);
		Пока БухИт.ПолучитьПериод() = 1 Цикл
			
			Опер = БухИт.Операция;
			ДатаОперации = Опер.ДатаОперации;
			УсловиеОперации = ""; 
			
			Если Опер.Дебет.Счет = СчетПоКоду("Н01.05") Тогда 
				// Выделение услуг сторонних организаций, отнесенных на затраты производства
				Если ПустоеЗначение(Опер.Кредит.Счет) = 0 Тогда
					Продолжить;
				КонецЕсли; 
				Если  СписокОтбираемыхУсловийПолучения.Принадлежит(Перечисление.УсловияПоступленияИВыбытия.ЗаПлату) = 0 Тогда
					Продолжить;
				КонецЕсли; 
			Иначе
				
				Если (ПустоеЗначение(Опер.Дебет.УсловияПоступленияИВыбытия) = 1) И (ПустоеЗначение(Опер.Кредит.УсловияПоступленияИВыбытия) = 1) Тогда
					Продолжить;
				КонецЕсли;  
				
				Если ПустоеЗначение(Опер.Дебет.УсловияПоступленияИВыбытия) = 0 Тогда // возвраты, отраженные по дебету счета - выбытие
					Если Опер.Дебет.УсловияПоступленияИВыбытия = Перечисление.УсловияПоступленияИВыбытия.Возврат Тогда
						Продолжить;
					КонецЕсли;
	                  	// устанавливаем фильтр по условиям получения
					Если СписокОтбираемыхУсловийПолучения.Принадлежит(Опер.Дебет.УсловияПоступленияИВыбытия) = 0 Тогда
				    	Продолжить;
					КонецЕсли;
					
				Иначе // возвраты по кредиту счета - это поступление
					Если Опер.Кредит.УсловияПоступленияИВыбытия <> Перечисление.УсловияПоступленияИВыбытия.Возврат Тогда
						Продолжить;
					КонецЕсли; 
					Если СписокОтбираемыхУсловийПолучения.Принадлежит(Опер.Кредит.УсловияПоступленияИВыбытия) = 0 Тогда
				    	Продолжить;
					КонецЕсли;
					УсловиеОперации = "Возврат";
					// отгрузка без перехода права собственности не должна попадать в регистр
					Если Опер.Дебет.Счет.ПринадлежитГруппе(СчетПоКоду("Н02.04")) = 1 Тогда
						Продолжить;
					КонецЕсли;   
					
				КонецЕсли;
				
			КонецЕсли;	
			
			//Отбросим операции распределения счета Н07.04.2
			Если (Опер.Кредит.Счет.ПринадлежитГруппе(СчетПоКоду("Н07.04")) = 1)
			   и (Опер.Дебет.Счет.ПринадлежитГруппе(СчетПоКоду("Н07.04")) = 1) Тогда
			   	Продолжить;
			КонецЕсли;
			
			// оперделяем условие поступления имущества
			Если Опер.Дебет.Счет = СчетПоКоду("Н01.05") Тогда
				УсловиеОперации = "За плату"; 
				
			ИначеЕсли УсловиеОперации <> "Возврат" Тогда
				УсловиеОперации = Строка(Опер.Дебет.УсловияПоступленияИВыбытия); 
				
			КонецЕсли;
			
			Если Опер.Дебет.Счет.ПринадлежитГруппе(СчетПоКоду("Н07.04")) = 1 Тогда
				Если Опер.Дебет.ГруппыВидыРасходов = Перечисление.ГруппыВидыРасходов.НеПринимаемые Тогда
					Если ПустоеЗначение(СписокОтбираемыхВидовРасхода.Получить("Не принимаемые")) = 1 Тогда
				    	Продолжить;
					КонецЕсли;
					
				ИначеЕсли ПустоеЗначение(СписокОтбираемыхВидовРасхода.Получить("Косвенные расходы")) = 1 Тогда 
					Продолжить;
				КонецЕсли;
				
			ИначеЕсли Опер.Дебет.Счет = СчетПоКоду("Н09") Тогда
				Если Опер.Дебет.ВнереализационныеРасходы = Перечисление.ВнереализационныеРасходы.НеПринимаемые Тогда
					Если ПустоеЗначение(СписокОтбираемыхВидовРасхода.Получить("Не принимаемые")) = 1 Тогда
				    	Продолжить;
					КонецЕсли;
					
					
				ИначеЕсли ПустоеЗначение(СписокОтбираемыхВидовРасхода.Получить("Внереализацонные расходы")) = 1 Тогда
					Продолжить;
				КонецЕсли;
				
			ИначеЕсли Опер.Дебет.Счет = СчетПоКоду("Н01.5") Тогда
					Если ПустоеЗначение(СписокОтбираемыхВидовРасхода.Получить("Прочие")) = 1 Тогда
				    	Продолжить;
					КонецЕсли;
			
			КонецЕсли;

			// определяем основание поступления имущества 
			ПервичныйДокумент = ?(ПустоеЗначение(Опер.ПервичныйДокумент) = 0, Опер.Документ, Опер.ПервичныйДокумент);
			ТекстДокумента = ?(ПустоеЗначение(ПервичныйДокумент) = 1, ""," на основании: " + Сокрлп(ПервичныйДокумент));
			ОснованиеПолучения = "" + Сокрлп(Опер.СодержаниеПроводки) + ТекстДокумента;
			Если УсловиеОперации = "Возврат" Тогда // возврат от покупатлеля
				 Если ПустоеЗначение(Опер.Кредит.Основание) = 0 Тогда
					ОснованиеПолучения = "" + глПолноеНаименование(Опер.Кредит.Основание.Владелец);
					ОснованиеПолучения = ОснованиеПолучения + ", " + Опер.Кредит.Основание;
					ОснованиеПолучения = ОснованиеПолучения + ТекстДокумента;
				КонецЕсли;
				
			ИначеЕсли ПустоеЗначение(Опер.Дебет.Основание) = 0 Тогда
				ОснованиеПолучения = "" + глПолноеНаименование(Опер.Дебет.Основание.Владелец);
				ОснованиеПолучения = ОснованиеПолучения + ", " + Опер.Дебет.Основание;
				ОснованиеПолучения = ОснованиеПолучения + ТекстДокумента; 
			ИначеЕсли Опер.Документ.Вид() = "УслугиСтороннихОрганизаций" Тогда
				ОснованиеПолучения = Сокрлп(Опер.Документ.Контрагент) + ", " + Сокрлп(Опер.Документ.Договор);
				ОснованиеПолучения = ОснованиеПолучения + ТекстДокумента; 
			КонецЕсли;
			
			// вид расхода
			ВидРасхода = "";
			Если Опер.Дебет.Счет = СчетПоКоду("Н09") Тогда
				Если Опер.Дебет.ВнереализационныеРасходы = Перечисление.ВнереализационныеРасходы.НеПринимаемые Тогда
					ВидРасхода = Опер.Дебет.ВнереализационныеРасходы;
					
				Иначе
					ВидРасхода = "Внереализационные расходы";
				КонецЕсли;
				
			ИначеЕсли Опер.Дебет.Счет.ПринадлежитГруппе(СчетПоКоду("Н07.04")) = 1 Тогда
				Если Опер.Дебет.ГруппыВидыРасходов = Перечисление.ГруппыВидыРасходов.НеПринимаемые Тогда
					ВидРасхода = Опер.Дебет.ГруппыВидыРасходов;
					
				Иначе
					ВидРасхода = "Косвенные расходы";
				КонецЕсли;
				
			Иначе
				СчетПоиска = БухИт.Счет.Код;
				Если Найти(СчетПоиска, "Н02.02") <> 0 Тогда
				    СчетПоиска = "Н02.02";
				КонецЕсли;
				Найдено = СписокВидовРасходовАктивный.НайтиЗначение(СчетПоиска);
				
				Если Найдено <> 0 Тогда
					СписокВидовРасходовАктивный.ПолучитьЗначение(Найдено, ВидРасхода);
				КонецЕсли;

			КонецЕсли;
			
			//наименование операции
			НаименованиеОперации = "";
			
			Если (Опер.Дебет.Счет.ПринадлежитГруппе(СчетПоКоду("Н07.04")) = 1) 
			 или (Опер.Дебет.Счет = СчетПоКоду("Н07.14")) Тогда
				НаименованиеОперации = Строка(Опер.Дебет.Субконто(1));
				
			ИначеЕсли Опер.Дебет.Счет = СчетПоКоду("Н09") Тогда
				НаименованиеОперации = Опер.Дебет.ВнереализационныеРасходы;
				
			Иначе
				Найдено = НаименованияОпераций.НайтиЗначение(БухИт.Счет);
			
				Если Найдено <> 0 Тогда
					НаименованияОпераций.ПолучитьЗначение(Найдено, НаименованиеОперации);
				Иначе
					НаименованиеОперации = ВидРасхода;
				КонецЕсли;
				
			КонецЕсли;
			
			Если БухИт.Счет.Количественный = 1 Тогда
				Количество = Опер.Количество;
			Иначе
				Количество = 0;
			КонецЕсли;
			
			Если УсловиеОперации <> "Возврат" Тогда
				Сумма = Опер.Сумма;
				
			Иначе // если возврат, то он отражается сторно по кредиту
				Количество = -Количество;
				Сумма = -Опер.Сумма;
			КонецЕсли;
			
			ИтогСумма = ИтогСумма + Сумма;
			
			Сумма = ФорматС(Сумма);
			Количество = ФорматК(Количество);
			
			Объект = "";
			Если БухИт.Счет.КоличествоСубконто() > 0 Тогда
				Если БухИт.ВыбранаПоДт() = 1 Тогда
					Если ТипЗначенияСтр(Опер.Дебет.Субконто(1)) = "Справочник" Тогда
						Объект = Строка(Опер.Дебет.Субконто(1));    
					КонецЕсли;
					
				Иначе // возврат от покупатлеля
					Если ТипЗначенияСтр(Опер.Кредит.Субконто(1)) = "Справочник" Тогда
						Объект = Строка(Опер.Кредит.Субконто(1));    
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
			ДатаПризнания = "";
			ОснованиеПризнания = "";

			Если (Опер.Дебет.Счет = СчетПоКоду("Н01.01"))
			 или (Опер.Дебет.Счет = СчетПоКоду("Н01.08"))
			 или (Опер.Дебет.Счет = СчетПоКоду("Н01.09")) Тогда
				// поступление внеоборотных активов
				БухИтСпец = СоздатьОбъект("БухгалтерскиеИтоги");
				БухИтСпец.ИспользоватьСубконто(Опер.Дебет.Счет.ВидСубконто(1), Опер.Дебет.Субконто(1));
				БухИтСпец.ВыполнитьЗапрос(НачДата, КонДата, Опер.Дебет.Счет, "Н05.01, Н05.03",, 3, "Проводка", "СК");
				БухИтСпец.ВыбратьПериоды(, 2);
				Пока БухИтСпец.ПолучитьПериод() = 1 Цикл
					// Ввод в эксплуатацию ОС или НМА
					Если ПустоеЗначение(ДатаПризнания) = 1 Тогда
						ДатаПризнания = БухИтСпец.Операция.ДатаОперации;
					Иначе
						ДатаПризнания = ДатаПризнания + "," + БухИтСпец.Операция.ДатаОперации;
					КонецЕсли;
					
					Если ПустоеЗначение(ОснованиеПризнания) = 1 Тогда
						ОснованиеПризнания = СокрЛП(БухИтСпец.Операция.ПервичныйДокумент);
					Иначе
						ОснованиеПризнания = ОснованиеПризнания + "," + СокрЛП(БухИтСпец.Операция.ПервичныйДокумент);
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			
			ТекДок = Опер.Документ;
			
			Таб.ВывестиСекцию("Строка");

		КонецЦикла;

		ИтогСумма = ФорматС(ИтогСумма);
		
	Иначе

		// ФОРМИРОВАНИЕ С УЧЕТОМ ПРАВИЛ НАЛОГОВОГО УЧЕТА, ДЕЙСТВОВАВШИХ ДО РЕДАКЦИИ 4.4

		//Создание объекта типа Запрос
		Запрос = СоздатьОбъект("Запрос");
		ТекстЗапроса = 
		"//{{ЗАПРОС(Сформировать)
		|Период с НачДата по КонДата;
		|ОбрабатыватьДокументы все;
		|Обрабатывать НеПомеченныеНаУдаление;
		|
		|ДатаПолучения = Документ.ОперацииПриобретенияИмущества.ДатаДок;
		|НаименованиеОперации = Документ.ОперацииПриобретенияИмущества.НаименованиеОперации;
		|Контрагент = Документ.ОперацииПриобретенияИмущества.Контрагент;
		|Договор = Документ.ОперацииПриобретенияИмущества.Договор;
		|ВидРасхода = Документ.ОперацииПриобретенияИмущества.ВидРасхода;
		|УсловиеПолучения = Документ.ОперацииПриобретенияИмущества.УсловиеПолучения;
		|ЭлементРасхода = Документ.ОперацииПриобретенияИмущества.ЭлементРасхода;
		|Объект = Документ.ОперацииПриобретенияИмущества.Объект;
		|Сумма = Документ.ОперацииПриобретенияИмущества.Сумма;
		|Количество = Документ.ОперацииПриобретенияИмущества.Количество;
		|ДатаПризнания = Документ.ОперацииПриобретенияИмущества.ДатаПризнания;
		|ОснованиеПризнания = Документ.ОперацииПриобретенияИмущества.ОснованиеПризнания;
		|
		|Функция СуммаСумма = Сумма(Сумма);
		|Функция СуммаКоличество = Сумма(Количество);
		|
		|Группировка Документ;
		|Группировка СтрокаДокумента;
		|";
		    
		                  
		// В запрос добавляются условия, в зависимости от того какие выбраны условия формирования регистра.
		// Дополнительно эти условия отражаются в шапке печатной формы регистра.
		Если СписокОтбираемыхУсловийПолучения.РазмерСписка() <> СписокУсловийПолученияАктивный.РазмерСписка() Тогда
			ТекстЗапроса = ТекстЗапроса + "Условие (УсловиеПолучения в СписокОтбираемыхУсловийПолучения);";

		КонецЕсли;

		Если СписокОтбираемыхВидовРасхода.РазмерСписка() <> СписокВидовРасходовАктивный.РазмерСписка() Тогда
			Если СписокВидовРасходовАктивный.Пометка(СписокВидовРасходовАктивный.РазмерСписка()) = 1 Тогда
				ТекстЗапроса = ТекстЗапроса + "Условие ((ВидРасхода в СписокОтбираемыхВидовРасхода) или (ПустоеЗначение(ВидРасхода) = 1));";
			Иначе
				ТекстЗапроса = ТекстЗапроса + "Условие (ВидРасхода в СписокОтбираемыхВидовРасхода);";
			КонецЕсли;
			
		КонецЕсли;
		
		// Если ошибка в запросе, то выход из процедуры
		Если Запрос.Выполнить(ТекстЗапроса) = 0 Тогда
			Возврат;
		КонецЕсли;
	
		Пока Запрос.Группировка("Документ") = 1 Цикл
	
			Пока Запрос.Группировка("СтрокаДокумента") = 1 Цикл
				ДатаОперации = Запрос.ДатаПолучения;
				НаименованиеОперации = Запрос.НаименованиеОперации;
				ОснованиеПолучения = "" + глПолноеНаименование(Запрос.Контрагент);
				Если ПустоеЗначение(Запрос.Договор) = 0 Тогда
					 ОснованиеПолучения = ОснованиеПолучения + ", " + Запрос.Договор;
				КонецЕсли;
				ВидРасхода = Запрос.ВидРасхода;
				УсловиеОперации = Запрос.УсловиеПолучения;
				ЭлементРасхода = Запрос.ЭлементРасхода;
				Объект = Запрос.Объект;
				ДатаПризнания = Запрос.ДатаПризнания;
				ОснованиеПризнания = Запрос.ОснованиеПризнания;
				Сумма = ФорматС(Запрос.СуммаСумма);
		        Количество = СокрЛ(ФорматК(Запрос.СуммаКоличество));

				ТекДок = Запрос.Документ;
				
				Таб.ВывестиСекцию("Строка");
	
			КонецЦикла;
	
		КонецЦикла;
	
		ИтогСумма = ФорматС(Запрос.СуммаСумма);
		
	КонецЕсли;
		
	ОтветственныйЗаСоставление = ФИО(Константа.ОтветственныйЗаСоставлениеРегистровНУ);

	Таб.ВывестиСекцию("Подвал");
	
	Таб.ТолькоПросмотр(1);
	Таб.ОбластьПечати(,1,,);
	Таб.Опции(0, 0, 0, 0, "ПечатьРегистрУчетаОперацийПриобретенияИмущества", "ОкноРегистрУчетаОперацийПриобретенияИмущества");
	Таб.Показать("Регистр учета операций приобретения имущества, работ, услуг, прав");

КонецПроцедуры // Сформировать

//******************************************************************************
Процедура ПриОткрытии(ФлагЧтенияНастройки) //предопределенная
	
	Форма.ИспользоватьЗакладки(1);
	Форма.ИспользоватьСлой("Параметры, Основной", 2);
	Форма.Закладки.ДобавитьЗначение("Параметры", "Параметры");
	Форма.Закладки.ДобавитьЗначение("Условия получения");
	Форма.Закладки.ДобавитьЗначение("Виды расхода");
	
	Если глНовыеПравилаВеденияНУ(КонДата) = 1 Тогда
		СписокУсловийПолученияАктивный = СписокУсловийПолучения2003;
		СписокВидовРасходовАктивный = СписокВидовРасходов2003;
	Иначе
		СписокУсловийПолученияАктивный = СписокУсловийПолучения;
		СписокВидовРасходовАктивный = СписокВидовРасходов;
	КонецЕсли;
	
	Если ФлагЧтенияНастройки = 1 Тогда
		
		// отразим состояние выбранных условий формирования регистра в диалоге на первой закладке
		Форма.УсловияПолученияФильтр.Заголовок(СостояниеОтбора(СписокУсловийПолученияАктивный));
		Форма.ВидыРасходаФильтр.Заголовок(СостояниеОтбора(СписокВидовРасходовАктивный));
		Возврат;
	КонецЕсли;	         
	
	НачДата = НачалоПериодаБИ();
	КонДата = КонецПериодаБИ();
	          
	// список условий получения
	СписокУсловийПолучения.ДобавитьЗначение(Перечисление.УсловияПолученияИмущества.СПоследующейОплатой);
	СписокУсловийПолучения.ДобавитьЗначение(Перечисление.УсловияПолученияИмущества.ВСчетРанееВыданныхАвансов);
	СписокУсловийПолучения.ДобавитьЗначение(Перечисление.УсловияПолученияИмущества.ВСчетРасчетовПоДоговоруМены);	
	СписокУсловийПолучения.ДобавитьЗначение(Перечисление.УсловияПолученияИмущества.ПоДоговоруЗайма);	
	СписокУсловийПолучения.ДобавитьЗначение(Перечисление.УсловияПолученияИмущества.ВРамкахЦелевогоФинансирования);	
	СписокУсловийПолучения.ДобавитьЗначение(Перечисление.УсловияПолученияИмущества.Безвозмездно);	
	СписокУсловийПолучения.ДобавитьЗначение(Перечисление.УсловияПолученияИмущества.Другие);

	Установить(СписокУсловийПолучения, "Все"); // установить пометки у всех элементов списка

	СписокУсловийПолучения2003.ДобавитьЗначение(Перечисление.УсловияПоступленияИВыбытия.ЗаПлату, 		"Отгрузка с последующей оплатой");
	СписокУсловийПолучения2003.ДобавитьЗначение(Перечисление.УсловияПоступленияИВыбытия.Товароообмен,		   		"Отгрузка по бартеру");
	СписокУсловийПолучения2003.ДобавитьЗначение(Перечисление.УсловияПоступленияИВыбытия.ПоДоговоруЗайма,   			"Передача по договору займа");
	СписокУсловийПолучения2003.ДобавитьЗначение(Перечисление.УсловияПоступленияИВыбытия.ВРамкахЦелевогоФинансирования,		"Передача в рамках целевого финансирования");
	СписокУсловийПолучения2003.ДобавитьЗначение(Перечисление.УсловияПоступленияИВыбытия.Безвозмездно,		   				"Безвозмездная передача");
	СписокУсловийПолучения2003.ДобавитьЗначение(Перечисление.УсловияПоступленияИВыбытия.Возврат,			 				"Возврат от покупателя");
	СписокУсловийПолучения2003.ДобавитьЗначение(Перечисление.УсловияПоступленияИВыбытия.ВкладВУставныйКапитал, 				"Вклад в уставный капитал");
	СписокУсловийПолучения2003.ДобавитьЗначение(Перечисление.УсловияПоступленияИВыбытия.ВкладВПростоеТоварищество, 			"Вклад в простое товарищество");
	СписокУсловийПолучения2003.ДобавитьЗначение(Перечисление.УсловияПоступленияИВыбытия.ИзлишкиИнвентаризации, 				"Излишки выявленные при инвентаризации");
	СписокУсловийПолучения2003.ДобавитьЗначение(Перечисление.УсловияПоступленияИВыбытия.Другие,			    				"Прочие условия поступления");

	Установить(СписокУсловийПолучения2003, "Все"); // установить пометки у всех элементов списка
	
	СписокВидовРасходов.ДобавитьЗначение(Перечисление.ВидыРасходов.ПриобретениеТоваров);
	СписокВидовРасходов.ДобавитьЗначение(Перечисление.ВидыРасходов.ПриобретениеМатериалов);
	СписокВидовРасходов.ДобавитьЗначение(Перечисление.ВидыРасходов.ПриобретениеОсновныхСредств);	
	СписокВидовРасходов.ДобавитьЗначение(Перечисление.ВидыРасходов.СтроительствоОсновныхСредств);	
	СписокВидовРасходов.ДобавитьЗначение(Перечисление.ВидыРасходов.ПриобретениеНематериальныхАктивов);	
	СписокВидовРасходов.ДобавитьЗначение(Перечисление.ВидыРасходов.ПриобретениеЦенныхБумаг);
	СписокВидовРасходов.ДобавитьЗначение(Перечисление.ВидыРасходов.ПриобретениеПрав);	
	СписокВидовРасходов.ДобавитьЗначение(Перечисление.ВидыРасходов.ТранспортныеРасходы);	
	СписокВидовРасходов.ДобавитьЗначение(Перечисление.ВидыРасходов.ПредставительскиеРасходы);	
	СписокВидовРасходов.ДобавитьЗначение(Перечисление.ВидыРасходов.РасходыНаРекламу);	
	СписокВидовРасходов.ДобавитьЗначение(Перечисление.ВидыРасходов.РасходыБудущихПериодов);
	СписокВидовРасходов.ДобавитьЗначение(Перечисление.ВидыРасходов.ГарантийныйРемонтИОбслуживание);	
	СписокВидовРасходов.ДобавитьЗначение(Перечисление.ВидыРасходов.НИОКР);	
	СписокВидовРасходов.ДобавитьЗначение(Перечисление.ВидыРасходов.ОсвоениеПриродныхРесурсов);	
	СписокВидовРасходов.ДобавитьЗначение(Перечисление.ВидыРасходов.КосвенныеРасходы);	
	СписокВидовРасходов.ДобавитьЗначение(Перечисление.ВидыРасходов.ВнереализационныеРасходы);
	СписокВидовРасходов.ДобавитьЗначение(Перечисление.ВидыРасходов.РеализацияОсновныхСредств);
	СписокВидовРасходов.ДобавитьЗначение(Перечисление.ВидыРасходов.РеализацияНематериальныхАктивов);
	СписокВидовРасходов.ДобавитьЗначение(Перечисление.ВидыРасходов.РеализацияПрочегоИмущества);	
	СписокВидовРасходов.ДобавитьЗначение(Перечисление.ВидыРасходов.ВыбытиеИмущества);	
	СписокВидовРасходов.ДобавитьЗначение(Перечисление.ВидыРасходов.БезвозмезднаяПередачаИмущества);	
	СписокВидовРасходов.ДобавитьЗначение(Перечисление.ВидыРасходов.НеПринимаемые);

	Установить(СписокВидовРасходов, "Все"); // установить пометки у всех элементов списка
	
	// список видов расхода
	СписокВидовРасходов2003.ДобавитьЗначение("Н01.01", "На приобретение ОС");
	СписокВидовРасходов2003.ДобавитьЗначение("Н01.02", "На приобретение оборудования, требующего монтажа");
	СписокВидовРасходов2003.ДобавитьЗначение("Н01.03", "На НИОКР");
	СписокВидовРасходов2003.ДобавитьЗначение("Н01.04", "На освоение природных ресурсов");
	СписокВидовРасходов2003.ДобавитьЗначение("Н01.07", "Транспортные расходы");
	СписокВидовРасходов2003.ДобавитьЗначение("Н01.08", "На приобретение НМА");
	СписокВидовРасходов2003.ДобавитьЗначение("Н01.09", "Строительство ОС");
	// ТМЦ
	СписокВидовРасходов2003.ДобавитьЗначение("Н02.01", "На приобретение материалов");
	СписокВидовРасходов2003.ДобавитьЗначение("Н02.03", "На возврат продукции");    
	СписокВидовРасходов2003.ДобавитьЗначение("Н02.07", "На возврат полуфабрикатов");
	СписокВидовРасходов2003.ДобавитьЗначение("Н02.02", "На приобретение товаров");
	СписокВидовРасходов2003.ДобавитьЗначение("Н02.05", "На приобретение ценных бумаг");
	СписокВидовРасходов2003.ДобавитьЗначение("Н02.06", "На приобретение прав требования");
	СписокВидовРасходов2003.ДобавитьЗначение("Н02.08", "На приобретение паев");
	// Нормируемые
	СписокВидовРасходов2003.ДобавитьЗначение("Н03.01", "Расходы на гарант.ремонт");
	СписокВидовРасходов2003.ДобавитьЗначение("Н03.03", "Представительские расходы");
	СписокВидовРасходов2003.ДобавитьЗначение("Н03.04", "Расходы на рекламу");
	// Приобретение работ и услуг относящихся к РБП
	СписокВидовРасходов2003.ДобавитьЗначение("Н04.05", "На долгосрочное страхование жизни");
	СписокВидовРасходов2003.ДобавитьЗначение("Н04.06", "Страхование на оплату медицинских расходов");
	СписокВидовРасходов2003.ДобавитьЗначение("Н04.07", "Страхование на случай смерти и утраты трудоспосбности");
	СписокВидовРасходов2003.ДобавитьЗначение("Н04.08", "На страхование имущества");
	СписокВидовРасходов2003.ДобавитьЗначение("Н04.09", "Прочие РБП");
	// Приобретение работ и услуг относящихся на текущие расходы 
	СписокВидовРасходов2003.ДобавитьЗначение("Н01.05", "Прямые расходы");
	СписокВидовРасходов2003.ДобавитьЗначение("Н07.04", "Косвенные расходы");
	СписокВидовРасходов2003.ДобавитьЗначение("Н07.07", "Расходы на реализацию ОС");
	СписокВидовРасходов2003.ДобавитьЗначение("Н07.08", "Расходы на реализацию НМА");
	СписокВидовРасходов2003.ДобавитьЗначение("Н07.06", "Расходы на реализацию прочего имущества");
	СписокВидовРасходов2003.ДобавитьЗначение("Н07.13", "Расходы обслуживающих производств");
	СписокВидовРасходов2003.ДобавитьЗначение("Н07.14", "Расходы, связанные с приобретением ЦБ");
	СписокВидовРасходов2003.ДобавитьЗначение("Н12",    "Целевое финансирование");
	СписокВидовРасходов2003.ДобавитьЗначение("Н09",	   "Внереализацонные расходы");
	СписокВидовРасходов2003.ДобавитьЗначение("Н09, Н07.04.1, Н07.04.2", "Не принимаемые");

	Установить(СписокВидовРасходов2003, "Все"); // установить пометки у всех элементов списка
	                                                                                
	// отразим состояние выбранных условий формирования регистра в диалоге на первой закладке
	Форма.УсловияПолученияФильтр.Заголовок(СостояниеОтбора(СписокУсловийПолученияАктивный));
	Форма.ВидыРасходаФильтр.Заголовок(СостояниеОтбора(СписокВидовРасходовАктивный));
	
КонецПроцедуры //ПриОткрытии

//******************************************************************************
Процедура ПриВыбореЗакладки(Номер, Значение)                                    

	Если Значение = "Параметры" Тогда
		
		// при переходе на первую закладку отразим на ней состояние выбранных условий формирования регистра
		Форма.ИспользоватьСлой("Параметры, Основной", 2);

		Если глНовыеПравилаВеденияНУ(КонДата) = 1 Тогда
			Форма.УсловияПолученияФильтр.Заголовок(СостояниеОтбора(СписокУсловийПолучения2003));
			Форма.ВидыРасходаФильтр.Заголовок(СостояниеОтбора(СписокВидовРасходов2003));
		
		Иначе
			Форма.УсловияПолученияФильтр.Заголовок(СостояниеОтбора(СписокУсловийПолучения));
			Форма.ВидыРасходаФильтр.Заголовок(СостояниеОтбора(СписокВидовРасходов));
			
		КонецЕсли;

	ИначеЕсли Значение = "Условия получения" Тогда

		Если глНовыеПравилаВеденияНУ(КонДата) = 1 Тогда
			Форма.ИспользоватьСлой("УсловияПолучения2003, Основной", 2);
		
		Иначе
			Форма.ИспользоватьСлой("УсловияПолучения, Основной", 2);
			
		КонецЕсли;
		
	ИначеЕсли Значение = "Виды расхода" Тогда

		Если глНовыеПравилаВеденияНУ(КонДата) = 1 Тогда
			Форма.ИспользоватьСлой("ВидыРасхода2003, Основной", 2);
		
		Иначе
			Форма.ИспользоватьСлой("ВидыРасхода, Основной", 2);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры