Перем ТаблицаГруппировок;              
Перем Таб;
Перем ТаблицаСДанными;
Перем СписокОтбираемыхНаправленийИспользования;
Перем ДатаНачалаНалоговогоПериода2003;

//******************************************************************************
// ПроверкаПериода()
//
// Возвращаемое значение:
//  1 - корректно выбран период в диалоге
//  0 - не корректно выбран период в диалоге
//
// Описание:
// Функция проверяет корректность ввода интервала дат в дилоге и рассчитаны ли итоги за заданный период
//
Функция ПроверкаПериода()
	
	Если (НачДата > КонДата) Тогда
		Предупреждение("Неправильно задан период формирования отчета!"+РазделительСтрок+
		               "Дата начала больше даты окончания периода.", 60);
		Возврат 0;

	ИначеЕсли ПустоеЗначение(ДатаНачалаНалоговогоПериода2003) = 0 Тогда
		
		Если ((НачДата < ДатаНачалаНалоговогоПериода2003)
		   и  (КонДата >= ДатаНачалаНалоговогоПериода2003)) Тогда
			Предупреждение("Неправильно задан период формирования отчета!"+РазделительСтрок+
			               "В выбранном интервале налоговый учет велся по"+РазделительСтрок+
						   "разным правилам."+РазделительСтрок+
						   "Отчет за данный период сформировать невозможно!", 60);
			Возврат 0;
		    
		КонецЕсли;

	КонецЕсли;

	Если КонДата > КонецРассчитанногоПериодаБИ() Тогда
		Предупреждение("За выбранный период итоги не рассчитаны!"+РазделительСтрок+
		"Расчет итогов выполняется в режиме"+РазделительСтрок+
		"""Операции - Управление бухгалтерскими итогами"".", 60);
		Возврат 0;
	КонецЕсли;
	
	Возврат 1;
	
КонецФункции // ПроверкаПериода()

//******************************************************************************
// ВыводИтоговПоПредыдущейГруппе()
//
// Параметры:
//  Нет.
//
// Вызывается из формул элементов диалога:
//  Нет.
//
// Описание:
//  Здесь описывается процедура.
//
Процедура ВыводИтоговПоПредыдущейГруппе()
	
	Если ТаблицаСДанными.НомерСтроки <> 1 Тогда 
		НомерСтрокиИтогов = ТаблицаГруппировок.НомерСтрокиТаблицы;
		Таб.Область(НомерСтрокиИтогов, 5).Текст = ФорматС(ТаблицаГруппировок.Сумма);
	КонецЕсли;

КонецПроцедуры // ВыводИтоговПоПредыдущейГруппе()

//******************************************************************************
// ПриВыбореРежимаФормирования()
//
// Параметры:
//  Нет.
//
// Вызывается из формул элементов диалога:
//  РежимФормирования
//
// Описание:
//  Здесь описывается процедура.
//
Процедура ПриВыбореРежимаФормирования()
	Если РежимФормирования = 2 Тогда
		Форма.ВидыПродукции.Доступность(1);
	Иначе
		Форма.ВидыПродукции.Доступность(0);
	КонецЕсли;

КонецПроцедуры // ПриВыбореРежимаФормирования()

//******************************************************************************
// ОбновлениеТаблицыГруппировок()
//
// Параметры:
//  Нет.
//
// Вызывается из формул элементов диалога:
//  Нет.
//
// Описание:
//  Здесь описывается процедура.
//
Процедура ОбновлениеТаблицыГруппировок(НоваяГруппа);
	
	ТаблицаГруппировок.Значение = НоваяГруппа;
	ТаблицаГруппировок.НомерСтрокиТаблицы = Таб.ВысотаТаблицы();
	ТаблицаГруппировок.Сумма = 0;
	
КонецПроцедуры // КорректировкаТаблицаГруппировок()

//******************************************************************************
// НоваяГруппа()
//
// Параметры:
//  Нет.
//
// Вызывается из формул элементов диалога:
//  Нет.
//
// Описание:
//  Здесь описывается процедура.
//
Процедура НоваяГруппа(НоваяГруппа)            
	
	НомерСтроки = ТаблицаГруппировок.НомерСтроки;
	                                                  
	// вывод итогов в таблицу по предыдущей группировке
	ВыводИтоговПоПредыдущейГруппе();
	Если ТипЗначенияСтр(НоваяГруппа) = "Дата" Тогда
	     НазваниеГруппы = Формат(НоваяГруппа, "Д ММММГГГГ");;
		 
	Иначе
		НазваниеГруппы = НоваяГруппа;
	КонецЕсли;
	Группа= ТаблицаГруппировок.ПрефиксКИмени + ТаблицаГруппировок.СинонимИмени +": " + НазваниеГруппы;  
	Таб.ВывестиСекцию("Группа");
	
	// внесение новой информации по новой группировке
	ОбновлениеТаблицыГруппировок(НоваяГруппа);
	
	// обнуление значения вложенной  группировки, для того, чтобы в дальнейшем оно наверняка обработалось, как новое
	Если ТаблицаГруппировок.КоличествоСтрок() > НомерСтроки Тогда
		ТаблицаГруппировок.УстановитьЗначение(НомерСтроки+1, "Значение", "Значение группировки не задано");
	КонецЕсли;
	
КонецПроцедуры // НоваяГруппа()

//******************************************************************************
Процедура Сформировать()                                               
	
	глНовыеПравилаВеденияНУ(КонДата, ДатаНачалаНалоговогоПериода2003);

	Если ПроверкаПериода() = 0 Тогда
		Возврат;
	КонецЕсли;
	               
	// таблица в которую помещаются данные для вывода их в исходную форму регистра
	ТаблицаСДанными = СоздатьОбъект("ТаблицаЗначений");
	ТаблицаСДанными.НоваяКолонка("Месяц");
	ТаблицаСДанными.НоваяКолонка("ВидНоменклатуры");
	ТаблицаСДанными.НоваяКолонка("ВидРасхода");
	ТаблицаСДанными.НоваяКолонка("НаименованиеОперации");
	ТаблицаСДанными.НоваяКолонка("Сумма", "Число", 15, 2);
	ТаблицаСДанными.НоваяКолонка("Документ", "Документ");
	
	// таблица с выбранными видами группировок
	ТаблицаГруппировок = СоздатьОбъект("ТаблицаЗначений");
	ТаблицаГруппировок.НоваяКолонка("ИмяГруппировки", "Строка");
	ТаблицаГруппировок.НоваяКолонка("СинонимИмени", "Строка");
	ТаблицаГруппировок.НоваяКолонка("ПрефиксКИмени", "Строка");
	ТаблицаГруппировок.НоваяКолонка("Значение");
	ТаблицаГруппировок.НоваяКолонка("НомерСтрокиТаблицы", "Число", 10, 0);
	ТаблицаГруппировок.НоваяКолонка("Сумма", "Число", 15, 2);
	
	// создание объекта "Таблица"
	Таб = СоздатьОбъект("Таблица");
	
	// подготовка реквизитов шапки
	СтрНалогоплательщик = СокрЛП(Константа.ОфициальноеНазваниеОрганизации);
	Если ПустаяСтрока(СтрНалогоплательщик) = 1 Тогда
	СтрНалогоплательщик = СокрЛП(Константа.НазваниеОрганизации);	    
	КонецЕсли;
	ИНН = Константа.ИННОрганизации;                                              
	Если ВидыПродукции.ТекущаяСтрока() = 1 Тогда // отражать все виды продукции
		ВидыНоменклатуры = "Все";	
	ИначеЕсли ВидыПродукции.ТекущаяСтрока() = 2 Тогда // отражать только виды продукции у которых тип номенклатуры - продукция
		ВидыНоменклатуры = "Продукция";	
		
	Иначе // отражать только виды продукции у которых тип номенклатуры - работа или услуга
		ВидыНоменклатуры = "Работы (услуги)";	
	КонецЕсли;
	Таб.ВывестиСекцию("Шапка");        
	

	Если глНовыеПравилаВеденияНУ(КонДата) = 1 Тогда

	 	// ФОРМИРОВАНИЕ С УЧЕТОМ НОВЫХ ПРАВИЛ НАЛОГОВОГО УЧЕТА РЕДАКЦИИ 4.4
        
		Если РежимФормирования = 1 Тогда
	 		СчетаУчета = "Н01.05, Н01.06, Н02.01";
	 		
		ИначеЕсли РежимФормирования = 2 Тогда
	 		СчетаУчета = "Н01.05, Н02.01";
	 		
		ИначеЕсли РежимФормирования = 3 Тогда
			СчетаУчета = "Н01.06";
	 		
		КонецЕсли;
	 	
	 	// Заполним таблицу данными
  		БухИт = СоздатьОбъект("БухгалтерскиеИтоги");
		БухИт.ВыполнитьЗапрос(НачДата, КонДата, СчетаУчета,,,,"Проводка",);
		БухИт.ВыбратьСчета(, 1);
		Пока БухИт.ПолучитьСчет() = 1 Цикл
			БухИт.ВыбратьПериоды(, 1);
			Пока БухИт.ПолучитьПериод() = 1 Цикл                             

				Операция = БухИт.Операция;        
                
				К = 1;
				Если Операция.Дебет.Счет = СчетПоКоду("Н02.01") Тогда
					Если Операция.Кредит.Счет <> СчетПоКоду("Н01.05") Тогда
						Продолжить;
					КонецЕсли;
				КонецЕсли;
				
				
				Если РежимФормирования = 1 Тогда
					// В этом режиме в регистр не должны попасть операции распределения прямых расходов
					// с кредита счета Н01.06 в дебет счета Н01.05
					Если Операция.Кредит.Счет = СчетПоКоду("Н01.06") Тогда
						Продолжить;    
					КонецЕсли;
	
				ИначеЕсли РежимФормирования = 2 Тогда
					// В регистр должны попасти только виды номенклатуры с выбранным типом номенклатуры.
					ТипНоменклатуры = ?(Операция.Дебет.Счет = СчетПоКоду("Н02.01"),Операция.Кредит.ВидыНоменклатуры.ТипНоменклатуры,Операция.Дебет.ВидыНоменклатуры.ТипНоменклатуры);
	
					Если ВидыПродукции.ТекущаяСтрока() = 2 Тогда
						// отражать только виды продукции у которых тип номенклатуры - продукция и полуфабрикат
						Если (ТипНоменклатуры <> Перечисление.ТипыНоменклатуры.Продукция)
						   и (ТипНоменклатуры <> Перечисление.ТипыНоменклатуры.Полуфабрикат) Тогда
							Продолжить;
						КонецЕсли;	
					ИначеЕсли ВидыПродукции.ТекущаяСтрока() = 3 Тогда
						// отражать только виды продукции у которых тип номенклатуры - работа или услуга
						Если (ТипНоменклатуры <> Перечисление.ТипыНоменклатуры.Работа)
						   и (ТипНоменклатуры <> Перечисление.ТипыНоменклатуры.Услуга) Тогда
							Продолжить;
						КонецЕсли;
					КонецЕсли;
	
				КонецЕсли;
	
				ТаблицаСДанными.НоваяСтрока();
				ТаблицаСДанными.Месяц = НачМесяца(Операция.ДатаОперации);

				Если БухИт.Счет = СчетПоКоду("Н01.05") Тогда
					ТаблицаСДанными.ВидНоменклатуры = Операция.Дебет.ВидыНоменклатуры;
				Иначе
					ТаблицаСДанными.ВидНоменклатуры = "Прямые расходы подлежащие распределению";
				КонецЕсли;

				ТаблицаСДанными.ВидРасхода = Операция.Дебет.ГруппыВидыРасходов;
	
				// расшифровка содержания операции
				ТаблицаСДанными.НаименованиеОперации = "" + СокрЛП(Операция.СодержаниеПроводки);
				Если ПустаяСтрока(СокрЛП(Операция.ПервичныйДокумент)) =0 Тогда
					ТаблицаСДанными.НаименованиеОперации = ТаблицаСДанными.НаименованиеОперации + " на основании: " + СокрЛП(Операция.ПервичныйДокумент);
				КонецЕсли;
				
				Если ((Найти("Н02.01", Операция.Кредит.Счет.Код) <> 0) или (Найти("Н02.09", Операция.Кредит.Счет.Код) <> 0))
	               и (ПустоеЗначение(Операция.Кредит.Счет.Код) = 0)
				   и (ПустоеЗначение(Операция.Кредит.Материалы) = 0) Тогда
					// материальные расходы
					ТаблицаСДанными.НаименованиеОперации = СокрЛП(ТаблицаСДанными.НаименованиеОперации) + " материал: " + Операция.Кредит.Материалы + "(ед.изм.- " +
														   Операция.Кредит.Материалы.ЕдиницаИзмерения + ")";
	
				ИначеЕсли (Найти("Н02.02,Н02.03,Н02.07", Операция.Кредит.Счет.Код) <> 0)
						и (ПустоеЗначение(Операция.Кредит.Счет.Код) = 0)							
						и (ПустоеЗначение(Операция.Кредит.Номенклатура) = 0) Тогда
					// материальные расходы
					ТаблицаСДанными.НаименованиеОперации = СокрЛП(ТаблицаСДанными.НаименованиеОперации) + " номенклатура:" + Операция.Кредит.Номенклатура + "(ед.изм.- " +
														   Операция.Кредит.Номенклатура.ЕдиницаИзмерения + ")";
	
				ИначеЕсли (Найти("Н01.06", Операция.Кредит.Счет.Код) <> 0)
						и (ПустоеЗначение(Операция.Кредит.Счет.Код) = 0) Тогда
					// распределяемые прямые расходы
					ТаблицаСДанными.НаименованиеОперации = СокрЛП(ТаблицаСДанными.НаименованиеОперации) + " - распределение со стчета Н01.06 " + Операция.Кредит.ГруппыВидыРасходов + 
														   "(см. распределение прямых расходов)";
	
	            ИначеЕсли Операция.Дебет.ГруппыВидыРасходов = Перечисление.ГруппыВидыРасходов.Амортизация Тогда
					// амортизация имущества
					ТаблицаСДанными.НаименованиеОперации = СокрЛП(ТаблицаСДанными.НаименованиеОперации) + " амортизация " + Операция.Кредит.Субконто(1); 
					
				ИначеЕсли ((Найти("Н02.01", Операция.Дебет.Счет.Код) <> 0) и (Найти("Н01.05", Операция.Кредит.Счет.Код) <> 0))
	               и (ПустоеЗначение(Операция.Дебет.Счет.Код) = 0)
				   и (ПустоеЗначение(Операция.Дебет.Материалы) = 0) Тогда
					// возврат материальных отходов
					ТаблицаСДанными.ВидНоменклатуры = Операция.Кредит.ВидыНоменклатуры;
					ТаблицаСДанными.ВидРасхода = Операция.Кредит.ГруппыВидыРасходов;
					ТаблицаСДанными.НаименованиеОперации = СокрЛП(ТаблицаСДанными.НаименованиеОперации) + " возврат материальных отходов: " + Операция.Дебет.Материалы + "(ед.изм.- " +
														   Операция.Дебет.Материалы.ЕдиницаИзмерения + ")";
					К = -1;									
				КонецЕсли;
				
				ТаблицаСДанными.Сумма = Операция.Сумма*К;
				ТаблицаСДанными.Документ = Операция.Документ;;
			КонецЦикла;
		КонецЦикла;
 		
 	Иначе

 		// ФОРМИРОВАНИЕ С УЧЕТОМ ПРАВИЛ НАЛОГОВОГО УЧЕТА, ДЕЙСТВОВАВШИХ ДО РЕДАКЦИИ 4.4

 		Если РежимФормирования = 2 Тогда
	 		// Заполним таблицу данными
	  		БухИт = СоздатьОбъект("БухгалтерскиеИтоги");
			БухИт.ВыполнитьЗапрос(НачДата, КонДата, "Н01.05",,,,"Проводка",);
			БухИт.ВыбратьПериоды(, 1);
			Пока БухИт.ПолучитьПериод() = 1 Цикл                             
				Операция = БухИт.Операция;        
				ТипНоменклатуры = Операция.Дебет.ВидыНоменклатуры.ТипНоменклатуры;
				
				// В регистр должны попасти только виды номенклатуры с выбранным типом номенклатуры.
				Если ВидыПродукции.ТекущаяСтрока() = 2 Тогда
					// отражать только виды продукции у которых тип номенклатуры - продукция
					Если ТипНоменклатуры <> Перечисление.ТипыНоменклатуры.Продукция Тогда
					    Продолжить;
					КонецЕсли;	
					
				ИначеЕсли ВидыПродукции.ТекущаяСтрока() = 3 Тогда
					// отражать только виды продукции у которых тип номенклатуры - работа или услуга
					Если (ТипНоменклатуры <> Перечисление.ТипыНоменклатуры.Работа)
					   и (ТипНоменклатуры <> Перечисление.ТипыНоменклатуры.Услуга) Тогда
					    Продолжить;
					КонецЕсли;
				КонецЕсли;
				
				ТаблицаСДанными.НоваяСтрока();
				ТаблицаСДанными.Месяц = НачМесяца(БухИт.НачДата);
				ТаблицаСДанными.ВидНоменклатуры = Операция.Дебет.ВидыНоменклатуры;
				ТаблицаСДанными.ВидРасхода = Операция.Дебет.ГруппыВидыРасходов;
				ТаблицаСДанными.НаименованиеОперации = Операция.СодержаниеПроводки;;
				ТаблицаСДанными.Сумма = БухИт.ДО();
				ТаблицаСДанными.Документ = Операция.Документ;;
			КонецЦикла;
			
		Иначе
			Предупреждение("В выбранном периоде формирования регистра, налоговый учет велся по другим правилам."+РазделительСтрок+
			               "Использовать выбранный режим формирования невозможно!"+РазделительСтрок+
						   "Возможно только использование режима формирования ""Прямые расходы с учетом распределения""", 60);
				Возврат;
 
			КонецЕсли;
		
	КонецЕсли;
	
	// Формирование строки-параметра для сортировки таблицы.
	СтрокаСортировки = "";
	Префикс = "";
	Для СчетчикЦикла = 1 По СписокВозможныхГруппировок.РазмерСписка() Цикл
		Если СписокВозможныхГруппировок.Пометка(СчетчикЦикла) = 1 Тогда
			Группировка = СписокВозможныхГруппировок.ПолучитьЗначение(СчетчикЦикла);
			СтрокаСортировки = СтрокаСортировки + Группировка +",";
			
			ТаблицаГруппировок.НоваяСтрока();
			ТаблицаГруппировок.ИмяГруппировки = Группировка;        
			Представление = "";
			СписокВозможныхГруппировок.ПолучитьЗначение(СчетчикЦикла, Представление);
			ТаблицаГруппировок.СинонимИмени = Представление;
			ТаблицаГруппировок.Значение = "Значение группировки не задано";
			ТаблицаГруппировок.ПрефиксКИмени = Префикс;
			Префикс = Префикс + "    ";
		КонецЕсли;
	КонецЦикла;
	
	СтрокаСортировки = СтрокаСортировки + "Документ";
	
	// сортируе таблицу указанным образом
	ТаблицаСДанными.Сортировать(СтрокаСортировки, 1);
	                
	// выбираем данные из таблицы
	ТаблицаСДанными.ВыбратьСтроки();
	Пока ТаблицаСДанными.ПолучитьСтроку() = 1 Цикл
		
		// смотрим какие имеются у нас группировки и обрабатываем их
		ТаблицаГруппировок.ВыбратьСтроки();
		Пока ТаблицаГруппировок.ПолучитьСтроку() = 1  Цикл
			ЗначениеГруппировки = ТаблицаСДанными.ПолучитьЗначение(ТаблицаСДанными.НомерСтроки, ТаблицаГруппировок.ИмяГруппировки);
			
			// если это новое значение группировки
			Если ТаблицаГруппировок.Значение <> ЗначениеГруппировки Тогда
				НоваяГруппа(ЗначениеГруппировки);
			КонецЕсли;                            
			
			ТаблицаГруппировок.Сумма = ТаблицаГруппировок.Сумма + ТаблицаСДанными.Сумма;
		КонецЦикла;              
		              
		// подготовка данных для вывода исходную таблицу
		Док = ТаблицаСДанными.Документ;
		ДатаОперации = Док.ДатаДок;
		ВидРасхода = ТаблицаСДанными.ВидРасхода;
		НаименованиеОперации = ТаблицаСДанными.НаименованиеОперации;
		Сумма = ТаблицаСДанными.Сумма;
		
		Таб.ВывестиСекцию("Строка");
	КонецЦикла;
	
	// необходимо вывести итоги по последним значениям группировок
	Если ТаблицаСДанными.КоличествоСтрок() <> 0 Тогда
		ТаблицаГруппировок.ВыбратьСтроки();
		Пока ТаблицаГруппировок.ПолучитьСтроку() = 1  Цикл
			ВыводИтоговПоПредыдущейГруппе();
		КонецЦикла;              
	КонецЕсли;
	
	ИтогоСтоимость = ФорматС(ТаблицаСДанными.Итог("Сумма"));
	ОтветственныйЗаСоставление = ФИО(Константа.ОтветственныйЗаСоставлениеРегистровНУ);
	
	Таб.ВывестиСекцию("Подвал");    
	
	Таб.ТолькоПросмотр(1);
	Таб.Опции(0, 0, 0, 0, "ПечатьРегистрУчетаПрямыхРасходов", "ОкноРегистрУчетаПрямыхРасходов");
	Таб.Показать("Регистр учета прямых расходов");
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРЕДОПРЕДЕЛЕННЫЕ ПРОЦЕДУРЫ
//

//******************************************************************************
// Предопределенная процедура
//
Процедура ПриОткрытии(ФлагЧтенияНастройки) //предопределенная
	
	Если ФлагЧтенияНастройки = 1 Тогда
		ПриВыбореРежимаФормирования();
		Возврат;
	КонецЕсли;
	
	НачДата = НачМесяца(РабочаяДата());
	КонДата = КонМесяца(РабочаяДата());
	
	СписокВозможныхГруппировок.ДобавитьЗначение("Месяц", "Месяц");
	СписокВозможныхГруппировок.ДобавитьЗначение("ВидНоменклатуры", "Вид номенклатуры");
	СписокВозможныхГруппировок.ДобавитьЗначение("ВидРасхода", "Вид расхода");

	РежимФормирования = 1;

	ВидыПродукции.ДобавитьЗначение(1, "Продукция, работы и услуги");
	ВидыПродукции.ДобавитьЗначение(2, "Только продукция (полуфабр.)");
	ВидыПродукции.ДобавитьЗначение(3, "Только работы и услуги");
	
	ВидыПродукции.ТекущаяСтрока(1);
	ПриВыбореРежимаФормирования();
	
КонецПроцедуры //ПриОткрытии()
