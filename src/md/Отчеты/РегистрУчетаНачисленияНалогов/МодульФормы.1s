Перем Таб;
Перем ВсегоНачисленоНалогов;
Перем ДатаНачалаНалоговогоПериода2003;
Перем ТаблицаНачислений;

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ МОДУЛЯ
//

//******************************************************************************
// ПроверкаПериода()
//
// Возвращаемое значение:
//  1 - корректно выбран период в диалоге
//  0 - не корректно выбран период в диалоге
//
// Описание:
// Функция проверяет корректность ввода интервала дат в дилоге
//
Функция ПроверкаПериода()                                     
	
	Если (НачДата > КонДата) Тогда
		Предупреждение("Неправильно задан период формирования отчета!"+РазделительСтрок+
		               "Дата начала больше даты окончания периода.", 60);
		Возврат 0;

	ИначеЕсли ПустоеЗначение(ДатаНачалаНалоговогоПериода2003) = 0 Тогда
		
		Если ((НачДата < ДатаНачалаНалоговогоПериода2003)
		   и  (КонДата >= ДатаНачалаНалоговогоПериода2003)) Тогда
			Предупреждение("Неправильно задан период формирования отчета!"+РазделительСтрок+
			               "В выбранном интервале налоговый учет велся по"+РазделительСтрок+
						   "разным правилам."+РазделительСтрок+
						   "Отчет за данный период сформировать невозможно!", 60);
			Возврат 0;
		    
		КонецЕсли;

	КонецЕсли;
	
	Возврат 1;
	
КонецФункции // ПроверкаПериода()

//******************************************************************************
// ФормированиеПоСтарому()
//
// Параметры:
//  Нет.
//
// Вызывается из формул элементов диалога:
//  Нет.
//
// Описание:
//  Здесь описывается процедура.
//
Процедура ФормированиеПоСтарому()
	
	//Создание объекта типа Запрос
	Запрос = СоздатьОбъект("Запрос");
	ТекстЗапроса = 
	"//{{ЗАПРОС(Сформировать)
	|Период с НачДата по КонДата;
	|ОбрабатыватьДокументы все;
	|Обрабатывать НеПомеченныеНаУдаление;
	|
	|ДатаДок = Документ.НачислениеНалогов.ДатаДок;
	|ВидНалога = Документ.НачислениеНалогов.ВидНалога;
	|ВидРасхода = Документ.НачислениеНалогов.ВидРасхода;
	|База = Документ.НачислениеНалогов.БазаНалога;
	|Ставка = Документ.НачислениеНалогов.Ставка;
	|Сумма = Документ.НачислениеНалогов.СуммаНалога;
	|               
	|Функция БазаСумма = Сумма(База);
	|Функция СуммаСумма = Сумма(Сумма);
	|
	|Группировка Документ;              
	|Группировка ВидНалога;
	|Группировка Ставка;
	|
	|Условие ((ВидРасхода <> Перечисление.ВидыРасходов.НеПринимаемые) 
	|       и (ВидРасхода <> Перечисление.ВидыРасходов.РасходыБудущихПериодов));
	|"//}}ЗАПРОС
	;
	
	Если ВыбНалог.Выбран() = 1 Тогда
	    ТекстЗапроса = ТекстЗапроса + "Условие (ВидНалога = ВыбНалог);";
	КонецЕсли;
	
	// Если ошибка в запросе, то выход из процедуры
	Если Запрос.Выполнить(ТекстЗапроса) = 1 Тогда
		Запрос.Выгрузить(ТаблицаНачислений,, 0);
	КонецЕсли;
    
	// Отберем проводки с кредита счета Н04.11 (РБП)
	Опер = СоздатьОбъект("Операция");  
	Опер.ВыбратьОперацииСПроводками(НачДата, КонДата, "*,Н04.11");
	Пока Опер.ПолучитьПроводку() = 1 Цикл
		СтатьяРасхода = Опер.Кредит.РасходыБудущихПериодов;
		ВидНалога = Опер.Кредит.НалогиИОтчисления;
		Если ВыбНалог.Выбран() = 0 Тогда
		ИначеЕсли ВидНалога <> ВыбНалог Тогда
			Продолжить;
		КонецЕсли;
		Сумма = Опер.Сумма;
		
		ТаблицаНачислений.НоваяСтрока();
		ТаблицаНачислений.Документ   = Опер.Документ;
		ТаблицаНачислений.ВидНалога = ВидНалога;
		ТаблицаНачислений.Ставка = СтатьяРасхода.ПолучитьАтрибут("Ставка" + СокрЛП(ВидНалога.Код));
		ТаблицаНачислений.БазаСумма = СтатьяРасхода.Сумма;
		ТаблицаНачислений.СуммаСумма = Опер.Сумма;
	КонецЦикла;
	
КонецПроцедуры // ФормированиеПоСтарому()

//******************************************************************************
// ФормированиеПоНовому()
//
// Параметры:
//  Нет.
//
// Вызывается из формул элементов диалога:
//  Нет.
//
// Описание:
//  Здесь описывается процедура.
//
Процедура ФормированиеПоНовому()
	
	Опер = СоздатьОбъект("Операция");  
	Опер.ВыбратьОперацииСПроводками(НачДата, КонДата, "Н01.05, Н04.11; Н01.06,Н04.11; Н07,Н04.11; Н09,Н04.11; Н01.05,Н15; Н01.06,Н15; Н07,Н15; Н09,Н15");
	Пока Опер.ПолучитьПроводку() = 1 Цикл
		
		ВидНалога = Опер.Кредит.НалогиИОтчисления;
		Если (ВидНалога.Код = "ФСС_НС") или (ВидНалога.Код = "ПФР_нак") или (ВидНалога.Код = "ПФР_страх")Тогда
			Продолжить;
		КонецЕсли;
				
		Если ВыбНалог.Выбран() = 0 Тогда
		ИначеЕсли ВидНалога <> ВыбНалог Тогда
			Продолжить;
		КонецЕсли;
		
		ТаблицаНачислений.НоваяСтрока();
		ТаблицаНачислений.Документ  = Опер.Документ;
		ТаблицаНачислений.ВидНалога = ВидНалога;
		
		Если Опер.Кредит.Счет.Код = "Н04.11" Тогда
			СтатьяРасхода = Опер.Кредит.РасходыБудущихПериодов;
			ТаблицаНачислений.Ставка    = СтатьяРасхода.ПолучитьАтрибут("Ставка" + СокрЛП(ВидНалога.Код));
			ТаблицаНачислений.БазаСумма = СтатьяРасхода.Сумма;
			
		ИначеЕсли Опер.Кредит.Счет.Код = "Н15" Тогда
			Если Опер.Документ.Вид() = "НачислениеНалогов" Тогда
				Опер.Документ.ПолучитьСтрокуПоНомеру(Опер.НомерСтрокиДокумента()); 
				ТаблицаНачислений.Ставка    = Опер.Документ.Ставка;
				ТаблицаНачислений.БазаСумма = Опер.Документ.БазаНалога;
			КонецЕсли;
		КонецЕсли;
		
		ТаблицаНачислений.СуммаСумма = Опер.Сумма;
		
	КонецЦикла;
	
	ТаблицаНачислений.Свернуть("Документ, ВидНалога, Ставка", "БазаСумма, СуммаСумма");
	
КонецПроцедуры // ФормированиеПоНовому()

//******************************************************************************
//
Процедура Сформировать()
	
	ДатаНачалаНалоговогоПериода2003 = ПолучитьПустоеЗначение("Дата");
	глНовыеПравилаВеденияНУ(КонДата, ДатаНачалаНалоговогоПериода2003);

	Если ПроверкаПериода() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Таб = СоздатьОбъект("Таблица");
	СтрНалогоплательщик = Константа.ОфициальноеНазваниеОрганизации;
	Если ПустаяСтрока(СтрНалогоплательщик) = 1 Тогда
	СтрНалогоплательщик = Константа.НазваниеОрганизации;	    
	КонецЕсли;
	ИНН = Константа.ИННОрганизации;
	Таб.ВывестиСекцию("Шапка");
	                          
	ТаблицаНачислений = СоздатьОбъект("ТаблицаЗначений");
	ТаблицаНачислений.НоваяКолонка("Документ", "Документ");
	ТаблицаНачислений.НоваяКолонка("ВидНалога");
	ТаблицаНачислений.НоваяКолонка("Ставка", "Число");
	ТаблицаНачислений.НоваяКолонка("БазаСумма", "Число" );
	ТаблицаНачислений.НоваяКолонка("СуммаСумма", "Число");
	
	ВсегоНачисленоНалогов = 0;
	
	Если глНовыеПравилаВеденияНУ(КонДата) = 0 Тогда
	    ФормированиеПоСтарому();
		
	Иначе
		ФормированиеПоНовому();
	КонецЕсли;
	
	ТаблицаНачислений.Сортировать("Документ", 1);
	
	ТаблицаНачислений.ВыбратьСтроки();
	Пока ТаблицаНачислений.ПолучитьСтроку() = 1 Цикл
		Документ = ТаблицаНачислений.Документ;
	    ДатаОсуществления = Документ.ДатаДок;
		ВидНалога = ТаблицаНачислений.ВидНалога;
		База = ФорматС(ТаблицаНачислений.БазаСумма);
		Ставка = ?(ТаблицаНачислений.Ставка > 0, "" + ТаблицаНачислений.Ставка + "%", "");
		Сумма = ФорматС(ТаблицаНачислений.СуммаСумма);
		Таб.ВывестиСекцию("Строка");
	КонецЦикла;
		
	ВсегоНачисленоНалогов = ФорматС(ТаблицаНачислений.Итог("СуммаСумма"));
	
	ОтветственныйЗаСоставление = ФИО(Константа.ОтветственныйЗаСоставлениеРегистровНУ);
	
	Таб.ВывестиСекцию("Подвал");
	Таб.ТолькоПросмотр(1);
	Таб.Опции(,2,,);
	Таб.Опции(0, 0, 0, 0, "ПечатьУчетНачисленияНалогов", "ОкноУчетНачисленияНалогов");
	Таб.Показать("Регистр учета начисления налогов, включаемых в состав расходов");

КонецПроцедуры // Сформировать()  

////////////////////////////////////////////////////////////////////////////////
// ПРЕДОПРЕДЕЛЕННЫЕ ПРОЦЕДУРЫ
//

//******************************************************************************
// Предопределенная процедура
//
Процедура ПриОткрытии()
	
	НачДата = НачалоПериодаБИ();
	КонДата = КонецПериодаБИ();
	
КонецПроцедуры // ПриОткрытии() 

//******************************************************************************
// Предопределенная процедура
//
Процедура ПриНачалеВыбораЗначения(ЭлементДиалога, Флаг)
	Если ЭлементДиалога = "ВыбНалог" Тогда
		Флаг = 0;
		СписокВариантов = СоздатьОбъект("СписокЗначений");
		СпрВариант = СоздатьОбъект("Справочник.НалогиИОтчисления");
		СпрВариант.ВыбратьЭлементы();
		Пока СпрВариант.ПолучитьЭлемент() = 1 Цикл
			Если (СпрВариант.Код = "ФСС_НС") или (СпрВариант.Код = "ПФР_нак") или (СпрВариант.Код = "ПФР_страх") Тогда
				Продолжить;
			КонецЕсли;
			СписокВариантов.ДобавитьЗначение(СпрВариант.ТекущийЭлемент());
		КонецЦикла;
		Если СписокВариантов.ВыбратьЗначение(ВыбНалог, , , , 2) = 0 Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры //  ПриНачалеВыбораЗначения()
