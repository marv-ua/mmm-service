////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ
// 
// Начальные установки для анализа
Перем ИдентификаторОтчета;
Перем ФонВыделения,ТекстВыделения;

// Таблицы для расчета показателей анализа доходов
Перем ПоказателиДоходов;
Перем ПоказателиДоходовРасшифровка;
Перем РасчетДоходовВыполнен;

// Таблицы для расчета показателей анализа расходов
Перем ПоказателиРасходов;
Перем ПоказателиРасходовРасшифровка;
Перем РасчетРасходовВыполнен;

// Таблицы для расчета показателей оценки имущества
Перем ПоказателиОценки;
Перем РасчетОценкиИмуществаВыполнен;

// Таблицы для расчета амортизируемого имущества
Перем АмортизируемоеИмущество;
Перем РасчетАмортизируемогоИмуществаВыполнен;

// Таблицы для расчета задолженностей и НДС по кредиторской задолженности
Перем СтруктураЗадолженностей;
Перем СтруктураЗадолженностейНДС;
Перем РасчетЗадолженностейВыполнен;
Перем СоставСчетовВРасчетеДебет;
Перем СоставСчетовВРасчетеКредит;
Перем СоставСчетовВРасчетеНДС;

// Переменные, которые отражают состояние загрузки показателей (они загружаются лишь однажды)
Перем ПоказателиДоходовЗагружены;
Перем ПоказателиРасходовЗагружены;
Перем ПоказателиОценкиИмуществаЗагружены;

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ МОДУЛЯ
// 
Процедура ПриВыбореЗакладки(Номер, Значение) Далее

//******************************************************************************
// ПолучитьПоказателиДоходов()
//
// Параметры:
//  Нет
//
// Возвращаемое значение:
//  Нет
//
// Описание:
//  Реализует заполнение таблицы ПоказателиДоходов и ПоказателиДоходовРасшифровка
//  начальными даннми из служебной таблицы
//
Процедура ПолучитьПоказателиДоходов()
    
	Таб = СоздатьОбъект("Таблица");
	Таб.ИсходнаяТаблица("Служебная");
	Таб.ВывестиСекцию("Секция_2");

	ПоказателиДоходов.УдалитьСтроки();
	Для т = 1 По 9 Цикл
		ПоказателиДоходов.НоваяСтрока();	
		ПоказателиДоходов.ИндексПоказателя = Число(СокрЛП(Таб.Область("П02"+?(т<10,"0","")+т+"01").Текст));
		ПоказателиДоходов.Наименование = СокрЛП(Таб.Область("П02"+?(т<10,"0","")+т+"03").Текст);
		ПоказателиДоходов.Комментарий = Строка(СокрЛП(Таб.Область("П02"+?(т<10,"0","")+т+"04").Текст));
		ПоказателиДоходов.КомментарийРазницы = Строка(СокрЛП(Таб.Область("П02"+?(т<10,"0","")+т+"05").Текст));

		// По умолчанию все показатели отображаются в свернутом виде
		ПоказателиДоходов.ПризнакРазворотаБУ = 0;    
		ПоказателиДоходов.ПризнакРазворотаНУ = 0;    

		// Таблица итогов для накопления результатов расшифровки непрямых показателей
		АнализПоказателейДоходов = СоздатьОбъект("ТаблицаЗначений");	
		АнализПоказателейДоходов.НоваяКолонка("ПризнакУчета");	
		АнализПоказателейДоходов.НоваяКолонка("Группировка1");	
		АнализПоказателейДоходов.НоваяКолонка("Группировка2");	
		АнализПоказателейДоходов.НоваяКолонка("Аналитика");	
		АнализПоказателейДоходов.НоваяКолонка("СуммаБУ", "Число",15,2);	
		АнализПоказателейДоходов.НоваяКолонка("СуммаНУ", "Число",15,2);	
		АнализПоказателейДоходов.НоваяКолонка("СчетчикСтрок", "Число",12);	
        АнализПоказателейДоходов.НоваяКолонка("НомерВТаблицеРасшифровки", "Число", 3);
		
		ПоказателиДоходов.АнализПоказателейДоходов = АнализПоказателейДоходов;    

	КонецЦикла;

	ПоказателиДоходовРасшифровка.УдалитьСтроки();
	
	Колонки = СоздатьОбъект("СписокЗначений");

	// строка начала таблицы данных в секции
	СтрНач = 15;
	
	// просмотр колонок
	Для т = 1 По Таб.ШиринаТаблицы() Цикл
		Заголовок = СокрЛП(Таб.Область("R"+СтрНач+"C"+т+":"+"R"+СтрНач+"C"+т).Текст);
		Если ПустаяСтрока(Заголовок) = 0 Тогда
			Колонки.ДобавитьЗначение(т,Заголовок);
		КонецЕсли;
		
	КонецЦикла;

	// инициализация таблицы значений
	Для т = 1 По (Таб.ВысотаТаблицы() - СтрНач) Цикл
		ПоказателиДоходовРасшифровка.НоваяСтрока();
		
		Для к = 1 По ПоказателиДоходовРасшифровка.КоличествоКолонок() Цикл
			НомКол = Колонки.Получить(ПоказателиДоходовРасшифровка.ПолучитьПараметрыКолонки(к));

			Если ПустоеЗначение(НомКол) = 0 Тогда
				Значение = СокрЛП(Таб.Область("R"+(т+СтрНач)+"C"+НомКол+":"+"R"+(т+СтрНач)+"C"+НомКол).Текст);
				
				Если ТипЗначенияСтр(ПоказателиДоходовРасшифровка.ПолучитьЗначение(т, НомКол)) = "Строка" Тогда
					ПоказателиДоходовРасшифровка.УстановитьЗначение(т, НомКол, СокрЛП(Значение));
					
				ИначеЕсли ТипЗначенияСтр(ПоказателиДоходовРасшифровка.ПолучитьЗначение(т, НомКол)) = "Число" Тогда
					ПоказателиДоходовРасшифровка.УстановитьЗначение(т, НомКол, Число(Значение));
					
				ИначеЕсли ТипЗначенияСтр(ПоказателиДоходовРасшифровка.ПолучитьЗначение(т, НомКол)) = "Счет" Тогда
					ПоказателиДоходовРасшифровка.УстановитьЗначение(т, НомКол, СчетПоКоду(Значение));
					
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
	КонецЦикла;

КонецПроцедуры  // ПолучитьПоказателиДоходов() 

Функция ОпределитьПрямыеИКосвенныеЗатратыПоНалогамСФОТ(СчетНалога)   
	
	Налоги = СоздатьОбъект("Справочник.НалогиИОтчисления");

	Если СчетНалога =  "69.1" Тогда
		Если Налоги.НайтиПоКоду("ФСС") = 1 Тогда
			Если Налоги.ПорядокОтраженияВНУ.Получить(Дата2) = Перечисление.ПорядокОтраженияНалоговНУ.ПропорциональноРасчетнойБазе Тогда
				Возврат 1;
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли СчетНалога =  "69.2.3" Тогда
		Если Налоги.НайтиПоКоду("ПФР_нак") = 1 Тогда
			Если Налоги.ПорядокОтраженияВНУ.Получить(Дата2) = Перечисление.ПорядокОтраженияНалоговНУ.ПропорциональноРасчетнойБазе Тогда
				Возврат 1;
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли СчетНалога =  "69.2.2" Тогда
		Если Налоги.НайтиПоКоду("ПФР_страх") = 1 Тогда
			Если Налоги.ПорядокОтраженияВНУ.Получить(Дата2) = Перечисление.ПорядокОтраженияНалоговНУ.ПропорциональноРасчетнойБазе Тогда
				Возврат 1;
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли СчетНалога =  "69.12" Тогда
		Если Налоги.НайтиПоКоду("ФСС_БЛ") = 1 Тогда
			Если Налоги.ПорядокОтраженияВНУ.Получить(Дата2) = Перечисление.ПорядокОтраженияНалоговНУ.ПропорциональноРасчетнойБазе Тогда
				Возврат 1;
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли СчетНалога =  "69.11" Тогда
		Если Налоги.НайтиПоКоду("ФСС_НС") = 1 Тогда
			Если Налоги.ПорядокОтраженияВНУ.Получить(Дата2) = Перечисление.ПорядокОтраженияНалоговНУ.ПропорциональноРасчетнойБазе Тогда
				Возврат 1;
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли СчетНалога =  "69.3.2" Тогда
		Если Налоги.НайтиПоКоду("ТФОМС") = 1 Тогда
			Если Налоги.ПорядокОтраженияВНУ.Получить(Дата2) = Перечисление.ПорядокОтраженияНалоговНУ.ПропорциональноРасчетнойБазе Тогда
				Возврат 1;
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли СчетНалога =  "69.3.1" Тогда
		Если Налоги.НайтиПоКоду("ФФОМС") = 1 Тогда
			Если Налоги.ПорядокОтраженияВНУ.Получить(Дата2) = Перечисление.ПорядокОтраженияНалоговНУ.ПропорциональноРасчетнойБазе Тогда
				Возврат 1;
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли СчетНалога =  "69.2.1" Тогда
		Если Налоги.НайтиПоКоду("ЕСН_ФБ") = 1 Тогда
			Если Налоги.ПорядокОтраженияВНУ.Получить(Дата2) = Перечисление.ПорядокОтраженияНалоговНУ.ПропорциональноРасчетнойБазе Тогда
				Возврат 1;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	Возврат 0; 
КонецФункции  

Процедура СоздатьСтрокуТаблицыРасходов(ТаблицаРасходов, КорСчет, ВидРасходовДляНалоговогоУчета, Субконто, Счет20, Сумма, ТекстСодержания = "");
	
		ТаблицаРасходов.НоваяСтрока();
		ТаблицаРасходов.Сумма =Сумма;
		ТаблицаРасходов.Комментарий = "ОБ(" + Счет20 +","+КорСчет + ") " + Субконто + ?(Сокрлп(ТекстСодержания)="", "", " (" + ТекстСодержания + ")");
		ТаблицаРасходов.Счет = Корсчет; 
		ТаблицаРасходов.Счет20 = Счет20; 
		ТаблицаРасходов.ВидЗатрат = ВидРасходовДляНалоговогоУчета;
		ТаблицаРасходов.СтатьяЗатрат = Субконто; 
КонецПроцедуры  
	

//******************************************************************************
// РассчитатьПрямыеИКосвенныеЗатраты97()
//
// Параметры:
//  Нет
//
// Возвращаемое значение:
//  Нет
//
// Описание:
//  доплняет таблицу "ТаблицаПрямыхРасходов" и "ТаблицаКосвенныхРасходов" 
//

Процедура РассчитатьПрямыеИКосвенныеЗатраты97(ТаблицаПрямыхРасходов, ТаблицаКосвенныхРасходов, Ит, КорСубконто = "", Счет20)
	
	Сумма = Ит.КорДО();	
	    
	НалогиСФОТ = СоздатьОбъект("Справочник.НалогиИОтчисления");
	Если (КорСубконто.ВидРасхода = Перечисление.ВидыРасходов.ПрямыеРасходы) И (Счет20.Код <> "23") Тогда 
	СтатьяЗатрат = Ит.Субконто();
		Если (СтатьяЗатрат.ВидРасходовДляНалоговогоУчета = Перечисление.ГруппыВидыРасходов.ЕСН) Тогда 
			СуммаЕСН_ФБ = КорСубконто.СуммаЕСН_ФБ;
			СуммаФСС = КорСубконто.СуммаФСС;
			СуммаФФОМС = КорСубконто.СуммаФФОМС;
			СуммаТФОМС = КорСубконто.СуммаТФОМС;
			Всего = СуммаЕСН_ФБ + СуммаФСС + СуммаФФОМС + СуммаТФОМС; 
			Если Всего <> 0 Тогда
				Если НалогиСФОТ.НайтиПоКоду("ТФОМС") = 1 Тогда
					СуммаНалога = Сумма * (СуммаТФОМС/Всего);
					Если (НалогиСФОТ.ПорядокОтраженияВНУ.Получить(Дата2) = Перечисление.ПорядокОтраженияНалоговНУ.ПропорциональноРасчетнойБазе) И (Счет20.Код <> "25") Тогда
						СоздатьСтрокуТаблицыРасходов(ТаблицаПрямыхРасходов, Ит.КорСчет, Ит.Субконто().ВидРасходовДляНалоговогоУчета, Ит.Субконто(), Счет20, СуммаНалога, НалогиСФОТ.Наименование);
					Иначе
						СоздатьСтрокуТаблицыРасходов(ТаблицаКосвенныхРасходов, Ит.КорСчет, Ит.Субконто().ВидРасходовДляНалоговогоУчета, Ит.Субконто(), Счет20, СуммаНалога, НалогиСФОТ.Наименование);
					КонецЕсли;
				КонецЕсли; 
				
				Если НалогиСФОТ.НайтиПоКоду("ФФОМС") = 1 Тогда  
					СуммаНалога = Сумма * (СуммаФФОМС/Всего); 
					Если (НалогиСФОТ.ПорядокОтраженияВНУ.Получить(Дата2) = Перечисление.ПорядокОтраженияНалоговНУ.ПропорциональноРасчетнойБазе) И (Счет20.Код <> "25") Тогда
						СоздатьСтрокуТаблицыРасходов(ТаблицаПрямыхРасходов, Ит.КорСчет, Ит.Субконто().ВидРасходовДляНалоговогоУчета, Ит.Субконто(), Счет20, СуммаНалога, НалогиСФОТ.Наименование);
					Иначе
						СоздатьСтрокуТаблицыРасходов(ТаблицаКосвенныхРасходов, Ит.КорСчет, Ит.Субконто().ВидРасходовДляНалоговогоУчета, Ит.Субконто(), Счет20, СуммаНалога, НалогиСФОТ.Наименование);
					КонецЕсли;
				КонецЕсли; 
				
				Если НалогиСФОТ.НайтиПоКоду("ЕСН_ФБ") = 1 Тогда 
					СуммаНалога = Сумма * (СуммаЕСН_ФБ/Всего); 
					Если (НалогиСФОТ.ПорядокОтраженияВНУ.Получить(Дата2) = Перечисление.ПорядокОтраженияНалоговНУ.ПропорциональноРасчетнойБазе) И (Счет20.Код <> "25") Тогда
						СоздатьСтрокуТаблицыРасходов(ТаблицаПрямыхРасходов, Ит.КорСчет, Ит.Субконто().ВидРасходовДляНалоговогоУчета, Ит.Субконто(), Счет20, СуммаНалога, НалогиСФОТ.Наименование);
					Иначе
						СоздатьСтрокуТаблицыРасходов(ТаблицаКосвенныхРасходов, Ит.КорСчет, Ит.Субконто().ВидРасходовДляНалоговогоУчета, Ит.Субконто(), Счет20, СуммаНалога, НалогиСФОТ.Наименование);
					КонецЕсли;
				КонецЕсли;  
				
				Если НалогиСФОТ.НайтиПоКоду("ФСС") = 1 Тогда 
					СуммаНалога = Сумма * (СуммаФСС/Всего); 
					Если (НалогиСФОТ.ПорядокОтраженияВНУ.Получить(Дата2) = Перечисление.ПорядокОтраженияНалоговНУ.ПропорциональноРасчетнойБазе) И (Счет20.Код <> "25") Тогда
						СоздатьСтрокуТаблицыРасходов(ТаблицаПрямыхРасходов, Ит.КорСчет, Ит.Субконто().ВидРасходовДляНалоговогоУчета, Ит.Субконто(), Счет20, СуммаНалога, НалогиСФОТ.Наименование);
					Иначе
						СоздатьСтрокуТаблицыРасходов(ТаблицаКосвенныхРасходов, Ит.КорСчет, Ит.Субконто().ВидРасходовДляНалоговогоУчета, Ит.Субконто(), Счет20, СуммаНалога, НалогиСФОТ.Наименование);
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;	
		ИначеЕсли (СтатьяЗатрат.ВидРасходовДляНалоговогоУчета = Перечисление.ГруппыВидыРасходов.НалогиИСборы) Тогда  
			СуммаПФР_страх = КорСубконто.СуммаПФР_страх;
			СуммаПФР_нак   = КорСубконто.СуммаПФР_нак;
			СуммаФСС_НС    = КорСубконто.СуммаФСС_НС; 
			Всего =  СуммаПФР_страх + СуммаПФР_нак + СуммаФСС_НС;
			Если Всего <> 0 Тогда
				Если НалогиСФОТ.НайтиПоКоду("ПФР_страх") = 1 Тогда  
					СуммаНалога = Сумма * (СуммаПФР_страх/Всего); 
					Если (НалогиСФОТ.ПорядокОтраженияВНУ.Получить(Дата2) = Перечисление.ПорядокОтраженияНалоговНУ.ПропорциональноРасчетнойБазе) И (Счет20.Код <> "25") Тогда
						СоздатьСтрокуТаблицыРасходов(ТаблицаПрямыхРасходов, Ит.КорСчет, Ит.Субконто().ВидРасходовДляНалоговогоУчета, Ит.Субконто(), Счет20, СуммаНалога, НалогиСФОТ.Наименование);
					Иначе
						СоздатьСтрокуТаблицыРасходов(ТаблицаКосвенныхРасходов, Ит.КорСчет, Ит.Субконто().ВидРасходовДляНалоговогоУчета, Ит.Субконто(), Счет20, СуммаНалога, НалогиСФОТ.Наименование);
					КонецЕсли;
				КонецЕсли; 
				
				Если НалогиСФОТ.НайтиПоКоду("ПФР_нак") = 1 Тогда 
					СуммаНалога = Сумма * (СуммаПФР_нак/Всего); 
					Если (НалогиСФОТ.ПорядокОтраженияВНУ.Получить(Дата2) = Перечисление.ПорядокОтраженияНалоговНУ.ПропорциональноРасчетнойБазе) И (Счет20.Код <> "25") Тогда
						СоздатьСтрокуТаблицыРасходов(ТаблицаПрямыхРасходов, Ит.КорСчет, Ит.Субконто().ВидРасходовДляНалоговогоУчета, Ит.Субконто(), Счет20, СуммаНалога, НалогиСФОТ.Наименование);
					Иначе
						СоздатьСтрокуТаблицыРасходов(ТаблицаКосвенныхРасходов, Ит.КорСчет, Ит.Субконто().ВидРасходовДляНалоговогоУчета, Ит.Субконто(), Счет20, СуммаНалога, НалогиСФОТ.Наименование);
					КонецЕсли;
				КонецЕсли;  
				
				Если НалогиСФОТ.НайтиПоКоду("ФСС_НС") = 1 Тогда  
					СуммаНалога = Сумма * (СуммаФСС_НС/Всего); 
					Если (НалогиСФОТ.ПорядокОтраженияВНУ.Получить(Дата2) = Перечисление.ПорядокОтраженияНалоговНУ.ПропорциональноРасчетнойБазе) И (Счет20.Код <> "25") Тогда
						СоздатьСтрокуТаблицыРасходов(ТаблицаПрямыхРасходов, Ит.КорСчет, Ит.Субконто().ВидРасходовДляНалоговогоУчета, Ит.Субконто(), Счет20, СуммаНалога, НалогиСФОТ.Наименование);
					Иначе
						СоздатьСтрокуТаблицыРасходов(ТаблицаКосвенныхРасходов, Ит.КорСчет, Ит.Субконто().ВидРасходовДляНалоговогоУчета, Ит.Субконто(), Счет20, СуммаНалога, НалогиСФОТ.Наименование);
					КонецЕсли;
				КонецЕсли; 
			КонецЕсли;	
		Иначе
			Если (Счет20.Код <> "25") И (Счет20.Код <> "26") Тогда
				СоздатьСтрокуТаблицыРасходов(ТаблицаПрямыхРасходов, Ит.КорСчет, Ит.Субконто().ВидРасходовДляНалоговогоУчета, Ит.Субконто(), Счет20, Сумма);
			Иначе
				СоздатьСтрокуТаблицыРасходов(ТаблицаКосвенныхРасходов, Ит.КорСчет, Ит.Субконто().ВидРасходовДляНалоговогоУчета, Ит.Субконто(), Счет20, Сумма);
			КонецЕсли;
		КонецЕсли; 
	ИначеЕсли Счет20.Код = "23" Тогда 
		СоздатьСтрокуТаблицыРасходов(ТаблицаКосвенныхРасходов, Ит.КорСчет, "", "", Счет20, Сумма);
	Иначе 
		СоздатьСтрокуТаблицыРасходов(ТаблицаКосвенныхРасходов, Ит.КорСчет, Ит.Субконто().ВидРасходовДляНалоговогоУчета, Ит.Субконто(), Счет20, Сумма);
	КонецЕсли; 
	
КонецПроцедуры

//******************************************************************************
// РассчитатьКосвенныеЗатраты()
//
// Параметры:
//  Нет
//
// Возвращаемое значение:
//  Нет
//
// Описание:
//  доплняет таблицу "ТаблицаКосвенныхРасходов" оборотами счетов 23,25,26,29
//
Процедура РассчитатьПрямыеКосвенныеЗатраты(ТаблицаПрямыхРасходов, ТаблицаКосвенныхРасходов, КодСчета, ВидСубконтоСчета) 
	
	ФлагПрямогоРасхода = 0;  
	// Прямыми затратами могут быть только обороты 69 и 97 счетов
	Если Лев(КодСчета, 2) = "69" Тогда
		ФлагПрямогоРасхода = ОпределитьПрямыеИКосвенныеЗатратыПоНалогамСФОТ(КодСчета);
	КонецЕсли;    
	
	Ит = СоздатьОбъект("БухгалтерскиеИтоги"); 
	Если КодСчета <>"23" Тогда
		Ит.ИспользоватьСубконто(ВидСубконтоСчета);
	КонецЕсли;    
	Ит.ИспользоватьКорСубконто(); 
	Ит.ВключатьСубсчета( ,1);  
	Если ПустоеЗначение(ВыбраннаяФирма) = 0 Тогда
		Ит.ИспользоватьРазделительУчета(ВыбраннаяФирма);
	КонецЕсли;
	Ит.ВыполнитьЗапрос(Дата1, Дата2, КодСчета,,, 3,, "С");   
	
	Ит.ВыбратьКорСчета();
	Пока Ит.ПолучитьКорСчет() = 1 Цикл 
		Если Ит.Корсчет.Этогруппа() = 1 Тогда
			Продолжить;
		КонецЕсли;  
		Если КодСчета = "23" Тогда    
			Если Ит.Корсчет.Код = "20" Тогда
				Продолжить;
			КонецЕсли;
			Если Лев(Ит.Корсчет.Код,2) = "02" Тогда
				Продолжить;
			КонецЕсли;
			Сумма = Ит.КорДО(); 
			Если Сумма = 0 Тогда
				Продолжить;
			КонецЕсли; 
			
			Если Ит.Корсчет = СчетПоКоду("97") Тогда
				Ит.ВыбратьКорСубконто();
				Пока Ит.ПолучитьКорСубконто() = 1 Цикл   
					РассчитатьПрямыеИКосвенныеЗатраты97(ТаблицаПрямыхРасходов, ТаблицаКосвенныхРасходов, Ит, Ит.КорСубконто(), СчетПоКоду("23"));
				КонецЦикла; 
			Иначе
				Если ФлагПрямогоРасхода = 1 Тогда
					СоздатьСтрокуТаблицыРасходов(ТаблицаПрямыхРасходов, Ит.КорСчет,  , "" , СчетПоКоду("23"), Сумма);
				Иначе
					СоздатьСтрокуТаблицыРасходов(ТаблицаКосвенныхРасходов, Ит.КорСчет,  , "" , СчетПоКоду("23"), Сумма);
				КонецЕсли;  
			КонецЕсли;
		Иначе
			Ит.ВыбратьСубконто(ВидСубконтоСчета);
			Пока Ит.ПолучитьСубконто(ВидСубконтоСчета) = 1 Цикл  
				
				Если Ит.Субконто().ВидРасходовДляНалоговогоУчета = Перечисление.ГруппыВидыРасходов.Амортизация Тогда
					Продолжить;
				КонецЕсли;  
				
				Сумма = Ит.КорДО(); 
				Если Сумма = 0 Тогда
					Продолжить;
				КонецЕсли; 
				Если Ит.Корсчет = СчетПоКоду("97") Тогда
					Ит.ВыбратьКорСубконто();
					Пока Ит.ПолучитьКорСубконто() = 1 Цикл   
						РассчитатьПрямыеИКосвенныеЗатраты97(ТаблицаПрямыхРасходов, ТаблицаКосвенныхРасходов, Ит, Ит.КорСубконто(), Ит.Счет);
					КонецЦикла; 
				Иначе
					Если ФлагПрямогоРасхода = 1 Тогда
						СоздатьСтрокуТаблицыРасходов(ТаблицаПрямыхРасходов, Ит.КорСчет, Ит.Субконто(ВидСубконтоСчета).ВидРасходовДляНалоговогоУчета,  Ит.Субконто(ВидСубконтоСчета) , СчетПоКоду(КодСчета), Сумма);
					Иначе
						СоздатьСтрокуТаблицыРасходов(ТаблицаКосвенныхРасходов, Ит.КорСчет, Ит.Субконто(ВидСубконтоСчета).ВидРасходовДляНалоговогоУчета,  Ит.Субконто(ВидСубконтоСчета) , СчетПоКоду(КодСчета), Сумма);
					КонецЕсли; 
				КонецЕсли;
			КонецЦикла; 
		КонецЕсли;
	КонецЦикла; 
КонецПроцедуры 

//******************************************************************************
// РассчитатьПрямыеИКосвенныеЗатратыСчет20()
//
// Параметры:
//  Нет
//
// Возвращаемое значение:
//  Нет
//
// Описание:
//  доплняет таблицу "ТаблицаПрямыхРасходов" и "ТаблицаКосвенныхРасходов" по данным оборотов счета 20
//

Процедура РассчитатьПрямыеИКосвенныеЗатратыСчет20(ТаблицаПрямыхРасходов, ТаблицаКосвенныхРасходов, Ит, ПереченьСтатейЗатрат, КорСубконто = ""); 
	
	Если Ит.КорСчет.Код = "10.7" Тогда
		ФлагПрямогоРасхода = глОпределитьПрямыеРасходыПроизводстваБезАналитики(Ит.Субконто(ВидыСубконто.СтатьиЗатратНаПроизводство), КорСубконто.СубСчет10, ПереченьСтатейЗатрат);
	
	ИначеЕсли Ит.КорСчет.ПринадлежитГруппе(СчетПОкоду("69")) =1 Тогда
		
		ФлагПрямогоРасхода = ОпределитьПрямыеИКосвенныеЗатратыПоНалогамСФОТ(Ит.КорСчет.Код);
	Иначе 
		ФлагПрямогоРасхода = глОпределитьПрямыеРасходыПроизводстваБезАналитики(Ит.Субконто(ВидыСубконто.СтатьиЗатратНаПроизводство), Ит.КорСчет, ПереченьСтатейЗатрат);
	КонецЕсли; 

	Если ФлагПрямогоРасхода = 1 Тогда  
		СоздатьСтрокуТаблицыРасходов(ТаблицаПрямыхРасходов, Ит.КорСчет, Ит.Субконто(ВидыСубконто.СтатьиЗатратНаПроизводство).ВидРасходовДляНалоговогоУчета, Ит.Субконто(ВидыСубконто.СтатьиЗатратНаПроизводство), СчетПоКоду("20"), Ит.КорДО());
	Иначе 
		СоздатьСтрокуТаблицыРасходов(ТаблицаКосвенныхРасходов, Ит.КорСчет, Ит.Субконто(ВидыСубконто.СтатьиЗатратНаПроизводство).ВидРасходовДляНалоговогоУчета, Ит.Субконто(ВидыСубконто.СтатьиЗатратНаПроизводство), СчетПоКоду("20"), Ит.КорДО());
	КонецЕсли;	 
		
КонецПроцедуры
//******************************************************************************
// ПолучитьПоказателиРасходов()
//
// Параметры:
//  Нет
//
// Возвращаемое значение:
//  Нет
//
// Описание:
//  Реализует заполнение таблицы ПоказателиРасходов и ПоказателиРасходовРасшифровка
//  начальными даннми из служебной таблицы
//
Процедура ПолучитьПоказателиРасходов()
    
	Таб = СоздатьОбъект("Таблица");
	Таб.ИсходнаяТаблица("Служебная");
	Таб.ВывестиСекцию("Секция_3");

	ПоказателиРасходов.УдалитьСтроки();
	Для т = 1 По 8 Цикл
		ПоказателиРасходов.НоваяСтрока();	
		ПоказателиРасходов.ИндексПоказателя = Число(СокрЛП(Таб.Область("П03"+?(т<10,"0","")+т+"01").Текст));
		ПоказателиРасходов.Наименование = СокрЛП(Таб.Область("П03"+?(т<10,"0","")+т+"02").Текст);
		ПоказателиРасходов.Комментарий = Строка(СокрЛП(Таб.Область("П03"+?(т<10,"0","")+т+"03").Текст));
		ПоказателиРасходов.КомментарийРазницы = Строка(СокрЛП(Таб.Область("П03"+?(т<10,"0","")+т+"04").Текст));

		ПоказателиРасходов.ПризнакРазворотаБУ = 0;    
		ПоказателиРасходов.ПризнакРазворотаНУ = 0;    

		// Таблица итогов для накопления результатов расшифровки непрямых показателей
		АнализПоказателейРасходов = СоздатьОбъект("ТаблицаЗначений");	
		АнализПоказателейРасходов.НоваяКолонка("ПризнакУчета");	
		АнализПоказателейРасходов.НоваяКолонка("Группировка1");	
		АнализПоказателейРасходов.НоваяКолонка("Группировка2");	
		АнализПоказателейРасходов.НоваяКолонка("Аналитика");	
		АнализПоказателейРасходов.НоваяКолонка("СуммаБУ", "Число",15,2);	
		АнализПоказателейРасходов.НоваяКолонка("СуммаНУ", "Число",15,2);	
		АнализПоказателейРасходов.НоваяКолонка("СчетчикСтрок", "Число",12);	
		АнализПоказателейРасходов.НоваяКолонка("НомерВТаблицеРасшифровки", "Число", 3);

		ПоказателиРасходов.АнализПоказателейРасходов = АнализПоказателейРасходов;    

	КонецЦикла;

	ПоказателиРасходовРасшифровка.УдалитьСтроки();
	
	Колонки = СоздатьОбъект("СписокЗначений");

	// строка начала таблицы данных в секции
	СтрНач = 14;
	
	// просмотр колонок
	Для т = 1 По Таб.ШиринаТаблицы() Цикл
		Заголовок = СокрЛП(Таб.Область("R"+СтрНач+"C"+т+":"+"R"+СтрНач+"C"+т).Текст);
		Если ПустаяСтрока(Заголовок) = 0 Тогда
			Колонки.ДобавитьЗначение(т,Заголовок);
		КонецЕсли;
		
	КонецЦикла;     
	
		ПереченьСтатейЗатрат = глПолучитьПереченьСтатейЗатрат(Дата2); 
	Если ПереченьСтатейЗатрат = "Отказ" Тогда
		Сообщить("Не определен перечень прямых затрат производства");
		Возврат;
	КонецЕсли;
	
	ТаблицаПрямыхРасходов = СоздатьОбъект("ТаблицаЗначений");
	ТаблицаПрямыхРасходов.НоваяКолонка("Сумма", "Число", 17, 2);
	ТаблицаПрямыхРасходов.НоваяКолонка("Комментарий", "Строка", 100);
	ТаблицаПрямыхРасходов.НоваяКолонка("ВидЗатрат", Перечисление.ГруппыВидыРасходов); 
	ТаблицаПрямыхРасходов.НоваяКолонка("Счет"); 
	ТаблицаПрямыхРасходов.НоваяКолонка("Счет20");
	ТаблицаПрямыхРасходов.НоваяКолонка("СтатьяЗатрат", "Справочник");
	
	ТаблицаКосвенныхРасходов = СоздатьОбъект("ТаблицаЗначений");
	ТаблицаКосвенныхРасходов.НоваяКолонка("Сумма", "Число", 17, 2);
	ТаблицаКосвенныхРасходов.НоваяКолонка("Комментарий", "Строка", 100); 
	ТаблицаКосвенныхРасходов.НоваяКолонка("ВидЗатрат", Перечисление.ГруппыВидыРасходов); 
	ТаблицаКосвенныхРасходов.НоваяКолонка("Счет");
	ТаблицаКосвенныхРасходов.НоваяКолонка("Счет20");
	ТаблицаКосвенныхРасходов.НоваяКолонка("СтатьяЗатрат", "Справочник");
	
	Ит = СоздатьОбъект("БухгалтерскиеИтоги");
	Ит.ИспользоватьСубконто(ВидыСубконто.СтатьиЗатратНаПроизводство); 
	Ит.ИспользоватьКорСубконто(); 
	Если ПустоеЗначение(ВыбраннаяФирма) = 0 Тогда
		Ит.ИспользоватьРазделительУчета(ВыбраннаяФирма);
	КонецЕсли;
	Ит.ВключатьСубсчета( ,1);
	Ит.ВыполнитьЗапрос(Дата1, Дата2, "20",,, 3,, "С");
	Ит.ВыбратьСубконто(ВидыСубконто.СтатьиЗатратНаПроизводство);
	Пока Ит.ПолучитьСубконто(ВидыСубконто.СтатьиЗатратНаПроизводство) = 1 Цикл  
		
		Если Ит.Субконто().ВидРасходовДляНалоговогоУчета = Перечисление.ГруппыВидыРасходов.Амортизация Тогда
			Продолжить;
		КонецЕсли;  
		
		Ит.ВыбратьКорСчета();
		Пока Ит.ПолучитьКорСчет() = 1 Цикл 
			Если Ит.Корсчет.Этогруппа() = 1 Тогда
			    Продолжить;
			КонецЕсли; 
			Если (Ит.Корсчет = СчетПоКоду("23")) Или 
			     (Ит.Корсчет = СчетПоКоду("25")) Или 
				 (Ит.Корсчет = СчетПоКоду("26")) Или 
				 (Ит.Корсчет = СчетПоКоду("29")) Тогда
			    Продолжить;
			КонецЕсли;

			Если Ит.КорДО() = 0 Тогда
			    Продолжить;
			КонецЕсли; 
			
			Если (Ит.КорСчет.Код = "10.7") Тогда
				Ит.ВыбратьКорСубконто();
				Пока Ит.ПолучитьКорСубконто() = 1 Цикл   
					РассчитатьПрямыеИКосвенныеЗатратыСчет20(ТаблицаПрямыхРасходов, ТаблицаКосвенныхРасходов, Ит, ПереченьСтатейЗатрат, Ит.КорСубконто());
				КонецЦикла;
			ИначеЕсли Ит.Корсчет = СчетПоКоду("97") Тогда
				Ит.ВыбратьКорСубконто();
				Пока Ит.ПолучитьКорСубконто() = 1 Цикл   
					РассчитатьПрямыеИКосвенныеЗатраты97(ТаблицаПрямыхРасходов, ТаблицаКосвенныхРасходов, Ит, Ит.КорСубконто(), СчетПоКоду("20"));
				КонецЦикла;
			Иначе
				РассчитатьПрямыеИКосвенныеЗатратыСчет20(ТаблицаПрямыхРасходов, ТаблицаКосвенныхРасходов, Ит, ПереченьСтатейЗатрат);
				
			КонецЕсли;   
			
		КонецЦикла;
	КонецЦикла;  
	
РассчитатьПрямыеКосвенныеЗатраты(ТаблицаПрямыхРасходов, ТаблицаКосвенныхРасходов, "23", ВидыСубконто.СтатьиОбщепроизводственныхЗатрат);	
РассчитатьПрямыеКосвенныеЗатраты(ТаблицаПрямыхРасходов, ТаблицаКосвенныхРасходов, "25", ВидыСубконто.СтатьиОбщепроизводственныхЗатрат);
РассчитатьПрямыеКосвенныеЗатраты(ТаблицаПрямыхРасходов, ТаблицаКосвенныхРасходов, "26", ВидыСубконто.СтатьиОбщехозяйственныхЗатрат);
РассчитатьПрямыеКосвенныеЗатраты(ТаблицаПрямыхРасходов, ТаблицаКосвенныхРасходов, "29", ВидыСубконто.СтатьиЗатратОбслуживающихПроизводств);   
	
	НомСтр =1;
	// инициализация таблицы значений
	Для т = 1 По (Таб.ВысотаТаблицы() - СтрНач) Цикл
		Значение = СокрЛП(Таб.Область("R"+(т+СтрНач)+"C7:R"+(т+СтрНач)+"C7").Текст);
		Если (Найти(Значение,"ПереченьПрямыхРасходов") <> 0)  Тогда  
			ТаблицаПрямыхРасходов.ВыбратьСтроки();
			Пока ТаблицаПрямыхРасходов.ПолучитьСтроку() = 1 Цикл  
				ПоказателиРасходовРасшифровка.НоваяСтрока();    НомСтр = НомСтр + 1;	
				ПоказателиРасходовРасшифровка.ИндексПоказателя = 1;
				ПоказателиРасходовРасшифровка.ПризнакУчета = "БУ";
				ПоказателиРасходовРасшифровка.ЗнакСоставляющей = 1;
				ПоказателиРасходовРасшифровка.Сумма = ТаблицаПрямыхРасходов.Сумма;
				ПоказателиРасходовРасшифровка.Счет = ТаблицаПрямыхРасходов.Счет20;
				ПоказателиРасходовРасшифровка.КоррСчет = ТаблицаПрямыхРасходов.Счет; 
				ПоказателиРасходовРасшифровка.ТипФильтрации = "субконто"; 
				Если ТаблицаПрямыхРасходов.СтатьяЗатрат.Выбран() = 1 Тогда
					ПоказателиРасходовРасшифровка.ТипФильтрации = "субконто"; 
					ПоказателиРасходовРасшифровка.ИдРеквизита = "";
					ПоказателиРасходовРасшифровка.Элемент = ТаблицаПрямыхРасходов.СтатьяЗатрат; 
					ПоказателиРасходовРасшифровка.ТипАналитики = "ВидСубконто.СтатьиЗатратНаПроизводство";
					ПоказателиРасходовРасшифровка.ТипАналитикиСправочника = ВидыСубконто.СтатьиЗатратНаПроизводство;
				ИначеЕсли ТаблицаПрямыхРасходов.ВидЗатрат.Выбран() = 1 Тогда
					ПоказателиРасходовРасшифровка.ТипФильтрации = "реквизит";   
					ПоказателиРасходовРасшифровка.ИдРеквизита = "ВидРасходовДляНалоговогоУчета";
					ПоказателиРасходовРасшифровка.ИдАналитики = ТаблицаПрямыхРасходов.ВидЗатрат;
				КонецЕсли;
				ПоказателиРасходовРасшифровка.Группировка1 = ТаблицаПрямыхРасходов.Комментарий;
				ПоказателиРасходовРасшифровка.Группировка2 = ТаблицаПрямыхРасходов.Комментарий;
				
			КонецЦикла; 
			
			
		ИначеЕсли (Найти(Значение, "ПереченьКосвенныхРасходов") <> 0)  Тогда
			ТаблицаКосвенныхРасходов.ВыбратьСтроки();
			Пока ТаблицаКосвенныхРасходов.ПолучитьСтроку() = 1 Цикл
				ПоказателиРасходовРасшифровка.НоваяСтрока();    НомСтр = НомСтр + 1;	
				ПоказателиРасходовРасшифровка.ИндексПоказателя = 2; 
				ПоказателиРасходовРасшифровка.ЗнакСоставляющей = 1;
				ПоказателиРасходовРасшифровка.Сумма = ТаблицаКосвенныхРасходов.Сумма;
				ПоказателиРасходовРасшифровка.ПризнакУчета = "БУ";
				ПоказателиРасходовРасшифровка.Счет = ТаблицаКосвенныхРасходов.Счет20;
				ПоказателиРасходовРасшифровка.КоррСчет = ТаблицаКосвенныхРасходов.Счет;
				ПоказателиРасходовРасшифровка.ТипФильтрации = "субконто"; 
				Если ТаблицаКосвенныхРасходов.СтатьяЗатрат.Выбран() = 1 Тогда
					ПоказателиРасходовРасшифровка.ТипФильтрации = "субконто"; 
					ПоказателиРасходовРасшифровка.ИдРеквизита = "";
					ПоказателиРасходовРасшифровка.Элемент = ТаблицаКосвенныхРасходов.СтатьяЗатрат; 
					ПоказателиРасходовРасшифровка.ТипАналитики = "ВидСубконто.СтатьиЗатратНаПроизводство";
					Если ТаблицаКосвенныхРасходов.Счет20.Код = "20" Тогда
						ПоказателиРасходовРасшифровка.ТипАналитикиСправочника = ВидыСубконто.СтатьиЗатратНаПроизводство;
					КонецЕсли; 
					Если ТаблицаКосвенныхРасходов.Счет20.Код = "25" Тогда
						ПоказателиРасходовРасшифровка.ТипАналитикиСправочника = ВидыСубконто.СтатьиОбщепроизводственныхЗатрат;
					КонецЕсли; 
					Если ТаблицаКосвенныхРасходов.Счет20.Код = "26" Тогда
						ПоказателиРасходовРасшифровка.ТипАналитикиСправочника = ВидыСубконто.СтатьиОбщехозяйственныхЗатрат;
					КонецЕсли; 
					Если ТаблицаКосвенныхРасходов.Счет20.Код = "29" Тогда
						ПоказателиРасходовРасшифровка.ТипАналитикиСправочника = ВидыСубконто.СтатьиЗатратОбслуживающихПроизводств;
					КонецЕсли; 
				ИначеЕсли ТаблицаКосвенныхРасходов.Счет20.Код = "23" Тогда
					ПоказателиРасходовРасшифровка.ТипАналитикиСправочника = ВидыСубконто.СтатьиЗатратНаПроизводство;
				ИначеЕсли ТаблицаКосвенныхРасходов.ВидЗатрат.Выбран() = 1 Тогда
					ПоказателиРасходовРасшифровка.ТипФильтрации = "реквизит";   
					ПоказателиРасходовРасшифровка.ИдРеквизита = "ВидРасходовДляНалоговогоУчета";
					ПоказателиРасходовРасшифровка.ИдАналитики = ТаблицаКосвенныхРасходов.ВидЗатрат;
				КонецЕсли;
				ПоказателиРасходовРасшифровка.Группировка1 = ТаблицаКосвенныхРасходов.Комментарий;
				ПоказателиРасходовРасшифровка.Группировка2 = ТаблицаКосвенныхРасходов.Комментарий; 
				ПоказателиРасходовРасшифровка.Сумма = ТаблицаКосвенныхРасходов.Сумма;	
			КонецЦикла; 
		Иначе
		ПоказателиРасходовРасшифровка.НоваяСтрока(); 
			Для к = 1 По ПоказателиРасходовРасшифровка.КоличествоКолонок() Цикл
				НомКол = Колонки.Получить(ПоказателиРасходовРасшифровка.ПолучитьПараметрыКолонки(к));
				
				Если ПустоеЗначение(НомКол) = 0 Тогда
					Значение = СокрЛП(Таб.Область("R"+(т+СтрНач)+"C"+НомКол+":"+"R"+(т+СтрНач)+"C"+НомКол).Текст);
					Если ТипЗначенияСтр(ПоказателиРасходовРасшифровка.ПолучитьЗначение(НомСтр, НомКол)) = "Строка" Тогда
						ПоказателиРасходовРасшифровка.УстановитьЗначение(НомСтр, НомКол, СокрЛП(Значение));
						
					ИначеЕсли ТипЗначенияСтр(ПоказателиРасходовРасшифровка.ПолучитьЗначение(НомСтр, НомКол)) = "Число" Тогда
						ПоказателиРасходовРасшифровка.УстановитьЗначение(НомСтр, НомКол, Число(Значение));
						
					ИначеЕсли ТипЗначенияСтр(ПоказателиРасходовРасшифровка.ПолучитьЗначение(НомСтр, НомКол)) = "Счет" Тогда
						ПоказателиРасходовРасшифровка.УстановитьЗначение(НомСтр, НомКол, СчетПоКоду(Значение));
						
					КонецЕсли;

				КонецЕсли;
			КонецЦикла;
		НомСтр = НомСтр + 1; 	
		КонецЕсли;
	КонецЦикла;     
	
КонецПроцедуры  // ПолучитьПоказателиРасходов()

//******************************************************************************
// ПолучитьПоказателиОценкиИмущества()
//
// Параметры:
//  Нет
//
// Возвращаемое значение:
//  Нет
//
// Описание:
//  Реализует начальное заполнение таблицы ПоказателиОценки по данным в служебной таблице
//
Процедура ПолучитьПоказателиОценкиИмущества()

 Перем АнализПоказателейОценки;
	
	ПоказателиОценки.УдалитьСтроки();
	
	Таб = СоздатьОбъект("Таблица");
	Таб.ИсходнаяТаблица("Служебная");
	Таб.ВывестиСекцию("Секция_1");

	Для т = 1 По 5 Цикл
		// Таблица итогов для накопления результатов анализа прямых показателей
		АнализПоказателейОценки = СоздатьОбъект("ТаблицаЗначений");	
		АнализПоказателейОценки.НоваяКолонка("Аналитика");	
		// для налогового учета
		АнализПоказателейОценки.НоваяКолонка("СнНУ", "Число",15,2);	
		АнализПоказателейОценки.НоваяКолонка("ДоНУ", "Число",15,2);	
		АнализПоказателейОценки.НоваяКолонка("КоНУ", "Число",15,2);	
		АнализПоказателейОценки.НоваяКолонка("СкНУ", "Число",15,2);	
		// для бухгалтерского учета
		АнализПоказателейОценки.НоваяКолонка("СнБУ", "Число",15,2);	
		АнализПоказателейОценки.НоваяКолонка("ДоБУ", "Число",15,2);	
		АнализПоказателейОценки.НоваяКолонка("КоБУ", "Число",15,2);	
		АнализПоказателейОценки.НоваяКолонка("СкБУ", "Число",15,2);	

		ПоказателиОценки.НоваяСтрока();	
		ПоказателиОценки.Наименование = СокрЛП(Таб.Область("П010"+т+"02").Текст);
		ПоказателиОценки.СчетБУ = СокрЛП(Таб.Область("П010"+т+"03").Текст);
		ПоказателиОценки.СчетНУ = СокрЛП(Таб.Область("П010"+т+"04").Текст);
		ПоказателиОценки.КомментарийРазницы = СокрЛП(Таб.Область("П010"+т+"05").Текст); 
		ПоказателиОценки.КомментарийБУ = СокрЛП(Таб.Область("П010"+т+"07").Текст); 
		ПоказателиОценки.КомментарийНУ = СокрЛП(Таб.Область("П010"+т+"08").Текст); 
		
		// По умолчанию все показатели рассчитываются и отображаются без разворота по аналитике
		ПоказателиОценки.ПризнакРасшифровки = 0;

		ПоказателиОценки.УстановитьЗначение(т, "АнализПоказателейОценки", АнализПоказателейОценки);
	КонецЦикла;

КонецПроцедуры  // ПолучитьПоказателиОценкиИмущества()

//******************************************************************************
// ПрорисоватьРезультатыАнализаДоходовРасходов(Режим)
//
// Параметры:
//  Режим - признак того что мы печатаем доходы или расходы
//
// Возвращаемое значение:
//  Нет
//
// Описание:
//  Прорисовывает часть печатной формы, относящуюся к выводу результатов
//  для таблиц значений: АнализПоказателейДоходов или АнализПоказателейРасходов
//  в зависимости от параметра режим
//
Процедура ПрорисоватьРезультатыАнализаДоходовРасходов(Режим)

 Перем Заголовок, Показатели, ИдТаблАнализа, РасчетВыполнен, ИдРасшифровкиБух, ИдРасшифровкиНал;
 
	// очищаем старые значения
	Таблица.Очистить();

	Если Режим = "Доход" Тогда
		Показатели 	  = ПоказателиДоходов;
		РасчетВыполнен= РасчетДоходовВыполнен;
		Заголовок 	  = "Анализ показателей доходов";
		ИдТаблАнализа = "АнализПоказателейДоходов";
		ИдРасшифровкиБух = "Расшифровка_ПоказательДоходаБУХ_";
		ИдРасшифровкиНал = "Расшифровка_ПоказательДоходаНАЛ_";
		ИдРасшифровкиВсе = "Расшифровка_ПоказательДоходаВСЕ_";
		ИдРасшифровкиДетально = "Расшифровка_Доход";

	Иначе
		Показатели    = ПоказателиРасходов;
		РасчетВыполнен= РасчетРасходовВыполнен;
		Заголовок 	  = "Анализ показателей расходов";
		ИдТаблАнализа = "АнализПоказателейРасходов";
		ИдРасшифровкиБух = "Расшифровка_ПоказательРасходаБУХ_";
		ИдРасшифровкиНал = "Расшифровка_ПоказательРасходаНАЛ_";
		ИдРасшифровкиВсе = "Расшифровка_ПоказательРасходаВСЕ_";
		ИдРасшифровкиДетально = "Расшифровка_Расход";

	КонецЕсли;

	ПериодОтчета = Строка (" период с " + Формат(Дата1,"Д ДДММММГГГГ") + " по "+ Формат(Дата2,"Д ДДММММГГГГ"));
	Таблица.ВывестиСекцию("Секция_1");

	Если РасчетВыполнен = 1 Тогда

		// Результаты имеет смысл показывать только если был выполнен расчет показателей
		
		Таблица.ВывестиСекцию("Секция_7");
	
		Показатели.ВыбратьСтроки();
		Пока Показатели.ПолучитьСтроку() = 1 Цикл
	
			АнализПоказателей = Показатели.ПолучитьЗначение(Показатели.НомерСтроки, ИдТаблАнализа);
	
			// Следует вывести в отчет эту строку
			НаименованиеПоказателя = Показатели.Наименование;
			Таблица.ВывестиСекцию("Секция_8");
			СтрокаРасшифровки = ИдРасшифровкиВсе + Лев(""+Показатели.НомерСтроки+"   ",3);
			// Устанавливаем значение расшифровки
			Таблица.Область(Таблица.ВысотаТаблицы(),3,Таблица.ВысотаТаблицы(),7).Расшифровка(СтрокаРасшифровки);
	
			ВремТаблГр1 = СоздатьОбъект("ТаблицаЗначений");
			ВремТаблГр2 = СоздатьОбъект("ТаблицаЗначений");
	
			АнализПоказателей.Выгрузить(ВремТаблГр1);
			АнализПоказателей.Выгрузить(ВремТаблГр2);
	
			ВремТаблГр1.Свернуть("ПризнакУчета,Группировка1","СуммаБУ,СуммаНУ,СчетчикСтрок");
            ДоходыРасходыОтПродажиВалюты = 0;
			Для т = 1 По 2 Цикл
	            // первый проход - выводим бухгалтерскую часть показателя
				// второй проход - выводим налоговую часть показателя

				Если т = 1 Тогда
					Пояснение = "По данным бухгалтерского учета:";
					СтрокаРасшифровки = ИдРасшифровкиБух + Лев(""+Показатели.НомерСтроки+"   ",3);
					ПерУч = "БУ";
				Иначе
					Пояснение = "По данным налогового учета:";
					СтрокаРасшифровки = ИдРасшифровкиНал + Лев(""+Показатели.НомерСтроки+"   ",3);
					ПерУч = "НУ";
				КонецЕсли; 			

				ПечПок = АнализПоказателей.Итог("Сумма"+ПерУч);
				
				Если Режим = "Доход" Тогда
					Если Показатели.ИндексПоказателя = 9 Тогда
						Если ПечПок < 0 Тогда 
							ПечПок = 0;
							Таблица.ВывестиСекцию("Секция_9");
							ДоходыРасходыОтПродажиВалюты = 1;
							Продолжить;
						КонецЕсли;
					КонецЕсли;
				Иначе
					Если Показатели.ИндексПоказателя = 8 Тогда
						Если ПечПок < 0 Тогда 
							ПечПок = 0;
							Таблица.ВывестиСекцию("Секция_9"); 
							ДоходыРасходыОтПродажиВалюты = 1;
							Продолжить;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;		

				Таблица.ВывестиСекцию("Секция_9");
				// Устанавливаем значение расшифровки
				Таблица.Область(Таблица.ВысотаТаблицы(),3,Таблица.ВысотаТаблицы(),7).Расшифровка(СтрокаРасшифровки);

				Если (Показатели.ПолучитьЗначение(Показатели.НомерСтроки , "ПризнакРазворота" + ПерУч) = 1) Тогда
					// Показатель следует отображать в развернутом виде
		
					ВремТаблГр1.ВыбратьСтроки();
					Пока ВремТаблГр1.ПолучитьСтроку() =1  Цикл
						// Первый уровень обхода
						СтрТаб = "";        

						// Фильтруем по типу учета
						Если Найти(ВремТаблГр1.ПризнакУчета, ПерУч) = 0 Тогда
							Продолжить;    
						КонецЕсли;
						
						Если (ПустоеЗначение(ВремТаблГр1.Группировка1) = 0)
						   и (ВремТаблГр1.СчетчикСтрок > 1) Тогда
						   	// Необходимо два уровня расшифровки!
							СтрТаб = "    ";
							Пояснение = ВремТаблГр1.Группировка1;
							ПечПок    = ВремТаблГр1.ПолучитьЗначение(ВремТаблГр1.НомерСтроки,"Сумма" + ПерУч);
							Таблица.ВывестиСекцию("Секция_91");
							Таблица.Область(Таблица.ВысотаТаблицы(),3,Таблица.ВысотаТаблицы(),9).ЦветФона(ФонВыделения);					
		                	
						КонецЕсли;
						
						ВремТаблГр2.ВыбратьСтроки();
						Пока ВремТаблГр2.ПолучитьСтроку() =1  Цикл
	
							Если (ВремТаблГр2.Группировка1 = ВремТаблГр1.Группировка1)
							 или ((ПустоеЗначение(ВремТаблГр2.Группировка1) = 1)
							   и  (ПустоеЗначение(ВремТаблГр1.Группировка1) = 1)) Тогда
                                
							   	//Строки без названия группировки выводим только если не выводилось
							   	//название первой группировки.
							   	Если (ПустоеЗначение(ВремТаблГр2.Группировка2) = 1)
							       и (ПустоеЗначение(ВремТаблГр1.Группировка1) = 0)
								   и (ВремТаблГр1.СчетчикСтрок > 1) Тогда
								   	Продолжить;
								КонецЕсли;
								   
								// Фильтруем по типу учета
							   	Если Найти(ВремТаблГр2.ПризнакУчета, ПерУч) = 0 Тогда
									Продолжить;    
								КонецЕсли;

								// Второй либо единственные уровень группировки расшифровки показателя
								Пояснение = СтрТаб + ВремТаблГр2.Группировка2;
								ПечПок    = ВремТаблГр2.ПолучитьЗначение(ВремТаблГр2.НомерСтроки,"Сумма" + ПерУч);
								Таблица.ВывестиСекцию("Секция_91");
								Таблица.Область(Таблица.ВысотаТаблицы(),3,Таблица.ВысотаТаблицы(),9).ЦветФона(ФонВыделения);					
								
								СтрокаРасшифровки = СоздатьОбъект("СписокЗначений");
								СтрокаРасшифровки.Установить("ТипСтроки", ИдРасшифровкиДетально);
								СтрокаРасшифровки.Установить("НомерСтрокиВРасшифровке", ВремТаблГр2.НомерВТаблицеРасшифровки);
								СтрокаРасшифровки.Установить("Аналитика", ВремТаблГр2.Аналитика);
								Таблица.Область(Таблица.ВысотаТаблицы(),3,Таблица.ВысотаТаблицы(),9).Расшифровка(СтрокаРасшифровки);
							КонецЕсли;
		
						КонецЦикла;
		
					КонецЦикла;
				КонецЕсли;
			КонецЦикла;
	
			// Печатаем разницу
			Пояснение = "Разница между бухгалтерским и налоговым учетом:";
			
			Если ДоходыРасходыОтПродажиВалюты = 1 Тогда
				ПечПок = Макс(0,АнализПоказателей.Итог("СуммаБУ")) - Макс(0,АнализПоказателей.Итог("СуммаНУ"));
			Иначе                                                                              			
				ПечПок = АнализПоказателей.Итог("СуммаБУ") - АнализПоказателей.Итог("СуммаНУ");
			КонецЕсли;
		
			Таблица.ВывестиСекцию("Секция_9");
	
			Если ПечПок <> 0 Тогда
				// если разница не равна нулю, то дополнительно выделяем строку другим цветом
				Таблица.Область(Таблица.ВысотаТаблицы(),3,Таблица.ВысотаТаблицы(),9).ЦветТекста(ТекстВыделения);
				
				Если (ФлагКомментариев = 1)
				   и (ПустоеЗначение(Показатели.КомментарийРазницы) = 0) Тогда
				   	// Выводим заключение о вероятной причине возникновения данной разницы
                    КомментарийРазницы = Показатели.КомментарийРазницы;
				   	Таблица.ВывестиСекцию("Секция_92");
				КонецЕсли;
			КонецЕсли;			
	
		КонецЦикла;
	
		// Последнюю строку таблицы показателей подчеркиваем толстой линией
		Таблица.Область(Таблица.ВысотаТаблицы(),3,Таблица.ВысотаТаблицы(),9).Рамка(,,,3);					
	
    КонецЕсли;

	Таблица.Опции(0,0,0);
	Таблица.Показать();

КонецПроцедуры // ПрорисоватьРезультатыАнализаДоходовРасходов()

//******************************************************************************
// ПрорисоватьРезультатыАнализаПоказателейОценки()
//
// Параметры:
//  Нет
//
// Возвращаемое значение:
//  Нет
//
// Описание:
//  Выводит в печатную формы табличной части отчета данные из
//  таблицы значений: АнализПоказателейОценки
//
Процедура ПрорисоватьРезультатыАнализаПоказателейОценки();

	// очищаем старые значения
	Таблица.Очистить();

	Заголовок = "Анализ показателей оценки имущества";
	ПериодОтчета = Строка (" период с " + Формат(Дата1,"Д ДДММММГГГГ") + " по "+ Формат(Дата2,"Д ДДММММГГГГ"));
	Таблица.ВывестиСекцию("Секция_1");

	Если РасчетОценкиИмуществаВыполнен = 1 Тогда
	
		Таблица.ВывестиСекцию("Секция_3");
	
		ПоказателиОценки.ВыбратьСтроки();
		Пока ПоказателиОценки.ПолучитьСтроку() = 1 Цикл
			// Следует вывести в отчет эту строку
			АнализПоказателейОценки = ПоказателиОценки.ПолучитьЗначение(ПоказателиОценки.НомерСтроки,"АнализПоказателейОценки");

			УчастокУчета = ПоказателиОценки.Наименование;
			Таблица.ВывестиСекцию("Секция_4");
			
			// Адрес последней выведенной ячейки
			СтрокаРасшифровки = "Расшифровка_ПоказательОценки_"+Лев(""+ПоказателиОценки.НомерСтроки+"   ",3);

			Таблица.Область(Таблица.ВысотаТаблицы(),2,Таблица.ВысотаТаблицы(),10).Рамка(,,,0);
			Таблица.Область(Таблица.ВысотаТаблицы(),2,Таблица.ВысотаТаблицы(),10).Полужирный(1);
			Таблица.Область(Таблица.ВысотаТаблицы(),2,Таблица.ВысотаТаблицы(),10).Расшифровка(СтрокаРасшифровки);

			ПризнакНаличияРазницы = 0;
			СтрокаИтога = "";

			Если ПоказателиОценки.ПризнакРасшифровки = 1 Тогда
				// Показатель следует отображать в развернутом виде
				
				АнализПоказателейОценки.ВыбратьСтроки();
				Пока АнализПоказателейОценки.ПолучитьСтроку() = 1 Цикл
					ОбъектУчета = АнализПоказателейОценки.Аналитика;				    
					Таблица.ВывестиСекцию("Секция_41");

					Детализация = "По данным бухгалтерского учета";
					ПечСН = АнализПоказателейОценки.СнБУ;
					ПечДО = АнализПоказателейОценки.ДоБУ;
					ПечКО = АнализПоказателейОценки.КоБУ;
					ПечСК = АнализПоказателейОценки.СкБУ;
			        
					Таблица.ВывестиСекцию("Секция_51");
					
					Расшифровка = СоздатьОбъект("СписокЗначений");
					Расшифровка.Установить("ТипСтроки", "ПоказательОценки_БУ_ОборотыПоДебету");
					Расшифровка.Установить("НомерСтрокиВРасшифровке", ПоказателиОценки.НомерСтроки);
					Расшифровка.Установить("Аналитика", ОбъектУчета);
					Таблица.Область(Таблица.ВысотаТаблицы(),7,Таблица.ВысотаТаблицы(),7).Расшифровка(Расшифровка);
					
					Расшифровка = СоздатьОбъект("СписокЗначений");
					Расшифровка.Установить("ТипСтроки", "ПоказательОценки_БУ_ОборотыПоКредиту");
					Расшифровка.Установить("НомерСтрокиВРасшифровке", ПоказателиОценки.НомерСтроки);
					Расшифровка.Установить("Аналитика", ОбъектУчета);
					Таблица.Область(Таблица.ВысотаТаблицы(),8,Таблица.ВысотаТаблицы(),8).Расшифровка(Расшифровка);
					
					Детализация = "По данным налогового учета";
					ПечСН = АнализПоказателейОценки.СнНУ;
					ПечДО = АнализПоказателейОценки.ДоНУ;
					ПечКО = АнализПоказателейОценки.КоНУ;
					ПечСК = АнализПоказателейОценки.СкНУ;
	                
					Таблица.ВывестиСекцию("Секция_51");
					
					Расшифровка = СоздатьОбъект("СписокЗначений");
					Расшифровка.Установить("ТипСтроки", "ПоказательОценки_НУ_ОборотыПоДебету");
					Расшифровка.Установить("НомерСтрокиВРасшифровке", ПоказателиОценки.НомерСтроки);
					Расшифровка.Установить("Аналитика", ОбъектУчета);
					Таблица.Область(Таблица.ВысотаТаблицы(),7,Таблица.ВысотаТаблицы(),7).Расшифровка(Расшифровка);
					
					Расшифровка = СоздатьОбъект("СписокЗначений");
					Расшифровка.Установить("ТипСтроки", "ПоказательОценки_НУ_ОборотыПоКредиту");
					Расшифровка.Установить("НомерСтрокиВРасшифровке", ПоказателиОценки.НомерСтроки);
					Расшифровка.Установить("Аналитика", ОбъектУчета);
					Таблица.Область(Таблица.ВысотаТаблицы(),8,Таблица.ВысотаТаблицы(),8).Расшифровка(Расшифровка);
					
					Детализация = "Разница";
					ПечСН = АнализПоказателейОценки.СнБУ - АнализПоказателейОценки.СнНУ;
					ПечДО = АнализПоказателейОценки.ДоБУ - АнализПоказателейОценки.ДоНУ;
					ПечКО = АнализПоказателейОценки.КоБУ - АнализПоказателейОценки.КоНУ;
					ПечСК = АнализПоказателейОценки.СкБУ - АнализПоказателейОценки.СкНУ;

					Таблица.ВывестиСекцию("Секция_51");

					Если (ПечСН <> 0) или (ПечДО <> 0) или (ПечКО <> 0) или (ПечСК <> 0) Тогда
						// выбеляем разницу особым цветом
						Таблица.Область(Таблица.ВысотаТаблицы(),2,Таблица.ВысотаТаблицы(),10).ЦветТекста(ТекстВыделения);					
						ПризнакНаличияРазницы = 1;
						
					КонецЕсли;
				КонецЦикла;
	
				СтрокаИтога = "Всего: ";

			КонецЕсли;

			// Показатель следует отображать в свернутом виде
			Детализация = СтрокаИтога+"По данным бухгалтерского учета";
			ПечСН = АнализПоказателейОценки.Итог("СнБУ");
			ПечДО = АнализПоказателейОценки.Итог("ДоБУ");
			ПечКО = АнализПоказателейОценки.Итог("КоБУ");
			ПечСК = АнализПоказателейОценки.Итог("СкБУ");
	
			Таблица.ВывестиСекцию("Секция_5");
			Таблица.Область(Таблица.ВысотаТаблицы(),2,Таблица.ВысотаТаблицы(),10).Расшифровка(СтрокаРасшифровки);
			
			Детализация = СтрокаИтога+"По данным налогового учета";
			ПечСН = АнализПоказателейОценки.Итог("СнНУ");
			ПечДО = АнализПоказателейОценки.Итог("ДоНУ");
			ПечКО = АнализПоказателейОценки.Итог("КоНУ");
			ПечСК = АнализПоказателейОценки.Итог("СкНУ");

			Таблица.ВывестиСекцию("Секция_5");
			Таблица.Область(Таблица.ВысотаТаблицы(),2,Таблица.ВысотаТаблицы(),10).Расшифровка(СтрокаРасшифровки);

			Детализация = СтрокаИтога+"Разница";
			
			ПечСН = АнализПоказателейОценки.Итог("СнБУ") - АнализПоказателейОценки.Итог("СнНУ");
			ПечДО = АнализПоказателейОценки.Итог("ДоБУ") - АнализПоказателейОценки.Итог("ДоНУ");
			ПечКО = АнализПоказателейОценки.Итог("КоБУ") - АнализПоказателейОценки.Итог("КоНУ");
			ПечСК = АнализПоказателейОценки.Итог("СкБУ") - АнализПоказателейОценки.Итог("СкНУ");

			Таблица.ВывестиСекцию("Секция_5");

			Если (ПечСН <> 0) или (ПечДО <> 0) или (ПечКО <> 0) или (ПечСК <> 0)
			 или (ПризнакНаличияРазницы = 1) Тогда
				// выбеляем разницу особым цветом
				Таблица.Область(Таблица.ВысотаТаблицы(),2,Таблица.ВысотаТаблицы(),10).ЦветТекста(ТекстВыделения);					

				Если ФлагКомментариев = 1 Тогда					
					// если указан параметр "Комментировать разницу", то выводим еще и комментарий
					ОписаниеТиповыхРасхождений = ПоказателиОценки.КомментарийРазницы;

					Таблица.ВывестиСекцию("Секция_6");

				КонецЕсли;
			КонецЕсли;

			// Последнюю строку относящуюся к показателю подчеркиваем
			Таблица.Область(Таблица.ВысотаТаблицы(),2,Таблица.ВысотаТаблицы(),10).Рамка(,,,3);					
				
		КонецЦикла;
    
	КонецЕсли;

	Таблица.Опции(0,0,0);
	Таблица.Показать();

КонецПроцедуры // ПрорисоватьРезультатыАнализаПоказателейОценки()

//******************************************************************************
// ПрорисоватьНепринятоеКНалоговомуУчетуИмущ(Параметры)
//
// Параметры:
//  Параметры - список значений содержащих текстовые строки для вывода пояснений
//
// Возвращаемое значение:
//  Нет
//
// Описание:
//  Выводит в печатную форму табличной части отчета данные из
//  таблицы значений: АмортизируемоеИмущество
//
Процедура ПрорисоватьНепринятоеКНалоговомуУчетуИмущ(Параметры)

	НомерТаблицы = Параметры.Получить("НомерТаблицы");
	ВидИмущества = Параметры.Получить("ВидИмущества");
	ОсноваЗаголовкаТаблицы = Параметры.Получить("ЗаголовокТаблицы");
	Заголовок 		 = Параметры.Получить("Заголовок");
	ЗаголовокСтоимость = Параметры.Получить("ЗаголовокСтоимость");

	НужныеСтроки = СоздатьОбъект("СписокЗначений");

	// Просматриваем таблицу с амортизируемым имуществом
	// и выбираем объекты, которые отражены в бухучете но не отражены в налоговом учете
	АмортизируемоеИмущество.ВыбратьСтроки();
	Пока АмортизируемоеИмущество.ПолучитьСтроку() =1  Цикл
		Если ((АмортизируемоеИмущество.Объект.Вид() = "ОсновныеСредства") и (ВидИмущества = "ОС")) 
		 или ((АмортизируемоеИмущество.Объект.Вид() = "НематериальныеАктивы") и (ВидИмущества = "НМА")) Тогда
			Если (АмортизируемоеИмущество.ОстатокСтоимостиБух <> 0)
			   и (АмортизируемоеИмущество.ОстатокСтоимостиНал = 0) Тогда
				НужныеСтроки.ДобавитьЗначение(АмортизируемоеИмущество.НомерСтроки);

			КонецЕсли;

		КонецЕсли;
	КонецЦикла;
	
	// выводим таблицу
	ЗаголовокТаблицы = ОсноваЗаголовкаТаблицы;
	Таблица.ВывестиСекцию("Секция_10");
	
	Всего = 0;
	Для т = 1 По НужныеСтроки.РазмерСписка() Цикл
		АмортизируемоеИмущество.ПолучитьСтрокуПоНомеру(НужныеСтроки.ПолучитьЗначение(т));
		Наименование = АмортизируемоеИмущество.Объект.Наименование;
		ПечПок = АмортизируемоеИмущество.ОстатокСтоимостиБух;
		КодАнУчета = АмортизируемоеИмущество.Объект.Код;
		
		Таблица.ВывестиСекцию("Секция_11");
		Всего = Всего + ПечПок;
	КонецЦикла;

	Наименование = "Итого по объектам, не принятым к налоговому учету:";
	ПечПок = Всего;
	КодАнУчета = "";
	Таблица.ВывестиСекцию("Секция_11");
	
	Таблица.Область(Таблица.ВысотаТаблицы(),3,Таблица.ВысотаТаблицы(),9).Рамка(,3,,3);					

	Параметры.Установить("СуммаБух", Всего)
	
КонецПроцедуры // ПрорисоватьНепринятоеКНалоговомуУчетуИмущ()

//******************************************************************************
// ПрорисоватьПринятоеКНалоговомуУчетуИмущ(Параметры)
//
// Параметры:
//  Параметры - список значений содержащих текстовые строки для вывода пояснений
//
// Возвращаемое значение:
//  Нет
//
// Описание:
//  Выводит в печатную форму табличной части отчета данные из
//  таблицы значений: АмортизируемоеИмущество
//
Процедура ПрорисоватьПринятоеКНалоговомуУчетуИмущ(Параметры)

	НомерТаблицы = Параметры.Получить("НомерТаблицы");
	ВидИмущества = Параметры.Получить("ВидИмущества");
	ОсноваЗаголовокаТаблицы = Параметры.Получить("ЗаголовокТаблицы");
	Заголовок = Параметры.Получить("Заголовок");
	ЗаголовокСчетОст = Параметры.Получить("ЗаголовокСчетОст");
	ЗаголовокСчетАморт = "Амортизация
	                     |на 01.01.2002";
	ЗаголовокСчетНал = "Счет Н05.01";
	Пояснение1 = Параметры.Получить("Пояснение1");
	Пояснение2 = Параметры.Получить("Пояснение2");

	// Сначала анализируем объекты, которые были приняты на учет до 01.01.2002 г.
	// Они принимаются к налоговому учету по остаточной стоимости на эту дату

	НужныеСтроки = СоздатьОбъект("СписокЗначений");

	// Просматриваем таблицу с амортизируемым имуществом и выбираем нужные строки
	АмортизируемоеИмущество.ВыбратьСтроки();
	Пока АмортизируемоеИмущество.ПолучитьСтроку() =1  Цикл
		Если ((АмортизируемоеИмущество.Объект.Вид() = "ОсновныеСредства") и (ВидИмущества = "ОС")) 
		 или ((АмортизируемоеИмущество.Объект.Вид() = "НематериальныеАктивы") и (ВидИмущества = "НМА")) Тогда

			Если ((АмортизируемоеИмущество.ДатаПринятияКУчету < '01.01.2002')
			 или  (ПустоеЗначение(АмортизируемоеИмущество.ДатаПринятияКУчету) = 1))
			   и (АмортизируемоеИмущество.ОстатокСтоимостиНал <> 0) Тогда
			   	Если ((АмортизируемоеИмущество.Объект.Вид() = "ОсновныеСредства") и (ВидИмущества = "ОС")) Тогда
			   		Если ПустоеЗначение(АмортизируемоеИмущество.Объект.МатериалДляОтраженияВСоставеМПЗ)=0 Тогда
			   			Продолжить
			   		КонецЕсли;
			   	КонецЕсли;
			   	
				НужныеСтроки.ДобавитьЗначение(АмортизируемоеИмущество.НомерСтроки);

			КонецЕсли;

		КонецЕсли;
	КонецЦикла;
	
	ЗаголовокТаблицы = ОсноваЗаголовокаТаблицы + Пояснение1;
	Таблица.ВывестиСекцию("Секция_12");
    
	ЗаголовокСчетНал = Параметры.Получить("ЗаголовокСчетНал");
	
	ВсегоПеч01 = 0;
	ВсегоПеч02 = 0;
	ВсегоПечОст= 0;
	ВсегоПеч05 = 0;
	ВсегоПечРазница = 0;

	// Выводим отобранные объекты на печать
	Если НужныеСтроки.РазмерСписка() <> 0 Тогда
		Для т = 1 По НужныеСтроки.РазмерСписка() Цикл
			АмортизируемоеИмущество.ПолучитьСтрокуПоНомеру(НужныеСтроки.ПолучитьЗначение(т));

			Наименование = АмортизируемоеИмущество.Объект.Наименование + ", инв.№" + АмортизируемоеИмущество.Объект.Код;
			Печ01 = АмортизируемоеИмущество.ОстатокСтоимостиБух;
			Печ02 = АмортизируемоеИмущество.Объект.АмортизацияНачисленнаяДо2002;
			ПечОст= Печ01 - Печ02;
			Печ05 = АмортизируемоеИмущество.ОстатокСтоимостиНал;
			ПечРазница = ПечОст - Печ05;
			
			Таблица.ВывестиСекцию("Секция_141");
			
			ВсегоПеч01 = ВсегоПеч01 + Печ01;
			ВсегоПеч02 = ВсегоПеч02 + Печ02;
			ВсегоПечОст= ВсегоПечОст + ПечОст;
			ВсегоПеч05 = ВсегоПеч05 + Печ05;
			ВсегоПечРазница = ВсегоПечРазница + ПечРазница;
		КонецЦикла;		
	КонецЕсли;

	Наименование = "Итого по объектам, числившимся на 01.01.2002";
	Печ01 = ВсегоПеч01;
	Печ02 = ВсегоПеч02;
	ПечОст= ВсегоПечОст;
	Печ05 = ВсегоПеч05;
	ПечРазница = ВсегоПечРазница;

	Параметры.Установить("СуммаБух", Параметры.Получить("СуммаБух") + ВсегоПечОст);
	Параметры.Установить("СуммаНал", Параметры.Получить("СуммаНал") + ВсегоПеч05);
	
	Таблица.ВывестиСекцию("Секция_141");
	Таблица.Область(Таблица.ВысотаТаблицы(),2,Таблица.ВысотаТаблицы(),5).Курсив(0);					
	Таблица.Область(Таблица.ВысотаТаблицы(),2,Таблица.ВысотаТаблицы(),10).Рамка(,3,,3);	
	
	// Теперь те объекты, которые были приняты на учет после 01.01.2002 г.
	// Они принимаются к налоговому учету по первоначальной стоимости
	
	НужныеСтроки.УдалитьВсе();

	// Просматриваем таблицу с амортизируемым имуществом и выбираем нужные строки
	АмортизируемоеИмущество.ВыбратьСтроки();
	Пока АмортизируемоеИмущество.ПолучитьСтроку() =1  Цикл
		Если ((АмортизируемоеИмущество.Объект.Вид() = "ОсновныеСредства") и (ВидИмущества = "ОС")) 
		 или ((АмортизируемоеИмущество.Объект.Вид() = "НематериальныеАктивы") и (ВидИмущества = "НМА")) Тогда

		 	Если (АмортизируемоеИмущество.ДатаПринятияКУчету >= '01.01.2002')
		 	и (АмортизируемоеИмущество.ОстатокСтоимостиБух <> 0)
		 	и (АмортизируемоеИмущество.ОстатокСтоимостиНал <> 0) Тогда
		 		НужныеСтроки.ДобавитьЗначение(АмортизируемоеИмущество.НомерСтроки); 
		 	КонецЕсли;
		 	
		 	Если (АмортизируемоеИмущество.Объект.Вид() = "ОсновныеСредства") и (ВидИмущества = "ОС") Тогда
		 		Если (АмортизируемоеИмущество.ДатаПринятияКУчету >= '01.01.2006')
		 		и (АмортизируемоеИмущество.ОстатокСтоимостиБух = 0)
		 		и (АмортизируемоеИмущество.ОстатокСтоимостиНал <> 0)
		 		и (ПустоеЗначение(АмортизируемоеИмущество.Объект.МатериалДляОтраженияВСоставеМПЗ)=0) Тогда
		 			НужныеСтроки.ДобавитьЗначение(АмортизируемоеИмущество.НомерСтроки);                            
		 		КонецЕсли;
		 	КонецЕсли;
		 	
		КонецЕсли;
	КонецЦикла;
	
	ЗаголовокТаблицы = ОсноваЗаголовокаТаблицы + Пояснение2;
	Таблица.ВывестиСекцию("Секция_13");

	ВсегоПеч01 = 0;
	ВсегоПеч05 = 0;
	ВсегоПечРазница = 0;

	// Выводим отобранные объекты на печать
	Если НужныеСтроки.РазмерСписка() <> 0 Тогда
		Для т = 1 По НужныеСтроки.РазмерСписка() Цикл
			АмортизируемоеИмущество.ПолучитьСтрокуПоНомеру(НужныеСтроки.ПолучитьЗначение(т));

			Наименование = АмортизируемоеИмущество.Объект.Наименование + ", инв.№" + АмортизируемоеИмущество.Объект.Код;;
			Печ01 = АмортизируемоеИмущество.ОстатокСтоимостиБух;
			Печ05 = АмортизируемоеИмущество.ОстатокСтоимостиНал;
			ПечРазница = Печ01 - Печ05;
			
			Таблица.ВывестиСекцию("Секция_142");

			Если ПечРазница <> 0  Тогда
				Таблица.Область(Таблица.ВысотаТаблицы(),10,Таблица.ВысотаТаблицы(),10).ЦветТекста(ТекстВыделения);					
			КонецЕсли;
			
			ВсегоПеч01 = ВсегоПеч01 + Печ01;
			ВсегоПеч05 = ВсегоПеч05 + Печ05;
			ВсегоПечРазница = ВсегоПечРазница + ПечРазница;
		КонецЦикла;		
	КонецЕсли;

	Наименование = "Итого по объектам, принятым после 01.01.2002";
	Печ01 = ВсегоПеч01;
	Печ05 = ВсегоПеч05;
	ПечРазница = ВсегоПечРазница;
	
	Параметры.Установить("СуммаБух", Параметры.Получить("СуммаБух") + ВсегоПеч01);
	Параметры.Установить("СуммаНал", Параметры.Получить("СуммаНал") + ВсегоПеч05);

	Таблица.ВывестиСекцию("Секция_142");

	Если ПечРазница <> 0  Тогда
		Таблица.Область(Таблица.ВысотаТаблицы(),10,Таблица.ВысотаТаблицы(),10).ЦветТекста(ТекстВыделения);					
	КонецЕсли;

	Таблица.Область(Таблица.ВысотаТаблицы(),2,Таблица.ВысотаТаблицы(),5).Курсив(0);					
	Таблица.Область(Таблица.ВысотаТаблицы(),2,Таблица.ВысотаТаблицы(),10).Рамка(,3,,3);					

КонецПроцедуры // ПрорисоватьПринятоеКНалоговомуУчетуИмущ()

//******************************************************************************
// ПрорисоватьРазличияВСуммахАмортизацииИмущ(НомерТаблицы, Заголовок, ЗаголовокТаблицы, ВидИмущества)
//
// Параметры:
//  НомерТаблицы 	 - Номер таблицы по порядку
//  Заголовок        - Строка поясняющая смысл первой колонки таблицы (объект учета)
//  ЗаголовокТаблицы - Строка поясняющая содержание всей таблицы
//  ВидИмущества	 - задает вид амортизируемого имущества:
//					   "ОС" - основные средства
//					   "НМА"- нематериальные активы
//
// Возвращаемое значение:
//  Нет
//
// Описание:
//  Выводит в печатную форму табличной части отчета данные из
//  таблицы значений: АмортизируемоеИмущество
//
Процедура ПрорисоватьРазличияВСуммахАмортизацииИмущ(НомерТаблицы, Заголовок, ОсноваЗаголовкаТаблицы, ВидИмущества)

	Если АмортизируемоеИмущество.КоличествоСтрок() = 0 Тогда
		Возврат;
	КонецЕсли;

	СчетаАмортизацииБух = СоздатьОбъект("СписокЗначений");
	СчетаАмортизацииНал = СоздатьОбъект("СписокЗначений");
	ИтогиПоКолонкам 	= СоздатьОбъект("СписокЗначений");
	
	// Просматриваем таблицу с амортизируемым имуществом с целью выявления списка счетов, на которые начислялась амортизация
	АмортизируемоеИмущество.ВыбратьСтроки();
	
	Пока АмортизируемоеИмущество.ПолучитьСтроку() = 1 Цикл	
		
		Если (АмортизируемоеИмущество.Объект.Вид() = "ОсновныеСредства") и (ВидИмущества = "ОС") Тогда
			Если (ПустоеЗначение(АмортизируемоеИмущество.ДатаПринятияКУчету) = 1)
			и (ПустоеЗначение(АмортизируемоеИмущество.Объект.МатериалДляОтраженияВСоставеМПЗ)=0) Тогда
				Продолжить;
			КонецЕсли;
		КонецЕсли;	

		
		Если ((АмортизируемоеИмущество.Объект.Вид() = "ОсновныеСредства") и (ВидИмущества = "ОС")) 
		 или ((АмортизируемоеИмущество.Объект.Вид() = "НематериальныеАктивы") и (ВидИмущества = "НМА")) Тогда
			АнализНачисленияАмортизации = АмортизируемоеИмущество.АнализНачисленияАмортизации;
			АнализНачисленияАмортизации.ВыбратьСтроки();
			Пока АнализНачисленияАмортизации.ПолучитьСтроку() = 1 Цикл
				Если (Найти(АнализНачисленияАмортизации.СчетАмортизации.Код,"Н") = 0)
				   и (ПустоеЗначение(АнализНачисленияАмортизации.СчетАмортизации) = 0) Тогда
					Если ТипЗначенияСтр(СчетаАмортизацииБух.Получить(СокрЛП(АнализНачисленияАмортизации.СчетАмортизации.Код))) <> "Число" Тогда
						СчетаАмортизацииБух.ДобавитьЗначение(0, СокрЛП(АнализНачисленияАмортизации.СчетАмортизации.Код));        
					КонецЕсли;
				Иначе
					Если ТипЗначенияСтр(СчетаАмортизацииНал.Получить(СокрЛП(АнализНачисленияАмортизации.СчетАмортизации.Код))) <> "Число" Тогда
						СчетаАмортизацииНал.ДобавитьЗначение(0, СокрЛП(АнализНачисленияАмортизации.СчетАмортизации.Код));        
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	СчетаАмортизацииБух.СортироватьПоПредставлению();
	СчетаАмортизацииБух.Выгрузить(ИтогиПоКолонкам);

	ИтогиПоКолонкам.ДобавитьЗначение(0, "ВсегоБух");

	СчетаАмортизацииНал.СортироватьПоПредставлению();
	Для т = 1 По СчетаАмортизацииНал.РазмерСписка() Цикл
		Стр = "";
		СчетаАмортизацииНал.ПолучитьЗначение(т,Стр);
		ИтогиПоКолонкам.ДобавитьЗначение(0, Стр);
	КонецЦикла;
	
	ИтогиПоКолонкам.ДобавитьЗначение(0, "ВсегоНал");

	// подготовка шапки таблицы
	ЗаголовокТаблицы = ОсноваЗаголовкаТаблицы;
	Таблица.ВывестиСекцию("Секция_15|Секция_151");
	НачальнаяКолонка = 6;
	КонечнаяКолонка = 6;

	Для т = 1 По СчетаАмортизацииБух.РазмерСписка() Цикл
		ЗаголовокСчетБух = "";
		СчетаАмортизацииБух.ПолучитьЗначение(т,ЗаголовокСчетБух);
		Таблица.ПрисоединитьСекцию("Секция_15|Секция_152");
		СчетаАмортизацииБух.Установить(ЗаголовокСчетБух,КонечнаяКолонка);
		КонечнаяКолонка = КонечнаяКолонка + 1;
		
	КонецЦикла;

	ЗаголовокСчетБух = "Итог";
	Таблица.ПрисоединитьСекцию("Секция_15|Секция_152");
	
	Таблица.Область(Таблица.ВысотаТаблицы() - 1,НачальнаяКолонка,Таблица.ВысотаТаблицы() - 1,КонечнаяКолонка).Объединить();					
	Таблица.Область(Таблица.ВысотаТаблицы() - 1,НачальнаяКолонка,Таблица.ВысотаТаблицы() - 1,НачальнаяКолонка).Текст = "Бухгалтерский учет";					
	Таблица.Область(Таблица.ВысотаТаблицы() - 1,НачальнаяКолонка,Таблица.ВысотаТаблицы() - 1,КонечнаяКолонка).Рамка(3,,3,);	
    
	КонечнаяКолонка = КонечнаяКолонка + 1;
	ПромежуточнаяКолонка = КонечнаяКолонка;
	
	Для т = 1 По СчетаАмортизацииНал.РазмерСписка() Цикл
		ЗаголовокСчетНал = "";
		СчетаАмортизацииНал.ПолучитьЗначение(т,ЗаголовокСчетНал);
		Таблица.ПрисоединитьСекцию("Секция_15|Секция_153");
		СчетаАмортизацииНал.Установить(ЗаголовокСчетНал,КонечнаяКолонка);
		КонечнаяКолонка = КонечнаяКолонка + 1;
		
	КонецЦикла;

	ЗаголовокСчетНал = "Итог";
	Таблица.ПрисоединитьСекцию("Секция_15|Секция_153");
	
	Таблица.Область(Таблица.ВысотаТаблицы() - 1,ПромежуточнаяКолонка,Таблица.ВысотаТаблицы() - 1,КонечнаяКолонка).Объединить();					
	Таблица.Область(Таблица.ВысотаТаблицы() - 1,ПромежуточнаяКолонка,Таблица.ВысотаТаблицы() - 1,ПромежуточнаяКолонка).Текст = "Налоговый учет";					
	Таблица.Область(Таблица.ВысотаТаблицы() - 1,ПромежуточнаяКолонка,Таблица.ВысотаТаблицы() - 1,КонечнаяКолонка).Рамка(3,,3,);	

	Таблица.Область(Таблица.ВысотаТаблицы() - 2,НачальнаяКолонка,Таблица.ВысотаТаблицы() - 2,КонечнаяКолонка).Объединить();					
	Таблица.Область(Таблица.ВысотаТаблицы() - 2,НачальнаяКолонка,Таблица.ВысотаТаблицы() - 2,НачальнаяКолонка).Текст = "Суммы начисленной амортизации за период";					

	// оформляем заголовок таблицы
	Таблица.Область(Таблица.ВысотаТаблицы() - 3, 2,Таблица.ВысотаТаблицы() - 3,КонечнаяКолонка+1).Объединить();					
	Таблица.Область(Таблица.ВысотаТаблицы() - 3, 2,Таблица.ВысотаТаблицы() - 3,КонечнаяКолонка+1).Рамка(3,3,3,3);					

	Таблица.ПрисоединитьСекцию("Секция_15|Секция_154");
	
	// вывод строк таблицы с амортизируемым имуществом
	АмортизируемоеИмущество.ВыбратьСтроки();
	Пока АмортизируемоеИмущество.ПолучитьСтроку() = 1 Цикл
		
		Если (АмортизируемоеИмущество.Объект.Вид() = "ОсновныеСредства") и (ВидИмущества = "ОС") Тогда
			Если (ПустоеЗначение(АмортизируемоеИмущество.ДатаПринятияКУчету) = 1)
			и (ПустоеЗначение(АмортизируемоеИмущество.Объект.МатериалДляОтраженияВСоставеМПЗ)=0) Тогда
				Продолжить;
			КонецЕсли;
		КонецЕсли;	

		
		Если ((АмортизируемоеИмущество.Объект.Вид() = "ОсновныеСредства") и (ВидИмущества = "ОС")) 
		 или ((АмортизируемоеИмущество.Объект.Вид() = "НематериальныеАктивы") и (ВидИмущества = "НМА")) Тогда
			АнализНачисленияАмортизации = АмортизируемоеИмущество.АнализНачисленияАмортизации;
			Наименование = АмортизируемоеИмущество.Объект.Наименование + ", инв.№" + АмортизируемоеИмущество.Объект.Код;;
			Таблица.ВывестиСекцию("Секция_16|Секция_151");

			Для т = 1 По СчетаАмортизацииБух.РазмерСписка() Цикл
				ЗаголовокСчетБух = "";
				СчетаАмортизацииБух.ПолучитьЗначение(т,ЗаголовокСчетБух);
				Стр = 0;
				ПечБух = 0;
				
				Если АнализНачисленияАмортизации.НайтиЗначение(СчетПоКоду(ЗаголовокСчетБух), Стр, "СчетАмортизации") = 1 Тогда
					АнализНачисленияАмортизации.ПолучитьСтрокуПоНомеру(Стр);
					ПечБух = Число(АнализНачисленияАмортизации.СуммаАмортизацииБух);
					ИтогиПоКолонкам.Установить(ЗаголовокСчетБух, (Число(ИтогиПоКолонкам.Получить(ЗаголовокСчетБух)) + ПечБух));
				КонецЕсли;

				Таблица.ПрисоединитьСекцию("Секция_16|Секция_152");
				
				Расшифровка = СоздатьОбъект("СписокЗначений");
				Расшифровка.Установить("ТипСтроки", "Амортизация");
				Расшифровка.Установить("Аналитика", АмортизируемоеИмущество.Объект);
				Расшифровка.Установить("Счет", ЗаголовокСчетБух);
				Таблица.Область(Таблица.ВысотаТаблицы(), 5 + т,Таблица.ВысотаТаблицы(),5 + т).Расшифровка(Расшифровка);
				
			КонецЦикла;

			ПечБух = АнализНачисленияАмортизации.Итог("СуммаАмортизацииБух");
			Таблица.ПрисоединитьСекцию("Секция_16|Секция_152");
			ИтогиПоКолонкам.Установить("ВсегоБух", (ИтогиПоКолонкам.Получить("ВсегоБух") + ПечБух));
			
			Для т = 1 По СчетаАмортизацииНал.РазмерСписка() Цикл
				ЗаголовокСчетНал = "";
				СчетаАмортизацииНал.ПолучитьЗначение(т,ЗаголовокСчетНал);
				Стр = 0;
				ПечНал = 0;
				
				Если АнализНачисленияАмортизации.НайтиЗначение(СчетПоКоду(ЗаголовокСчетНал), Стр, "СчетАмортизации") = 1 Тогда
					АнализНачисленияАмортизации.ПолучитьСтрокуПоНомеру(Стр);
					ПечНал = Число(АнализНачисленияАмортизации.СуммаАмортизацииНал);
					ИтогиПоКолонкам.Установить(ЗаголовокСчетНал, (Число(ИтогиПоКолонкам.Получить(ЗаголовокСчетНал)) + ПечНал));
				КонецЕсли;

				Таблица.ПрисоединитьСекцию("Секция_16|Секция_153");
				
				Расшифровка = СоздатьОбъект("СписокЗначений");
				Расшифровка.Установить("ТипСтроки", "Амортизация");
				Расшифровка.Установить("Аналитика", АмортизируемоеИмущество.Объект);
				Расшифровка.Установить("Счет", ЗаголовокСчетНал);
				Таблица.Область(Таблица.ВысотаТаблицы(), 6 + т + СчетаАмортизацииБух.РазмерСписка(),Таблица.ВысотаТаблицы(),6 + т + СчетаАмортизацииБух.РазмерСписка()).Расшифровка(Расшифровка);
				
			КонецЦикла;

			ПечНал = Число(АнализНачисленияАмортизации.Итог("СуммаАмортизацииНал"));
			Таблица.ПрисоединитьСекцию("Секция_16|Секция_153");
			ИтогиПоКолонкам.Установить("ВсегоНал", (ИтогиПоКолонкам.Получить("ВсегоНал") + ПечНал));

			ПечРазница = Число(АнализНачисленияАмортизации.Итог("СуммаАмортизацииБух")) - Число(АнализНачисленияАмортизации.Итог("СуммаАмортизацииНал"));
			Таблица.ПрисоединитьСекцию("Секция_16|Секция_154");

			Если ПечРазница <> 0  Тогда
				Таблица.Область(Таблица.ВысотаТаблицы(),КонечнаяКолонка + 1,Таблица.ВысотаТаблицы(),КонечнаяКолонка + 1).ЦветТекста(ТекстВыделения);					
			КонецЕсли;

		КонецЕсли;
	КонецЦикла;
	
	// Вывод итоговой строки
	Наименование = "Всего:";
	Таблица.ВывестиСекцию("Секция_16|Секция_151");

	ТекущаяСекция = "Секция_152";
	Для т = 1 По ИтогиПоКолонкам.РазмерСписка() Цикл
		ПечБух = Число(ИтогиПоКолонкам.ПолучитьЗначение(т,ЗаголовокСчетБух));
		ПечНал = ПечБух;
		
		Таблица.ПрисоединитьСекцию("Секция_16|"+ТекущаяСекция);

		Если ЗаголовокСчетБух = "ВсегоБух" Тогда
			ТекущаяСекция = "Секция_153";
		КонецЕсли;
	КонецЦикла;

	ПечРазница = ИтогиПоКолонкам.Получить("ВсегоБух") - ИтогиПоКолонкам.Получить("ВсегоНал");
	Таблица.ПрисоединитьСекцию("Секция_16|Секция_154");

	Если ПечРазница <> 0  Тогда
		Таблица.Область(Таблица.ВысотаТаблицы(),КонечнаяКолонка + 1,Таблица.ВысотаТаблицы(),КонечнаяКолонка + 1).ЦветТекста(ТекстВыделения);					
	КонецЕсли;

	Таблица.Область(Таблица.ВысотаТаблицы(),2,Таблица.ВысотаТаблицы(),КонечнаяКолонка + 1).Рамка(,3,,3);					

КонецПроцедуры // ПрорисоватьРазличияВСуммахАмортизацииИмущ()

//******************************************************************************
// ПрорисоватьРезультатыАнализаАмортизируемогоИмущества()
//
// Параметры:
//  Нет
//
// Возвращаемое значение:
//  Нет
//
// Описание:
//  Выводит в печатную форму табличной части отчета данные из
//  таблицы значений: АмортизируемоеИмущество
//
Процедура ПрорисоватьРезультатыАнализаАмортизируемогоИмущества()

	// очищаем старые значения
	Таблица.Очистить();

	Заголовок = "Анализ учета амортизируемого имущества";
	ПериодОтчета = Строка (" период с " + Формат(Дата1,"Д ДДММММГГГГ") + " по "+ Формат(Дата2,"Д ДДММММГГГГ"));
	Таблица.ВывестиСекцию("Секция_1");

	Если РасчетАмортизируемогоИмуществаВыполнен = 1 Тогда

		// Для ОСНОВНЫХ СРЕДСТВ	
		Заголовок = "Анализ учета основных средств";
		Таблица.ВывестиСекцию("Секция_2");
	
		// Непринятые к налоговому учету ОС
		Параметры = СоздатьОбъект("СписокЗначений");

		// параметры для подсчета сводных данных
		Параметры.Установить("СуммаБух", 0);
		Параметры.Установить("СуммаНал", 0);

		Параметры.Установить("НомерТаблицы", 1);
		Параметры.Установить("ВидИмущества", "ОС");
		Параметры.Установить("ЗаголовокТаблицы", "Стоимость основных средств, не принятых к налоговому учету");
		Параметры.Установить("Заголовок", "Наименование объекта основных средств");
		Параметры.Установить("ЗаголовокСтоимость", "Стоимость на конец периода" + РазделительСтрок + "(счета 01 и 03),руб");
	
		ПрорисоватьНепринятоеКНалоговомуУчетуИмущ(Параметры);
		
		// Различия в оценке ОС в бухгалтерском и налоговом учете
		Параметры.Установить("НомерТаблицы", 2);
		Параметры.Установить("ВидИмущества", "ОС");
		Параметры.Установить("ЗаголовокТаблицы", "Стоимость основных средств, введенных в эксплуатацию");
		Параметры.Установить("Заголовок", "Наименование объекта основных средств");
		Параметры.Установить("ЗаголовокСчетОст", "Счета 01 и 03");
		Параметры.Установить("ЗаголовокСчетАморт", "Счет 02");
		Параметры.Установить("ЗаголовокСчетНал", "Счета Н05.01 и Н05.МЦ");
		Параметры.Установить("Пояснение1", " до 01.01.2002");
		Параметры.Установить("Пояснение2", " после 01.01.2002");
		
		ПрорисоватьПринятоеКНалоговомуУчетуИмущ(Параметры);
	
		// Выводим сводные результаты
		СводнаяСтрока = "";
		Таблица.ВывестиСекцию("Секция_143");
		СводнаяСтрока = "Всего основных средств по данным бухучета: " + Параметры.Получить("СуммаБух");
		Таблица.ВывестиСекцию("Секция_143");
		СводнаяСтрока = "Всего основных средств по данным налогового учета: " + Параметры.Получить("СуммаНал");
		Таблица.ВывестиСекцию("Секция_143");

		ПечРазница = Параметры.Получить("СуммаБух") - Параметры.Получить("СуммаНал");
		СводнаяСтрока = "Всего разница: " + ПечРазница;
		Таблица.ВывестиСекцию("Секция_143");

		Если ПечРазница <> 0  Тогда
			Таблица.Область(Таблица.ВысотаТаблицы(), 2, Таблица.ВысотаТаблицы(), 2).ЦветТекста(ТекстВыделения);					
		КонецЕсли;

		// Различия в начислении амортизации ОС в бухгалтерском и налоговом учете
	
		ЗаголовокТаблицы = "Суммы начисленной амортизации основных средств";
		Заголовок = "Наименование объекта основных средств";
	
		ПрорисоватьРазличияВСуммахАмортизацииИмущ(4,Заголовок, ЗаголовокТаблицы, "ОС");
	
	
		// Для НЕМАТЕРИАЛЬНЫХ АКТИВОВ	
	
		Заголовок = "Анализ учета нематериальных активов";
		Таблица.ВывестиСекцию("Секция_2");
	
		// Непринятые к налоговому учету НМА

		// параметры для подсчета сводных данных
		Параметры.Установить("СуммаБух", 0);
		Параметры.Установить("СуммаНал", 0);

		Параметры.Установить("НомерТаблицы", 5);
		Параметры.Установить("ВидИмущества", "НМА");
		Параметры.Установить("ЗаголовокТаблицы", "Стоимость нематериальных активов, не принятых к налоговому учету");
		Параметры.Установить("Заголовок", "Наименование объекта нематериальных активов");
		Параметры.Установить("ЗаголовокСтоимость", "Стоимость на конец периода" + РазделительСтрок + "(счет 04),руб");
	
		ПрорисоватьНепринятоеКНалоговомуУчетуИмущ(Параметры);
		
		// Различия в оценке НМА в бухгалтерском и налоговом учете
		Параметры.Установить("НомерТаблицы", 6);
		Параметры.Установить("ВидИмущества", "НМА");
		Параметры.Установить("ЗаголовокТаблицы", "Стоимость нематериальных активов, принятых к учету");
		Параметры.Установить("Заголовок", "Наименование объекта нематериальных активов");
		Параметры.Установить("ЗаголовокСчетОст", "Счет 04");
		Параметры.Установить("ЗаголовокСчетАморт", "Счет 05");
		Параметры.Установить("ЗаголовокСчетНал", "Счет Н05.03");
		Параметры.Установить("Пояснение1", " до 01.01.2002");
		Параметры.Установить("Пояснение2", " после 01.01.2002");
		
		ПрорисоватьПринятоеКНалоговомуУчетуИмущ(Параметры);
	
		// Выводим сводные результаты
		СводнаяСтрока = "";
		Таблица.ВывестиСекцию("Секция_143");
		СводнаяСтрока = "Всего НМА по данным бухучета: " + Параметры.Получить("СуммаБух");
		Таблица.ВывестиСекцию("Секция_143");
		СводнаяСтрока = "Всего НМА по данным налогового учета: " + Параметры.Получить("СуммаНал");
		Таблица.ВывестиСекцию("Секция_143");

		ПечРазница = Параметры.Получить("СуммаБух") - Параметры.Получить("СуммаНал");
		СводнаяСтрока = "Всего разница: " + ПечРазница;
		Таблица.ВывестиСекцию("Секция_143");

		Если ПечРазница <> 0  Тогда
			Таблица.Область(Таблица.ВысотаТаблицы(), 2, Таблица.ВысотаТаблицы(), 2).ЦветТекста(ТекстВыделения);					
		КонецЕсли;

		// Различия в начислении амортизации НМА в бухгалтерском и налоговом учете
	
		ЗаголовокТаблицы = "Суммы начисленной амортизации нематериальных активов";
		Заголовок = "Наименование объекта нематериального актива";
	
		ПрорисоватьРазличияВСуммахАмортизацииИмущ(8, Заголовок, ЗаголовокТаблицы, "НМА");

	КонецЕсли;

	Таблица.Опции(0,0,0);
	Таблица.Показать();
	
КонецПроцедуры // ПрорисоватьРезультатыАнализаАмортизируемогоИмущества()

//******************************************************************************
// ПечатьСтрокиВОтчетПоЗадолженностям(Признак, Наименование, ИтоговаяТаблица)
//
// Параметры:
//  Признак - признак вида таблицы
//  Наименование - что выводим в строку "Наименование"
//  ИтоговаяТаблица - таблица с суммами подлежащие выводу в строку отчета
//
// Возвращаемое значение:
//  Нет
//
// Описание:
//  Выводит в печатную форму табличной части отчета 
//  отдельную строку
//
Процедура ПечатьСтрокиВОтчетПоЗадолженностям(Признак, Наименование, ИтоговаяТаблица)

	Если Признак = "Дебет" Тогда
		Если Наименование = "Всего:" Тогда
			ПечБух = ИтоговаяТаблица.Итог("ВсегоБухДебет");
			ПечНал = ИтоговаяТаблица.Итог("ВсегоНалДебет");
		Иначе
			ПечБух = ИтоговаяТаблица.ВсегоБухДебет;
			ПечНал = ИтоговаяТаблица.ВсегоНалДебет;
		КонецЕсли;        

	ИначеЕсли Признак = "Кредит" Тогда
		Если Наименование = "Всего:" Тогда
			ПечБух = ИтоговаяТаблица.Итог("ВсегоБухКредит");
			ПечНал = ИтоговаяТаблица.Итог("ВсегоНалКредит");
		Иначе
			ПечБух = ИтоговаяТаблица.ВсегоБухКредит;
			ПечНал = ИтоговаяТаблица.ВсегоНалКредит;
		КонецЕсли;        

	ИначеЕсли Признак = "НДС" Тогда
		Если Наименование = "Всего:" Тогда
			ПечБух = ИтоговаяТаблица.Итог("ВсегоБухДебет");
			ПечНал = ИтоговаяТаблица.Итог("ВсегоНалКредит");
		Иначе
			ПечБух = ИтоговаяТаблица.ВсегоБухДебет;
			ПечНал = ИтоговаяТаблица.ВсегоНалКредит;
		КонецЕсли;        
	
	КонецЕсли;

	ПечРазница = ПечБух - ПечНал;
	Таблица.ВывестиСекцию("Секция_18");

	Если ПечРазница <> 0  Тогда
		Таблица.Область(Таблица.ВысотаТаблицы(),10,Таблица.ВысотаТаблицы(),10).ЦветТекста(ТекстВыделения);					
	КонецЕсли;
	
КонецПроцедуры // ПечатьСтрокиВОтчетПоЗадолженностям()			
			
//******************************************************************************
// ПроанализироватьСтруктуруЗадолженностей(ИсходнаяТаблица, РезТаблица)
//
// Параметры:
//  ИсходнаяТаблица - таблица которую анализируем
//  РезТаблица - таблица для формирования итогов по контрагентам
//
// Возвращаемое значение:
//  Нет
//
// Описание:
//  Анализирует содержимое таблицы СтруктураЗадолженности
//  или СоставЗадолженности
//  и создает таблицу свернутых итогов по контрагенту
//
Процедура ПроанализироватьСтруктуруЗадолженностей(ИсходнаяТаблица, РезТаблица)

	ИсходнаяТаблица.Выгрузить(РезТаблица);

	РезТаблица.Свернуть("Контрагент", "ВсегоБухДебет,ВсегоБухКредит,ВсегоНалДебет,ВсегоНалКредит");

	// индексы начала и окончания информации о контрагенте в таблице "ИсходнаяТаблица"
	РезТаблица.НоваяКолонка("НачСтр","Число",15);
	РезТаблица.НоваяКолонка("КонСтр","Число",15);

	РезТаблица.ВыбратьСтроки();

	Пока РезТаблица.ПолучитьСтроку() = 1 Цикл
        СтрНач = "";
		Если ИсходнаяТаблица.НайтиЗначение(РезТаблица.Контрагент, СтрНач, "Контрагент") <> 0 Тогда
			РезТаблица.НачСтр = СтрНач;
			СтрКон = СтрНач;
			Пока СтрКон <= ИсходнаяТаблица.КоличествоСтрок() Цикл
				Если РезТаблица.Контрагент = ИсходнаяТаблица.ПолучитьЗначение(СтрКон,"Контрагент") Тогда
					СтрКон = СтрКон + 1;
				Иначе
					РезТаблица.КонСтр = Макс(СтрНач,СтрКон - 1);
					Прервать;
				КонецЕсли;    
			КонецЦикла;
			
			Если СтрКон > ИсходнаяТаблица.КоличествоСтрок() Тогда
				РезТаблица.КонСтр = ИсходнаяТаблица.КоличествоСтрок();
			КонецЕсли;
			
	    КонецЕсли;
	КонецЦикла;	

КонецПроцедуры // ПроанализироватьСтруктуруЗадолженностей()			

//******************************************************************************
// ПрорисоватьТаблицуПоАнализуЗадолженности(Признак)
//
// Параметры:
//  Признак - Определяет вид выводимой таблицы:
//    "Дебет" - Таблица анализа дебиторской задолженности
//    "Кредит" - Таблица анализа кредиторской задолженности
//    "НДС" - Таблица анализа НДС с кредиторской задолженности
//
// Возвращаемое значение:
//  Нет
//
// Описание:
//  Выводит в печатную форму табличной части отчета таблицу,
//  на основе информации из таблицы значений: СтруктураЗадолженностей
//  или СтруктураЗадолженностейНДС
//
Процедура ПрорисоватьТаблицуПоАнализуЗадолженности(Признак = "НДС")

	СчетаБух = СоздатьОбъект("СписокЗначений");
	СчетаНал = СоздатьОбъект("СписокЗначений");

	Если Признак = "Дебет" Тогда
		ИсходнаяТаблица = СтруктураЗадолженностей;
		ОсноваЗаголовкаТаблицы = "Дебиторская задолженность";
		Заголовок = "Контрагент / договор";
		НомерТаблицы = 1;
		
	ИначеЕсли Признак = "Кредит" Тогда
		ИсходнаяТаблица = СтруктураЗадолженностей;
		ОсноваЗаголовкаТаблицы = "Кредиторская задолженность";
		Заголовок = "Контрагент / договор";
		НомерТаблицы = 2;

	ИначеЕсли Признак = "НДС" Тогда
		ИсходнаяТаблица = СтруктураЗадолженностейНДС;
		ОсноваЗаголовкаТаблицы = "НДС по кредиторской задолженности";
		Заголовок = "Контрагент";
		НомерТаблицы = 3;
	
	КонецЕсли;
	
	// Просматриваем исходную таблицу с целью выявления итогов по контрагентам 
	ИтогиПоКонтрагентам = СоздатьОбъект("ТаблицаЗначений");

	ПроанализироватьСтруктуруЗадолженностей(ИсходнаяТаблица, ИтогиПоКонтрагентам);

	// подготовка шапки таблицы
	ЗаголовокТаблицы = ОсноваЗаголовкаТаблицы;
	Таблица.ВывестиСекцию("Секция_17");

	// Вывод строк таблицы
	ИтогиПоКонтрагентам.ВыбратьСтроки();
	Пока ИтогиПоКонтрагентам.ПолучитьСтроку() = 1 Цикл

		Если Признак = "Дебет" Тогда
			Если (ИтогиПоКонтрагентам.ВсегоБухДебет = 0)
			   и (ИтогиПоКонтрагентам.ВсегоНалДебет = 0) Тогда
				Продолжить;
			КонецЕсли;    

		ИначеЕсли Признак = "Кредит" Тогда
			Если (ИтогиПоКонтрагентам.ВсегоБухКредит = 0)
			   и (ИтогиПоКонтрагентам.ВсегоНалКредит = 0) Тогда
				Продолжить;
			КонецЕсли;    

		ИначеЕсли Признак = "НДС" Тогда
			Если (ИтогиПоКонтрагентам.ВсегоБухДебет = 0)
			   и (ИтогиПоКонтрагентам.ВсегоНалКредит = 0) Тогда
				Продолжить;
			КонецЕсли;    

		КонецЕсли;
			
		Наименование = ИтогиПоКонтрагентам.Контрагент;
		ПечатьСтрокиВОтчетПоЗадолженностям(Признак, Наименование, ИтогиПоКонтрагентам);
		
		Если Признак <> "НДС" Тогда
			// требуется разворот по контрагентам
			Таблица.Область(Таблица.ВысотаТаблицы(),2,Таблица.ВысотаТаблицы(),10).Рамка(,3,,);					

			Для т = ИтогиПоКонтрагентам.НачСтр По ИтогиПоКонтрагентам.КонСтр Цикл
				ИсходнаяТаблица.ПолучитьСтрокуПоНомеру(т);

				Если Признак = "Дебет" Тогда
					Если (ИсходнаяТаблица.ВсегоБухДебет = 0)
					   и (ИсходнаяТаблица.ВсегоНалДебет = 0) Тогда
						Продолжить;
					КонецЕсли;    
		
				ИначеЕсли Признак = "Кредит" Тогда
					Если (ИсходнаяТаблица.ВсегоБухКредит = 0)
					   и (ИсходнаяТаблица.ВсегоНалКредит = 0) Тогда
						Продолжить;
					КонецЕсли;
				КонецЕсли;
		
				Наименование = "     " + ИсходнаяТаблица.Договор.Наименование;
				ПечатьСтрокиВОтчетПоЗадолженностям(Признак, Наименование, ИсходнаяТаблица);
			КонецЦикла;

			Таблица.Область(Таблица.ВысотаТаблицы(),2,Таблица.ВысотаТаблицы(),10).Рамка(,,,3);					
		КонецЕсли;
	КонецЦикла;
	
	// Вывод итоговой строки
	Наименование = "Всего:";
	ПечатьСтрокиВОтчетПоЗадолженностям(Признак, Наименование, ИтогиПоКонтрагентам);

	Таблица.Область(Таблица.ВысотаТаблицы(),2,Таблица.ВысотаТаблицы(),10).Рамка(,,,3);					
	Таблица.Область(Таблица.ВысотаТаблицы(),2,Таблица.ВысотаТаблицы(),10).Полужирный(1);					

КонецПроцедуры // ПрорисоватьТаблицуПоАнализуЗадолженности()

//******************************************************************************
// ПрорисоватьРезультатыАнализаЗадолженностей()
//
// Параметры:
//  Нет
//
// Возвращаемое значение:
//  Нет
//
// Описание:
//  Выводит в печатную форму табличной части отчета данные из
//  таблицы значений: СтруктураЗадолженностей и СтруктураЗадолженностейНДС
//
Процедура ПрорисоватьРезультатыАнализаЗадолженностей()

	// очищаем старые значения
	Таблица.Очистить();

	Заголовок = "Анализ учета задолженности";
	ПериодОтчета = Строка (" период с " + Формат(Дата1,"Д ДДММММГГГГ") + " по "+ Формат(Дата2,"Д ДДММММГГГГ"));
	Таблица.ВывестиСекцию("Секция_1");
	
	Если РасчетЗадолженностейВыполнен = 1 Тогда;
		// Выводим данные в печатную форму таблицы по дебиторским задолженностям
		ПрорисоватьТаблицуПоАнализуЗадолженности("Дебет");
	
		// Выводим данные в печатную форму таблицы по кредиторским задолженностям
		ПрорисоватьТаблицуПоАнализуЗадолженности("Кредит");
		
		// Выводим данные в печатную форму таблицы по НДС с кредиторской задолженности
		ПрорисоватьТаблицуПоАнализуЗадолженности("НДС");
	КонецЕсли;
		
	Таблица.Опции(0,0,0);
	Таблица.Показать();

КонецПроцедуры // ПрорисоватьРезультатыАнализаЗадолженностей()	

//******************************************************************************
// РассчитатьСтрокуРасшифровкиПоказателя(БухИт, ТаблицаРасшифровкиПоказателей)
//
// Параметры:
//  БухИт - объект бухгалтерские итоги с рассчитанными за период итогами
//  ТаблицаРасшифровкиПоказателей - таблица содержащая параметры расшифровки показателя
//									и спозиционированная на нужной строке
//
// Возвращаемое значение:
//  Рассчитанная сумма показателя
//
// Описание:
//  Расчет суммы составляющей показателя по строке таблиц значений
//  содержащих расшифровку показателей: ПоказателиДоходаРасшифровка или ПоказателиРасходаРасшифровка
//
Функция РассчитатьСтрокуРасшифровкиПоказателя(БухИт, ТаблицаРасшифровкиПоказателей, АнализПоказателей, Режим)

 Перем Парам, КоррАналитика, АналТип, КоррАналТип, Аналитика;
 
    Парам = СоздатьОбъект("СписокЗначений");
	
 	Для т = 1 По ТаблицаРасшифровкиПоказателей.КоличествоКолонок() Цикл
		стр = ТаблицаРасшифровкиПоказателей.НомерСтроки;
		кол = ТаблицаРасшифровкиПоказателей.ПолучитьПараметрыКолонки(т);
		Парам.ДобавитьЗначение(ТаблицаРасшифровкиПоказателей.ПолучитьЗначение(стр,кол),кол);
	КонецЦикла;
	
	Парам.Установить("ВидИтогов", СокрЛП(Парам.Получить("ВидИтогов")));
    
	НаименованиеГруппировки1 = ТаблицаРасшифровкиПоказателей.Группировка1;
	ЗначениеСоставляющей = 0;
	
	// Возможные значения переменной ТипФильтрации:  "", "прямая", "реквизит", "НаличиеДО"    
	Если ПустоеЗначение(Парам.Получить("ТипАналитики")) = 0  Тогда
		Ид = СтрЗаменить(Парам.Получить("ТипАналитики"), "ВидСубконто.","");
		АналТип = ВидыСубконто.ЗначениеПоИдентификатору(Ид);
	КонецЕсли;
	
	Если ПустоеЗначение(Парам.Получить("КоррТипАналитики")) = 0  Тогда
		Ид = СтрЗаменить(Парам.Получить("КоррТипАналитики"), "ВидСубконто.","");
		КоррАналТип = ВидыСубконто.ЗначениеПоИдентификатору(Ид);
	КонецЕсли;
   
	
	Если Режим = "Расход" Тогда
		Если ТаблицаРасшифровкиПоказателей.Сумма <> 0 Тогда
			ЗначениеСоставляющей = ТаблицаРасшифровкиПоказателей.Сумма; 
			// формирование строки анализа
			АнализПоказателей.НоваяСтрока();	
			АнализПоказателей.ПризнакУчета = ТаблицаРасшифровкиПоказателей.ПризнакУчета;
			АнализПоказателей.Группировка1 = ТаблицаРасшифровкиПоказателей.Группировка2;
			АнализПоказателей.Группировка2 = ТаблицаРасшифровкиПоказателей.Группировка2;
			АнализПоказателей.Аналитика = "нет";
			АнализПоказателей.СуммаБУ = ТаблицаРасшифровкиПоказателей.Сумма;	
			АнализПоказателей.СчетчикСтрок = 1;
			АнализПоказателей.НомерВТаблицеРасшифровки = ТаблицаРасшифровкиПоказателей.НомерСтроки;
			
		КонецЕсли;
		
	КонецЕсли;

	Если (Найти(Парам.Получить("ТипФильтрации"),"прямая") <> 0)
	 или (ПустоеЗначение(Парам.Получить("ТипФильтрации")) = 1) Тогда 
		// Используется прямая фильтрация с явным заданием значения аналитики
		// либо вообще без аналитики (синтетичесткие итоги по счетам)
		// в качестве аналитики при этом могут использоваться только перечисления
		// прямая фильтрация по справочникам невозможна !

		Если ТипЗначенияСтр(АналТип) = "ВидСубконто" Тогда
			// преобразовываем тип
			Ид = СтрЗаменить(АналТип.ТипСубконто(), "Перечисление.","");
			АналТип = Перечисление.ПолучитьАтрибут(Ид);
			Аналитика = АналТип.ЗначениеПоИдентификатору(Парам.Получить("ИдАналитики"));
		КонецЕсли;

		Если Парам.Получить("ВидИтогов") ="КО" Тогда
			Если ПустоеЗначение(Аналитика) = 0 Тогда
				ЗначениеСоставляющей = БухИт.КО(Парам.Получить("Счет"),"С",,Аналитика);
			Иначе
				ЗначениеСоставляющей = БухИт.КО(Парам.Получить("Счет"),"С");			
			КонецЕсли;
			
		ИначеЕсли Парам.Получить("ВидИтогов") = "КО-ДО" Тогда
			Если ПустоеЗначение(Аналитика) = 0 Тогда
				ЗначениеСоставляющей = БухИт.КО(Парам.Получить("Счет"),"С",,Аналитика)
				                     - БухИт.ДО(Парам.Получить("Счет"),"С",,Аналитика);
			Иначе
				ЗначениеСоставляющей = БухИт.КО(Парам.Получить("Счет"),"С")
				                     - БухИт.ДО(Парам.Получить("Счет"),"С");
			КонецЕсли;

		ИначеЕсли Парам.Получить("ВидИтогов") ="ДО" Тогда
			Если ПустоеЗначение(Аналитика) = 0 Тогда
				ЗначениеСоставляющей = БухИт.ДО(Парам.Получить("Счет"),"С",,Аналитика);			
			Иначе
				ЗначениеСоставляющей = БухИт.ДО(Парам.Получить("Счет"),"С");			
			КонецЕсли;
			
		ИначеЕсли Парам.Получить("ВидИтогов") ="ДО-КО" Тогда
			Если ПустоеЗначение(Аналитика) = 0 Тогда
				ЗначениеСоставляющей = БухИт.ДО(Парам.Получить("Счет"),"С",,Аналитика)
				                     - БухИт.КО(Парам.Получить("Счет"),"С",,Аналитика);
			Иначе
				ЗначениеСоставляющей = БухИт.ДО(Парам.Получить("Счет"),"С")
									 - БухИт.КО(Парам.Получить("Счет"),"С");
			КонецЕсли;

		ИначеЕсли Парам.Получить("ВидИтогов") ="СКД" Тогда
			Если ПустоеЗначение(Аналитика) = 0 Тогда
				ЗначениеСоставляющей = БухИт.СКД(Парам.Получить("Счет"),"С",,Аналитика);			
			Иначе
				ЗначениеСоставляющей = БухИт.СКД(Парам.Получить("Счет"),"С");			
			КонецЕсли;

		ИначеЕсли Парам.Получить("ВидИтогов") ="СКК" Тогда
			Если ПустоеЗначение(Аналитика) = 0 Тогда
				ЗначениеСоставляющей = БухИт.СКК(Парам.Получить("Счет"),"С",,Аналитика);			
			Иначе
				ЗначениеСоставляющей = БухИт.СКК(Парам.Получить("Счет"),"С");			
			КонецЕсли;

		ИначеЕсли (Парам.Получить("ВидИтогов") ="ОБ") Тогда
			ЗначениеСоставляющей = БухИт.ОБ(Парам.Получить("Счет"), Парам.Получить("КоррСчет"), "С");
			
		ИначеЕсли Парам.Получить("ВидИтогов") ="СКДР" Тогда
			ЗначениеСоставляющей = БухИт.СКДРС(Парам.Получить("Счет"),"С");			

		ИначеЕсли Парам.Получить("ВидИтогов") ="СККР" Тогда
			ЗначениеСоставляющей = БухИт.СККРС(Парам.Получить("Счет"),"С");			

		КонецЕсли;
		
	ИначеЕсли Найти(Парам.Получить("ТипФильтрации"),"разворачивать по реквизиту") <> 0 Тогда
        // При развороте по реквизиту в отчете будут отражена
		// информация сгруппированная по значениям реквизита.
		// При этом если в служебной таблице не указано наименование
		// первой группировки, то наименование первой группировки примет
		// значение разворачиваемого реквизита.
		// Разворачивать так же можно не только по значению реквизита,
		// но и по значению субконто.
		ВсегоСумма = 0;
		
		Ит = СоздатьОбъект("БухгалтерскиеИтоги");
		Ит.ИспользоватьПланСчетов(ОсновнойПланСчетов());
		Если ПустоеЗначение(ВыбраннаяФирма) = 0 Тогда
			Ит.ИспользоватьРазделительУчета(ВыбраннаяФирма);
		КонецЕсли;
		
		Если ТипЗначенияСтр(АналТип) = "ВидСубконто" Тогда 
			Ит.ИспользоватьСубконто(АналТип,, 1);
		КонецЕсли;
		
		Если ТипЗначенияСтр(КоррАналТип) = "ВидСубконто" Тогда 
			Ит.ИспользоватьКорСубконто(КоррАналТип,, 1);
		КонецЕсли;
		
		НаименованиеРеквизита     = Парам.Получить("ИдРеквизита");
		НаименованиеКоррРеквизита = Парам.Получить("КоррИдРеквизита");
        
		Если (Парам.Получить("ВидИтогов") = "СКД")
		 или (Парам.Получить("ВидИтогов") = "СКК") Тогда
		    ТипИтогов = 1;
		Иначе
			ТипИтогов = 2;
		КонецЕсли;
		Ит.ВыполнитьЗапрос(Дата1, Дата2, Парам.Получить("Счет"), Парам.Получить("КоррСчет"),, ТипИтогов,, "С");
		Ит.ВыбратьСубконто(1);
		Пока Ит.ПолучитьСубконто(1) = 1 Цикл
			                    
			Если ТипЗначенияСтр(Ит.Субконто(1)) = "Перечисление" Тогда
				ЗначениеРеквизита = Ит.Субконто(1);
				
			Иначе      
				ЗначениеРеквизита = Ит.Субконто(1).ПолучитьАтрибут(НаименованиеРеквизита);
			КонецЕсли;
			
			Если //(ЗначениеРеквизита = Перечисление.ГруппыВидыРасходов.НеПринимаемые) или
			(ЗначениеРеквизита = Перечисление.ГруппыВидыРасходов.Амортизация) Тогда
			    Продолжить;
			КонецЕсли;
			
		    Если ПустоеЗначение(ТаблицаРасшифровкиПоказателей.Группировка1) = 1 Тогда
				НаименованиеГруппировки1 = ЗначениеРеквизита;
			КонецЕсли;
			
			СуммаПоСубконто = 0;
			
			Если ПустоеЗначение(КоррАналТип) = 0 Тогда
				// Дополнительно фильтруем по корреспондирующим субконто
				Ит.ВыбратьКорСубконто(1);
				Пока Ит.ПолучитьКорСубконто(1) = 1 Цикл
					ФильтрКрСбПройден = 0;
					ЗначениеКоррРеквизита = Ит.КорСубконто(1).ПолучитьАтрибут(НаименованиеКоррРеквизита);
					Если ТипЗначенияСтр(ЗначениеКоррРеквизита) = "Счет" Тогда
						КдСч = ЗначениеКоррРеквизита.Код;
						Если Найти(Парам.Получить("КоррИдАналитики"),КдСч) <> 0 Тогда
							ФильтрКрСбПройден = 1;
						КонецЕсли;

						Если ФильтрКрСбПройден = 1 Тогда
							Если (Парам.Получить("ВидИтогов") ="ДО")
							 или (Парам.Получить("ВидИтогов") ="ОБ") Тогда
								СуммаПоСубконто = СуммаПоСубконто + Ит.КорДО();
								
							ИначеЕсли Парам.Получить("ВидИтогов") ="ДО-КО" Тогда
							    СуммаПоСубконто = СуммаПоСубконто + Ит.КорДО() - Ит.КорКО();
							КонецЕсли;
						КонецЕсли;                        
					КонецЕсли;
				КонецЦикла;
			    
			Иначе
				Если Парам.Получить("ВидИтогов") ="СКД" Тогда
					СуммаПоСубконто = СуммаПоСубконто + Ит.СКД();
	
				ИначеЕсли Парам.Получить("ВидИтогов") ="СКК" Тогда
					СуммаПоСубконто = СуммаПоСубконто + Ит.СКК();
	
				ИначеЕсли Парам.Получить("ВидИтогов") ="КО" Тогда
					СуммаПоСубконто = СуммаПоСубконто + Ит.КО();
					
				ИначеЕсли Парам.Получить("ВидИтогов") ="КО-ДО" Тогда
					СуммаПоСубконто = СуммаПоСубконто + Ит.КО() - Ит.ДО();
	
				ИначеЕсли Парам.Получить("ВидИтогов") ="ДО" Тогда
					СуммаПоСубконто = СуммаПоСубконто + Ит.ДО();
					
				ИначеЕсли Парам.Получить("ВидИтогов") ="ДО-КО" Тогда
					СуммаПоСубконто = СуммаПоСубконто + Ит.ДО() - Ит.КО();
					
				ИначеЕсли Парам.Получить("ВидИтогов") ="ОБ" Тогда
					СуммаПоСубконто = СуммаПоСубконто + Ит.КорДО();
	
				КонецЕсли;
			КонецЕсли; 
			
						
			Если СуммаПоСубконто <> 0 Тогда
			    ВсегоСумма = ВсегоСумма + СуммаПоСубконто;
			
				АнализПоказателей.НоваяСтрока();	
				АнализПоказателей.ПризнакУчета = ТаблицаРасшифровкиПоказателей.ПризнакУчета;
				АнализПоказателей.Группировка1 = НаименованиеГруппировки1;
				АнализПоказателей.Группировка2 = ТаблицаРасшифровкиПоказателей.Группировка2;
		
				Если ПустоеЗначение(Аналитика) = 0 Тогда
					АнализПоказателей.Аналитика = Аналитика;
				Иначе
					АнализПоказателей.Аналитика = "нет";
				КонецЕсли;
		
				Если ТаблицаРасшифровкиПоказателей.ПризнакУчета = "БУ" Тогда
					АнализПоказателей.СуммаБУ = ТаблицаРасшифровкиПоказателей.ЗнакСоставляющей * СуммаПоСубконто;	
				Иначе
					АнализПоказателей.СуммаНУ = ТаблицаРасшифровкиПоказателей.ЗнакСоставляющей * СуммаПоСубконто;	
				КонецЕсли;
				
				АнализПоказателей.СчетчикСтрок = 2;
				АнализПоказателей.НомерВТаблицеРасшифровки = ТаблицаРасшифровкиПоказателей.НомерСтроки;
				АнализПоказателей.Аналитика = ЗначениеРеквизита
			КонецЕсли;

		КонецЦикла;
		
		ЗначениеСоставляющей = ВсегоСумма;

	ИначеЕсли Найти(Парам.Получить("ТипФильтрации"),"реквизит") <> 0 Тогда
		// Используется косвенная фильтрация когда итог получаем 
		// отфильтровывая по значению реквизита и суммируя нужные значения
		// итогов по каждому объекту аналитики
		// в качестве аналитики при этом могут использоваться только справочники
		// косвенная фильтрация по перечислениям невозможна !

		ВсегоСумма = 0;
		
		Ит = СоздатьОбъект("БухгалтерскиеИтоги");
		Ит.ИспользоватьПланСчетов(ОсновнойПланСчетов());
		Если ПустоеЗначение(ВыбраннаяФирма) = 0 Тогда
			Ит.ИспользоватьРазделительУчета(ВыбраннаяФирма);
		КонецЕсли;

		Если ТипЗначенияСтр(АналТип) = "ВидСубконто" Тогда 
			Ит.ИспользоватьСубконто(АналТип,, 1);
			
			Если ПустоеЗначение(НаименованиеГруппировки1) = 1 Тогда
			    Спр = СоздатьОбъект(АналТип.ТипСубконто());
				Реквизит = Спр.ПолучитьАтрибут(Парам.Получить("ИдРеквизита"));
				Если ТипЗначенияСтр(Реквизит) = "Перечисление" Тогда
				    Переч = Перечисление.ПолучитьАтрибут(Реквизит.Вид());
					НаименованиеГруппировки1 = Переч.ЗначениеПоИдентификатору(Парам.Получить("ИдАналитики"));
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		Если ТипЗначенияСтр(КоррАналТип) = "ВидСубконто" Тогда 
			Ит.ИспользоватьКорСубконто(КоррАналТип,, 1);
		КонецЕсли;
		
		НаименованиеРеквизита     = Парам.Получить("ИдРеквизита");
		НаименованиеКоррРеквизита = Парам.Получить("КоррИдРеквизита");
        
		Если (Парам.Получить("ВидИтогов") = "СКД")
		 или (Парам.Получить("ВидИтогов") = "СКК") Тогда
		    ТипИтогов = 1;
		Иначе
			ТипИтогов = 2;
		КонецЕсли; 
		
		Ит.ВыполнитьЗапрос(Дата1, Дата2, Парам.Получить("Счет"), Парам.Получить("КоррСчет"),, ТипИтогов,, "С");
		Ит.ВыбратьСубконто(1);
		Пока Ит.ПолучитьСубконто(1) = 1 Цикл
			ФильтрСбПройден = 0;
			                    
			ЗначениеСубконто = Ит.Субконто(1);
			ЗначениеСубконто.ИспользоватьДату(Дата2, 1);
			ЗначениеРеквизита = ЗначениеСубконто.ПолучитьАтрибут(НаименованиеРеквизита);
			Если ТипЗначенияСтр(ЗначениеРеквизита) = "Перечисление" Тогда
				Если ЗначениеРеквизита = Перечисление.ГруппыВидыРасходов.НеПринимаемые Тогда
				    Продолжить;
				КонецЕсли;
				Если ЗначениеРеквизита.Идентификатор() = Парам.Получить("ИдАналитики") Тогда
					ФильтрСбПройден = 1;
				КонецЕсли;

			ИначеЕсли ТипЗначенияСтр(ЗначениеРеквизита) = "Счет" Тогда
				КдСч = ЗначениеРеквизита.Код;
				Если Найти(Парам.Получить("ИдАналитики"),КдСч) <> 0 Тогда
					ФильтрСбПройден = 1;
				КонецЕсли;
				
			ИначеЕсли ТипЗначенияСтр(ЗначениеРеквизита) = "Строка" Тогда
				Стр = СокрЛП(ЗначениеРеквизита);
				Если Найти(Стр,Парам.Получить("ИдАналитики")) <> 0 Тогда
					ФильтрСбПройден = 1;
				КонецЕсли;
				
			ИначеЕсли ТипЗначенияСтр(ЗначениеРеквизита) = "Число" Тогда
				Если ЗначениеРеквизита = Число(Парам.Получить("ИдАналитики")) Тогда
					ФильтрСбПройден = 1;
				КонецЕсли;
				
			КонецЕсли;
			
			Если ПустоеЗначение(КоррАналТип) = 0 Тогда
				// Дополнительно фильтруем по корреспондирующим субконто
				Ит.ВыбратьКорСубконто(1);
				Пока Ит.ПолучитьКорСубконто(1) = 1 Цикл
					ФильтрКрСбПройден = 0;
					ЗначениеКоррРеквизита = Ит.КорСубконто(1).ПолучитьАтрибут(НаименованиеКоррРеквизита);
					Если ТипЗначенияСтр(ЗначениеКоррРеквизита) = "Счет" Тогда
						КдСч = ЗначениеКоррРеквизита.Код;
						Если Найти(Парам.Получить("КоррИдАналитики"),КдСч) <> 0 Тогда
							ФильтрКрСбПройден = 1;
						КонецЕсли;

						Если (ФильтрСбПройден = 1)
						   и (ФильтрКрСбПройден = 1) Тогда
							Если (Парам.Получить("ВидИтогов") ="ДО")
							 или (Парам.Получить("ВидИтогов") ="ОБ") Тогда
								ВсегоСумма = ВсегоСумма + Ит.КорДО();
								
							ИначеЕсли Парам.Получить("ВидИтогов") ="ДО-КО" Тогда
								ВсегоСумма = ВсегоСумма + Ит.КорДО() - Ит.КорКО();
							КонецЕсли;
						КонецЕсли;                        
					КонецЕсли;
				КонецЦикла;
			    
			Иначе
				Если ФильтрСбПройден = 1 Тогда
					Если Парам.Получить("ВидИтогов") ="СКД" Тогда
						ВсегоСумма = ВсегоСумма + Ит.СКД();
		
					ИначеЕсли Парам.Получить("ВидИтогов") ="СКК" Тогда
						ВсегоСумма = ВсегоСумма + Ит.СКК();
		
					ИначеЕсли Парам.Получить("ВидИтогов") ="КО" Тогда
						ВсегоСумма = ВсегоСумма + Ит.КО();
						
					ИначеЕсли Парам.Получить("ВидИтогов") ="КО-ДО" Тогда
						ВсегоСумма = ВсегоСумма + Ит.КО() - Ит.ДО();
		
					ИначеЕсли Парам.Получить("ВидИтогов") ="ДО" Тогда
						ВсегоСумма = ВсегоСумма + Ит.ДО();
						
					ИначеЕсли Парам.Получить("ВидИтогов") ="ДО-КО" Тогда
						ВсегоСумма = ВсегоСумма + Ит.ДО() - Ит.КО();
						
					ИначеЕсли Парам.Получить("ВидИтогов") ="ОБ" Тогда
						ВсегоСумма = ВсегоСумма + Ит.КорДО();
		
					КонецЕсли;
		
				КонецЕсли;
			КонецЕсли;

		КонецЦикла;
		
		ЗначениеСоставляющей = ВсегоСумма;
			
	ИначеЕсли Найти(Парам.Получить("ТипФильтрации"),"НаличиеДО") <> 0 Тогда
		// Специальное условие для анализа внереализационных доходов
		ВсегоСумма = 0;
		
		Ит = СоздатьОбъект("БухгалтерскиеИтоги");
		Ит.ИспользоватьПланСчетов(ОсновнойПланСчетов());
		Если ПустоеЗначение(ВыбраннаяФирма) = 0 Тогда
			Ит.ИспользоватьРазделительУчета(ВыбраннаяФирма);
		КонецЕсли;
		
		Ит.ВключатьСубсчета(1,1);
		Ит.ИспользоватьСубконто(,, 1);
		Ит.ВыполнитьЗапрос(Дата1, Дата2, "91.1,91.2",,, 2,, "С");
		Ит.ВыбратьСубконто(1);
		Пока Ит.ПолучитьСубконто(1) = 1 Цикл
			Ит.ВыбратьСчета();
			Если Ит.ПолучитьСчет(,СчетПоКоду("91.1")) = 1 Тогда
				// анализируем данное субконто только в том случае, если по нему был кредитовый оборот
				Если Ит.КО() <> 0 Тогда
					Ит.ВыбратьСчета();
					Если Ит.ПолучитьСчет(,СчетПоКоду("91.2")) = 1 Тогда
						Ит.ВыбратьКорСчета(,Парам.Получить("КоррСчет"));
						Если Ит.ПолучитьКорСчет(,Парам.Получить("КоррСчет")) = 1 Тогда
							ВсегоСумма = ВсегоСумма + Ит.КорДО();
						КонецЕсли;
					КонецЕсли;    
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;

		ЗначениеСоставляющей = ВсегоСумма;

	ИначеЕсли (Найти(Парам.Получить("ТипФильтрации"),"показатель") <> 0) Тогда
		// Рассчитывать не нужно а надо просто взять
		// готовое значение уже рассчитанного показателя
		ИндексПоказателя = Число(СтрЗаменить(Парам.Получить("ТипФильтрации"),"показатель",""));
		
		ТабРасш = ПоказателиРасходов.ПолучитьЗначение(ИндексПоказателя, "АнализПоказателейРасходов");

		ЗначениеСоставляющей= ТабРасш.Итог("СуммаБУ");
	
		
	ИначеЕсли Найти(Парам.Получить("ТипФильтрации"),"субконто") <> 0 Тогда
		// Используется косвенная фильтрация когда итог получаем 
		// отфильтровывая по значению субконто и суммируя нужные значения
		// итогов по каждому объекту аналитики

		ВсегоСумма = 0;
		
		Ит = СоздатьОбъект("БухгалтерскиеИтоги");
		Ит.ИспользоватьПланСчетов(ОсновнойПланСчетов());
		Если ПустоеЗначение(ВыбраннаяФирма) = 0 Тогда
			Ит.ИспользоватьРазделительУчета(ВыбраннаяФирма);
		КонецЕсли;
		
		Если (ТипЗначенияСтр(АналТип) = "ВидСубконто") И (Парам.Получить("Элемент").Выбран() = 0) Тогда 
			Ид = СтрЗаменить(АналТип.ТипСубконто(), "Перечисление.",""); 
			Перечисл = Перечисление.ПолучитьАтрибут(Ид);
			ЗначениеСубконто = Перечисл.ЗначениеПоИдентификатору(Парам.Получить("ИдАналитики"));
			Ит.ИспользоватьСубконто(АналТип, ЗначениеСубконто, 2);
		КонецЕсли;   
		
		Если (ТипЗначенияСтр(АналТип) = "ВидСубконто") И (Парам.Получить("Элемент").Выбран() = 1)  Тогда 
			ЗначениеСубконто = Парам.Получить("Элемент");
			Ит.ИспользоватьСубконто(Парам.Получить("ТипАналитикиСправочника"), ЗначениеСубконто, 2);    
		КонецЕсли;
		
		Если ТипЗначенияСтр(КоррАналТип) = "ВидСубконто" Тогда                                  
			Ид = СтрЗаменить(КоррАналТип.ТипСубконто(), "Перечисление.","");
			Перечисл = Перечисление.ПолучитьАтрибут(Ид);
			КоррЗначениеСубконто = Перечисл.ЗначениеПоИдентификатору(Парам.Получить("КоррИдАналитики"));
			Ит.ИспользоватьКорСубконто(КоррАналТип, КоррЗначениеСубконто, 2);
		КонецЕсли;
		            
		Если (Парам.Получить("ВидИтогов") = "СКД")
		 или (Парам.Получить("ВидИтогов") = "СКК") Тогда
		    ТипИтогов = 1;
		Иначе
			ТипИтогов = 2;
		КонецЕсли;
		
		Если Ит.ВыполнитьЗапрос(Дата1, Дата2, Парам.Получить("Счет"), Парам.Получить("КоррСчет"),, ТипИтогов,, "С") = 1 Тогда
			Если Парам.Получить("ВидИтогов") ="СКД" Тогда
				ВсегоСумма = ВсегоСумма + Ит.СКД();

			ИначеЕсли Парам.Получить("ВидИтогов") ="СКК" Тогда
				ВсегоСумма = ВсегоСумма + Ит.СКК();

			ИначеЕсли Парам.Получить("ВидИтогов") ="КО" Тогда
				ВсегоСумма = ВсегоСумма + Ит.КорКО();
				
			ИначеЕсли Парам.Получить("ВидИтогов") ="ДО" Тогда
				ВсегоСумма = ВсегоСумма + Ит.КорДО();
				
			ИначеЕсли Парам.Получить("ВидИтогов") ="ОБ" Тогда
				ВсегоСумма = ВсегоСумма + Ит.КорДО();
			КонецЕсли;
		    
		КонецЕсли;
		
		ЗначениеСоставляющей = ВсегоСумма;	

	КонецЕсли;
	
	Если (ЗначениеСоставляющей <> 0) и (Найти(Парам.Получить("ТипФильтрации"),"разворачивать по реквизиту") = 0) Тогда
		// формирование строки анализа
		АнализПоказателей.НоваяСтрока();	
		АнализПоказателей.ПризнакУчета = ТаблицаРасшифровкиПоказателей.ПризнакУчета;
		АнализПоказателей.Группировка1 = НаименованиеГруппировки1;
		АнализПоказателей.Группировка2 = ТаблицаРасшифровкиПоказателей.Группировка2;

		Если ПустоеЗначение(Аналитика) = 0 Тогда
			АнализПоказателей.Аналитика = Аналитика;
		Иначе
			АнализПоказателей.Аналитика = "нет";
		КонецЕсли;

		Если ТаблицаРасшифровкиПоказателей.ПризнакУчета = "БУ" Тогда
			АнализПоказателей.СуммаБУ = ТаблицаРасшифровкиПоказателей.ЗнакСоставляющей * ЗначениеСоставляющей;	
		Иначе
			АнализПоказателей.СуммаНУ = ТаблицаРасшифровкиПоказателей.ЗнакСоставляющей * ЗначениеСоставляющей;	
		КонецЕсли;
		
		АнализПоказателей.СчетчикСтрок = 1;
		АнализПоказателей.НомерВТаблицеРасшифровки = ТаблицаРасшифровкиПоказателей.НомерСтроки;

	КонецЕсли;
	
	Возврат ЗначениеСоставляющей;

КонецФункции // РассчитатьСтрокуРасшифровкиПоказателя()  

//******************************************************************************
// ВключаетсяИлиРавно
//
// Параметры:
//  Нет
//
// Возвращаемое значение:
//  1 - параметр УсловиеЧастное включается или равен параметру "УсловиеОбщее", иначе - 0
//
// Описание: 
// Сравнение двух показателей вида справочник, перечисление, счет
//

Функция ВключаетсяИлиРавно(УсловиеЧастное, УсловиеОбщее)
	
	Если (УсловиеЧастное.Выбран() = 0) И (УсловиеОбщее.Выбран() = 0) Тогда
	    Возврат 1;
	КонецЕсли;
	
	Если (УсловиеЧастное.Выбран() = 1) И (УсловиеОбщее.Выбран() = 0) Тогда
	    Возврат 1;
	КонецЕсли;
	
	Если (УсловиеЧастное.Выбран() = 0) И (УсловиеОбщее.Выбран() = 1) Тогда
	    Возврат 0;
	КонецЕсли;
               
	Если (УсловиеЧастное.Выбран() = 1) И (УсловиеОбщее.Выбран() = 1) Тогда
		
		Если ТипЗначенияСтр(УсловиеЧастное) = "Перечисление" Тогда
			Если  (УсловиеЧастное = УсловиеОбщее) Тогда
				Возврат 1;
			КонецЕсли;;
		Иначе
			Если (УсловиеЧастное.ВходитВГруппу(УсловиеОбщее) = 1) Или (УсловиеЧастное = УсловиеОбщее) Тогда
				Возврат 1;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	 Возврат 0;
	
КонецФункции
//******************************************************************************
// АнализПоказателейДоходовРасходов(Режим)
//
// Параметры:
//  Режим - параметр задающий вид показателей для расчета:
//    "Доход"  - анализировать показатели доходов
//    "Расход" - анализировать показатели расходов
//
// Возвращаемое значение:
//  Нет
//
// Описание:
//  Просмотр данных бухгалтерского и налогового учета для показателей
//  доходов и расходов (заполнение таблицы АнализПоказателейДоходов или
//  АнализПоказателейРасходов в зависимости от параметра Режим)
//
Процедура АнализПоказателейДоходовРасходов(Режим)
	
 Перем БухИт, Показатели, ПоказателиРасшифровка, АнализПоказателей, ИдТаблАнализа;

	СписокСчетовДляРасчета = СоздатьОбъект("СписокЗначений");
	
	Если Режим = "Доход" Тогда
		Показатели 		= ПоказателиДоходов;   
		ИдТаблАнализа   = "АнализПоказателейДоходов";
		ПоказателиРасшифровка = ПоказателиДоходовРасшифровка;   
		РасчетДоходовВыполнен = 1;
		ПоказателиДоходовРасшифровка.Выгрузить(СписокСчетовДляРасчета,,, "Счет, КоррСчет");
		
	Иначе
		Показатели 		= ПоказателиРасходов;   
		ИдТаблАнализа   = "АнализПоказателейРасходов";
		ПоказателиРасшифровка = ПоказателиРасходовРасшифровка;   
		РасчетРасходовВыполнен= 1;
		ПоказателиРасходовРасшифровка.Выгрузить(СписокСчетовДляРасчета,,, "Счет, КоррСчет");

	КонецЕсли;
	
	БухИт = СоздатьОбъект("БухгалтерскиеИтоги");
	Если ПустоеЗначение(ВыбраннаяФирма) = 0  Тогда
		БухИт.Рассчитать( Дата1, Дата2, СписокСчетовДляРасчета, , ОсновнойПланСчетов(), ВыбраннаяФирма);

	Иначе
		БухИт.Рассчитать( Дата1, Дата2, СписокСчетовДляРасчета, , ОсновнойПланСчетов());

	КонецЕсли;  
	
	
	Показатели.ВыбратьСтроки();
	Пока Показатели.ПолучитьСтроку() = 1 Цикл
            
		АнализПоказателей = Показатели.ПолучитьЗначение(Показатели.НомерСтроки, ИдТаблАнализа);
		АнализПоказателей.УдалитьСтроки();
		
		ПоказателиРасшифровка.ВыбратьСтроки();
		Пока ПоказателиРасшифровка.ПолучитьСтроку() = 1 Цикл 
			Если ПоказателиРасшифровка.ИндексПоказателя = Показатели.ИндексПоказателя Тогда  
				ЗначениеСоставляющей = РассчитатьСтрокуРасшифровкиПоказателя(БухИт, ПоказателиРасшифровка, АнализПоказателей, Режим);
				
			КонецЕсли;
		КонецЦикла;
	              
		АнализПоказателей.Свернуть("ПризнакУчета, Группировка1, Группировка2, Аналитика, НомерВТаблицеРасшифровки", "СуммаБУ, СуммаНУ, СчетчикСтрок");
		Показатели.УстановитьЗначение(Показатели.НомерСтроки, ИдТаблАнализа, АнализПоказателей);
			
	КонецЦикла;
	
КонецПроцедуры // АнализПоказателейДоходовРасходов()
	
//******************************************************************************
// ЗаполнитьСтрокуТаблицыАнализПоказателейОценки(БухИт, АнализПоказателейОценки, Аналитика = "нет")
//
// Параметры:
//  БухИт     - результат бухгалтерского запроса к итогам, спозиционированный на нужном элементе
//  АнализПоказателейОценки - таблица содержащая анализ показателя
//  Аналитика - объект аналитического учета (субконто)
//
// Возвращаемое значение:
//  Нет
//
// Описание:
//  Реализует заполнение строк таблицы АнализПоказателейОценки
//
Процедура ЗаполнитьСтрокуТаблицыАнализПоказателейОценки(БухИт, АнализПоказателейОценки, Аналитика = "нет")
	
	ТекущийСчет = БухИт.Счет;

	Если Найти(ТекущийСчет.Код, "Н") = 0 Тогда
		АнализПоказателейОценки.НоваяСтрока();
		АнализПоказателейОценки.Аналитика		 = Аналитика;
		АнализПоказателейОценки.СнБУ = БухИт.СНД();	
		АнализПоказателейОценки.ДоБУ = БухИт.ДО();	
		АнализПоказателейОценки.КоБУ = БухИт.КО();	
		АнализПоказателейОценки.СкБУ = БухИт.СКД();
	КонецЕсли;

	Если Найти(ТекущийСчет.Код, "Н") <> 0 Тогда
		АнализПоказателейОценки.НоваяСтрока();
		АнализПоказателейОценки.Аналитика		 = Аналитика;
		АнализПоказателейОценки.СнНУ = БухИт.СНД();	
		АнализПоказателейОценки.ДоНУ = БухИт.ДО();	
		АнализПоказателейОценки.КоНУ = БухИт.КО();	
		АнализПоказателейОценки.СкНУ = БухИт.СКД();
	КонецЕсли;
			
КонецПроцедуры // ЗаполнитьСтрокуТаблицыАнализПоказателейОценки()

//******************************************************************************
// ЗапросДляРасчетаПоказателейОценки(Индекс, Детализация, КонтрольИзменения)
//
// Параметры:
//  Индекс - номер строки, содержащей показатель, в таблице ПоказателиОценки
//  Детализация - признак необходимости делать разворот итогов по аналитике:
//      1 - нужно разворачивать итоги по аналитике
//      0 - ненужно разворачивать итоги по аналитике
//  КонтрольИзменения - признак необходимости проводить процедуру контроля 
//    новых итогов и итогов рассчитаных ранее и хранящихся в таблице 
//		1 - выполнять контроль
//		0 - невыполнять контроль
//
// Возвращаемое значение:
//  Нет
//
// Описание:
//  Выполняется расчет сумм показателя оценки путем запроса к Бух итогам ИБ
//
Процедура ЗапросДляРасчетаПоказателейОценки(Индекс, Детализация, КонтрольИзменения = 0)

 Перем СчетБУ, СчетНУ, Сч, БухИт, СчетаДляАнализа, АнализПоказателейОценки;
 
	БухИт = СоздатьОбъект("БухгалтерскиеИтоги");
	Сч = СоздатьОбъект("Счет");
	СчетаДляАнализа = СоздатьОбъект("СписокЗначений");
	СписокСчетовБУ  = СоздатьОбъект("СписокЗначений");
	СписокСчетовНУ  = СоздатьОбъект("СписокЗначений");
	              
	СписокСчетовБУ.ИзСтрокиСРазделителями(ПоказателиОценки.ПолучитьЗначение(Индекс,"СчетБУ"));
	СписокСчетовНУ.ИзСтрокиСРазделителями(ПоказателиОценки.ПолучитьЗначение(Индекс,"СчетНУ"));
	
	АнализПоказателейОценки = ПоказателиОценки.ПолучитьЗначение(Индекс,"АнализПоказателейОценки");
	
	АнализПоказателейОценки.УдалитьСтроки();
    
	Для СчетчикЦикла = 1 По СписокСчетовБУ.РазмерСписка() Цикл
		СчетБУ = СчетПоКоду(СписокСчетовБУ.ПолучитьЗначение(СчетчикЦикла, ""));
		Если СчетБУ.ЭтоГруппа() = 1 Тогда
			Сч.ИспользоватьРодителя(СчетБУ);
			Сч.ВыбратьСчета();
			Пока Сч.ПолучитьСчет() = 1 Цикл
				Если СчетаДляАнализа.НайтиЗначение(Сч.ТекущийСчет()) = 0 Тогда
					СчетаДляАнализа.ДобавитьЗначение(Сч.ТекущийСчет());
				КонецЕсли;
			КонецЦикла;
			
		Иначе
			Если СчетаДляАнализа.НайтиЗначение(СчетБУ) = 0 Тогда
				СчетаДляАнализа.ДобавитьЗначение(СчетБУ);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Для СчетчикЦикла = 1 По СписокСчетовНУ.РазмерСписка() Цикл
		СчетНУ = СчетПоКоду(СписокСчетовНУ.ПолучитьЗначение(СчетчикЦикла, ""));
		Если СчетНУ.ЭтоГруппа() = 1 Тогда
			Сч.ИспользоватьРодителя(СчетНУ);
			Сч.ВыбратьСчета();
			Пока Сч.ПолучитьСчет() = 1 Цикл
				Если СчетаДляАнализа.НайтиЗначение(Сч.ТекущийСчет()) = 0 Тогда
					СчетаДляАнализа.ДобавитьЗначение(Сч.ТекущийСчет());
				КонецЕсли;
			КонецЦикла;
			
		Иначе
			Если СчетаДляАнализа.НайтиЗначение(СчетНУ) = 0 Тогда
				СчетаДляАнализа.ДобавитьЗначение(СчетНУ);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;

	БухИт.ИспользоватьПланСчетов(ОсновнойПланСчетов());
	Если ПустоеЗначение(ВыбраннаяФирма) = 0  Тогда
		БухИт.ИспользоватьРазделительУчета(ВыбраннаяФирма);
	КонецЕсли;

	Если Детализация = 1 Тогда
		БухИт.ИспользоватьСубконто(,, 1);
	КонецЕсли;
	БухИт.Опции(1, 0);
		
	БухИт.ВыполнитьЗапрос(Дата1, Дата2, СчетаДляАнализа,,, 1,, "С");

	БухИт.ВыбратьСчета();
	Пока БухИт.ПолучитьСчет() = 1 Цикл
		Если Детализация = 1 Тогда
			БухИт.ВыбратьСубконто(1);
			Пока БухИт.ПолучитьСубконто(1) = 1 Цикл
				ЗаполнитьСтрокуТаблицыАнализПоказателейОценки(БухИт, АнализПоказателейОценки, БухИт.Субконто(1));
			КонецЦикла;

		Иначе
			ЗаполнитьСтрокуТаблицыАнализПоказателейОценки(БухИт, АнализПоказателейОценки);

		КонецЕсли;
	КонецЦикла;

	АнализПоказателейОценки.Свернуть("Аналитика","СнБУ,ДоБУ,КоБУ,СкБУ,СнНУ,ДоНУ,КоНУ,СкНУ");
    АнализПоказателейОценки.Сортировать("Аналитика");

	ПоказателиОценки.УстановитьЗначение(Индекс, "АнализПоказателейОценки", АнализПоказателейОценки);
	
КонецПроцедуры // ЗапросДляРасчетаПоказателейОценки()

//******************************************************************************
// АнализПоказателейОценки()
//
// Параметры:
//  Нет
//
// Возвращаемое значение:
//  Нет
//
// Описание:
//  Реализует сравнение данных бухгалтерского и налогового учета для показателей
//  оценки и заполняет таблицу значений АнализПоказателейОценки
//
Процедура АнализПоказателейОценки();

	ПоказателиОценки.ВыбратьСтроки();	
    Пока ПоказателиОценки.ПолучитьСтроку() = 1 Цикл
		ЗапросДляРасчетаПоказателейОценки(ПоказателиОценки.НомерСтроки, ПоказателиОценки.ПризнакРасшифровки);
			
	КонецЦикла;

	РасчетОценкиИмуществаВыполнен = 1;

КонецПроцедуры // АнализПоказателейОценки()

//******************************************************************************
// АнализАмортизируемогоИмущества()
//
// Параметры:
//  Нет
//
// Возвращаемое значение:
//  Нет
//
// Описание:
//  Просмотр данных бухгалтерского и налогового учета для амортизируемого
//  имущества (заполнение таблицы АмортизируемоеИмущество)
//
Процедура АнализАмортизируемогоИмущества()

	АмортизируемоеИмущество.УдалитьСтроки();
	
	СчетаАнализа = "01.1,02.1,02.2,03.1,03.2,03.3,03.4,04.1,05,Н05.01,Н05.02,Н05.03,Н05.04,Н05.МЦ";
	
	БухИт = СоздатьОбъект("БухгалтерскиеИтоги");

	БухИт.ИспользоватьПланСчетов(ОсновнойПланСчетов());
	Если ПустоеЗначение(ВыбраннаяФирма) = 0 Тогда
		БухИт.ИспользоватьРазделительУчета(ВыбраннаяФирма);
	КонецЕсли;
	
	БухИт.ИспользоватьСубконто(,, 1);
	БухИт.ВключатьСубсчета(1, 1);
	БухИт.ВыполнитьЗапрос(Дата1, Дата2, СчетаАнализа,,, 3,, "С");
	БухИт.ВыбратьСубконто(1);

	Пока БухИт.ПолучитьСубконто(1) = 1 Цикл
		АмортизируемоеИмущество.НоваяСтрока();
		АмортизируемоеИмущество.Объект = БухИт.Субконто(1);

		ВремТаб = СоздатьОбъект("ТаблицаЗначений");
		ВремТаб.НоваяКолонка("СчетАмортизации","Счет");
		ВремТаб.НоваяКолонка("СуммаАмортизацииБух","Число",15,2);
		ВремТаб.НоваяКолонка("СуммаАмортизацииНал","Число",15,2);

		Если БухИт.Субконто(1).Вид() = "ОсновныеСредства" Тогда
			АмортизируемоеИмущество.ДатаПринятияКУчету = БухИт.Субконто(1).ДатаВводаВЭксплуатацию;
		Иначе
			АмортизируемоеИмущество.ДатаПринятияКУчету = БухИт.Субконто(1).ДатаПринятияКУчету;
		КонецЕсли;
		
		БухИт.ВыбратьСчета();
		Пока БухИт.ПолучитьСчет() = 1 Цикл
			// Анализируем остатки
			НуженАнализАмортизации = 0;
			Если (БухИт.Счет = СчетПоКоду("01.1"))
			 или (БухИт.Счет.ПринадлежитГруппе(СчетПоКоду("03")) = 1)
			 или (БухИт.Счет = СчетПоКоду("04.1")) Тогда
				АмортизируемоеИмущество.ОстатокСтоимостиБух = БухИт.СКД();
				
			ИначеЕсли (БухИт.Счет = СчетПоКоду("02.1"))
				  или (БухИт.Счет = СчетПоКоду("02.2"))
				  или (БухИт.Счет = СчетПоКоду("05")) Тогда
				АмортизируемоеИмущество.ОстатокАмортизацииБух = БухИт.СКК();
				НуженАнализАмортизации = 1;
				
			ИначеЕсли (БухИт.Счет = СчетПоКоду("Н05.01"))
				  или (БухИт.Счет = СчетПоКоду("Н05.03"))
				  или (БухИт.Счет = СчетПоКоду("Н05.МЦ")) Тогда
				АмортизируемоеИмущество.ОстатокСтоимостиНал = БухИт.СКД();

			ИначеЕсли (БухИт.Счет = СчетПоКоду("Н05.02"))
				  или (БухИт.Счет = СчетПоКоду("Н05.04")) Тогда
				АмортизируемоеИмущество.ОстатокАмортизацииНал = БухИт.СКК();
				НуженАнализАмортизации = 1;

			КонецЕсли;

			Если НуженАнализАмортизации = 1 Тогда
				// Анализируем начисление амортизации
				БухИт.ВыбратьКорСчета(, 2);
				Пока БухИт.ПолучитьКорСчет() = 1 Цикл
					Если БухИт.КорСчет.ЭтоГруппа() = 0 Тогда
						СуммаАмортизации = БухИт.КорКО();
						Если СуммаАмортизации <> 0 Тогда
							ВремТаб.НоваяСтрока();
							ВремТаб.СчетАмортизации = БухИт.КорСчет;
							Если (Найти(бухИт.КорСчет.Код,"Н") = 0)
							   и (ПустоеЗначение(бухИт.КорСчет) = 0) Тогда
								ВремТаб.СуммаАмортизацииБух = СуммаАмортизации;
							Иначе
								ВремТаб.СуммаАмортизацииНал = СуммаАмортизации;
							КонецЕсли;
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;

			КонецЕсли;
			
		КонецЦикла;

		АмортизируемоеИмущество.АнализНачисленияАмортизации = ВремТаб;
	КонецЦикла;
	
	РасчетАмортизируемогоИмуществаВыполнен = 1;

КонецПроцедуры // АнализАмортизируемогоИмущества()

//******************************************************************************
// АнализСтруктурыЗадолженностей()
//
// Параметры:
//  Нет
//
// Возвращаемое значение:
//  Нет
//
// Описание:
//  Запрос к информационной базе для заполнения
//  данных в таблице значений: СтруктураЗадолженности
//
Процедура АнализСтруктурыЗадолженностей()

    // Сначала анализируем дебиторскую и кредиторскую задолженности
	СтруктураЗадолженностей.УдалитьСтроки();
	
	СчетаАнализа = "58.3,58.4,60,62,66,67,76.5,76.6,76.55,Н13.01,Н13.02";
	
	БухИт = СоздатьОбъект("БухгалтерскиеИтоги");

	БухИт.ИспользоватьПланСчетов(ОсновнойПланСчетов());
	Если ПустоеЗначение(ВыбраннаяФирма) = 0 Тогда
		БухИт.ИспользоватьРазделительУчета(ВыбраннаяФирма);
	КонецЕсли;
	
	БухИт.ИспользоватьСубконто(ВидыСубконто.Контрагенты,, 1);
	БухИт.ИспользоватьСубконто(ВидыСубконто.Договоры,, 1);
	БухИт.ВключатьСубсчета(1, 1);
	БухИт.ВыполнитьЗапрос(Дата1, Дата2, СчетаАнализа,,, 1,, "С");
	БухИт.ВыбратьСубконто(ВидыСубконто.Контрагенты);
	Пока БухИт.ПолучитьСубконто(ВидыСубконто.Контрагенты) = 1 Цикл
		БухИт.ВыбратьСубконто(ВидыСубконто.Договоры);
		Пока БухИт.ПолучитьСубконто(ВидыСубконто.Договоры) = 1 Цикл
			Если (БухИт.СКД() = 0)
			   и (БухИт.СКК() = 0) Тогда
				Продолжить;
				
			КонецЕсли;

			СтруктураЗадолженностей.НоваяСтрока();
			СтруктураЗадолженностей.Контрагент = БухИт.Субконто(ВидыСубконто.Контрагенты);
			СтруктураЗадолженностей.Договор    = БухИт.Субконто(ВидыСубконто.Договоры);

			БухИт.ВыбратьСчета();
			Пока БухИт.ПолучитьСчет() = 1 Цикл
				Если БухИт.Счет.ЭтоГруппа() = 0 Тогда
					ИдКол = СокрЛП(БухИт.Счет.Код);
					Если Найти(ИдКол,"Н") = 0 Тогда
						СтруктураЗадолженностей.ВсегоБухДебет  = СтруктураЗадолженностей.ВсегоБухДебет  + БухИт.СКД();
						СтруктураЗадолженностей.ВсегоБухКредит = СтруктураЗадолженностей.ВсегоБухКредит + БухИт.СКК();

					Иначе
						СтруктураЗадолженностей.ВсегоНалДебет  = СтруктураЗадолженностей.ВсегоНалДебет  + БухИт.СКД();
						СтруктураЗадолженностей.ВсегоНалКредит = СтруктураЗадолженностей.ВсегоНалКредит + БухИт.СКК();


					КонецЕсли;

					Если (Найти(СоставСчетовВРасчетеДебет,ИдКол) = 0)
					   и (БухИт.СКД() <> 0) Тогда
						СоставСчетовВРасчетеДебет = СоставСчетовВРасчетеДебет + "," + ИдКол;   
					КонецЕсли;
					
					Если (Найти(СоставСчетовВРасчетеКредит,ИдКол) = 0)
					   и (БухИт.СКК() <> 0) Тогда
						СоставСчетовВРасчетеКредит = СоставСчетовВРасчетеКредит + "," + ИдКол;   
					КонецЕсли;

				КонецЕсли;
			КонецЦикла;

		КонецЦикла;
	КонецЦикла;

	СтруктураЗадолженностей.Сортировать("Контрагент,Договор");

    // Далее анализируем НДС по кредиторской задолженности
	СтруктураЗадолженностейНДС.УдалитьСтроки();

	СчетаАнализа = "19.1,19.2,19.3,19.4,76.АВ,Н13.03";
	
	БухИт.ИспользоватьСубконто(ВидыСубконто.Контрагенты,, 1);
	БухИт.ВключатьСубсчета(1, 1);
	БухИт.ВыполнитьЗапрос(Дата1, Дата2, СчетаАнализа,,, 1,, "С");
	БухИт.ВыбратьСубконто(ВидыСубконто.Контрагенты);
	Пока БухИт.ПолучитьСубконто(ВидыСубконто.Контрагенты) = 1 Цикл

		Если (БухИт.СКД() = 0)
		   и (БухИт.СКК() = 0) Тогда
			Продолжить;
			
		КонецЕсли;

		СтруктураЗадолженностейНДС.НоваяСтрока();
		СтруктураЗадолженностейНДС.Контрагент = БухИт.Субконто(ВидыСубконто.Контрагенты);

		БухИт.ВыбратьСчета();
		Пока БухИт.ПолучитьСчет() = 1 Цикл
			Если БухИт.Счет.ЭтоГруппа() = 0 Тогда
				ИдКол = СокрЛП(БухИт.Счет.Код);
				Если Найти(ИдКол,"Н") = 0 Тогда
					СтруктураЗадолженностейНДС.ВсегоБухДебет  = СтруктураЗадолженностейНДС.ВсегоБухДебет  + БухИт.СКД();
					СтруктураЗадолженностейНДС.ВсегоБухКредит = СтруктураЗадолженностейНДС.ВсегоБухКредит + БухИт.СКК();
			
					Если (Найти(СоставСчетовВРасчетеНДС,ИдКол) = 0)
					   и (БухИт.СКД() <> 0) Тогда
						СоставСчетовВРасчетеНДС = СоставСчетовВРасчетеНДС + "," + ИдКол;   
					КонецЕсли;
			
				Иначе
					СтруктураЗадолженностейНДС.ВсегоНалДебет  = СтруктураЗадолженностейНДС.ВсегоНалДебет  + БухИт.СКД();
					СтруктураЗадолженностейНДС.ВсегоНалКредит = СтруктураЗадолженностейНДС.ВсегоНалКредит + БухИт.СКК();
			
					Если (Найти(СоставСчетовВРасчетеНДС,ИдКол) = 0)
					   и (БухИт.СКК() <> 0) Тогда
						СоставСчетовВРасчетеНДС = СоставСчетовВРасчетеНДС + "," + ИдКол;   
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
	КонецЦикла;
	
	СтруктураЗадолженностейНДС.Сортировать("Контрагент");

	РасчетЗадолженностейВыполнен = 1;

КонецПроцедуры // АнализСтруктурыЗадолженностей()

//******************************************************************************
// ПриНажатииНаКнопкуВыполнитьАнализ()
//
// Параметры:
//  Нет
//
// Возвращаемое значение:
//  Нет
//
// Описание:
//  В зависимости от активной закладки выполняет расчет данных в 
//  для соответствующей группы показателей 
//
Процедура ПриНажатииНаКнопкуВыполнитьАнализ()

	Если Дата2 > КонецРассчитанногоПериодаБИ() Тогда
		Предупреждение("За выбранный период итоги не рассчитаны!"+РазделительСтрок+
		               "Расчет итогов выполняется в режиме"+РазделительСтрок+
					   """Операции - Управление бухгалтерскими итогами"".");
		Возврат;
	КонецЕсли;

	Если Форма.Закладки.ТекущаяСтрока() = 1 Тогда
		// Это закладка показателей анализа доходов
		Если ПоказателиДоходовЗагружены = 0 Тогда
		    ПолучитьПоказателиДоходов();
			ПоказателиДоходовЗагружены = 1;
		КонецЕсли;
		
		АнализПоказателейДоходовРасходов("Доход");	
		ПрорисоватьРезультатыАнализаДоходовРасходов("Доход");

	ИначеЕсли Форма.Закладки.ТекущаяСтрока() = 2 Тогда
		// Это закладка показателей анализа расходов
		    ПолучитьПоказателиРасходов();
			ПоказателиРасходовЗагружены = 1;
		АнализПоказателейДоходовРасходов("Расход");	
		ПрорисоватьРезультатыАнализаДоходовРасходов("Расход");

	ИначеЕсли Форма.Закладки.ТекущаяСтрока() = 3 Тогда
		// Это закладка показателей оценки имущества
		Если ПоказателиОценкиИмуществаЗагружены = 0 Тогда
		    ПолучитьПоказателиОценкиИмущества();
			ПоказателиОценкиИмуществаЗагружены = 1
		КонецЕсли;
		АнализПоказателейОценки();	
		ПрорисоватьРезультатыАнализаПоказателейОценки();

	ИначеЕсли Форма.Закладки.ТекущаяСтрока() = 4 Тогда
		// Это закладка показателей анализа амортизируемого имущества
		Если ПоказателиОценкиИмуществаЗагружены = 0 Тогда
		    ПолучитьПоказателиОценкиИмущества();
			ПоказателиОценкиИмуществаЗагружены = 1
		КонецЕсли;
		АнализАмортизируемогоИмущества();	
		ПрорисоватьРезультатыАнализаАмортизируемогоИмущества();

	ИначеЕсли Форма.Закладки.ТекущаяСтрока() = 5 Тогда
		// Это закладка показателей анализа задолженности
		Если ПоказателиОценкиИмуществаЗагружены = 0 Тогда
		    ПолучитьПоказателиОценкиИмущества();
			ПоказателиОценкиИмуществаЗагружены = 1
		КонецЕсли;
		АнализСтруктурыЗадолженностей();
		ПрорисоватьРезультатыАнализаЗадолженностей();

	КонецЕсли;

КонецПроцедуры // ПриНажатииНаКнопкуВыполнитьАнализ()

//******************************************************************************
// ПриИзмененииДаты()
//
// Параметры:
//  Нет
//
// Возвращаемое значение:
//  Нет
//
// Описание:
//  Контроль правильности настройки дат
//
Процедура ПриИзмененииДаты();
	
	Если (Дата1 > Дата2)
	   и (ПустоеЗначение(Дата1) = 0)
	   и (ПустоеЗначение(Дата2) = 0) Тогда
		Предупреждение("Конечная дата отчета не может быть меньше начальной", 60);
        Возврат;
	КонецЕсли;
	
	// Управление закладкой "Задолженность".
	НомерПозизии = Форма.Закладки.НайтиЗначение("      Задолженности     ");
	Если глНовыеПравилаВеденияНУ(Дата1) = 1 Тогда
		Если НомерПозизии <> 0 Тогда // закладка существует
			Форма.Закладки.УдалитьЗначение(НомерПозизии);
		КонецЕсли;
		
	Иначе
		Если НомерПозизии = 0 Тогда // закладка не существует
		    Форма.Закладки.ДобавитьЗначение("      Задолженности     ");
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ПриИзмененииДаты

//******************************************************************************
// ПриВыбореФирмы()
//
// Параметры:
//  Нет
//
// Возвращаемое значение:
//  Нет
//
// Описание:
//  
//
Процедура ПриВыбореФирмы()

	СохранитьЗначение("ФирмаРегламентированныхОтчетов",ВыбраннаяФирма);

КонецПроцедуры // ПриВыбореФирмы()

////////////////////////////////////////////////////////////////////////////////
// ПРЕДОПРЕДЕЛЕННЫЕ ПРОЦЕДУРЫ
// 
//******************************************************************************
// Предопределенная процедура.
//
Процедура ОбработкаЯчейкиТаблицы(Значение, Флаг, Табл, Адрес)
    
	Флаг = 0;
	
	// Если в качестве расшифровки передается список значений,
	// то расшифровка выполняется с детализацией по проводкам
	// при помощи специального отчета.
	Если ТипЗначенияСтр(Значение) = "СписокЗначений" Тогда
		                        
		Счет = ПолучитьПустоеЗначение();      КорСчет = ПолучитьПустоеЗначение();
		АналТип = ПолучитьПустоеЗначение();   КорАналТип = ПолучитьПустоеЗначение();
		Субконто1 = ПолучитьПустоеЗначение(); КорСубконто1 = ПолучитьПустоеЗначение();
		Реквизит1 = ПолучитьПустоеЗначение(); КорРеквизит1 = ПолучитьПустоеЗначение();
		Значение1 = ПолучитьПустоеЗначение(); КорЗначение1 = ПолучитьПустоеЗначение();
		
		// Если необходимо сформировать расшифровку для строк-показателей расходов или доходов
		Если (Найти(Значение.Получить("ТипСтроки"), "Доход") <> 0)  или (Найти(Значение.Получить("ТипСтроки"), "Расход") <> 0) Тогда
			Если Найти(Значение.Получить("ТипСтроки"), "Доход") <> 0 Тогда
				Показатели        = ПоказателиДоходовРасшифровка;
				Показатели.ПолучитьСтрокуПоНомеру(Значение.Получить("НомерСтрокиВРасшифровке"));
				КоррТипАналитики  = "";
				КоррТипФильтрации = "";
				
			Иначе
				Показатели        = ПоказателиРасходовРасшифровка;
				Показатели.ПолучитьСтрокуПоНомеру(Значение.Получить("НомерСтрокиВРасшифровке"));
				КоррТипАналитики  = Показатели.КоррТипАналитики;
				КоррТипФильтрации = Показатели.КоррТипФильтрации;
				КорРеквизит1      = Показатели.КоррИдРеквизита;
			КонецЕсли;
			                       
			Счет          = Показатели.Счет;
			КорСчет       = Показатели.КоррСчет;
			ТипАналитики  = Показатели.ТипАналитики;
			ТипФильтрации = Показатели.ТипФильтрации;
			Реквизит1     = Показатели.ИдРеквизита;
			Аналитика     = Значение.Получить("Аналитика");
			
			ДтКт = 1;
			ТипИтогов = СокрЛП(Показатели.ВидИтогов);
			Если (ТипИтогов = "ДО") или (ТипИтогов = "ДО-КО") Тогда
			    ДтКт = 1;
				
			ИначеЕсли (ТипИтогов = "КО") или (ТипИтогов = "КО-ДО") Тогда
				ДтКт = 2;
			КонецЕсли;
			
			ИспФильтр = 0;
			
			// Если проводки для расшифровки определятся только корреспонденцией счетов
			// (не надо отбирать по определенному значению субконто или его реквизиту),
			// то просто сформируем строку-фильтр для отбора проводок.
			Если (ПустоеЗначение(ТипАналитики) = 1)
			   и (ПустоеЗначение(КоррТипАналитики) = 1) Тогда
			   	 ИспФильтр = 1;
			   	 КорСчет = ?(ПустоеЗначение(Показатели.КоррСчет) = 0, Показатели.КоррСчет.Код, "*");
			   	 Если ДтКт = 1 Тогда
			   	 	Фильтр    = Показатели.Счет.Код + "," + КорСчет;    
			   	 	
			   	 Иначе
			   	 	Фильтр    = КорСчет + "," + Показатели.Счет.Код;
			   	 КонецЕсли;
			   	 
			Иначе // необходим отбор по значениям субконто (реквизитам субконто)
			 	
				// Определим субконто (реквизиты субконто) и кор. субконто по которым необходимо
				// отбирать проводки при расшифровке строки отчета.
				Если ПустоеЗначение(ТипАналитики) = 0  Тогда
					Ид = СтрЗаменить(ТипАналитики, "ВидСубконто.","");
					АналТип = ВидыСубконто.ЗначениеПоИдентификатору(Ид);
				КонецЕсли;
				
				Если ПустоеЗначение(КоррТипАналитики) = 0  Тогда
					Ид = СтрЗаменить(КоррТипАналитики, "ВидСубконто.","");
					КорАналТип = ВидыСубконто.ЗначениеПоИдентификатору(Ид);
				КонецЕсли;
				
			   	Если ТипФильтрации = "прямая" Тогда
					Ид = СтрЗаменить(АналТип.ТипСубконто(), "Перечисление.","");
					Перечисл = Перечисление.ПолучитьАтрибут(Ид);
					Субконто1 = Перечисл.ЗначениеПоИдентификатору(Показатели.ИдАналитики);
					
				ИначеЕсли ТипФильтрации = "реквизит" Тогда
			   	    Спр = СоздатьОбъект(АналТип.ТипСубконто());
			   		Спр.ИспользоватьДату(Дата2, 1);
					Реквизит = Спр.ПолучитьАтрибут(Показатели.ИдРеквизита);
					Если ТипЗначенияСтр(Реквизит) = "Перечисление" Тогда
						Значение1 = Перечисление.ПолучитьАтрибут(Реквизит.Вид());
						Значение1 = Значение1.ЗначениеПоИдентификатору(Показатели.ИдАналитики);
		
					ИначеЕсли ТипЗначенияСтр(Реквизит) = "Счет" Тогда
						Значение1 = СоздатьОбъект("СписокЗначений");
						СписокСчетов  = СоздатьОбъект("СписокЗначений");
						Сч = СоздатьОбъект("Счет");
						Счета = "" + СтрЗаменить(Показатели.ИдАналитики, ",", """,""") + "";
						СписокСчетов.ИзСтрокиСРазделителями(Счета);
						
						Для СчетчикЦикла = 1 По СписокСчетов.РазмерСписка() Цикл
							СчетИзСписка = СчетПоКоду(СписокСчетов.ПолучитьЗначение(СчетчикЦикла, ""));
							Если Счет.ЭтоГруппа() = 1 Тогда
								Сч.ИспользоватьРодителя(СчетИзСписка);
								Сч.ВыбратьСчета();
								Пока Сч.ПолучитьСчет() = 1 Цикл
									Если Значение1.НайтиЗначение(Сч.ТекущийСчет()) = 0 Тогда
										Значение1.ДобавитьЗначение(Сч.ТекущийСчет());
									КонецЕсли;
								КонецЦикла;
								
							Иначе
								Если Значение1.НайтиЗначение(СчетИзСписка) = 0 Тогда
									Значение1.ДобавитьЗначение(СчетИзСписка);
								КонецЕсли;
							КонецЕсли;
						КонецЦикла;
						
					ИначеЕсли ТипЗначенияСтр(Реквизит) = "Строка" Тогда
						Значение1 = Показатели.ИдАналитики;
						
					ИначеЕсли ТипЗначенияСтр(Реквизит) = "Число" Тогда
						Значение1 = Число(Показатели.ИдАналитики);
						
					КонецЕсли;
					
				ИначеЕсли ТипФильтрации = "разворачивать по реквизиту" Тогда
					
					Если Найти(АналТип.ТипСубконто(), "Перечисление") <> 0 Тогда
						Субконто1 = Аналитика;
						
					Иначе
						Значение1 = Аналитика;
					КонецЕсли;
					
				ИначеЕсли (ТипФильтрации = "субконто") И (Показатели.Элемент.Выбран() = 0) Тогда
					Ид = СтрЗаменить(АналТип.ТипСубконто(), "Перечисление.","");
					Перечисл = Перечисление.ПолучитьАтрибут(Ид);
					Субконто1 = Перечисл.ЗначениеПоИдентификатору(Показатели.ИдАналитики);
				ИначеЕсли (ТипФильтрации = "субконто") И (Показатели.Элемент.Выбран() = 1) Тогда  
					Субконто1 = Показатели.Элемент;
				КонецЕсли;
				
			   	Если КоррТипФильтрации = "прямая" Тогда
					Ид = СтрЗаменить(КорАналТип.ТипСубконто(), "Перечисление.","");
					Перечисл = Перечисление.ПолучитьАтрибут(Ид);
					КоррСубконто1 = Перечисл.ЗначениеПоИдентификатору(Показатели.КоррИдАналитики);
					
				ИначеЕсли КоррТипФильтрации = "реквизит" Тогда
					Спр = СоздатьОбъект(КорАналТип.ТипСубконто());
					Реквизит = Спр.ПолучитьАтрибут(Показатели.КоррИдРеквизита);
					Если ТипЗначенияСтр(Реквизит) = "Перечисление" Тогда
						КорЗначение1 = Перечисление.ПолучитьАтрибут(Реквизит.Вид());
						КорЗначение1 = КорЗначение1.ЗначениеПоИдентификатору(Показатели.КорИдАналитики);
		
					ИначеЕсли ТипЗначенияСтр(Реквизит) = "Счет" Тогда
						КорЗначение1 = СоздатьОбъект("СписокЗначений");
						СписокСчетов  = СоздатьОбъект("СписокЗначений");
						Сч = СоздатьОбъект("Счет");
						Счета = "" + СтрЗаменить(Показатели.КоррИдАналитики, ",", """,""") + "";
						СписокСчетов.ИзСтрокиСРазделителями(Счета);
						
						Для СчетчикЦикла = 1 По СписокСчетов.РазмерСписка() Цикл
							СчетИзСписка = СчетПоКоду(СписокСчетов.ПолучитьЗначение(СчетчикЦикла, ""));
							Если Счет.ЭтоГруппа() = 1 Тогда
								Сч.ИспользоватьРодителя(СчетИзСписка);
								Сч.ВыбратьСчета();
								Пока Сч.ПолучитьСчет() = 1 Цикл
									Если КорЗначение1.НайтиЗначение(Сч.ТекущийСчет()) = 0 Тогда
										КорЗначение1.ДобавитьЗначение(Сч.ТекущийСчет());
									КонецЕсли;
								КонецЦикла;
								
							Иначе
								Если КорЗначение1.НайтиЗначение(СчетИзСписка) = 0 Тогда
									КорЗначение1.ДобавитьЗначение(СчетИзСписка);
								КонецЕсли;
							КонецЕсли;
						КонецЦикла;
						
					ИначеЕсли ТипЗначенияСтр(Реквизит) = "Строка" Тогда
						КорЗначение1 = Реквизит;
					КонецЕсли;
				КонецЕсли;
				
			КонецЕсли;
		
		// Если необходимо сформировать расшифровку показателей оценки имущества.
		ИначеЕсли Найти(Значение.Получить("ТипСтроки"), "ПоказательОценки") <> 0 Тогда
			ПоказателиОценки.ПолучитьСтрокуПоНомеру(Значение.Получить("НомерСтрокиВРасшифровке"));
			СписокСчетов  = СоздатьОбъект("СписокЗначений");
			
			// Определим необходимо произвести расшифровку показателя
			// по данным бухгалтерского учета или налогового.
	        Если Найти(Значение.Получить("ТипСтроки"), "_БУ_") <> 0 Тогда
	        	СписокСчетов.ИзСтрокиСРазделителями(ПоказателиОценки.СчетБУ);
				
			Иначе
				СписокСчетов.ИзСтрокиСРазделителями(ПоказателиОценки.СчетНУ);
			КонецЕсли;
			
			Если Найти(Значение.Получить("ТипСтроки"), "ПоДебету") <> 0  Тогда
	        	ДтКт = 1;
				
			Иначе
				ДтКт = 2;
			КонецЕсли;
			ДопРасшифровка = 0;			
			КодСчета = СписокСчетов.ПолучитьЗначение(1, "");
			Если Найти(КодСчета, "Н02.01") <> 0 Тогда
				Фильтр = "";
				Для СчетчикСписка = 1 по СписокСчетов.РазмерСписка() Цикл
					Если ДтКт = 1 Тогда
						Фильтр= Фильтр+?(Счет="","",";")+ СписокСчетов.ПолучитьЗначение(СчетчикСписка, "") + ",*";					
					Иначе
						Фильтр= Фильтр+?(Счет="","*,",";*,")+ СписокСчетов.ПолучитьЗначение(СчетчикСписка, "");					
					КонецЕсли;
				КонецЦикла;
				ВидСубконто1 = ВидыСубконто.Материалы;                                                    
				Реквизит1 = Значение.Получить("Аналитика");
				ДопРасшифровка = 1;
				ИспФильтр = 1;
			Иначе 
				
				Если Найти(КодСчета, "Н04") <> 0 Тогда
					КодСчета = "Н04";
				КонецЕсли;
				
				Счет = СчетПоКоду(КодСчета);
				АналТип = Счет.ВидСубконто(1);
				Если Счет.Код = "08" Тогда
					АналТип = ВидыСубконто.ОбъектыСтроительства;    
					
				ИначеЕсли Найти(КодСчета, "Н01.01") <> 0 Тогда
					Счет = СчетПоКоду("Н01");
					АналТип = ВидыСубконто.ОбъектыСтроительства;
				КонецЕсли;
				Субконто1 = Значение.Получить("Аналитика");
			КонецЕсли;
			
		// Если необходимо сформировать расшифровку начисленой амортизации.
		ИначеЕсли Найти(Значение.Получить("ТипСтроки"), "Амортизация") <> 0 Тогда
			ДтКт = 1;
			Счет = СчетПоКоду(Значение.Получить("Счет"));
			КорСубконто1 = Значение.Получить("Аналитика"); // объект амортизируемого имущества
			
			// Определим счет учета начисления амортизации для 
			// объекта амортизируемого имущества.
			Если КорСубконто1.Вид() = "ОсновныеСредства" Тогда
				Если (Найти(Счет, "Н") = 0) 
				   и (ПустоеЗначение(Счет) = 0) Тогда
					КорСчет = СчетПоКоду("02");
					
				Иначе
					КорСчет = СчетПоКоду("Н05.02");
				КонецЕсли;
				КорАналТип = ВидыСубконто.ОсновныеСредства;
				
			Иначе
				Если (Найти(Счет, "Н") = 0) 
				   и (ПустоеЗначение(Счет) = 0) Тогда
					КорСчет = СчетПоКоду("05");
				Иначе
					КорСчет = СчетПоКоду("Н05.04");
				КонецЕсли;
				КорАналТип = ВидыСубконто.НематериальныеАктивы;
			КонецЕсли;
		КонецЕсли;	
			
		Расшифровка	= СоздатьОбъект("СписокЗначений");
	    Расшифровка.Установить("РазделительУчета", ВыбраннаяФирма);
	    Расшифровка.Установить("ПланСчетов", ОсновнойПланСчетов());
		Расшифровка.Установить("Дата1", Дата1);
		Расшифровка.Установить("Дата2", Дата2);
		Если ИспФильтр=1 Тогда
			Расшифровка.Установить("Фильтр", Фильтр);
			Расшифровка.Установить("ИспФильтр",1);
			
			Если ДопРасшифровка = 1 Тогда
				Расшифровка.Установить("ДтКт", ДтКт);
				Расшифровка.Установить("ВидСубконто1", ВидСубконто1); 			
				Расшифровка.Установить("Реквизит1",  Реквизит1);
			КонецЕсли;

		Иначе
			Расшифровка.Установить("Счет", Счет);
			Расшифровка.Установить("КорСчет", КорСчет);
			Расшифровка.Установить("ДтКт", ДтКт);
			Если Счет.Код = "25" Тогда
				АналТип = ВидыСубконто.СтатьиОбщепроизводственныхЗатрат;
			КонецЕсли; 
			Если Счет.Код = "26" Тогда
				АналТип = ВидыСубконто.СтатьиОбщехозяйственныхЗатрат;
			КонецЕсли; 
			Если Счет.Код = "29" Тогда
				АналТип = ВидыСубконто.СтатьиЗатратОбслуживающихПроизводств;
			КонецЕсли; 
			Расшифровка.Установить("ВидСубконто1", АналТип); 			
			Расшифровка.Установить("Субконто1", Субконто1);
			Расшифровка.Установить("Реквизит1", ?(ДтКт = 1, Реквизит1, КорРеквизит1));
			Расшифровка.Установить("Значение1", ?(ДтКт = 1, Значение1, КорЗначение1));
			Расшифровка.Установить("КорВидСубконто1", КорАналТип);
			Расшифровка.Установить("КорСубконто1", КорСубконто1);
			Расшифровка.Установить("КорРеквизит1", ?(ДтКт = 2, Реквизит1, КорРеквизит1));
			Расшифровка.Установить("КорЗначение1", ?(ДтКт = 2, Значение1, КорЗначение1));
		КонецЕсли;
		
		ОткрытьФорму("Отчет.РасшифровкаПоказателейАнализаСостоянияНалоговогоУчета", Расшифровка);
		
	 ИначеЕсли Найти(Значение,"Расшифровка") <> 0 Тогда
		// Обработка расшифровок в таблице анализов
		Если Найти(Значение,"ПоказательОценки") <> 0 Тогда
			// Для показтелей оценки имущества
			ИндексПоказателя = Число(Прав(Значение,3));
			Если ПоказателиОценки.ПолучитьЗначение(ИндексПоказателя,"ПризнакРасшифровки") = 1 Тогда
				// показатель развернут - нужно его свернуть

				// сбрасываем флаг расшифровки
				ПоказателиОценки.УстановитьЗначение(ИндексПоказателя,"ПризнакРасшифровки",0);

				// сворачиваем таблицу анализа, заменяя строки на одну итоговую строку
				ЗапросДляРасчетаПоказателейОценки(ИндексПоказателя, 0, 1);

			Иначе
				// расшифровку выполняем в той же таблице
				ПоказателиОценки.УстановитьЗначение(ИндексПоказателя,"ПризнакРасшифровки",1);

				// выполняем развернутый расчет показателя
				ЗапросДляРасчетаПоказателейОценки(ИндексПоказателя, 1, 1);
					
			КонецЕсли;
			
			// Обновляем таблицу
			ПрорисоватьРезультатыАнализаПоказателейОценки();

		ИначеЕсли Найти(Значение,"ПоказательДохода") <> 0 Тогда

			// Для показтелей доходов
			ИндексПоказателя = Число(Прав(Значение,3));

			Если Найти(Значение,"БУХ") <> 0 Тогда
				// отображение расшифровки в том же окне
				Если ПоказателиДоходов.ПолучитьЗначение(ИндексПоказателя,"ПризнакРазворотаБУ") = 1 Тогда
					ПоказателиДоходов.УстановитьЗначение(ИндексПоказателя,"ПризнакРазворотаБУ",0);
				Иначе
					ПоказателиДоходов.УстановитьЗначение(ИндексПоказателя,"ПризнакРазворотаБУ",1);
				КонецЕсли;

			ИначеЕсли Найти(Значение,"НАЛ") <> 0 Тогда
				// отображение расшифровки в том же окне
				Если ПоказателиДоходов.ПолучитьЗначение(ИндексПоказателя,"ПризнакРазворотаНУ") = 1 Тогда
					ПоказателиДоходов.УстановитьЗначение(ИндексПоказателя,"ПризнакРазворотаНУ",0);
				Иначе
					ПоказателиДоходов.УстановитьЗначение(ИндексПоказателя,"ПризнакРазворотаНУ",1);
				КонецЕсли;

			ИначеЕсли Найти(Значение,"ВСЕ") <> 0 Тогда
				// отображение расшифровки в том же окне
				Если ПоказателиДоходов.ПолучитьЗначение(ИндексПоказателя,"ПризнакРазворотаБУ") = 1 Тогда
					ПоказателиДоходов.УстановитьЗначение(ИндексПоказателя,"ПризнакРазворотаБУ",0);
					ПоказателиДоходов.УстановитьЗначение(ИндексПоказателя,"ПризнакРазворотаНУ",0);
				Иначе
					ПоказателиДоходов.УстановитьЗначение(ИндексПоказателя,"ПризнакРазворотаБУ",1);
					ПоказателиДоходов.УстановитьЗначение(ИндексПоказателя,"ПризнакРазворотаНУ",1);
				КонецЕсли;
			
			КонецЕсли;
				
			// Обновляем таблицу
			ПрорисоватьРезультатыАнализаДоходовРасходов("Доход");

		ИначеЕсли Найти(Значение,"ПоказательРасхода") <> 0 Тогда
			// Для непрямых показтелей
			ИндексПоказателя = Число(Прав(Значение,3));
			Если Найти(Значение,"БУХ") <> 0 Тогда
				// отображение расшифровки в том же окне
				Если ПоказателиРасходов.ПолучитьЗначение(ИндексПоказателя,"ПризнакРазворотаБУ") = 1 Тогда
					ПоказателиРасходов.УстановитьЗначение(ИндексПоказателя,"ПризнакРазворотаБУ",0);
				Иначе
					ПоказателиРасходов.УстановитьЗначение(ИндексПоказателя,"ПризнакРазворотаБУ",1);
				КонецЕсли;

			ИначеЕсли Найти(Значение,"НАЛ") <> 0 Тогда
				// отображение расшифровки в том же окне
				Если ПоказателиРасходов.ПолучитьЗначение(ИндексПоказателя,"ПризнакРазворотаНУ") = 1 Тогда
					ПоказателиРасходов.УстановитьЗначение(ИндексПоказателя,"ПризнакРазворотаНУ",0);
				Иначе
					ПоказателиРасходов.УстановитьЗначение(ИндексПоказателя,"ПризнакРазворотаНУ",1);
				КонецЕсли;
			
			ИначеЕсли Найти(Значение,"ВСЕ") <> 0 Тогда
				// отображение расшифровки в том же окне
				Если ПоказателиРасходов.ПолучитьЗначение(ИндексПоказателя,"ПризнакРазворотаБУ") = 1 Тогда
					ПоказателиРасходов.УстановитьЗначение(ИндексПоказателя,"ПризнакРазворотаБУ",0);
					ПоказателиРасходов.УстановитьЗначение(ИндексПоказателя,"ПризнакРазворотаНУ",0);
				Иначе
					ПоказателиРасходов.УстановитьЗначение(ИндексПоказателя,"ПризнакРазворотаБУ",1);
					ПоказателиРасходов.УстановитьЗначение(ИндексПоказателя,"ПризнакРазворотаНУ",1);
				КонецЕсли;
			КонецЕсли;
			
			// Обновляем таблицу
			ПрорисоватьРезультатыАнализаДоходовРасходов("Расход");
			
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры // ОбработкаЯчейкиТаблицы()

//******************************************************************************
// Предопределенная процедура
//
Процедура ПриВыбореЗакладки(Номер, Значение)
	
	Если СокрЛП(Значение) = "Доходы" Тогда
		Форма.ФлагКомментариев.Видимость(1);
		ПрорисоватьРезультатыАнализаДоходовРасходов("Доход");
		
	ИначеЕсли СокрЛП(Значение) = "Расходы" Тогда
		Форма.ФлагКомментариев.Видимость(1);
		ПрорисоватьРезультатыАнализаДоходовРасходов("Расход");

	ИначеЕсли СокрЛП(Значение) = "Оценка имущества" Тогда
		Форма.ФлагКомментариев.Видимость(1);
		ПрорисоватьРезультатыАнализаПоказателейОценки();

	ИначеЕсли СокрЛП(Значение) = "Амортизируемое имущество" Тогда
		Форма.ФлагКомментариев.Видимость(0);
		ПрорисоватьРезультатыАнализаАмортизируемогоИмущества();

	ИначеЕсли СокрЛП(Значение) = "Задолженности" Тогда
		Форма.ФлагКомментариев.Видимость(0);
		ПрорисоватьРезультатыАнализаЗадолженностей();

	КонецЕсли;

КонецПроцедуры // ПриВыбореЗакладки()

//******************************************************************************
// Предопределенная процедура
//
Процедура ПриОткрытии()
	
	Если Метаданные.ПланСчетов()=0 Тогда
		Сообщить("Анализ бухгалтерского учета может быть выполнен только при наличии плана счетов.");
		СтатусВозврата(0);
		Возврат;
	КонецЕсли;                       
	
	Форма.ИспользоватьЗакладки(1);
	Форма.Закладки.ДобавитьЗначение("        Доходы          ");
	Форма.Закладки.ДобавитьЗначение("        Расходы         ");
	Форма.Закладки.ДобавитьЗначение("    Оценка имущества    ");
	Форма.Закладки.ДобавитьЗначение("Амортизируемое имущество");
	Форма.Закладки.ДобавитьЗначение("      Задолженности     ");

	Дата2 = ВосстановитьЗначение(ИдентификаторОтчета+"ДатаОтчета2");
	Дата1 = ВосстановитьЗначение(ИдентификаторОтчета+"ДатаОтчета1");
	Если ПустоеЗначение(Дата2)=1 Тогда
		Дата2=КонМесяца(РабочаяДата());
	КонецЕсли;	
	
	Если ПустоеЗначение(Дата1)=1 Тогда
		Дата1=НачГода(Дата2); 
	КонецЕсли;

	ПриИзмененииДаты();
	
	Сч=СоздатьОбъект("Счет.Основной");
	Ит=СоздатьОбъект("БухгалтерскиеИтоги");
	
	Если Метаданные.Справочник("СвоиЮрЛица").Выбран()=1 Тогда
		Форма.ВыбраннаяФирма.НазначитьТип("Справочник.СвоиЮрЛица");
		ВыбраннаяФирма=ВосстановитьЗначение("ФирмаРегламентированныхОтчетов");
		Если ВыбраннаяФирма.Выбран()=0 Тогда
			Спр=СоздатьОбъект("Справочник.СвоиЮрЛица");
			Спр.ВыбратьЭлементы();
			Спр.ПолучитьЭлемент();
			ВыбраннаяФирма=Спр.ТекущийЭлемент();
		КонецЕсли; 
	
		Ит.ИспользоватьРазделительУчета( ВыбраннаяФирма );
	ИначеЕсли Метаданные.Справочник("Фирмы").Выбран()=1 Тогда
		Форма.ВыбраннаяФирма.НазначитьТип("Справочник.Фирмы");
		ВыбраннаяФирма=ВосстановитьЗначение("ФирмаРегламентированныхОтчетов");
		Если ВыбраннаяФирма.Выбран()=0 Тогда
			Спр=СоздатьОбъект("Справочник.Фирмы");
			Спр.ВыбратьЭлементы();
			Спр.ПолучитьЭлемент();
			ВыбраннаяФирма=Спр.ТекущийЭлемент();
		КонецЕсли; 
	
		Ит.ИспользоватьРазделительУчета( ВыбраннаяФирма );		
	Иначе     
		
		Форма.ВыбраннаяФирма.Видимость(0);
	КонецЕсли;	

	ПриВыбореЗакладки(1,"Доходы");

КонецПроцедуры // ПриОткрытии()

//******************************************************************************
// Предопределенная процедура
//
Процедура ПриЗакрытии()
	
	СохранитьЗначение(ИдентификаторОтчета+"ДатаОтчета1", Дата1);
	СохранитьЗначение(ИдентификаторОтчета+"ДатаОтчета2", Дата2);
	
КонецПроцедуры // ПриЗакрытии()
           
////////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ
// 
ИдентификаторОтчета="CmprBUNU";
ФонВыделения = 15793151;
ТекстВыделения = 16711680;

// ПОКАЗАТЕЛИ АНАЛИЗА ДОХОДОВ
ПоказателиДоходов = СоздатьОбъект("ТаблицаЗначений");
ПоказателиДоходов.НоваяКолонка("ИндексПоказателя","Число",5);
ПоказателиДоходов.НоваяКолонка("Наименование");
ПоказателиДоходов.НоваяКолонка("Комментарий","Строка");
ПоказателиДоходов.НоваяКолонка("КомментарийРазницы","Строка");
ПоказателиДоходов.НоваяКолонка("ПризнакРазворотаБУ","Число",1);
ПоказателиДоходов.НоваяКолонка("ПризнакРазворотаНУ","Число",1);
ПоказателиДоходов.НоваяКолонка("АнализПоказателейДоходов","ТаблицаЗначений");

// Расшифровка показателей доходов
ПоказателиДоходовРасшифровка = СоздатьОбъект("ТаблицаЗначений");
ПоказателиДоходовРасшифровка.НоваяКолонка("ИндексПоказателя","Число",5);
ПоказателиДоходовРасшифровка.НоваяКолонка("ПризнакУчета","Строка",2);
ПоказателиДоходовРасшифровка.НоваяКолонка("ЗнакСоставляющей","Число",1);
ПоказателиДоходовРасшифровка.НоваяКолонка("ВидИтогов","Строка",5);
ПоказателиДоходовРасшифровка.НоваяКолонка("Счет","Счет");
ПоказателиДоходовРасшифровка.НоваяКолонка("КоррСчет","Счет");
ПоказателиДоходовРасшифровка.НоваяКолонка("ТипАналитики","Строка");
ПоказателиДоходовРасшифровка.НоваяКолонка("ТипФильтрации","Строка");
ПоказателиДоходовРасшифровка.НоваяКолонка("ИдРеквизита","Строка");
ПоказателиДоходовРасшифровка.НоваяКолонка("ИдАналитики","Строка");
ПоказателиДоходовРасшифровка.НоваяКолонка("Группировка1","Строка");
ПоказателиДоходовРасшифровка.НоваяКолонка("Группировка2","Строка");

РасчетДоходовВыполнен = 0;

// ПОКАЗАТЕЛИ АНАЛИЗА РАСХОДОВ
ПоказателиРасходов = СоздатьОбъект("ТаблицаЗначений");
ПоказателиРасходов.НоваяКолонка("ИндексПоказателя","Число",5);
ПоказателиРасходов.НоваяКолонка("Наименование");
ПоказателиРасходов.НоваяКолонка("Комментарий","Строка");
ПоказателиРасходов.НоваяКолонка("КомментарийРазницы","Строка");
ПоказателиРасходов.НоваяКолонка("ПризнакРазворотаБУ","Число",1);
ПоказателиРасходов.НоваяКолонка("ПризнакРазворотаНУ","Число",1);
ПоказателиРасходов.НоваяКолонка("АнализПоказателейРасходов","ТаблицаЗначений");

// Расшифровка показателей расходов
ПоказателиРасходовРасшифровка = СоздатьОбъект("ТаблицаЗначений");
ПоказателиРасходовРасшифровка.НоваяКолонка("ИндексПоказателя","Число",5);
ПоказателиРасходовРасшифровка.НоваяКолонка("ПризнакУчета","Строка",2);
ПоказателиРасходовРасшифровка.НоваяКолонка("ЗнакСоставляющей","Число",1);
ПоказателиРасходовРасшифровка.НоваяКолонка("ВидИтогов","Строка",5);
ПоказателиРасходовРасшифровка.НоваяКолонка("Счет","Счет");
ПоказателиРасходовРасшифровка.НоваяКолонка("ТипАналитики","Строка");
ПоказателиРасходовРасшифровка.НоваяКолонка("ТипФильтрации","Строка");
ПоказателиРасходовРасшифровка.НоваяКолонка("ИдРеквизита","Строка");
ПоказателиРасходовРасшифровка.НоваяКолонка("ИдАналитики","Строка");
ПоказателиРасходовРасшифровка.НоваяКолонка("КоррСчет","Счет");
ПоказателиРасходовРасшифровка.НоваяКолонка("КоррТипАналитики","Строка");
ПоказателиРасходовРасшифровка.НоваяКолонка("КоррТипФильтрации","Строка");
ПоказателиРасходовРасшифровка.НоваяКолонка("КоррИдРеквизита","Строка");
ПоказателиРасходовРасшифровка.НоваяКолонка("КоррИдАналитики","Строка");
ПоказателиРасходовРасшифровка.НоваяКолонка("Группировка1","Строка");
ПоказателиРасходовРасшифровка.НоваяКолонка("Группировка2","Строка"); 
ПоказателиРасходовРасшифровка.НоваяКолонка("Сумма","Число",17,2);
ПоказателиРасходовРасшифровка.НоваяКолонка("Элемент", "Справочник"); 
ПоказателиРасходовРасшифровка.НоваяКолонка("ТипАналитикиСправочника"); 

РасчетРасходовВыполнен = 0;

// ПОКАЗАТЕЛИ ОЦЕНКИ ИМУЩЕСТВА
ПоказателиОценки = СоздатьОбъект("ТаблицаЗначений");
ПоказателиОценки.НоваяКолонка("Наименование");
ПоказателиОценки.НоваяКолонка("СчетБУ","Строка");
ПоказателиОценки.НоваяКолонка("СчетНУ","Строка");
ПоказателиОценки.НоваяКолонка("КомментарийРазницы");
ПоказателиОценки.НоваяКолонка("КомментарийБУ");
ПоказателиОценки.НоваяКолонка("КомментарийНУ");
ПоказателиОценки.НоваяКолонка("ПризнакРасшифровки","Число",1);
ПоказателиОценки.НоваяКолонка("АнализПоказателейОценки","ТаблицаЗначений");

РасчетОценкиИмуществаВыполнен = 0;

// АМОРТИЗИРУЕМОЕ ИМУЩЕСТВО
АмортизируемоеИмущество = СоздатьОбъект("ТаблицаЗначений");
АмортизируемоеИмущество.НоваяКолонка("Объект","Справочник");
АмортизируемоеИмущество.НоваяКолонка("ДатаПринятияКУчету", "Дата");
// остатки на счетах учета
АмортизируемоеИмущество.НоваяКолонка("ОстатокСтоимостиБух", "Число", 15, 2);
АмортизируемоеИмущество.НоваяКолонка("ОстатокАмортизацииБух", "Число", 15, 2);
АмортизируемоеИмущество.НоваяКолонка("ОстатокСтоимостиНал", "Число", 15, 2);
АмортизируемоеИмущество.НоваяКолонка("ОстатокАмортизацииНал", "Число", 15, 2);
// начисленная амортизация за период
АмортизируемоеИмущество.НоваяКолонка("АнализНачисленияАмортизации","ТаблицаЗначений");

РасчетАмортизируемогоИмуществаВыполнен = 0;

// АНАЛИЗ ЗАДОЛЖЕННОСТЕЙ
СтруктураЗадолженностей = СоздатьОбъект("ТаблицаЗначений");
СтруктураЗадолженностей.НоваяКолонка("Контрагент", "Справочник");
СтруктураЗадолженностей.НоваяКолонка("Договор", "Справочник");
СтруктураЗадолженностей.НоваяКолонка("ВсегоБухДебет", "Число", 15, 2);
СтруктураЗадолженностей.НоваяКолонка("ВсегоНалДебет", "Число", 15, 2);
СтруктураЗадолженностей.НоваяКолонка("ВсегоБухКредит","Число", 15, 2);
СтруктураЗадолженностей.НоваяКолонка("ВсегоНалКредит","Число", 15, 2);

СтруктураЗадолженностейНДС = СоздатьОбъект("ТаблицаЗначений");
СтруктураЗадолженностейНДС.НоваяКолонка("Контрагент", "Справочник");
СтруктураЗадолженностейНДС.НоваяКолонка("ВсегоБухДебет", "Число", 15, 2);
СтруктураЗадолженностейНДС.НоваяКолонка("ВсегоНалДебет", "Число", 15, 2);
СтруктураЗадолженностейНДС.НоваяКолонка("ВсегоБухКредит","Число", 15, 2);
СтруктураЗадолженностейНДС.НоваяКолонка("ВсегоНалКредит","Число", 15, 2);

РасчетЗадолженностейВыполнен = 0;
                               
//Показатели не загружены
ПоказателиДоходовЗагружены         = 0;
ПоказателиРасходовЗагружены        = 0;
ПоказателиОценкиИмуществаЗагружены = 0;