Перем ДатаНачалаНалоговогоПериода2003;

//******************************************************************************
// ПроверкаПериода()
//
// Возвращаемое значение:
//  1 - корректно выбран период в диалоге
//  0 - не корректно выбран период в диалоге
//
// Описание:
// Функция проверяет корректность ввода интервала дат в дилоге
//
Функция ПроверкаПериода()
	
	Если (НачДата > КонДата) Тогда
		Предупреждение("Неправильно задан период формирования отчета!"+РазделительСтрок+
		               "Дата начала больше даты окончания периода.", 60);
		Возврат 0;

	ИначеЕсли ПустоеЗначение(ДатаНачалаНалоговогоПериода2003) = 0 Тогда
		
		Если ((НачДата < ДатаНачалаНалоговогоПериода2003)
		   и  (КонДата >= ДатаНачалаНалоговогоПериода2003)) Тогда
			Предупреждение("Неправильно задан период формирования отчета!"+РазделительСтрок+
			               "В выбранном интервале налоговый учет велся по"+РазделительСтрок+
						   "разным правилам."+РазделительСтрок+
						   "Отчет за данный период сформировать невозможно!", 60);
			Возврат 0;
		    
		КонецЕсли;

	КонецЕсли;
	
	Возврат 1;
	
КонецФункции // ПроверкаПериода()

//******************************************************************************
//	Установить(Режим="") 
//
//	Параметры: Режим - строка, режим работы: "Все" - отметить все строки
//					   "Сброс" - снять отметку всех строк
//					   "" - инвертировать отметку всех строк
//
//	Описание: Устанавливает, снимает или инвертирует отметки выбора строк 
//
Процедура Установить(Список, Режим="") 
	Для Н = 1 По Список.РазмерСписка() Цикл
		Если Режим="Все" Тогда
			Список.Пометка(Н, 1);
		ИначеЕсли Режим="Сброс" Тогда
			Список.Пометка(Н, 0); 
		Иначе
			Список.Пометка(Н, ?(Список.Пометка(Н) = 1, 0, 1)); 
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры  //  Установить()

//******************************************************************************
// ПолучитьСписокОбъектовФильтра()
//
// Параметры:
//  Нет.
//
// Возвращаемое значение:
//  Список значений - список, объектов, которые должны попасть в регистр.
//
// Вызывается из формул элементов диалога:
//  Нет.
//
// Описание:
//  Здесь описывается функция.
//
Функция ПолучитьСписокОбъектовФильтра(ПолныйСписокОбъектов)
	
	СписокОтбираемыхОбъектов = СоздатьОбъект("СписокЗначений");
	РазмерСписка = ПолныйСписокОбъектов.РазмерСписка();
	Для СчетчикЦикла = 1 По РазмерСписка Цикл
		Если ПолныйСписокОбъектов.Пометка(СчетчикЦикла) = 1 Тогда
			Представление = "";
			Значение = ПолныйСписокОбъектов.ПолучитьЗначение(СчетчикЦикла, Представление);
		    СписокОтбираемыхОбъектов.ДобавитьЗначение(Значение, Представление);

		КонецЕсли;	
	КонецЦикла;
	
	Возврат СписокОтбираемыхОбъектов;
	
КонецФункции // ПолучитьСписокОбъектовФильтра()

//******************************************************************************
// СостояниеОтбора()
//
// Параметры:
//  Список - список значенний - список который необходимо проанализировать.
//
// Возвращаемое значение:
//  Строка - отражает, помечены ли в списке все элементы, помечены некоторые или вообще все пометки сняты.
//
// Вызывается из формул элементов диалога:
//  Нет.
//
// Описание:
//  Здесь описывается функция.
//
Функция СостояниеОтбора(Список)
	
	СписокОтбираемыхОбъектов = ПолучитьСписокОбъектовФильтра(Список);
	Если СписокОтбираемыхОбъектов.РазмерСписка() = 0 Тогда
		ТипФильтра = "Не выбраны";
		
	ИначеЕсли СписокОтбираемыхОбъектов.РазмерСписка() = Список.РазмерСписка() Тогда
		ТипФильтра = "По всем";
		
	Иначе
		ТипФильтра = "Выборочно";
	КонецЕсли;                 
	
	Возврат ТипФильтра;
	
КонецФункции // СостояниеОтбора()

//******************************************************************************
//
Процедура Сформировать()
	
	ДатаНачалаНалоговогоПериода2003 = ПолучитьПустоеЗначение("Дата");
	глНовыеПравилаВеденияНУ(КонДата, ДатаНачалаНалоговогоПериода2003);

	Если ПроверкаПериода() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Состояние("Заполнение выходной таблицы...");

	Если глНовыеПравилаВеденияНУ(КонДата) = 1 Тогда
		СписокУсловийВыбытияАктивный = СписокУсловийВыбытия2003;
		СписокВидовДоходаАктивный = СписокВидовДохода2003;
	Иначе
		СписокУсловийВыбытияАктивный = СписокУсловийВыбытия;
		СписокВидовДоходаАктивный = СписокВидовДохода;
	КонецЕсли;

	СписокОтбираемыхУсловийВыбытия = ПолучитьСписокОбъектовФильтра(СписокУсловийВыбытияАктивный);
	Если СписокОтбираемыхУсловийВыбытия.РазмерСписка() = 0 Тогда
		Предупреждение("Регистр не может быть сформирован,
						|т.к. на закладке ""Условия выбытия"" не установлено ни одного условия выбытия,
						|которому должна соответствовать включаемая в регистр операция.");
		Возврат;
        
	ИначеЕсли СписокОтбираемыхУсловийВыбытия.РазмерСписка() = СписокУсловийВыбытияАктивный.РазмерСписка() Тогда
		ТекстШапкиУсловияВыбытия = "По всем";

	Иначе		
		ТекстШапкиУсловияВыбытия = "Выборочно";
		
	КонецЕсли;

	СписокОтбираемыхВидовДохода = ПолучитьСписокОбъектовФильтра(СписокВидовДоходаАктивный);
	Если СписокОтбираемыхВидовДохода.РазмерСписка() = 0 Тогда
		Предупреждение("Регистр не может быть сформирован,
						|т.к. на закладке ""Виды дохода"" не установлен ни один вид дохода,
						|которому должна соответствовать включаемая в регистр операция.");
		Возврат;
        
	ИначеЕсли СписокОтбираемыхВидовДохода.РазмерСписка() = СписокВидовДоходаАктивный.РазмерСписка() Тогда
		ТекстШапкиВидыДохода = "По всем";

	Иначе		
		ТекстШапкиВидыДохода = "Выборочно";
		
	КонецЕсли;

	Таб = СоздатьОбъект("Таблица");
	СтрНалогоплательщик = Константа.ОфициальноеНазваниеОрганизации;
	Если ПустаяСтрока(СтрНалогоплательщик) = 1 Тогда
	СтрНалогоплательщик = Константа.НазваниеОрганизации;	    
	КонецЕсли;
	ИНН = Константа.ИННОрганизации;
	Таб.ВывестиСекцию("Шапка");

	Если глНовыеПравилаВеденияНУ(КонДата) = 1 Тогда

		// ФОРМИРОВАНИЕ С УЧЕТОМ НОВЫХ ПРАВИЛ НАЛОГОВОГО УЧЕТА РЕДАКЦИИ 4.4

		СчетаДляАнализа = СоздатьОбъект("СписокЗначений");
		Для т = 1 По СписокОтбираемыхВидовДохода.РазмерСписка() Цикл
			СчетаДляАнализа.ДобавитьЗначение(СписокОтбираемыхВидовДохода.ПолучитьЗначение(т));
		КонецЦикла;
		
		// условия выбытия, которые не проходят через счет Н06, и следовательно единственный способ
		// их найти и классифицировать - с помощью аналитики "УсловияПоступленияИВыбытия"
		ВнереализационныеУсловияВыбытия = СоздатьОбъект("СписокЗначений");
		ВнереализационныеУсловияВыбытия.ДобавитьЗначение(Перечисление.УсловияПоступленияИВыбытия.Возврат);
		ВнереализационныеУсловияВыбытия.ДобавитьЗначение(Перечисление.УсловияПоступленияИВыбытия.СписаниеИмущества);
		ВнереализационныеУсловияВыбытия.ДобавитьЗначение(Перечисление.УсловияПоступленияИВыбытия.Недостачи);
		ВнереализационныеУсловияВыбытия.ДобавитьЗначение(Перечисление.УсловияПоступленияИВыбытия.ПоДоговоруЗайма);
		ВнереализационныеУсловияВыбытия.ДобавитьЗначение(Перечисление.УсловияПоступленияИВыбытия.Безвозмездно);
		ВнереализационныеУсловияВыбытия.ДобавитьЗначение(Перечисление.УсловияПоступленияИВыбытия.ВкладВУставныйКапитал);
		ВнереализационныеУсловияВыбытия.ДобавитьЗначение(Перечисление.УсловияПоступленияИВыбытия.ВкладВПростоеТоварищество);
		ВнереализационныеУсловияВыбытия.ДобавитьЗначение(Перечисление.УсловияПоступленияИВыбытия.ВРамкахЦелевогоФинансирования);
		ВнереализационныеУсловияВыбытия.ДобавитьЗначение(Перечисление.УсловияПоступленияИВыбытия.Другие);
		ВнереализационныеУсловияВыбытия.ДобавитьЗначение(Перечисление.УсловияПоступленияИВыбытия.НеОблагается);
	   	
		БухИт = СоздатьОбъект("БухгалтерскиеИтоги");
		БухИт.ИспользоватьПланСчетов(ОсновнойПланСчетов());

		Если СписокОтбираемыхУсловийВыбытия.РазмерСписка() <> СписокУсловийВыбытияАктивный.РазмерСписка() Тогда
			// устанавливаем фильтр по условиям выбытия
			БухИт.ИспользоватьСубконто(ВидыСубконто.УсловияПоступленияИВыбытия, СписокОтбираемыхУсловийВыбытия);
		Иначе
			// выбираем все возможные условия
			БухИт.ИспользоватьСубконто(ВидыСубконто.УсловияПоступленияИВыбытия, );

		КонецЕсли;

		БухИт.ВыполнитьЗапрос(НачДата, КонДата,,,, 3, "Проводка", "СК");
	
		ИтогСумма = 0;
                
		БухИт.ВыбратьПериоды(,);
		Пока БухИт.ПолучитьПериод() = 1 Цикл
						
			Если (БухИт.Операция.Документ.Вид() = "НачислениеАмортизации")
			или (БухИт.Операция.Документ.Вид() = "ВводВЭксплуатациюОС") Тогда
				Продолжить;
			КонецЕсли;
			
			Опер = БухИт.Операция;
			ДатаОперации = Опер.ДатаОперации;
			
			Сумма = 0;
			
			Если БухИт.ВыбранаПоКт() = 1 Тогда 
				 // возвраты по кредиту счета - это поступление
				Если Опер.Кредит.УсловияПоступленияИВыбытия = Перечисление.УсловияПоступленияИВыбытия.Возврат Тогда
				    Продолжить;
				КонецЕсли;
				
				Если СчетаДляАнализа.НайтиЗначение(Опер.Кредит.Счет) <> 0 Тогда
					Сумма = Опер.Сумма; // в регистре отражается только сумма дохода (выручки)
					
				ИначеЕсли СчетаДляАнализа.НайтиЗначение("ДоходНеВозникает") <> 0 Тогда
					Если ВнереализационныеУсловияВыбытия.НайтиЗначение(Опер.Кредит.Субконто(ВидыСубконто.УсловияПоступленияИВыбытия)) = 0 Тогда
						Продолжить;
					КонецЕсли;
					
				Иначе
					Продолжить;
				КонецЕсли;
				
			Иначе // возвраты, отраженные по дебету счета - выбытие
				Если СчетаДляАнализа.НайтиЗначение("ДоходНеВозникает") = 0 Тогда
				    Продолжить;
					
				ИначеЕсли Опер.Дебет.УсловияПоступленияИВыбытия <> Перечисление.УсловияПоступленияИВыбытия.Возврат Тогда
				    Продолжить;
				КонецЕсли;
				
				// отгрузка без перехода права собственности не должна попадать в регистр
				Если Опер.Дебет.Счет.ПринадлежитГруппе(СчетПоКоду("Н02.04")) = 1 Тогда
			        Продолжить;
			    КонецЕсли;
			КонецЕсли;
			
			// оперделяем условие выбытия имущества
			УсловиеОперации = "";
			Если БухИт.ВыбранаПоКт() = 1 Тогда
				УсловиеОперации = Строка(Опер.Кредит.УсловияПоступленияИВыбытия);
				
			Иначе
				УсловиеОперации = Строка(Опер.Дебет.УсловияПоступленияИВыбытия);
			КонецЕсли;

			// определяем основание выбытия имущества
			ОснованиеВыбытия = СокрЛП(Опер.СодержаниеПроводки) + " на основании: " + Опер.ПервичныйДокумент;
			Если БухИт.ВыбранаПоКт() = 1 Тогда
				Если ПустоеЗначение(Опер.Кредит.Основание) = 0 Тогда
					ОснованиеВыбытия = "" + глПолноеНаименование(Опер.Кредит.Основание.Владелец);
					ОснованиеВыбытия = ОснованиеВыбытия + ", " + Опер.Кредит.Основание;
					ОснованиеВыбытия = ОснованиеВыбытия + " на основании: " + Опер.ПервичныйДокумент;
				КонецЕсли;
			Иначе
				
				Если ПустоеЗначение(Опер.Дебет.Основание) = 0 Тогда
					ОснованиеВыбытия = "" + глПолноеНаименование(Опер.Дебет.Основание.Владелец);
					ОснованиеВыбытия = ОснованиеВыбытия + ", " + Опер.Дебет.Основание;
					ОснованиеВыбытия = ОснованиеВыбытия + " на основании: " + Опер.ПервичныйДокумент;
				КонецЕсли;
			КонецЕсли;
			
			// вид дохода
			ВидДохода = "Доход не возникает";
			Найдено = СписокВидовДоходаАктивный.НайтиЗначение(БухИт.Счет);
			Если Найдено <> 0 Тогда
				СписокВидовДоходаАктивный.ПолучитьЗначение(Найдено, ВидДохода);
			КонецЕсли;
			
			Если БухИт.Счет.Количественный = 1 Тогда
				Количество = Опер.Количество;
			Иначе
				Количество = 0;
			КонецЕсли;
			
			Если БухИт.ВыбранаПоКт() = 1 Тогда
			Иначе // если возврат, то он отражается сторно по кредиту
				Количество = -Количество;
			КонецЕсли;
			
			ИтогСумма = ИтогСумма + Сумма;
			
			Сумма = ФорматС(Сумма);
			Количество = ФорматК(Количество);
			    
			Объект = "";
			Если БухИт.ВыбранаПоКт() = 1 Тогда 
				Если ТипЗначенияСтр(Опер.Кредит.Субконто(1)) = "Справочник" Тогда
					Объект = Строка(Опер.Кредит.Субконто(1));    
				КонецЕсли;
				
			Иначе // возврат поставщику
				Если ТипЗначенияСтр(Опер.Дебет.Субконто(1)) = "Справочник" Тогда
					Объект = Строка(Опер.Дебет.Субконто(1));    
				КонецЕсли;
			КонецЕсли;
            
			ТекДок = Опер.Документ;
			
			Таб.ВывестиСекцию("Строка");
		КонецЦикла;

		ИтогСумма = ФорматС(ИтогСумма);

	Иначе	

		// ФОРМИРОВАНИЕ С УЧЕТОМ ПРАВИЛ НАЛОГОВОГО УЧЕТА, ДЕЙСТВОВАВШИХ ДО РЕДАКЦИИ 4.4
        
		//Создание объекта типа Запрос
		Запрос = СоздатьОбъект("Запрос");
		ТекстЗапроса = 
		"//{{ЗАПРОС(Сформировать)
		|ОбрабатыватьДокументы все;
		|Обрабатывать НеПомеченныеНаУдаление;
		|Период с НачДата по КонДата;
		|
		|ДатаВыбытия = Документ.ОперацииВыбытияИмущества.ДатаДок;
		|Контрагент = Документ.ОперацииВыбытияИмущества.Контрагент;
		|Договор = Документ.ОперацииВыбытияИмущества.Договор;
		|ВидДохода = Документ.ОперацииВыбытияИмущества.ВидДохода;
		|УсловиеВыбытия = Документ.ОперацииВыбытияИмущества.УсловиеВыбытия;
		|Объект = Документ.ОперацииВыбытияИмущества.Объект;
		|Сумма = Документ.ОперацииВыбытияИмущества.Сумма;
		|Количество = Документ.ОперацииВыбытияИмущества.Количество;
		|
		|Функция СуммаСумма = Сумма(Сумма);
		|Функция СуммаКоличество = Сумма(Количество);
		|
		|Группировка Документ;
		|Группировка СтрокаДокумента;
		|";
		
		// В запрос добавляются условия, в зависимости от того какие выбраны условия формирования регистра.
		// Дополнительно эти условия отражаются в шапке печатной формы регистра.
		Если СписокОтбираемыхУсловийВыбытия.РазмерСписка() <> СписокУсловийВыбытияАктивный.РазмерСписка() Тогда
			ТекстЗапроса = ТекстЗапроса + "Условие (УсловиеВыбытия в СписокОтбираемыхУсловийВыбытия);";

		КонецЕсли;
			
		Если СписокОтбираемыхВидовДохода.РазмерСписка() <> СписокВидовДоходаАктивный.РазмерСписка() Тогда
			Если СписокВидовДоходаАктивный.Пометка(СписокВидовДоходаАктивный.РазмерСписка()) = 1 Тогда
				ТекстЗапроса = ТекстЗапроса + "Условие ((ВидДохода в СписокОтбираемыхВидовДохода) или (ПустоеЗначение(ВидДохода) = 1));";
			Иначе
				ТекстЗапроса = ТекстЗапроса + "Условие (ВидДохода в СписокОтбираемыхВидовДохода);";
			КонецЕсли;

		КонецЕсли;
		
		// Если ошибка в запросе, то выход из процедуры
		Если Запрос.Выполнить(ТекстЗапроса) = 0 Тогда
			Возврат;
	
		КонецЕсли;
	
		Пока Запрос.Группировка("Документ") = 1 Цикл
			Пока Запрос.Группировка("СтрокаДокумента") = 1 Цикл
				ДатаОперации = Запрос.ДатаВыбытия;
				ОснованиеВыбытия = "" + глПолноеНаименование(Запрос.Контрагент);
				Если ПустоеЗначение(Запрос.Договор) = 0 Тогда
					 ОснованиеВыбытия = ОснованиеВыбытия + ", " + Запрос.Договор;
				КонецЕсли;
				ВидДохода = Запрос.ВидДохода;
				УсловиеОперации = Запрос.УсловиеВыбытия;
				Объект = Запрос.Объект;
				Сумма = ФорматС(Запрос.СуммаСумма);
		        Количество = СокрЛ(ФорматК(Запрос.СуммаКоличество));

				ТекДок = Запрос.Документ;
				
				Таб.ВывестиСекцию("Строка");
			КонецЦикла;
		КонецЦикла;

		ИтогСумма = ФорматС(Запрос.СуммаСумма);
		
	КонецЕсли;
		
	ОтветственныйЗаСоставление = ФИО(Константа.ОтветственныйЗаСоставлениеРегистровНУ);

	Таб.ВывестиСекцию("Подвал");
	
	Таб.ТолькоПросмотр(1);
	Таб.ПараметрыСтраницы(,1,,);
	Таб.Опции(0, 0, 0, 0, "ПечатьРегистрУчетаОперацийВыбытияИмущества", "ОкноРегистрУчетаОперацийВыбытияИмущества");
	Таб.Показать("Регистр учета операций выбытия имущества, работ, услуг, прав");

КонецПроцедуры // Сформировать  

//_____________________________________________________________________________
Процедура ПриОткрытии(ФлагЧтенияНастройки) //предопределенная
	
	Форма.ИспользоватьЗакладки(1);
	Форма.ИспользоватьСлой("Параметры, Основной", 2);
	Форма.Закладки.ДобавитьЗначение("Параметры", "Параметры");
	Форма.Закладки.ДобавитьЗначение("Условия выбытия");
	Форма.Закладки.ДобавитьЗначение("Виды дохода");
	
	Если глНовыеПравилаВеденияНУ(КонДата) = 1 Тогда
		СписокУсловийВыбытияАктивный = СписокУсловийВыбытия2003;
		СписокВидовДоходаАктивный = СписокВидовДохода2003;
	Иначе
		СписокУсловийВыбытияАктивный = СписокУсловийВыбытия;
		СписокВидовДоходаАктивный = СписокВидовДохода;
	КонецЕсли;
	
	Если ФлагЧтенияНастройки = 1 Тогда
		// отразим состояние выбранных условий формирования регистра в диалоге на первой закладке
		Форма.УсловияВыбытияФильтр.Заголовок(СостояниеОтбора(СписокУсловийВыбытияАктивный));
		Форма.ВидыДоходаФильтр.Заголовок(СостояниеОтбора(СписокВидовДоходаАктивный));
		Возврат;    
	КонецЕсли;	         
	
	НачДата = НачалоПериодаБИ();
	КонДата = КонецПериодаБИ();
	          
	// список условий выбытия
	СписокУсловийВыбытия.ДобавитьЗначение(Перечисление.УсловияВыбытияИмущества.СПоследующейОплатой);
	СписокУсловийВыбытия.ДобавитьЗначение(Перечисление.УсловияВыбытияИмущества.ВСчетРанееПолученныхАвансов);
	СписокУсловийВыбытия.ДобавитьЗначение(Перечисление.УсловияВыбытияИмущества.ВСчетРасчетовПоДоговоруМены);	
	СписокУсловийВыбытия.ДобавитьЗначение(Перечисление.УсловияВыбытияИмущества.ВозвратТоваровПоставщику);	
	СписокУсловийВыбытия.ДобавитьЗначение(Перечисление.УсловияВыбытияИмущества.ВозвратМатериаловПоставщику);
	СписокУсловийВыбытия.ДобавитьЗначение(Перечисление.УсловияВыбытияИмущества.СписаниеИмущества);	
	СписокУсловийВыбытия.ДобавитьЗначение(Перечисление.УсловияВыбытияИмущества.ПоДоговоруЗайма);	
	СписокУсловийВыбытия.ДобавитьЗначение(Перечисление.УсловияВыбытияИмущества.ВРамкахЦелевогоФинансирования);	
	СписокУсловийВыбытия.ДобавитьЗначение(Перечисление.УсловияВыбытияИмущества.Безвозмездно);	
	СписокУсловийВыбытия.ДобавитьЗначение(Перечисление.УсловияВыбытияИмущества.Другие);

	Установить(СписокУсловийВыбытия, "Все"); // установить пометки у всех элементов списка

	СписокУсловийВыбытия2003.ДобавитьЗначение(Перечисление.УсловияПоступленияИВыбытия.ЗаПлату, "Отгрузка с последующей оплатой");
	СписокУсловийВыбытия2003.ДобавитьЗначение(Перечисление.УсловияПоступленияИВыбытия.Товароообмен,		   "Отгрузка по бартеру");
	СписокУсловийВыбытия2003.ДобавитьЗначение(Перечисление.УсловияПоступленияИВыбытия.Возврат,			   "Возврат");
	СписокУсловийВыбытия2003.ДобавитьЗначение(Перечисление.УсловияПоступленияИВыбытия.СписаниеИмущества,   "Списание имущества");
	СписокУсловийВыбытия2003.ДобавитьЗначение(Перечисление.УсловияПоступленияИВыбытия.ПоДоговоруЗайма,	   "Передача по договору займа");
	СписокУсловийВыбытия2003.ДобавитьЗначение(Перечисление.УсловияПоступленияИВыбытия.ОтгрузкаБезПереходаПраваСобственности,"Отгрузка без перехода права собственности");
	СписокУсловийВыбытия2003.ДобавитьЗначение(Перечисление.УсловияПоступленияИВыбытия.ВРамкахЦелевогоФинансирования,		"Передача в рамках целевого финансирования");
	СписокУсловийВыбытия2003.ДобавитьЗначение(Перечисление.УсловияПоступленияИВыбытия.Безвозмездно,		   					"Безвозмездная передача");
	СписокУсловийВыбытия2003.ДобавитьЗначение(Перечисление.УсловияПоступленияИВыбытия.ВкладВУставныйКапитал, 				"Вклад в уставный капитал");
	СписокУсловийВыбытия2003.ДобавитьЗначение(Перечисление.УсловияПоступленияИВыбытия.ВкладВПростоеТоварищество, 			"Вклад в простое товарищество");
	СписокУсловийВыбытия2003.ДобавитьЗначение(Перечисление.УсловияПоступленияИВыбытия.ПередачаОбособленномуПодразделению,   "Передача обособленному подразделению");
	СписокУсловийВыбытия2003.ДобавитьЗначение(Перечисление.УсловияПоступленияИВыбытия.Недостачи, 			"Недостачи");
	СписокУсловийВыбытия2003.ДобавитьЗначение(Перечисление.УсловияПоступленияИВыбытия.Другие,			    "Прочие условия выбытия");
	СписокУсловийВыбытия2003.ДобавитьЗначение(Перечисление.УсловияПоступленияИВыбытия.НеОблагается,			"По деятельности не облагаемой налогом на прибыль");

	Установить(СписокУсловийВыбытия2003, "Все"); // установить пометки у всех элементов списка

	// Список видов дохода
	СписокВидовДохода.ДобавитьЗначение(Перечисление.ВидыДоходов.РеализацияТоваров);
	СписокВидовДохода.ДобавитьЗначение(Перечисление.ВидыДоходов.РеализацияТоваровРанееОтгруженных);
	СписокВидовДохода.ДобавитьЗначение(Перечисление.ВидыДоходов.РеализацияПродукции);	
	СписокВидовДохода.ДобавитьЗначение(Перечисление.ВидыДоходов.РеализацияПродукцииРанееОтгруженной);	
	СписокВидовДохода.ДобавитьЗначение(Перечисление.ВидыДоходов.РеализацияПродукцииОбслуживающихПроизводств);
	СписокВидовДохода.ДобавитьЗначение(Перечисление.ВидыДоходов.РеализацияОсновныхСредств);	
	СписокВидовДохода.ДобавитьЗначение(Перечисление.ВидыДоходов.РеализацияНематериальныхАктивов);	
	СписокВидовДохода.ДобавитьЗначение(Перечисление.ВидыДоходов.РеализацияПрочегоИмущества);	
	СписокВидовДохода.ДобавитьЗначение(Перечисление.ВидыДоходов.РеализацияПраваТребованияВРамкахФинансовыхУслуг);	
	СписокВидовДохода.ДобавитьЗначение(Перечисление.ВидыДоходов.РеализацияУступкиПраваТребованияДоНаступленияСрокаПлатежа);
	СписокВидовДохода.ДобавитьЗначение(Перечисление.ВидыДоходов.РеализацияУступкиПраваТребованияПослеНаступленияСрокаПлатежа);	
	СписокВидовДохода.ДобавитьЗначение(Перечисление.ВидыДоходов.РеализацияПрочихИмущественныхПрав);	

	Установить(СписокВидовДохода, "Все"); // установить пометки у всех элементов списка

	СписокВидовДохода2003.ДобавитьЗначение(СчетПоКоду("Н06.01"), "Выручка от реализации товаров (работ, услуг) собственного производства");
	СписокВидовДохода2003.ДобавитьЗначение(СчетПоКоду("Н06.02"), "Выручка от реализации имущ. прав");
	СписокВидовДохода2003.ДобавитьЗначение(СчетПоКоду("Н06.03"), "Выручка от реализации прочего имущества");
	СписокВидовДохода2003.ДобавитьЗначение(СчетПоКоду("Н06.04"), "Выручка от реализации покупных товаров");
	СписокВидовДохода2003.ДобавитьЗначение(СчетПоКоду("Н06.05"), "Выручка от реализации ОС");
	СписокВидовДохода2003.ДобавитьЗначение(СчетПоКоду("Н06.06"), "Выручка от реализации НМА");
	СписокВидовДохода2003.ДобавитьЗначение(СчетПоКоду("Н06.07"), "Выручка от реализации прав требования");
	СписокВидовДохода2003.ДобавитьЗначение(СчетПоКоду("Н06.08"), "Выручка от уступки права до наступл. срока платежа");
	СписокВидовДохода2003.ДобавитьЗначение(СчетПоКоду("Н06.09"), "Выручка от уступки права после наступл. срока платежа");
	СписокВидовДохода2003.ДобавитьЗначение(СчетПоКоду("Н06.10"), "Выручка от реализации прод. обсл. произв.");
	СписокВидовДохода2003.ДобавитьЗначение(СчетПоКоду("Н06.11"), "Выручка от реализации ЦБ");
	СписокВидовДохода2003.ДобавитьЗначение("ДоходНеВозникает", "Доход не возникает");
	

	Установить(СписокВидовДохода2003, "Все"); // установить пометки у всех элементов списка
	                                                                                
	// отразим состояние выбранных условий формирования регистра в диалоге на первой закладке
	Форма.УсловияВыбытияФильтр.Заголовок(СостояниеОтбора(СписокУсловийВыбытияАктивный));
	Форма.ВидыДоходаФильтр.Заголовок(СостояниеОтбора(СписокВидовДоходаАктивный));
	
КонецПроцедуры //ПриОткрытии

//******************************************************************************
Процедура ПриВыбореЗакладки(Номер, Значение)                                    

	Если Значение = "Параметры" Тогда
		
		// при переходе на первую закладку отразим на ней состояние выбранных условий формирования регистра
		Форма.ИспользоватьСлой("Параметры, Основной", 2);

		Если глНовыеПравилаВеденияНУ(КонДата) = 1 Тогда
			Форма.УсловияВыбытияФильтр.Заголовок(СостояниеОтбора(СписокУсловийВыбытия2003));
			Форма.ВидыДоходаФильтр.Заголовок(СостояниеОтбора(СписокВидовДохода2003));
		
		Иначе
			Форма.УсловияВыбытияФильтр.Заголовок(СостояниеОтбора(СписокУсловийВыбытия));
			Форма.ВидыДоходаФильтр.Заголовок(СостояниеОтбора(СписокВидовДохода));
			
		КонецЕсли;

	ИначеЕсли Значение = "Условия выбытия" Тогда

		Если глНовыеПравилаВеденияНУ(КонДата) = 1 Тогда
			Форма.ИспользоватьСлой("УсловияВыбытия2003, Основной", 2);
		
		Иначе
			Форма.ИспользоватьСлой("УсловияВыбытия, Основной", 2);
			
		КонецЕсли;
		
	ИначеЕсли Значение = "Виды дохода" Тогда

		Если глНовыеПравилаВеденияНУ(КонДата) = 1 Тогда
			Форма.ИспользоватьСлой("ВидыДохода2003, Основной", 2);
		
		Иначе
			Форма.ИспользоватьСлой("ВидыДохода, Основной", 2);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры