////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ МОДУЛЯ
//           
Перем ТаблицаГруппировок;              
Перем Таб; 
Перем ТаблицаСДанными;                                                          
Перем ДатаНачалаНалоговогоПериода2003;
Перем СпособРасчетаСебестоимости;
Перем СписокОтбираемыхНаправленийИспользования;

//******************************************************************************
// ПроверкаПериода()
//
// Возвращаемое значение:
//  1 - корректно выбран период в диалоге
//  0 - не корректно выбран период в диалоге
//
// Описание:
// Функция проверяет корректность ввода интервала дат в дилоге и рассчитаны ли итоги за заданный период
//
Функция ПроверкаПериода()
	
	Если (НачДата > КонДата) Тогда
		Предупреждение("Неправильно задан период формирования отчета!"+РазделительСтрок+
		               "Дата начала больше даты окончания периода.", 60);
		Возврат 0;

	ИначеЕсли ПустоеЗначение(ДатаНачалаНалоговогоПериода2003) = 0 Тогда
		
		Если ((НачДата < ДатаНачалаНалоговогоПериода2003)
		   и  (КонДата >= ДатаНачалаНалоговогоПериода2003)) Тогда
			Предупреждение("Неправильно задан период формирования отчета!"+РазделительСтрок+
			               "В выбранном интервале налоговый учет велся по"+РазделительСтрок+
						   "разным правилам."+РазделительСтрок+
						   "Отчет за данный период сформировать невозможно!", 60);
			Возврат 0;
		    
		КонецЕсли;

	КонецЕсли;

	Если КонДата > КонецРассчитанногоПериодаБИ() Тогда
		Предупреждение("За выбранный период итоги не рассчитаны!"+РазделительСтрок+
		"Расчет итогов выполняется в режиме"+РазделительСтрок+
		"""Операции - Управление бухгалтерскими итогами"".");
		Возврат 0;
	КонецЕсли;
	
	Возврат 1;
	
КонецФункции // ПроверкаПериода()

//******************************************************************************
Процедура ПриВыбореПоВсем()
	
	ВыбранныйМатериал = 0;
	Если СписокВозможныхГруппировок.НайтиЗначение("Материал") = 0 Тогда
		СписокВозможныхГруппировок.ДобавитьЗначение("Материал", "Материал");	
	КонецЕсли;
	
КонецПроцедуры // ПриВыбореПоВсем()

//******************************************************************************
Процедура ПриВыбореМатериала()
	
	Если ПустоеЗначение(ВыбранныйМатериал) = 1 Тогда
		ПриВыбореПоВсем();
		
	Иначе
		Позиция = СписокВозможныхГруппировок.НайтиЗначение("Материал");
		Если Позиция <> 0 Тогда
			СписокВозможныхГруппировок.УдалитьЗначение(Позиция)
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ПриВыбореМатериала()

//******************************************************************************
//	Установить(Режим="") 
//
//	Параметры: Режим - строка, режим работы: "Все" - отметить все строки
//					   "Сброс" - снять отметку всех строк
//					   "" - инвертировать отметку всех строк
//
//	Описание: Устанавливает, снимает или инвертирует отметки выбора строк 
//
Процедура Установить(Список, Режим="") 
	Для Н = 1 По Список.РазмерСписка() Цикл
		Если Режим="Все" Тогда
			Список.Пометка(Н, 1);
		ИначеЕсли Режим="Сброс" Тогда
			Список.Пометка(Н, 0); 
		Иначе
			Список.Пометка(Н, ?(Список.Пометка(Н) = 1, 0, 1)); 
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры  //  Установить()

//******************************************************************************
// ПолучитьСписокОбъектовФильтра()
//
// Параметры:
//  Нет.
//
// Возвращаемое значение:
//  Список значений - список, объектов, которые должны попасть в регистр.
//
// Вызывается из формул элементов диалога:
//  Нет.
//
// Описание:
//  Здесь описывается функция.
//
Функция ПолучитьСписокОбъектовФильтра(ПолныйСписокОбъектов)
	
	СписокОтбираемыхОбъектов = СоздатьОбъект("СписокЗначений");
	РазмерСписка = ПолныйСписокОбъектов.РазмерСписка();
	Для СчетчикЦикла = 1 По РазмерСписка Цикл
		Если ПолныйСписокОбъектов.Пометка(СчетчикЦикла) = 1 Тогда
			Представление = "";
			Значение = ПолныйСписокОбъектов.ПолучитьЗначение(СчетчикЦикла, Представление);
		    Если ПустоеЗначение(Представление) = 1 Тогда
				СписокОтбираемыхОбъектов.ДобавитьЗначение(Значение, Строка(Значение));
				
			Иначе
				СписокОтбираемыхОбъектов.ДобавитьЗначение(Значение, Представление);
			КонецЕсли;

		КонецЕсли;	
	КонецЦикла;
	
	Возврат СписокОтбираемыхОбъектов;
	
КонецФункции // ПолучитьСписокОбъектовФильтра()

//******************************************************************************
// СостояниеОтбора()
//
// Параметры:
//  Список - список значенний - список который необходимо проанализировать.
//
// Возвращаемое значение:
//  Строка - отражает, помечены ли в списке все элементы, помечены некоторые или вообще все пометки сняты.
//
// Вызывается из формул элементов диалога:
//  Нет.
//
// Описание:
//  Здесь описывается функция.
//
Функция СостояниеОтбора(Список)
	
	СписокОтбираемыхОбъектов = ПолучитьСписокОбъектовФильтра(Список);
	Если СписокОтбираемыхОбъектов.РазмерСписка() = 0 Тогда
		ТипФильтра = "Не выбраны";
		
	ИначеЕсли СписокОтбираемыхОбъектов.РазмерСписка() = Список.РазмерСписка() Тогда
		ТипФильтра = "По всем";
		
	Иначе
		ТипФильтра = "Выборочно";
	КонецЕсли;                 
	
	Возврат ТипФильтра;
	
КонецФункции // СостояниеОтбора()

//******************************************************************************
// ОпределитьНаправлениеИспользования(Опер)
//
// Параметры:
//  Опер - операция (проводка) по списанию
//
// Возвращаемое значение:
//  Строка содержащая название направления использования
//
// Вызывается из формул элементов диалога:
//  Нет.
//
// Описание:
//  Определяет направление использования на основе анализа атрибутов
//  проводки списания
//
Функция ОпределитьНаправлениеИспользования(Опер)

	// выполняем поиск по счету дебета проводки
	СчетПоиска = Опер.Дебет.Счет.Код;
	Если Найти(СчетПоиска, "Н02.02") <> 0 Тогда
	    СчетПоиска = "Н02.02";
	КонецЕсли;
	
	РезультатПоискаПоСчету = СписокНаправленийИспользования2003.НайтиЗначение(СчетПоиска);
	// выполняем поиск по условию выбытия
	РезультатПоискаПоУсловию = СписокНаправленийИспользования2003.НайтиЗначение(Опер.Кредит.УсловияПоступленияИВыбытия);

	Если РезультатПоискаПоСчету <> 0 Тогда
		Представление = "";
		СписокНаправленийИспользования2003.ПолучитьЗначение(РезультатПоискаПоСчету, Представление);
		Возврат Представление;
	
	ИначеЕсли РезультатПоискаПоУсловию <> 0 Тогда
		Представление = Строка(СписокНаправленийИспользования2003.ПолучитьЗначение(РезультатПоискаПоУсловию));
		Возврат Представление;
		
	ИначеЕсли (Найти(Опер.Дебет.Счет.Код, "Н01.05") <> 0)
		  или (Найти(Опер.Дебет.Счет.Код, "Н01.06") <> 0) Тогда
		Возврат "На прямые расходы";
		
	ИначеЕсли (Найти(Опер.Дебет.Счет.Код, "Н07.04.1") <> 0) 
	      или (Найти(Опер.Дебет.Счет.Код, "Н07.04.2") <> 0) Тогда
        // могут быть косвенные расходы или не принимаемые
		Если Опер.Дебет.ГруппыВидыРасходов = Перечисление.ГруппыВидыРасходов.НеПринимаемые Тогда
			Возврат "На расходы, не принимаемые к налоговому учету";
		
		Иначе
			Возврат "На косвенные расходы";
		КонецЕсли;		

	ИначеЕсли (Найти(Опер.Дебет.Счет.Код, "Н09") <> 0) Тогда
        // могут быть безвозмездная передача или не принимаемые
		Если Опер.Дебет.ВнереализационныеРасходы = Перечисление.ВнереализационныеРасходы.НеПринимаемые Тогда
			Возврат "На расходы, не принимаемые к налоговому учету";
		
		Иначе
			Возврат "На внереализационные расходы";
		КонецЕсли;		

	ИначеЕсли (Найти(Опер.Кредит.Счет.Код, "Н02.04") <> 0) Тогда
		// это реализациия номенклатуры ранее отгруженной без перехода права собственности 
		Возврат "Реализация ранее отгруженных материалов";
	
	ИначеЕсли ПустоеЗначение(Опер.Кредит.УсловияПоступленияИВыбытия) = 1 Тогда 
		// если условие выбытия не указано, то это внутренне перемещение
		Возврат "Прочее внутренне перемещение";
		
	Иначе
		// все остальные операции классифицируются как реализация
		Возврат "На реализацию прочего имущества";
		
	КонецЕсли;	

КонецФункции // СостояниеОтбора()

//******************************************************************************
Процедура ВыводИтоговПоПредыдущейГруппе()
	
	Если ТаблицаСДанными.НомерСтроки <> 1 Тогда 
		НомерСтрокиИтогов = ТаблицаГруппировок.НомерСтрокиТаблицы;
		Если ТаблицаГруппировок.ИтогиПоКоличеству = 1 Тогда
			Таб.Область(НомерСтрокиИтогов, 4).Текст = ФорматК(ТаблицаГруппировок.Количество);
		КонецЕсли;
		Таб.Область(НомерСтрокиИтогов, 6).Текст = ФорматС(ТаблицаГруппировок.Сумма);
	КонецЕсли;

КонецПроцедуры // ВыводИтоговПоГруппу()

//******************************************************************************
Процедура ОбновлениеТаблицыГруппировок(НоваяГруппа);
	
	ТаблицаГруппировок.Значение = НоваяГруппа;
	ТаблицаГруппировок.НомерСтрокиТаблицы = Таб.ВысотаТаблицы();
	ТаблицаГруппировок.Количество = 0;
	ТаблицаГруппировок.Сумма = 0;
	
КонецПроцедуры // КорректировкаТаблицаГруппировок()

//******************************************************************************
Процедура НоваяГруппа(НоваяГруппа)            
	
	НомерСтроки = ТаблицаГруппировок.НомерСтроки;
	                                                  
	// вывод итогов в таблицу по предыдущей группировке
	ВыводИтоговПоПредыдущейГруппе();
	
	// вывод названия новой группировки
	НазваниеГруппы = "";
	Если ТипЗначения(НоваяГруппа) = 11 Тогда
		Если НоваяГруппа.Вид() = "Договоры" Тогда
			НазваниеГруппы = "" + глПолноеНаименование(НоваяГруппа.Владелец);
			НазваниеГруппы = НазваниеГруппы + ", ";
		КонецЕсли;
	КонецЕсли;
	НазваниеГруппы = НазваниеГруппы + НоваяГруппа;
	Группа= ТаблицаГруппировок.ПрефиксКИмени + ТаблицаГруппировок.СинонимИмени +": " + НазваниеГруппы;  
	Таб.ВывестиСекцию("Группа");
	
	// внесение новой информации по новой группировке
	ОбновлениеТаблицыГруппировок(НоваяГруппа);
	
	// обнуление значения вложенной  группировки, для того, чтобы в дальнейшем оно наверняка обработалось, как новое
	Если ТаблицаГруппировок.КоличествоСтрок() > НомерСтроки Тогда
		ТаблицаГруппировок.УстановитьЗначение(НомерСтроки+1, "Значение", "Значение группировки не задано");
	КонецЕсли;
	
КонецПроцедуры // НоваяГруппа()

//******************************************************************************
// НеобходимРасчетСуммыОперации()
//
// Параметры:
//  Нет.
//
// Возвращаемое значение:
//  Здесь описывается возвращаемое значение.
//
// Вызывается из формул элементов диалога:
//  Нет.
//
// Описание:
//  Здесь описывается функция.
//
Функция НеобходимРасчетСуммыОперации(БухИт)
	                                      
	Необходим = Да;
	
	Если СпособРасчетаСебестоимости = "по средней" Тогда
		Необходим = Нет;
	КонецЕсли;
	   
	Возврат  Необходим;
	
КонецФункции // НеобходимРасчетСуммыОперации()

//******************************************************************************
// ОсновниеВыбытия()
//
// Параметры:
//  Нет.
//
// Возвращаемое значение:
//  Здесь описывается возвращаемое значение.
//
// Вызывается из формул элементов диалога:
//  Нет.
//
// Описание:
//  Здесь описывается функция.
//
Функция ОсновниеВыбытия(Опер)
	        
	ОснованиеВыбытия = "";
	
	Если ПустоеЗначение(Опер.Кредит.Основание) = 0 Тогда
		ОснованиеВыбытия = "" + глПолноеНаименование(Опер.Кредит.Основание.Владелец);
		ОснованиеВыбытия = ОснованиеВыбытия + ", " + Опер.Кредит.Основание;
		
	Иначе
		ОснованиеВыбытия = "" + СокрЛП(Опер.СодержаниеПроводки);
	КонецЕсли;
	
	Если ПустоеЗначение(Опер.ПервичныйДокумент) = 0 Тогда
		ОснованиеВыбытия = ОснованиеВыбытия + ", на основании: " + Опер.ПервичныйДокумент;    
	КонецЕсли;
	
	Возврат ОснованиеВыбытия;
	
КонецФункции // ОсновниеВыбытия()

//******************************************************************************
// ЗаписатьОперациюВТаблицу()
//
// Параметры:
//  Нет.
//
// Вызывается из формул элементов диалога:
//  Нет.
//
// Описание:
//  Здесь описывается процедура.
//
Процедура ЗаписатьОперациюВТаблицу(БухИт)
	
	РассчитыватьСуммуОперации = НеобходимРасчетСуммыОперации(БухИт);
	     
	Если РассчитыватьСуммуОперации = Да Тогда
		СписаноЗаМесКол = БухИт.КорКО("К");
		СписаноЗаМесСум = БухИт.КорКО("С");
		Если СписаноЗаМесКол<>0 Тогда
			СредняяЦена = СписаноЗаМесСум/СписаноЗаМесКол;
			
		Иначе
			СредняяЦена = 0;
		КонецЕсли;
		
		СписаноПоРасчетуКол = 0;
		СписаноПоРасчету    = 0;
	КонецЕсли;
	
	БухИт.ВыбратьПериоды(, 2);
	Пока БухИт.ПолучитьПериод() = 1 Цикл
		Опер = БухИт.Операция;
		
		НаправлениеИспользования = ОпределитьНаправлениеИспользования(Опер);

		// Вносим данные в таблицу, если направление использования данной операции отмечено
		// в списке направлений использования.
		Если ПустоеЗначение(СписокОтбираемыхНаправленийИспользования.Получить(НаправлениеИспользования)) = 0 Тогда 
			
			// Определение сумм и количества
			Если РассчитыватьСуммуОперации = Нет Тогда
				// расчет себестоимости ведется по "средней цене"
				ТекСуммаСпис = БухИт.КО("С");
				ТекЦенаСпис  = ?(БухИт.КО("К") <> 0, Окр(БухИт.КО("С")/БухИт.КО("К"),2), 0);
					
			Иначе
				// расчет себестоимости ведется по "средне-взвешенной цене" за месяц
				СписаноКоличество = БухИт.КорКО("К");
				Если СписаноКоличество = 0 Тогда // корректировку не показываем
				    Продолжить;
				КонецЕсли;
				
				СписаноПоРасчетуКол = СписаноПоРасчетуКол + СписаноКоличество;
				ТекСуммаСпис = Окр(СписаноПоРасчетуКол * СредняяЦена, 2) - СписаноПоРасчету;
				ТекЦенаСпис  = Окр(СредняяЦена, 2);
				СписаноПоРасчету = СписаноПоРасчету + ТекСуммаСпис;
			КонецЕсли;
			
			ТаблицаСДанными.НоваяСтрока();
            
			// определение направления использования
			ТаблицаСДанными.НаправлениеИспользования = НаправлениеИспользования;

			// определение объекта учета
			Если Опер.Дебет.Счет.Выбран() = 1 Тогда
				Если ТипЗначенияСтр(Опер.Дебет.Субконто(1)) = "Справочник" Тогда
					ТаблицаСДанными.ОбъектУчета = Опер.Дебет.Субконто(1);
				КонецЕсли;
			КонецЕсли;

			// определение основания выбытия
			ТаблицаСДанными.ОснованиеВыбытия = ОсновниеВыбытия(Опер);
			
			// определение товара
			ТаблицаСДанными.Материал   = БухИт.Субконто(1);
			ТаблицаСДанными.Количество = БухИт.КО("К");
			ТаблицаСДанными.Стоимость  = ТекСуммаСпис;
			ТаблицаСДанными.Цена       = ТекЦенаСпис;
			ТаблицаСДанными.Документ   = Опер.Документ;

		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры // ЗаписатьОперациюВТаблицу()

//******************************************************************************
// РасчетПоСреднейВзвешеннойОценке()
//
// Параметры:
//  Нет.
//
// Вызывается из формул элементов диалога:
//  Нет.
//
// Описание:
//  Здесь описывается процедура.
//
Процедура РасчетПоСреднейВзвешеннойОценке(БухИт, НачДатаРасчета, КонДатаРасчета, СчетаУчетаНоменклатуры)
	
	БухИт.ИспользоватьСубконто(ВидыСубконто.УсловияПоступленияИВыбытия,, 1);
	БухИт.ИспользоватьКорСубконто();
	БухИт.ИспользоватьКорСубконто();
	БухИт.ИспользоватьКорСубконто();
	БухИт.ВключатьСубсчета(, -1);
	БухИт.ВыполнитьЗапрос(НачДатаРасчета, КонДатаРасчета, СчетаУчетаНоменклатуры,,, 2, "Проводка", "СК");
	БухИт.ВыбратьСчета(, 2);
	Пока БухИт.ПолучитьСчет() = 1 Цикл

		БухИт.ВыбратьСубконто(1, 2);
		Пока БухИт.ПолучитьСубконто(1) = 1 Цикл
			
			БухИт.ВыбратьСубконто(ВидыСубконто.УсловияПоступленияИВыбытия, 2);
			Пока БухИт.ПолучитьСубконто(ВидыСубконто.УсловияПоступленияИВыбытия) = 1 Цикл
	
				БухИт.ВыбратьКорСчета(, 2);
				Пока БухИт.ПолучитьКорСчет() = 1 Цикл
					
					КоррСчет = БухИт.КорСчет;
					КоличествоСубконто = КоррСчет.КоличествоСубконто();
					Если КоличествоСубконто = 0 Тогда
						ЗаписатьОперациюВТаблицу(БухИт);
						
					Иначе
						БухИт.ВыбратьКорСубконто(1);
						Пока БухИт.ПолучитьКорСубконто(1) = 1 Цикл
							Если КоличествоСубконто = 1 Тогда
								ЗаписатьОперациюВТаблицу(БухИт);
								
							Иначе
								БухИт.ВыбратьКорСубконто(2);
								Пока БухИт.ПолучитьКорСубконто(2) = 1 Цикл
									Если КоличествоСубконто = 2 Тогда
										ЗаписатьОперациюВТаблицу(БухИт);
										
									Иначе
										БухИт.ВыбратьКорСубконто(3);
										Пока БухИт.ПолучитьКорСубконто(3) = 1 Цикл
											ЗаписатьОперациюВТаблицу(БухИт);
											
										КонецЦикла;
									КонецЕсли;
								КонецЦикла;
							КонецЕсли;
						КонецЦикла;
					КонецЕсли;
				КонецЦикла;
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры // РасчетПоСреднейВзвешеннойОценке()

//******************************************************************************
// РасчетПоСреднейСкользящейОценке()
//
// Параметры:
//  Нет.
//
// Вызывается из формул элементов диалога:
//  Нет.
//
// Описание:
//  Здесь описывается процедура.
//
Процедура РасчетПоСреднейСкользящейОценке(БухИт, НачДатаРасчета, КонДатаРасчета, СчетаУчетаНоменклатуры);
	                  
	БухИт.Опции(1,1);
	БухИт.ВыполнитьЗапрос(НачДатаРасчета, КонДатаРасчета, СчетаУчетаНоменклатуры,,, 2, "Проводка", "СК");
	БухИт.ВыбратьСубконто(1, 2);
	Пока БухИт.ПолучитьСубконто(1) = 1 Цикл
		ЗаписатьОперациюВТаблицу(БухИт);
	КонецЦикла
	
КонецПроцедуры // РасчетПоСреднейСкользящейОценке()

//******************************************************************************
Процедура Сформировать()    
	
	ДатаНачалаНалоговогоПериода2003 = ПолучитьПустоеЗначение("Дата");
	глНовыеПравилаВеденияНУ(КонДата, ДатаНачалаНалоговогоПериода2003);

	Если ПроверкаПериода() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	// таблица в которую помещаются данные для вывода их в исходную форму регистра
	ТаблицаСДанными = СоздатьОбъект("ТаблицаЗначений");
	ТаблицаСДанными.НоваяКолонка("НаправлениеИспользования");
	ТаблицаСДанными.НоваяКолонка("ОснованиеВыбытия");
	ТаблицаСДанными.НоваяКолонка("ОбъектУчета");
	ТаблицаСДанными.НоваяКолонка("Материал");
	ТаблицаСДанными.НоваяКолонка("Количество", "Число", 15, 3);
	ТаблицаСДанными.НоваяКолонка("Цена", "Число", 15, 2);
	ТаблицаСДанными.НоваяКолонка("Стоимость", "Число", 15, 2);
	ТаблицаСДанными.НоваяКолонка("Документ", "Документ");
	
	// таблица с выбранными видами группировок
	ТаблицаГруппировок = СоздатьОбъект("ТаблицаЗначений");
	ТаблицаГруппировок.НоваяКолонка("ИмяГруппировки", "Строка");
	ТаблицаГруппировок.НоваяКолонка("СинонимИмени", "Строка");
	ТаблицаГруппировок.НоваяКолонка("ПрефиксКИмени", "Строка");
	ТаблицаГруппировок.НоваяКолонка("Значение");
	ТаблицаГруппировок.НоваяКолонка("НомерСтрокиТаблицы", "Число", 10, 0);
	ТаблицаГруппировок.НоваяКолонка("ИтогиПоКоличеству", "Число", 1, 0);
	ТаблицаГруппировок.НоваяКолонка("Количество", "Число", 15, 3);
	ТаблицаГруппировок.НоваяКолонка("Сумма", "Число", 15, 2);
	
	// Дополнительные условия формирования регистра.
	// Эти условия отражаются в шапке печатной формы регистра.
	Если глНовыеПравилаВеденияНУ(КонДата) = 1 Тогда
		АктивныйСписокНаправлений = СписокНаправленийИспользования2003;
		
	Иначе
		АктивныйСписокНаправлений = СписокНаправленийИспользования;
		
	КонецЕсли;
	
	СписокОтбираемыхНаправленийИспользования = ПолучитьСписокОбъектовФильтра(АктивныйСписокНаправлений);

	Если СписокОтбираемыхНаправленийИспользования.РазмерСписка() = 0 Тогда
		Предупреждение("Регистр не может быть сформирован,
						|т.к. на закладке ""Направления использования"" не установлено ни одно
						|направление использования,
						|которому соответствует включаемая в регистр операция.");
		Возврат;
		
	ИначеЕсли СписокОтбираемыхНаправленийИспользования.РазмерСписка() = АктивныйСписокНаправлений.РазмерСписка() Тогда
		ТекстШапкиНаправленияИспользования = "по всем";
		
	Иначе
		ТекстШапкиНаправленияИспользования = "выборочно";
	КонецЕсли;
	
	// подготовка "Шапки"
	Таб = СоздатьОбъект("Таблица"); 
	СтрНалогоплательщик = СокрЛП(Константа.ОфициальноеНазваниеОрганизации);
	Если ПустаяСтрока(СтрНалогоплательщик) = 1 Тогда
	СтрНалогоплательщик = СокрЛП(Константа.НазваниеОрганизации);	    
	КонецЕсли;
	ИНН = Константа.ИННОрганизации;
	Таб.ВывестиСекцию("Шапка<");
	
	Если глНовыеПравилаВеденияНУ(КонДата) = 1 Тогда

		// ФОРМИРОВАНИЕ С УЧЕТОМ НОВЫХ ПРАВИЛ НАЛОГОВОГО УЧЕТА РЕДАКЦИИ 4.4

		СпособРасчетаСебестоимости = глСпособРасчетаСебестоимостиНоменклатуры(КонДата);

		СчетаУчетаНоменклатуры = СоздатьОбъект("СписокЗначений");
		СчетаУчетаНоменклатуры.ДобавитьЗначение(СчетПоКоду("Н02.01"));

		ВыбранныйОбъект = ВыбранныйМатериал;
		Если ВыбранныйОбъект.Выбран() = 1 Тогда
			Таб.ВывестиСекцию("ПоМатериалу");
		КонецЕсли;
		Таб.ВывестиСекцию("Шапка>");
		
		БухИт = СоздатьОбъект("БухгалтерскиеИтоги");
		БухИт.ИспользоватьПланСчетов(ОсновнойПланСчетов());
			
		ДатаВМесяце = НачМесяца(НачДата);

		Пока НачМесяца(ДатаВМесяце) <= НачМесяца(КонДата) Цикл

			НачДатаРасчета = Макс(НачДата, НачМесяца(ДатаВМесяце));
			КонДатаРасчета = Мин(КонДата, КонМесяца(ДатаВМесяце));
			
			Если ВыбранныйОбъект.Выбран() = 1 Тогда
				БухИт.ИспользоватьСубконто(СчетаУчетаНоменклатуры.ПолучитьЗначение(1).ВидСубконто(1), ВыбранныйОбъект, 1);
			
			Иначе
				БухИт.ИспользоватьСубконто(СчетаУчетаНоменклатуры.ПолучитьЗначение(1).ВидСубконто(1), , 1);
			КонецЕсли;	
			
			Если СпособРасчетаСебестоимости <> "по средней" Тогда // расчет по средневзвешенной за месяц
				РасчетПоСреднейВзвешеннойОценке(Бухит, НачДатаРасчета, КонДатаРасчета, СчетаУчетаНоменклатуры);
				
			Иначе // расчет ведется по по средней скользящей
				РасчетПоСреднейСкользящейОценке(Бухит, НачДатаРасчета, КонДатаРасчета, СчетаУчетаНоменклатуры);
			КонецЕсли;
			
			// переходим к следующему месяцу в периоде формирования отчета
			ДатаВМесяце = ДобавитьМесяц(ДатаВМесяце, 1);
			
		КонецЦикла;
		
	Иначе

		// ФОРМИРОВАНИЕ С УЧЕТОМ ПРАВИЛ НАЛОГОВОГО УЧЕТА, ДЕЙСТВОВАВШИХ ДО РЕДАКЦИИ 4.4

		ТаблицаОбъектов = глСоздатьТаблицуОбъектов();
		Если ПустоеЗначение(ВыбранныйМатериал) = 0 Тогда                       
			Таб.ВывестиСекцию("ПоМатериалу");
			глЗаполнитьТаблицуОперациями(ТаблицаОбъектов, ВыбранныйМатериал, НачДата, КонДата, 0, 1, 2);
			
		Иначе
			глЗаполнитьТаблицуОперациями(ТаблицаОбъектов, "Материалы", НачДата, КонДата, 0, 1, 2);
		КонецЕсли;
		                            
		Таб.ВывестиСекцию("Шапка>");
		              
		ТаблицаОбъектов.ВыбратьСтроки();
		Пока ТаблицаОбъектов.ПолучитьСтроку() = 1 Цикл
			Материал = ТаблицаОбъектов.Объект;
			
			Если ПустоеЗначение(ВыбранныйМатериал) = 0 Тогда
				Если Материал <> ВыбранныйМатериал Тогда
				    Продолжить;
				КонецЕсли;
				
			ИначеЕсли Материал.Вид() <> "Материалы" Тогда
				Продолжить;
			КонецЕсли;
			
			ИтогРасчета = глРассчитатьСтоимостьОбъекта(ТаблицаОбъектов,, Материал,,, НачДата, КонДата, 2);
			Если ТипЗначенияСтр(ИтогРасчета) = "Строка" Тогда
				Сообщить(ИтогРасчета, "!");
				Продолжить;
			КонецЕсли;                                                          
			
			ТаблицаОперацийПоОбъекту = ТаблицаОбъектов.ТаблицаОперацийПоОбъекту;
		    ТаблицаОперацийПоОбъекту.ВыбратьСтроки();
			Пока ТаблицаОперацийПоОбъекту.ПолучитьСтроку() = 1 Цикл
				Цена = ТаблицаОперацийПоОбъекту.Цена;
				ТаблицаОперацийЗаДень = ТаблицаОперацийПоОбъекту.ТаблицаОперацийЗаДень;
				
				ТаблицаОперацийЗаДень.ВыбратьСтроки();
				Пока ТаблицаОперацийЗаДень.ПолучитьСтроку() = 1 Цикл
					КодОперации = ТаблицаОперацийЗаДень.КодОперации;
					Док = ТаблицаОперацийЗаДень.Документ;
					СтрокаДокумента = ТаблицаОперацийЗаДень.СтрокаДокумента;
					
					Если КодОперации = 6 Тогда // списание
						КоличествоСписано = -ТаблицаОперацийЗаДень.Количество;
						СуммаСписания     = - ТаблицаОперацийЗаДень.Сумма;
				
						Если ПустоеЗначение(СтрокаДокумента) = 0 Тогда  
							Док.ПолучитьСтрокуПоНомеру(СтрокаДокумента);
							Если Док.Вид() = "СписаниеМатериаловТоваровПродукции" Тогда
								ОснованиеВыбытия = Док.НаименованиеОперации;
								
								Если ПустоеЗначение(Док.ВидРасхода) = 1 Тогда 
									НаправлениеИспользования = "Не принимаемые для целей налогообложения"
									
								Иначе
						        	НаправлениеИспользования = Док.ВидРасхода;
								КонецЕсли;
							Иначе     
								ОснованиеВыбытия = "" + глПолноеНаименование(Док.Контрагент);
								Если ПустоеЗначение(Док.Договор) = 0 Тогда
									 ОснованиеВыбытия = ОснованиеВыбытия + ", " + Док.Договор;
								КонецЕсли;
			                         
								УсловиеВыбытия = Док.УсловиеВыбытия;
								
								Если (УсловиеВыбытия = Перечисление.УсловияВыбытияИмущества.СписаниеИмущества)
									или (УсловиеВыбытия = Перечисление.УсловияВыбытияИмущества.ВРамкахЦелевогоФинансирования)
								    или (УсловиеВыбытия = Перечисление.УсловияВыбытияИмущества.ВРамкахБлаготворительнойДеятельности)
									или (УсловиеВыбытия = Перечисление.УсловияВыбытияИмущества.Безвозмездно) Тогда
									                                                                              
									НаправлениеИспользования = Док.УсловиеВыбытия;
									
								Иначе                       
									НаправлениеИспользования = "Реализация";
								КонецЕсли;
			
							КонецЕсли;
							ОбъектУчета = Док.Объект;
						КонецЕсли;
						
						// Вносим данные в таблицу, если направление использования данной операции отмечено
						// в списке направлений использования.
						Если СписокОтбираемыхНаправленийИспользования.НайтиЗначение(НаправлениеИспользования) <> 0 Тогда 
							ТаблицаСДанными.НоваяСтрока();
							ТаблицаСДанными.НаправлениеИспользования = НаправлениеИспользования;
							ТаблицаСДанными.ОбъектУчета = ОбъектУчета;
							ТаблицаСДанными.ОснованиеВыбытия = ОснованиеВыбытия;
							ТаблицаСДанными.Материал = Материал;
							ТаблицаСДанными.Количество = КоличествоСписано;
							ТаблицаСДанными.Цена = Цена;
							ТаблицаСДанными.Стоимость = СуммаСписания;
							ТаблицаСДанными.Документ = Док;
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;
			КонецЦикла;
		КонецЦикла;
		
	КонецЕсли;
	
	// формирование строки-параметра для сортировки таблицы
	СтрокаСортировки = "";
	ИтогиПоКоличеству = 0;
	Префикс = "";
	Для СчетчикЦикла = 1 По СписокВозможныхГруппировок.РазмерСписка() Цикл
		Если СписокВозможныхГруппировок.Пометка(СчетчикЦикла) = 1 Тогда
			Группировка = СписокВозможныхГруппировок.ПолучитьЗначение(СчетчикЦикла);
			СтрокаСортировки = СтрокаСортировки + Группировка +",";
			
			// вывод итоговой информации по количеству только внутри группировки по материалам
			Если Группировка = "Материал" Тогда
				ИтогиПоКоличеству = 1;
			КонецЕсли;
			
			ТаблицаГруппировок.НоваяСтрока();
			ТаблицаГруппировок.ИмяГруппировки = Группировка;        
			Представление = "";
			СписокВозможныхГруппировок.ПолучитьЗначение(СчетчикЦикла, Представление);
			ТаблицаГруппировок.СинонимИмени = Представление;
			ТаблицаГруппировок.Значение = "Значение группировки не задано";
			ТаблицаГруппировок.ПрефиксКИмени = Префикс;
			ТаблицаГруппировок.ИтогиПоКоличеству = ИтогиПоКоличеству;
			Префикс = Префикс + "    ";
		КонецЕсли;
	КонецЦикла;
	
	СтрокаСортировки = СтрокаСортировки + "Документ";
	
	// сортируем таблицу указанным образом
	ТаблицаСДанными.Сортировать(СтрокаСортировки, 1);
	                
	// выбираем данные из таблицы
	ТаблицаСДанными.ВыбратьСтроки();
	Пока ТаблицаСДанными.ПолучитьСтроку() = 1 Цикл
		
		// смотрим какие имеются у нас группировки и обрабатываем их
		ТаблицаГруппировок.ВыбратьСтроки();
		Пока ТаблицаГруппировок.ПолучитьСтроку() = 1  Цикл
			ЗначениеГруппировки = ТаблицаСДанными.ПолучитьЗначение(ТаблицаСДанными.НомерСтроки, ТаблицаГруппировок.ИмяГруппировки);
			
			// если это новое значение группировки
			Если ТаблицаГруппировок.Значение <> ЗначениеГруппировки Тогда
				НоваяГруппа(ЗначениеГруппировки);
			КонецЕсли;                            
			
			ТаблицаГруппировок.Количество = ТаблицаГруппировок.Количество + ТаблицаСДанными.Количество;
			ТаблицаГруппировок.Сумма = ТаблицаГруппировок.Сумма + ТаблицаСДанными.Стоимость;
		КонецЦикла;              
		              
		// подготовка данных для вывода исходную таблицу
		Док = ТаблицаСДанными.Документ;
		ДатаОперации = Док.ДатаДок;
		Количество = ТаблицаСДанными.Количество;
		Цена = ТаблицаСДанными.Цена;
		Стоимость = ТаблицаСДанными.Стоимость;  
		ОснованиеВыбытия = ТаблицаСДанными.ОснованиеВыбытия;
		
		Таб.ВывестиСекцию("Строка");
	КонецЦикла;                  
	                                            
	// необходимо вывести итоги по последним значениям группировок
	Если ТаблицаСДанными.КоличествоСтрок() <> 0 Тогда
		ТаблицаГруппировок.ВыбратьСтроки();
		Пока ТаблицаГруппировок.ПолучитьСтроку() = 1  Цикл
			ВыводИтоговПоПредыдущейГруппе();
		КонецЦикла;              
	КонецЕсли;
	                                            
	ОтветственныйЗаСоставление = ФИО(Константа.ОтветственныйЗаСоставлениеРегистровНУ);

	ИтогоСтоимость = ФорматС(ТаблицаСДанными.Итог("Стоимость"));  

	Таб.ВывестиСекцию("Подвал");
	Таб.ТолькоПросмотр(1);
	Таб.ОбластьПечати(,2,,);
	Таб.Опции(0, 0, 0, 0, "ПечатьРегистрРасчетСтоимостиСырьяМатериалов", "ОкноРегистрРасчетСтоимостиСырьяМатериалов");
	Таб.Показать("Регистр-расчет стоимости сырья/материалов, списанных в отчетном периоде");

КонецПроцедуры // Сформировать()

////////////////////////////////////////////////////////////////////////////////
// ПРЕДОПРЕДЕЛЕННЫЕ ПРОЦЕДУРЫ
//

//******************************************************************************
// Предопределенная процедура
//
Процедура ПриОткрытии(ФлагЧтенияНастройки) //предопределенная
	
	Форма.ИспользоватьЗакладки(1);
	Форма.ИспользоватьСлой("Параметры, Основной", 2);
	Форма.Закладки.ДобавитьЗначение("Параметры", "Параметры");
	Форма.Закладки.ДобавитьЗначение("Направления использования");
	
	Если ФлагЧтенияНастройки = 1 Тогда
		
		// отразим состояние выбранных условий формирования регистра в диалоге на первой закладке
		Если глНовыеПравилаВеденияНУ(КонДата) = 1 Тогда
			Форма.НаправленияИспользованияФильтр.Заголовок(СостояниеОтбора(СписокНаправленийИспользования2003));
		
		Иначе
			Форма.НаправленияИспользованияФильтр.Заголовок(СостояниеОтбора(СписокНаправленийИспользования));
			
		КонецЕсли;
		
		Возврат;
	КонецЕсли;	         
	
	НачДата = НачМесяца(РабочаяДата());
	КонДата = КонМесяца(РабочаяДата());
	
	// Классификация направлений использования действовавшая до редакции 4.4
	СписокНаправленийИспользования.ДобавитьЗначение(Перечисление.ВидыРасходов.ПрямыеРасходы);
	СписокНаправленийИспользования.ДобавитьЗначение(Перечисление.ВидыРасходов.ПриобретениеТоваров);
	СписокНаправленийИспользования.ДобавитьЗначение(Перечисление.ВидыРасходов.ПриобретениеМатериалов);
	СписокНаправленийИспользования.ДобавитьЗначение(Перечисление.ВидыРасходов.ПриобретениеОсновныхСредств);
	СписокНаправленийИспользования.ДобавитьЗначение(Перечисление.ВидыРасходов.СтроительствоОсновныхСредств);
	СписокНаправленийИспользования.ДобавитьЗначение(Перечисление.ВидыРасходов.ПриобретениеНематериальныхАктивов);
	СписокНаправленийИспользования.ДобавитьЗначение(Перечисление.ВидыРасходов.ПриобретениеЦенныхБумаг);
	СписокНаправленийИспользования.ДобавитьЗначение(Перечисление.ВидыРасходов.ПриобретениеПрав);
	СписокНаправленийИспользования.ДобавитьЗначение(Перечисление.ВидыРасходов.ПредставительскиеРасходы);
	СписокНаправленийИспользования.ДобавитьЗначение(Перечисление.ВидыРасходов.РасходыНаРекламу);
	СписокНаправленийИспользования.ДобавитьЗначение(Перечисление.ВидыРасходов.НИОКР);
	СписокНаправленийИспользования.ДобавитьЗначение(Перечисление.ВидыРасходов.ОсвоениеПриродныхРесурсов);
	СписокНаправленийИспользования.ДобавитьЗначение(Перечисление.ВидыРасходов.КосвенныеРасходы);
	СписокНаправленийИспользования.ДобавитьЗначение(Перечисление.ВидыРасходов.РеализацияОсновныхСредств);
	СписокНаправленийИспользования.ДобавитьЗначение(Перечисление.ВидыРасходов.РеализацияНематериальныхАктивов);
	СписокНаправленийИспользования.ДобавитьЗначение(Перечисление.ВидыРасходов.РеализацияПрочегоИмущества);	
	СписокНаправленийИспользования.ДобавитьЗначение(Перечисление.ВидыРасходов.ВыбытиеИмущества);	
	СписокНаправленийИспользования.ДобавитьЗначение(Перечисление.ВидыРасходов.БезвозмезднаяПередачаИмущества);
	СписокНаправленийИспользования.ДобавитьЗначение(Перечисление.УсловияВыбытияИмущества.СписаниеИмущества);
	СписокНаправленийИспользования.ДобавитьЗначение(Перечисление.УсловияВыбытияИмущества.ВРамкахЦелевогоФинансирования);
    СписокНаправленийИспользования.ДобавитьЗначение(Перечисление.УсловияВыбытияИмущества.ВРамкахБлаготворительнойДеятельности);
	СписокНаправленийИспользования.ДобавитьЗначение(Перечисление.УсловияВыбытияИмущества.Безвозмездно);
	СписокНаправленийИспользования.ДобавитьЗначение("Реализация");
	СписокНаправленийИспользования.ДобавитьЗначение(Перечисление.ВидыРасходов.НеПринимаемые);

	Установить(СписокНаправленийИспользования, "Все"); // установить пометки у всех элементов списка

	// Классификация направлений использования действовующая начиная с редакции 4.4
	СписокНаправленийИспользования2003.ДобавитьЗначение("Н02.02", "На приобретение товаров");
	СписокНаправленийИспользования2003.ДобавитьЗначение("Н02.01", "На приобретение материалов");
	СписокНаправленийИспользования2003.ДобавитьЗначение("Н02.09", "Передача в переработку");
	СписокНаправленийИспользования2003.ДобавитьЗначение("Н01.01", "На приобретение ОС");
	СписокНаправленийИспользования2003.ДобавитьЗначение("Н01.02", "На приобретение оборудования, требующего монтажа");
	СписокНаправленийИспользования2003.ДобавитьЗначение("Н01.08", "На приобретение НМА");
	СписокНаправленийИспользования2003.ДобавитьЗначение("Н01.09", "На сроительство ОС");
	СписокНаправленийИспользования2003.ДобавитьЗначение("Н02.05", "На приобретение ценных бумаг");
	СписокНаправленийИспользования2003.ДобавитьЗначение("Н02.06", "На приобретение прав требования");
	СписокНаправленийИспользования2003.ДобавитьЗначение("Н01.07", "На транспортные расходы");
	СписокНаправленийИспользования2003.ДобавитьЗначение("Н03.03", "На представительские расходы");
	СписокНаправленийИспользования2003.ДобавитьЗначение("Н03.04", "На рекламу");
	СписокНаправленийИспользования2003.ДобавитьЗначение("Н01.03", "На НИОКР");
	СписокНаправленийИспользования2003.ДобавитьЗначение("Н01.04", "На освоение природных ресурсов");
	СписокНаправленийИспользования2003.ДобавитьЗначение("Прямые", "На прямые расходы");
	СписокНаправленийИспользования2003.ДобавитьЗначение("Косвенные","На косвенные расходы");
	СписокНаправленийИспользования2003.ДобавитьЗначение("Внереализационные", "На внереализационные расходы");
	СписокНаправленийИспользования2003.ДобавитьЗначение("Н07.07", "На реализацию ОС");
	СписокНаправленийИспользования2003.ДобавитьЗначение("Н07.08", "На реализацию НМА");
	СписокНаправленийИспользования2003.ДобавитьЗначение("Н07.06", "На реализацию прочего имущества");
	СписокНаправленийИспользования2003.ДобавитьЗначение("Н05.01", "На выбытие ОС");
	СписокНаправленийИспользования2003.ДобавитьЗначение("Н05.03", "На выбытие НМА");
	СписокНаправленийИспользования2003.ДобавитьЗначение(Перечисление.УсловияПоступленияИВыбытия.СписаниеИмущества);
	СписокНаправленийИспользования2003.ДобавитьЗначение(Перечисление.УсловияПоступленияИВыбытия.ВРамкахЦелевогоФинансирования);
	СписокНаправленийИспользования2003.ДобавитьЗначение(Перечисление.УсловияПоступленияИВыбытия.Безвозмездно);
	СписокНаправленийИспользования2003.ДобавитьЗначение(Перечисление.УсловияПоступленияИВыбытия.ОтгрузкаБезПереходаПраваСобственности);
	СписокНаправленийИспользования2003.ДобавитьЗначение("РеализацияОтгруженных", "Реализация ранее отгруженных материалов");
	СписокНаправленийИспользования2003.ДобавитьЗначение("Перемещение",  		 "Прочее внутренне перемещение");
    СписокНаправленийИспользования2003.ДобавитьЗначение(Перечисление.УсловияПоступленияИВыбытия.Недостачи);
	СписокНаправленийИспользования2003.ДобавитьЗначение("НеПринимаемые", 		 "На расходы, не принимаемые к налоговому учету");
	СписокНаправленийИспользования2003.ДобавитьЗначение(Перечисление.УсловияПоступленияИВыбытия.НеОблагается);

	Установить(СписокНаправленийИспользования2003, "Все"); // установить пометки у всех элементов списка
	                                                                                
	// отразим состояние выбранных условий формирования регистра в диалоге на первой закладке
	Если глНовыеПравилаВеденияНУ(КонДата) = 1 Тогда
		Форма.НаправленияИспользованияФильтр.Заголовок(СостояниеОтбора(СписокНаправленийИспользования2003));
	
	Иначе
		Форма.НаправленияИспользованияФильтр.Заголовок(СостояниеОтбора(СписокНаправленийИспользования));
		
	КонецЕсли;
	
	СписокВозможныхГруппировок.ДобавитьЗначение("НаправлениеИспользования", "Направление использования");
	СписокВозможныхГруппировок.ДобавитьЗначение("ОбъектУчета", "Объект учета");
	СписокВозможныхГруппировок.ДобавитьЗначение("Материал", "Материал");
	
КонецПроцедуры // ПриОткрытии()                                                    

//******************************************************************************
Процедура ПриВыбореЗакладки(Номер, Значение)                                    

	Если Значение = "Параметры" Тогда
		
		// при переходе на первую закладку отразим на ней состояние выбранных условий формирования регистра
		Форма.ИспользоватьСлой("Параметры, Основной", 2);

		Если глНовыеПравилаВеденияНУ(КонДата) = 1 Тогда
			Форма.НаправленияИспользованияФильтр.Заголовок(СостояниеОтбора(СписокНаправленийИспользования2003));
		
		Иначе
			Форма.НаправленияИспользованияФильтр.Заголовок(СостояниеОтбора(СписокНаправленийИспользования));
			
		КонецЕсли;

	ИначеЕсли Значение = "Направления использования" Тогда

		Если глНовыеПравилаВеденияНУ(КонДата) = 1 Тогда
			Форма.ИспользоватьСлой("НаправленияИспользования2003, Основной", 2);
			
		Иначе
			Форма.ИспользоватьСлой("НаправленияИспользования, Основной", 2);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры