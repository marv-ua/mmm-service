Перем Год;
Перем МаксимальнаяВеличина;
Перем ОбработчикСообщений;
Перем ДатаАктуальности;
Перем ТекущаяЗакладка;
Перем ФормированиеФайла; 

//переменные для отчетности с 2005 года
Перем ИНН;
Перем НаименованиеНалоговогоАгента;
Перем ТелефонОрганизации;
Перем ДатаФормированияФайла;
Перем КодИФНС;
Перем ДолжностьОтправителя;
Перем ФИОИсполнителя; 
Перем НомерДокументаВПачке; 
Перем ОтчетныйГод;
Перем ОтправительЮрЛицо;  
Перем ФамилияПредпринимателя;
Перем ИмяПредпринимателя;
Перем ОтчествоПредпринимателя;
Перем ИНННалоговогоАгента;

//для справки 
Перем ДатаФормированияСправки;

Перем ВычетыСотрудниковПоНДФЛ;
Перем ВидыВычетов;


///////////////////////////////////////////////////////////////////////////////                                                                            
// ВСПОМОГАТЕЛЬНЫЕ ПРОЦЕДУРЫ

//******************************************************************************
//	глПолучитьТаблицуИсторииРеквизитов(Объект,ДатаНачала,ДатаОкончания,Реквизиты)
//
//	Параметры:
//		Объект			- элемент справочника
//		ДатаНачала		- дата начала периода выборки периодических значений
//		ДатаОкончания	- дата окончания периода выборки периодических значений
//		Реквизиты		- строка, список реквизитов через запятую
//
//	Возвращаемое значение:
//		таблица значений периодических реквизитов элемента справочника Объект
//
Функция глПолучитьТаблицуИсторииРеквизитов(Объект,ДатаНачала=0,ДатаОкончания=0,Реквизиты="", НеУчитыватьНоль=0)
	
	История = СоздатьОбъект("Периодический");	// объект периодический
	ТЗ = СоздатьОбъект("ТаблицаЗначений");		// возвращаемая таблица
	ТЗ.НоваяКолонка("Дата","Дата");
	ТЗ.НоваяКолонка("Документ","Документ");
	СписокСистемный = СоздатьОбъект("СписокЗначений");
	
	// если передали справочник, тогда заполним историю его реквизитов
	Если (ПустоеЗначение(Объект)=0)и(ТипЗначения(Объект)=11) Тогда

		мдОбъект = Метаданные.Справочник(Объект.Вид());
		Если ПустоеЗначение(Реквизиты)=0 Тогда
			СписокРеквизитов = глРазложить(Реквизиты);
			Для Номер = 1 по СписокРеквизитов.РазмерСписка() Цикл
				мдРеквизит  = мдОбъект.Реквизит(СписокРеквизитов.ПолучитьЗначение(Номер));
				Если мдРеквизит.Выбран()=1 Тогда
					Если мдРеквизит.Периодический=1 Тогда
						ТЗ.НоваяКолонка(мдРеквизит.Идентификатор)
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		Иначе
			СписокРеквизитов = СоздатьОбъект("СписокЗначений");
			Для Номер = 1 по мдОбъект.Реквизит() Цикл
				Если мдОбъект.Реквизит(Номер).Периодический=1 Тогда
					ТЗ.НоваяКолонка(мдОбъект.Реквизит(Номер).Идентификатор);
					СписокРеквизитов.ДобавитьЗначение(мдОбъект.Реквизит(Номер).Идентификатор);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;

		// если передана конкретная дата начала выборки периодических реквизитов
		// ее необходимо включить в таблицу 
		Если ПустоеЗначение(ДатаНачала)=0 Тогда
			ТЗ.НоваяСтрока();
			ТЗ.Дата = ДатаНачала;
			СписокСистемный.ДобавитьЗначение(ДатаНачала);
		КонецЕсли;
		История.ИспользоватьОбъект(,Объект);
		Если ПустоеЗначение(ДатаОкончания)=1 Тогда
			История.ВыбратьЗначения(ДатаНачала)
		Иначе
			История.ВыбратьЗначения(ДатаНачала,ДатаОкончания)
		КонецЕсли;
		Пока История.ПолучитьЗначение()=1 Цикл
			ИмяРеквизита = История.ТекущийРеквизит();
			Если СписокРеквизитов.НайтиЗначение(ИмяРеквизита)>0 Тогда
				СистемноеЗначение = ""+История.ДатаЗнач+ЗначениеВСтрокуВнутр(История.ТекущийДокумент());
				НомерСтроки = СписокСистемный.НайтиЗначение(СистемноеЗначение);
				Если НомерСтроки=0 Тогда
					ТЗ.НоваяСтрока();
					ТЗ.Дата = История.ДатаЗнач;
					ТЗ.Документ = История.ТекущийДокумент();
					СписокСистемный.ДобавитьЗначение(СистемноеЗначение);
					НомерСтроки = СписокСистемный.РазмерСписка();
				КонецЕсли;
				ТЗ.УстановитьЗначение(НомерСтроки,ИмяРеквизита,История.Значение);
			КонецЕсли;
		КонецЦикла;

		// отсортируем таблицу по дате и документу
		ТЗ.Сортировать("Дата+,Документ+",1);
		
		КоличествоКолонок = ТЗ.КоличествоКолонок();
		
		// если была выбрана дата начала, то в этом случае необходимо первую строку заполнить
		// значениями периодических реквизитов, полученных на эту дату
		Если ПустоеЗначение(ДатаНачала)=0 Тогда
			Для НомерКолонки = 3 по КоличествоКолонок Цикл
				Если ТипЗначения(ТЗ.ПолучитьЗначение(1,НомерКолонки))=0 Тогда
					История.ИспользоватьОбъект(ТЗ.ПолучитьПараметрыКолонки(НомерКолонки),Объект);
					Если НеУчитыватьНоль = 0 Тогда
						ТЗ.УстановитьЗначение(1,НомерКолонки,История.ЗначениеНаДату(ДатаНачала));
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		Иначе
			Если ТЗ.КоличествоСтрок()>0 Тогда
				Для НомерКолонки = 3 по КоличествоКолонок Цикл
					Значение = ТЗ.ПолучитьЗначение(1,НомерКолонки);
					Если ТипЗначения(Значение)=0 Тогда
						Тип = мдОбъект.Реквизит(ТЗ.ПолучитьПараметрыКолонки(НомерКолонки)).Тип;
						Если Тип="Число" Тогда  
							Если НеУчитыватьНоль = 0 Тогда
								ТЗ.УстановитьЗначение(1,НомерКолонки,Число(Значение));
							КонецЕсли;
						ИначеЕсли Тип="Дата" Тогда
							ТЗ.УстановитьЗначение(1,НомерКолонки, Дата(Значение))
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
		
		// начиная со второй строки, по каждой колонке (с третьей до конца),
		// смотрим если значение не определено, то копируем с предыдущей строки
		Для НомерСтроки = 2 по ТЗ.КоличествоСтрок() Цикл
			Для НомерКолонки = 3 по КоличествоКолонок Цикл
				Если ТипЗначения(ТЗ.ПолучитьЗначение(НомерСтроки,НомерКолонки))=0 Тогда
					ТЗ.УстановитьЗначение(НомерСтроки,НомерКолонки,ТЗ.ПолучитьЗначение(НомерСтроки-1,НомерКолонки))
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат ТЗ

КонецФункции	// глПолучитьТаблицуИсторииРеквизитов

//*****************************************************************************
// Функция глЧислоВФорматеПользователя()
//
// Параметры
//
// Возвращаемое значение
//		число в формате пользователя
//
// Описание       
//
Функция глЧислоВФорматеПользователя(ПростоЧисло,Длина = 15,Точность = 2)
	Если (Длина = 15) и (Точность = 2) Тогда
		Возврат СокрЛП(Формат(ПростоЧисло,"Ч15.2. "));
	Иначе
		Возврат СокрЛП(Формат(ПростоЧисло,"Ч" + СокрЛП(Строка(Длина) + "." + Строка(Точность) + ". ")));
	КонецЕсли;
КонецФункции // глЧислоВФорматеПользователя

//******************************************************************************
//	глПодборПоСотрудникам(КонтекстФормы)
//
//	Параметры:
//		КонтекстФормы - контекст формы (документа, справочника, ...), где осуществляется подбор.
//
//	Описание:
//		Открывает справочник Сотрудники для подбора, если это возможно.
//
Процедура глПодборПоСотрудникам(КонтекстФормы)

	Если КонтекстФормы.Форма.МодальныйРежим()=1 Тогда
		Предупреждение("Невозможно открыть подбор в модальном режиме!",10);
	Иначе
		КонтекстФормы.ОткрытьПодбор("Справочник.Сотрудники","ДляВыбора",,1);
	КонецЕсли;

КонецПроцедуры	// глПодборПоСотрудникам

//******************************************************************************
// глУдалитьСтрокуИзСписка(Объект)
//
// Параметры:
//		Объект - список значений
//
// Вызывается из формул элементов диалога:
//		Удалить
//  
// Описание:
//		Удаляет текущую строку из списка; если список пуст, либо
//		текущая строка не выставлена - удаления не происходит
//
Процедура глУдалитьСтрокуИзСписка(Объект)
    
	Если (Объект.РазмерСписка() > 0) и (Объект.ТекущаяСтрока() > 0) Тогда
		Объект.УдалитьЗначение(Объект.ТекущаяСтрока());	
	КонецЕсли;	
	
КонецПроцедуры // глУдалитьСтрокуИзСписка()

//******************************************************************************
//	глОчистить(Объект)
//
//	Параметры:
//		Объект - контекст формы, таблица значений, список значений
//
//	Описание:
//		Удаляет все строки табличной части документа, если передан контекст документа
//		Удаляет все строки таблицы значений, если передана таблица значений
//		Удаляет все элементы списка значений, если передан список значений
//		Вызывается из диалогов по кнопке "Очистить"
//
Процедура глОчистить(Объект)
	Если ТипЗначенияСтр(Объект)="СписокЗначений" Тогда
		// если передали список значений
		Если Объект.РазмерСписка()>0 Тогда
			Если Вопрос("Список будет очищен, а существующие строки удалены."
						"Продолжить?","Да+Нет")="Да" Тогда
				Объект.УдалитьВсе();
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли ТипЗначения(Объект)=100 Тогда
		// если передали таблицу значений или контекст документа
		Если ТипЗначенияСтр(Объект)<>"ТаблицаЗначений" Тогда
			Если Объект.Форма.ТолькоПросмотр() = 1 Тогда // документ, открытый только для чтения - делать ничего нельзя
		        Возврат
		    КонецЕсли;
		КонецЕсли;
		Если Объект.КоличествоСтрок()>0 Тогда
			Если Вопрос(?(ТипЗначенияСтр(Объект)="ТаблицаЗначений","Таблица","Табличная часть документа")
						+" будет очищена, а существующие строки удалены."
						"Продолжить?","Да+Нет")="Да" Тогда
				Объект.УдалитьСтроки();
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры	// глОчистить

//******************************************************************************
//	глСортироватьСотрудниковВФормеОтчета()
//
//	Параметры:
//		СписокСотрудников - контрол формы отчета со списком сотрудников
// 
//	Вызывается из форм отчетов, которые готовятся по списку сотрудников (по кнопке Сортировать)
//
//	Описание:
//		Запрос типа сортировки и сортировка сотрудников в спсике значений 
//		(который представляет собой контрол формы отчета)
//
Процедура глСортироватьСотрудниковВФормеОтчета(СписокСотрудников)
	Перем Способ;

	// текущий сотрудник (для позиционирования после сортировки)
	ТекущийСотр = "";
	Если СписокСотрудников.ТекущаяСтрока()>0 Тогда
		ТекущийСотр = СписокСотрудников.ПолучитьЗначение(СписокСотрудников.ТекущаяСтрока());
	КонецЕсли;
	
	СпособыСортировки = СоздатьОбъект("СписокЗначений");
	СпособыСортировки.ДобавитьЗначение("ФизЛицо+", "По ФИО");
	СпособыСортировки.ДобавитьЗначение("ТН+", "По табельному номеру (коду)");
	Если СпособыСортировки.ВыбратьЗначение(Способ,,,,1) <> 1 Тогда
		Возврат;
	КонецЕсли;
	Если Способ = "ФизЛицо+" Тогда
		СписокСотрудников.Сортировать();
	Иначе
		ТаблФизЛиц = СоздатьОбъект("ТаблицаЗначений");
		ТаблФизЛиц.НоваяКолонка(,"Строка",10,,,,,);
		ТаблФизЛиц.НоваяКолонка(,"Справочник.Сотрудники",,,,,,);
		Для Номер = 1 по СписокСотрудников.РазмерСписка() Цикл
			Сотр = СписокСотрудников.ПолучитьЗначение(Номер);
            ТаблФизЛиц.НоваяСтрока();
			ТаблФизЛиц.УстановитьЗначение(Номер,1,Сотр.Код);
			ТаблФизЛиц.УстановитьЗначение(Номер,2,Сотр);
		КонецЦикла;
		ТаблФизЛиц.Сортировать("1");
		СписокСотрудников.УдалитьВсе();
		Для Сч=1 По ТаблФизЛиц.КоличествоСтрок() Цикл
			Сотр = ТаблФизЛиц.ПолучитьЗначение(Сч,2);
			СписокСотрудников.ДобавитьЗначение(Сотр,""+Сотр);
		КонецЦикла;
	КонецЕсли;
	Если ТекущийСотр<>"" Тогда
		СписокСотрудников.ТекущаяСтрока(СписокСотрудников.НайтиЗначение(ТекущийСотр));
	КонецЕсли;
	
КонецПроцедуры   // глСортироватьСотрудниковВФормеОтчета

//******************************************************************************
//	глСложитьКолонкиТаблицыЗначений(ИсходнаяТаблица,СписокКолонокДляСумм,СписокНеСуммовыхКолонок,ИмяПервойКолонки = "",ИмяИтоговойКолонки  = "",ТипДанных = "Число",Знак = "+")
//
//	Параметры:
//		ИсходнаяТаблица - таблица, по которой суммируем   
//		СписокКолонокДляСумм - строка значений , где через "," указаны колонки по которым производиться суммирование
//		СписокНеСуммовыхКолонок - Колонки которые переходят с Исходной таблици и с которыми не происходит никаких действий
//		ИмяПервойКолонки - Идентификатор старых колонкок пререходящих в возращаемою таблицу    
//						по умолчанию "ПерваяКонока" 
//		ИмяИтоговойКолонки - Идентификатор суммовой колонки возвращаемой таблицы
//						по умолчанию "ИтоговаяКолонка"
//		ТипДанных - тип данных. Может принимать значение "Число" или "Строка"
//		Знак - знак действия над колонками (имеет смысл, только если ,ТипДанных = "Число")  
//		"+" - сложение
//		"*" - умножение   
//
//	Возвращаемое значение:
//		Таблица значений которая содержит в одном из столбцов общий итог по всему
//		списку колонок для сумм
//                                                                  
//	Описание:
//  
//
Функция глСложитьКолонкиТаблицыЗначений(ИсходнаяТаблица,СписокКолонокДляСумм,СписокНеСуммовыхКолонок,ИмяИтоговойКолонки  = "",ТипДанных = "Число",Знак = "+") Экспорт
		
	Если ИмяИтоговойКолонки  = "" Тогда
		ИмяИтоговойКолонки  = "ИтоговаяКолонка";
	КонецЕсли;        
	
	СписокКолонокДляСумм = глРазложить(СписокКолонокДляСумм);
	
	СписокНеСуммовыхКолонок = глРазложить(СписокНеСуммовыхКолонок);
	
	ВозвращаемаяТаблица = СоздатьОбъект("ТаблицаЗначений");         
	
	Для СчК = 1 По СписокНеСуммовыхКолонок.РазмерСписка() Цикл
		ИмяКолонки = СписокНеСуммовыхКолонок.ПолучитьЗначение(СчК);
		ВозвращаемаяТаблица.НоваяКолонка(ИмяКолонки);
	КонецЦикла;
	Если ТипДанных = "Число" Тогда
		ВозвращаемаяТаблица.НоваяКолонка(ИмяИтоговойКолонки,"Число",17,2); 
	Иначе                                                                  
		ВозвращаемаяТаблица.НоваяКолонка(ИмяИтоговойКолонки,"Строка"); 
	КонецЕсли;
	ВсегоКолонок = СчК;
	
	ИсходнаяТаблица.ВыбратьСтроки();
	Пока ИсходнаяТаблица.ПолучитьСтроку() = 1 Цикл
				
		Если ТипДанных = "Число" Тогда
			Если Знак = "+" Тогда
				Сумма = 0;
			ИначеЕсли Знак = "*" Тогда
				Сумма = 1;
			КонецЕсли;					
		ИначеЕсли ТипДанных = "Строка" Тогда
			Сумма = "";
		КонецЕсли;
		
		Для СчК = 1 По СписокКолонокДляСумм.РазмерСписка() Цикл
			
			Колонка = СписокКолонокДляСумм.ПолучитьЗначение(СчК);  
			Если ТипДанных = "Число" Тогда
				Если Знак = "+" Тогда
					Сумма = Сумма + ИсходнаяТаблица.ПолучитьЗначение(ИсходнаяТаблица.НомерСтроки,Колонка);
				ИначеЕсли Знак = "*" Тогда                                                                
					Сумма = Сумма * ИсходнаяТаблица.ПолучитьЗначение(ИсходнаяТаблица.НомерСтроки,Колонка);
				КонецЕсли;                      
			ИначеЕсли ТипДанных = "Строка" Тогда
				Сумма = Сумма + СокрЛП(Строка(ИсходнаяТаблица.ПолучитьЗначение(ИсходнаяТаблица.НомерСтроки,Колонка)));	
			КонецЕсли;  
			
		КонецЦикла;
		
		ВозвращаемаяТаблица.НоваяСтрока();
		Для СчК = 1 По СписокНеСуммовыхКолонок.РазмерСписка() Цикл
			ИмяКолонки = СписокНеСуммовыхКолонок.ПолучитьЗначение(СчК);
			ВозвращаемаяТаблица.УстановитьЗначение(ВозвращаемаяТаблица.НомерСтроки,СчК,ИсходнаяТаблица.ПолучитьЗначение(ИсходнаяТаблица.НомерСтроки,ИмяКолонки));		
		КонецЦикла;
		ВозвращаемаяТаблица.УстановитьЗначение(ВозвращаемаяТаблица.НомерСтроки,ВсегоКолонок,Сумма);
		
	КонецЦикла; 
	
	Возврат ВозвращаемаяТаблица;
	
КонецФункции //глСложитьКолонкиТаблицыЗначений()   

//******************************************************************************
// глВСуммуИзСтроки_НДФЛ(ДоходыВычетыНалогиСотрудников,Колонка,Слагаемое_1,Слагаемое_2,Слагаемое_3,Слагаемое_4,СтрокаМесяца)
//
// Параметры:


//  СтрокаСумм= "Сумма1; Сумма2; Сумма3; Сумма4;"
//
// Описание:
//  раскладывает строку на суммы и складывает их
//

Функция глВСуммуИзСтроки_НДФЛ(СтрокаСумм) Экспорт
	//разложим и сложим строку в шестой колонке
	СписокИзЧетырех = глРазложить(СтрокаСумм, ";");
	РазмерСписка = СписокИзЧетырех.РазмерСписка();
	Составл_1 = ?(РазмерСписка < 1,0,Число(СписокИзЧетырех.ПолучитьЗначение(1)));
	Составл_2 = ?(РазмерСписка < 2,0,Число(СписокИзЧетырех.ПолучитьЗначение(2)));
	Составл_3 = ?(РазмерСписка < 3,0,Число(СписокИзЧетырех.ПолучитьЗначение(3)));
	Составл_4 = ?(РазмерСписка < 4,0,Число(СписокИзЧетырех.ПолучитьЗначение(4)));
	Возврат Составл_1+Составл_2+Составл_3+Составл_4; 
КонецФункции //глВСуммуИзСтроки_НДФЛ

//******************************************************************************
// глСтрокаНаписанаПоРусски(СтрокаПараметр)
//
// Параметры:
//		СтрокаПараметр - строка, проверяемая строка.
//
// Возвращаемое значение:
//		1 - строка состоит из допустимых символов
//		0 - в строке встречаются недопустимые символы
//
// Описание:
//		Строке проверяется на наличие только русских букв; кроме того,
//		допускаются пробелы и дефис
//
Функция глСтрокаНаписанаПоРусски(Знач СтрокаПараметр) Экспорт
	//если получили реквизит справочника - подстрахуемся
	СтрокаПараметр = СокрЛП(СтрокаПараметр);	
    
	СписокДопустимыхЗначений = СоздатьОбъект("СписокЗначений");
	СписокДопустимыхЗначений.ДобавитьЗначение(184); 
	СписокДопустимыхЗначений.ДобавитьЗначение(168);
	СписокДопустимыхЗначений.ДобавитьЗначение(45);
	СписокДопустимыхЗначений.ДобавитьЗначение(46);
	СписокДопустимыхЗначений.ДобавитьЗначение(32);
	СписокДопустимыхЗначений.ДобавитьЗначение(48);
	СписокДопустимыхЗначений.ДобавитьЗначение(49);
	СписокДопустимыхЗначений.ДобавитьЗначение(50);
	СписокДопустимыхЗначений.ДобавитьЗначение(51);
	СписокДопустимыхЗначений.ДобавитьЗначение(52);
	СписокДопустимыхЗначений.ДобавитьЗначение(53);
	СписокДопустимыхЗначений.ДобавитьЗначение(54);
	СписокДопустимыхЗначений.ДобавитьЗначение(55);
	СписокДопустимыхЗначений.ДобавитьЗначение(56);
	СписокДопустимыхЗначений.ДобавитьЗначение(57);
	
	Для Сч=1 По СтрДлина(СтрокаПараметр) Цикл
		Код = КодСимв(Сред(СтрокаПараметр,Сч));
		Если (Код<192) И (СписокДопустимыхЗначений.Принадлежит(Код) = 0) Тогда
			Возврат 0;
		КонецЕсли;
	КонецЦикла;
	
	Возврат 1;
	
КонецФункции // глСтрокаНаписанаПоРусски()

//******************************************************************************
// ДобавитьДоходВТаблицу()
//
Процедура ДобавитьДоходВТаблицу(Доходы, ПоляКарточки, НомерМесяца, ИмяКодаДохода, НомерЯчейкиСуммыДохода, ИмяКодаВычета, НомерЯчейкиСуммыВычета)
	
	ВидыРасчетов = СоздатьОбъект("ТаблицаЗначений");
	ВидыРасчетов.НоваяКолонка("Число");
	ВидыРасчетов.НоваяКолонка();
	
    Доходы.НоваяСтрока();
	НомерДохода = Доходы.НомерСтроки;
	
	СуммаДохода = 0;
	СуммаВычета = 0;
	
	Для ТекНомерМесяца = 1 по НомерМесяца Цикл
		Если ПустоеЗначение(НомерЯчейкиСуммыДохода) = 0 Тогда
			ИмяСуммыДохода = "П" + глДополнитьСтроку(ТекНомерМесяца + НомерЯчейкиСуммыДохода, 3);
		    СуммаДохода = СуммаДохода + ПоляКарточки.Получить(ИмяСуммыДохода);
		КонецЕсли;
	
		Если ПустоеЗначение(НомерЯчейкиСуммыВычета) = 0 Тогда
			ИмяСуммыВычета = "П" + глДополнитьСтроку(ТекНомерМесяца + НомерЯчейкиСуммыВычета, 3);
			СуммаВычета = СуммаВычета + ПоляКарточки.Получить(ИмяСуммыВычета);
		КонецЕсли;
	КонецЦикла;
	
	Если СуммаДохода <> 0 Тогда
		Если ПустоеЗначение(ИмяКодаДохода) = 0 Тогда
			Доходы.УстановитьЗначение(НомерДохода, 1, Прав(ПоляКарточки.Получить(ИмяКодаДохода), 4));    
		КонецЕсли;
		
		Доходы.УстановитьЗначение(НомерДохода, 2, СуммаДохода);
	КонецЕсли;
	
	Если СуммаВычета <> 0 Тогда
		Если ПустоеЗначение(ИмяКодаВычета) = 0 Тогда
			Доходы.УстановитьЗначение(НомерДохода, 3, Прав(ПоляКарточки.Получить(ИмяКодаВычета), 4));
		КонецЕсли;
		
		Доходы.УстановитьЗначение(НомерДохода, 4, СуммаВычета);
	КонецЕсли;
	
	Доходы.УстановитьЗначение(НомерДохода, 7, ВидыРасчетов);
	
КонецПроцедуры // ДобавитьДоходВТаблицу()               

//******************************************************************************
// глСобратьДанныеДляНДФЛВыбор(ДоходыВычетыНалогиСотрудников,ОбобщенныйСотрудник,ДатаАктуальности,Форма)
//
// Параметры:
//  СписокСотрудников - список сотрудников
//  ДатаАктуальности - дата, <ОписаниеПараметра>.
//	Форма - контекст формы, в которой вызвана процедура, необязательный параметр
//
// Возвращаемое значение:
//      число 1 или 0 - удалось (не удалось) собрать данные в таблицу
//
// Описание:
//	Собирает данные по НДФЛ в таблицу ДоходыВычетыНалогиСотрудников и возвращает 1 или 0 в зависимости от удачности сбора
//
Функция глСобратьДанныеДляНДФЛВыбор(ДоходыВычетыНалогиСотрудников,СписокСотрудников,ДатаАктуальности,Форма="")
	
	Перем СуммыВычетов[20]; 
	Перем ВычетыТекущие[20]; 
	Перем ЗачтеноПоДивидендам[12];
	
	Год = СпЛет.ПолучитьЗначение(СпЛет.ТекущаяСтрока());
	
	//  проинициализируем выходную таблицу значений
	ДоходыВычетыНалогиСотрудников=СоздатьОбъект("ТаблицаЗначений");
	//  1-ая колонка (строка, 12) - ключевое поле для поиска данных; 
	//	состоит из 10 символов табельного номера сотрудника и 2-х символов месяца. 
	ДоходыВычетыНалогиСотрудников.НоваяКолонка(,"Строка",12);
	//	2-ая колонка содержит таблицу доходов  
	//	имеет 7 колонок: код дохода, размер дохода, код вычета, размер вычета,размер дохода из справочника, размер вычета из справочника и
	//	в седьмой колонке - таблица сумм "СписокСуммПоВР", из которых собрана сумма текущего дохода (первая колонка - сумма, вторая колонка - ВР)
	ДоходыВычетыНалогиСотрудников.НоваяКолонка(,"ТаблицаЗначений");
	//  3-ая колонка содержит список значений из трех значений: 
	//	первое значение		- список сумм стандартных вычетов, за месяц, указанный в первой колонке "верхней" таблицы, нарастающим итогом с начала года; в представлении содержится код вычета.
	//	второе значение		- суммы облагаемой базы нарастающим итогом с начала года без учета имущественных вычетов ("бывшая" колонка 13)
	//	третье значение		- размер примененных имущественных вычетов с кодом 311 нарастающим итогом с начала года, за месяц, указанный в первой колонке "верхней" таблицы;
	//	четвертое значение	- размер примененных имущественных вычетов с кодом 312 нарастающим итогом с начала года, за месяц, указанный в первой колонке "верхней" таблицы;
	//  
	ДоходыВычетыНалогиСотрудников.НоваяКолонка(,"СписокЗначений");
	//  4,5  колонки содержат суммы НДФЛ исчисленного (по трем ставкам),
	//	нарастающим итогом с начала года, собранного по периоду действия.
	//  7,8  колонки содержат суммы НДФЛ исчисленного (по трем ставкам),
	//	нарастающим итогом с начала года, собранного по периоду регистрации.
	//  10,11 колонки содержат суммы НДФЛ удержанного (по трем ставкам),
	//	нарастающим итогом с начала года, собранного по периоду регистрации.
	//  13,14 колонки содержат суммы облагаемой базы (обычная и дивиденты),
	//	нарастающим итогом с начала года.
	//  16,17 колонки содержат суммы переданные на взыскание в ИМНС 
	//	нарастающим итогом с начала года. 
	//  6-ая, 9-ая, 12-ая, 15-ая, 18-ая - это строки из 4-х чисел
	Для Сч = 1 По 5 Цикл
		ДоходыВычетыНалогиСотрудников.НоваяКолонка(,"Число",15,2);
		ДоходыВычетыНалогиСотрудников.НоваяКолонка(,"Число",15,2);
		//строка из 4-х чисел Формата 15.2, разделенных ";" 4* ((15+1(для "точки")+2)+1(для "точки с запятой")) = 76
		//6-ая кол 	Сч=1: 4 величины НДФЛ исчисл. по ставке 35% по периоду действия
		//9-ая кол 	Сч=2: 4 величины НДФЛ исчисл. по ставке 35% по периоду рег.
		//12-ая кол Сч=3: 4 величины НДФЛ уд. по ставке 35% по периоду действия
		//15-ая кол Сч=4: 4 величины облагаемой базы по ставке 35%
		//18-ая кол Сч=5: 4 величины НДФЛ по ставке 35%, переданных на взыскание в ИМНС
		ДоходыВычетыНалогиСотрудников.НоваяКолонка(,"Строка",76);
	КонецЦикла;
	//  19-ая колонка содержит совокупный доход для исчисления вычетов
	ДоходыВычетыНалогиСотрудников.НоваяКолонка(,"Число",15,2);
	//  20-ая колонка содержит сумму вычетов, неиспользованных с начала года по текущий месяц (для расчетов от обратного)
	ДоходыВычетыНалогиСотрудников.НоваяКолонка(,"Число",15,2);
	//  21,22 и 23-я колонки содержат суммы НДФЛ исчисленного (по трем ставкам),
	//	нарастающим итогом с начала года - исчисленного для налоговой отчетности
	//  23-я - это строка из 4-х чисел
	ДоходыВычетыНалогиСотрудников.НоваяКолонка(,"Число",15,2);
	ДоходыВычетыНалогиСотрудников.НоваяКолонка(,"Число",15,2);
	ДоходыВычетыНалогиСотрудников.НоваяКолонка(,"Строка",76); //23-я колонка - строка из 4-х чисел
	//  4+20,5+20 и 6+20-ая колонки содержат суммы НДФЛ исчисленного (по трем ставкам),
	//	нарастающим итогом с начала года, собранного только из справочников(чтобы иметь суммы,введенные непосредственно в карточку).
	//  7+20,8+20 и 9+20-ая колонки содержат суммы НДФЛ исч по периоду регистрации (по трем ставкам),
	//	нарастающим итогом с начала года, собранного только из справочников(чтобы иметь суммы,введенные непосредственно в карточку).
	//  10+20,11+20 и 12+20-ая колонки содержат суммы НДФЛ уд (по трем ставкам),
	//	нарастающим итогом с начала года, собранного только из справочников(чтобы иметь суммы,введенные непосредственно в карточку).
	
	//  33,34 и 35-ая колонки (аналог 21,22 и 23) содержат суммы НДФЛ исч. для отч-ти (по трем ставкам),
	//	нарастающим итогом с начала года, собранного только из справочников(чтобы иметь суммы,введенные непосредственно в карточку).
	//  16+20,17+20 и 18+20-ая колонки содержат суммы на взыскание (по трем ставкам),
	//	нарастающим итогом с начала года, собранного только из справочников(чтобы иметь суммы,введенные непосредственно в карточку).
	//  39,40 и 41-ая колонки содержат суммы облагаемой базы (по трем ставкам),
	//	нарастающим итогом с начала года по данным, введенным в карточку вручную.
	Для Сч = 1 По 6 Цикл
		ДоходыВычетыНалогиСотрудников.НоваяКолонка(,"Число",15,2);
		ДоходыВычетыНалогиСотрудников.НоваяКолонка(,"Число",15,2);
		//строка из 4-х чисел Формата 15.2, разделенных ";" 4* ((15+1(для "точки")+2)+1(для "точки с запятой")) = 76
		//6+20-ая кол 	Сч=1: 4 величины НДФЛ исчисл. по ставке 35% по периоду действия 	по справочникам
		//9+20-ая кол 	Сч=2: 4 величины НДФЛ исчисл. по ставке 35% по периоду рег. 		по справочникам
		//12+20-ая кол 	Сч=3: 4 величины НДФЛ уд. по ставке 35% по периоду действия 		по справочникам
		//35-ая кол 	Сч=4: 4 величины НДФЛ исч. по ставке 35% для отчетности     		по справочникам
		//18+20-ая кол  Сч=5: 4 величины НДФЛ по ставке 35%, переданных на взыскание в ИМНС по справочникам
		//41-ая кол  	Сч=6: 4 величины облагаемой базы по ставке 35%		 				по справочникам
		ДоходыВычетыНалогиСотрудников.НоваяКолонка(,"Строка",76);
	КонецЦикла; 
	
	// 42 (3 раздел) строка "Возвращена налоговым агентом излишне удержанная сумма налога"
	ДоходыВычетыНалогиСотрудников.НоваяКолонка(,"Число",15,2);
	// 43(4 раздел) строка "Возвращена налоговым агентом излишне удержанная сумма налога"
	ДоходыВычетыНалогиСотрудников.НоваяКолонка(,"Число",15,2);
	// 44(5 раздел) строка, стрка из 4-чисел "Возвращена налоговым агентом излишне удержанная сумма налога"
	ДоходыВычетыНалогиСотрудников.НоваяКолонка(,"Строка",76);
	
	// соберем данные о вычетах сотрудников
	ТаблицаПоказателей = СоздатьОбъект("ТаблицаЗначений");
	
	Сотр = СоздатьОбъект("Справочник.Сотрудники");				

	Карточки = СоздатьОбъект("Справочник.КарточкиУчетаДоходов");
	ИмущВычеты = СоздатьОбъект("Справочник.ИмущественныеВычеты");
	
	СписокКодовДоходов35 = СоздатьОбъект("СписокЗначений");
	СписокКодовДоходов35.ДобавитьЗначение("1210");
	СписокКодовДоходов35.ДобавитьЗначение("2610");
	СписокКодовДоходов35.ДобавитьЗначение("2740");
	СписокКодовДоходов35.ДобавитьЗначение("3020");
	
	НомерСотрудника = 0;
	
	Для НомСтроки = 1 по СписокСотрудников.РазмерСписка() Цикл
		Сотрудник = СписокСотрудников.ПолучитьЗначение(НомСтроки);
		КодСотрудника = глПолучитьУникальныйКодСотрудника(Сотрудник);
		НомерСотрудника = НомерСотрудника + 1;
        
		Для НомерМесяца = 1 по 12 Цикл
			ДоходыВычетыНалогиСотрудников.НоваяСтрока();
			ДоходыВычетыНалогиСотрудников.УстановитьЗначение((НомерСотрудника - 1) * 12 + НомерМесяца, 1, КодСотрудника + глДополнитьСтроку(НомерМесяца,2));
		КонецЦикла;
		
		Если ПустоеЗначение(Сотрудник) = 1 Тогда
		    Продолжить;
			
		ИначеЕсли Сотрудник.ЭтоГруппа() = 1 Тогда
			Продолжить;
		КонецЕсли;
		
		Карточки.ИспользоватьВладельца(Сотрудник.ТекущийЭлемент());
		Если Карточки.НайтиПоКоду(Год) = 0 Тогда
		    Продолжить;
		КонецЕсли;
		
		НалоговаяКарточка = Карточки.СписокПолейНалоговойКарточки;
		Если ПустоеЗначение(НалоговаяКарточка) = 1 Тогда
		    Продолжить;
		КонецЕсли;
		
		ПоляКарточки = ЗначениеИзСтроки(Карточки.СписокПолейНалоговойКарточки);
		Если ПоляКарточки.РазмерСписка() = 0 Тогда
		    Продолжить;
		КонецЕсли;
		
		Доходы35 = Карточки.СписокПолейНалоговойКарточкиПоМатВыгоде;
		Если ПустоеЗначение(Доходы35) = 0 Тогда
		    СписокДоходов35 = ЗначениеИзСтроки(Карточки.СписокПолейНалоговойКарточкиПоМатВыгоде);
			
		Иначе
			СписокДоходов35 = СоздатьОбъект("СписокЗначений");
		КонецЕсли;
		
		Сумма311 = 0;
		Сумма312 = 0;
		ИмцщВычет311 = "";
		ИмцщВычет312 = "";
		
		ВычетыСотрудниковПоНДФЛ.ИспользоватьВладельца(Сотрудник);
		ВычетыСотрудниковПоНДФЛ.ВыбратьЭлементы(); 
		
		Пока ВычетыСотрудниковПоНДФЛ.ПолучитьЭлемент() = 1 Цикл
			
			Если ВычетыСотрудниковПоНДФЛ.ПометкаУдаления() = 1 Тогда
				Продолжить;
			КонецЕсли;
			
			Если (СокрЛП(ВычетыСотрудниковПоНДФЛ.ВидВычета.КодДляОтчетности2007) <> "311")
			И (СокрЛП(ВычетыСотрудниковПоНДФЛ.ВидВычета.КодДляОтчетности2007) <> "312" ) Тогда
				Продолжить;						
			КонецЕсли;
			
			ВычетПредоставлялся = 0;
			Если ПустоеЗначение(ВычетыСотрудниковПоНДФЛ.ДатаНачала) = 1 Тогда
				ВычетПредоставлялся = 0;							
			Иначе
				Если ВычетыСотрудниковПоНДФЛ.ДатаНачала > Дата("31.12." + Год) Тогда
					ВычетПредоставлялся = 0;
				Иначе
					Если ПустоеЗначение(ВычетыСотрудниковПоНДФЛ.ДатаОкончания) = 1 Тогда
						ВычетПредоставлялся = 1;
					Иначе
						Если ВычетыСотрудниковПоНДФЛ.ДатаОкончания < Дата("01.01." + Год) Тогда
							ВычетПредоставлялся = 0;
						Иначе
							ВычетПредоставлялся = 1;
						КонецЕсли;
						
					КонецЕсли;
				КонецЕсли;
				
			КонецЕсли;
			
			Если ВычетПредоставлялся = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			Если (СокрЛП(ВычетыСотрудниковПоНДФЛ.ВидВычета.КодДляОтчетности2007) = "311") Тогда
				Сумма311 = Сумма311 + ВычетыСотрудниковПоНДФЛ.Сумма;
				ИмцщВычет311 = ВычетыСотрудниковПоНДФЛ.ТекущийЭлемент();
				
			Иначе
				Сумма312 = Сумма312 + ВычетыСотрудниковПоНДФЛ.Сумма;
				ИмцщВычет312 = ВычетыСотрудниковПоНДФЛ.ТекущийЭлемент();
				
			КонецЕсли;
			
		КонецЦикла;
		
		СтатусНеРезидента=Сотрудник.Статус.Получить(КонГода(ДатаАктуальности));
		Резидент=?(СтатусНеРезидента=1,1,2);
		ОблагаемаяБазаПред = 0;
		НалоговаяБаза13Пред = 0;
		НалогИсчисленный13Пред = 0;
		НалогУдержанный13Пред = 0;
		// Сведений о доходах по каждому коду дохода (колонка 2)
		Для НомерМесяца = 1 по 12 Цикл
			НомерСтрокиСотрудника = (НомерСотрудника - 1) * 12 + НомерМесяца;
			
			Доходы = СоздатьОбъект("ТаблицаЗначений");
			Доходы.НоваяКолонка("_1", "Строка", 4);
			Доходы.НоваяКолонка("_2", "Число");
			Доходы.НоваяКолонка("_3", "Строка", 4);
			Доходы.НоваяКолонка("_4", "Число");
			Доходы.НоваяКолонка("_5", "Число");
			Доходы.НоваяКолонка("_6", "Число");
			Доходы.НоваяКолонка("_7", "Число");
			Доходы.НоваяКолонка("_8");
			
			ДобавитьДоходВТаблицу(Доходы, ПоляКарточки, НомерМесяца, "П003",  3, "П068",  68);
			ДобавитьДоходВТаблицу(Доходы, ПоляКарточки, НомерМесяца, "П016", 16, "П081",  81);
			ДобавитьДоходВТаблицу(Доходы, ПоляКарточки, НомерМесяца, "П029", 29, "П094",  94);
			ДобавитьДоходВТаблицу(Доходы, ПоляКарточки, НомерМесяца, "П042", 42, "П107", 107);
			ДобавитьДоходВТаблицу(Доходы, ПоляКарточки, НомерМесяца, "П055", 55, "П120", 120);
			
			СуммаДивидендов = ПоляКарточки.Получить("П" + глДополнитьСтроку(Строка(163+НомерМесяца), 3));
			СуммаВычетов	= СуммаДивидендов - ПоляКарточки.Получить("ОбДив" + глДополнитьСтроку(НомерМесяца, 2));
			Если СуммаДивидендов <> 0 Тогда
				ВидыРасчетов = СоздатьОбъект("ТаблицаЗначений");
				ВидыРасчетов.НоваяКолонка("Число");
				ВидыРасчетов.НоваяКолонка();
				
			    Доходы.НоваяСтрока();
				НомерДохода = Доходы.НомерСтроки;
				Доходы.УстановитьЗначение(НомерДохода, 1, "1010");
				Доходы.УстановитьЗначение(НомерДохода, 2, СуммаДивидендов);
				Доходы.УстановитьЗначение(НомерДохода, 4, СуммаВычетов);
				Доходы.УстановитьЗначение(НомерДохода, 7, ВидыРасчетов);
			КонецЕсли;
			
			КоличествоДоходов = СписокДоходов35.РазмерСписка();
			Если КоличествоДоходов > 0 Тогда
				Для НомерДоходов = 1 по КоличествоДоходов Цикл
					КодДохода = "";
					ТаблицаПоказателей.Очистить();
					НомерДохода = НомерДоходов;
					СписокДоходов35.ПолучитьЗначение(НомерДохода, КодДохода).Выгрузить(ТаблицаПоказателей);
					
					Если НомерМесяца <= ТаблицаПоказателей.КоличествоСтрок() Тогда
						ТаблицаПоказателей.ПолучитьСтрокуПоНомеру(НомерМесяца);
						СуммаДохода = ТаблицаПоказателей.СуммаДохода;
						Если СуммаДохода <> 0 Тогда
						    ВидыРасчетов = СоздатьОбъект("ТаблицаЗначений");
							ВидыРасчетов.НоваяКолонка("Число");
							ВидыРасчетов.НоваяКолонка();
							
						    Доходы.НоваяСтрока();
							НомерДохода = Доходы.НомерСтроки;
							Доходы.УстановитьЗначение(НомерДохода, 1, КодДохода);
							Доходы.УстановитьЗначение(НомерДохода, 2, СуммаДохода);
							Доходы.УстановитьЗначение(НомерДохода, 7, ВидыРасчетов);
							
							Если КодДохода = "2740" Тогда
								Если ТаблицаПоказателей.СуммаВычета > 0 Тогда
									Доходы.УстановитьЗначение(НомерДохода, 3, "505");
									Доходы.УстановитьЗначение(НомерДохода, 4, ТаблицаПоказателей.СуммаВычета);
								КонецЕсли;
							КонецЕсли;
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			
			ДобавитьДоходВТаблицу(Доходы, ПоляКарточки, НомерМесяца, "П275", 275, , );
			ДобавитьДоходВТаблицу(Доходы, ПоляКарточки, НомерМесяца, "П288", 288, , );
			ДобавитьДоходВТаблицу(Доходы, ПоляКарточки, НомерМесяца, "П301", 301, , );
			
			ДоходыВычетыНалогиСотрудников.УстановитьЗначение(НомерСтрокиСотрудника, 2, Доходы);
			
			// Сведения о вычетах (колонка 3)
			ЗначениеКолонки3 = СоздатьОбъект("СписокЗначений");
			
			// Стандартные вычеты
			СтандартныеВычеты = СоздатьОбъект("СписокЗначений");
			СтандартныйВычетВсего = 0; 
			
			Если Год < 2009 Тогда
				Для НомерВычета = 1 по 7 Цикл
					СуммаВычета = 0;
					Для ТекНомерМесяца = 1 по НомерМесяца Цикл
						СуммаВычетаЗаМесяц = ПоляКарточки.Получить("СВМес" + НомерВычета + глДополнитьСтроку(ТекНомерМесяца, 2));
						СуммаВычета = СуммаВычета + СуммаВычетаЗаМесяц;
					КонецЦикла;
					СтандартныйВычетВсего = СтандартныйВычетВсего + СуммаВычета;
					
					Если СуммаВычета <> 0 Тогда
						СтандартныеВычеты.ДобавитьЗначение(СуммаВычета, "10" + НомерВычета);
					КонецЕсли;
				КонецЦикла;
			Иначе
				Для НомерВычета = 3 по 13 Цикл
					Если (НомерВычета >=6) И (НомерВычета <=7) Тогда
						Продолжить;
					КонецЕсли;
					
					СуммаВычета = 0;
					Для ТекНомерМесяца = 1 по НомерМесяца Цикл
						СуммаВычетаЗаМесяц = ПоляКарточки.Получить("СВМес" + НомерВычета + глДополнитьСтроку(ТекНомерМесяца, 2));
						СуммаВычета = СуммаВычета + СуммаВычетаЗаМесяц;
					КонецЦикла;
					СтандартныйВычетВсего = СтандартныйВычетВсего + СуммаВычета;
					
					ПрефиксНомераВычета = "";
					Если НомерВычета < 10 Тогда
						ПрефиксНомераВычета = "0";
					КонецЕсли;
					
					Если СуммаВычета <> 0 Тогда
						СтандартныеВычеты.ДобавитьЗначение(СуммаВычета, "1" + ПрефиксНомераВычета + НомерВычета);
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			ЗначениеКолонки3.ДобавитьЗначение(СтандартныеВычеты);
			
			// Облагаемая база (без учета имущественных вычетов)
			НомерПоследнегоМесяца = ПоляКарточки.Получить("ПоследнийМесяц");
			// Облагаемая база (без учета имущественных вычетов)			
			Если НомерМесяца > НомерПоследнегоМесяца Тогда
				ОблагаемаяБаза = ПоляКарточки.Получить("ГДБезВ" + глДополнитьСтроку(НомерПоследнегоМесяца, 2)) - СтандартныйВычетВсего;
				
			Иначе   
				ОблагаемаяБаза = ПоляКарточки.Получить("ГДБезВ" + глДополнитьСтроку(НомерМесяца, 2)) - СтандартныйВычетВсего;					
			КонецЕсли;                                                                                                    
			                                                                                    
			Если (ПоляКарточки.Получить("ГДБезВ" + глДополнитьСтроку(НомерМесяца, 2)))>0 Тогда		
				ОблагаемаяБазаПред = ОблагаемаяБаза;				
			Иначе
				ОблагаемаяБаза = ОблагаемаяБазаПред;
			КонецЕсли;
			
			ЗначениеКолонки3.ДобавитьЗначение(ОблагаемаяБаза);
			
			// Имущественные вычеты
			ИмущественныйВычет311 = 0;
			ИмущественныйВычет312 = 0;
			Для ТекНомерМесяца = 1 по НомерМесяца Цикл
				Вычет311заМесяц = ПоляКарточки.Получить("ИВычет1_" + глДополнитьСтроку(ТекНомерМесяца, 2));
				ИмущественныйВычет311 = ИмущественныйВычет311 + Вычет311заМесяц;
				
				Вычет312заМесяц = ПоляКарточки.Получить("ИВычет2_" + глДополнитьСтроку(ТекНомерМесяца, 2));
				ИмущественныйВычет312 = ИмущественныйВычет312 + Вычет312заМесяц;
			КонецЦикла;
			ЗначениеКолонки3.ДобавитьЗначение(ИмущественныйВычет311);
			ЗначениеКолонки3.ДобавитьЗначение(ИмущественныйВычет312);
			
			Если Сумма311 = 0 Тогда
			    ЗначениеКолонки3.ДобавитьЗначение("");
				
			Иначе
				Уведомление = СоздатьОбъект("СписокЗначений");
				Уведомление.ДобавитьЗначение("01.01." + Год);
				Уведомление.ДобавитьЗначение("01.01." + Год);
				Уведомление.ДобавитьЗначение(ИмцщВычет311.Сумма);
				Уведомление.ДобавитьЗначение(ИмцщВычет311.НомерУведомления);
				Уведомление.ДобавитьЗначение(ИмцщВычет311.ДатаУведомления);
				Уведомление.ДобавитьЗначение(ИмцщВычет311.КодФНС);
				ЗначениеКолонки3.ДобавитьЗначение(Уведомление);
			КонецЕсли;
			
			Если Сумма312 = 0 Тогда
			    ЗначениеКолонки3.ДобавитьЗначение("");
				
			Иначе
				Уведомление = СоздатьОбъект("СписокЗначений");
				Уведомление.ДобавитьЗначение("01.01." + Год);
				Уведомление.ДобавитьЗначение("01.01." + Год);
				Уведомление.ДобавитьЗначение(ИмцщВычет312.Сумма);
				Уведомление.ДобавитьЗначение(ИмцщВычет312.НомерУведомления);
				Уведомление.ДобавитьЗначение(ИмцщВычет312.ДатаУведомления);
				Уведомление.ДобавитьЗначение(ИмцщВычет312.КодФНС);
				ЗначениеКолонки3.ДобавитьЗначение(Уведомление);
			КонецЕсли;
			
			// Стандартные вычеты, на которые сотрудник имел право
			СтандартныеВычеты = СоздатьОбъект("СписокЗначений");
			СуммаВычета101 = 0;
			СуммаВычета102 = 0;
			СуммаВычета103 = 0;
			СуммаВычета104 = 0;
			СуммаВычета105 = 0;
			СуммаВычета106 = 0;
			СуммаВычета107 = 0;
			СуммаВычета108 = 0;
			СуммаВычета109 = 0;
			СуммаВычета110 = 0;
			СуммаВычета111 = 0;
			СуммаВычета112 = 0;
			СуммаВычета113 = 0;

			
			Для ТекНомерМесяца = 1 по НомерМесяца Цикл
				
				ВаловойДоход_СНачалаГода = ?(ДатаГод(глДатаПриема(Сотрудник))=Год,	Сотрудник.ВаловойДоход_СНачалаГода, 0);
				
				Если ТекНомерМесяца > НомерПоследнегоМесяца Тогда
					ОблагаемаяБазаВТекМесяце = ВаловойДоход_СНачалаГода +  ПоляКарточки.Получить("ГДБезВ" + глДополнитьСтроку(НомерПоследнегоМесяца, 2));
					
				Иначе
					ОблагаемаяБазаВТекМесяце =ВаловойДоход_СНачалаГода + ПоляКарточки.Получить("ГДБезВ" + глДополнитьСтроку(ТекНомерМесяца, 2));
				КонецЕсли;
				
				КонецМесяца = КонМесяца("01." + глДополнитьСтроку(ТекНомерМесяца, 2) + "." + Год);
				
				Если глСотрудникЧислитсяРаботающим(Сотрудник, КонецМесяца) = 0 Тогда
					Продолжить;
				КонецЕсли; 
				
				ВычетыСотрудниковПоНДФЛ.ИспользоватьВладельца(Сотрудник);
				ВычетыСотрудниковПоНДФЛ.ВыбратьЭлементы(); 
				
				Пока ВычетыСотрудниковПоНДФЛ.ПолучитьЭлемент() = 1 Цикл
					
					Если ВычетыСотрудниковПоНДФЛ.ПометкаУдаления() = 1 Тогда
						Продолжить;
					КонецЕсли;
					
					ВычетПредоставлялся = 0;
					Если ПустоеЗначение(ВычетыСотрудниковПоНДФЛ.ДатаНачала) = 1 Тогда
						ВычетПредоставлялся = 0;							
					Иначе
						Если ВычетыСотрудниковПоНДФЛ.ДатаНачала > КонецМесяца Тогда
							ВычетПредоставлялся = 0;
						Иначе
							Если ПустоеЗначение(ВычетыСотрудниковПоНДФЛ.ДатаОкончания) = 1 Тогда
								ВычетПредоставлялся = 1;
							Иначе
								Если ВычетыСотрудниковПоНДФЛ.ДатаОкончания < НачМесяца(КонецМесяца) Тогда
									ВычетПредоставлялся = 0;
								Иначе
									ВычетПредоставлялся = 1;
								КонецЕсли;
								
							КонецЕсли;
						КонецЕсли;
						
					КонецЕсли;
					
					Если ВычетПредоставлялся = 0 Тогда
						Продолжить;
					КонецЕсли;
					
					Если (СокрЛП(ВычетыСотрудниковПоНДФЛ.ВидВычета.КодДляОтчетности2007) = "311")
					ИЛИ (СокрЛП(ВычетыСотрудниковПоНДФЛ.ВидВычета.КодДляОтчетности2007) = "312" ) Тогда
						Продолжить;						
					КонецЕсли;
					
					РазмерВычета = ВычетыСотрудниковПоНДФЛ.ВидВычета.Сумма.Получить(КонецМесяца);
					ПределДоходов = ВычетыСотрудниковПоНДФЛ.ВидВычета.ПределДоходов.Получить(КонецМесяца);
					
					Если ПределДоходов > 0 Тогда							
						Вычеты = РазмерВычета*?(ОблагаемаяБазаВТекМесяце<=ПределДоходов,1,0);
					Иначе
						Вычеты = РазмерВычета;
					КонецЕсли;
					
					
					Если (СокрЛП(ВычетыСотрудниковПоНДФЛ.ВидВычета.КодДляОтчетности2007) = "103") Тогда
						СуммаВычета103 = СуммаВычета103 + Вычеты;
						
					ИначеЕсли (СокрЛП(ВычетыСотрудниковПоНДФЛ.ВидВычета.КодДляОтчетности2007) = "104") Тогда
						СуммаВычета104 = СуммаВычета104 + Вычеты;
						
					ИначеЕсли (СокрЛП(ВычетыСотрудниковПоНДФЛ.ВидВычета.КодДляОтчетности2007) = "105") Тогда
						СуммаВычета105= СуммаВычета105+ Вычеты;					
						
					ИначеЕсли (СокрЛП(ВычетыСотрудниковПоНДФЛ.ВидВычета.КодДляОтчетности2009) = "108") Тогда
						Если Год < 2009 Тогда
							СуммаВычета101 = СуммаВычета101 + Вычеты;
						Иначе
							СуммаВычета108 = СуммаВычета108 + Вычеты;
						КонецЕсли;
						
					ИначеЕсли (СокрЛП(ВычетыСотрудниковПоНДФЛ.ВидВычета.КодДляОтчетности2009) = "109") Тогда
						Если Год < 2009 Тогда
							СуммаВычета106 = СуммаВычета106 + Вычеты;
						Иначе
							СуммаВычета109 = СуммаВычета109 + Вычеты;
						КонецЕсли;
						
					ИначеЕсли (СокрЛП(ВычетыСотрудниковПоНДФЛ.ВидВычета.КодДляОтчетности2009) = "110") Тогда
						Если Год < 2009 Тогда
							СуммаВычета102 = СуммаВычета102 + Вычеты;
						Иначе
							СуммаВычета110 = СуммаВычета110 + Вычеты;
						КонецЕсли;
						
					ИначеЕсли (СокрЛП(ВычетыСотрудниковПоНДФЛ.ВидВычета.КодДляОтчетности2009) = "112") Тогда
						Если Год < 2009 Тогда
							СуммаВычета107 = СуммаВычета107 + Вычеты;
						Иначе
							СуммаВычета112 = СуммаВычета112 + Вычеты;
						КонецЕсли;
						
					ИначеЕсли (СокрЛП(ВычетыСотрудниковПоНДФЛ.ВидВычета.КодДляОтчетности2009) = "111") Тогда
						Если Год >= 2009 Тогда
							СуммаВычета111 = СуммаВычета111 + Вычеты;					
						КонецЕсли;
						
					ИначеЕсли (СокрЛП(ВычетыСотрудниковПоНДФЛ.ВидВычета.КодДляОтчетности2009) = "113") Тогда
						Если Год >= 2009 Тогда
							СуммаВычета113 = СуммаВычета113 + Вычеты;					
						КонецЕсли;					
					КонецЕсли;  
					
				КонецЦикла;
				
			КонецЦикла;
			
			Если СуммаВычета101 <> 0 Тогда
				СтандартныеВычеты.ДобавитьЗначение(СуммаВычета101, "101");
			КонецЕсли;
			
			Если СуммаВычета102 <> 0 Тогда
				СтандартныеВычеты.ДобавитьЗначение(СуммаВычета102, "102");
			КонецЕсли;
			
			Если СуммаВычета103 <> 0 Тогда
				СтандартныеВычеты.ДобавитьЗначение(СуммаВычета103, "103");
			КонецЕсли;
			
			Если СуммаВычета104 <> 0 Тогда
				СтандартныеВычеты.ДобавитьЗначение(СуммаВычета104, "104");
			КонецЕсли;
			
			Если СуммаВычета105 <> 0 Тогда
				СтандартныеВычеты.ДобавитьЗначение(СуммаВычета105, "105");
			КонецЕсли;
			
			Если СуммаВычета106 <> 0 Тогда
				СтандартныеВычеты.ДобавитьЗначение(СуммаВычета106, "106");
			КонецЕсли;
			
			Если СуммаВычета107 <> 0 Тогда
				СтандартныеВычеты.ДобавитьЗначение(СуммаВычета107, "107");
			КонецЕсли;
			
			Если СуммаВычета108 <> 0 Тогда
				СтандартныеВычеты.ДобавитьЗначение(СуммаВычета108, "108");
			КонецЕсли;
			
			Если СуммаВычета109 <> 0 Тогда
				СтандартныеВычеты.ДобавитьЗначение(СуммаВычета109, "109");
			КонецЕсли;
			
			Если СуммаВычета110 <> 0 Тогда
				СтандартныеВычеты.ДобавитьЗначение(СуммаВычета110, "110");
			КонецЕсли;
			
			Если СуммаВычета111 <> 0 Тогда
				СтандартныеВычеты.ДобавитьЗначение(СуммаВычета111, "111");
			КонецЕсли;
			
			Если СуммаВычета112 <> 0 Тогда
				СтандартныеВычеты.ДобавитьЗначение(СуммаВычета112, "112");
			КонецЕсли;
			
			Если СуммаВычета113 <> 0 Тогда
				СтандартныеВычеты.ДобавитьЗначение(СуммаВычета113, "113");
			КонецЕсли;
			
			ЗначениеКолонки3.ДобавитьЗначение(СтандартныеВычеты);
			ДоходыВычетыНалогиСотрудников.УстановитьЗначение(НомерСтрокиСотрудника, 3, ЗначениеКолонки3);
				
			// Исчисленный, удержанный налог и т.д.
			Если Резидент = 1 Тогда
				НомерПоследнегоМесяца = ПоляКарточки.Получить("ПоследнийМесяц");
				Если НомерМесяца > НомерПоследнегоМесяца Тогда
				    НалоговаяБаза13 = ПоляКарточки.Получить("НБаза" + глДополнитьСтроку(НомерПоследнегоМесяца, 2));
					НалогИсчисленный13 = ПоляКарточки.Получить("НИ" + глДополнитьСтроку(НомерПоследнегоМесяца, 2));
					НалогУдержанный13 = ПоляКарточки.Получить("П" + глДополнитьСтроку(Строка(132+НомерПоследнегоМесяца), 3));
					
				Иначе
					НалоговаяБаза13 = ПоляКарточки.Получить("НБаза" + глДополнитьСтроку(НомерМесяца, 2));
					НалогИсчисленный13 = ПоляКарточки.Получить("НИ" + глДополнитьСтроку(НомерМесяца, 2));
					НалогУдержанный13 = ПоляКарточки.Получить("П" + глДополнитьСтроку(Строка(132+НомерМесяца), 3));

				КонецЕсли; 
				Если НомерМесяца > НомерПоследнегоМесяца Тогда
					Если НалоговаяБаза13 = 0 Тогда
						НалоговаяБаза13 = НалоговаяБаза13Пред;
					Иначе
						НалоговаяБаза13Пред = НалоговаяБаза13;
					КонецЕсли;
					Если НалогИсчисленный13 = 0 Тогда
						НалогИсчисленный13 = НалогИсчисленный13Пред;
					Иначе
						НалогИсчисленный13Пред = НалогИсчисленный13;
					КонецЕсли; 
					Если НалогУдержанный13 = 0 Тогда
						НалогУдержанный13 = НалогУдержанный13Пред;
					Иначе
						НалогУдержанный13Пред = НалогУдержанный13;
					КонецЕсли; 
				Иначе                                         
					НалоговаяБаза13Пред = НалоговаяБаза13;
					НалогИсчисленный13Пред = НалогИсчисленный13;
					НалогУдержанный13Пред = НалогУдержанный13;					
				КонецЕсли;				
			Иначе
				НалоговаяБаза13 = 0;
				НалогИсчисленный13 = 0;
				НалогУдержанный13 = 0;
				Для ТекНомерМесяца = 1 по НомерМесяца Цикл	
					НалоговаяБаза13 = НалоговаяБаза13 + ПоляКарточки.Получить("НБаза" + глДополнитьСтроку(ТекНомерМесяца, 2));
					НалогИсчисленный13 = НалогИсчисленный13 + ПоляКарточки.Получить("НИ" + глДополнитьСтроку(ТекНомерМесяца, 2));
					НалогУдержанный13 = НалогУдержанный13 + ПоляКарточки.Получить("П" + глДополнитьСтроку(Строка(132+ТекНомерМесяца), 3));
				КонецЦикла;
			КонецЕсли;
			
			Взыскание13 = 0;
			Возврат13 = 0;
			Взыскание9 = 0;
			Возврат9 = 0;
			
			НалоговаяБаза9 = 0;
			НалогИсчисленный9 = 0;
			НалогУдержанный9 = 0;
			
			Для ТекНомерМесяца = 1 по НомерМесяца Цикл
				НалоговаяБаза9 = НалоговаяБаза9 + ПоляКарточки.Получить("ОбДив" + глДополнитьСтроку(ТекНомерМесяца, 2));
				НалогИсчисленный9 = НалогИсчисленный9 + ПоляКарточки.Получить("НД6И" + глДополнитьСтроку(ТекНомерМесяца, 2));
				НалогУдержанный9 = НалогУдержанный9 + ПоляКарточки.Получить("П" + глДополнитьСтроку(Строка(175+ТекНомерМесяца), 3));
				
				Взыскание13 = Взыскание13 + ПоляКарточки.Получить("НалВзыск" + глДополнитьСтроку(ТекНомерМесяца, 2));
				Возврат13 = Возврат13 + ПоляКарточки.Получить("НалВозвр" + глДополнитьСтроку(ТекНомерМесяца, 2));
				Взыскание9 = Взыскание9 + ПоляКарточки.Получить("ДНалВзыск" + глДополнитьСтроку(ТекНомерМесяца, 2));
				Возврат9 = Возврат9 + ПоляКарточки.Получить("ДНалВозвр03" + глДополнитьСтроку(ТекНомерМесяца, 2));
			КонецЦикла;
			
			НалоговаяБаза35 = "";
			НалогИсчисленный35 = "";
			НалогУдержанный35 = "";
			Взыскание35 = "";
			Возврат35 = "";
			
			Для НомерДохода = 1 по 4 Цикл
				КодДохода = СписокКодовДоходов35.ПолучитьЗначение(НомерДохода);
				ЭлементСписка = СписокДоходов35.Получить(КодДохода);
				Если ПустоеЗначение(ЭлементСписка) = 1 Тогда
					НалоговаяБаза35 = НалоговаяБаза35 + "0;";
					НалогИсчисленный35 = НалогИсчисленный35 + "0;";
					НалогУдержанный35 = НалогУдержанный35 + "0;";
					Взыскание35 = Взыскание35 + "0;";
					Возврат35 = Возврат35 + "0;";
					
				Иначе
					ТаблицаПоказателей.Очистить();
					ЭлементСписка.Выгрузить(ТаблицаПоказателей);
					
					ТекНалогИсчисленный35 = 0;
					ТекНалогУдержанный35 = 0;
					ТекНалоговаяБаза35 = 0;
					ТекВзыскание35 = 0;
					ТекВозврат35 = 0;
					
					НомерМесяцаДляТаблицыПоказателей = Мин(НомерМесяца,  НомерПоследнегоМесяца, ТаблицаПоказателей.КоличествоСтрок());
					
					Для ТекНомерМесяца = 1 по НомерМесяцаДляТаблицыПоказателей Цикл
						ТекНалогИсчисленный35 = ТекНалогИсчисленный35 + ТаблицаПоказателей.ПолучитьЗначение(ТекНомерМесяца, "НИ");
						ТекНалогУдержанный35 = ТекНалогУдержанный35 + ТаблицаПоказателей.ПолучитьЗначение(ТекНомерМесяца, "НУ");
						ТекНалоговаяБаза35 = ТекНалоговаяБаза35 + ТаблицаПоказателей.ПолучитьЗначение(ТекНомерМесяца, "НБ");
						ТекВзыскание35 = ТекВзыскание35 + ТаблицаПоказателей.ПолучитьЗначение(ТекНомерМесяца, "Взыскание");
						ТекВозврат35 = ТекВозврат35 + ТаблицаПоказателей.ПолучитьЗначение(ТекНомерМесяца, "Возвращена");
					КонецЦикла;
					
					НалоговаяБаза35 = НалоговаяБаза35 + ТекНалоговаяБаза35 + ";";
					НалогИсчисленный35 = НалогИсчисленный35 + ТекНалогИсчисленный35 + ";";
					НалогУдержанный35 = НалогУдержанный35 + ТекНалогУдержанный35 + ";";
					Взыскание35 = Взыскание35 + ТекВзыскание35 + ";";
					Возврат35 = Возврат35 + ТекВозврат35 + ";";
				КонецЕсли;
			КонецЦикла;
			
			НалоговаяБаза35 = Лев(НалоговаяБаза35, СтрДлина(НалоговаяБаза35) - 1);
			НалогИсчисленный35 = Лев(НалогИсчисленный35, СтрДлина(НалогИсчисленный35) - 1);
			НалогУдержанный35 = Лев(НалогУдержанный35, СтрДлина(НалогУдержанный35) - 1);
			Взыскание35 = Лев(Взыскание35, СтрДлина(Взыскание35) - 1);
			Возврат35 = Лев(Возврат35, СтрДлина(Возврат35) - 1);
			
			
			ДоходыВычетыНалогиСотрудников.УстановитьЗначение(НомерСтрокиСотрудника, 4, НалогИсчисленный13);
			ДоходыВычетыНалогиСотрудников.УстановитьЗначение(НомерСтрокиСотрудника, 5, НалогИсчисленный9);
			ДоходыВычетыНалогиСотрудников.УстановитьЗначение(НомерСтрокиСотрудника, 6, НалогИсчисленный35);
			ДоходыВычетыНалогиСотрудников.УстановитьЗначение(НомерСтрокиСотрудника, 7, НалогИсчисленный13);
			ДоходыВычетыНалогиСотрудников.УстановитьЗначение(НомерСтрокиСотрудника, 8, НалогИсчисленный9);
			ДоходыВычетыНалогиСотрудников.УстановитьЗначение(НомерСтрокиСотрудника, 9, НалогИсчисленный35);
			ДоходыВычетыНалогиСотрудников.УстановитьЗначение(НомерСтрокиСотрудника, 10, НалогУдержанный13);
			ДоходыВычетыНалогиСотрудников.УстановитьЗначение(НомерСтрокиСотрудника, 11, НалогУдержанный9);
			ДоходыВычетыНалогиСотрудников.УстановитьЗначение(НомерСтрокиСотрудника, 12, НалогУдержанный35);
			ДоходыВычетыНалогиСотрудников.УстановитьЗначение(НомерСтрокиСотрудника, 13, НалоговаяБаза13);
			ДоходыВычетыНалогиСотрудников.УстановитьЗначение(НомерСтрокиСотрудника, 14, НалоговаяБаза9);
			ДоходыВычетыНалогиСотрудников.УстановитьЗначение(НомерСтрокиСотрудника, 15, НалоговаяБаза35);
			ДоходыВычетыНалогиСотрудников.УстановитьЗначение(НомерСтрокиСотрудника, 16, Взыскание13);
			ДоходыВычетыНалогиСотрудников.УстановитьЗначение(НомерСтрокиСотрудника, 17, Взыскание9);
			ДоходыВычетыНалогиСотрудников.УстановитьЗначение(НомерСтрокиСотрудника, 18, Взыскание35);
			ДоходыВычетыНалогиСотрудников.УстановитьЗначение(НомерСтрокиСотрудника, 21, НалогИсчисленный13);
			ДоходыВычетыНалогиСотрудников.УстановитьЗначение(НомерСтрокиСотрудника, 22, НалогИсчисленный9);
			ДоходыВычетыНалогиСотрудников.УстановитьЗначение(НомерСтрокиСотрудника, 23, НалогИсчисленный35);
			ДоходыВычетыНалогиСотрудников.УстановитьЗначение(НомерСтрокиСотрудника, 42, Возврат13);
			ДоходыВычетыНалогиСотрудников.УстановитьЗначение(НомерСтрокиСотрудника, 43, Возврат9);
			ДоходыВычетыНалогиСотрудников.УстановитьЗначение(НомерСтрокиСотрудника, 44, Возврат35);
			
			
		КонецЦикла;
	КонецЦикла;

	Возврат 1;
	
КонецФункции // глСобратьДанныеДляНДФЛВыбор()

///////////////////////////////////////////////////////////////////////////////                                                                            
// ПРОЦЕДУРЫ ПОДГОТОВКИ СВЕДЕНИЙ О ДОХОДАХ ФИЗ. ЛИЦ

//******************************************************************************
//	ИмяФайлаНастроек()
//
//	Параметры:
//		нет
// 
// 	Возвращаемое значение:
//		Строка - имя файла, в котором содержится настройка распределения форм СЗВ и АДВ по пачкам
//
//	Описание:
//		Функция формирует название файла. Применяется при восстановлении и записи настроек
//
Функция ИмяФайлаНастроек(ГодНастроек="") 
	Если ПустоеЗначение(ГодНастроек)=1 Тогда
		ГодНастроек=Год;    
	КонецЕсли;
	
	ИмяТекущегоФайлаНастроек = КаталогИБ()+"_"+"2НДФЛ_"+ГодНастроек+"_"+"ф4"+".nd";  
	
	Возврат ИмяТекущегоФайлаНастроек;
	
КонецФункции 
//******************************************************************************
//	СохранитьНастройки(ИмяФайлаНастроек)
//
//	Параметры:
//		ИмяФайлаНастроек - строка - имя файла для сохранения настроек
// 
// 	Возвращаемое значение:
//		нет
//
//	Описание:
//		Процедура записывает таблицу значений распределения перечисленного НДФЛ по сотрудника
// 		в файла для определенного года, 
//
Процедура СохранитьНастройки(ИмяФайлаНастроек)
	глСтатусСтрока(Контекст,"Сохраняется настройка распределения НДФЛ перечисленного по сотрудникам...");
	ФайлНастроек = СоздатьОбъект("Текст");
	//1-я строка
	//сохраним УникальныйИдентификатор
	СтрокаДляСохранения=УникальныйИдентификатор;
	ФайлНастроек.ДобавитьСтроку(СтрокаДляСохранения);
	
	глСтатусСтрока(Контекст,"");
КонецПроцедуры	// СохранитьНастройки()   

//******************************************************************************
//	ВосстановитьНастройки()
//
//	Параметры:
//		ИмяФайлаНастроек - строка - полное наименование файла настроек
// 
// 	Возвращаемое значение:
//		нет
//
//	Описание:
//		Процедура восстанавливает таблицу значений ранее сформированного распределения перечисленного НДФЛ по сотрудника
// 		из файла для определенного года
//
Процедура ВосстановитьНастройки(ИмяФайлаНастроек)
	глСтатусСтрока(Контекст,"Восстанавливается распределение НДФЛ перечисленного по сотрудникам...");
	Если ФС.СуществуетФайл(ИмяФайлаНастроек) =1 Тогда
		ФайлНастроек = СоздатьОбъект("Текст");
		ФайлНастроек.Открыть(ИмяФайлаНастроек);
		
		УникальныйИдентификатор=СОКРЛП(ФайлНастроек.ПолучитьСтроку(1));
		
	КонецЕсли; 
	
	глСтатусСтрока(Контекст,"");
	
КонецПроцедуры	// ВосстановитьНастройки()

//******************************************************************************
// УправлениеВидимостьюРеквизитов()
//
// Параметры:
//	
//
// 	Вызывается из формул элементов диалога:
//		
//
//	Описание:
//		
//
Процедура УправлениеВидимостьюРеквизитов() 
	
	Форма.Архивировать.Видимость(0); 
	Форма.ДатаСоставления.Видимость(1);
	Форма.ТекстДатаСоставления.Видимость(1);
	Форма.Исполнитель.Видимость(1);
	Форма.ТекстИсполнитель.Видимость(1);
	Форма.ТекстДолжностьИсполнителя.Видимость(1);
	Форма.УникальныйИдентификатор.Видимость(1);
	Форма.ТекстУникальныйИдентификатор.Видимость(1);
	Форма.КнопкаУникальныйИдентификатор.Видимость(1);
	
КонецПроцедуры //УправлениеВидимостьюРеквизитов

//******************************************************************************
//	ПриВыбореГода()
//
//	Параметры:
//		нет
//
//	Вызывается из формул элементов диалога:
//		СпЛет и ПриОткрытии
//
//	Описание:
//		Управляет видимостью элементов диалога:
//		"СпособВыборкиСотрудников1" и "Подразделение"
//
Процедура ПриВыбореГода()                                  
	
	БылГод=Год;
	Год = СпЛет.ПолучитьЗначение(СпЛет.ТекущаяСтрока());
	
	УправлениеВидимостьюРеквизитов();
	
	Если Год<>БылГод Тогда
	    Если БылГод>=2005 Тогда
	        //сохраним данные в файле 
			СохранитьНастройки(ИмяФайлаНастроек(БылГод));
		КонецЕсли;
		Если Год>=2005 Тогда
			ВосстановитьНастройки(ИмяФайлаНастроек(Год));    
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ПриВыбореГода()  

//******************************************************************************
// АдресСКодомРегиона(Адрес)
//
// Параметры:
//		Адрес - строка, адрес в формате ФНС
//
// Возвращаемое значение:
//		строка - преобразованный адрес
//  
// Описание:
//		Вместо наименования региона в строку адреса подставляется его код  
//
Функция АдресСКодомРегиона(Адрес)
	
	АдресСписком = глРазложить(СокрЛП(Адрес));
	КодРегиона = "";
	Регион = "";
	Если ПустоеЗначение(АдресСписком.ПолучитьЗначение(3)) = 0 Тогда
		Регион = АдресСписком.ПолучитьЗначение(3);
		
		Параметр = СоздатьОбъект("СписокЗначений");
		Параметр.Установить("Режим открытия", 1);
		Параметр.Установить("Вид объекта", "Регион");
		Параметр.Установить("Полный адрес", СокрЛП(Адрес));
		ФорматКлассификатора = ВосстановитьЗначение("ФорматКлассификатора");
		Если ПустоеЗначение(ФорматКлассификатора) = 1 Тогда
			ФорматКлассификатора = 1;
		КонецЕсли;
		Параметр.Установить("ФорматКлассификатора", ФорматКлассификатора);

		ОткрытьФормуМодально("Обработка.ВыборИзКлассификатораАдресов", Параметр);
		Если ТипЗначенияСтр(Параметр) = "СписокЗначений" Тогда
			КодРегиона = Лев(Параметр.Получить("Код региона"), 2);
		КонецЕсли;
	КонецЕсли;	
	НовыйАдрес=","+АдресСписком.ПолучитьЗначение(2)+","+СтрЗаменить(Лев(КодРегиона,2),"99","9901");
	Для Сч = 4 По АдресСписком.РазмерСписка() Цикл
		НовыйАдрес=НовыйАдрес+","+АдресСписком.ПолучитьЗначение(Сч);
	КонецЦикла;
	Возврат НовыйАдрес;
	
КонецФункции // АдресСКодомРегиона()  

//******************************************************************************
// СтрокаНаписанаРусскимиИлиЛатинскими()
//
// Параметры:
//  СтрокаПараметр - строка, проверяемая строка.
//
// Возвращаемое значение:
//		1 - строка состоит из допустимых символов
//		0 - в строке встречаются недопустимые символы
// 
// Описание:
//		Строка проверяется на наличие только русских и латинских букв;
//		кроме того,	допускаются дефис, "Ё", "ё".
//
Функция СтрокаНаписанаРусскимиИлиЛатинскими(Знач СтрокаПараметр)
	
	//если получили реквизит справочника - подстрахуемся
	СтрокаПараметр = СокрЛП(СтрокаПараметр);	

	Русские = 0;     
	КоличествоСимволов = СтрДлина(СтрокаПараметр);
	
	Если  КоличествоСимволов > 0 Тогда
		ПервыйСимвол = КодСимв(Лев(СтрокаПараметр,1)); 
		Если  (ПервыйСимвол >= 192) или (ПервыйСимвол = 184) или (ПервыйСимвол = 168) Тогда
			Русские = 1;
		КонецЕсли;
	КонецЕсли;
	
	СписокДопустимыхЗначений = СоздатьОбъект("СписокЗначений");
	СписокДопустимыхЗначений.ДобавитьЗначение(184);   // ё
	СписокДопустимыхЗначений.ДобавитьЗначение(168);   // Ё
	СписокДопустимыхЗначений.ДобавитьЗначение(45);   //  "-"

	Для Сч = 1 По КоличествоСимволов Цикл
		Код = КодСимв(Сред(СтрокаПараметр,Сч));   
		// Большие латинские буквы: 65 - 90
		// Маленькие латинские буквы: 97 - 122
		// Русские буквы: 192 и больше
		
		//русские:
		Если (Русские = 1) Тогда
			Если (СписокДопустимыхЗначений.Принадлежит(Код) = 0) и (Код < 192)  Тогда
				Возврат 0;
			КонецЕсли;

		// латинские:	
		Иначе 
			Если (Код <> 45) и 
			((Код < 65) или	(Код > 90) и (Код < 97) или (Код > 122))  Тогда    
				Возврат 0;
			КонецЕсли;
		КонецЕсли;
			
	КонецЦикла;
	
	Возврат 1;

КонецФункции // СтрокаНаписанаРусскимиИлиЛатинскими()

//******************************************************************************
//	Заполнить()
//
//	Параметры:
//		нет
//
//	Вызывается из формул элементов диалога:
//		Заполнить
//
//	Описание:
//		Заполняет список сотрудников
//
Процедура Заполнить()
	
	ДатаАктуальности = КонГода(Дата(СпЛет.ПолучитьЗначение(СпЛет.ТекущаяСтрока()),12,15));
	
	Параметры = СоздатьОбъект("СписокЗначений");
	Параметры.Установить("ДатаАктуальности",ДатаАктуальности);
	Параметры.Установить("Идентификатор","_ФИЛЬТР_СведенияВИМНС_"+ДатаАктуальности);
	ОткрытьФормуМодально("Обработка.ЗаполнитьСписокСотрудников",Параметры);
	Если ТипЗначенияСтр(Параметры)="ТаблицаЗначений" Тогда
		Если Сотрудники.РазмерСписка()>0 Тогда
			Если Вопрос("Перед заполнением список сотрудников будет очищен."
						"Продолжить?","Да+Нет")="Нет" Тогда
				Возврат
			КонецЕсли;
		КонецЕсли;
		Сотрудники.УдалитьВсе();
		Для Номер = 1 по Параметры.КоличествоСтрок() Цикл
			Сотр = Параметры.ПолучитьЗначение(Номер,"Сотрудник");
			Сотрудники.ДобавитьЗначение(Сотр);
		КонецЦикла;
		Если Сотрудники.РазмерСписка() > 0 Тогда
			Сотрудники.ТекущаяСтрока(1);
		КонецЕсли;
		СпособВыборкиСотрудников = ?((Сотрудники.РазмерСписка()>0) и (СпособВыборкиСотрудников = 1),2,СпособВыборкиСотрудников);
	КонецЕсли;
КонецПроцедуры	// Заполнить()

//******************************************************************************
//	СформироватьРеестр(ТаблицаРеестра)
//
//  Входные данные: ТаблицаРеестра - Таблица значений следующей структуры:
//  		
// Описание: Формирует отчет "Реестр" о выгруженных данных, 
//           если ТаблицаРеестра имеет другую структуру, то возникнет ошибка!
Процедура СформироватьРеестр(ТаблицаРеестра)
	Табл = СоздатьОбъект("Таблица");
	Табл.ИсходнаяТаблица("Реестр2005");
	                   
	Год = СпЛет.ПолучитьЗначение(СпЛет.ТекущаяСтрока());
	пРеестр="Реестр №"+НомерРеестра+" от "+Формат(ДатаСоставления,"Д(0)ДДММГГГГ")+" в "+ Константа.КодИМНС;  
	пНалоговыйАгент="Налоговый агент: "+СОКРЛП(Константа.НазваниеОрганизации);
	пИНННалоговогоАгента="ИНН налогового агента: "+СОКРЛП(Константа.ИННОрганизации);
	
	ГлБух=Константа.ГлБухгалтер.Получить(ДатаАктуальности).Наименование; 
	
	КоличествоДокументов = ТаблицаРеестра.КоличествоСтрок(); 
	пКоличествоДокументов="Количество представленных документов (Справок о доходах): "+КоличествоДокументов;
	
	Табл.ВывестиСекцию("Шапка");
	
	ИтогСуммаДохода=0;
	ИтогСуммаНалога=0;
	ИтогСуммаНалогаУд=0; 
	ИтогСуммаНалога13=0;
	ИтогСуммаНалогаУд13=0; 
	ИтогСуммаНалога9=0;
	ИтогСуммаНалогаУд9=0; 
	ИтогСуммаНалога30=0;
	ИтогСуммаНалогаУд30=0; 
	ИтогСуммаНалога35=0;
	ИтогСуммаНалогаУд35=0; 
	ТаблицаРеестра.ВыбратьСтроки();
	Пока ТаблицаРеестра.ПолучитьСтроку() = 1 Цикл 
		
		НомерДок		= ТаблицаРеестра.НомерСправки;
		Сотрудник		= ТаблицаРеестра.Сотрудник;
		 
		СуммаДохода		= ТаблицаРеестра.ОбщаяСуммаДохода;
		СуммаНалога		= ТаблицаРеестра.СуммаНалогаИсчисленного;
		СуммаНалогаУд	= ТаблицаРеестра.СуммаНалогаУдержанного;
		СтавкаНалога	= ТаблицаРеестра.СтавкаНалога;
		
		пСотрудник		= СОКРЛП(Сотрудник.Наименование);
		пСуммаДохода	= глЧислоВФорматеПользователя(СуммаДохода);
		пСуммаНалога	= глЧислоВФорматеПользователя(СуммаНалога,12,0);
		пСуммаНалогаУд	= глЧислоВФорматеПользователя(СуммаНалогаУд,12,0);
		
		пСтавка			= СтавкаНалога; 
		
		Табл.ВывестиСекцию("Строка"); 
		
		Если СтавкаНалога=13 Тогда
			ИтогСуммаНалога13=ИтогСуммаНалога13+СуммаНалога;
			ИтогСуммаНалогаУд13=ИтогСуммаНалогаУд13+СуммаНалогаУд; 
		ИначеЕсли (СтавкаНалога=9)  ИЛИ (СтавкаНалога=15) Тогда  
			ИтогСуммаНалога9=ИтогСуммаНалога9+СуммаНалога;
			ИтогСуммаНалогаУд9=ИтогСуммаНалогаУд9+СуммаНалогаУд; 
		ИначеЕсли СтавкаНалога=30 Тогда
			ИтогСуммаНалога30=ИтогСуммаНалога30+СуммаНалога;
			ИтогСуммаНалогаУд30=ИтогСуммаНалогаУд30+СуммаНалогаУд; 
		ИначеЕсли СтавкаНалога=35 Тогда	
			ИтогСуммаНалога35=ИтогСуммаНалога35+СуммаНалога;
			ИтогСуммаНалогаУд35=ИтогСуммаНалогаУд35+СуммаНалогаУд; 
		КонецЕсли; 
		
		ИтогСуммаДохода=ИтогСуммаДохода+СуммаДохода;
		ИтогСуммаНалога=ИтогСуммаНалога+СуммаНалога;
		ИтогСуммаНалогаУд=ИтогСуммаНалогаУд+СуммаНалогаУд;
		
	КонецЦикла;
	
	пИтогСуммаНалога13=глЧислоВФорматеПользователя(ИтогСуммаНалога13,12,0);
	пИтогСуммаНалогаУд13=глЧислоВФорматеПользователя(ИтогСуммаНалогаУд13,12,0);
	пИтогСуммаНалога9=глЧислоВФорматеПользователя(ИтогСуммаНалога9,12,0);
	пИтогСуммаНалогаУд9=глЧислоВФорматеПользователя(ИтогСуммаНалогаУд9,12,0);
	пИтогСуммаНалога30=глЧислоВФорматеПользователя(ИтогСуммаНалога30,12,0);
	пИтогСуммаНалогаУд30=глЧислоВФорматеПользователя(ИтогСуммаНалогаУд30,12,0);
	пИтогСуммаНалога35=глЧислоВФорматеПользователя(ИтогСуммаНалога35,12,0);
	пИтогСуммаНалогаУд35=глЧислоВФорматеПользователя(ИтогСуммаНалогаУд35,12,0);
	
	пИтогСуммаДохода=глЧислоВФорматеПользователя(ИтогСуммаДохода);
	пИтогСуммаНалога=глЧислоВФорматеПользователя(ИтогСуммаНалога,12,0);
	пИтогСуммаНалогаУд=глЧислоВФорматеПользователя(ИтогСуммаНалогаУд,12,0);
	
	пРуководитель= "/"+ СокрЛП(Константа.Руководитель.Получить(ТекущаяДата()).Наименование)+"/";
	
	Табл.ВывестиСекцию("Подвал");
	Табл.ТолькоПросмотр(1);
	Табл.Опции(0,0,0,0,"Реестр");
	Табл.ПараметрыСтраницы(,,,0,0,0,0,0,0);
	Табл.Показать("Реестр переданных документов"); 
	
КонецПроцедуры // СформироватьРеестр 

//******************************************************************************
//	ПолучитьФИОСотрудника
//

Процедура ПолучитьФИОСотрудника(НаименованиеСотрудника, Фамилия, Имя, Отчество = 0)
	// Выделим фамилию и имя
	Список = глРазложить(НаименованиеСотрудника," ");
	Фамилия = "";
	Если Список.РазмерСписка()  > 0 Тогда
		Фамилия = Список.ПолучитьЗначение(1);
	КонецЕсли;
	Имя = "";
	Отчество = "";
	Если Список.РазмерСписка() > 1 Тогда
		Имя  = Список.ПолучитьЗначение(2);   
	КонецЕсли;
	Если Список.РазмерСписка() > 2 Тогда
		Для Сч = 3 По Список.РазмерСписка() Цикл
			Отчество = Отчество+Список.ПолучитьЗначение(Сч);
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры // ПолучитьФИОСотрудника

//******************************************************************************
// Функция ДанныеЗаполненыВерно(СписокСотрудников)
//
//  Проверка данных на правильность и полноту заполнения.
Функция ДанныеЗаполненыВерно()
	
	ВерноЗаполнены = 1; 
	// Проверяем ИНН КПП
	КодИФНС = Константа.КодИМНС;
	ИНН = Константа.ИННОрганизации;
	Позиция = Найти(ИНН,"\");
	Позиция = ?(Найти(ИНН,"\") = 0,Найти(ИНН,"/") , Позиция);
	Если Позиция > 0 Тогда
		ИНН = Лев(ИНН,Позиция-1);
		КПП = Сред(Константа.ИННОрганизации, Позиция+1);
		Если (СтрДлина(СокрЛП(ИНН)) <> 10) или (СтрДлина(СокрЛП(КПП))<> 9) Тогда
			глДобавитьСообщение(ОбработчикСообщений, "Неверный код ИНН\КПП организации - "+ Константа.ИННОрганизации);
			ВерноЗаполнены = 0;
		КонецЕсли;
	Иначе
		КПП ="";
		Если СтрДлина(СокрЛП(ИНН)) <> 12 Тогда
			глДобавитьСообщение(ОбработчикСообщений, "Неверный код ИНН организации - " + ИНН);
			ВерноЗаполнены = 0;
		КонецЕсли;
		
		// Выделим фамилию и имя
		Фамилия = "";
		Имя = "";
		ПолучитьФИОСотрудника(Константа.НазваниеОрганизации, Фамилия, Имя);
		Если (ПустаяСтрока(Фамилия)=1) или (ПустаяСтрока(Имя)=1) Тогда
			глДобавитьСообщение(ОбработчикСообщений, "Должны быть указаны, как минимум, фамилия и имя физического лица-работодателя!");
			ВерноЗаполнены = 0;
		КонецЕсли;
	КонецЕсли;    
	
	// Проверим данные исполнителя
	Если ПустоеЗначение(Исполнитель)=1 Тогда
		глДобавитьСообщение(ОбработчикСообщений,"Не указан исполнитель!");
		ВерноЗаполнены = 0;
	Иначе	
		
		Фамилия = "";
		Имя = "";
		ПолучитьФИОСотрудника(Исполнитель.Наименование, Фамилия, Имя);
		Если (ПустаяСтрока(Фамилия)=1) или (ПустаяСтрока(Имя)=1) Тогда
			глДобавитьСообщение(ОбработчикСообщений, "Должны быть указаны, как минимум, фамилия и имя исполнителя!");
			ВерноЗаполнены = 0;
		КонецЕсли;
		
		ДолжностьОтправителя=Лев(СокрЛ(Исполнитель.Должность),45); 
		Если ПустоеЗначение(ДолжностьОтправителя)=1 Тогда 
			глДобавитьСообщение(ОбработчикСообщений, "Не задана должность исполнителя!");
			ВерноЗаполнены = 0;
		КонецЕсли;
	КонецЕсли;             
	
	Если СтрДлина(СокрЛП(Константа.НазваниеОрганизации)) = 0 Тогда
		глДобавитьСообщение(ОбработчикСообщений, " Не заполнено название организации");
		ВерноЗаполнены = 0;
	КонецЕсли;      
	
	Если СтрДлина(СокрЛП(КодИФНС)) <> 4 Тогда
		глДобавитьСообщение(ОбработчикСообщений, "Неверный код ИФНС - "+КодИФНС);
		ВерноЗаполнены = 0;
	КонецЕсли;
	
	Возврат ВерноЗаполнены;
	
КонецФункции // ДанныеЗаполненыВерно	
            
//******************************************************************************
//
//
Функция НайтиПервыйСуществующийФайл(СписокВозможныхМест)
	Для Сч = 1 По СписокВозможныхМест.РазмерСписка() Цикл
		ПолноеИмя	=	СписокВозможныхМест.ПолучитьЗначение(Сч);
		Если Фс.СуществуетФайл(ПолноеИмя) = 1 Тогда	Возврат(ПолноеИмя)	КонецЕсли;
	КонецЦикла;
	Возврат("");
КонецФункции		//	НайтиПервыйСуществующийФайл  

//******************************************************************************
// ФорматироватьЧисло()
//
// Параметры:
//	
//
// Возвращаемое значение:
//		
//
//	Описание:
//		
//                                             
Функция ФорматироватьЗначение(ЗначениеДляФорматирования,Точность=0) 
	
	Если (ПустоеЗначение(ЗначениеДляФорматирования)=1) и (ФормированиеФайла = 0) Тогда
	    Возврат " ";
	КонецЕсли;
	
	Если ТипЗначения(ЗначениеДляФорматирования)=1 Тогда 
		//число
		Если Точность=0 Тогда 
			Возврат СокрЛП(Формат(ЗначениеДляФорматирования,"Ч15.0."));
		Иначе 
			ФорматнаяСтрока=""+"Ч15."+Строка(Точность)+"."+"";
			Возврат СокрЛП(Формат(ЗначениеДляФорматирования,ФорматнаяСтрока));
		КонецЕсли;
	ИначеЕсли ТипЗначения(ЗначениеДляФорматирования)=3 Тогда
		Возврат	Формат(ЗначениеДляФорматирования,"ДДДММГГГГ");
	Иначе
		Возврат СОКРЛП(ЗначениеДляФорматирования);
	КонецЕсли;
    
КонецФункции //ФорматироватьЧисло

//******************************************************************************
// Описание:
//		Рекурсивно записывается узел в файл, с форматированием выводимого текста.
//
//
Процедура ЗаписатьУзелВФайл(РезФайл, ХМЛУзел, СтрокаТабуляции)
	КоличПодчиненных = ХМЛУзел.КоличествоПодчиненных();
	Если КоличПодчиненных = 1 Тогда
		КоличПодчиненныхПодчиненного = ХМЛУзел.ПолучитьПодчиненныйПоНомеру(1).КоличествоПодчиненных();
	Иначе
		КоличПодчиненныхПодчиненного = 1;
	КонецЕсли;
	Если КоличПодчиненныхПодчиненного = 0 Тогда
		ЗаписываемаяСтрока = СтрокаТабуляции + ХМЛУзел.ПредставлениеXML();          
		РезФайл.ЗаписатьСтроку(ЗаписываемаяСтрока);
	Иначе   
		ЗаписываемаяСтрока = СтрокаТабуляции + "<" + ХМЛУзел.Наименование + ">";       
		РезФайл.ЗаписатьСтроку(ЗаписываемаяСтрока);
		Для Сч = 1 По КоличПодчиненных Цикл
			ЗаписатьУзелВФайл(РезФайл, ХМЛУзел.ПолучитьПодчиненныйПоНомеру(Сч), СтрокаТабуляции+СимволТабуляции);
			
		КонецЦикла;
		ЗаписываемаяСтрока = СтрокаТабуляции + "</" + ХМЛУзел.Наименование + ">";       
		РезФайл.ЗаписатьСтроку(ЗаписываемаяСтрока);
	КонецЕсли;
КонецПроцедуры

//******************************************************************************
// СобратьДанныеОДоходах()
//
// Параметры:
//	
//
// 	Вызывается из формул элементов диалога:
//		
//
//	Описание:
//		
//
Процедура СобратьДанныеОДоходахСотрудника(Сотрудник,Резидент,ДоходыВычетыНалогиСотрудников,ИндексСотрудникаВСписке,ОКАТООрганизации,КПП,Доходы13,Доходы9,Доходы35)
	
	СтрокаИтоговойТаблицы = (ИндексСотрудникаВСписке-1)*12;      // это у нас типа "0"
	
	ПоследнийМесяц = 1;
	СписокПредыдущегоМесяца = "";
	Для Месяц=1 По 12 Цикл
		
		// во 2 колонке - таблица доходов
		ТаблицаДоходов = ДоходыВычетыНалогиСотрудников.ПолучитьЗначение(СтрокаИтоговойТаблицы+Месяц,2);
		
		Если ТипЗначения(ТаблицаДоходов) <> 100 Тогда  // доходов не было
			Продолжить
		КонецЕсли;
		
		СписокДляСравнения = СоздатьОбъект("СписокЗначений");
		ТаблицаДоходов.Выгрузить(СписокДляСравнения,,,"1,2,3,4");
		Для Сч = 10 По 12 Цикл
			СписокДляСравнения.ДобавитьЗначение(ДоходыВычетыНалогиСотрудников.ПолучитьЗначение(СтрокаИтоговойТаблицы+Месяц,Сч));
		КонецЦикла;
		
		Если Месяц>1  Тогда
			Если  глСпискиИдентичны(СписокДляСравнения,СписокПредыдущегоМесяца) = 1 Тогда
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		
		СписокПредыдущегоМесяца = СписокДляСравнения; 
		ПоследнийМесяц = Месяц;
		
	КонецЦикла;
	
	//раздел 3 справки - Доходы, облагаемые по ставке __ %
	ТаблицаДоходов13=СоздатьОбъект("ТаблицаЗначений");
	ТаблицаДоходов13.НоваяКолонка("Месяц");
	ТаблицаДоходов13.НоваяКолонка("КодДохода");
	ТаблицаДоходов13.НоваяКолонка("СуммаДохода"); 
	ТаблицаДоходов13.НоваяКолонка("КодВычета");
	ТаблицаДоходов13.НоваяКолонка("СуммаВычета");
	ТаблицаДоходов13.НоваяКолонка("ОКАТО"); 
	ТаблицаДоходов13.НоваяКолонка("КПП");
	
	ТаблицаДоходов9=СоздатьОбъект("ТаблицаЗначений");
	ТаблицаДоходов9.НоваяКолонка("Месяц");
	ТаблицаДоходов9.НоваяКолонка("КодДохода");
	ТаблицаДоходов9.НоваяКолонка("СуммаДохода"); 
	ТаблицаДоходов9.НоваяКолонка("КодВычета");
	ТаблицаДоходов9.НоваяКолонка("СуммаВычета");
	ТаблицаДоходов9.НоваяКолонка("ОКАТО");
	ТаблицаДоходов9.НоваяКолонка("КПП");
	
	ТаблицаДоходов35=СоздатьОбъект("ТаблицаЗначений");
	ТаблицаДоходов35.НоваяКолонка("Месяц");
	ТаблицаДоходов35.НоваяКолонка("КодДохода");
	ТаблицаДоходов35.НоваяКолонка("СуммаДохода"); 
	ТаблицаДоходов35.НоваяКолонка("КодВычета");
	ТаблицаДоходов35.НоваяКолонка("СуммаВычета");
	ТаблицаДоходов35.НоваяКолонка("ОКАТО");
	ТаблицаДоходов35.НоваяКолонка("КПП");
	
	СуммаДоходаНеОблагаемаяУИсточникаВыплаты = 0;
	
	//соберем таблицы для трех ставок 
	СтрокаИтоговойТаблицы = ИндексСотрудникаВСписке*12-11;//первая строка по сотруднику в таблице  
	
	
	Для СчМесяцев=1 по ПоследнийМесяц Цикл  
		
		//таблица доходов текущего месяца, нарастающим итогом с начала года
		ТаблицаДоходов = ДоходыВычетыНалогиСотрудников.ПолучитьЗначение(СтрокаИтоговойТаблицы-1+СчМесяцев,2);
				
		Если ТипЗначения(ТаблицаДоходов) <> 100 Тогда  // доходов не было
			Продолжить;
		КонецЕсли;
		Если ТаблицаДоходов.КоличествоСтрок() = 0 Тогда  // доходов не было
			Продолжить;
		КонецЕсли;  
		
		ТаблицаДоходовСИндексом = глСложитьКолонкиТаблицыЗначений(ТаблицаДоходов,"_1,_3","_2,_4","Ключ","Строка",);
		
		Если СчМесяцев>1 Тогда
			//таблица доходов прошлого месяца, нарастающим итогом с начала года
			ТаблицаДоходовПрошлогоМесяца = ДоходыВычетыНалогиСотрудников.ПолучитьЗначение(СтрокаИтоговойТаблицы-1+СчМесяцев-1,2); 
			ТаблицаДоходовПрошлогоМесяцаСИндексом = глСложитьКолонкиТаблицыЗначений(ТаблицаДоходовПрошлогоМесяца,"_1,_3","_2,_4","Ключ","Строка",);
			
			ТаблицаДоходовПрошлогоМесяцаСИндексом.ВыбратьСтроки();
			Пока ТаблицаДоходовПрошлогоМесяцаСИндексом.ПолучитьСтроку()=1 Цикл
				ТаблицаДоходовПрошлогоМесяцаСИндексом._2=(-1)*ТаблицаДоходовПрошлогоМесяцаСИндексом._2;
				ТаблицаДоходовПрошлогоМесяцаСИндексом._4=(-1)*ТаблицаДоходовПрошлогоМесяцаСИндексом._4;
			КонецЦикла; 
			глПереписатьИзТаблицыВТаблицу(ТаблицаДоходовПрошлогоМесяцаСИндексом,ТаблицаДоходовСИндексом);
			ТаблицаДоходовСИндексом.Свернуть("Ключ","_2,_4");
			
		КонецЕсли; 
		
		//получим ОКАТО и КПП
		//берем данные организации
		ОКАТОСправки = ОКАТООрганизации;
		КППСправки   = КПП;
		
		ТаблицаДоходовСИндексом.ВыбратьСтроки();
		Пока ТаблицаДоходовСИндексом.ПолучитьСтроку()=1 Цикл  
			
			Ключ		= ТаблицаДоходовСИндексом.Ключ;
			СуммаДохода	= ТаблицаДоходовСИндексом._2;
			СуммаВычета	= ТаблицаДоходовСИндексом._4;
			
			КодДохода	= Лев(Ключ,4);
			КодВычета	= Сред(Ключ,5,3); 
			
			Если СчМесяцев>1 Тогда 
				НомерСтрокиБыло="";
				Если ТаблицаДоходовПрошлогоМесяцаСИндексом.НайтиЗначение(Ключ,НомерСтрокиБыло,"Ключ") = 1 Тогда
					Если ((КодДохода="2610") или (КодДохода="1210") или (КодДохода="3020") или (КодДохода="2740")) и (Резидент = 1) 
					или ((((КодДохода = "1010") или (КодДохода = "1120")) и (Резидент = 1))
					или ((КодДохода = "1010") и (Резидент <> 1) и (ДатаАктуальности > '31.12.2007'))) Тогда
						СуммаДохода = СуммаДохода - ТаблицаДоходовПрошлогоМесяцаСИндексом.ПолучитьЗначение(НомерСтрокиБыло,"_2");
						СуммаВычета = СуммаВычета - ТаблицаДоходовПрошлогоМесяцаСИндексом.ПолучитьЗначение(НомерСтрокиБыло,"_4");
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
			Если СуммаДохода=0  Тогда
				//дохода с этим кодом нет в текущем месяце, не заполняем таблицы
				Продолжить;
			КонецЕсли;
			
			Если ((КодДохода="2610") или (КодДохода="1210") или (КодДохода="3020") или (КодДохода="2740")) и (Резидент = 1) Тогда
				//доходы резидента по ставке 35%  
				ТаблицаДоходов35.НоваяСтрока();
				ТаблицаДоходов35.Месяц=СчМесяцев;
				ТаблицаДоходов35.КодДохода	= КодДохода;
				ТаблицаДоходов35.СуммаДохода= СуммаДохода;
				ТаблицаДоходов35.КодВычета	= ?(СуммаВычета=0,"",КодВычета);
				ТаблицаДоходов35.СуммаВычета= ?(ПустоеЗначение(КодВычета)=1,0,СуммаВычета);
				ТаблицаДоходов35.ОКАТО = ОКАТОСправки;
				ТаблицаДоходов35.КПП = КППСправки;
			ИначеЕсли (((КодДохода = "1010") или (КодДохода = "1120")) и (Резидент = 1))
			ИЛИ ((КодДохода = "1010") и (Резидент <> 1) и (ДатаАктуальности > '31.12.2007')) Тогда 
				//доходы резидента по ставке 9% 
				ТаблицаДоходов9.НоваяСтрока();
				ТаблицаДоходов9.Месяц=СчМесяцев;
				ТаблицаДоходов9.КодДохода	= КодДохода;
				ТаблицаДоходов9.СуммаДохода	= СуммаДохода;
				ТаблицаДоходов9.КодВычета	= ?(СуммаВычета=0,"","601");
				ТаблицаДоходов9.СуммаВычета	= СуммаВычета;
				ТаблицаДоходов9.ОКАТО = ОКАТОСправки;
				ТаблицаДоходов9.КПП = КППСправки;
			ИначеЕсли (КодДохода = "4000")  Тогда
				//не выводим доход полученный предпринимателем
				//выводим доход полученный предпринимателем или продажи имущества
				ТаблицаДоходов13.НоваяСтрока();
				ТаблицаДоходов13.Месяц=СчМесяцев;
				ТаблицаДоходов13.КодДохода	= КодДохода;
				ТаблицаДоходов13.СуммаДохода= СуммаДохода;                     
				ТаблицаДоходов13.ОКАТО = ОКАТОСправки; 
				ТаблицаДоходов13.КПП = КППСправки;         
				СуммаДоходаНеОблагаемаяУИсточникаВыплаты = СуммаДоходаНеОблагаемаяУИсточникаВыплаты + СуммаДохода;
			Иначе 
				//доходы по ставке 13% или 30% для не резидентов
				ТаблицаДоходов13.НоваяСтрока();
				ТаблицаДоходов13.Месяц=СчМесяцев;
				ТаблицаДоходов13.КодДохода	= КодДохода;
				ТаблицаДоходов13.СуммаДохода= СуммаДохода;
				ТаблицаДоходов13.КодВычета	= ?(СуммаВычета=0,"",КодВычета);
				ТаблицаДоходов13.СуммаВычета= ?(ПустоеЗначение(КодВычета)=1,0,СуммаВычета);
				ТаблицаДоходов13.ОКАТО = ОКАТОСправки; 
				ТаблицаДоходов13.КПП = КППСправки;
			КонецЕсли;         
		КонецЦикла; 
	КонецЦикла; 
	
	Если Резидент=1 Тогда                                                                                                                                                                                    
		ВремТаблицаДоходов13=СоздатьОбъект("ТаблицаЗначений");
		ТаблицаДоходов13.Выгрузить(ВремТаблицаДоходов13);
		ТаблицаДоходов13.УдалитьСтроки();
		ТаблицаДоходов13.НоваяКолонка("Ключ");
		ВремТаблицаДоходов13.ВыбратьСтроки();
		Пока ВремТаблицаДоходов13.ПолучитьСтроку()=1 Цикл
			
			СтрНомерМесяца = ВремТаблицаДоходов13.Месяц;
			КодДохода  =ВремТаблицаДоходов13.КодДохода;
			СуммаДохода=ВремТаблицаДоходов13.СуммаДохода;
			КодВычета  =ВремТаблицаДоходов13.КодВычета;
			СуммаВычета=ВремТаблицаДоходов13.СуммаВычета;
			ОКАТОСправки=ВремТаблицаДоходов13.ОКАТО;
			КППСправки=ВремТаблицаДоходов13.КПП;
			
			Ключ=""+СтрНомерМесяца+КодДохода; 
			
			НомСтроки="";
			Если ТаблицаДоходов13.НайтиЗначение(Ключ,НомСтроки,"Ключ")=1 Тогда
				КодВычета13=ТаблицаДоходов13.ПолучитьЗначение(НомСтроки,"КодВычета");
				
				Если ((ПустоеЗначение(КодВычета13)=1) и (ПустоеЗначение(КодВычета)=0))
				ИЛИ ((ПустоеЗначение(КодВычета13)=0) и (ПустоеЗначение(КодВычета)=1)) Тогда
					КодВычетаВТаблицу=?(ПустоеЗначение(КодВычета13)=1,КодВычета,КодВычета13);
					ТаблицаДоходов13.УстановитьЗначение(НомСтроки,"КодВычета",КодВычетаВТаблицу);
					ТаблицаДоходов13.УстановитьЗначение(НомСтроки,"СуммаДохода",ТаблицаДоходов13.ПолучитьЗначение(НомСтроки,"СуммаДохода")+СуммаДохода);
					ТаблицаДоходов13.УстановитьЗначение(НомСтроки,"СуммаВычета",ТаблицаДоходов13.ПолучитьЗначение(НомСтроки,"СуммаВычета")+СуммаВычета);
				Иначе
					ТаблицаДоходов13.НоваяСтрока();
					ТаблицаДоходов13.Месяц=СтрНомерМесяца;
					ТаблицаДоходов13.КодДохода	= КодДохода;
					ТаблицаДоходов13.СуммаДохода= СуммаДохода;
					ТаблицаДоходов13.КодВычета	= КодВычета;
					ТаблицаДоходов13.СуммаВычета= ?(ПустоеЗначение(КодВычета)=1,0,СуммаВычета); 
					ТаблицаДоходов13.ОКАТО = ОКАТОСправки;
					ТаблицаДоходов13.КПП   = КППСправки;
					ТаблицаДоходов13.Ключ  = Ключ; 
				КонецЕсли; 
			Иначе
				ТаблицаДоходов13.НоваяСтрока();
				ТаблицаДоходов13.Месяц=СтрНомерМесяца;
				ТаблицаДоходов13.КодДохода	= КодДохода;
				ТаблицаДоходов13.СуммаДохода= СуммаДохода;
				ТаблицаДоходов13.КодВычета	= КодВычета;
				ТаблицаДоходов13.СуммаВычета= ?(ПустоеЗначение(КодВычета)=1,0,СуммаВычета);
				ТаблицаДоходов13.ОКАТО = ОКАТОСправки;
				ТаблицаДоходов13.КПП   = КППСправки;
				ТаблицаДоходов13.Ключ	= Ключ; 
			КонецЕсли;
			
		КонецЦикла;
		ТаблицаДоходов13.УдалитьКолонку("Ключ");
	КонецЕсли;
	
	ТаблицаДоходов=0;  
	
	//таблицы с данными справок в разрезе кодов ОКАТО
	Доходы13 = СоздатьОбъект("ТаблицаЗначений");
	Доходы13.НоваяКолонка("ОКАТО");
	Доходы13.НоваяКолонка("КПП");
	Доходы13.НоваяКолонка("ТаблицаДоходов");
	Доходы13.НоваяКолонка("МесяцНачало");
	Доходы13.НоваяКолонка("СписокМесяцев");
	
	Доходы9 = СоздатьОбъект("ТаблицаЗначений");
	Доходы9.НоваяКолонка("ОКАТО");
	Доходы9.НоваяКолонка("КПП");
	Доходы9.НоваяКолонка("ТаблицаДоходов");
	Доходы9.НоваяКолонка("МесяцНачало");
	Доходы9.НоваяКолонка("СписокМесяцев");
	
	Доходы35 = СоздатьОбъект("ТаблицаЗначений");
	Доходы35.НоваяКолонка("ОКАТО");
	Доходы35.НоваяКолонка("КПП");
	Доходы35.НоваяКолонка("ТаблицаДоходов");
	Доходы35.НоваяКолонка("МесяцНачало");
	Доходы35.НоваяКолонка("СписокМесяцев");
	
	//заполнение таблиц справок Доходы13, Доходы9, Доходы35
		
	Если ТаблицаДоходов13.КоличествоСтрок()>0 Тогда
		Доходы13.НоваяСтрока();
		Доходы13.ОКАТО  = ОКАТООрганизации;
		Доходы13.КПП  	= КПП;
		Доходы13.ТаблицаДоходов = ТаблицаДоходов13;
	КонецЕсли;
	
	Если ТаблицаДоходов9.КоличествоСтрок()>0 Тогда
		Доходы9.НоваяСтрока();
		Доходы9.ОКАТО  = ОКАТООрганизации;
		Доходы9.КПП  	= КПП;
		Доходы9.ТаблицаДоходов  = ТаблицаДоходов9;
	КонецЕсли;
	
	Если ТаблицаДоходов35.КоличествоСтрок()>0 Тогда
		Доходы35.НоваяСтрока();
		Доходы35.ОКАТО  = ОКАТООрганизации;
		Доходы35.КПП  	= КПП;
		Доходы35.ТаблицаДоходов = ТаблицаДоходов35;
	КонецЕсли;
	
	//Раздел 4. Стандартные и имущественныен налоговые вычеты (по видам)  
	Доходы13.ВставитьКолонку("СписокВычетовПравоСт"); 					//раздел 4.1
	Доходы13.ВставитьКолонку("СписокВычетовПравоИм"); 					//раздел 4.1
	Доходы13.ВставитьКолонку("НомерУведомления"); 						//раздел 4.2
	Доходы13.ВставитьКолонку("ДатаУведомления"); 						//раздел 4.3
	Доходы13.ВставитьКолонку("КодФНСУведомления");  					//раздел 4.4
	Доходы13.ВставитьКолонку("СуммаПредоставленныхСтВычетов","Число");  //раздел 4.5
	Доходы13.ВставитьКолонку("СуммаПредоставленныхИмВычетов","Число");  //раздел 4.6 
	
	//заготовка для 5-го раздела
	Доходы13.ВставитьКолонку("ОбщаяСуммаДохода"); 					//раздел 5.1
	Доходы13.ВставитьКолонку("ОблагаемаяСуммаДохода");				//раздел 5.2
	Доходы13.ВставитьКолонку("СуммаНалогаИсчисленная");				//раздел 5.3
	Доходы13.ВставитьКолонку("СуммаНалогаУдержанная"); 				//раздел 5.4
	Доходы13.ВставитьКолонку("СуммаВозвратаПоПерерасчету"); 		//раздел 5.5
	Доходы13.ВставитьКолонку("СуммаЗачтеннаяПоПерерасчету"); 		//раздел 5.6
	Доходы13.ВставитьКолонку("СуммаУдержаннаяПоПерерасчету"); 		//раздел 5.7
	Доходы13.ВставитьКолонку("ЗадолженностьЗаНалогоплательщиком"); 	//раздел 5.8
	Доходы13.ВставитьКолонку("СуммаИзлишнеУдержанная"); 			//раздел 5.9
	Доходы13.ВставитьКолонку("СуммаНаВзыскание");  					//раздел 5.10 
	
	Доходы13.ВыбратьСтроки();
	Пока Доходы13.ПолучитьСтроку()=1 Цикл 
		Доходы13.СуммаПредоставленныхСтВычетов =0;
		Доходы13.СуммаПредоставленныхИмВычетов =0;
		Доходы13.ОбщаяСуммаДохода =0;
		Доходы13.ОблагаемаяСуммаДохода =0;
		Доходы13.СуммаНалогаИсчисленная =0;
		Доходы13.СуммаНалогаУдержанная =0;
		Доходы13.СуммаВозвратаПоПерерасчету =0; 
		Доходы13.СуммаЗачтеннаяПоПерерасчету =0;
		Доходы13.СуммаУдержаннаяПоПерерасчету =0;
		Доходы13.ЗадолженностьЗаНалогоплательщиком =0;
		Доходы13.СуммаИзлишнеУдержанная =0;
		Доходы13.СуммаНаВзыскание =0;
	КонецЦикла;
	
	
	СписокВычетовСтандартных  = СоздатьОбъект("СписокЗначений");//представление - код вычета, значение - сумма вычета 
	СписокВычетовИмущественных  = СоздатьОбъект("СписокЗначений");//представление - код вычета, значение - сумма вычета 
	НомерУведомления="";
	ДатаУведомления="";
	КодФНСУведомления="";       
	ВсегоСуммаВычета311=0; //сумма им. вычета на которую сотрудник имел право
	ВсегоСуммаВычета312=0; //сумма им. вычета на которую сотрудник имел право
	СуммаПредоставленныхСтВычетов=0;
	СуммаПредоставленныхИмВычетов=0;
	
	Если (ТаблицаДоходов13.КоличествоСтрок()>0) и (Резидент=1) Тогда
		//есть доходы по ставке 13% и резидент, собираем вычеты
		
		//список вычетов, на которые налогоплательщик имел право, выгрудаем в список СписокВычетов
		ДоходыВычетыНалогиСотрудников.ПолучитьЗначение(СтрокаИтоговойТаблицы+ПоследнийМесяц-1,3).ПолучитьЗначение(7).Выгрузить(СписокВычетовСтандартных);
		
		//имущественные вычеты на которые сотрудник имел право
		ОписаниеВычета311=ДоходыВычетыНалогиСотрудников.ПолучитьЗначение(СтрокаИтоговойТаблицы+ПоследнийМесяц-1,3).ПолучитьЗначение(5);
		Если ТипЗначенияСтр(ОписаниеВычета311)="СписокЗначений" Тогда
			ВсегоСуммаВычета311 = ОписаниеВычета311.ПолучитьЗначение(3);
			НомерУведомления    = ОписаниеВычета311.ПолучитьЗначение(4);
			ДатаУведомления     = Формат(ОписаниеВычета311.ПолучитьЗначение(5), "ДДДММГГГГ");
			КодФНСУведомления   = ОписаниеВычета311.ПолучитьЗначение(6);
			СписокВычетовИмущественных.ДобавитьЗначение(ВсегоСуммаВычета311,"311");
		КонецЕсли;
		
		ОписаниеВычета312=ДоходыВычетыНалогиСотрудников.ПолучитьЗначение(СтрокаИтоговойТаблицы+ПоследнийМесяц-1,3).ПолучитьЗначение(6);
		Если ТипЗначенияСтр(ОписаниеВычета312)="СписокЗначений" Тогда
			ВсегоСуммаВычета312 = ОписаниеВычета312.ПолучитьЗначение(3);
			НомерУведомления    = ?(ПустоеЗначение(НомерУведомления)=1,ОписаниеВычета312.ПолучитьЗначение(4),НомерУведомления);
			ДатаУведомления     = ?(ПустоеЗначение(ДатаУведомления)=1,Формат(ОписаниеВычета312.ПолучитьЗначение(5), "ДДДММГГГГ"),ДатаУведомления);;
			КодФНСУведомления   = ?(ПустоеЗначение(КодФНСУведомления)=1,ОписаниеВычета312.ПолучитьЗначение(6),КодФНСУведомления);;
			СписокВычетовИмущественных.ДобавитьЗначение(ВсегоСуммаВычета312,"312");
		КонецЕсли; 
		
		
		Если Доходы13.КоличествоСтрок()=1 Тогда  
			
			ТаблицаДоходов13ПоПодразделению = Доходы13.ПолучитьЗначение(1,"ТаблицаДоходов");
			
			СписокВычетовПредоставленных=ДоходыВычетыНалогиСотрудников.ПолучитьЗначение(СтрокаИтоговойТаблицы+ПоследнийМесяц-1,3).ПолучитьЗначение(1);
			Для СчВычетов=1 По СписокВычетовПредоставленных.РазмерСписка() Цикл
				СумВычета=СписокВычетовПредоставленных.ПолучитьЗначение(СчВычетов);
				СуммаПредоставленныхСтВычетов =СуммаПредоставленныхСтВычетов+СумВычета;
			КонецЦикла; 
			ОблагСуммаБезИмВычетов=ТаблицаДоходов13ПоПодразделению.Итог("СуммаДохода")-ТаблицаДоходов13ПоПодразделению.Итог("СуммаВычета");
			СуммаПредоставленныхСтВычетов=Мин(ОблагСуммаБезИмВычетов,СуммаПредоставленныхСтВычетов);
			
			//вычеты предоставленные
			Вычеты311=Число(ДоходыВычетыНалогиСотрудников.ПолучитьЗначение(СтрокаИтоговойТаблицы+ПоследнийМесяц-1,3).ПолучитьЗначение(3));
			Вычеты312=Число(ДоходыВычетыНалогиСотрудников.ПолучитьЗначение(СтрокаИтоговойТаблицы+ПоследнийМесяц-1,3).ПолучитьЗначение(4));
			СуммаПредоставленныхИмВычетов =Вычеты311+Вычеты312; 
			
			Доходы13.УстановитьЗначение(1,"СписокВычетовПравоСт",СписокВычетовСтандартных);
			Доходы13.УстановитьЗначение(1,"СписокВычетовПравоИм",СписокВычетовИмущественных);
			
			Доходы13.УстановитьЗначение(1,"НомерУведомления",НомерУведомления);
			Доходы13.УстановитьЗначение(1,"ДатаУведомления",ДатаУведомления);
			Доходы13.УстановитьЗначение(1,"КодФНСУведомления",КодФНСУведомления);
			Доходы13.УстановитьЗначение(1,"СуммаПредоставленныхСтВычетов",СуммаПредоставленныхСтВычетов);
			Доходы13.УстановитьЗначение(1,"СуммаПредоставленныхИмВычетов",СуммаПредоставленныхИмВычетов); 
			
		КонецЕсли;
		
	КонецЕсли;  
	
	//Раздел 5. Общая сумма дохода и налога на доходы по итогам налогового периода 
	Доходы9.ВставитьКолонку("СписокВычетовПравоСт"); 
	Доходы9.ВставитьКолонку("СписокВычетовПравоИм");
	Доходы9.ВставитьКолонку("ОбщаяСуммаДохода"); 					//раздел 5.1
	Доходы9.ВставитьКолонку("ОблагаемаяСуммаДохода");				//раздел 5.2
	Доходы9.ВставитьКолонку("СуммаНалогаИсчисленная");				//раздел 5.3
	Доходы9.ВставитьКолонку("СуммаНалогаУдержанная"); 				//раздел 5.4
	Доходы9.ВставитьКолонку("СуммаВозвратаПоПерерасчету"); 			//раздел 5.5
	Доходы9.ВставитьКолонку("СуммаЗачтеннаяПоПерерасчету"); 		//раздел 5.6
	Доходы9.ВставитьКолонку("СуммаУдержаннаяПоПерерасчету"); 		//раздел 5.7
	Доходы9.ВставитьКолонку("ЗадолженностьЗаНалогоплательщиком"); 	//раздел 5.8
	Доходы9.ВставитьКолонку("СуммаИзлишнеУдержанная"); 				//раздел 5.9
	Доходы9.ВставитьКолонку("СуммаНаВзыскание");  					//раздел 5.10 
	
	Доходы9.ВыбратьСтроки();
	Пока Доходы9.ПолучитьСтроку()=1 Цикл 
		Доходы9.ОбщаяСуммаДохода = 0;
		Доходы9.ОблагаемаяСуммаДохода = 0;
		Доходы9.СуммаНалогаИсчисленная = 0;
		Доходы9.СуммаНалогаУдержанная = 0;
		Доходы9.СуммаВозвратаПоПерерасчету =0; 
		Доходы9.СуммаЗачтеннаяПоПерерасчету =0;
		Доходы9.СуммаУдержаннаяПоПерерасчету =0;
		Доходы9.ЗадолженностьЗаНалогоплательщиком =0;
		Доходы9.СуммаИзлишнеУдержанная =0;
		Доходы9.СуммаНаВзыскание = 0;
	КонецЦикла;
	
	Доходы35.ВставитьКолонку("СписокВычетовПравоСт");
	Доходы35.ВставитьКолонку("СписокВычетовПравоИм");
	Доходы35.ВставитьКолонку("ОбщаяСуммаДохода"); 					//раздел 5.1
	Доходы35.ВставитьКолонку("ОблагаемаяСуммаДохода");				//раздел 5.2
	Доходы35.ВставитьКолонку("СуммаНалогаИсчисленная");				//раздел 5.3
	Доходы35.ВставитьКолонку("СуммаНалогаУдержанная"); 				//раздел 5.4 
	Доходы35.ВставитьКолонку("СуммаВозвратаПоПерерасчету"); 		//раздел 5.5
	Доходы35.ВставитьКолонку("СуммаЗачтеннаяПоПерерасчету"); 		//раздел 5.6
	Доходы35.ВставитьКолонку("СуммаУдержаннаяПоПерерасчету"); 		//раздел 5.7
	Доходы35.ВставитьКолонку("ЗадолженностьЗаНалогоплательщиком"); 	//раздел 5.8
	Доходы35.ВставитьКолонку("СуммаИзлишнеУдержанная"); 			//раздел 5.9
	Доходы35.ВставитьКолонку("СуммаНаВзыскание");  					//раздел 5.10
	
	Доходы35.ВыбратьСтроки();
	Пока Доходы35.ПолучитьСтроку()=1 Цикл 
		Доходы35.ОбщаяСуммаДохода = 0;
		Доходы35.ОблагаемаяСуммаДохода = 0;
		Доходы35.СуммаНалогаИсчисленная = 0;
		Доходы35.СуммаНалогаУдержанная = 0; 
		Доходы35.СуммаВозвратаПоПерерасчету =0; 
		Доходы35.СуммаЗачтеннаяПоПерерасчету =0;
		Доходы35.СуммаУдержаннаяПоПерерасчету =0;
		Доходы35.ЗадолженностьЗаНалогоплательщиком =0;
		Доходы35.СуммаИзлишнеУдержанная =0;
		Доходы35.СуммаНаВзыскание = 0;
	КонецЦикла;
	
	
	СальдоНаНачалоГода = Сотрудник.СальдоНалогаНаДоходы.Получить(Дата(Год,12,31));
	Возврата = 0;
	Зачтено  = 0;
	Удержано = 0;	
	
	
	//раздел 5 по ставке13%
	
	Если ТаблицаДоходов13.КоличествоСтрок()>0 Тогда 
		
		ОбщаяСуммаДохода13 = Доходы13.ПолучитьЗначение(1,"ТаблицаДоходов").Итог("СуммаДохода");
		Доходы13.УстановитьЗначение(1,"ОбщаяСуммаДохода",ОбщаяСуммаДохода13); 
		
		ОблагаемаяСуммаДохода13 = ДоходыВычетыНалогиСотрудников.ПолучитьЗначение(СтрокаИтоговойТаблицы+ПоследнийМесяц-1,13);
		СуммаНалогаИсчисленная13 = Окр(ДоходыВычетыНалогиСотрудников.ПолучитьЗначение(СтрокаИтоговойТаблицы+ПоследнийМесяц-1,21));
		СуммаНалогаУдержанная13  = Окр(ДоходыВычетыНалогиСотрудников.ПолучитьЗначение(СтрокаИтоговойТаблицы+ПоследнийМесяц-1,10));
		СуммаНаВзыскание13=Окр(ДоходыВычетыНалогиСотрудников.ПолучитьЗначение(СтрокаИтоговойТаблицы+ПоследнийМесяц-1,16));
		
		Если Резидент = 2 Тогда //добавим данные по ставкам 9 и 35 
			
			Если ДатаАктуальности <= '31.12.2007' Тогда
				ОблагаемаяСуммаДохода9   = ДоходыВычетыНалогиСотрудников.ПолучитьЗначение(СтрокаИтоговойТаблицы+ПоследнийМесяц-1,14);
				СуммаНалогаИсчисленная9  = Окр(ДоходыВычетыНалогиСотрудников.ПолучитьЗначение(СтрокаИтоговойТаблицы+ПоследнийМесяц-1,22));
				СуммаНалогаУдержанная9   = Окр(ДоходыВычетыНалогиСотрудников.ПолучитьЗначение(СтрокаИтоговойТаблицы+ПоследнийМесяц-1,11));
				СуммаНаВзыскание9 		 = Окр(ДоходыВычетыНалогиСотрудников.ПолучитьЗначение(СтрокаИтоговойТаблицы+ПоследнийМесяц-1,17)); 
			КонецЕсли;

			ОблагаемаяСуммаДохода35  = глВСуммуИзСтроки_НДФЛ(ДоходыВычетыНалогиСотрудников.ПолучитьЗначение(СтрокаИтоговойТаблицы+ПоследнийМесяц-1,15));
			СуммаНалогаИсчисленная35 = Окр(глВСуммуИзСтроки_НДФЛ(ДоходыВычетыНалогиСотрудников.ПолучитьЗначение(СтрокаИтоговойТаблицы+ПоследнийМесяц-1,23)));
			СуммаНалогаУдержанная35  = Окр(глВСуммуИзСтроки_НДФЛ(ДоходыВычетыНалогиСотрудников.ПолучитьЗначение(СтрокаИтоговойТаблицы+ПоследнийМесяц-1,12)));
			СуммаНаВзыскание35		 = Окр(глВСуммуИзСтроки_НДФЛ(ДоходыВычетыНалогиСотрудников.ПолучитьЗначение(СтрокаИтоговойТаблицы+ПоследнийМесяц-1,18)));
			
			ОблагаемаяСуммаДохода13  = ОблагаемаяСуммаДохода13 + ОблагаемаяСуммаДохода9 + ОблагаемаяСуммаДохода35;  
			СуммаНалогаИсчисленная13 = СуммаНалогаИсчисленная13 + СуммаНалогаИсчисленная9 + СуммаНалогаИсчисленная35;
			СуммаНалогаУдержанная13  = СуммаНалогаУдержанная13 + СуммаНалогаУдержанная9 + СуммаНалогаУдержанная35;
			СуммаНаВзыскание13       = СуммаНаВзыскание13 + СуммаНаВзыскание9 + СуммаНаВзыскание35;
			
		КонецЕсли;
		
		
		Доходы13.УстановитьЗначение(1,"ОблагаемаяСуммаДохода",ОблагаемаяСуммаДохода13);
		Доходы13.УстановитьЗначение(1,"СуммаНалогаИсчисленная",СуммаНалогаИсчисленная13);
		Доходы13.УстановитьЗначение(1,"СуммаНалогаУдержанная",СуммаНалогаУдержанная13);
		Доходы13.УстановитьЗначение(1,"СуммаНаВзыскание",СуммаНаВзыскание13);
		
		
		Если СальдоНаНачалоГода>0 Тогда 
			//долг за налоговым агентом
			Возврата = Окр(Макс(СальдоНаНачалоГода,0));
			Зачтено = 0;
			Если Возврата > 0 Тогда
				Если СуммаНалогаУдержанная13 < 0 Тогда
					Зачтено =  Мин(Возврата - Мин(Возврата,-СуммаНалогаУдержанная13),СуммаНалогаИсчисленная13);
					Возврата = Мин(Возврата,-СуммаНалогаУдержанная13);
				ИначеЕсли СуммаНалогаИсчисленная13 > 0 Тогда
					Зачтено = Макс(0,Мин(Возврата,СуммаНалогаИсчисленная13-СуммаНалогаУдержанная13));
					Возврата = 0;
				Иначе
					Возврата = 0; 
				КонецЕсли;
			КонецЕсли; 
		ИначеЕсли СальдоНаНачалоГода<0 Тогда	
			//долг за налогоплательщиком
			Удержано= -Мин(0,СуммаНалогаИсчисленная13-СуммаНалогаУдержанная13);
		КонецЕсли;
		
		СуммаВозвратаПоПерерасчету13=Возврата;
		Доходы13.УстановитьЗначение(1,"СуммаВозвратаПоПерерасчету",СуммаВозвратаПоПерерасчету13);
		
		СуммаЗачтеннаяПоПерерасчету13=Зачтено;
		Доходы13.УстановитьЗначение(1,"СуммаЗачтеннаяПоПерерасчету",СуммаЗачтеннаяПоПерерасчету13);
		
		СуммаУдержаннаяПоПерерасчету13=Удержано;
		Доходы13.УстановитьЗначение(1,"СуммаУдержаннаяПоПерерасчету",СуммаУдержаннаяПоПерерасчету13);
		
		СуммаНалогаУдержанная13 = Макс(0,Доходы13.ПолучитьЗначение(1,"СуммаНалогаУдержанная"));
		Доходы13.УстановитьЗначение(1,"СуммаНалогаУдержанная",СуммаНалогаУдержанная13);
		
		Задолженность13=Доходы13.ПолучитьЗначение(1,"СуммаНалогаИсчисленная")+СуммаУдержаннаяПоПерерасчету13-СуммаЗачтеннаяПоПерерасчету13-СуммаНалогаУдержанная13-Макс(Доходы13.ПолучитьЗначение(1,"СуммаНаВзыскание"),0);
		ЗадолженностьЗаНалогоплательщиком13 =Макс(Задолженность13,0);
		СуммаИзлишнеУдержанная13			=Макс(-Задолженность13,0); 
		
		Доходы13.УстановитьЗначение(1,"ЗадолженностьЗаНалогоплательщиком",ЗадолженностьЗаНалогоплательщиком13);
		Доходы13.УстановитьЗначение(1,"СуммаИзлишнеУдержанная",СуммаИзлишнеУдержанная13);
		
	КонецЕсли;	//раздел 5 по ставке13%
	
	//раздел 5 по ставке 9%
	Если ТаблицаДоходов9.КоличествоСтрок()>0 Тогда 
		
		ОбщаяСуммаДохода9  = Доходы9.ПолучитьЗначение(1,"ТаблицаДоходов").Итог("СуммаДохода");
		Доходы9.УстановитьЗначение(1,"ОбщаяСуммаДохода",ОбщаяСуммаДохода9);
		
		ОблагаемаяСуммаДохода9  = ДоходыВычетыНалогиСотрудников.ПолучитьЗначение(СтрокаИтоговойТаблицы+ПоследнийМесяц-1,14); 
		Доходы9.УстановитьЗначение(1,"ОблагаемаяСуммаДохода",ОблагаемаяСуммаДохода9);
		
		СуммаНалогаИсчисленная9  = Окр(ДоходыВычетыНалогиСотрудников.ПолучитьЗначение(СтрокаИтоговойТаблицы+ПоследнийМесяц-1,22));
		Доходы9.УстановитьЗначение(1,"СуммаНалогаИсчисленная",СуммаНалогаИсчисленная9);
		
		СуммаНалогаУдержанная9   = Окр(ДоходыВычетыНалогиСотрудников.ПолучитьЗначение(СтрокаИтоговойТаблицы+ПоследнийМесяц-1,11));
		Доходы9.УстановитьЗначение(1,"СуммаНалогаУдержанная",СуммаНалогаУдержанная9);
		
		СуммаНаВзыскание9 =Окр(ДоходыВычетыНалогиСотрудников.ПолучитьЗначение(СтрокаИтоговойТаблицы+ПоследнийМесяц-1,17));
		Доходы9.УстановитьЗначение(1,"СуммаНаВзыскание",СуммаНаВзыскание9); 
		
		
		
		СуммаВозвратаПоПерерасчету9=0;
		Доходы9.УстановитьЗначение(1,"СуммаВозвратаПоПерерасчету",СуммаВозвратаПоПерерасчету9);
		
		СуммаЗачтеннаяПоПерерасчету9=0;
		Доходы9.УстановитьЗначение(1,"СуммаЗачтеннаяПоПерерасчету",СуммаЗачтеннаяПоПерерасчету9);
		
		СуммаУдержаннаяПоПерерасчету9=0;
		Доходы9.УстановитьЗначение(1,"СуммаУдержаннаяПоПерерасчету",СуммаУдержаннаяПоПерерасчету9);
		
		СуммаНалогаУдержанная9  = Макс(0,Доходы9.ПолучитьЗначение(1,"СуммаНалогаУдержанная"));
		
		Задолженность9=Доходы9.ПолучитьЗначение(1,"СуммаНалогаИсчисленная")+СуммаУдержаннаяПоПерерасчету9-СуммаЗачтеннаяПоПерерасчету9-СуммаНалогаУдержанная9-Макс(Доходы9.ПолучитьЗначение(1,"СуммаНаВзыскание"),0);
		ЗадолженностьЗаНалогоплательщиком9 = Макс(Задолженность9,0);
		СуммаИзлишнеУдержанная9			   = Макс(-Задолженность9,0); 
		
		Доходы9.УстановитьЗначение(1,"ЗадолженностьЗаНалогоплательщиком",ЗадолженностьЗаНалогоплательщиком9);
		Доходы9.УстановитьЗначение(1,"СуммаИзлишнеУдержанная",СуммаИзлишнеУдержанная9);
		
	КонецЕсли;	//раздел 5 по ставке 9%	
	
	//раздел 5 по ставке 35%
	Если ТаблицаДоходов35.КоличествоСтрок()>0 Тогда 
		
		ОбщаяСуммаДохода35  = Доходы35.ПолучитьЗначение(1,"ТаблицаДоходов").Итог("СуммаДохода");
		Доходы35.УстановитьЗначение(1,"ОбщаяСуммаДохода",ОбщаяСуммаДохода35);
		
		ОблагаемаяСуммаДохода35 = глВСуммуИзСтроки_НДФЛ(ДоходыВычетыНалогиСотрудников.ПолучитьЗначение(СтрокаИтоговойТаблицы+ПоследнийМесяц-1,15));
		Доходы35.УстановитьЗначение(1,"ОблагаемаяСуммаДохода",ОблагаемаяСуммаДохода35);
		
		СуммаНалогаИсчисленная35 = Окр(глВСуммуИзСтроки_НДФЛ(ДоходыВычетыНалогиСотрудников.ПолучитьЗначение(СтрокаИтоговойТаблицы+ПоследнийМесяц-1,23)));
		Доходы35.УстановитьЗначение(1,"СуммаНалогаИсчисленная",СуммаНалогаИсчисленная35);
		
		СуммаНалогаУдержанная35  = Окр(глВСуммуИзСтроки_НДФЛ(ДоходыВычетыНалогиСотрудников.ПолучитьЗначение(СтрокаИтоговойТаблицы+ПоследнийМесяц-1,12)));
		Доходы35.УстановитьЗначение(1,"СуммаНалогаУдержанная",СуммаНалогаУдержанная35);
		
		СуммаНаВзыскание35=Окр(глВСуммуИзСтроки_НДФЛ(ДоходыВычетыНалогиСотрудников.ПолучитьЗначение(СтрокаИтоговойТаблицы+ПоследнийМесяц-1,18)));
		Доходы35.УстановитьЗначение(1,"СуммаНаВзыскание",СуммаНаВзыскание35);
		
		
		СуммаВозвратаПоПерерасчету35=0;
		Доходы35.УстановитьЗначение(1,"СуммаВозвратаПоПерерасчету",СуммаВозвратаПоПерерасчету35);
		
		СуммаЗачтеннаяПоПерерасчету35=0;
		Доходы35.УстановитьЗначение(1,"СуммаЗачтеннаяПоПерерасчету",СуммаЗачтеннаяПоПерерасчету35);
		
		СуммаУдержаннаяПоПерерасчету35=0;
		Доходы35.УстановитьЗначение(1,"СуммаУдержаннаяПоПерерасчету",СуммаУдержаннаяПоПерерасчету35);
		
		СуммаНалогаУдержанная35  = Макс(0,Доходы35.ПолучитьЗначение(1,"СуммаНалогаУдержанная"));
		
		Задолженность35=Доходы35.ПолучитьЗначение(1,"СуммаНалогаИсчисленная")+СуммаУдержаннаяПоПерерасчету35-СуммаЗачтеннаяПоПерерасчету35-СуммаНалогаУдержанная35-Макс(Доходы35.ПолучитьЗначение(1,"СуммаНаВзыскание"),0);
		ЗадолженностьЗаНалогоплательщиком35 = Макс(Задолженность35,0);
		СуммаИзлишнеУдержанная35    	    = Макс(-Задолженность35,0); 
		
		Доходы35.УстановитьЗначение(1,"ЗадолженностьЗаНалогоплательщиком",ЗадолженностьЗаНалогоплательщиком35);
		Доходы35.УстановитьЗначение(1,"СуммаИзлишнеУдержанная",СуммаИзлишнеУдержанная35);
		
	КонецЕсли;	//раздел 5 по ставке 35% 
	
	ПроверкаОблагаемаяСуммаДохода13 = ОбщаяСуммаДохода13 - ТаблицаДоходов13.Итог("СуммаВычета") - СуммаПредоставленныхСтВычетов - СуммаПредоставленныхИмВычетов - СуммаДоходаНеОблагаемаяУИсточникаВыплаты; 
	ПроверкаОблагаемаяСуммаДохода35 = ОбщаяСуммаДохода35 - ТаблицаДоходов35.Итог("СуммаВычета"); 
	//проверка
	ОблагаемаяСуммаДохода13 = ?(ПустоеЗначение(ОблагаемаяСуммаДохода13) = 1, 0, ОблагаемаяСуммаДохода13);
	ОблагаемаяСуммаДохода35 = ?(ПустоеЗначение(ОблагаемаяСуммаДохода35) = 1, 0, ОблагаемаяСуммаДохода35);
	ПроверкаОблагаемаяСуммаДохода13 = ?(ПустоеЗначение(ПроверкаОблагаемаяСуммаДохода13) = 1, 0, ПроверкаОблагаемаяСуммаДохода13);
	ПроверкаОблагаемаяСуммаДохода35 = ?(ПустоеЗначение(ПроверкаОблагаемаяСуммаДохода35) = 1, 0, ПроверкаОблагаемаяСуммаДохода35);
	Если ОблагаемаяСуммаДохода13<>ПроверкаОблагаемаяСуммаДохода13 Тогда 
		Сообщить(Сотрудник.Наименование+": "+"Ошибка при проверке облагаемой суммы дохода по ставке "+?(Резидент=1,"13%","30%"));
		Сообщить("Облагаемая сумма дохода="+глЧислоВФорматеПользователя(ОблагаемаяСуммаДохода13));
		Сообщить("Рассчитана Облагаемая сумма дохода="+глЧислоВФорматеПользователя(ПроверкаОблагаемаяСуммаДохода13));
	КонецЕсли;
	Если ОблагаемаяСуммаДохода35<>ПроверкаОблагаемаяСуммаДохода35 Тогда
		Сообщить(Сотрудник.Наименование+": "+"Ошибка при проверке облагаемой суммы дохода по ставке 35%");
		Сообщить("Облагаемая сумма дохода="+ОблагаемаяСуммаДохода35);
		Сообщить("Рассчитана Облагаемая сумма дохода="+ПроверкаОблагаемаяСуммаДохода35);
	КонецЕсли;                                          
	
	//проверку для ставки 9% не делаем

	
КонецПроцедуры //СобратьДанныеОДоходах 

//******************************************************************************
// ПолучитьДанныеПоСотрудник()
//
// Параметры:
//	
//
// Возвращаемое значение:
//		
//
//	Описание:
//		
//
Функция ПолучитьДанныеПоСотруднику(Сотрудник,СписокДанныхПоСотруднику,Резидент,ФИО)
	
	ФамилияСотрудника  =""; 
	ИмяСотрудника      =""; 
	ОтчествоСотрудника ="";
	ФИО=глФамилияИмяОтчество(Сотрудник,ФамилияСотрудника,ИмяСотрудника,ОтчествоСотрудника);
	Если ПустаяСтрока(ФамилияСотрудника+ИмяСотрудника)=1 Тогда
		Сообщить(ФИО+": "+"Должны быть указаны, как минимум, фамилия и имя физического лица");
		ФормироватьСправкуОДоходах=0;
	ИначеЕсли ПустаяСтрока(ИмяСотрудника)=1 Тогда
		Сообщить(ФИО+": "+"Обязательно должно быть указано имя физического лица");
		ФормироватьСправкуОДоходах=0;
	КонецЕсли; 
	ФИОСотрудника=ФамилияСотрудника+" "+ИмяСотрудника+" "+ОтчествоСотрудника;
	СписокДанныхПоСотруднику.Установить("ФамилияСотрудника",ФамилияСотрудника); 
	СписокДанныхПоСотруднику.Установить("ИмяСотрудника",ИмяСотрудника);
	СписокДанныхПоСотруднику.Установить("ОтчествоСотрудника",ОтчествоСотрудника);
	СписокДанныхПоСотруднику.Установить("ФИОСотрудника",ФИОСотрудника); 
	
	ИННСотрудника=Сотрудник.ИНН;
	Если ПустоеЗначение(ИННСотрудника)=0  Тогда
		Если (Строка(Число(СтрЗаменить(ИННСотрудника,"0","1")))<>СтрЗаменить(ИННСотрудника,"0","1")) Тогда
			Сообщить(ФИО+": "+"Неверно задан ИНН физического лица "+ИННСотрудника); 
			ФормироватьСправкуОДоходах=0;
		КонецЕсли; 
	Иначе 
		ИННСотрудника="";
	КонецЕсли;  
	СписокДанныхПоСотруднику.Установить("ИННСотрудника",ИННСотрудника);
	
	//проверим дату рождения
	ДатаРожденияСотрудника=Формат(Сотрудник.ДатаРождения,"ДДДММГГГГ");
	Если (Число(ДатаРожденияСотрудника)=0) или (ДатаГод(ДатаРожденияСотрудника)>Год) Тогда
		Сообщить(ФИО+": "+"Неверно задана дата рождения");
		ФормироватьСправкуОДоходах=0;
	КонецЕсли;
	СписокДанныхПоСотруднику.Установить("ДатаРожденияСотрудника",ДатаРожденияСотрудника);
	
	СтранаПМЖ = Сотрудник.Страна;
	СписокДанныхПоСотруднику.Установить("СтранаПМЖ",СтранаПМЖ);
	
	Гражданство=?((СтранаПМЖ.Выбран()=0),"643",СтранаПМЖ.Код);
	СписокДанныхПоСотруднику.Установить("Гражданство",Гражданство);
	
	Если Гражданство="643" Тогда 
		//гражданин РФ
		Если глСтрокаНаписанаПоРусски(ФамилияСотрудника+ИмяСотрудника+ОтчествоСотрудника)=0 Тогда
			Сообщить(ФИО+": "+"Имя физического лица гражданина РФ должно быть введено русскими буквами");
			ФормироватьСправкуОДоходах=0;
		КонецЕсли; 
	Иначе 
		//не гражданин РФ, допускается в ФИО использовать латинские буквы
		
	КонецЕсли; 
	
	//документ, удостоверяющий личность
	ВидДокумента="";
	СерияДокумента="";
	НомерДокумента="";
	ВидДокумента=Сотрудник.ВидДокумента.КодНДФЛ;
	СерияДокумента=ВРег(СокрЛП(Сотрудник.ДокументСерия));
	НомерДокумента=ВРег(СокрЛП(Сотрудник.ДокументНомер));
	Если ПустаяСтрока(ВидДокумента)=1 Тогда
		Сообщить(ФИО+": "+"Не задан документ, удостоверяющий личность");
		ФормироватьСправкуОДоходах=0;
	КонецЕсли;
	Если ПустаяСтрока(СерияДокумента+НомерДокумента)=1 Тогда
		Сообщить(ФИО+": "+"Не заданы номер и серия документа, удостоверяющего личность");
		ФормироватьСправкуОДоходах=0;
	ИначеЕсли ПустаяСтрока(ВидДокумента)=0 Тогда
		
		Если (глПроверкаСерииУдостоверенияЛичности(ВидДокумента,СерияДокумента,0)=0) Тогда
			Сообщить(ФИО+": "+"Неверно указана серия документа, удостоверяющего личность"); 
			ФормироватьСправкуОДоходах=0;
		КонецЕсли;
		Если (глПроверкаНомераУдостоверенияЛичности(ВидДокумента,НомерДокумента,0)=0) Тогда
			Сообщить(ФИО+": "+"Неверно указан номер документа, удостоверяющего личность");
			ФормироватьСправкуОДоходах=0;
		КонецЕсли; 
		
	КонецЕсли;
	
	СписокДанныхПоСотруднику.Установить("ВидДокумента",ВидДокумента);
	
	СерияНомерДокумента= СерияДокумента+" "+НомерДокумента;
	СписокДанныхПоСотруднику.Установить("СерияНомерДокумента",СерияНомерДокумента);
	
	//адрес по регистрации, для всех и резидентов и не резидентов, у не резидентов может не быть
	АдресПоРегистрации = "";
	АдресПоРегистрации = Сотрудник.АдресПрописка; 
	ЕстьАдресПоРегистрации=1;
	Если ПустаяСтрока(СтрЗаменить(АдресПоРегистрации,",","")) = 1 Тогда 
		ЕстьАдресПоРегистрации=0;
		Если (Резидент=1) и (Гражданство="643") Тогда
			Сообщить(ФИО+": "+"Не задан адрес места жительства в Российской Федерации (Адрес по регистрации)");
			ФормироватьСправкуОДоходах=0;
		КонецЕсли;
	ИначеЕсли глАдресСоответствуетТребованиямМНС(АдресПоРегистрации)=0 Тогда
		Сообщить(ФИО+": "+"Неверно задан адрес по регистрации - не соответствует требованиям ФНС");
		ФормироватьСправкуОДоходах=0;
	КонецЕсли;
	
	Индекс="      ";
	Регион="  ";
	Район="";
	Город="";
	НаселенныйПункт="";
	Улица="";
	Дом="";
	Корпус="";
	Квартира="";
	АдресПоРегистрации = ?(ПустоеЗначение(АдресПоРегистрации) = 1, "", АдресСКодомРегиона(АдресПоРегистрации));
	АдресСписком = глРазложить(АдресПоРегистрации);
	Если АдресСписком.РазмерСписка() > 9 Тогда
		Индекс = Лев(Строка(АдресСписком.ПолучитьЗначение(2)),6);
		Регион = АдресСписком.ПолучитьЗначение(3);
		Район  = Лев(СОКРЛП(Строка(АдресСписком.ПолучитьЗначение(4))),50);
		Город  = Лев(СОКРЛП(Строка(АдресСписком.ПолучитьЗначение(5))),50);
		НаселенныйПункт = Лев(СОКРЛП(Строка(АдресСписком.ПолучитьЗначение(6))),50);
		Улица    = Лев(СОКРЛП(Строка(АдресСписком.ПолучитьЗначение(7))) ,50);
		Дом      = Лев(СОКРЛП(Строка(АдресСписком.ПолучитьЗначение(8))) ,15);
		Корпус   = Лев(СОКРЛП(Строка(АдресСписком.ПолучитьЗначение(9))) ,15);
		Квартира = Лев(СОКРЛП(Строка(АдресСписком.ПолучитьЗначение(10))),15);
	КонецЕсли;
	СписокДанныхПоСотруднику.Установить("Индекс",Индекс);
	СписокДанныхПоСотруднику.Установить("Регион",Регион);
	СписокДанныхПоСотруднику.Установить("Район",Район);
	СписокДанныхПоСотруднику.Установить("Город",Город);
	СписокДанныхПоСотруднику.Установить("НаселенныйПункт",НаселенныйПункт);
	СписокДанныхПоСотруднику.Установить("Улица",Улица);
	СписокДанныхПоСотруднику.Установить("Дом",Дом);
	СписокДанныхПоСотруднику.Установить("Корпус",Корпус);
	СписокДанныхПоСотруднику.Установить("Квартира",Квартира);
	
	СписокДанныхПоСотруднику.Установить("ЕстьАдресПоРегистрации",ЕстьАдресПоРегистрации);
	
	//для не резидентов или иностранных граждан формируем адрес в стране проживания
	КодСтраныПроживания="   ";
	АдресВСтранеПроживания=" ";
	ЕстьАдресВСтранеПроживания=0;
	Если (Резидент=2) или (Гражданство<>"643") или (ЕстьАдресПоРегистрации=0)  Тогда 
		ЕстьАдресВСтранеПроживания = 1;
		АдресСписком = глРазложить(Сотрудник.АдресВСТранеПроживания);
		СтранаПроживанияСтрока=СОКРЛП(АдресСписком.ПолучитьЗначение(1));
		СпрОКСМ=СоздатьОбъект("Справочник.ОКСМ");
		Если СпрОКСМ.НайтиПоНаименованию(СтранаПроживанияСтрока,0,1)=1 Тогда
			СтранаПроживания=СпрОКСМ.ТекущийЭлемент();
			КодСтраныПроживания=Лев(Строка(СтранаПроживания.Код),3);
		КонецЕсли;  
		
		Для Сч=2 по АдресСписком.РазмерСписка() Цикл 
			АдресВСтранеПроживания=АдресВСтранеПроживания+АдресСписком.ПолучитьЗначение(Сч);
			Если Сч<>АдресСписком.РазмерСписка() Тогда
				АдресВСтранеПроживания=АдресВСтранеПроживания+",";    
			КонецЕсли;
		КонецЦикла;
		АдресВСтранеПроживания=Лев(СОКРЛП(АдресВСтранеПроживания),200);
		
		Если ПустоеЗначение(""+КодСтраныПроживания+АдресВСтранеПроживания)=1 Тогда 
			ЕстьАдресВСтранеПроживания=0;
			Если ЕстьАдресПоРегистрации=0 Тогда
				//нет адреса по регистрации и адреса в стране проживания
				Сообщить(ФИО+": "+"Не указана страна проживания и адрес в стране проживания");
				Сообщить("	Не задан адрес места жительства в Российской Федерации (Адрес по регистрации)");
				Сообщить("	Необходимо указать один из адресов");
				ФормироватьСправкуОДоходах=0;
			КонецЕсли;
		ИначеЕсли (ПустоеЗначение(КодСтраныПроживания)=1) Тогда
			Сообщить(ФИО+": "+"Не указана страна проживания"); 
			ФормироватьСправкуОДоходах=0;
		ИначеЕсли ПустоеЗначение(АдресВСтранеПроживания)=1 Тогда
			Сообщить(ФИО+": "+"Не указан адрес в стране проживания");
			ФормироватьСправкуОДоходах=0;
		КонецЕсли;
		
	КонецЕсли;
	СписокДанныхПоСотруднику.Установить("КодСтраныПроживания",КодСтраныПроживания);
	СписокДанныхПоСотруднику.Установить("АдресВСтранеПроживания",АдресВСтранеПроживания);
	
	СписокДанныхПоСотруднику.Установить("ЕстьАдресВСтранеПроживания",ЕстьАдресВСтранеПроживания);
	
КонецФункции //ПолучитьДанныеПоСотрудник 

//******************************************************************************
// ВывестиСправкуОДоходахВФайл()
//
// Параметры:
//	
//
// 	Вызывается из формул элементов диалога:
//		
//
//	Описание:
//		
//
Процедура ВывестиСправкуОДоходахВФайл(Сотрудник,СтавкаНалога,ТаблицаДанных,СписокДанныхПоСотруднику,Резидент,хмлСправка,ТаблицаРеестра,НомерСправки=0)  
	
	Перем КодВычетаПраво[4];
	Перем СуммаВычетаПраво[4]; 
	
	//таблица с доходами
	ТаблицаДоходов 	= ТаблицаДанных.ТаблицаДоходов; 
	
	Если НомерСправки <> 0 Тогда 
		НомерДокументаВПачке = НомерСправки;
	КонецЕсли;
	
	//получим ОКАТО и КПП 
	ОКАТОСправки = ТаблицаДанных.ОКАТО;
	КППСправки   = ТаблицаДанных.КПП;
	
	//список вычетов
	СписокВычетовСтандартных 	= ТаблицаДанных.СписокВычетовПравоСт;
	СписокВычетовИмущественных 	= ТаблицаДанных.СписокВычетовПравоИм;
	
	
	ФамилияСотрудника  = СписокДанныхПоСотруднику.Получить("ФамилияСотрудника");
	ИмяСотрудника      = СписокДанныхПоСотруднику.Получить("ИмяСотрудника");
	ОтчествоСотрудника = СписокДанныхПоСотруднику.Получить("ОтчествоСотрудника");
	ИННСотрудника = СписокДанныхПоСотруднику.Получить("ИННСотрудника"); 
	ДатаРожденияСотрудника = СписокДанныхПоСотруднику.Получить("ДатаРожденияСотрудника"); 
	СтранаПМЖ = СписокДанныхПоСотруднику.Получить("СтранаПМЖ"); 
	Гражданство = СписокДанныхПоСотруднику.Получить("Гражданство"); 
	ВидДокумента = СписокДанныхПоСотруднику.Получить("ВидДокумента"); 
	СерияНомерДокумента = СписокДанныхПоСотруднику.Получить("СерияНомерДокумента");
	
	Индекс = СписокДанныхПоСотруднику.Получить("Индекс");
	Регион = СписокДанныхПоСотруднику.Получить("Регион");
	Район = СписокДанныхПоСотруднику.Получить("Район");
	Город = СписокДанныхПоСотруднику.Получить("Город");
	НаселенныйПункт = СписокДанныхПоСотруднику.Получить("НаселенныйПункт");
	Улица = СписокДанныхПоСотруднику.Получить("Улица");
	Дом = СписокДанныхПоСотруднику.Получить("Дом");
	Корпус = СписокДанныхПоСотруднику.Получить("Корпус");
	Квартира = СписокДанныхПоСотруднику.Получить("Квартира");
	
	КодСтраныПроживания = СписокДанныхПоСотруднику.Получить("КодСтраныПроживания");
	АдресВСтранеПроживания = СписокДанныхПоСотруднику.Получить("АдресВСтранеПроживания"); 
	
	ЕстьАдресПоРегистрации     = СписокДанныхПоСотруднику.Получить("ЕстьАдресПоРегистрации");
	ЕстьАдресВСтранеПроживания = СписокДанныхПоСотруднику.Получить("ЕстьАдресВСтранеПроживания");
	
	
	
	//*******************************************************************
	//Общие сведения информационной части ОбщСвИЧ            
	//******************************************************************* 
	
	хмлОбщСвИЧ 	= хмлСправка.СоздатьПодчиненныйЭлемент("ОбщСвИЧ");
	
	//год за который представляется справка
	хмлГодДох	= хмлОбщСвИЧ.СоздатьПодчиненныйЭлемент("ГодДох");
	хмлГодДох.Значение = ОтчетныйГод; 
	
	// Порядковый номер справки в отчетном налоговом периоде
	хмлНомСпр	= хмлОбщСвИЧ.СоздатьПодчиненныйЭлемент("НомСпр");
	хмлНомСпр.Значение = НомерДокументаВПачке;
	
	// Дата формирования справки
	хмлДатаСпр	= хмлОбщСвИЧ.СоздатьПодчиненныйЭлемент("ДатаСпр");
	хмлДатаСпр.Значение = ДатаФормированияФайла;
	
	// ИФНС, в которой налоговый агент состоит на учете
	хмлИФНСНА	= хмлОбщСвИЧ.СоздатьПодчиненныйЭлемент("ИФНСНА");
	хмлИФНСНА.Значение = КодИФНС;    
	
	//*******************************************************************
	//Общие сведения информационной части ОбщСвИЧ            
	//*******************************************************************
	
	//*******************************************************************
	//Сведения о налоговом агенте ИстДох            
	//*******************************************************************
	
	хмлИстДох 	= хмлСправка.СоздатьПодчиненныйЭлемент("ИстДох"); 
	
	Если ОтправительЮрЛицо=0 Тогда
		// предприниматель
		хмлСвНАФЛ = хмлИстДох.СоздатьПодчиненныйЭлемент("СвНАФЛ"); 
		
		//ИНН физического лица
		хмлИННФЛ	= хмлСвНАФЛ.СоздатьПодчиненныйЭлемент("ИННФЛ");
		хмлИННФЛ.Значение = ИНН; 
		
		//Фамилия, имя, отчество физического лица
		хмлФИОФЛ	= хмлСвНАФЛ.СоздатьПодчиненныйЭлемент("ФИОФЛ"); 
		
		хмлФамилия	= хмлФИОФЛ.СоздатьПодчиненныйЭлемент("Фамилия");
		хмлФамилия.Значение = ФамилияПредпринимателя;
		
		хмлИмя	= хмлФИОФЛ.СоздатьПодчиненныйЭлемент("Имя");
		хмлИмя.Значение =  ИмяПредпринимателя;
		
		Если ПустоеЗначение(ОтчествоПредпринимателя)=0 Тогда
			хмлОтчество	= хмлФИОФЛ.СоздатьПодчиненныйЭлемент("Отчество");
			хмлОтчество.Значение = ОтчествоПредпринимателя;    
		КонецЕсли;
		
		//Код по ОКАТО
		хмлОКАТО	= хмлСвНАФЛ.СоздатьПодчиненныйЭлемент("ОКАТО");
		хмлОКАТО.Значение = ОКАТОСправки;
		
		//Телефон (контактный)
		Если ПустоеЗначение(ТелефонОрганизации)=0 Тогда
			хмлТелефон 			= хмлСвНАФЛ.СоздатьПодчиненныйЭлемент("Телефон");
			хмлТелефон.Значение = ТелефонОрганизации;    
		КонецЕсли;
		
	Иначе  // Организация
		
		хмлСвНАЮЛ = хмлИстДох.СоздатьПодчиненныйЭлемент("СвНАЮЛ"); 
		
		//ИНН организации
		хмлИННЮЛ	= хмлСвНАЮЛ.СоздатьПодчиненныйЭлемент("ИННЮЛ");
		хмлИННЮЛ.Значение = ИНН; 
		
		//КПП организации 
		хмлКПП		= хмлСвНАЮЛ.СоздатьПодчиненныйЭлемент("КПП");
		хмлКПП.Значение = КППСправки; 
		
		//Наименование организации
		хмлНаимОрг	= хмлСвНАЮЛ.СоздатьПодчиненныйЭлемент("НаимОрг");
		хмлНаимОрг.Значение = НаименованиеНалоговогоАгента; 
		
		//Код по ОКАТО
		хмлОКАТО	= хмлСвНАЮЛ.СоздатьПодчиненныйЭлемент("ОКАТО");
		хмлОКАТО.Значение = ОКАТОСправки;
		
		//Телефон (контактный)
		Если ПустоеЗначение(ТелефонОрганизации)=0 Тогда
			хмлТелефон 			= хмлСвНАЮЛ.СоздатьПодчиненныйЭлемент("Телефон");
			хмлТелефон.Значение = ТелефонОрганизации;    
		КонецЕсли;
		
	КонецЕсли; 
	
	//*******************************************************************
	//Сведения о налоговом агенте ИстДох            
	//*******************************************************************
	
	//*******************************************************************
	//Данные о физичиском лице - получателе дохода ПолучДох           
	//******************************************************************* 
	
	хмлПолучДох 	= хмлСправка.СоздатьПодчиненныйЭлемент("ПолучДох"); 
	
	//ИНН физического лица 
	Если ПустоеЗначение(ИННСотрудника)=0 Тогда
		хмлИННФЛ	= хмлПолучДох.СоздатьПодчиненныйЭлемент("ИННФЛ");
		хмлИННФЛ.Значение = ИННСотрудника;     
	КонецЕсли; 
	
	//Фамилия, имя, отчество
	хмлФИО		= хмлПолучДох.СоздатьПодчиненныйЭлемент("ФИО");
	хмлФамилия	= хмлФИО.СоздатьПодчиненныйЭлемент("Фамилия");
	хмлИмя		= хмлФИО.СоздатьПодчиненныйЭлемент("Имя");
	хмлОтчество = хмлФИО.СоздатьПодчиненныйЭлемент("Отчество");
	хмлФамилия.Значение  = ФамилияСотрудника;
	хмлИмя.Значение 	 = ИмяСотрудника;
	хмлОтчество.Значение = ОтчествоСотрудника;
	
	// Статус,  1 - резидент, 2 - нерезидент.
	хмлСтатус	= хмлПолучДох.СоздатьПодчиненныйЭлемент("Статус"); 
	хмлСтатус.Значение = Резидент; 	
	
	// Дата рождения
	хмлДатаРожд = хмлПолучДох.СоздатьПодчиненныйЭлемент("ДатаРожд");
	хмлДатаРожд.Значение = ДатаРожденияСотрудника; 
	
	// гражданство
	хмлГражданство = хмлПолучДох.СоздатьПодчиненныйЭлемент("Гражданство");
	хмлГражданство.Значение = Гражданство;   
	
	// Удостоверение личности
	хмлУдЛичн		= хмлПолучДох.СоздатьПодчиненныйЭлемент("УдЛичн");
	хмлКодУдЛичн	= хмлУдЛичн.СоздатьПодчиненныйЭлемент("КодУдЛичн");
	хмлСерНомДок	= хмлУдЛичн.СоздатьПодчиненныйЭлемент("СерНомДок");
	хмлКодУдЛичн.Значение = ВидДокумента;
	хмлСерНомДок.Значение = СерияНомерДокумента;
	
	Если ЕстьАдресПоРегистрации=1 Тогда 
		
		хмлАдрМЖРФ		= хмлПолучДох.СоздатьПодчиненныйЭлемент("АдрМЖРФ");
		
		Если ПустоеЗначение(Индекс)=0 Тогда
			хмлИндекс 	= хмлАдрМЖРФ.СоздатьПодчиненныйЭлемент("Индекс");
			хмлИндекс.Значение 		= Индекс;
		КонецЕсли;
		
		хмлКодРегион= хмлАдрМЖРФ.СоздатьПодчиненныйЭлемент("КодРегион");
		хмлКодРегион.Значение 	= Регион;
		
		Если ПустоеЗначение(Район)=0 Тогда
			хмлРайон	= хмлАдрМЖРФ.СоздатьПодчиненныйЭлемент("Район");
			хмлРайон.Значение 		= Район;
		КонецЕсли; 
		
		Если ПустоеЗначение(Город)=0 Тогда
			хмлГород	= хмлАдрМЖРФ.СоздатьПодчиненныйЭлемент("Город");
			хмлГород.Значение 		= Город;
		КонецЕсли;
		
		Если ПустоеЗначение(НаселенныйПункт)=0 Тогда
			хмлНасПункт	= хмлАдрМЖРФ.СоздатьПодчиненныйЭлемент("НасПункт");
			хмлНасПункт.Значение 	= НаселенныйПункт;
		КонецЕсли;
		
		Если ПустоеЗначение(Улица)=0 Тогда
			хмлУлица	= хмлАдрМЖРФ.СоздатьПодчиненныйЭлемент("Улица");
			хмлУлица.Значение		= Улица;
		КонецЕсли;
		
		Если ПустоеЗначение(Дом)=0 Тогда
			хмлДом		= хмлАдрМЖРФ.СоздатьПодчиненныйЭлемент("Дом");
			хмлДом.Значение		    = Дом;
		КонецЕсли;
		
		Если ПустоеЗначение(Корпус)=0 Тогда
			хмлКорпус	= хмлАдрМЖРФ.СоздатьПодчиненныйЭлемент("Корпус");
			хмлКорпус.Значение 		= Корпус;
		КонецЕсли;
		
		Если ПустоеЗначение(Квартира)=0 Тогда
			хмлКварт	= хмлАдрМЖРФ.СоздатьПодчиненныйЭлемент("Кварт");
			хмлКварт.Значение 	= Квартира; 
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЕстьАдресВСтранеПроживания=1 Тогда
		
		хмлАдрИНО		= хмлПолучДох.СоздатьПодчиненныйЭлемент("АдрИНО");
		
		хмлКодСтр	= хмлАдрИно.СоздатьПодчиненныйЭлемент("КодСтр");
		хмлАдрТекст	= хмлАдрИно.СоздатьПодчиненныйЭлемент("АдрТекст");
		
		хмлКодСтр.Значение   = КодСтраныПроживания;
		хмлАдрТекст.Значение = АдресВСтранеПроживания; 
		
	КонецЕсли;
	
	//*******************************************************************
	//Данные о физичиском лице - получателе дохода           
	//*******************************************************************
	
	//*******************************************************************
	//Данные о доходах по ставке (разделы 3-5) СвДохСтав          
	//*******************************************************************
	
	хмлСвДохСтав 	= хмлСправка.СоздатьПодчиненныйЭлемент("СвДохСтав");
	
	
	хмлСтавка 	= хмлСвДохСтав.СоздатьПодчиненныйЭлемент("Ставка");
	хмлСтавка.Значение = СтавкаНалога;
	
	//раздел 3 Доходы и вычеты
	
	Для СчДоходов=1 по ТаблицаДоходов.КоличествоСтрок() Цикл; 
		
		ТаблицаДоходов.ПолучитьСтрокуПоНомеру(СчДоходов);
		хмлДохВыч	= хмлСвДохСтав.СоздатьПодчиненныйЭлемент("ДохВыч");
		//месяц
		СтрНомерМесяца = Формат(ТаблицаДоходов.Месяц, "Ч(0)2");
		хмлНомМес = хмлДохВыч.СоздатьПодчиненныйЭлемент("НомМес");
		хмлНомМес.Значение = СтрНомерМесяца;
		
		//код дохода 
		КодДохода  =СокрЛП(ТаблицаДоходов.КодДохода);
		СуммаДохода=ФорматироватьЗначение(ТаблицаДоходов.СуммаДохода,2);
		КодВычета  =СокрЛП(ТаблицаДоходов.КодВычета);
		СуммаВычета=ФорматироватьЗначение(ТаблицаДоходов.СуммаВычета,2); 
		
		хмлКодДоход = хмлДохВыч.СоздатьПодчиненныйЭлемент("КодДоход");
		хмлКодДоход.Значение = КодДохода;
		
		хмлСумДоход = хмлДохВыч.СоздатьПодчиненныйЭлемент("СумДоход");
		хмлСумДоход.Значение = СуммаДохода; 
		
		Если (ПустоеЗначение(КодВычета)=0) И (СуммаВычета<>0) Тогда
			хмлКодВычет = хмлДохВыч.СоздатьПодчиненныйЭлемент("КодВычет");
			хмлКодВычет.Значение = КодВычета;
			
			хмлСумВычет = хмлДохВыч.СоздатьПодчиненныйЭлемент("СумВычет");
			хмлСумВычет.Значение = СуммаВычета;
		КонецЕсли;
		
	КонецЦикла; 
	
	
	//Раздел 4.Стандартные и имущественные налоговые вычеты
	
	
	Если СтавкаНалога=13 Тогда
		
		//Стандартные налоговые вычеты, право и предоставленные
		
		ДобавилиУзел=0;
		//право на стандартные вычеты
		Для ИндексСтандартныхВычетов = 1 По СписокВычетовСтандартных.РазмерСписка() Цикл
			
			КодВычета = 0;
			СуммаВычета = СписокВычетовСтандартных.ПолучитьЗначение(ИндексСтандартныхВычетов, КодВычета);
			
			Если СуммаВычета=0 Тогда
				Продолжить;
			ИначеЕсли ДобавилиУзел=0 Тогда;
				хмлСтандВыч	= хмлСвДохСтав.СоздатьПодчиненныйЭлемент("СтандВыч");
				ДобавилиУзел=1;
			КонецЕсли;
			
			хмлПравоВыч	= хмлСтандВыч.СоздатьПодчиненныйЭлемент("ПравоВыч");
			
			хмлКодВычет	= хмлПравоВыч.СоздатьПодчиненныйЭлемент("КодВычет"); 
			хмлКодВычет.Значение = КодВычета;  
			
			хмлСумВычет	= хмлПравоВыч.СоздатьПодчиненныйЭлемент("СумВычет");
			хмлСумВычет.Значение = ФорматироватьЗначение(СуммаВычета,2);
			
		КонецЦикла;
		
		Если ДобавилиУзел=1 Тогда
			//предоставленные стандартные вычеты
			хмлСумСтНалВыч	= хмлСтандВыч.СоздатьПодчиненныйЭлемент("СумСтНалВыч");
			хмлСумСтНалВыч.Значение = ФорматироватьЗначение(ТаблицаДанных.СуммаПредоставленныхСтВычетов,2);    
		КонецЕсли;
		
		
		//Имущественные налоговые вычеты, право и предоставленные  
		
		ДобавилиУзел=0;
		//право на стандартные вычеты
		Для ИндексИмужественныхВычетов = 1 По СписокВычетовИмущественных.РазмерСписка() Цикл
			
			КодВычета = 0;
			СуммаВычета = СписокВычетовИмущественных.ПолучитьЗначение(ИндексИмужественныхВычетов, КодВычета); 
			
			Если СуммаВычета=0 Тогда
				Продолжить;
			ИначеЕсли ДобавилиУзел=0 Тогда;
				хмлИмущВыч	= хмлСвДохСтав.СоздатьПодчиненныйЭлемент("ИмущВыч");
				ДобавилиУзел=1;
			КонецЕсли;
			
			хмлПравоВыч	= хмлИмущВыч.СоздатьПодчиненныйЭлемент("ПравоВыч");
			
			хмлКодВычет	= хмлПравоВыч.СоздатьПодчиненныйЭлемент("КодВычет"); 
			хмлКодВычет.Значение = КодВычета;  
			
			хмлСумВычет	= хмлПравоВыч.СоздатьПодчиненныйЭлемент("СумВычет");
			хмлСумВычет.Значение = ФорматироватьЗначение(СуммаВычета,2);
			
		КонецЦикла;   
		
		Если ДобавилиУзел=1 Тогда
			хмлНомерУвед 	= хмлИмущВыч.СоздатьПодчиненныйЭлемент("НомерУвед");
			хмлНомерУвед.Значение=ТаблицаДанных.НомерУведомления; 
			
			хмлДатаУвед		= хмлИмущВыч.СоздатьПодчиненныйЭлемент("ДатаУвед");
			хмлДатаУвед.Значение=ТаблицаДанных.ДатаУведомления; 
			
			хмлИФНСУвед		= хмлИмущВыч.СоздатьПодчиненныйЭлемент("ИФНСУвед");
			хмлИФНСУвед.Значение=ТаблицаДанных.КодФНСУведомления;
			
			//предоставленные имущественные вычеты
			хмлСумИмуВыч	= хмлИмущВыч.СоздатьПодчиненныйЭлемент("СумИмуВыч");
			хмлСумИмуВыч.Значение = ФорматироватьЗначение(ТаблицаДанных.СуммаПредоставленныхИмВычетов,2);
		КонецЕсли;
		
	КонецЕсли;
	
	//Раздел 5.	
	хмлСГДНалПер	= хмлСвДохСтав.СоздатьПодчиненныйЭлемент("СГДНалПер"); 
	
	//обязательные
	ОбщаяСуммаДохода	= ТаблицаДанных.ОбщаяСуммаДохода;
	хмлСГДСумм 			= хмлСГДНалПер.СоздатьПодчиненныйЭлемент("СГДСумм");
	хмлСГДСумм.Значение = ФорматироватьЗначение(ОбщаяСуммаДохода,2);
	
	ОблагаемаяСуммаДохода	= ТаблицаДанных.ОблагаемаяСуммаДохода;
	хмлОблСумм 				= хмлСГДНалПер.СоздатьПодчиненныйЭлемент("ОблСумм");
	хмлОблСумм.Значение 	= ФорматироватьЗначение(ОблагаемаяСуммаДохода,2);
	
	СуммаНалогаИсчисленная	= ТаблицаДанных.СуммаНалогаИсчисленная;
	хмлНИОблСумм 			= хмлСГДНалПер.СоздатьПодчиненныйЭлемент("НИОблСумм");
	хмлНИОблСумм.Значение 	= ФорматироватьЗначение(СуммаНалогаИсчисленная,0);
	
	СуммаНалогаУдержанная	= ТаблицаДанных.СуммаНалогаУдержанная;
	хмлНУОблСумм 			= хмлСГДНалПер.СоздатьПодчиненныйЭлемент("НУОблСумм");
	хмлНУОблСумм.Значение 	= ФорматироватьЗначение(СуммаНалогаУдержанная,0);
	
	//необязательные 
	СуммаВозвратаПоПерерасчету  = ТаблицаДанных.СуммаВозвратаПоПерерасчету;
	Если СуммаВозвратаПоПерерасчету<>0 Тогда
		хмлВозврСуммПЛ 		    = хмлСГДНалПер.СоздатьПодчиненныйЭлемент("ВозврСуммПЛ");
		хмлВозврСуммПЛ.Значение = ФорматироватьЗначение(СуммаВозвратаПоПерерасчету,0);    
	КонецЕсли; 
	
	СуммаЗачтеннаяПоПерерасчету	= ТаблицаДанных.СуммаЗачтеннаяПоПерерасчету;
	Если СуммаЗачтеннаяПоПерерасчету<>0 Тогда
		хмлЗачСуммПЛ 		    = хмлСГДНалПер.СоздатьПодчиненныйЭлемент("ЗачСуммПЛ");
		хмлЗачСуммПЛ.Значение   = ФорматироватьЗначение(СуммаЗачтеннаяПоПерерасчету,0);    
	КонецЕсли;
	
	СуммаУдержаннаяПоПерерасчету = ТаблицаДанных.СуммаУдержаннаяПоПерерасчету;
	Если СуммаУдержаннаяПоПерерасчету<>0 Тогда
		хмлУдСуммПЛ 		    = хмлСГДНалПер.СоздатьПодчиненныйЭлемент("УдСуммПЛ");
		хмлУдСуммПЛ.Значение    = ФорматироватьЗначение(СуммаУдержаннаяПоПерерасчету,0);    
	КонецЕсли;
	
	ЗадолженностьЗаНалогоплательщиком = ТаблицаДанных.ЗадолженностьЗаНалогоплательщиком;
	Если ЗадолженностьЗаНалогоплательщиком<>0 Тогда
		хмлДолгНП 		    	= хмлСГДНалПер.СоздатьПодчиненныйЭлемент("ДолгНП");
		хмлДолгНП.Значение    	= ФорматироватьЗначение(ЗадолженностьЗаНалогоплательщиком,0);    
	КонецЕсли;
	
	СуммаИзлишнеУдержанная  	= ТаблицаДанных.СуммаИзлишнеУдержанная;
	Если СуммаИзлишнеУдержанная<>0 Тогда
		хмлДолгНА 		    	= хмлСГДНалПер.СоздатьПодчиненныйЭлемент("ДолгНА");
		хмлДолгНА.Значение    	= ФорматироватьЗначение(СуммаИзлишнеУдержанная,0);    
	КонецЕсли;
	
	СуммаНаВзыскание 			= ТаблицаДанных.СуммаНаВзыскание; 
	Если СуммаНаВзыскание<>0 Тогда
		хмлВзыскИФНС 		    = хмлСГДНалПер.СоздатьПодчиненныйЭлемент("ВзыскИФНС");
		хмлВзыскИФНС.Значение   = ФорматироватьЗначение(СуммаНаВзыскание,0);    
	КонецЕсли; 
	
	
	//*******************************************************************
	//Данные о доходах по ставке (разделы 3-5)           
	//*******************************************************************  
	
	
	
	// Введем данные в таблицу значений для отчета "Реестр"
	ТаблицаРеестра.НоваяСтрока();
	ТаблицаРеестра.НомерСправки = НомерДокументаВПачке;
	ТаблицаРеестра.Сотрудник = Сотрудник;
	ТаблицаРеестра.СтавкаНалога = СтавкаНалога;
	ТаблицаРеестра.ОбщаяСуммаДохода = ОбщаяСуммаДохода;
	ТаблицаРеестра.СуммаНалогаИсчисленного = СуммаНалогаИсчисленная;
	ТаблицаРеестра.СуммаНалогаУдержанного  = СуммаНалогаУдержанная;  
	
	Если НомерСправки=0 Тогда 
		НомерДокументаВПачке = НомерДокументаВПачке+1;
	Иначе
		НомерДокументаВПачке = НомерСправки;
	КонецЕсли;
	

КонецПроцедуры //ВывестиСправкуОДоходахВФайл()

//******************************************************************************
// Описание:
//		формируется выходной файл для ИФНС, сопровождаемый печатной формой Реестра
//		для периода отчета с 2005 года
//
//
Процедура СоздатьХМЛФайлВыгрузки(ВходнойСписокСотрудников)  
	
	Перем ДатаЗаполнения, КПП, ГУИДФайла, ИмяВыходногоФайла;
	
	ФормированиеФайла = 1;
	
	//проверим наличие каталога куда создаем файл
	Ктлг=СокрЛП(Каталог);
	Если Прав(Ктлг,1)="\" Тогда
		ПутьВывода = Лев(Ктлг,СтрДлина(Ктлг)-1)
	Иначе
		ПутьВывода = Ктлг;
	КонецЕсли;
	Если Лев(ПутьВывода, 2) <> "\\" тогда
		Если ФС.СуществуетФайл(ПутьВывода+"\NUL")=0 Тогда
			Предупреждение("Невозможен вывод файла данных для передачи в ИФНС в каталог "+ПутьВывода+"!");
			Возврат;                     
		КонецЕсли;
	КонецЕсли;   
	
	Если ДанныеЗаполненыВерно() = 0 Тогда
		Возврат;
	КонецЕсли;  
	
	ГУИДФайла = УникальныйИдентификатор; //берем из формы
	Если (ПустоеЗначение(ГУИДФайла)=1) или (СтрДлина(СОКРЛП(ГУИДФайла))<>36) Тогда
		Стр="Не задан уникальный идентификатор передаваемого файла"+РазделительСтрок+"или длина уникального идентификатора меньше 36 символов";
        Предупреждение (""+Стр);
		Возврат;
	КонецЕсли;
	//т.к. ГУИД присутствует в имени файла, проверим наличие запрещенных символов 
	//попробуем записать на диск файл с именем - ГУИД
	ФайлПустой = СоздатьОбъект("Текст");
	ФайлПустой.ДобавитьСтроку(ГУИДФайла);
	ИмяФайлаПроверки=ГУИДФайла+".txt";
	Попытка
		ФайлПустой.Записать(СокрЛП(ПутьВывода)+"\"+ИмяФайлаПроверки);
		ФС.УдалитьФайл(СокрЛП(ПутьВывода)+"\"+ИмяФайлаПроверки);
	Исключение 
		Стр="Не верно задан уникальный идентификатор передаваемого файла."+РазделительСтрок+"Сформируйте новый уникальный идентификатор.";
        Предупреждение (""+Стр);
		Возврат;
	КонецПопытки;
	
	
	//Загрузим внешнюю компоненту V7Plus.dll
	СписокВозможныхМест	=	СоздатьОбъект("СписокЗначений");
	СписокВозможныхМест.ДобавитьЗначение(КаталогИБ()		+	"v7plus.dll"	);
	СписокВозможныхМест.ДобавитьЗначение(КаталогПрограммы()	+	"v7plus.dll"	);
	СписокВозможныхМест.ДобавитьЗначение(КаталогИБ()		+	"ExtForms\"	+	"v7plus.dll"	);
	
	гПутьОбъекта_КомпонентаV7plus	=	НайтиПервыйСуществующийФайл(СписокВозможныхМест);
	
	Если ЗагрузитьВнешнююКомпоненту(гПутьОбъекта_КомпонентаV7plus) <> 1	Тогда
		Предупреждение("Компонента v7plus.dll не найдена! Файл выгрузки не сформирован");
		Возврат;
	КонецЕсли;
	
	
	// Создадим таблицу значений для формирования реестра и расшифровки
	ТаблицаРеестра = СоздатьОбъект("ТаблицаЗначений");
	ТаблицаРеестра.НоваяКолонка("НомерСправки", "Число");
	ТаблицаРеестра.НоваяКолонка("Сотрудник"); 
	ТаблицаРеестра.НоваяКолонка("СтавкаНалога");
	ТаблицаРеестра.НоваяКолонка("ОбщаяСуммаДохода","Число",15,2);
	ТаблицаРеестра.НоваяКолонка("СуммаНалогаИсчисленного", "Число", 15, 2);
	ТаблицаРеестра.НоваяКолонка("СуммаНалогаУдержанного", "Число", 15, 2);
	
	ОКАТООрганизации = СокрЛП(глПолучитьНалог("НДФЛ").КодОКАТО);
    
	КодИФНС = Константа.КодИМНС;
	ИНН = СОКРЛП(Константа.ИННОрганизации);
	Позиция = Найти(ИНН,"\");
	Позиция = ?(Найти(ИНН,"\") = 0,Найти(ИНН,"/") , Позиция);
	Если Позиция > 0 Тогда
		ИНН = Лев(ИНН,Позиция-1);
		КПП = Прав(Константа.ИННОрганизации,9);
	Иначе
		КПП ="";
	КонецЕсли;
	
	ДатаФормированияФайла = Формат(ДатаСоставления, "ДДДММГГГГ");//дата заполнения данных, используется в файле XML 
	ДатаФормированияФайлаПередачи = СтрЗаменить(Строка(Формат(ДатаСоставления, "ДГГГГММДД")),".","");//используется в имени файла
	
	ОтчетныйГод = Строка(СпЛет.ПолучитьЗначение(СпЛет.ТекущаяСтрока())); 
   	СокращенноеНаименованиеОрганизации=СОКРЛП(Константа.НазваниеОрганизации);
	ТелефонОрганизации = Лев(СокрЛП(Константа.ТелефоныОрганизации),20);
	
	НомерРелиза = "1С:БУХГАЛТЕРИЯ "+СОКРЛП(Константа.НомерРелиза); 
	
	//определим отправителя и сформируем переменные
	ОтправительЮрЛицо=1; 
	ФамилияПредпринимателя="";
	ИмяПредпринимателя    ="";
	Если ПустоеЗначение(КПП)=1 Тогда
		//отправитель - ПБОЮЛ
		ОтправительЮрЛицо=0;
		Список = глРазложить(Константа.НазваниеОрганизации, " ");
		ФамилияПредпринимателя = Лев(Список.ПолучитьЗначение(1), 60);  
		ИмяПредпринимателя     = Лев(Список.ПолучитьЗначение(2),60); 
		Отчество = "";
		Если Список.РазмерСписка() > 2 Тогда
			Для Сч = 3 По Список.РазмерСписка() Цикл
				Отчество = Отчество+Список.ПолучитьЗначение(Сч);
			КонецЦикла;
		КонецЕсли; 
		ОтчествоПредпринимателя=Лев(Отчество,60);
		НаименованиеНалоговогоАгента = ФамилияПредпринимателя+" "+ИмяПредпринимателя+" "+ОтчествоПредпринимателя;
	Иначе
		НаименованиеНалоговогоАгента = СокращенноеНаименованиеОрганизации;
	КонецЕсли; 
    	
	ФамилияИсполнителя  =""; 
	ИмяИсполнителя      =""; 
	ОтчествоИсполнителя ="";
	глФамилияИмяОтчество(Исполнитель,ФамилияИсполнителя,ИмяИсполнителя,ОтчествоИсполнителя);
	ДолжностьОтправителя=Лев(СокрЛП(Исполнитель.Должность),45);
	
	//имя файла передачи
	ИмяВыходногоФайла = "ДОХОД_2НДФЛ_"+КодИФНС+"_"+ИНН+КПП+"_"+ДатаФормированияФайлаПередачи+"_"+ГУИДФайла+".xml";
	
	//******************************************************************************
	// Формируем служебную часть файла.
	//******************************************************************************
	// Она отностится к файлу.
	//  GUID, Дата (формирования файла),  ТипИнф (Тип информации),  ВерсФорм (Версия формата), 
	//  ИдПол (Идентификатор получателя - код налогового органа), ВерсПрог (Версия передающей программы)
	XMLАнализатор	=	СоздатьОбъект("AddIn.XMLParser");
	ХМЛФайлДанных	=	XMLАнализатор.СоздатьДокумент();
	хмлКорень = ХМЛФайлДанных.СоздатьПодчиненныйЭлемент("НДФЛ2");
	
	//******************************************************************************
	// Сформировали служебную часть файла.
	//******************************************************************************
	
	НомерДокументаВПачке = НомерПервойСправки;
	
	// Получим доходы и вычеты сотрудников.
	глСтатусСтрока(Контекст,"Подготовка данных о доходах сотрудников");
	ДоходыВычетыНалогиСотрудников = ""; 
	Если глСобратьДанныеДляНДФЛВыбор(ДоходыВычетыНалогиСотрудников,ВходнойСписокСотрудников,ДатаАктуальности,Контекст) = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ВсегоСотрудников=ВходнойСписокСотрудников.РазмерСписка();
	Для ИндексСотрудникаВСписке = 1 По ВсегоСотрудников Цикл 
		
		глСтатусСтрока(Контекст,"Формируется файл передачи данных ("+Окр(ИндексСотрудникаВСписке/ВсегоСотрудников*100)+"%)");
		
		Сотрудник = ВходнойСписокСотрудников.ПолучитьЗначение(ИндексСотрудникаВСписке);  
		
		ФормироватьСправкуОДоходах=1;
		
		//******************************************************************************
		//подготовка данных для разделов 3...5 по сотруднику 
		//******************************************************************************
		
		СтрокаИтоговойТаблицы = ИндексСотрудникаВСписке*12;
		// во 2 колонке - таблица доходов
		// доходы смотрим за декабрь месяц нарастающим итогом за год
		ТаблицаДоходов = ДоходыВычетыНалогиСотрудников.ПолучитьЗначение(СтрокаИтоговойТаблицы,2); 
		
		Если ТипЗначения(ТаблицаДоходов) <> 100 Тогда  // доходов не было
			Продолжить
		КонецЕсли;
		
		Если ТаблицаДоходов.КоличествоСтрок() = 0 Тогда  // доходов не было
			Продолжить
		КонецЕсли;      
		
		Доходы13 = "";   
		Доходы9 = "";
		Доходы35 = "";
		
		СтатусНеРезидента=Сотрудник.Статус.Получить(КонГода(ДатаАктуальности));
		Резидент=?(СтатусНеРезидента=1,1,2);
		
		СобратьДанныеОДоходахСотрудника(Сотрудник,Резидент,ДоходыВычетыНалогиСотрудников,ИндексСотрудникаВСписке,ОКАТООрганизации,КПП, Доходы13,Доходы9,Доходы35);
		
		//******************************************************************************
		//подготовили данные для разделов 3...5 по сотруднику 
		//******************************************************************************   
		
		//Определим по каким ставкам необходимо будет формировать справки
		СписокСтавокНДФЛ=СоздатьОбъект("СписокЗначений");
		Если Резидент=2 Тогда     
			// у не резидентов только одна ставка - 30% 
			Если Доходы13.КоличествоСтрок()>0 Тогда
				СписокСтавокНДФЛ.ДобавитьЗначение(30);    
			КонецЕсли;
			
			Если ДатаАктуальности > '31.12.2007' Тогда
				Если Доходы9.КоличествоСтрок()>0 Тогда
					СписокСтавокНДФЛ.ДобавитьЗначение(15);
				КонецЕсли;
			КонецЕсли;
			
		Иначе
			//определим, сколько справок необходимо формировать на сотрудника
			Если Доходы13.КоличествоСтрок()>0 Тогда
				СписокСтавокНДФЛ.ДобавитьЗначение(13);
			КонецЕсли;
			Если Доходы9.КоличествоСтрок()>0 Тогда
				СписокСтавокНДФЛ.ДобавитьЗначение(9);
			КонецЕсли;
			Если Доходы35.КоличествоСтрок()>0 Тогда
				СписокСтавокНДФЛ.ДобавитьЗначение(35);
			КонецЕсли;
		КонецЕсли; 
		
		Если СписокСтавокНДФЛ.РазмерСписка()=0 Тогда
			//нет доходов
			Продолжить;
		КонецЕсли; 
		
		
		//******************************************************************************
		//подготовка данных для раздела 2 по сотруднику, кроме ОКАТО и КПП
		//******************************************************************************  
		
		СписокДанныхПоСотруднику = СоздатьОбъект("СписокЗначений");
		СписокДанныхПоСотруднику.ДобавитьЗначение("","ФамилияСотрудника");
		СписокДанныхПоСотруднику.ДобавитьЗначение("","ИмяСотрудника");
		СписокДанныхПоСотруднику.ДобавитьЗначение("","ОтчествоСотрудника");
		СписокДанныхПоСотруднику.ДобавитьЗначение("","ИННСотрудника");
		СписокДанныхПоСотруднику.ДобавитьЗначение("","ДатаРожденияСотрудника");
		СписокДанныхПоСотруднику.ДобавитьЗначение("","СтранаПМЖ");
		СписокДанныхПоСотруднику.ДобавитьЗначение("","Гражданство");
		СписокДанныхПоСотруднику.ДобавитьЗначение("","ВидДокумента");
		СписокДанныхПоСотруднику.ДобавитьЗначение("","СерияНомерДокумента");
		СписокДанныхПоСотруднику.ДобавитьЗначение("","Индекс");
		СписокДанныхПоСотруднику.ДобавитьЗначение("","Регион");
		СписокДанныхПоСотруднику.ДобавитьЗначение("","Район");
		СписокДанныхПоСотруднику.ДобавитьЗначение("","Город");
		СписокДанныхПоСотруднику.ДобавитьЗначение("","НаселенныйПункт");
		СписокДанныхПоСотруднику.ДобавитьЗначение("","Улица");
		СписокДанныхПоСотруднику.ДобавитьЗначение("","Дом");
		СписокДанныхПоСотруднику.ДобавитьЗначение("","Корпус");
		СписокДанныхПоСотруднику.ДобавитьЗначение("","Квартира");
		СписокДанныхПоСотруднику.ДобавитьЗначение("","КодСтраныПроживания");
		СписокДанныхПоСотруднику.ДобавитьЗначение("","АдресВСтранеПроживания"); 
		СписокДанныхПоСотруднику.ДобавитьЗначение("","ЕстьАдресПоРегистрации)");
		СписокДанныхПоСотруднику.ДобавитьЗначение("","ЕстьАдресВСтранеПроживания");
		
		ФИО="";
		ФормироватьСправкуОДоходах = ПолучитьДанныеПоСотруднику(Сотрудник,СписокДанныхПоСотруднику,Резидент,ФИО);
		
		
		Если ФормироватьСправкуОДоходах=0 Тогда
			//обнаружены ошибки в данных по сотруднику, не выводим его в файл
			Сообщить(ФИО+": "+"Данные по сотруднику не включены в файл передачи!!!");
			Сообщить("******************************************************************");
			Продолжить;
		КонецЕсли;
		//******************************************************************************
		//подготовили данные для раздела 2 по сотруднику 
		//****************************************************************************** 
		
		//******************************************************************************
		//Формируем справки по сотруднику
		//****************************************************************************** 
		
		Для СчДоходовПоСтавкам=1 по СписокСтавокНДФЛ.РазмерСписка() Цикл
			
			СтавкаНалога=СписокСтавокНДФЛ.ПолучитьЗначение(СчДоходовПоСтавкам);
			
			// получим таблицу по ставке НДФЛ 
			Если (СтавкаНалога=9)  ИЛИ (СтавкаНалога=15) Тогда
				ТаблицаДанных=Доходы9;
			ИначеЕсли СтавкаНалога=35 Тогда
				ТаблицаДанных=Доходы35;                 
			Иначе
				ТаблицаДанных=Доходы13;                 
			КонецЕсли;                       
			
			ТаблицаДанных.ВыбратьСтроки();
			Пока ТаблицаДанных.ПолучитьСтроку()=1 Цикл
				
				//получим ОКАТО и КПП 
				ОКАТОСправки = ТаблицаДанных.ОКАТО;
				КППСправки   = ТаблицаДанных.КПП;
				
				//начинаем вывод справки по выбранной ставке НДФЛ и ОКАТО
				хмлСправка = хмлКорень.СоздатьПодчиненныйЭлемент("Справка");
				
				ВывестиСправкуОДоходахВФайл(Сотрудник,СтавкаНалога,ТаблицаДанных,СписокДанныхПоСотруднику,Резидент, хмлСправка,ТаблицаРеестра);  
				
			КонецЦикла; //цикл по ОКАТО выбранной ставки НДФЛ, при формировании справок 
			
		КонецЦикла; //цикл по ставкам НДФЛ, при формировании справок 
		
		//******************************************************************************
		//Сформировали справки по сотруднику
		//****************************************************************************** 
		
	КонецЦикла; //цикл по сотрудникам 
	
	РезФайл		=	СоздатьОбъект("AddIn.V7TextFile");
	РезФайл.ОткрытьФайл(СокрЛП(ПутьВывода)+"\"+ИмяВыходногоФайла, 1);
	
	
	Данные = ХМЛФайлДанных.ВыбратьУзел("НДФЛ2");
	РезФайл.ЗаписатьСтроку("<?xml version=""1.0"" encoding=""windows-1251""?>");
	
	ИдФайла = "ДОХОД_2НДФЛ_"+КодИФНС+"_"+ИНН+КПП+"_"+ДатаФормированияФайлаПередачи+"_"+ГУИДФайла;
	
	РезФайл.ЗаписатьСтроку("<НДФЛ2 xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance"" ИдФайл="""+ИдФайла+""" ВерсПрог="""+НомерРелиза+""" ВерсФорм=""4.00001"">");
	Для Сч = 1 По Данные.КоличествоПодчиненных() Цикл
		ЗаписатьУзелВФайл(РезФайл, Данные.ПолучитьПодчиненныйПоНомеру(Сч),СимволТабуляции);                                   
	КонецЦикла;
	РезФайл.ЗаписатьСтроку("</НДФЛ2>");
	РезФайл.ЗакрытьФайл();
	
	СформироватьРеестр(ТаблицаРеестра);
	
	глСтатусСтрока(Контекст, "Обработка завершена"); 
	
КонецПроцедуры // СоздатьХМЛФайлВыгрузки 

//******************************************************************************
// ВывестиСправкуОДоходах()
//
// Параметры:
//	
//
// 	Вызывается из формул элементов диалога:
//		
//
//	Описание:
//		
//
Процедура ВывестиСправкуОДоходах(Сотрудник,СтавкаНалога,ТаблицаДанных,СписокДанныхПоСотруднику,Резидент,Таб, НомерСправки=0)
	
	Перем КодВычетаПраво[4];
	Перем СуммаВычетаПраво[4]; 
	
	//таблица с доходами
	ТаблицаДоходов 	= ТаблицаДанных.ТаблицаДоходов; 
	
	Если НомерСправки <> 0 Тогда 
		НомерДокументаВПачке = НомерСправки;
	КонецЕсли;
	
	//получим ОКАТО и КПП 
	ОКАТОСправки = ТаблицаДанных.ОКАТО;
	КППСправки   = ТаблицаДанных.КПП; 
	
	//список вычетов
	СписокВычетовСтандартных 	= ТаблицаДанных.СписокВычетовПравоСт;
	СписокВычетовИмущественных 	= ТаблицаДанных.СписокВычетовПравоИм;
	
	
	ФИОСотрудника = СписокДанныхПоСотруднику.Получить("ФИОСотрудника"); 
	ИННСотрудника = СписокДанныхПоСотруднику.Получить("ИННСотрудника"); 
	ДатаРожденияСотрудника = СписокДанныхПоСотруднику.Получить("ДатаРожденияСотрудника"); 
	СтранаПМЖ = СписокДанныхПоСотруднику.Получить("СтранаПМЖ"); 
	Гражданство = СписокДанныхПоСотруднику.Получить("Гражданство"); 
	ВидДокумента = СписокДанныхПоСотруднику.Получить("ВидДокумента"); 
	СерияНомерДокумента = СписокДанныхПоСотруднику.Получить("СерияНомерДокумента");
	
	Индекс = СписокДанныхПоСотруднику.Получить("Индекс");
	Регион = СписокДанныхПоСотруднику.Получить("Регион");
	Район = СписокДанныхПоСотруднику.Получить("Район");
	Город = СписокДанныхПоСотруднику.Получить("Город");
	НаселенныйПункт = СписокДанныхПоСотруднику.Получить("НаселенныйПункт");
	Улица = СписокДанныхПоСотруднику.Получить("Улица");
	Дом = СписокДанныхПоСотруднику.Получить("Дом");
	Корпус = СписокДанныхПоСотруднику.Получить("Корпус");
	Квартира = СписокДанныхПоСотруднику.Получить("Квартира");
	
	КодСтраныПроживания = СписокДанныхПоСотруднику.Получить("КодСтраныПроживания");
	АдресВСтранеПроживания = СписокДанныхПоСотруднику.Получить("АдресВСтранеПроживания");
	
	//Выводим секцию с Раздела 1 и включая заготовок Раздела 3
	Таб.ВывестиСекцию("Часть1");
	
	КоличествоДоходов=ТаблицаДоходов.КоличествоСтрок();
	КоличествоДополнительныхСтрок=0; //количество доп. строк, елси не вписались в 9 строк
	//"разобьем" таблицу доходов на две части, левую и правую, для вывода на печать
	НачалоЧасть1=1;
	Если КоличествоДоходов<=18 Тогда
		//заполняем только левую часть
		КонецЧасть1  = КоличествоДоходов;
		НачалоЧасть2 = 0;
		КонецЧасть2  = 0;
	ИначеЕсли КоличествоДоходов<=36 Тогда 
		//заполняем полностью левую и праву часть, без добавления доп. строк  
		КонецЧасть1  = 18;
		НачалоЧасть2 = 19;
		КонецЧасть2  = КоличествоДоходов;
	Иначе 
		//необходимо добавить строки
		КоличествоДополнительныхСтрок = Окр((КоличествоДоходов-36)/2,0,1);
		КонецЧасть1  = 18+КоличествоДополнительныхСтрок;
		НачалоЧасть2 = 19+КоличествоДополнительныхСтрок;
		КонецЧасть2  = КоличествоДоходов;
	КонецЕсли;
	
	Мес1 = ""; КодДохода1 = ""; СуммаДохода1 = ""; КодВычета1 = ""; СуммаВычета1 = "";
	Мес2 = ""; КодДохода2 = ""; СуммаДохода2 = ""; КодВычета2 = ""; СуммаВычета2 = "";
	Для Счетчик=1 По КонецЧасть1 Цикл 
		
		ТаблицаДоходов.ПолучитьСтрокуПоНомеру(Счетчик);
		СтрНомерМесяца = Формат(ТаблицаДоходов.Месяц, "Ч(0)2");
		КодДохода 	   = ТаблицаДоходов.КодДохода;
		СуммаДохода    = ТаблицаДоходов.СуммаДохода;
		КодВычета      = ТаблицаДоходов.КодВычета;
		СуммаВычета    = ТаблицаДоходов.СуммаВычета; 
		
		Мес1 		   = СтрНомерМесяца;
		КодДохода1     = КодДохода; 
		СуммаДохода1   = ФорматироватьЗначение(СуммаДохода,2); 
		КодВычета1	   = КодВычета;
		СуммаВычета1   = ФорматироватьЗначение(СуммаВычета,2); 
		
		СчетчикКолонки2=Счетчик+НачалоЧасть2-1;
		Если ((Счетчик-1)<>СчетчикКолонки2) и (СчетчикКолонки2<=КонецЧасть2) Тогда 
			
			ТаблицаДоходов.ПолучитьСтрокуПоНомеру(СчетчикКолонки2);
			СтрНомерМесяца = Формат(ТаблицаДоходов.Месяц, "Ч(0)2");
			КодДохода 	   = ТаблицаДоходов.КодДохода;
			СуммаДохода    = ТаблицаДоходов.СуммаДохода;
			КодВычета      = ТаблицаДоходов.КодВычета;
			СуммаВычета    = ТаблицаДоходов.СуммаВычета;
			
			Мес2 		   = СтрНомерМесяца;
			КодДохода2     = КодДохода; 
			СуммаДохода2   = ФорматироватьЗначение(СуммаДохода,2);
			КодВычета2	   = КодВычета;
			СуммаВычета2   = ФорматироватьЗначение(СуммаВычета,2); 
			
		Иначе 
			
			Мес2 = ""; КодДохода2 = ""; СуммаДохода2 = ""; КодВычета2 = ""; СуммаВычета2 = "";
			
		КонецЕсли;
		
		Таб.ВывестиСекцию("СтрокаДоходов");
	КонецЦикла;	
	
	Если КонецЧасть1<18 Тогда 
		
		Мес1 = ""; КодДохода1 = ""; СуммаДохода1 = ""; КодВычета1 = ""; СуммаВычета1 = "";
		Мес2 = ""; КодДохода2 = ""; СуммаДохода2 = ""; КодВычета2 = ""; СуммаВычета2 = "";
		
		КоличествоДополнительныхСтрок= 18 - КонецЧасть1;
		Для СчДопСтрок=1 по КоличествоДополнительныхСтрок Цикл 
			Таб.ВывестиСекцию("СтрокаДоходов");
		КонецЦикла;
		
	КонецЕсли;
	
	// РАЗДЕЛ 4 
	// Заполняется данными только для ставки налога 13% 
	Таб.ВывестиСекцию("Часть2"); 
	
	Для Сч=1 по 4 Цикл
		КодВычетаПраво[Сч]  = "";
		СуммаВычетаПраво[Сч]= "";
	КонецЦикла;
	
	Если СтавкаНалога=13 Тогда   
		                             
		КоличествоВычетовСт = СписокВычетовСтандартных.РазмерСписка();
		КоличествоВычетовИм = СписокВычетовИмущественных.РазмерСписка();
		
		Если (КоличествоВычетовСт=0) и (КоличествоВычетовИм=0) Тогда 
			
			Таб.ВывестиСекцию("СтрокаВычетов");
			
		Иначе 
			
			НомерВМассиве = 0;
			Для СчВычетов=1 по КоличествоВычетовСт Цикл
				
				КодВычета   = "";
				СуммаВычета = СписокВычетовСтандартных.ПолучитьЗначение(СчВычетов, КодВычета);
				
				Если СуммаВычета=0 Тогда
					Продолжить;
				КонецЕсли;
				
				НомерВМассиве = НомерВМассиве+1;
				
				Если НомерВМассиве>4 Тогда
					Таб.ВывестиСекцию("СтрокаВычетов");
					НомерВМассиве = 1;    
				КонецЕсли;
				
				КодВычетаПраво[НомерВМассиве]  = КодВычета;
				СуммаВычетаПраво[НомерВМассиве]= ФорматироватьЗначение(СуммаВычета,2);
				
			КонецЦикла;
			
			//продолжим по имущественным вычетам
			Для СчВычетов=1 по КоличествоВычетовИм Цикл
				
				КодВычета   = "";
				СуммаВычета = СписокВычетовИмущественных.ПолучитьЗначение(СчВычетов, КодВычета);  
				
				Если СуммаВычета=0 Тогда
					Продолжить;
				КонецЕсли;
				
				НомерВМассиве = НомерВМассиве+1;
				
				Если НомерВМассиве>4 Тогда
					Таб.ВывестиСекцию("СтрокаВычетов");
					НомерВМассиве = 1;    
				КонецЕсли;
				
				КодВычетаПраво[НомерВМассиве]  = КодВычета;
				СуммаВычетаПраво[НомерВМассиве]= ФорматироватьЗначение(СуммаВычета,2);
				
			КонецЦикла;
			
			Если НомерВМассиве<4 Тогда
				Для Сч=НомерВМассиве+1 По 4 Цикл
					КодВычетаПраво[Сч]  = "";
					СуммаВычетаПраво[Сч]= "";	
				КонецЦикла;
			КонецЕсли;
			Таб.ВывестиСекцию("СтрокаВычетов");
			
		КонецЕсли;
		
		пСуммаПредоставленныхСтВычетов=ФорматироватьЗначение(ТаблицаДанных.СуммаПредоставленныхСтВычетов,2);
		пСуммаПредоставленныхИмВычетов=ФорматироватьЗначение(ТаблицаДанных.СуммаПредоставленныхИмВычетов,2);

		пНомерУведомления  = ФорматироватьЗначение(ТаблицаДанных.НомерУведомления);
		пДатаУведомления   = ФорматироватьЗначение(ТаблицаДанных.ДатаУведомления);
		пКодФНСУведомления = ФорматироватьЗначение(ТаблицаДанных.КодФНСУведомления);
		
		Таб.ВывестиСекцию("Часть3");
		
	Иначе 
		// 
		Таб.ВывестиСекцию("СтрокаВычетов");
		
		пНомерУведомления  = "";
		пДатаУведомления   = "";
		пКодФНСУведомления = "";
		пСуммаПредоставленныхСтВычетов= "";
		пСуммаПредоставленныхИмВычетов= "";
		
		Таб.ВывестиСекцию("Часть3");
		
	КонецЕсли;
	
	
	// Раздел 5.
	ОбщаяСуммаДохода		= ТаблицаДанных.ОбщаяСуммаДохода;           
	ОблагаемаяСуммаДохода	= ТаблицаДанных.ОблагаемаяСуммаДохода;  
	СуммаНалогаИсчисленная	= ТаблицаДанных.СуммаНалогаИсчисленная;
	СуммаНалогаУдержанная	= ТаблицаДанных.СуммаНалогаУдержанная; 
	
	СуммаНаВзыскание					= ТаблицаДанных.СуммаНаВзыскание;
	ЗадолженностьЗаНалогоплательщиком 	= ТаблицаДанных.ЗадолженностьЗаНалогоплательщиком;
	СуммаИзлишнеУдержанная  			= ТаблицаДанных.СуммаИзлишнеУдержанная; 
	СуммаВозвратаПоПерерасчету			= ТаблицаДанных.СуммаВозвратаПоПерерасчету;
	СуммаЗачтеннаяПоПерерасчету			= ТаблицаДанных.СуммаЗачтеннаяПоПерерасчету; 
	СуммаУдержаннаяПоПерерасчету		= ТаблицаДанных.СуммаУдержаннаяПоПерерасчету;
	
	пОбщаяСуммаДохода      = ФорматироватьЗначение(ОбщаяСуммаДохода,2);
	пОблагаемаяСуммаДохода = ФорматироватьЗначение(ОблагаемаяСуммаДохода,2); 
	пСуммаНалогаИсчисленная= ФорматироватьЗначение(СуммаНалогаИсчисленная); 
	пСуммаНалогаУдержанная = ФорматироватьЗначение(СуммаНалогаУдержанная);
	пСуммаВозвратаПоПерерасчету   = ФорматироватьЗначение(СуммаВозвратаПоПерерасчету);
	пСуммаЗачтеннаяПоПерерасчету  = ФорматироватьЗначение(СуммаЗачтеннаяПоПерерасчету);
	пСуммаУдержаннаяПоПерерасчету = ФорматироватьЗначение(СуммаУдержаннаяПоПерерасчету);
	пЗадолженностьЗаНалогоплательщиком = ФорматироватьЗначение(ЗадолженностьЗаНалогоплательщиком);
	пСуммаИзлишнеУдержанная       = ФорматироватьЗначение(СуммаИзлишнеУдержанная);
	пСуммаНаВзыскание             = ФорматироватьЗначение(СуммаНаВзыскание);
	
	Таб.ВывестиСекцию("Часть4");
	
	Таб.ВывестиСекцию("Часть5"); 
	
	Если НомерСправки=0 Тогда 
		НомерДокументаВПачке = НомерДокументаВПачке+1;
	Иначе
		НомерДокументаВПачке = НомерСправки;
	КонецЕсли;
	
	
	Таб.НоваяСтраница();	
	
КонецПроцедуры //ВывестиСправкуОДоходах()

//******************************************************************************
// СоздатьСправки2005()
//
Процедура СоздатьСправки2005(ВходнойСписокСотрудников,Режим=0)
	
	Перем 	КодВычетаПраво[20];
	Перем 	СуммаВычетаПраво[20]; 
	
	ФормированиеФайла = 0;
	
	Если ДанныеЗаполненыВерно() = 0 Тогда
		Возврат;
	КонецЕсли; 
	
	ИНН = Константа.ИННОрганизации;
	ИННИБ = Константа.ИННОрганизации;
	
	Позиция = Найти(ИНН,"\");
	Позиция = ?(Найти(ИНН,"\") = 0,Найти(ИНН,"/") , Позиция);
	Если Позиция > 0 Тогда
		ИНН = Лев(ИНН,Позиция-1);
		КПП = Прав(ИННИБ,9);
	Иначе
		КПП ="";
	КонецЕсли;  
	
	ДатаФормированияСправки = Формат(ДатаСоставления, "ДДДММГГГГ");
	ОтчетныйГод = Строка(СпЛет.ПолучитьЗначение(СпЛет.ТекущаяСтрока())); 
	
	СокращенноеНаименованиеОрганизации=СОКРЛП(Константа.НазваниеОрганизации);
	ТелефонОрганизации = Лев(СокрЛ(Константа.ТелефоныОрганизации),20);
	
	//определим отправителя и сформируем переменные
	ОтправительЮрЛицо=1; 
	ФамилияПредпринимателя="";
	ИмяПредпринимателя    ="";
	Если ПустоеЗначение(КПП)=1 Тогда
		//отправитель - ПБОЮЛ
		ОтправительЮрЛицо=0;
		
		Список = глРазложить(Константа.НазваниеОрганизации, " ");
		
		ФамилияПредпринимателя = Лев(Список.ПолучитьЗначение(1), 60);  
		ИмяПредпринимателя     = Лев(Список.ПолучитьЗначение(2),60); 
		Отчество = "";
		Если Список.РазмерСписка() > 2 Тогда
			Для Сч = 3 По Список.РазмерСписка() Цикл
				Отчество = Отчество+Список.ПолучитьЗначение(Сч);
			КонецЦикла;
		КонецЕсли; 
		ОтчествоПредпринимателя=Лев(Отчество,60);
		НаименованиеНалоговогоАгента = ФамилияПредпринимателя+" "+ИмяПредпринимателя+" "+ОтчествоПредпринимателя;
	Иначе
		НаименованиеНалоговогоАгента = СокращенноеНаименованиеОрганизации;
	КонецЕсли; 
	
	ФамилияИсполнителя  =""; 
	ИмяИсполнителя      =""; 
	ОтчествоИсполнителя ="";
	ФИОИсполнителя=глФамилияИмяОтчество(Исполнитель,ФамилияИсполнителя,ИмяИсполнителя,ОтчествоИсполнителя);
	ДолжностьОтправителя = СокрЛП(Исполнитель.Должность);
	
	
	КодИФНС = Константа.КодИМНС;
	ОКАТООрганизации = СокрЛП(глПолучитьНалог("НДФЛ").КодОКАТО);
	ОКАТОСправки =  ОКАТООрганизации;
	КППСправки = КПП; 
	
	Таб=СоздатьОбъект("Таблица");
	Таб.ИсходнаяТаблица("2-НДФЛ");
	
	НомерДокументаВПачке = НомерПервойСправки;
	НомерДокументаВПачке = НомерПервойСправки;
	
	// Получим доходы и вычеты сотрудников.
	глСтатусСтрока(Контекст,"Подготовка данных о доходах сотрудников");
	ДоходыВычетыНалогиСотрудников = ""; 
	Если глСобратьДанныеДляНДФЛВыбор(ДоходыВычетыНалогиСотрудников,ВходнойСписокСотрудников,ДатаАктуальности,Контекст) = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ВсегоСотрудников=ВходнойСписокСотрудников.РазмерСписка();
	Для ИндексСотрудникаВСписке = 1 По ВсегоСотрудников Цикл 
		
		глСтатусСтрока(Контекст,"Формируются справки о доходах ("+Окр(ИндексСотрудникаВСписке/ВсегоСотрудников*100)+"%)");
		
		Сотрудник = ВходнойСписокСотрудников.ПолучитьЗначение(ИндексСотрудникаВСписке);  
		
		ФормироватьСправкуОДоходах=1;
		
		//******************************************************************************
		//подготовка данных для разделов 3...5 по сотруднику 
		//******************************************************************************
		
		СтрокаИтоговойТаблицы = ИндексСотрудникаВСписке*12;
		// во 2 колонке - таблица доходов
		// доходы смотрим за декабрь месяц нарастающим итогом за год
		ТаблицаДоходов = ДоходыВычетыНалогиСотрудников.ПолучитьЗначение(СтрокаИтоговойТаблицы,2); 
		
		Если ТипЗначения(ТаблицаДоходов) <> 100 Тогда  // доходов не было
			Продолжить
		КонецЕсли;
		
		Если ТаблицаДоходов.КоличествоСтрок() = 0 Тогда  // доходов не было
			Продолжить
		КонецЕсли;      
		
		Доходы13 = "";   
		Доходы9 = "";
		Доходы35 = "";
		
		СтатусНеРезидента=Сотрудник.Статус.Получить(КонГода(ДатаАктуальности));
		Резидент=?(СтатусНеРезидента=1,1,2);
		
		СобратьДанныеОДоходахСотрудника(Сотрудник,Резидент,ДоходыВычетыНалогиСотрудников,ИндексСотрудникаВСписке,ОКАТООрганизации,КПП,Доходы13,Доходы9,Доходы35);
		
		//******************************************************************************
		//подготовили данные для разделов 3...5 по сотруднику 
		//******************************************************************************   
		
		
		//Определим по каким ставкам необходимо будет формировать справки
		СписокСтавокНДФЛ=СоздатьОбъект("СписокЗначений");
		Если Резидент=2 Тогда     
			// у не резидентов только одна ставка - 30% 
			Если Доходы13.КоличествоСтрок()>0 Тогда
				СписокСтавокНДФЛ.ДобавитьЗначение(30);    
			КонецЕсли;
			
			Если ДатаАктуальности > '31.12.2007' Тогда
				Если Доходы9.КоличествоСтрок()>0 Тогда
					СписокСтавокНДФЛ.ДобавитьЗначение(15);
				КонецЕсли;
			КонецЕсли;
			
		Иначе
			//определим, сколько справок необходимо формировать на сотрудника
			Если Доходы13.КоличествоСтрок()>0 Тогда
				СписокСтавокНДФЛ.ДобавитьЗначение(13);
			КонецЕсли;
			Если Доходы9.КоличествоСтрок()>0 Тогда
				СписокСтавокНДФЛ.ДобавитьЗначение(9);
			КонецЕсли;
			Если Доходы35.КоличествоСтрок()>0 Тогда
				СписокСтавокНДФЛ.ДобавитьЗначение(35);
			КонецЕсли;
		КонецЕсли; 
		
		Если СписокСтавокНДФЛ.РазмерСписка()=0 Тогда
			//нет доходов
			Продолжить;
		КонецЕсли; 
		
		//******************************************************************************
		//подготовка данных для раздела 2 по сотруднику, кроме ОКАТО и КПП
		//******************************************************************************  
		
		СписокДанныхПоСотруднику = СоздатьОбъект("СписокЗначений");
		СписокДанныхПоСотруднику.ДобавитьЗначение("","ФИОСотрудника");
		СписокДанныхПоСотруднику.ДобавитьЗначение("","ИННСотрудника");
		СписокДанныхПоСотруднику.ДобавитьЗначение("","ДатаРожденияСотрудника");
		СписокДанныхПоСотруднику.ДобавитьЗначение("","СтранаПМЖ");
		СписокДанныхПоСотруднику.ДобавитьЗначение("","Гражданство");
		СписокДанныхПоСотруднику.ДобавитьЗначение("","ВидДокумента");
		СписокДанныхПоСотруднику.ДобавитьЗначение("","СерияНомерДокумента");
		СписокДанныхПоСотруднику.ДобавитьЗначение("","Индекс");
		СписокДанныхПоСотруднику.ДобавитьЗначение("","Регион");
		СписокДанныхПоСотруднику.ДобавитьЗначение("","Район");
		СписокДанныхПоСотруднику.ДобавитьЗначение("","Город");
		СписокДанныхПоСотруднику.ДобавитьЗначение("","НаселенныйПункт");
		СписокДанныхПоСотруднику.ДобавитьЗначение("","Улица");
		СписокДанныхПоСотруднику.ДобавитьЗначение("","Дом");
		СписокДанныхПоСотруднику.ДобавитьЗначение("","Корпус");
		СписокДанныхПоСотруднику.ДобавитьЗначение("","Квартира");
		СписокДанныхПоСотруднику.ДобавитьЗначение("","КодСтраныПроживания");
		СписокДанныхПоСотруднику.ДобавитьЗначение("","АдресВСтранеПроживания");
		
		ФИО="";
		ФормироватьСправкуОДоходах = ПолучитьДанныеПоСотруднику(Сотрудник,СписокДанныхПоСотруднику,Резидент,ФИО);
		
		
		Если ФормироватьСправкуОДоходах=0 Тогда
			//обнаружены ошибки в данных по сотруднику
			Сообщить(ФИО+": "+"В справке о доходах данные по сотруднику выводятся с ошибками!!!");
			Сообщить("******************************************************************");
		КонецЕсли;
		//******************************************************************************
		//подготовили данные для раздела 2 по сотруднику 
		//****************************************************************************** 
		
		
		
		//******************************************************************************
		//Формируем справки по сотруднику
		//****************************************************************************** 
		
		Для СчДоходовПоСтавкам=1 по СписокСтавокНДФЛ.РазмерСписка() Цикл
			
			СтавкаНалога=СписокСтавокНДФЛ.ПолучитьЗначение(СчДоходовПоСтавкам);
			
			// получим таблицу по ставке НДФЛ 
			Если (СтавкаНалога=9)  ИЛИ (СтавкаНалога=15) Тогда
				ТаблицаДанных=Доходы9;
			ИначеЕсли СтавкаНалога=35 Тогда
				ТаблицаДанных=Доходы35;                 
			Иначе
				ТаблицаДанных=Доходы13;                 
			КонецЕсли;                       
			
			ТаблицаДанных.ВыбратьСтроки();
			Пока ТаблицаДанных.ПолучитьСтроку()=1 Цикл
				
				//получим ОКАТО и КПП 
				ОКАТОСправки = ТаблицаДанных.ОКАТО;
				КППСправки   = ТаблицаДанных.КПП;
				
				//Раздел 1. Данные о налоговом агенте 
				Если ОтправительЮрЛицо=0 Тогда
					// предприниматель
					ИНННалоговогоАгента=ИНН;
				Иначе
					// Организация
					ИНННалоговогоАгента=ИНН+"/"+КППСправки;
				КонецЕсли;                                 
				
				ВывестиСправкуОДоходах(Сотрудник,СтавкаНалога,ТаблицаДанных,СписокДанныхПоСотруднику,Резидент,Таб);
				
			КонецЦикла; //цикл по ОКАТО выбранной ставки НДФЛ, при формировании справок 
			
		КонецЦикла; //цикл по ставкам НДФЛ, при формировании справок 
		
		//******************************************************************************
		//Сформировали справки по сотруднику
		//****************************************************************************** 
		
	КонецЦикла; //цикл по сотрудникам  
	
	Если НомерДокументаВПачке <> НомерПервойСправки Тогда
		Таб.Опции(0,0,0,0, "СправкиОДоходах_2005", "СправкиОДоходах_2005");
		Таб.ПараметрыСтраницы(1,,,0,0,0,0,0,0,1,1);
		Таб.ТолькоПросмотр(1);
		Таб.Показать("Справки о доходах 2-НДФЛ");
	Иначе
		Сообщить("Данных о доходах за "+Год+" год не обнаружено!")
	КонецЕсли;
	
	глСтатусСтрока(Контекст, "Обработка завершена");  	
	
КонецПроцедуры // СоздатьСправки2005

//******************************************************************************
// Сформировать()
//
//		формируется выходной файл для ИФНС, сопровождаемый печатной формой Реестра
//
Процедура Сформировать(НомерКнопки = 0)
	    
	ДатаАктуальности = КонГода(Дата(Год,12,15));
	// подготовим данные по доходам, облагаемым НДФЛ 
	СписокСотрудников = СоздатьОбъект("СписокЗначений");
	Если СпособВыборкиСотрудников=1 Тогда
		СпрСотрудники = СоздатьОбъект("Справочник.Сотрудники");
		СпрСотрудники.ВыбратьЭлементы();
		Пока СпрСотрудники.ПолучитьЭлемент()=1 Цикл
			Если СпрСотрудники.ЭтоГруппа()=0 Тогда
				СписокСотрудников.ДобавитьЗначение(СпрСотрудники.ТекущийЭлемент());
			КонецЕсли;
		КонецЦикла; 
		
		СписокСотрудников.Сортировать();
	Иначе
		Сотрудники.Выгрузить(СписокСотрудников);
	КонецЕсли; 
	
	Если НомерКнопки = 1 Тогда
	    СоздатьХМЛФайлВыгрузки(СписокСотрудников);
		
	Иначе
		СоздатьСправки2005(СписокСотрудников, 1);
	КонецЕсли;
	
	
КонецПроцедуры	// Сформировать 
//******************************************************************************
// 
Процедура СоздатьУникальныйИдентификатор() 
	
	//загрузим компоненту, это необходимо в этом месте, так как
	СписокВозможныхМест	=	СоздатьОбъект("СписокЗначений");
	СписокВозможныхМест.ДобавитьЗначение(КаталогИБ()		+	"v7plus.dll"	);
	СписокВозможныхМест.ДобавитьЗначение(КаталогПрограммы()	+	"v7plus.dll"	);
	СписокВозможныхМест.ДобавитьЗначение(КаталогИБ()		+	"ExtForms\"	+	"v7plus.dll");
	
	гПутьОбъекта_КомпонентаV7plus	=	НайтиПервыйСуществующийФайл(СписокВозможныхМест);
	
	Если ЗагрузитьВнешнююКомпоненту(гПутьОбъекта_КомпонентаV7plus) <> 1	Тогда
		Предупреждение("Компонента v7plus.dll не найдена! Уникальный идентификатор не создан!");
		Возврат;
	КонецЕсли; 
	 
	СисИнфо = СоздатьОбъект("AddIn.V7SysInfo");
	УникальныйИдентификатор = СисИнфо.СоздатьGUID();
	
КонецПроцедуры //СоздатьУникальныйИдентификатор  

//******************************************************************************
// Предопределенная процедура
//
Процедура ПриОткрытии(ФлагЧтенияНастройки)
	
	НачальныйГод = 2005;
	КонечныйГод = ДатаГод(РабочаяДата());
	
	Если НачальныйГод>КонечныйГод Тогда
		СпЛет.ДобавитьЗначение(2005,"2005 г.");
		СпЛет.ТекущаяСтрока(1);
	Иначе
		Для ГодВСписок = НачальныйГод По КонечныйГод Цикл
			СпЛет.ДобавитьЗначение(ГодВСписок,Строка(ГодВСписок)+" г.");	
		КонецЦикла;	
		//в 1-м квартале будем устанавливать по умолчанию прошлый год, а дальше текущий год
		НомерМесяца = ДатаМесяц(РабочаяДата());
		Если НомерМесяца<=3 Тогда
			СпЛет.ТекущаяСтрока(СпЛет.РазмерСписка()-1);
		Иначе
			СпЛет.ТекущаяСтрока(СпЛет.РазмерСписка());
		КонецЕсли;
	КонецЕсли;
	
	Год = СпЛет.ПолучитьЗначение(СпЛет.ТекущаяСтрока());
	
	Если ФлагЧтенияНастройки = 0 Тогда
		СпособВыборкиСотрудников = 1;
		НомерПервойСправки = 1;
		НомерРеестра = 1;
		Каталог = КаталогПользователя();
	Иначе
		Каталог = СокрЛП(Каталог);
	КонецЕсли; 
	
	//для 2005 года
	//Форма.ИспользоватьЗакладки(1);
	Форма.ИспользоватьСлой("Основной,Сотрудники",2);
	Форма.Архивировать.Видимость(0);
	//Форма.Закладки.ДобавитьЗначение("Основной,Сотрудники","Сотрудники");
	ТекущаяЗакладка=1;
	
	ДатаСоставления=РабочаяДата();
	
	ВосстановитьНастройки(ИмяФайлаНастроек());
	
	Если ПустоеЗначение(Форма.Параметр) = 0 Тогда
		Сотрудник = Форма.Параметр.Получить("Сотрудник");
		Год = Форма.Параметр.Получить("Год");
		Сотрудники.УдалитьВсе();
		Сотрудники.ДобавитьЗначение(Сотрудник);
		СпособВыборкиСотрудников = 2;
	КонецЕсли;
	
КонецПроцедуры // ПриОткрытии()  
//******************************************************************************
Процедура ПриЗакрытии()  
	
	СохранитьНастройки(ИмяФайлаНастроек());   
	
КонецПроцедуры //ПриЗакрытии
//******************************************************************************
Процедура ПриВыбореЗакладки(НомЗакладки,ЗначениеЗакладки) 
	
	ТекущаяЗакладка=НомЗакладки;
	Форма.ИспользоватьСлой(ЗначениеЗакладки,2);
	Если НомЗакладки=2 Тогда
	    Форма.СпЛет.Доступность(0);
	Иначе
		Форма.СпЛет.Доступность(1); 
		УправлениеВидимостьюРеквизитов();
	КонецЕсли;
	
	
КонецПроцедуры //ПриВыбореЗакладки

//******************************************************************************
// Предопределенная процедура
//
Процедура ПриНачалеВыбораЗначения(ИдентЭлемДиалога, ФлагСтандОбр)
	
	Если ИдентЭлемДиалога = "Каталог" Тогда
		ФлагСтандОбр = 0;   
		
		Если ФС.СуществуетФайл(Каталог+"\NUL")=1 Тогда
			Кат = Каталог;
		Иначе
			Кат = "C:\";
		КонецЕсли;
		ФС.ВыбратьКаталог(Кат,"Выбор каталога для вывода файла данных");
		Каталог = Кат;
	КонецЕсли;
	
КонецПроцедуры // ПриНачалеВыбораЗначения()

//******************************************************************************
//	Предопределенная процедура
//
Процедура ОбработкаПодбора(Элемент,КонтФормы)
	Если ПустоеЗначение(Элемент)=0 Тогда
		Если Элемент.ЭтоГруппа()=0 Тогда
			Если Элемент.Выбран() = 1 Тогда
				Если ТекущаяЗакладка=1 Тогда 
					Если Сотрудники.НайтиЗначение(Элемент) = 0 Тогда
						Сотрудники.ДобавитьЗначение(Элемент);
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;    
	Если ТекущаяЗакладка=1 Тогда
		СпособВыборкиСотрудников = ?((Сотрудники.РазмерСписка()>0) и (СпособВыборкиСотрудников = 1),2,СпособВыборкиСотрудников);
	КонецЕсли;
КонецПроцедуры	// ОбработкаПодбора()  

МаксимальнаяВеличина = 999999999.99;

ВычетыСотрудниковПоНДФЛ = СоздатьОбъект("Справочник.ВычетыСотрудниковПоНДФЛ");
ВидыВычетов = СоздатьОбъект("Справочник.ВидыВычетов");
