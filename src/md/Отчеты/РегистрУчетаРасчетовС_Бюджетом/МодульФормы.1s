//*****************************************************************************
// РасчетПени(ДатаПеречФакт,СрокУплаты,СуммаНедоимкиЗаТекПериод)
// 
// Параметры: ДатаПредыдущейОперации - дата предыдущего движения по расчетам с бюджетом,
//            ДатаПеречФакт - дата фактического перечисления,
//            СрокУплаты    - срок уплаты налога,
//            СуммаНедоимкиПоПредыдущейОперации - сумма недоимки налога на дату предыдущей операции
//
// Возвращаемое значение: рассчитанная сумма пени.
//
Функция  РасчетПени(ДатаПредыдущейОперации, ДатаПеречФакт,СрокУплаты,СуммаНедоимкиПоПредыдущейОперации)
	    
	СуммаПени = 0;
	
	Если (ПустоеЗначение(СрокУплаты) = 0) и (ДатаПеречФакт > СрокУплаты) Тогда
		Если СуммаНедоимкиПоПредыдущейОперации > 0 Тогда
			
			ДатаСтавки = ДатаПредыдущейОперации;
			Ставка = Константа.СтавкаРефинансирования.Получить(ДатаСтавки + 1);
			
			СтавкаРефинансирования = СоздатьОбъект("Периодический");
			СтавкаРефинансирования.ИспользоватьОбъект("СтавкаРефинансирования");
			СтавкаРефинансирования.ВыбратьЗначения(ДатаСтавки + 1, ДатаПеречФакт);
			
			Пока СтавкаРефинансирования.ПолучитьЗначение() = 1 Цикл
				
				СуммаПени = СуммаПени + Окр(Ставка * (СтавкаРефинансирования.ДатаЗнач - 1 - ДатаСтавки) * СуммаНедоимкиПоПредыдущейОперации / 100 / 300, 2, 1);
				
				ДатаСтавки = СтавкаРефинансирования.ДатаЗнач - 1;
				Ставка     = СтавкаРефинансирования.Значение;
			КонецЦикла;
		    
			СуммаПени = СуммаПени + Окр(Ставка * (ДатаПеречФакт - ДатаСтавки) * СуммаНедоимкиПоПредыдущейОперации / 100 / 300, 2, 1);
		КонецЕсли;
	КонецЕсли;
	
	Возврат СуммаПени;
	
КонецФункции // РасчетПени

//******************************************************************************
//
// РасчетНедоимки(СуммаНедоимки, ДатаПогашения, СрокУплаты, Долг, Погашено)
//
// Параметры: 
//            ДатаПогашения - дата погашения (уплаты в бюджет налога),
//            СрокУплаты    - срок уплаты налога,
//            Долг          - сумма налога к уплате в бюджет на данном этапе рассчета
//            Погашено      - погашенная выплатой сумма налога на данном этапе рассчета
//
// Возвращаемое значение: Сумма недоимки налога в бюджет.
//
Функция РасчетНедоимки(ДатаПогашения, СрокУплаты, Долг, Погашено)
	Если ДатаПогашения > СрокУплаты Тогда
		Сумма = (Долг - Погашено);
	Иначе
		Сумма = 0;
	КонецЕсли;
	Возврат Сумма;
КонецФункции //РасчетНедоимки

//******************************************************************************
// ПроверкаПериода()
//
// Возвращаемое значение:
//  1 - корректно выбран период в диалоге
//  0 - не корректно выбран период в диалоге
//
// Описание:
// Функция проверяет корректность ввода интервала дат в дилоге и рассчитаны ли итоги за заданный период
//
Функция ПроверкаПериода()
	
	Если ДатаГод(НачДата) <> ДатаГод(КонДата) Тогда
	    Предупреждение("Регистр формируется только в пределах одного года!");
		Возврат 0;
	КонецЕсли;
	Если НачДата > КонДата Тогда
		Предупреждение("Неправильно задан период формирования отчета!"+РазделительСтрок+
		               "Дата начала больше даты окончания периода.");
		Возврат 0;
	КонецЕсли;
	Если КонДата > КонецРассчитанногоПериодаБИ() Тогда
		Предупреждение("За выбранный период итоги не рассчитаны!"+РазделительСтрок+
		"Расчет итогов выполняется в режиме"+РазделительСтрок+
		"""Операции - Управление бухгалтерскими итогами"".");
		Возврат 0;
	КонецЕсли;
	
	Возврат 1;
	
КонецФункции // ПроверкаПериода()

//******************************************************************************
// Сформировать()
//
// Параметры:
//  Нет.
//
// Вызывается из формул элементов диалога:
//  Кнопка "Сформировать".
//
// Описание:
//  Формирование отчета.
//
Процедура Сформировать()
	
	Сч_51 = СчетПоКоду("51");
	Сч_52 = СчетПоКоду("52");

	Если ФормВидНалога.Выбран() = 0 Тогда
	    Предупреждение("Выберите вид налога!");
		Возврат;
	КонецЕсли;
	
	Если ПроверкаПериода() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ВидНалога = ФормВидНалога;
	
	// Т.к. на счете Н15 хранятся итоги по расчетам с бюджетом только на начало года,
	// то для построения регистра не с начала года проходится анализировать
	// начисление налогов их оплату с начала года.
    
	// Создадим таблицу "ТаблицаНачислений" для хранения начислений по налогу
	ТаблицаНачислений = СоздатьОбъект("ТаблицаЗначений");
	ТаблицаНачислений.НоваяКолонка("ДатаНачисления");
	ТаблицаНачислений.НоваяКолонка("СрокУплаты", "Дата");
	ТаблицаНачислений.НоваяКолонка("СуммаНачисления", "Число");
	ТаблицаНачислений.НоваяКолонка("Документ", "Документ");
	
	БухИт = СоздатьОбъект("БухгалтерскиеИтоги");
	БухИт.ИспользоватьСубконто(ВидыСубконто.НалогиИОтчисления, ФормВидНалога);
	БухИт.ИспользоватьСубконто(ВидыСубконто.СрокиУплаты);
	БухИт.ВыполнитьЗапрос(НачГода(НачДата), КонДата, "Н15",,,, "Проводка",);
	                                                 
	// Соберем информацию по состоянию расчетов на начало года.
	// Все задолженности по налогу на начала года пометим в таблицу,
	// если по налогу есть переплата, то запомним сумму переплаты в
	// переменной "СуммаАванса".
	СуммаАванса = 0;
	БухИт.ВыбратьСубконто(ВидыСубконто.СрокиУплаты);
	Пока БухИт.ПолучитьСубконто(ВидыСубконто.СрокиУплаты) = 1 Цикл
		Если БухИт.СНК() > 0 Тогда
			ТаблицаНачислений.НоваяСтрока();
			ТаблицаНачислений.ДатаНачисления = Дата(0);
			ТаблицаНачислений.СрокУплаты     = БухИт.Субконто(ВидыСубконто.СрокиУплаты);
			ТаблицаНачислений.СуммаНачисления= БухИт.СНК();    
			
		ИначеЕсли БухИт.СНК() < 0 Тогда // аванс
		    СуммаАванса = СуммаАванса + (-БухИт.СНК());
		КонецЕсли;
	КонецЦикла;
	НеПогашеноНаНачалоРегистра = ТаблицаНачислений.Итог("СуммаНачисления");
	
	// Операции начисления налога поместим в таблицу.
	БухИт.ВыбратьПериоды(, 2);
	Пока БухИт.ПолучитьПериод() = 1 Цикл
		
		Если БухИт.НачДата < НачДата Тогда
		    НеПогашеноНаНачалоРегистра = НеПогашеноНаНачалоРегистра + БухИт.КО();
		КонецЕсли;
		
		ТаблицаНачислений.НоваяСтрока();
		ТаблицаНачислений.ДатаНачисления = БухИт.НачДата;
		ТаблицаНачислений.СрокУплаты     = БухИт.Операция.Кредит.СрокиУплаты;
		ТаблицаНачислений.СуммаНачисления= БухИт.КО();
		ТаблицаНачислений.Документ = БухИт.Операция.Документ;
	КонецЦикла;
	
	ТаблицаНачислений.Свернуть("Документ, ДатаНачисления, СрокУплаты", "СуммаНачисления");
	
	// Подготовим бухгалтерские итоги для получения информации по платежам с начала года.
	БухИт = СоздатьОбъект("БухгалтерскиеИтоги");
	СписокСубконто = СоздатьОбъект("СписокЗначений");

	СчетУчетаНалога = ВидНалога.Счет;
	Если (СчетУчетаНалога.ПринадлежитГруппе(СчетПоКоду("68")) = 1)
		или (СчетУчетаНалога.ПринадлежитГруппе(СчетПоКоду("69.2")) = 1)
		или (СчетУчетаНалога.ПринадлежитГруппе(СчетПоКоду("69.3")) = 1) Тогда
			
		Если СчетУчетаНалога.Код = "68.4.1" Тогда // налог на прибыль
			Если СчетУчетаНалога.ВидСубконто(2) = ВидыСубконто.Бюджеты Тогда
				БухИт.ИспользоватьСубконто(ВидыСубконто.Бюджеты, ВидНалога.Субконто2);
			КонецЕсли;
		КонецЕсли;
		
		СписокСубконто.ДобавитьЗначение(Перечисление.ВидыПлатежейВБюджет.Налог);
		СписокСубконто.ДобавитьЗначение(Перечисление.ВидыПлатежейВБюджет.НалогСам);
		СписокСубконто.ДобавитьЗначение(Перечисление.ВидыПлатежейВБюджет.НалогАкт);
		БухИт.ИспользоватьСубконто(ВидыСубконто.ВидыПлатежейВБюджет, СписокСубконто);
		
		// На счете 68.10 может вестись учет нескольких налогов
		Если СчетУчетаНалога = СчетПоКоду("68.10") Тогда
			Для НомерСубконто = 1 по СчетУчетаНалога.КоличествоСубконто() Цикл
				Если СчетУчетаНалога.ВидСубконто(НомерСубконто) = ВидыСубконто.ПрочиеОбъектыУчета Тогда
					ЗначениеСубконто = ВидНалога.ПолучитьАтрибут("Субконто"+ НомерСубконто);
					БухИт.ИспользоватьСубконто(ВидыСубконто.ПрочиеОбъектыУчета, ЗначениеСубконто);
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
	ИначеЕсли (СчетУчетаНалога = СчетПоКоду("69.1"))
		или (СчетУчетаНалога = СчетПоКоду("69.11"))
		или (СчетУчетаНалога = СчетПоКоду("69.12")) Тогда
			
		СписокСубконто.ДобавитьЗначение(Перечисление.ВидыПлатежейВФонды.Взносы);
		СписокСубконто.ДобавитьЗначение(Перечисление.ВидыПлатежейВФонды.ВзносыСам);
		СписокСубконто.ДобавитьЗначение(Перечисление.ВидыПлатежейВФонды.ВзносыАкт);
		СписокСубконто.ДобавитьЗначение(Перечисление.ВидыПлатежейВФонды.РасходыПоСтрахованию);
		БухИт.ИспользоватьСубконто(ВидыСубконто.ВидыПлатежейВФонды, СписокСубконто);
		
	Иначе
		Предупреждение("Для налога " + ВидНалога + " не указан счет учета " + СчетУчетаНалога + "
						|Необходимо указать один из субсчетов счетов 68 или 69.");
		Возврат;
	КонецЕсли;

	// В таблицу расчетов добавляются колонки для отражения перечисления налогов.
	// ПризнакПеречисления = 0, сторока относится не к перечислению, а к начислению налога;
	// ПризнакПеречисления = 1, если задолженность перед бюджетом погашена перечислением;
	// ПризнакПеречисления = 2, если задолженность перед бюджетом списана или уменьшена иным образом;
	// ПризнакПеречисления = 3, служебная строка, не связанная с реальным перечислением (наступление срока уплаты).
	// ПризнакПеречисления = 4, служебная строка, не связанная с реальным перечислением (окончания периода).
	ТаблицаПлатежей = СоздатьОбъект("ТаблицаЗначений");
	ТаблицаПлатежей.НоваяКолонка("ДатаПеречисления", "Дата");
	ТаблицаПлатежей.НоваяКолонка("ПризнакПеречисления");
	ТаблицаПлатежей.НоваяКолонка("СуммаПеречисления", "Число");
	ТаблицаПлатежей.НоваяКолонка("Документ", "Документ");
	
	
	// Соберем платежы по налогам в таблице, все платежи с начала года по начало регистра,
	// а так же переплату по налогу на начало года запишем в переменную "СуммаПлатежейНаНачалоРегистра".
	// В таблиуц попадают только платежи в пределах интервала формирования регистра.
	СуммаПлатежейНаНачалоРегистра = СуммаАванса;
	СуммаВозврата = 0;
	
	БухИт.ВыполнитьЗапрос(НачГода(НачДата), КонДата, СчетУчетаНалога, , , 3, "Проводка", "С");
	БухИт.ВыбратьПериоды();
	Пока БухИт.ПолучитьПериод() = 1 Цикл
		
		Если БухИт.Операция.ДатаОперации < НачДата Тогда
			Если (БухИт.Операция.Дебет.Счет = Сч_51) или (БухИт.Операция.Дебет.Счет = Сч_52) Тогда
				СуммаПлатежейНаНачалоРегистра = СуммаПлатежейНаНачалоРегистра - БухИт.КО();
				
			Иначе
		    	СуммаПлатежейНаНачалоРегистра = СуммаПлатежейНаНачалоРегистра + БухИт.ДО();
			КонецЕсли;
			
			Продолжить;
		КонецЕсли;
		
		Если ((БухИт.Операция.Дебет.Счет = Сч_51) или (БухИт.Операция.Дебет.Счет = Сч_52)) и (БухИт.КО() <> 0) Тогда
		    ПризнакПеречисления = 1;
			
			ТаблицаПлатежей.НоваяСтрока();
			ТаблицаПлатежей.ДатаПеречисления = БухИт.Операция.ДатаОперации;
			ТаблицаПлатежей.ПризнакПеречисления = ПризнакПеречисления;
			ТаблицаПлатежей.СуммаПеречисления = -БухИт.КО();
			ТаблицаПлатежей.Документ = БухИт.Операция.Документ;
			
		ИначеЕсли БухИт.ДО() <> 0 Тогда
			Если (БухИт.Операция.Кредит.Счет = Сч_51) или (БухИт.Операция.Кредит.Счет = Сч_52) Тогда
				ПризнакПеречисления = 1;

			Иначе
				ПризнакПеречисления = 2;
			КонецЕсли;
			
			ТаблицаПлатежей.НоваяСтрока();
			ТаблицаПлатежей.ДатаПеречисления = БухИт.Операция.ДатаОперации;
			ТаблицаПлатежей.ПризнакПеречисления = ПризнакПеречисления;
			ТаблицаПлатежей.СуммаПеречисления = БухИт.ДО();
			ТаблицаПлатежей.Документ = БухИт.Операция.Документ;
		КонецЕсли;
	КонецЦикла; 
	ТаблицаПлатежей.Свернуть("Документ,ДатаПеречисления,ПризнакПеречисления", "СуммаПеречисления");
	
	// Создадим таблицу, которую заполним на основании совмещения
	// информации по начислению и уплате налога.
	// Таблица используется для формирования печатной формы регистра.
	ТаблицаРасчетов = СоздатьОбъект("ТаблицаЗначений");
	ТаблицаРасчетов.НоваяКолонка("ДатаНачисления", "Дата");
	ТаблицаРасчетов.НоваяКолонка("СрокУплаты", "Дата");
	ТаблицаРасчетов.НоваяКолонка("СуммаНачисления", "Число");
	ТаблицаРасчетов.НоваяКолонка("ДатаПеречисления", "Дата");
	ТаблицаРасчетов.НоваяКолонка("ПризнакПеречисления");
	ТаблицаРасчетов.НоваяКолонка("СуммаПеречисления", "Число");
	ТаблицаРасчетов.НоваяКолонка("СуммаНедоимки", "Число");
	ТаблицаРасчетов.НоваяКолонка("Документ", "Документ");
	
	ИтогСуммаПеречисления = ТаблицаПлатежей.Итог("СуммаПеречисления") + СуммаПлатежейНаНачалоРегистра;
	
	// Если на начало регистра была переплата, то при отражении
	// ее в регистре не некоторые данные получить неоткуда.
	ТекущееПеречисление         = СуммаПлатежейНаНачалоРегистра;
	ДатаТекущегоПеречисления    = Дата(0);
	ТекущийДокументПеречисления = ПолучитьПустоеЗначение("Документ");
	ТекущийПризнакПеречисления  = 1;
	
	// Перебирая операции начисления налогов сопостовляем начислениям оплаты.
	ТаблицаПлатежей.ВыбратьСтроки();
	ТаблицаНачислений.ВыбратьСтроки();
	Пока ТаблицаНачислений.ПолучитьСтроку() = 1 Цикл
		
		Если ТаблицаНачислений.ДатаНачисления < НачДата Тогда // начисление налога раньше начала формирования регистра
			
			// Если начисление налога погашено, то его не надо отражать в регистре.
			Если ТаблицаНачислений.СуммаНачисления <= СуммаПлатежейНаНачалоРегистра Тогда 
				СуммаПлатежейНаНачалоРегистра = СуммаПлатежейНаНачалоРегистра - ТаблицаНачислений.СуммаНачисления;
			    ТекущееПеречисление = СуммаПлатежейНаНачалоРегистра;
				ИтогСуммаПеречисления = ИтогСуммаПеречисления - ТаблицаНачислений.СуммаНачисления;
				Продолжить;
				
			Иначе // если оплаты не хватает для оплаты начисленного налога
				ТаблицаРасчетов.НоваяСтрока();
				ТаблицаРасчетов.СрокУплаты = ТаблицаНачислений.СрокУплаты;
				ТаблицаРасчетов.ПризнакПеречисления = 0;
				ТаблицаРасчетов.СуммаНедоимки = ТаблицаНачислений.СуммаНачисления - СуммаПлатежейНаНачалоРегистра;
				ТаблицаРасчетов.Документ = ТаблицаНачислений.Документ;
				ИтогСуммаПеречисления = ИтогСуммаПеречисления - СуммаПлатежейНаНачалоРегистра;
				ТекущееПеречисление = ТекущееПеречисление - СуммаПлатежейНаНачалоРегистра;
				СуммаПлатежейНаНачалоРегистра = 0;
				ТекущееНачисление = ТаблицаРасчетов.СуммаНедоимки;
			КонецЕсли;
			
		Иначе // начисление попадает в интервал формирования регистра
			ТаблицаРасчетов.НоваяСтрока();
			ТаблицаРасчетов.ДатаНачисления = ТаблицаНачислений.ДатаНачисления;
			ТаблицаРасчетов.СрокУплаты = ТаблицаНачислений.СрокУплаты;
			ТаблицаРасчетов.СуммаНачисления = ТаблицаНачислений.СуммаНачисления;
			ТаблицаРасчетов.ПризнакПеречисления = 0;
			ТаблицаРасчетов.Документ = ТаблицаНачислений.Документ;
			ТекущееНачисление = ТаблицаНачислений.СуммаНачисления;
		КонецЕсли;
        
		КонтрольСрокаУплаты = 1;
		Если ИтогСуммаПеречисления <> 0 Тогда // еще не вся оплата разнесена по начислениям налога
			Пока (ИтогСуммаПеречисления <> 0) и (ТекущееНачисление <> 0) Цикл 
				
				 // Если выбранное ранее перечисление разнесено полностью по начислениям,
				 // то достаем из таблицы перечислений следующее не нулевое перечисление.
				Пока ТекущееПеречисление = 0 Цикл
				    ТаблицаПлатежей.ПолучитьСтроку();
					ДатаТекущегоПеречисления   = ТаблицаПлатежей.ДатаПеречисления;
					ТекущееПеречисление        = ТаблицаПлатежей.СуммаПеречисления;
					ТекущийПризнакПеречисления = ТаблицаПлатежей.ПризнакПеречисления;
					ТекущийДокументПеречисления= ТаблицаПлатежей.Документ;
				КонецЦикла;
				
				// Если срок уплаты налога попадает в интервал формирования регистра,
				// то необходимо отразить в регистре отдельной строкой наступление
				// срока оплаты с указанием суммы начисления, оплата которой просрочена. 
				Если (КонтрольСрокаУплаты = 1) и (ТаблицаНачислений.СрокУплаты <= КонДата) Тогда
					Если ПустоеЗначение(ТаблицаНачислений.СрокУплаты) = 1 Тогда
						Сообщить("В документе ""Начисление налогов"" за " + ТаблицаНачислений.ДатаНачисления + " по данному налогу не указан срок оплаты.", "!");
						КонтрольСрокаУплаты = 0;
						
					ИначеЕсли ТаблицаНачислений.СрокУплаты < НачДата Тогда
						КонтрольСрокаУплаты = 0;
						
					ИначеЕсли ДатаТекущегоПеречисления > ТаблицаНачислений.СрокУплаты Тогда
						ТаблицаРасчетов.НоваяСтрока();
						ТаблицаРасчетов.ДатаНачисления = ТаблицаНачислений.ДатаНачисления;
						ТаблицаРасчетов.СрокУплаты = ТаблицаНачислений.СрокУплаты;
						ТаблицаРасчетов.ДатаПеречисления = ТаблицаНачислений.СрокУплаты;
						ТаблицаРасчетов.ПризнакПеречисления = 3;
						ТаблицаРасчетов.СуммаПеречисления = 0;
						ТаблицаРасчетов.СуммаНедоимки = ТекущееНачисление;
						ТаблицаРасчетов.Документ = ТаблицаНачислений.Документ;
						
						КонтрольСрокаУплаты = 0;
						
					ИначеЕсли ДатаТекущегоПеречисления = ТаблицаНачислений.СрокУплаты Тогда
						КонтрольСрокаУплаты = 0;
					КонецЕсли;
				КонецЕсли;
				
				// Определяем сумму погашения задолженности по налогу.
				// Эту операцию погашения отразим в таблице.
				Если ТекущееНачисление > 0 Тогда
				    СуммаПеречисления = Мин(ТекущееПеречисление, ТекущееНачисление);
					
				Иначе
					СуммаПеречисления = Макс(ТекущееПеречисление, ТекущееНачисление);
				КонецЕсли;
				
				ТаблицаРасчетов.НоваяСтрока();
				ТаблицаРасчетов.ДатаНачисления = ТаблицаНачислений.ДатаНачисления;
				ТаблицаРасчетов.СрокУплаты = ТаблицаНачислений.СрокУплаты;
				ТаблицаРасчетов.ДатаПеречисления = ДатаТекущегоПеречисления;
				ТаблицаРасчетов.ПризнакПеречисления = ТекущийПризнакПеречисления;
				ТаблицаРасчетов.СуммаПеречисления = СуммаПеречисления;
				ТаблицаРасчетов.Документ = ТекущийДокументПеречисления;

				ИтогСуммаПеречисления = ИтогСуммаПеречисления - СуммаПеречисления;
				ТекущееПеречисление = ТекущееПеречисление - СуммаПеречисления;
				ТекущееНачисление = ТекущееНачисление - СуммаПеречисления;
				ТаблицаРасчетов.СуммаНедоимки = ТекущееНачисление;
			КонецЦикла;
		
		Иначе 
			// Если начисление не было полностью полгашено,
			// срок уплаты попадает в интервал дат формирования регистра
			// и ранее истечение срока не было занесено в таблицу,
			// то отразим этот факт в таблице.
			Если ПустоеЗначение(ТаблицаНачислений.СрокУплаты) = 1 Тогда
				Сообщить("В документе ""Начисление налогов"" за " + ТаблицаНачислений.ДатаНачисления + " по данному налогу не указан срок оплаты.", "!");
				
			ИначеЕсли ТаблицаНачислений.СрокУплаты < НачДата Тогда
				
			ИначеЕсли (КонтрольСрокаУплаты = 1) и (ТаблицаНачислений.СрокУплаты <= КонДата) Тогда
				ТаблицаРасчетов.НоваяСтрока();
				ТаблицаРасчетов.ДатаНачисления = ТаблицаНачислений.ДатаНачисления;
				ТаблицаРасчетов.СрокУплаты = ТаблицаНачислений.СрокУплаты;
				ТаблицаРасчетов.ДатаПеречисления = ТаблицаНачислений.СрокУплаты;
				ТаблицаРасчетов.ПризнакПеречисления = 3;
				ТаблицаРасчетов.СуммаПеречисления = 0;
				ТаблицаРасчетов.СуммаНедоимки = ТекущееНачисление;
				ТаблицаРасчетов.Документ = ТаблицаНачислений.Документ;
			КонецЕсли;
		КонецЕсли;
		
		// Если начисление не было полностью погашено, то необходимо
		// отразить непогашенную задолденнось в таблице с целью
		// отражения непогашенной задолженности по налогу на
		// конец формирования регистра.
		Если ТекущееНачисление <> 0 Тогда
			ТаблицаРасчетов.НоваяСтрока();
			ТаблицаРасчетов.ДатаНачисления = ТаблицаНачислений.ДатаНачисления;
			ТаблицаРасчетов.СрокУплаты = ТаблицаНачислений.СрокУплаты;
			ТаблицаРасчетов.ДатаПеречисления = КонДата;
			ТаблицаРасчетов.ПризнакПеречисления = 4;
			ТаблицаРасчетов.СуммаПеречисления = 0;
			ТаблицаРасчетов.СуммаНедоимки = ТекущееНачисление;
		КонецЕсли;
		
	КонецЦикла;
	
	// Если после разнесения оплаты по всем срокам начисления
	// налога остались перечисления (переплата), то ее тоже
	// необходимо поместить в таблицу для отражение в регистре.
	Если ИтогСуммаПеречисления <> 0 Тогда
		СуммаНедоимки = 0;
		
		// Если операция перечисления (часть перечисления) уже была ранее помещена в таблицу,
		// то добавим в ту же строку таблицы не разнесенную часть перечисления.
		Если (ТаблицаРасчетов.КоличествоСтрок() > 0) и (ТекущееПеречисление <> 0) Тогда
			ТаблицаРасчетов.СуммаПеречисления = ТаблицаРасчетов.СуммаПеречисления + ТекущееПеречисление;
			ИтогСуммаПеречисления = ИтогСуммаПеречисления - ТекущееПеречисление;
			ТаблицаРасчетов.СуммаНедоимки = ТаблицаРасчетов.СуммаНедоимки - ТекущееПеречисление;
			СуммаНедоимки = ТаблицаРасчетов.СуммаНедоимки;
		КонецЕсли;
		
		// Если остались в таблице "ТаблицаПлатежей" нерассмотренные
		// перечисления, то отразим их в таблице "ТаблицаРасчетов" для 
		// отражения в регистре.
		Если ИтогСуммаПеречисления <> 0 Тогда
			Пока ТаблицаПлатежей.ПолучитьСтроку() = 1 Цикл
				СуммаПеречисления = ТаблицаПлатежей.СуммаПеречисления;
				
				ТаблицаРасчетов.НоваяСтрока();
				ТаблицаРасчетов.ДатаПеречисления = ТаблицаПлатежей.ДатаПеречисления;
				ТаблицаРасчетов.ПризнакПеречисления = ТаблицаПлатежей.ПризнакПеречисления;
				ТаблицаРасчетов.СуммаПеречисления = СуммаПеречисления;
				ТаблицаРасчетов.Документ = ТаблицаПлатежей.Документ;
	
				ИтогСуммаПеречисления = ИтогСуммаПеречисления - СуммаПеречисления;
				СуммаНедоимки = СуммаНедоимки - СуммаПеречисления;
				ТаблицаРасчетов.СуммаНедоимки = СуммаНедоимки;
			КонецЦикла;
		КонецЕсли;
		
		// Необходимо ввести строку-итог на дату конца формирования регистра
		ТаблицаРасчетов.НоваяСтрока();
		ТаблицаРасчетов.ПризнакПеречисления = 4;
		ТаблицаРасчетов.СуммаПеречисления = 0;
		ТаблицаРасчетов.СуммаНедоимки = СуммаНедоимки;
	КонецЕсли;
	
	// ФОРМИРОВАНИЕ ПЕЧАТНОЙ ФОРМЫ РЕГИСТРА ПО ИНФОРМАЦИИ,
	// ПОМЕЩЕННОЙ В ТАБЛИЦУ "ТаблицаРасчетов"
	
	Таб = СоздатьОбъект("Таблица"); 
	СтрНалогоплательщик = Константа.ОфициальноеНазваниеОрганизации;
	Если ПустаяСтрока(СтрНалогоплательщик) = 1 Тогда
		СтрНалогоплательщик = Константа.НазваниеОрганизации;	    
	КонецЕсли;
	ИНН = Константа.ИННОрганизации;
	Таб.ВывестиСекцию("Шапка");
	
	// Если на начало формирования регистра была переплата налога, то отразим ее
	// отдельной строкой.
	Если СуммаПлатежейНаНачалоРегистра <> 0 Тогда
	    Таб.ВывестиСекцию("ПереплатаНаНачало")
	КонецЕсли;
	
	ИтогоСуммаНалога = 0;
	ИтогоСуммаПеречФакт = 0;
	ИтогоСуммаСписаннойЗад = 0;
	ИтогоСуммаПени = 0;
	ТаблицаРасчетов.ВыбратьСтроки();
	Пока ТаблицаРасчетов.ПолучитьСтроку() = 1 Цикл
		Если ТаблицаРасчетов.ПризнакПеречисления = 0 Тогда // начисление
			ДатаНачисления = ТаблицаРасчетов.ДатаНачисления;
			СуммаНалога = ТаблицаРасчетов.СуммаНачисления;
			СрокУплаты = ТаблицаРасчетов.СрокУплаты;
			ИтогоСуммаНалога = ИтогоСуммаНалога + СуммаНалога;
			
			Таб.ВывестиСекцию("Разделитель");
			Если ДатаНачисления < НачДата Тогда
				СуммаНедоимки = ТаблицаРасчетов.СуммаНедоимки;
				Таб.ВывестиСекцию("СальдоНаНачало");
				
			Иначе
				Таб.ВывестиСекцию("СтрокаНачисления");
			КонецЕсли;
			ДатаПредыдущейОперации = Макс(ДатаНачисления, НачДата); // для расчета пени
			
		ИначеЕсли ТаблицаРасчетов.ПризнакПеречисления = 4 Тогда // сальдо на конец регистра
			СрокУплаты = ТаблицаРасчетов.СрокУплаты;
			СуммаНедоимки = ТаблицаРасчетов.СуммаНедоимки;
			ИтогоСуммаНедоимки = ИтогоСуммаНедоимки + ТаблицаРасчетов.СуммаНедоимки;
			СуммаПени = ?(ПустоеЗначение(СрокУплаты) = 1, 0, РасчетПени(ДатаПредыдущейОперации, КонДата, СрокУплаты, СуммаНедоимки));
			ИтогоСуммаПени = ИтогоСуммаПени + СуммаПени;
			
			Таб.ВывестиСекцию("СальдоНаКонец");
			
		Иначе
			ДатаПеречФакт = ТаблицаРасчетов.ДатаПеречисления;
			
			СуммаПеречФакт = "";
			СуммаСписаннойЗад = "";
			Если ТаблицаРасчетов.ПризнакПеречисления = 1 Тогда
			    СуммаПеречФакт = ТаблицаРасчетов.СуммаПеречисления;
				ИтогоСуммаПеречФакт = ИтогоСуммаПеречФакт + СуммаПеречФакт;
				
			ИначеЕсли ТаблицаРасчетов.ПризнакПеречисления = 2 Тогда
			    СуммаСписаннойЗад = ТаблицаРасчетов.СуммаПеречисления;
				ИтогоСуммаСписаннойЗад = ИтогоСуммаСписаннойЗад + СуммаСписаннойЗад;
			КонецЕсли;
			
			СрокУплаты = ТаблицаРасчетов.СрокУплаты;
			СуммаНедоимки = ТаблицаРасчетов.СуммаНедоимки;
			СуммаПени = ?(ПустоеЗначение(СрокУплаты) = 1, 0, РасчетПени(ДатаПредыдущейОперации, ДатаПеречФакт, СрокУплаты, (ТаблицаРасчетов.СуммаПеречисления + ТаблицаРасчетов.СуммаНедоимки)));
			ИтогоСуммаПени = ИтогоСуммаПени + СуммаПени;
			
			ДатаПредыдущейОперации = ДатаПеречФакт; // для расчета пени
			
			Таб.ВывестиСекцию("СтрокаУплаты");
		КонецЕсли; 
	КонецЦикла;
	ИтогоСуммаНедоимки = ИтогоСуммаНедоимки - ИтогСуммаПеречисления;
	
	ОтветственныйЗаСоставление = ФИО(Константа.ОтветственныйЗаСоставлениеРегистровНУ);
	
	Таб.ВывестиСекцию("Подвал");
	Таб.ТолькоПросмотр(1); 
	Таб.ПараметрыСтраницы(,2,,);
	Таб.Опции(0, 0, 0, 0, "ПечатьУчетРасчетовСБюджетом", "ОкноУчетРасчетовСБюджетом");
	Таб.Показать("Регистр учета расчетов с бюджетом");
	
КонецПроцедуры // Сформировать() 


//******************************************************************************
Процедура ПриОткрытии() //предопределенная
	
	НачДата = НачГода(НачалоПериодаБИ());
	КонДата = КонецПериодаБИ();
	
КонецПроцедуры //ПриОткрытии