Перем НазваниеРегистра;
Перем Таб;
Перем ДатаНачалаНалоговогоПериода2003;

//******************************************************************************
// УправлениеВидимостьюРеквизитов()
//
// Параметры:
//  Нет.
//
// Вызывается из формул элементов диалога:
//  Нет.
//
// Описание:
//  Здесь описывается процедура.
//
Процедура УправлениеВидимостьюРеквизитов()
	                                         
	Если НачДата >= ДатаНачалаНалоговогоПериода2003 Тогда
	   	ВидимостьДополнительныхРеквизитв = 0;
		
	Иначе
		ВидимостьДополнительныхРеквизитв = 1
	КонецЕсли;
	
	Форма.РамкаРежимовФормирования.Видимость(ВидимостьДополнительныхРеквизитв);
	Форма.РежимыФормирования.Видимость(ВидимостьДополнительныхРеквизитв);
	Форма.РежимыФормирования2.Видимость(ВидимостьДополнительныхРеквизитв);
	
КонецПроцедуры // УправлениеВидимостьюРеквизитов()
//******************************************************************************
// ПроверкаПериода()
//
// Возвращаемое значение:
//  1 - корректно выбран период в диалоге
//  0 - не корректно выбран период в диалоге
//
// Описание:
// Функция проверяет корректность ввода интервала дат в дилоге и рассчитаны ли итоги за заданный период
//
Функция ПроверкаПериода()
	
	Если НачДата > КонДата Тогда
		Предупреждение("Неправильно задан период формирования отчета!"+РазделительСтрок+
		               "Дата начала больше даты окончания периода.");
		Возврат 0;
	КонецЕсли;
	Если КонДата > КонецРассчитанногоПериодаБИ() Тогда
		Предупреждение("За выбранный период итоги не рассчитаны!"+РазделительСтрок+
		"Расчет итогов выполняется в режиме"+РазделительСтрок+
		"""Операции - Управление бухгалтерскими итогами"".");
		Возврат 0;
	КонецЕсли;
	
	Возврат 1;
	
КонецФункции // ПроверкаПериода()

//******************************************************************************
// ОпределитьНаименованиеОперации()
//
// Параметры:
//  БухИт - бухгалтерские итоги.
//
// Возвращаемое значение:
//  Строка - название операции.
//
// Вызывается из формул элементов диалога:
//  Нет.
//
// Описание:
//  Определяется по раквизитам проводки
//  наименование операции.
//
Функция ОпределитьНаименованиеОперации(БухИт)
	                                   
	Опер = БухИт.Операция;
	            
	СчетДт = Опер.Дебет.Счет;
	СчетКт = Опер.Кредит.Счет;
	СчетДтКод = СчетДт.Код;
	СчетКтКод = СчетКт.Код;
	
	НаименованиОперации = "";
	
	Если БухИт.ВыбранаПоДт() = 1 Тогда
	    
		Если глНайтиСчетВСтроке("66.1, 66.11, 67.1, 67.11", СчетДтКод) = 1 Тогда
			НаименованиОперации = "Возврат кредита";
		    Если СчетКтКод = "91.1" Тогда
		        Если Опер.Кредит.ПрочиеДоходыИРасходы.ВидПрочихДоходовИРасходов = Перечисление.ВидыПрочихДоходовИРасходов.СписаннаяКредиторскаяЗадолженность Тогда
		            НаименованиОперации = "Списание долга по кредиту";
		        КонецЕсли;
			КонецЕсли;
		
		ИначеЕсли глНайтиСчетВСтроке("66.2, 66.22, 67.2, 67.22", СчетДтКод) = 1 Тогда
			НаименованиОперации = "Уплата процентов по кредиту";
		    Если СчетКтКод = "91.1" Тогда
		        Если Опер.Кредит.ПрочиеДоходыИРасходы.ВидПрочихДоходовИРасходов = Перечисление.ВидыПрочихДоходовИРасходов.СписаннаяКредиторскаяЗадолженность Тогда
		            НаименованиОперации = "Списание процентов по кредиту";
		        КонецЕсли;
			КонецЕсли;
			
		ИначеЕсли глНайтиСчетВСтроке("66.3, 66.33, 67.3, 67.33", СчетДтКод) = 1 Тогда
			НаименованиОперации = "Возврат займа";
		    Если СчетКтКод = "91.1" Тогда
		        Если Опер.Кредит.ПрочиеДоходыИРасходы.ВидПрочихДоходовИРасходов = Перечисление.ВидыПрочихДоходовИРасходов.СписаннаяКредиторскаяЗадолженность Тогда
		            НаименованиОперации = "Списание долга по займу";
		        КонецЕсли;
			КонецЕсли;
			
		ИначеЕсли глНайтиСчетВСтроке("66.4, 66.44, 67.4, 67.44", СчетДтКод) = 1 Тогда
			НаименованиОперации = "Уплата процентов по займу";
		    Если СчетКтКод = "91.1" Тогда
		        Если Опер.Кредит.ПрочиеДоходыИРасходы.ВидПрочихДоходовИРасходов = Перечисление.ВидыПрочихДоходовИРасходов.СписаннаяКредиторскаяЗадолженность Тогда
		            НаименованиОперации = "Списание процентов по займу";
		        КонецЕсли;
			КонецЕсли;
			
		ИначеЕсли глНайтиСчетВСтроке("50, 51, 52, 55", СчетКтКод) = 1 Тогда
			НаименованиОперации = "Платеж";
			
		ИначеЕсли глНайтиСчетВСтроке("66.1, 66.11, 67.1, 67.11", СчетКтКод) = 1 Тогда
			НаименованиОперации = "Получение кредита";
		
		ИначеЕсли глНайтиСчетВСтроке("66.2, 66.22, 67.2, 67.22", СчетКтКод) = 1 Тогда
			НаименованиОперации = "Начисление процентов по кредиту";
		
		ИначеЕсли глНайтиСчетВСтроке("66.3, 66.33, 67.3, 67.33", СчетКтКод) = 1 Тогда
			НаименованиОперации = "Получение займа";
		
		ИначеЕсли глНайтиСчетВСтроке("66.4, 66.44, 67.4, 67.44", СчетКтКод) = 1 Тогда
			НаименованиОперации = "Начисление процентов по займу";
		    
		ИначеЕсли СчетКт.ПринадлежитГруппе(СчетПоКоду("90")) = 1 Тогда
			Если ПустоеЗначение(Опер.Кредит.ВидыНоменклатуры) = 0 Тогда
				НаименованиОперации = "Реализация (" + Опер.Кредит.ВидыНоменклатуры.ТипНоменклатуры + ")";
				
			Иначе
				НаименованиОперации = "Реализация";
			КонецЕсли;
			
		ИначеЕсли СчетКтКод = "91.1" Тогда
			НаименованиОперации = Опер.Кредит.ПрочиеДоходыИРасходы;
		
		Иначе
			НаименованиОперации = Опер.СодержаниеПроводки;
		КонецЕсли;
		
	Иначе // операция по кредиту счета расчетов с контрагентом.
		Если глНайтиСчетВСтроке("66.1, 66.11, 67.1, 67.11", СчетКтКод) = 1 Тогда
			НаименованиОперации = "Получение кредита";
		
		ИначеЕсли глНайтиСчетВСтроке("66.2, 66.22, 67.2, 67.22", СчетКтКод) = 1 Тогда
			НаименованиОперации = "Начисление процентов по кредиту";
		
		ИначеЕсли глНайтиСчетВСтроке("66.3, 66.33, 67.3, 67.33", СчетКтКод) = 1 Тогда
			НаименованиОперации = "Получение займа";
		
		ИначеЕсли глНайтиСчетВСтроке("66.4, 66.44, 67.4, 67.44", СчетКтКод) = 1 Тогда
			НаименованиОперации = "Начисление процентов по займу";
			
		ИначеЕсли (СчетДтКод <= "45") или (СчетДтКод = "97") Тогда
			НаименованиОперации = "Приобретение";
			
		ИначеЕсли СчетДтКод = "91.2" Тогда
			НаименованиОперации = Опер.Дебет.ПрочиеДоходыИРасходы;
			
		ИначеЕсли глНайтиСчетВСтроке("50, 51, 52, 55", СчетДтКод) = 1 Тогда
			НаименованиОперации = "Получение денежных средств";
			
		ИначеЕсли СчетДтКод = "58.1.1" Тогда
			НаименованиОперации = "Приобретение долей в УК";
			
		ИначеЕсли СчетДтКод = "58.1.2" Тогда
			НаименованиОперации = "Приобретение акций в УК";
			
		ИначеЕсли СчетДтКод = "58.2" Тогда
			НаименованиОперации = "Получение ценных бумаг";
			
		ИначеЕсли СчетДтКод = "58.3" Тогда
			НаименованиОперации = "Предоставлен займ";
			
		ИначеЕсли СчетДтКод = "58.4" Тогда
			НаименованиОперации = "Вклад в простое товарищество";
			
		ИначеЕсли СчетДтКод = "58.5" Тогда
			НаименованиОперации = "Приобретение прав";
			
		Иначе
			НаименованиОперации = Опер.СодержаниеПроводки;
		КонецЕсли;
			
	КонецЕсли;
	
	Возврат НаименованиОперации;
	
КонецФункции // ОпределитьНаименованиеОперации()
//******************************************************************************
// ЭтоОтражениеКурсовыхСуммовыхРазниц(БухИт)
//
// Параметры:
//  БухИт - бухгалтерские итоги.
//
// Возвращаемое значение:
//  1 - проводкой отражена курсовая разница
//  2 - проводкой отражена возникшая суммовая разница,
//  0 - не курсовая и не суммовая разница.
//
// Вызывается из формул элементов диалога:
//  Нет.
//
// Описание:
//  Опрелеяет является ли выбранная проводка отражением
//  курсовых разниц в бух. учете.
//
Функция ЭтоОтражениеКурсовыхСуммовыхРазниц(СчетИАналитика, СодержаниеПроводки)
	
	// Проверим на принадлежность к суммовым разницам.
	Если Найти(СодержаниеПроводки, "Суммов") <> 0 Тогда
	    Если Найти(СодержаниеПроводки, "разн") <> 0 Тогда
			Возврат 2;
		КонецЕсли;		
	КонецЕсли;
	                                                  
	// Проверим на принадлежность к курсовым разницам.
	Если (СчетИАналитика.Счет = СчетПоКоду("91.1")) или (СчетИАналитика.Счет = СчетПоКоду("91.2")) Тогда
		ВидПрочихДоходовИРасходов = СчетИАналитика.Субконто(ВидыСубконто.ПрочиеДоходыИРасходы).ВидПрочихДоходовИРасходов;
		Если ВидПрочихДоходовИРасходов = Перечисление.ВидыПрочихДоходовИРасходов.КурсовыеРазницы Тогда
			Возврат 1;
		КонецЕсли;
	КонецЕсли;
	
	Возврат 0;
	
КонецФункции // ЭтоОтражениеКурсовыхСуммовыхРазниц()

//******************************************************************************
// РассчитатьНДСпоКредиторскойЗадолженности()
//
// Параметры:
//  Нет.
//
// Вызывается из формул элементов диалога:
//  Нет.
//
// Описание:
//  Определяется сумма НДС по кредиторской задолженности
//  на начало формирование регистра и на конец.
//
Процедура РассчитатьНДСпоКредиторскойЗадолженности(Контрагент, Договор, БухИт, СуммаНДСнаНачало, СуммаНДСнаКонец)
	
	// Если НДС по контрагенту нет, то выходим из процедуры
	Если БухИт.ПолучитьСубконто(ВидыСубконто.Контрагенты,, Контрагент) = 0 Тогда
	    Возврат;
	КонецЕсли;
	
	БухИт.ВыбратьСчета();
	Пока БухИт.ПолучитьСчет() = 1 Цикл
	    Если БухИт.Счет.ПринадлежитГруппе(СчетПоКоду("19")) = 1 Тогда
			
			// Если НДС отражен на счете 19, то отношение его к определенному
			// догвору определяется косвенно (по реквизиту "Договор" документ "Счет-факура").
			БухИт.ВыбратьСубконто(2);
			Пока БухИт.ПолучитьСубконто(2) = 1 Цикл
				СчетФактура = БухИт.Субконто(2);
			    Если ПустоеЗначение(СчетФактура) = 0 Тогда // указан счет-фактура 
					Если СчетФактура.Договор = Договор Тогда
					    СуммаНДСнаНачало = СуммаНДСнаНачало + БухИт.СНД();
						СуммаНДСнаКонец  = СуммаНДСнаКонец  + БухИт.СКД();
					КонецЕсли;
			    КонецЕсли;
			КонецЦикла;
			
		Иначе // счет 76.АВ (НДС с авансов)
			Если БухИт.ПолучитьСубконто(2,, Договор) = 1 Тогда
				СуммаНДСнаНачало = СуммаНДСнаНачало + БухИт.СНД();
				СуммаНДСнаКонец  = СуммаНДСнаКонец  + БухИт.СКД();
			КонецЕсли;
	    КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры // РассчитатьНДСпоКредиторскойЗадолженности()

//******************************************************************************
// ФормированиеПоДебиторскойИКредиторскойЗадолженностям()
//
// Параметры:
//  Нет.
//
// Вызывается из формул элементов диалога:
//  Нет.
//
// Описание:
//  Здесь описывается процедура.
//
Процедура ФормированиеПоДебиторскойИКредиторскойЗадолженностям()
	
	БухИт008 = СоздатьОбъект("БухгалтерскиеИтоги");
	БухИт008.ИспользоватьСубконто(ВидыСубконто.Контрагенты, ВыбрКонтрагент);
	БухИт008.ИспользоватьСубконто(ВидыСубконто.Договоры, ВыбрДоговор);
	БухИт008.ВыполнитьЗапрос(, КонДата, "008",,,,,);
	
	БухИт = СоздатьОбъект("БухгалтерскиеИтоги");
	БухИт.ИспользоватьСубконто(ВидыСубконто.Контрагенты, ВыбрКонтрагент);
	БухИт.ИспользоватьСубконто(ВидыСубконто.Договоры, ВыбрДоговор);
	БухИт.ВыполнитьЗапрос(НачДата, КонДата, "60, 62, 66, 67, 75, 76.1, 76.2, 76.3, 76.4, 76.5, 76.6, 76.11, 76.22, 76.55",,,, "Проводка", "С");
	
	БухИтНДС = СоздатьОбъект("БухгалтерскиеИтоги");
	БухИтНДС.ИспользоватьСубконто(ВидыСубконто.Контрагенты, ВыбрКонтрагент);
	БухИтНДС.ИспользоватьСубконто();
	БухИтНДС.ВыполнитьЗапрос(НачДата, КонДата, "19.1, 19.2, 19.3, 19.4, 76.АВ");
	
	СтрНалогоплательщик = Константа.ОфициальноеНазваниеОрганизации;
	Если ПустаяСтрока(СтрНалогоплательщик) = 1 Тогда
		СтрНалогоплательщик = Константа.НазваниеОрганизации;	    
	КонецЕсли;
	ИНН = Константа.ИННОрганизации;

	
	Таб.ИсходнаяТаблица("ДебиторскаяИКредиторскаяЗадолженности");
	Таб.ВывестиСекцию("Шапка");

	БухИт.ВыбратьСубконто(ВидыСубконто.Контрагенты);
	Пока БухИт.ПолучитьСубконто(ВидыСубконто.Контрагенты) = 1 Цикл
		БухИт.ВыбратьСубконто(ВидыСубконто.Договоры);
		Пока БухИт.ПолучитьСубконто(ВидыСубконто.Договоры) = 1 Цикл
			Контрагент = БухИт.Субконто(ВидыСубконто.Контрагенты);
			Договор = БухИт.Субконто(ВидыСубконто.Договоры);

			РеквизитыДоговора = "" + глПолноеНаименование(Контрагент) + ", " + Договор;
			
			Если ПустоеЗначение(Договор.ДатаПогашенияОбязательства) = 0 Тогда
				УстановленнаяДатаПогашенияЗадолженности = Договор.ДатаПогашенияОбязательства;
			Иначе
				УстановленнаяДатаПогашенияЗадолженности = "не установлена";
			КонецЕсли;
			
			ПорядокРасчетов = "Цены в договоре указаны в ";
			Если Договор.ВалютаДоговора.Выбран() = 0 Тогда
				ПорядокРасчетов = ПорядокРасчетов + "руб.";
				
			Иначе
				ПорядокРасчетов = ПорядокРасчетов + Договор.ВалютаДоговора;
				Если Договор.ОплатаДоговора = 1 Тогда
				    ПорядокРасчетов = ПорядокРасчетов + ", оплата в руб."
		
				Иначе
				    ПорядокРасчетов = ПорядокРасчетов + ", оплата в " + Договор.ВалютаДоговора
				КонецЕсли;
			КонецЕсли;
			
			ОбеспеченностьЗалогом = "";
			Если БухИт008.ПолучитьСубконто(, ВидыСубконто.Контрагенты, Контрагент) = 1 Тогда
				Если БухИт008.ПолучитьСубконто(, ВидыСубконто.Договоры, Договор) = 1 Тогда
					ОбеспеченностьЗалогом = ФорматС(БухИт008.СКД());
				КонецЕсли;
			КонецЕсли;
			
			// Рассчитаем сумму НДС по кредиторской задолженности.
			СуммаНДСнаНачало = 0;
			СуммаНДСнаКонец  = 0;
			РассчитатьНДСпоКредиторскойЗадолженности(Контрагент, Договор, БухИтНДС, СуммаНДСнаНачало, СуммаНДСнаКонец);

			Таб.ВывестиСекцию("ОбъектУчета");

			БухИт.ВыбратьПериоды();	
			Пока БухИт.ПолучитьПериод(,) = 1 Цикл
				Опер = БухИт.Операция;
				              
				ДатаОперации                 = Опер.ДатаОперации;
				НаименованиеОперации         = "";
				ОснованиеОперации            = Опер.ПервичныйДокумент;
				ОборотПоДебету               = "";
				ОборотПоКредиту              = "";
				СуммаКурсовыхРазницПоДебету  = "";
				СуммаКурсовыхРазницПоКредиту = "";
				
				Если БухИт.ВыбранаПоДт() = 1 Тогда
					ОборотПоДебету = ФорматС(Опер.Сумма);
					КурсоваяСуммоваяРазница = ЭтоОтражениеКурсовыхСуммовыхРазниц(Опер.Кредит, Опер.СодержаниеПроводки);
					Если КурсоваяСуммоваяРазница = 1 Тогда // курсовая разница
						НаименованиеОперации = "Курсовая разница";
					    СуммаКурсовыхРазницПоДебету = ФорматС(Опер.Сумма); 
						
					ИначеЕсли КурсоваяСуммоваяРазница = 2 Тогда // суммовая разница
						НаименованиеОперации = "Суммовая разница";
					    СуммаКурсовыхРазницПоДебету = ФорматС(Опер.Сумма); 
						
					Иначе
						НаименованиеОперации = ОпределитьНаименованиеОперации(БухИт);
					КонецЕсли;
					
				Иначе // по кредиту
					ОборотПоКредиту = ФорматС(Опер.Сумма);
					КурсоваяСуммоваяРазница = ЭтоОтражениеКурсовыхСуммовыхРазниц(Опер.Дебет, Опер.СодержаниеПроводки);
					Если КурсоваяСуммоваяРазница = 1 Тогда // курсовая разница
						НаименованиеОперации = "Курсовая разница";
					    СуммаКурсовыхРазницПоКредиту = ФорматС(Опер.Сумма); 
						
					ИначеЕсли КурсоваяСуммоваяРазница = 2 Тогда // суммовая разница
						НаименованиеОперации = "Суммовая разница";
					    СуммаКурсовыхРазницПоКредиту = ФорматС(Опер.Сумма); 
						
					Иначе
						НаименованиеОперации = ОпределитьНаименованиеОперации(БухИт);
					КонецЕсли;
					
				КонецЕсли;
				
				СальдоДебетовое  = ФорматС(БухИт.СКД());
				СальдоКредитовое = ФорматС(БухИт.СКК());
			    
				Таб.ВывестиСекцию("Строка");
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	
	НазваниеРегистра = "Регистр учета операций по движению дебиторской и кредиторской задолженности";
	
КонецПроцедуры // ФормированиеПоДебиторскойИКредиторскойЗадолженностям()

//******************************************************************************
// ФормированиеПоДебиторскойЗадолженности()
//
// Параметры:
//  Нет.
//
// Вызывается из формул элементов диалога:
//  Нет.
//
// Описание:
//  Здесь описывается процедура.
//
Процедура ФормированиеПоДебиторскойЗадолженности()
	
	ТаблицаЗадолженности = СоздатьОбъект("ТаблицаЗначений");
	ТаблицаЗадолженности.НоваяКолонка("ДатаОперации");
	ТаблицаЗадолженности.НоваяКолонка("ПризнакОперации");
	ТаблицаЗадолженности.НоваяКолонка("Операция");
	ТаблицаЗадолженности.НоваяКолонка("НаименованиеОперации");
	ТаблицаЗадолженности.НоваяКолонка("Сумма");
	
	БухИт008 = СоздатьОбъект("БухгалтерскиеИтоги");
	БухИт008.ИспользоватьСубконто(ВидыСубконто.Контрагенты, ВыбрКонтрагент);
	БухИт008.ИспользоватьСубконто(ВидыСубконто.Договоры, ВыбрДоговор);
	БухИт008.ВыполнитьЗапрос(, КонДата, "008",,,,,);
	
	БухИт = СоздатьОбъект("БухгалтерскиеИтоги");
	БухИт.ИспользоватьСубконто(ВидыСубконто.Контрагенты, ВыбрКонтрагент);
	БухИт.ИспользоватьСубконто(ВидыСубконто.Договоры, ВыбрДоговор);
	БухИт.ВыполнитьЗапрос(НачДата, КонДата, "Н13.01",,, 1, "Проводка", "С");

	СтрНалогоплательщик = Константа.ОфициальноеНазваниеОрганизации;
	Если ПустаяСтрока(СтрНалогоплательщик) = 1 Тогда
		СтрНалогоплательщик = Константа.НазваниеОрганизации;	    
	КонецЕсли;
	ИНН = Константа.ИННОрганизации;

	Таб.ИсходнаяТаблица("ДебиторскаяЗадолженность");
	Таб.ВывестиСекцию("Шапка");

	БухИт.ВыбратьСубконто(ВидыСубконто.Контрагенты);
	Пока БухИт.ПолучитьСубконто(ВидыСубконто.Контрагенты) = 1 Цикл
		БухИт.ВыбратьСубконто(ВидыСубконто.Договоры);
		Пока БухИт.ПолучитьСубконто(ВидыСубконто.Договоры) = 1 Цикл
			Контрагент = БухИт.Субконто(ВидыСубконто.Контрагенты);
			Договор = БухИт.Субконто(ВидыСубконто.Договоры);

			РеквизитыДоговора = "" + глПолноеНаименование(Контрагент) + ", " + Договор;
			
			Если ПустоеЗначение(Договор.ДатаПогашенияОбязательства) = 0 Тогда
				УстановленнаяДатаПогашенияЗадолженности = Договор.ДатаПогашенияОбязательства;
			Иначе
				УстановленнаяДатаПогашенияЗадолженности = "не установлена";
			КонецЕсли;
			
			ПорядокРасчетов = "Цены в договоре указаны в ";
			Если Договор.ВалютаДоговора.Выбран() = 0 Тогда
				ПорядокРасчетов = ПорядокРасчетов + "руб.";
				
			Иначе
				ПорядокРасчетов = ПорядокРасчетов + Договор.ВалютаДоговора;
				Если Договор.ОплатаДоговора = 1 Тогда
				    ПорядокРасчетов = ПорядокРасчетов + ", оплата в руб."
		
				Иначе
				    ПорядокРасчетов = ПорядокРасчетов + ", оплата в " + Договор.ВалютаДоговора
				КонецЕсли;
			КонецЕсли;
			
			ОбеспеченностьЗалогом = "";
			Если БухИт008.ПолучитьСубконто(, ВидыСубконто.Контрагенты, Контрагент) = 1 Тогда
				Если БухИт008.ПолучитьСубконто(, ВидыСубконто.Договоры, Договор) = 1 Тогда
					ОбеспеченностьЗалогом = ФорматС(БухИт008.СКД());
				КонецЕсли;
			КонецЕсли;

			Таб.ВывестиСекцию("ОбъектУчета");

			ТаблицаЗадолженности.УдалитьСтроки();
			ЗадолжненностьНаНачалоПериода = БухИт.СНД() - БухИт.СНК();
			Если ЗадолжненностьНаНачалоПериода <> 0 Тогда
				ТаблицаЗадолженности.НоваяСтрока();
				ТаблицаЗадолженности.ДатаОперации = НачДата;
				ТаблицаЗадолженности.ПризнакОперации = 0;
				ТаблицаЗадолженности.Операция = "";
				ТаблицаЗадолженности.НаименованиеОперации = "";
				ТаблицаЗадолженности.Сумма = "";
			КонецЕсли;
			
			БухИт.ВыбратьПериоды(,,,);	
			Пока БухИт.ПолучитьПериод(,) = 1 Цикл
				Опер = БухИт.Операция;
				
				ТаблицаЗадолженности.НоваяСтрока();
				ТаблицаЗадолженности.Операция = Опер;
				ТаблицаЗадолженности.ДатаОперации = Опер.ДатаОперации;
				ТаблицаЗадолженности.НаименованиеОперации = Опер.СодержаниеПроводки;
				ТаблицаЗадолженности.Сумма = Опер.Сумма;
				
				Если БухИт.ВыбранаПоКт() = 1 Тогда
					ТаблицаЗадолженности.ПризнакОперации = 3;
					
				Иначе
					ТаблицаЗадолженности.ПризнакОперации = 0;
					
					Если Опер.Документ.Вид() = "РасчетКурсовыхРазниц" Тогда
						Док = Опер.Документ;
						НомерСтрокиДокумента = Опер.НомерСтрокиДокумента();
						Док.ПолучитьСтрокуПоНомеру(НомерСтрокиДокумента);
						Если (Док.ВидДоходаРасхода = Перечисление.ВнереализационныеДоходы.КурсовыеРазницы)
						 или (Док.ВидДоходаРасхода = Перечисление.ВнереализационныеДоходы.СуммовыеРазницы) Тогда
							ТаблицаЗадолженности.ПризнакОперации = 2;
						КонецЕсли;
					
					ИначеЕсли Опер.Документ.Вид() = "ОперацииПриобретенияИмущества" Тогда
						Док = Опер.Документ;
						НомерСтрокиДокумента = Опер.НомерСтрокиДокумента();
						Док.ПолучитьСтрокуПоНомеру(НомерСтрокиДокумента);
						Если Док.ВидРасхода = Перечисление.ВидыРасходов.ПриобретениеПрав Тогда
							Если ПустоеЗначение(Док.Объект) = 0 Тогда
								Если Док.Объект.Вид() = "Договоры" Тогда
									Если Опер.Дебет.Договоры = Док.Объект Тогда
										ТаблицаЗадолженности.ПризнакОперации = 1;
									КонецЕсли;
								КонецЕсли;
							КонецЕсли;
						КонецЕсли;  
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			
			ТаблицаЗадолженности.Сортировать("ДатаОперации, ПризнакОперации, Операция");
			ТаблицаЗадолженности.ВыбратьСтроки();
			ТекущаяЗадолженность = ЗадолжненностьНаНачалоПериода;
			Пока ТаблицаЗадолженности.ПолучитьСтроку() = 1 Цикл
				ДатаОперации = "";
				НаименованиеОперации = "";
				СуммаЗадолженности = "";
				КурсоваяРазница = "";
				СтоимостьПриобретенияЗадолженности = "";
				ДатаПогашения = "";
				СуммаПогашения = "";
				Если ТаблицаЗадолженности.ПризнакОперации = 0 Тогда
					ДатаОперации = ТаблицаЗадолженности.ДатаОперации;
					НаименованиеОперации = ТаблицаЗадолженности.НаименованиеОперации;
					СуммаЗадолженности = ФорматС(ТаблицаЗадолженности.Сумма);
					ТекущаяЗадолженность = ТекущаяЗадолженность + ТаблицаЗадолженности.Сумма;
		
				ИначеЕсли ТаблицаЗадолженности.ПризнакОперации = 1 Тогда
					ДатаОперации = ТаблицаЗадолженности.ДатаОперации;
					НаименованиеОперации = ТаблицаЗадолженности.НаименованиеОперации;
					СтоимостьПриобретенияЗадолженности = ФорматС(ТаблицаЗадолженности.Сумма);
					ТекущаяЗадолженность = ТекущаяЗадолженность + ТаблицаЗадолженности.Сумма;
		
				ИначеЕсли ТаблицаЗадолженности.ПризнакОперации = 2 Тогда
					ДатаОперации = ТаблицаЗадолженности.ДатаОперации;
					НаименованиеОперации = ТаблицаЗадолженности.НаименованиеОперации;
					КурсоваяРазница = ФорматС(ТаблицаЗадолженности.Сумма);
					ТекущаяЗадолженность = ТекущаяЗадолженность + ТаблицаЗадолженности.Сумма;
		
				ИначеЕсли ТаблицаЗадолженности.ПризнакОперации = 3 Тогда
					ДатаПогашения = ТаблицаЗадолженности.ДатаОперации;
					СуммаПогашения = ФорматС(ТаблицаЗадолженности.Сумма);
					ТекущаяЗадолженность = ТекущаяЗадолженность - ТаблицаЗадолженности.Сумма;
				КонецЕсли;
				СуммаНепогашеннойЗадолженности = ФорматС(ТекущаяЗадолженность);
			    
				Таб.ВывестиСекцию("Строка");
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;

	НазваниеРегистра = "Регистр учета операций по движению дебиторской задолженности";
	
КонецПроцедуры // ФормированиеПоДебиторскойЗадолженности()

//******************************************************************************
// ФормированиеПоКредиторскойЗадолженности()
//
// Параметры:
//  Нет.
//
// Вызывается из формул элементов диалога:
//  Нет.
//
// Описание:
//  Здесь описывается процедура.
//
Процедура ФормированиеПоКредиторскойЗадолженности()
	
	СчН13_02 = СчетПоКоду("Н13.02");

	ТаблицаЗадолженности = СоздатьОбъект("ТаблицаЗначений");
	ТаблицаЗадолженности.НоваяКолонка("ДатаОперации");
	ТаблицаЗадолженности.НоваяКолонка("ПризнакОперации");
	ТаблицаЗадолженности.НоваяКолонка("Операция");
	ТаблицаЗадолженности.НоваяКолонка("НомерСтрокиДокумента");
	ТаблицаЗадолженности.НоваяКолонка("НаименованиеОперации");
	ТаблицаЗадолженности.НоваяКолонка("Сумма");
	ТаблицаЗадолженности.НоваяКолонка("НДС");
	
	БухИт009 = СоздатьОбъект("БухгалтерскиеИтоги");
	БухИт009.ИспользоватьСубконто(ВидыСубконто.Контрагенты, ВыбрКонтрагент);
	БухИт009.ИспользоватьСубконто(ВидыСубконто.Договоры, ВыбрДоговор);
	БухИт009.ВыполнитьЗапрос(, КонДата, "009",,,,,);

	БухИт = СоздатьОбъект("БухгалтерскиеИтоги");
	БухИт.ИспользоватьСубконто(ВидыСубконто.Контрагенты, ВыбрКонтрагент);
	БухИт.ИспользоватьСубконто(ВидыСубконто.Договоры, ВыбрДоговор);
	БухИт.ВыполнитьЗапрос(НачДата, КонДата, "Н13.02, Н13.03",,, 1, "Проводка", "С");
	
	СтрНалогоплательщик = Константа.ОфициальноеНазваниеОрганизации;
	Если ПустаяСтрока(СтрНалогоплательщик) = 1 Тогда
		СтрНалогоплательщик = Константа.НазваниеОрганизации;	    
	КонецЕсли;
	ИНН = Константа.ИННОрганизации;

	Таб.ИсходнаяТаблица("КредиторскаяЗадолженность");
	Таб.ВывестиСекцию("Шапка");

	БухИт.ВыбратьСубконто(ВидыСубконто.Контрагенты);
	Пока БухИт.ПолучитьСубконто(ВидыСубконто.Контрагенты) = 1 Цикл
		БухИт.ВыбратьСубконто(ВидыСубконто.Договоры);
		Пока БухИт.ПолучитьСубконто(ВидыСубконто.Договоры) = 1 Цикл
			Контрагент = БухИт.Субконто(ВидыСубконто.Контрагенты);
			Договор = БухИт.Субконто(ВидыСубконто.Договоры);

			РеквизитыДоговора = "" + глПолноеНаименование(Контрагент) + ", " + Договор;
			
			// Налоговый кодекс Российской Федерации
			// Статья 250. Внереализационные доходы
		    // 18) в виде сумм кредиторской задолженности (обязательства перед кредиторами), 
			// списанных в связи с истечением срока исковой давности или по другим основаниям, 
			// за исключением случаев, предусмотренных подпунктом 22 пункта 1 статьи 251 настоящего Кодекса;
		
			// Гражданский кодекс Российской Федерации
		    // Статья 191. Начало срока, определенного периодом времени
		    // Течение срока, определенного периодом времени, начинается на следующий день после календарной 
			// даты или наступления события, которыми определено его начало.
			// Статья 196. Общий срок исковой давности
		    // Общий срок исковой давности устанавливается в три года.
		
			Если ПустоеЗначение(Договор.ДатаПогашенияОбязательства) = 0 Тогда
				ДатаНачалаТеченияСрокаИсковойДавности = ДобавитьМесяц(Договор.ДатаПогашенияОбязательства, 36) + 1;
			Иначе
				ДатаНачалаТеченияСрокаИсковойДавности = "не установлена";
			КонецЕсли;
			
			ПорядокРасчетов = "Цены в договоре указаны в ";
			Если Договор.ВалютаДоговора.Выбран() = 0 Тогда
				ПорядокРасчетов = ПорядокРасчетов + "руб.";
				
			Иначе
				ПорядокРасчетов = ПорядокРасчетов + Договор.ВалютаДоговора;
				Если Договор.ОплатаДоговора = 1 Тогда
				    ПорядокРасчетов = ПорядокРасчетов + ", оплата в руб."
		
				Иначе
				    ПорядокРасчетов = ПорядокРасчетов + ", оплата в " + Договор.ВалютаДоговора
				КонецЕсли;
			КонецЕсли;
			
			ОбеспеченностьЗалогом = "";
			Если БухИт009.ПолучитьСубконто(, ВидыСубконто.Контрагенты, Контрагент) = 1 Тогда
				Если БухИт009.ПолучитьСубконто(, ВидыСубконто.Договоры, Договор) = 1 Тогда
					ОбеспеченностьЗалогом = ФорматС(БухИт009.СКД());
				КонецЕсли;
			КонецЕсли;

			Таб.ВывестиСекцию("ОбъектУчета");
                                                         
			ЗадолжненностьНаНачалоПериода = 0;
			НДСпоЗадолжненностиНаНачалоПериода = 0;
			БухИт.ВыбратьСчета();
			Пока БухИт.ПолучитьСчет() = 1 Цикл
				Если БухИт.Счет = СчН13_02 Тогда
					ЗадолжненностьНаНачалоПериода = БухИт.СНК();
					
				Иначе
					НДСпоЗадолжненностиНаНачалоПериода = БухИт.СНК();
				КонецЕсли;   
			КонецЦикла;
			
			ТаблицаЗадолженности.УдалитьСтроки();
			Если (ЗадолжненностьНаНачалоПериода <> 0) или (НДСпоЗадолжненностиНаНачалоПериода <> 0) Тогда
				ТаблицаЗадолженности.НоваяСтрока();
				ТаблицаЗадолженности.ДатаОперации = НачДата;
				ТаблицаЗадолженности.ПризнакОперации = 0;
				ТаблицаЗадолженности.Операция = "";
				ТаблицаЗадолженности.НомерСтрокиДокумента = "";
				ТаблицаЗадолженности.НаименованиеОперации = "";
				ТаблицаЗадолженности.Сумма = "";
				ТаблицаЗадолженности.НДС = "";
			КонецЕсли;
	
			БухИт.ВыбратьПериоды(,,,);	
			Пока БухИт.ПолучитьПериод(,) = 1 Цикл
				Опер = БухИт.Операция;
				
				ТаблицаЗадолженности.НоваяСтрока();
				ТаблицаЗадолженности.Операция = Опер;
				ТаблицаЗадолженности.НомерСтрокиДокумента = Опер.НомерСтрокиДокумента();
				ТаблицаЗадолженности.ДатаОперации = Опер.ДатаОперации;
				ТаблицаЗадолженности.НаименованиеОперации = Опер.СодержаниеПроводки;
				
				Если БухИт.Счет = СчН13_02 Тогда
					ТаблицаЗадолженности.Сумма = Опер.Сумма;
					ТаблицаЗадолженности.НДС = 0;
					
				Иначе
					ТаблицаЗадолженности.Сумма = 0;
					ТаблицаЗадолженности.НДС = Опер.Сумма;
				КонецЕсли;
				
				Если БухИт.ВыбранаПоДт() = 1 Тогда
					ТаблицаЗадолженности.ПризнакОперации = 2;
					
				Иначе
					ТаблицаЗадолженности.ПризнакОперации = 0;
					Если Опер.Документ.Вид() = "РасчетКурсовыхРазниц" Тогда
						Док = Опер.Документ;
						НомерСтрокиДокумента = Опер.НомерСтрокиДокумента();
						Док.ПолучитьСтрокуПоНомеру(НомерСтрокиДокумента);
						Если (Док.ВидДоходаРасхода = Перечисление.ВнереализационныеРасходы.КурсовыеРазницы)
						 или (Док.ВидДоходаРасхода = Перечисление.ВнереализационныеРасходы.СуммовыеРазницы) Тогда
							ТаблицаЗадолженности.ПризнакОперации = 1;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
	
			ТаблицаЗадолженности.Свернуть("ДатаОперации, ПризнакОперации, Операция, НомерСтрокиДокумента, НаименованиеОперации", "Сумма, НДС");
			ТаблицаЗадолженности.Сортировать("ДатаОперации, ПризнакОперации, Операция");
			ТаблицаЗадолженности.ВыбратьСтроки();
    
			ТекущаяЗадолженность = ЗадолжненностьНаНачалоПериода;
			НДСпоТекущейЗадолженности = НДСпоЗадолжненностиНаНачалоПериода;
			Пока ТаблицаЗадолженности.ПолучитьСтроку() = 1 Цикл
				ДатаОперации = "";
				НаименованиеОперации = "";
				СуммаЗадолженности = "";
				НДСпоЗадолженности = "";
				КурсоваяРазница = "";
				НДСпоСуммовойРазнице = "";
				ДатаПогашения = "";
				СуммаПогашения = "";
				НДСпоСуммеПогашения = "";
				Если ТаблицаЗадолженности.ПризнакОперации = 0 Тогда
					ДатаОперации = ТаблицаЗадолженности.ДатаОперации;
					НаименованиеОперации = ТаблицаЗадолженности.НаименованиеОперации;
					СуммаЗадолженности = ФорматС(ТаблицаЗадолженности.Сумма);
					НДСпоЗадолженности = ФорматС(ТаблицаЗадолженности.НДС);
					ТекущаяЗадолженность = ТекущаяЗадолженность + ТаблицаЗадолженности.Сумма;
					НДСпоТекущейЗадолженности = НДСпоТекущейЗадолженности + ТаблицаЗадолженности.НДС;
		
				ИначеЕсли ТаблицаЗадолженности.ПризнакОперации = 1 Тогда
					ДатаОперации = ТаблицаЗадолженности.ДатаОперации;
					НаименованиеОперации = ТаблицаЗадолженности.НаименованиеОперации;
					КурсоваяРазница = ФорматС(ТаблицаЗадолженности.Сумма);
					НДСпоСуммовойРазнице = ФорматС(ТаблицаЗадолженности.НДС);
					ТекущаяЗадолженность = ТекущаяЗадолженность + ТаблицаЗадолженности.Сумма;
					НДСпоТекущейЗадолженности = НДСпоТекущейЗадолженности + ТаблицаЗадолженности.НДС;
		
				ИначеЕсли ТаблицаЗадолженности.ПризнакОперации = 2 Тогда
					ДатаПогашения = ТаблицаЗадолженности.ДатаОперации;
					СуммаПогашения = ФорматС(ТаблицаЗадолженности.Сумма);
					НДСпоСуммеПогашения = ФорматС(ТаблицаЗадолженности.НДС);
					ТекущаяЗадолженность = ТекущаяЗадолженность - ТаблицаЗадолженности.Сумма;
					НДСпоТекущейЗадолженности = НДСпоТекущейЗадолженности - ТаблицаЗадолженности.НДС;
				КонецЕсли;
				СуммаНепогашеннойЗадолженности = ФорматС(ТекущаяЗадолженность);
				НДСпоСуммеНепогашеннойЗадолженности = ФорматС(НДСпоТекущейЗадолженности);
			    
				Таб.ВывестиСекцию("Строка");
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	
	НазваниеРегистра = "Регистр учета операций по движению кредиторской задолженности";
	
КонецПроцедуры // ФормированиеПоКредиторскойЗадолженности()

//******************************************************************************
Процедура Сформировать()
	
	ДатаНачалаНалоговогоПериода2003 = ПолучитьПустоеЗначение("Дата");
	глНовыеПравилаВеденияНУ(КонДата, ДатаНачалаНалоговогоПериода2003);

	Если ПроверкаПериода() = 0 Тогда
		Возврат;
	КонецЕсли;
	     
	Таб = СоздатьОбъект("Таблица");
	
	Если НачДата >= ДатаНачалаНалоговогоПериода2003 Тогда
	   	
	   	// Регистр формируется сразу по дебиторской
	   	// и кредиторской задолженностям вместе.
	   	ФормированиеПоДебиторскойИКредиторскойЗадолженностям();
		
	Иначе
		Если РежимыФормирования = 1 Тогда
		    ФормированиеПоДебиторскойЗадолженности();
			
		Иначе
			ФормированиеПоКредиторскойЗадолженности();
		КонецЕсли;
	КонецЕсли;

	ОтветственныйЗаСоставление = ФИО(Константа.ОтветственныйЗаСоставлениеРегистровНУ);

	Таб.ВывестиСекцию("Подвал");
	Таб.ТолькоПросмотр(1);
	Таб.Опции(0, 0, 0, 0, "ПечатьРегистрУчетаОперацийПоДвижениюДебиторскойИКредиторскойЗадолженности", "ОкноРегистрУчетаОперацийПоДвижениюДебиторскойИКредиторскойЗадолженности");
	Таб.Показать(НазваниеРегистра);
	
КонецПроцедуры
  
//******************************************************************************
// Предопределенная процедура
//
Процедура ПриОткрытии(ФлагЧтенияНастройки)
	
	Если ФлагЧтенияНастройки = 0 Тогда
		РежимыФормирования = 1;
		НачДата = НачГода(РабочаяДата());
		КонДата = КонКвартала(РабочаяДата()); 
	КонецЕсли;
	
	ДатаНачалаНалоговогоПериода2003 = ПолучитьПустоеЗначение("Дата");
	глНовыеПравилаВеденияНУ(КонДата, ДатаНачалаНалоговогоПериода2003);
	
	УправлениеВидимостьюРеквизитов();
	
КонецПроцедуры // ПриОткрытии()