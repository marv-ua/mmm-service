Перем Сч01_1, Сч01_2, Сч02_1, Сч02_2, Сч03_1, Сч03_2, Сч03_3, Сч03_4, Сч010;
//_____________________________________________________________________________
Перем Т;
Перем Обновить;
Перем Расшифровка;
Перем Результат;
Перем ТаблицаГруппировок;
Перем НомерСортировки;
//_____________________________________________________________________________
Функция РасшифровкаОбновить(Обновить)
	Расшифровка.Установить("Обновить", Обновить);
	Возврат Расшифровка;
КонецФункции //РасшифровкаОбновить 

//******************************************************************************
// ВыводИтоговПоПредыдущейГруппе()
//
// Параметры:
//  Нет.
//
// Вызывается из формул элементов диалога:
//  Нет.
//
// Описание:
//  Здесь описывается процедура.
//
Процедура ВыводИтоговПоПредыдущейГруппе()
	
	Если Результат.НомерСтроки <> 1 Тогда 
		НомерСтрокиИтогов = ТаблицаГруппировок.НомерСтрокиТаблицы; 
		Т.Область(НомерСтрокиИтогов, 3).Текст = Формат(ТаблицаГруппировок.нБаланс, "Ч17.2-,");
		Т.Область(НомерСтрокиИтогов, 4).Текст = Формат(ТаблицаГруппировок.нАмортизация, "Ч17.2-,");
		Т.Область(НомерСтрокиИтогов, 5).Текст = Формат(ТаблицаГруппировок.нБаланс - ТаблицаГруппировок.нАмортизация, "Ч17.2-,");
		Т.Область(НомерСтрокиИтогов, 6).Текст = Формат(ТаблицаГруппировок.оБаланс, "Ч17.2-,");
		Т.Область(НомерСтрокиИтогов, 7).Текст = Формат(ТаблицаГруппировок.оАмортизация, "Ч17.2-,");
		Т.Область(НомерСтрокиИтогов, 8).Текст = Формат(ТаблицаГруппировок.кБаланс, "Ч17.2-,");
		Т.Область(НомерСтрокиИтогов, 9).Текст = Формат(ТаблицаГруппировок.кАмортизация, "Ч17.2-,");
		Т.Область(НомерСтрокиИтогов, 10).Текст = Формат(ТаблицаГруппировок.кБаланс - ТаблицаГруппировок.кАмортизация, "Ч17.2-,");
	КонецЕсли;

КонецПроцедуры // ВыводИтоговПоПредыдущейГруппе()
                                                                
//******************************************************************************
// ОбновлениеТаблицыГруппировок()
//
// Параметры:
//  Нет.
//
// Вызывается из формул элементов диалога:
//  Нет.
//
// Описание:
//  Здесь описывается процедура.
//
Процедура ОбновлениеТаблицыГруппировок(НоваяГруппа);
	
	ТаблицаГруппировок.Значение = НоваяГруппа;
	ТаблицаГруппировок.НомерСтрокиТаблицы = Т.ВысотаТаблицы();
	ТаблицаГруппировок.нБаланс = 0;
	ТаблицаГруппировок.кБаланс = 0;
	ТаблицаГруппировок.оБаланс = 0;
	ТаблицаГруппировок.нАмортизация = 0;
	ТаблицаГруппировок.кАмортизация = 0;
	ТаблицаГруппировок.оАмортизация = 0;
	
КонецПроцедуры // КорректировкаТаблицаГруппировок()
//******************************************************************************
// НоваяГруппа()
//
// Параметры:
//  Нет.
//
// Вызывается из формул элементов диалога:
//  Нет.
//
// Описание:
//  Здесь описывается процедура.
//
Процедура НоваяГруппа(НоваяГруппа)            
	
	НомерСтроки = ТаблицаГруппировок.НомерСтроки;
	                                                  
	// вывод итогов в таблицу по предыдущей группировке
	ВыводИтоговПоПредыдущейГруппе();
	
	// вывод названия новой группировки
	Если ТаблицаГруппировок.СинонимИмени = "Амортизационная группа" Тогда
		НазваниеГруппы = ?(ПустоеЗначение(НоваяГруппа) = 1, 
							"<не задана>", 
							Перечисление.АмортизационныеГруппы.ЗначениеПоНомеру(НоваяГруппа));
	Иначе
		НазваниеГруппы = НоваяГруппа;
	КонецЕсли;
	
	ГруппаТаблицы = ТаблицаГруппировок.ПрефиксКИмени + ТаблицаГруппировок.СинонимИмени +": " + НазваниеГруппы;  
	Т.ВывестиСекцию("Группа");
	
	// внесение новой информации по новой группировке
	ОбновлениеТаблицыГруппировок(НоваяГруппа);
	
	// обнуление значения вложенной  группировки, для того, чтобы в дальнейшем оно наверняка обработалось, как новое
	Если ТаблицаГруппировок.КоличествоСтрок() > НомерСтроки Тогда
		ТаблицаГруппировок.УстановитьЗначение(НомерСтроки+1, "Значение", "Значение группировки не задано");
	КонецЕсли;
	
КонецПроцедуры // НоваяГруппа()

//_____________________________________________________________________________
Функция ПроверкаПериода()
	Если ДатаНач > ДатаКон Тогда
		Предупреждение("Неправильно задан период формирования отчета!"+РазделительСтрок+
		               "Дата начала больше даты окончания периода.");
		Возврат 0;
	КонецЕсли;
	Если ДатаКон > КонецРассчитанногоПериодаБИ() Тогда
		Предупреждение("За выбранный период итоги не рассчитаны!"+РазделительСтрок+
		               "Расчет итогов выполняется в режиме"+РазделительСтрок+
					   """Операции - Управление бухгалтерскими итогами"".");
		Возврат 0;
	КонецЕсли;
	Возврат 1;
КонецФункции // ПроверкаПериода()
//_____________________________________________________________________________
Процедура ПриВыбореВарианта()
    Если ВариантФормирования = 1 Тогда
        Форма.ДокументНачисленияАмортизации.Доступность(0);
        Форма.ПодписьС.Доступность(1);
        Форма.ДатаНач.Доступность(1);
        Форма.ПодписьПо.Доступность(1);
        Форма.ДатаКон.Доступность(1);
        Форма.КнопкаПериода.Доступность(1);
    Иначе
        Форма.ПодписьС.Доступность(0);
        Форма.ДатаНач.Доступность(0);
        Форма.ПодписьПо.Доступность(0);
        Форма.ДатаКон.Доступность(0);
        Форма.КнопкаПериода.Доступность(0);
        Форма.ДокументНачисленияАмортизации.Доступность(1);
    КонецЕсли;
КонецПроцедуры //ПриВыбореВарианта
//_____________________________________________________________________________
Процедура Сформировать()
	
	Если ПроверкаПериода() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если ВариантФормирования = 1 Тогда
	ИначеЕсли ДокументНачисленияАмортизации.Выбран() = 0 Тогда
		Предупреждение("Не выбран документ!");
		Возврат;
	КонецЕсли;

    Если Обновить = 2 Тогда
	    СтрокаДействийФормы = "#Закрыть";
	КонецЕсли;
	Если (ТипЗначенияСтр(Т) <> "Таблица") ИЛИ (Обновить = 0) Тогда
	   	Т = СоздатьОбъект("Таблица");
	Иначе
	 	Т.Очистить();
	КонецЕсли;
    Т.ИсходнаяТаблица( "Таблица" );
    
    Расшифровка = СоздатьОбъект("СписокЗначений");
    Расшифровка.Установить("Отчет", "ОтчетПоОС");
    Расшифровка.Установить("ВариантФормирования", ВариантФормирования);
    Расшифровка.Установить("ДатаНач", ДатаНач);
    Расшифровка.Установить("ДатаКон", ДатаКон);
    Расшифровка.Установить("ДокументНачисленияАмортизации", ДокументНачисленияАмортизации);
	
	Расшифровка.Установить("СписокВозможныхГруппировок", СписокВозможныхГруппировок);
	Расшифровка.Установить("Сортировка", Сортировка);
	Расшифровка.Установить("СтрокаСортировки",Сортировка.ТекущаяСтрока());
	Расшифровка.Установить("ОС", ОС);
	Расшифровка.Установить("Группа", Группа);
	Расшифровка.Установить("АмортизационнаяГруппа", АмортизационнаяГруппа);
	Расшифровка.Установить("Подразделение", Подразделение);
    Расшифровка.Установить("МОЛ", МОЛ);
    Отборы = "";
	Если ОС.Выбран() = 1 Тогда
		Отборы  = Отборы + "Основное средство: "+ОС+"; ";
	КонецЕсли;
	Если Группа.Выбран() = 1 Тогда
		Отборы  = Отборы + "Вид (группа) ОС: "+Группа+"; ";
	КонецЕсли;
	Если АмортизационнаяГруппа.Выбран() = 1 Тогда
		Отборы  = Отборы + "Амортизационная группа: "+АмортизационнаяГруппа+"; ";
	КонецЕсли; 
	Если Подразделение.Выбран() = 1 Тогда
		Отборы  = Отборы + "Место эксплуатации: "+Подразделение+"; ";
	КонецЕсли;
	Если МОЛ.Выбран() = 1 Тогда
		Отборы  = Отборы + "Ответственное лицо: "+МОЛ+"; ";
	КонецЕсли;
	Т.ВывестиСекцию("Шапка"); 
	Т.ИспользоватьФормат("Ч15.2-,");
	
	БИ = СоздатьОбъект("БухгалтерскиеИтоги");
	НачДата = ?(ВариантФормирования = 1, ДатаНач, ДокументНачисленияАмортизации);
	КонДата = ?(ВариантФормирования = 1, ДатаКон, ДокументНачисленияАмортизации);
	Если ОС.Выбран() = 1 Тогда
	    БИ.ИспользоватьСубконто(ВидыСубконто.ОсновныеСредства,ОС);
	Иначе
		БИ.ИспользоватьСубконто(ВидыСубконто.ОсновныеСредства);
	КонецЕсли;
	Если Дата(КонДата) > КонецРассчитанногоПериодаБИ() Тогда
		Предупреждение("За данный период бухгалтерские итоги не рассчитаны!");
		Возврат;
	КонецЕсли;
	Если БИ.ВыполнитьЗапрос(НачДата,КонДата,"01.1,01.2,02.1,02.2,03.1,03.2,03.3,03.4,010") = 0 Тогда
		Предупреждение("Не удается выполнить запрос к бухгалтерским итогам!");
		Возврат;
	КонецЕсли;
	//Выбранные бухгалтерские итоги поместим в таблицу значений
	Результат = СоздатьОбъект("ТаблицаЗначений");
	Результат.НоваяКолонка("Группа");
	Результат.НоваяКолонка("Подразделение");
	Результат.НоваяКолонка("МОЛ");
	Результат.НоваяКолонка("АмортизационнаяГруппа");
	Результат.НоваяКолонка("СтавкаНалогаНаИмущество");
	Результат.НоваяКолонка("ОС"); 
	Результат.НоваяКолонка("Код");
	Результат.НоваяКолонка("ДатаВвода");
	Результат.НоваяКолонка("нБаланс", "Число");
	Результат.НоваяКолонка("кБаланс", "Число");
	Результат.НоваяКолонка("оБаланс", "Число");
	Результат.НоваяКолонка("нАмортизация", "Число");
	Результат.НоваяКолонка("кАмортизация", "Число");
	Результат.НоваяКолонка("оАмортизация", "Число");
	
	// таблица с выбранными видами группировок
	ТаблицаГруппировок = СоздатьОбъект("ТаблицаЗначений");
	ТаблицаГруппировок.НоваяКолонка("ИмяГруппировки", "Строка");
	ТаблицаГруппировок.НоваяКолонка("СинонимИмени", "Строка");
	ТаблицаГруппировок.НоваяКолонка("ПрефиксКИмени", "Строка");
	ТаблицаГруппировок.НоваяКолонка("Значение");
	ТаблицаГруппировок.НоваяКолонка("НомерСтрокиТаблицы", "Число", 10, 0);
	ТаблицаГруппировок.НоваяКолонка("нБаланс", "Число");
	ТаблицаГруппировок.НоваяКолонка("кБаланс", "Число");
	ТаблицаГруппировок.НоваяКолонка("оБаланс", "Число");
	ТаблицаГруппировок.НоваяКолонка("нАмортизация", "Число");
	ТаблицаГруппировок.НоваяКолонка("кАмортизация", "Число");
	ТаблицаГруппировок.НоваяКолонка("оАмортизация", "Число");

    Расшифровка = СоздатьОбъект("СписокЗначений");
	Если ВариантФормирования = 1 Тогда
		Расшифровка.Установить("Отчет", "АнализСубконто");
		Расшифровка.Установить("Обновить", 0);
		Расшифровка.Установить("ПланСчетов", ВыбранныйПланСчетов());
		Расшифровка.Установить("РазделительУчета", БухИтоги.ИспользоватьРазделительУчета());
		Расшифровка.Установить("Дата1", ДатаНач);
		Расшифровка.Установить("Дата2", ДатаКон);
		Расшифровка.Установить("ВидСубконто1", ВидыСубконто.ОсновныеСредства);
		Расшифровка.Установить("ОтборСубконто1", 1);
		Расшифровка.Установить("ПоГруппам1", 0);
		Расшифровка.Установить("ДанныеПоСубсчетам", 1);
	Иначе
		Расшифровка.Установить("Документ", ДокументНачисленияАмортизации);
	КонецЕсли;
	
	БИ.ВыбратьСубконто(1,0,0,0,0,"Группа",0);
	Пока БИ.ПолучитьСубконто(1,0,) = 1 Цикл
		Если БИ.Субконто().ЭтоГруппа() = 0 Тогда
			
			//Соответствие фильтрам по начальной дате
			ЕстьНаНачДату = 1;
			Если Подразделение.Выбран() = 1  Тогда
				Если (Подразделение <> БИ.Субконто().Подразделение.Получить(НачДата)) Тогда
					ЕстьНаНачДату = 0;
				КонецЕсли;
			КонецЕсли;
			Если МОЛ.Выбран() = 1  Тогда
				Если МОЛ.ЭтоГруппа() = 1 Тогда
				    Если (БИ.Субконто().МОЛ.Получить(НачДата).ПринадлежитГруппе(МОЛ) = 0) Тогда
				        ЕстьНаНачДату = 0;
				    КонецЕсли;
				ИначеЕсли (МОЛ <> БИ.Субконто().МОЛ.Получить(НачДата)) Тогда
					ЕстьНаНачДату = 0;
				КонецЕсли;
			КонецЕсли;
			
			//Соответствие фильтрам по конечной дате
			ЕстьНаКонДату = 1;
			Если Подразделение.Выбран() = 1  Тогда
				Если (Подразделение <> БИ.Субконто().Подразделение.Получить(КонДата)) Тогда
					ЕстьНаКонДату = 0;
				КонецЕсли;
			КонецЕсли;
			Если МОЛ.Выбран() = 1  Тогда
				Если МОЛ.ЭтоГруппа() = 1 Тогда
				    Если (БИ.Субконто().МОЛ.Получить(КонДата).ПринадлежитГруппе(МОЛ) = 0) Тогда
				        ЕстьНаКонДату = 0;
				    КонецЕсли;
				ИначеЕсли (МОЛ <> БИ.Субконто().МОЛ.Получить(КонДата)) Тогда
					ЕстьНаКонДату = 0;
				КонецЕсли;
			КонецЕсли;
			
			Если (ЕстьНаНачДату = 0) и (ЕстьНаКонДату = 0) Тогда
			    Продолжить;
			КонецЕсли;
			
			Если ПустоеЗначение(Группа) = 0  Тогда
				Если Группа <> БИ.Субконто().Группа Тогда
					Продолжить;
				КонецЕсли;
			КонецЕсли;
			Если ПустоеЗначение(АмортизационнаяГруппа) = 0  Тогда
				Если АмортизационнаяГруппа <> БИ.Субконто().АмортизационнаяГруппа Тогда
					Продолжить;
				КонецЕсли;
			КонецЕсли;
			
			Результат.НоваяСтрока();     
			Результат.Группа = БИ.Субконто().Группа;

			Если ЕстьНаНачДату = 1 Тогда
			    Результат.Подразделение = БИ.Субконто().Подразделение.Получить(НачДата);
				Результат.МОЛ = БИ.Субконто().МОЛ.Получить(НачДата);
				Результат.СтавкаНалогаНаИмущество = БИ.Субконто().СтавкаНалогаНаИмущество.Получить(НачДата);
			Иначе
				Результат.Подразделение = БИ.Субконто().Подразделение.Получить(КонДата);
				Результат.МОЛ = БИ.Субконто().МОЛ.Получить(КонДата);
				Результат.СтавкаНалогаНаИмущество = БИ.Субконто().СтавкаНалогаНаИмущество.Получить(КонДата);
			КонецЕсли;
			
			Результат.АмортизационнаяГруппа = БИ.Субконто().АмортизационнаяГруппа.ПорядковыйНомер();
			Результат.ОС = БИ.Субконто();
			Результат.Код = БИ.Субконто().Код;
			Результат.ДатаВвода = БИ.Субконто().ДатаВводаВЭксплуатацию;
			нБаланс = 0;
			кБаланс = 0;
			оБаланс = 0;
			нАмортизация = 0;
			кАмортизация = 0;
			оАмортизация = 0;
			БИ.ВыбратьСчета(-1,0,1,0);
			Если БИ.ПолучитьСчет(1,Сч01_1) = 1 Тогда
				СчетУчета = Сч01_1;
				нБаланс = БИ.СНД();
				кБаланс = БИ.СКД();
				оБаланс = БИ.ДО() - БИ.КО();
				
			Иначе   
				СчетУчета = ПолучитьПустоеЗначение("Счет");
				Если БИ.ПолучитьСчет(1,Сч03_1) = 1 Тогда
					СчетУчета = Сч03_1;                 
					нБаланс = нБаланс + БИ.СНД();
					кБаланс = кБаланс + БИ.СКД();
					оБаланс = оБаланс + БИ.ДО() - БИ.КО();
				КонецЕсли;	
				Если БИ.ПолучитьСчет(1,Сч03_2) = 1 Тогда
					СчетУчета = Сч03_2;                   
					нБаланс = нБаланс + БИ.СНД();
					кБаланс = кБаланс + БИ.СКД();
					оБаланс = оБаланс + БИ.ДО() - БИ.КО();
				КонецЕсли;	
				Если БИ.ПолучитьСчет(1,Сч03_3) = 1 Тогда
					СчетУчета = Сч03_3;                   
					нБаланс = нБаланс + БИ.СНД();
					кБаланс = кБаланс + БИ.СКД();
					оБаланс = оБаланс + БИ.ДО() - БИ.КО();
				КонецЕсли;
				Если БИ.ПолучитьСчет(1,Сч03_4) = 1 Тогда
					СчетУчета = Сч03_4;                   
					нБаланс = нБаланс + БИ.СНД();
					кБаланс = кБаланс + БИ.СКД();
					оБаланс = оБаланс + БИ.ДО() - БИ.КО();
				КонецЕсли;
			КонецЕсли;
				
			Если Результат.ОС.ПодлежитАмортизации = 0 Тогда //начисление износа
				Если БИ.ПолучитьСчет(1,Сч010) = 1 Тогда
					нАмортизация = БИ.СНД();
					кАмортизация = БИ.СКД();
					оАмортизация = БИ.ДО()-БИ.КО();         
				КонецЕсли;
			Иначе //начисление амортизации
				Если СчетУчета = Сч01_1 Тогда
					Если БИ.ПолучитьСчет(1,Сч02_1) = 1 Тогда
						нАмортизация = БИ.СНК();
						кАмортизация = БИ.СКК();
						оАмортизация = БИ.КО()-БИ.ДО();         
					КонецЕсли;
				Иначе	
					Если БИ.ПолучитьСчет(1,Сч02_2) = 1 Тогда
						нАмортизация = БИ.СНК();
						кАмортизация = БИ.СКК();
						оАмортизация = БИ.КО()-БИ.ДО();         
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
			ВвестиДопСтроку = 0;
			Если ЕстьНаНачДату = 0 Тогда
				Результат.нБаланс = 0;
				Результат.кБаланс = кБаланс;
				Результат.оБаланс = кБаланс;
				Результат.нАмортизация = 0;
				Результат.кАмортизация = кАмортизация;
				Результат.оАмортизация = кАмортизация;
				
			ИначеЕсли ЕстьНаКонДату = 0 Тогда
				Результат.нБаланс = нБаланс;
				Результат.кБаланс = 0;
				Результат.оБаланс = - нБаланс;
				Результат.нАмортизация = нАмортизация;
				Результат.кАмортизация = 0;
				Результат.оАмортизация = - нАмортизация;
			
			ИначеЕсли (БИ.Субконто().Подразделение.Получить(НачДата) <> БИ.Субконто().Подразделение.Получить(КонДата)) и 
				(СписокВозможныхГруппировок.Пометка(СписокВозможныхГруппировок.НайтиЗначение("Подразделение")) = 1) и
				(нБаланс > 0) Тогда
				ВвестиДопСтроку = 1;
			    Результат.нБаланс = нБаланс;
				Результат.кБаланс = 0;
				Результат.оБаланс = - нБаланс;
				Результат.нАмортизация = нАмортизация;
				Результат.кАмортизация = 0;
				Результат.оАмортизация = - нАмортизация;
				
			ИначеЕсли (БИ.Субконто().МОЛ.Получить(НачДата) <> БИ.Субконто().МОЛ.Получить(КонДата)) и 
				(СписокВозможныхГруппировок.Пометка(СписокВозможныхГруппировок.НайтиЗначение("МОЛ")) = 1) и
				(нБаланс > 0) Тогда
				ВвестиДопСтроку = 1;
				Результат.нБаланс = нБаланс;
				Результат.кБаланс = 0;
				Результат.оБаланс = - нБаланс;
				Результат.нАмортизация = нАмортизация;
				Результат.кАмортизация = 0;
				Результат.оАмортизация = - нАмортизация;
			
			ИначеЕсли (БИ.Субконто().СтавкаНалогаНаИмущество.Получить(НачДата) <> БИ.Субконто().СтавкаНалогаНаИмущество.Получить(КонДата)) и 
				(СписокВозможныхГруппировок.Пометка(СписокВозможныхГруппировок.НайтиЗначение("СтавкаНалогаНаИмущество")) = 1) и
				(нБаланс > 0) Тогда
				ВвестиДопСтроку = 1;
				Результат.нБаланс = нБаланс;
				Результат.кБаланс = 0;
				Результат.оБаланс = - нБаланс;
				Результат.нАмортизация = нАмортизация;
				Результат.кАмортизация = 0;
				Результат.оАмортизация = - нАмортизация;
				
			Иначе
				Результат.Подразделение = БИ.Субконто().Подразделение.Получить(КонДата);
				Результат.МОЛ = БИ.Субконто().МОЛ.Получить(КонДата);
				Результат.СтавкаНалогаНаИмущество = БИ.Субконто().СтавкаНалогаНаИмущество.Получить(КонДата);
				Результат.нБаланс = нБаланс;
				Результат.кБаланс = кБаланс;
				Результат.оБаланс = оБаланс;
				Результат.нАмортизация = нАмортизация;
				Результат.кАмортизация = кАмортизация;
				Результат.оАмортизация = оАмортизация;
				
			КонецЕсли;
			
			Если ВвестиДопСтроку = 1 Тогда
				Результат.НоваяСтрока();     
				Результат.Группа = БИ.Субконто().Группа;
				Результат.Подразделение = БИ.Субконто().Подразделение.Получить(КонДата);
				Результат.МОЛ = БИ.Субконто().МОЛ.Получить(КонДата);
				Результат.СтавкаНалогаНаИмущество = БИ.Субконто().СтавкаНалогаНаИмущество.Получить(КонДата);
				
				Результат.АмортизационнаяГруппа = БИ.Субконто().АмортизационнаяГруппа.ПорядковыйНомер();
				Результат.ОС = БИ.Субконто();
				Результат.Код = БИ.Субконто().Код;
				Результат.ДатаВвода = БИ.Субконто().ДатаВводаВЭксплуатацию;
				
				Результат.нБаланс = 0;
				Результат.кБаланс = кБаланс;
				Результат.оБаланс = кБаланс;
				Результат.нАмортизация = 0;
				Результат.кАмортизация = кАмортизация;
				Результат.оАмортизация = кАмортизация;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
    
	// формирование строки-параметра для сортировки таблицы
	СтрокаСортировки = "";
	ИтогиПоКоличеству = 0;
	Префикс = "";
	Для СчетчикЦикла = 1 По СписокВозможныхГруппировок.РазмерСписка() Цикл
		Если СписокВозможныхГруппировок.Пометка(СчетчикЦикла) = 1 Тогда
			Группировка = СписокВозможныхГруппировок.ПолучитьЗначение(СчетчикЦикла);
			СтрокаСортировки = СтрокаСортировки + Группировка +",";
						
			ТаблицаГруппировок.НоваяСтрока();
			ТаблицаГруппировок.ИмяГруппировки = Группировка;        
			Представление = "";
			СписокВозможныхГруппировок.ПолучитьЗначение(СчетчикЦикла, Представление);
			ТаблицаГруппировок.СинонимИмени = Представление;
			ТаблицаГруппировок.Значение = "Значение группировки не задано";
			ТаблицаГруппировок.ПрефиксКИмени = Префикс;
			Префикс = Префикс + "    ";
		КонецЕсли;
	КонецЦикла;
	
	СтрокаСортировки = СтрокаСортировки + Сортировка.ПолучитьЗначение(Сортировка.ТекущаяСтрока());
	
	// сортируе таблицу указанным образом
	Результат.Сортировать(СтрокаСортировки, 1);
	
    
	Результат.ВыбратьСтроки();
	Пока Результат.ПолучитьСтроку() = 1 Цикл
		ТаблицаГруппировок.ВыбратьСтроки();
		Пока ТаблицаГруппировок.ПолучитьСтроку() = 1  Цикл
			ЗначениеГруппировки = Результат.ПолучитьЗначение(Результат.НомерСтроки, ТаблицаГруппировок.ИмяГруппировки);
			
			// если это новое значение группировки
			Если ТаблицаГруппировок.Значение <> ЗначениеГруппировки Тогда
				НоваяГруппа(ЗначениеГруппировки);
			КонецЕсли;                            
			
			ТаблицаГруппировок.нБаланс = ТаблицаГруппировок.нБаланс + Результат.нБаланс;
			ТаблицаГруппировок.кБаланс = ТаблицаГруппировок.кБаланс + Результат.кБаланс;
			ТаблицаГруппировок.оБаланс = ТаблицаГруппировок.оБаланс + Результат.оБаланс;
			ТаблицаГруппировок.нАмортизация = ТаблицаГруппировок.нАмортизация + Результат.нАмортизация;
			ТаблицаГруппировок.кАмортизация = ТаблицаГруппировок.кАмортизация + Результат.кАмортизация;
			ТаблицаГруппировок.оАмортизация = ТаблицаГруппировок.оАмортизация + Результат.оАмортизация;
			
		КонецЦикла;             
		нБалансоваяСтоимость = Результат.нБаланс;
		кБалансоваяСтоимость = Результат.кБаланс;
		оБалансоваяСтоимость = Результат.оБаланс;
		нАмортизация = Результат.нАмортизация;
		кАмортизация = Результат.кАмортизация;
		оАмортизация = Результат.оАмортизация;                     
		нОстаточнаяСтоимость = нБалансоваяСтоимость - нАмортизация;
		кОстаточнаяСтоимость = кБалансоваяСтоимость - кАмортизация;
		Если ВариантФормирования = 1 Тогда
			Расшифровка.Установить("Субконто1", Результат.ОС);
		КонецЕсли;            
		НаименованиеОС = Результат.ОС.Наименование + ", инв.№" + Результат.ОС.Код;
		Т.ВывестиСекцию("ОС");	
	КонецЦикла;
	
	// необходимо вывести итоги по последним значениям группировок
	Если Результат.КоличествоСтрок() <> 0 Тогда
		ТаблицаГруппировок.ВыбратьСтроки();
		Пока ТаблицаГруппировок.ПолучитьСтроку() = 1  Цикл
			ВыводИтоговПоПредыдущейГруппе();
		КонецЦикла;              
	КонецЕсли;
	
	ИТОГОнБалансоваяСтоимость = Результат.Итог("нБаланс");
    ИТОГОкБалансоваяСтоимость = Результат.Итог("кБаланс");
    ИТОГОоБалансоваяСтоимость = Результат.Итог("оБаланс");
    ИТОГОнАмортизация = Результат.Итог("нАмортизация");
    ИТОГОкАмортизация = Результат.Итог("кАмортизация");
    ИТОГОоАмортизация = Результат.Итог("оАмортизация");
    ИТОГОнОстаточнаяСтоимость = ИТОГОнБалансоваяСтоимость - ИТОГОнАмортизация;
    ИТОГОкОстаточнаяСтоимость = ИТОГОкБалансоваяСтоимость - ИТОГОкАмортизация;    
    //Если ((ГруппыОС.Выбран()=0) И ((ОбъектОС.Выбран()=0) или (ОбъектОС.ЭтоГруппа() = 1))) Тогда
		Т.ВывестиСекцию("Итого");
	//Иначе
	//	Т.ВывестиСекцию("Подвал");
    //КонецЕсли;
	Т.Опции(0,0,6,2,"ОпцииПечатиОтчетаПоОС");
	Т.ОбластьПечати(3);
	Т.ТолькоПросмотр(1);
	Т.Показать("Отчет по ОС");
КонецПроцедуры
//_____________________________________________________________________________
Процедура ПриОткрытии()

	Сч01_1 = СчетПоКоду("01.1");
	Сч01_2 = СчетПоКоду("01.2");
	Сч02_1 = СчетПоКоду("02.1");
	Сч02_2 = СчетПоКоду("02.2");
	Сч03_1 = СчетПоКоду("03.1");
	Сч03_2 = СчетПоКоду("03.2");
	Сч03_3 = СчетПоКоду("03.3");
	Сч03_4 = СчетПоКоду("03.4");
	Сч010 = СчетПоКоду("010");
	ГруппыОС = "";
	ОбъектОС = "";

	Если глФлагРасшифровки = 1 Тогда
		Обновить = глОбновить;
		ВариантФормирования = глРасшифровка.Получить("ВариантФормирования");
		ДатаНач = глРасшифровка.Получить("ДатаНач");
		ДатаКон = глРасшифровка.Получить("ДатаКон");
		ДокументНачисленияАмортизации = глРасшифровка.Получить("ДокументНачисленияАмортизации");
		
		глРасшифровка.Получить("СписокВозможныхГруппировок").Выгрузить(СписокВозможныхГруппировок);
		глРасшифровка.Получить("Сортировка").Выгрузить(Сортировка);
		Сортировка.ТекущаяСтрока(глРасшифровка.Получить("СтрокаСортировки"));
		ОС 							= глРасшифровка.Получить("ОС");
		Группа 						= глРасшифровка.Получить("Группа");
		АмортизационнаяГруппа 		= глРасшифровка.Получить("АмортизационнаяГруппа");
		Подразделение 				= глРасшифровка.Получить("Подразделение");
		МОЛ 						= глРасшифровка.Получить("МОЛ");

		Если ДатаНач = Дата(0) Тогда
			ДатаНач = НачалоПериодаБИ();
		КонецЕсли;
		Если ДатаКон = Дата(0) Тогда
			ДатаКон = КонецПериодаБИ();
		КонецЕсли;

	Иначе
		Обновить = 0;
		ВариантФормирования = 1;
		ДатаНач = НачалоПериодаБИ();
		ДатаКон = КонецПериодаБИ();
		ДокументНачисленияАмортизации = "";
	КонецЕсли;
	ПриВыбореВарианта();
	
	Форма.ИспользоватьЗакладки(1);
	Форма.ИспользоватьСлой("Общий, Основной", 2);
	Форма.Закладки.ДобавитьЗначение("Основной", "Основной");
	Форма.Закладки.ДобавитьЗначение("Отборы", "Отбор и сортировка");
	
	Если СписокВозможныхГруппировок.РазмерСписка() = 0 Тогда  //Не заполняем при восстановлении настройки
		СписокВозможныхГруппировок.ДобавитьЗначение("Группа", "Вид (группа) ОС");
		СписокВозможныхГруппировок.ДобавитьЗначение("Подразделение", "Место эксплуатации");
		СписокВозможныхГруппировок.ДобавитьЗначение("МОЛ", "Ответственное лицо");
		СписокВозможныхГруппировок.ДобавитьЗначение("АмортизационнаяГруппа", "Амортизационная группа");
		СписокВозможныхГруппировок.ДобавитьЗначение("СтавкаНалогаНаИмущество", "Ставка налога на имущество");
		СписокВозможныхГруппировок.Пометка(1,1);
	КонецЕсли;
	
	Если Сортировка.РазмерСписка() = 0 Тогда  //Не заполняем при восстановлении настройки
		Сортировка.ДобавитьЗначение("ОС","По наименованию");
		Сортировка.ДобавитьЗначение("Код","По коду");
		Сортировка.ДобавитьЗначение("ДатаВвода","По дате ввода в эксплуатацию"); 
		Сортировка.ТекущаяСтрока(1); 
	КонецЕсли;

	Если глФлагРасшифровки = 1 Тогда
		Если Обновить <> 0 Тогда
			Т = глТаблица;
		КонецЕсли;

		Если Обновить <> 2 Тогда
			Сформировать();
			СтатусВозврата(0);
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры //ПриОткрытии

//******************************************************************************
Процедура ПриВыбореЗакладки(Номер, Значение)                                    

	Форма.ИспользоватьСлой("Общий, "+Значение, 2);
	
КонецПроцедуры