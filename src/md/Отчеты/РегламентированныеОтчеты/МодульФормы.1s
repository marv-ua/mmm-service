Перем ВыбКод;
Перем ВыбУровень;
Перем ВыбГруппа; 
Перем ВыбСостГруппы;  
Перем ИсхКаталог;
Перем ИмяФайла;   
Перем ВремТаблица;
Перем ВремКаталог;
Перем КаталогРелиза; 
Перем НовНомРелиза;    
Перем ИдГруппыОтчетов;
Перем ТекГруппаОтчетов;
Перем СписокЗагруженных;

// переменные блока Интернет-поддержки
Перем Соединение; 
Перем КаталогСайта;
Перем Инфо;

Перем ЕстьВыбранныйОтчет;
Перем КопияКомплекта;

// переменные идентификации формата комплекта
Перем НовыйФормат; // 1 - "новый" формат
//					  0 - "старый" формат 
     
Перем СписокФайловОбязательныхДляОбновления;
    
// ---------------------------------------------------- 
// ПоказатьРекламу()
//
// Процедура открывает внешний отчет и выводит на экран содержащуюся в нем рекламу.
//
Процедура ПоказатьРекламу()
	
	Предст = "";

	КаталогОтчета = ГруппыОтчетов.ПолучитьЗначение(ГруппыОтчетов.ТекущаяСтрока(), Предст);
	
	// Показываем информацию.
	Если ФС.СуществуетФайл(КаталогОтчета + "\Reklama.ert") = 1 Тогда
		
		// Открываем внешний отчет, в котором находится нужная информация для вывода на экран.
		ОткрытьФорму("Отчет#2", , КаталогОтчета + "\Reklama.ert");
		
	КонецЕсли;
	
КонецПроцедуры // ПоказатьРекламу()

// ---------------------------------------------------- 
// ПоказатьИнформацию()
//
// Процедура открывает внешний отчет и выводит на экран содержащуюся в нем информацию.
//
Процедура ПоказатьИнформацию()
	
	Предст = "";

	КаталогОтчета = ГруппыОтчетов.ПолучитьЗначение(ГруппыОтчетов.ТекущаяСтрока(), Предст);

	// Показываем информацию.
	Если ФС.СуществуетФайл(КаталогОтчета + "\Info.ert") = 1 Тогда
		
		// Открываем внешний отчет, в котором находится нужная информация для вывода на экран.
		ОткрытьФорму("Отчет#1", , КаталогОтчета + "\Info.ert");
			
		ПоказатьРекламу();
		
	КонецЕсли;
	
КонецПроцедуры // ПоказатьИнформацию()

// ---------------------------------------------------- 
// ЗапуститьАвторан()
//
// Процедура открывает внешнюю обработку, используемую в качестве авторана.
//
Процедура ЗапуститьАвторан()
	
	Предст = "";

	КаталогОтчета = ГруппыОтчетов.ПолучитьЗначение(ГруппыОтчетов.ТекущаяСтрока(), Предст);
	
	// Запускаем авторан.
	Если ФС.СуществуетФайл(КаталогОтчета + "\Autorun.ert") = 1 Тогда
		
		// Открываем внешний отчет, в котором находится нужная информация для вывода на экран.
		ОткрытьФорму("Отчет#2", , КаталогОтчета + "\Autorun.ert");
		
	КонецЕсли;
	
КонецПроцедуры // ЗапуститьАвторан()

// ---------------------------------------------------- 
Функция ПустойКаталог(ТекКаталог) 
	
	КаталогПуст = 1;
	
	ПромКаталог = СокрЛП(ТекКаталог);
	Если Прав(ПромКаталог, 1) <> "\" Тогда
		ПромКаталог = ПромКаталог + "\";
	КонецЕсли;	
	
	// проверяем, является ли найденный каталог пустым
	ОФС = СоздатьОбъект("ФС");	
	ИФ = ОФС.НайтиПервыйФайл(ПромКаталог + "*.*");
	Пока ПустаяСтрока(ИФ) = 0 Цикл
		Если (ИФ <> ".") И (ИФ <> "..") Тогда
			КаталогПуст = 0;
			Прервать;
		КонецЕсли;
		
		ИФ = ОФС.НайтиСледующийФайл();
	КонецЦикла;	
	
	ОФС = "";
	
	Возврат КаталогПуст;
	
КонецФункции

// ---------------------------------------------------- 
Функция ПолучитьАтрибутНаЧтение(Файл)
	Перем РазмерТекФайла;
	Перем АтрибутыТекФайла;
	Перем ВремяСоздания;
	Перем ВремяПослДоступа;
	Перем ВремяПоследЗаписи;
	Перем РасширенноеИмяФайла;
	    
	ФС.АтрибутыФайла(Файл,РазмерТекФайла,АтрибутыТекФайла,ВремяСоздания,ВремяПослДоступа,ВремяПоследЗаписи,РасширенноеИмяФайла);
	
	ВозврЗнач = 0;
	Если Лев(АтрибутыТекФайла, 1) = "1" Тогда
		// файл имеет атрибут "только для чтения"
		ВозврЗнач = 1;                           
	КонецЕсли;	
		      
	Возврат  ВозврЗнач;
	
КонецФункции

// ---------------------------------------------------- 
Функция ДополнитьСтроку(Стр, Символ, Длина, Режим = 1)
	
	КолСимволов = Длина - СтрДлина(Стр);
	Если КолСимволов > 0  Тогда
		Приращ = "";
		Для Сч = 1 По КолСимволов  Цикл
			Приращ = Приращ + Символ;
		КонецЦикла;           
		
		Возврат ?(Режим = 0, Приращ + Стр, Стр + Приращ);
	Иначе     
		
		Возврат	Стр;
	КонецЕсли;      
	
КонецФункции

//----------------------------------------- 
Процедура ДоступностьЭлементов()
	
	Форма.КнУдалить.Доступность(?(ТаблОтчетов.КоличествоСтрок() > 0, 1, 0) );
	Форма.КнВверх.Доступность(	?(ТаблОтчетов.КоличествоСтрок() > 0, 1, 0) );
	Форма.КнВниз.Доступность(	?(ТаблОтчетов.КоличествоСтрок() > 0, 1, 0) );
	
	Форма.КнВосстИсх.Доступность(	  ?(ГруппыОтчетов.РазмерСписка() > 0, 1, 0) );
	Форма.КнСохранить.Доступность(	  ?(ГруппыОтчетов.РазмерСписка() > 0, 1, 0) );
	Форма.КнВосстановить.Доступность( ?(ГруппыОтчетов.РазмерСписка() > 0, 1, 0) );		
	  
	Форма.ПометитьВсе.Доступность(	  ?(СписокЗагрОтчетов.РазмерСписка() > 0, 1, 0) );
	Форма.СнятьПометки.Доступность(	  ?(СписокЗагрОтчетов.РазмерСписка() > 0, 1, 0) );
	Форма.Инвертировать.Доступность(  ?(СписокЗагрОтчетов.РазмерСписка() > 0, 1, 0) );
	       
	Форма.Кн_Справка.Видимость( ?(ТипЗначения(Норм_Компонента)=0,0,1 ));
	Форма.Кн_Видеокурс.Видимость( ?(ТипЗначения(Видео_Компонента)=0,0,1 )); 
	
КонецПроцедуры // ДоступностьЭлементов()

//----------------------------------------- 
Функция ПоказатьОписание()
	ДопОписание = "";
	
	Если ТаблОтчетов.ТекущаяСтрока() > 0 Тогда
		ДопОписание = СокрЛП(ТаблОтчетов.ПолучитьЗначение(ТаблОтчетов.ТекущаяСтрока(), "ДопОписание"));
	КонецЕсли;    
	       
	Возврат ДопОписание;
	
КонецФункции

//----------------------------------------- 
Процедура ПолучитьОписание()                               
	
	ФайлОписания = ТекГруппаОтчетов + "\Release.txt";
	Если ФС.СуществуетФайл(ФайлОписания) = 0 Тогда
		Возврат;
	КонецЕсли;
    
	Текст = СоздатьОбъект("Текст");                     
	Текст.КодоваяСтраница(0);
	Текст.Открыть(ФайлОписания);
	Текст.ТолькоПросмотр(1);
	Текст.Показать("Описание изменений", ФайлОписания); 
	
КонецПроцедуры

// ----------------------------------------------------
// ДобавитьСтрокуВТаблицу(Инд)
//
// Описание:
// Добавляет в список отчетов строку с номером Инд из
// таблицы ВремТаблица
//
// Параметры:
// Инд - номер строки таблицы ВремТаблица

Процедура ДобавитьСтрокуВТаблицу(Инд)
	
	ТаблОтчетов.НоваяСтрока();
	ТаблОтчетов.Код        = ВремТаблица.ПолучитьЗначение(Инд, "Код");
	ТаблОтчетов.Уровень    = ВремТаблица.ПолучитьЗначение(Инд, "Уровень");
	ТаблОтчетов.ЭтоГруппа  = ВремТаблица.ПолучитьЗначение(Инд, "ЭтоГруппа");
	ТаблОтчетов.Статус     = ВремТаблица.ПолучитьЗначение(Инд, "Статус");    
	ТаблОтчетов.ФайлОтчета = ВремТаблица.ПолучитьЗначение(Инд, "ФайлОтчета");
	ТаблОтчетов.НазвОтчета = ВремТаблица.ПолучитьЗначение(Инд, "НазвОтчета");
	ТаблОтчетов.ДопОписание = ВремТаблица.ПолучитьЗначение(Инд, "ДопОписание");
	
КонецПроцедуры	
	           
// ---------------------------------------------------- 
// ОтобразитьСписок()
//
// Описание:
// Отображает в диалоге иерархическую структуру
// списка отчетов при движении по уровням списка,
// имитируя работу в многоуровневом справочнике.
//  
// Вызывается из других процедур модуля.
//
Процедура ОтобразитьСписок()  
	
	// снимаем фиксацию с таблицы отчетов
	ТаблОтчетов.Фиксировать(0, 0); 
	
    Если (ВыбУровень = 1) И (ВыбСостГруппы = 2) Тогда     
		// заполняем полный список
		Для Инд = 1 По ВремТаблица.КоличествоСтрок() Цикл	
			Если ВремТаблица.ПолучитьЗначение(Инд, "Уровень") = ВыбУровень Тогда 
				
				ДобавитьСтрокуВТаблицу(Инд);
			КонецЕсли;	
		КонецЦикла; 
		                                              
		НомТекСтр = 0;
		ТаблОтчетов.НайтиЗначение(ВыбКод, НомТекСтр, "Код");
		ТаблОтчетов.ТекущаяСтрока(НомТекСтр);
		
	ИначеЕсли ВыбСостГруппы = 1 Тогда
		// раскрываем выбранную группу
		НомВыбСтр = 0;
		ВремТаблица.НайтиЗначение(ВыбКод, НомВыбСтр, "Код");
		Если НомВыбСтр > 0 Тогда
			Инд = НомВыбСтр;
			Если ВыбУровень > 1 Тогда
				// сначала выводим группу - родитель
				// (группу верхнего уровня)
				НомСтрГруппы = 0;             
				КодРодГруппы =  ДополнитьСтроку(Лев(ВыбКод, (ВыбУровень - 1) * 3), "0", 9);
				ВремТаблица.НайтиЗначение(КодРодГруппы, НомСтрГруппы, "Код");
				Если НомСтрГруппы > 0 Тогда
					ДобавитьСтрокуВТаблицу(НомСтрГруппы);
				КонецЕсли;
			КонецЕсли;	
			
			// выводим текущую группу
            ДобавитьСтрокуВТаблицу(Инд);
			
			Инд = Инд + 1;
			Пока Инд <= ВремТаблица.КоличествоСтрок() Цикл
				КодВыбГруппы = Лев(ВремТаблица.ПолучитьЗначение(Инд, "Код"), ВыбУровень * 3);
				Если КодВыбГруппы <> Лев(ВыбКод, ВыбУровень * 3) Тогда
					Прервать;
				КонецЕсли;
				
				Если ВремТаблица.ПолучитьЗначение(Инд, "Уровень") <> (ВыбУровень + 1) Тогда
					Инд = Инд + 1;
					Продолжить;
				КонецЕсли;
				
				ДобавитьСтрокуВТаблицу(Инд);
				Инд = Инд +1;
			КонецЦикла;	
		КонецЕсли;
		
		// раскрываем выбранную группу
		Для Ном=1 По ВыбУровень Цикл
			ТаблОтчетов.УстановитьЗначение(Ном, "Статус", 2);
		КонецЦикла;			
		ТаблОтчетов.Фиксировать(ВыбУровень, 0); 
	
	ИначеЕсли ВыбСостГруппы = 2 Тогда
		// выбрали раскрытую группу
		// переходим на уровень выше
		НомВыбСтр = 0;
		ВремТаблица.НайтиЗначение(ВыбКод, НомВыбСтр, "Код");
		Если НомВыбСтр > 0 Тогда
			Инд = НомВыбСтр;  
			
			// сначала выводим группу - родитель
			// (группу верхнего уровня)
			НомСтрГруппы = 0;             
			КодРодГруппы = ДополнитьСтроку(Лев(ВыбКод, (ВыбУровень - 1) * 3), "0", 9);
			ВремТаблица.НайтиЗначение(КодРодГруппы, НомСтрГруппы, "Код");
			Если НомСтрГруппы > 0 Тогда 
				ДобавитьСтрокуВТаблицу(НомСтрГруппы);

				Инд = НомСтрГруппы + 1;
				Пока Инд <= ВремТаблица.КоличествоСтрок() Цикл
					КодВыбГруппы = Лев(ВремТаблица.ПолучитьЗначение(Инд, "Код"), (ВыбУровень - 1) * 3);
					Если КодВыбГруппы <> Лев(ВыбКод, (ВыбУровень - 1) * 3) Тогда						
						Прервать;
					КонецЕсли;
					
					Если ВремТаблица.ПолучитьЗначение(Инд, "Уровень") <> (ВыбУровень) Тогда
						Инд = Инд + 1;
						Продолжить;
					КонецЕсли;
					
					ДобавитьСтрокуВТаблицу(Инд);
					Инд = Инд +1;
				КонецЦикла;	
			КонецЕсли;
		КонецЕсли;    
		
		// раскрываем родительскую группу
		Для Ном=1 По (ВыбУровень - 1) Цикл
			ТаблОтчетов.УстановитьЗначение(Ном, "Статус", 2);
		КонецЦикла;			
		ТаблОтчетов.Фиксировать(ВыбУровень - 1, 0); 		
		
		НомТекСтр = 0;
		ТаблОтчетов.НайтиЗначение(ВыбКод, НомТекСтр, "Код");
		ТаблОтчетов.ТекущаяСтрока(НомТекСтр);					
	КонецЕсли;
	
	ТаблОтчетов.ТекущаяКолонка("НазвОтчета");
	
КонецПроцедуры	// ОтобразитьСписок()

// ----------------------------------------------------  
// ЗаполнитьСписокОтчетов(ИсхТекст)
//
// Описание:
// Заполняет список отчетов выбранной в диалоге группы отчетов,
// структура которого определяется значением параметра ИсхТекст.
// Вызывается из других процедур модуля.
//
// Параметры: 
// ИсхТекст - листинг состава комплекта в формате
// {{;|;;}ОписаниеГруппы}|{ИмяФайла};НазвОтчета[;ДопОписание]
//
// где
// ОписаниеГруппы - текстовое описание группы отчетов
//					(напр., "Декларация по налогу на прибыль");
//
// ИмяФайла       - имя файла внешнего отчета с расширением;
//
// НазваниеОтчета - текстовое название конкретного отчета;
//
// ДопОписание    - текстовое дополнительное описание группы
//					или	непосредственно отчета.
// ------------------------------------------------------------                                  
// Прим.: количество символов ';' (точка с запятой) перед описанием
//        группы отчетов определяет уровень этой группы в иерархической
//        структуре списка отчетов.
//
Процедура ЗаполнитьСписокОтчетов(ИсхТекст, НеОтображать = 0)
	         
	ТаблОтчетов.УдалитьСтроки();
	ВремТаблица.УдалитьСтроки();
	                       
	Уровень = 0;
	Ном1 = 0;        
	Ном2 = 0;
	Для Инд=2 По ИсхТекст.КоличествоСтрок() Цикл 		
		Стр = СокрЛП(ИсхТекст.ПолучитьСтроку(Инд));      
		                     		
		Если Лев(Стр, 1) = ";" Тогда 			
			Уровень = 1 + ?(Лев(Стр, 2) = ";;", 1, 0);
			
			Если Уровень = 1 Тогда   
				// группа 1-го уровня
				Ном2 = 0;
				Ном1 = Ном1 + 1;
			Иначе     
				// группа 2-го уровня
				Ном2 = Ном2 + 1;
			КонецЕсли;
			
			Код  = Формат(Ном1, "Ч(0)3") + Формат(Ном2, "Ч(0)3") + "000"; 
			
			ПР2 = Найти(Сред(Стр, Уровень + 1), ";");
			Если ПР2 > 0 Тогда
				НазваниеГруппы = СокрЛ(Сред(Стр, Уровень + 1, ПР2 - 1));
				ДопОписание = СокрЛ(Сред(Стр, Уровень + ПР2 + 1));
			Иначе
				НазваниеГруппы = Сред(Стр, Уровень + 1);
				ДопОписание = "";
			КонецЕсли;	
			
			// здесь формируем список групп отчетов 			
			ВремТаблица.НоваяСтрока(); 
			ВремТаблица.Код = Код;
			ВремТаблица.Уровень = Уровень;
			ВремТаблица.ЭтоГруппа = 1;
			ВремТаблица.Статус = 1;
			ВремТаблица.НазвОтчета = НазваниеГруппы; 
			ВремТаблица.ДопОписание = ДопОписание;
		Иначе
			// формируем состав выбранной группы отчетов  
			Инд1 = 0; 	
			Ном3 = 0;
			Уровень = Уровень + 1;
			Если Уровень = 1 Тогда
				Ном1 = Ном1 + 1;
				Ном2 = 0;
			КонецЕсли;	
			Пока (Инд + Инд1) <= ИсхТекст.КоличествоСтрок() Цикл
				СтрСостава = СокрЛП(ИсхТекст.ПолучитьСтроку(Инд + Инд1));				
				Если Лев(СтрСостава, 1) <> ";" Тогда
					// позиция разделителя
					ПР = Найти(СтрСостава,";");
					Если ПР > 0 Тогда 
						Ном3 = Ном3 + ?(Уровень > 1, 1, 0);
						Код = Формат(Ном1, "Ч(0)3") + Формат(Ном2, "Ч(0)3") + Формат(Ном3, "Ч(0)3"); 
						
						ПР2 = Найти(Сред(СтрСостава, ПР + 1), ";");
						Если ПР2 > 0 Тогда
							НазваниеОтчета = СокрЛ(Сред(СтрСостава, ПР + 1, ПР2 - 1));
							ДопОписание = СокрЛ(Сред(СтрСостава, ПР + ПР2 + 1));
						Иначе
							НазваниеОтчета = Сред(СтрСостава, ПР + 1);
							ДопОписание = "";
						КонецЕсли;	
						
						ВремТаблица.НоваяСтрока();                                                  
						ВремТаблица.Код = Код;
						ВремТаблица.Уровень = Уровень;
						ВремТаблица.ЭтоГруппа = 0;
						ВремТаблица.Статус = 3;
						ВремТаблица.НазвОтчета = Сред(СтрСостава, ПР + 1);
						ВремТаблица.ФайлОтчета = ВРег(Лев(СтрСостава, ПР - 1)); 
						ВремТаблица.НазвОтчета = НазваниеОтчета; 
						ВремТаблица.ДопОписание = ДопОписание;
						
						Если Уровень = 1 Тогда
							Инд1 = Инд1 + 1;
							
							Прервать;
						КонецЕсли;	
					КонецЕсли;	
				Иначе 					
					// начало новой группы
					Прервать;
				КонецЕсли; 
				
				Инд1 = Инд1 + 1;
			КонецЦикла;

			Уровень = 0;	
			Инд = Инд + Инд1 - 1;
		КонецЕсли;     
	КонецЦикла;	
	
	Если (ВремТаблица.КоличествоСтрок() <> 0) И (НеОтображать = 0) Тогда     
		
		ВыбКод = "";
		ВыбУровень = 1; 
		ВыбСостГруппы = 2;
		ОтобразитьСписок();
	КонецЕсли;	 
	       		               
КонецПроцедуры // ЗаполнитьСписокОтчетов()

// ----------------------------------------------------
// ЗаполнитьГруппу(КаталогГруппы, Режим)
//
// Описание:         
// Заполняет список отчетов из комплекта, размещенного
// в каталоге, определяемого значением параметра КаталогГруппы.
//
// Параметры:
// КаталогГруппы - каталог размещения файлов комплекта отчетности;
// Режим - принимает следующие значения:
// 	1 - в режиме автозаполнения групп отчетов,
//  2 - в режиме заполнения состава выбранной группы отчетов.
//                                              
// Вызывается из других процедур модуля
//
Процедура ЗаполнитьГруппу(КаталогГруппы, Режим)                   
	              
	Текст = СоздатьОбъект("Текст");

	ФайлСписка = КаталогГруппы + "\RpList.txt";
	Если ФС.СуществуетФайл(ФайлСписка) = 0 Тогда
		// сначала проверим, не является ли каталог пустым		
		Если ПустойКаталог(КаталогГруппы) = 0 Тогда
			Сообщить("Не обнаружен файл " + ФайлСписка, "!");
		КонецЕсли;	
		
		Возврат;
	КонецЕсли;	
	
	Текст.Открыть(ФайлСписка);
	
	Если Режим = 1 Тогда      	
		СтрКомплекта = Текст.ПолучитьСтроку(1);
		Если ПустаяСтрока(СтрКомплекта) = 1 Тогда
			Предупреждение("Нарушена структура файла " + ФайлСписка, 20);
			
			Возврат;
		КонецЕсли;
		
		//ГруппыОтчетов.Установить(СтрКомплекта, ВРег(КаталогГруппы));		
		ГруппыОтчетов.ДобавитьЗначение(ВРег(КаталогГруппы), СтрКомплекта);		
		
		Возврат;
	КонецЕсли;	     
	
	ГруппыОтчетов.Сортировать();
	
	Поз = ГруппыОтчетов.НайтиЗначение(ВРег(КаталогГруппы));
	Если Поз > 0 Тогда
		ГруппыОтчетов.ТекущаяСтрока(Поз);
	КонецЕсли;	
	
	ЗаполнитьСписокОтчетов(Текст);
	
КонецПроцедуры // ЗаполнитьГруппу()	

// ---------------------------------------------------- 
Процедура СохранитьНастройку( Спрашивать = 0 )
	              
	ТекГруппаОтчетов = ГруппыОтчетов.ПолучитьЗначение(ГруппыОтчетов.ТекущаяСтрока(), ИдГруппыОтчетов);
	
	Если Спрашивать = 1 Тогда
		Если Вопрос("Сохранить текущую настройку?","Да+Нет",60) <> "Да" Тогда
		    Возврат;
		КонецЕсли;
	КонецЕсли;
	
	СохранитьЗначение("РеглОтчетНастройка" + СокрЛП(ТекГруппаОтчетов), ВремТаблица);

КонецПроцедуры // СохранитьНастройку()	

// ----------------------------------------------------
Процедура ВосстановитьНастройку( Спрашивать = 0 ) 
	  
	Если Спрашивать = 1 Тогда
		Если Вопрос("Восстановить сохраненную настройку?","Да+Нет",60) <> "Да" Тогда
		    Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ВремТаблица.УдалитьСтроки();
	ТаблОтчетов.УдалитьСтроки();	
	                            
	ТекГруппаОтчетов = ГруппыОтчетов.ПолучитьЗначение(ГруппыОтчетов.ТекущаяСтрока(), ИдГруппыОтчетов);	
	СохрНастройки 	 = ВосстановитьЗначение("РеглОтчетНастройка" + СокрЛП(ТекГруппаОтчетов));
	// попытаемся восстановить текущие настройки
	Если ТипЗначенияСтр(СохрНастройки) <> "ТаблицаЗначений" Тогда
		
		Возврат;
	КонецЕсли;	 
	
	ВремТаблица.Загрузить(СохрНастройки);	
	
	ВыбКод = "";
	ВыбУровень = 1; 
	ВыбСостГруппы = 2;
	ОтобразитьСписок();
	
КонецПроцедуры // ВосстановитьНастройку()

// ----------------------------------------------------
// КоличествоЭлементовГруппы(ТаблЗначений, ИдГруппы, НомСтр)
//
// Описание:
// Вычисляет кол-во элементов группы по коду ИдГруппы
//
// Параметры:
// 	ТаблЗначений - таблица значений, в которой вычисляется
//				   количество элементов группы;
//  ИдГруппы     - код группы, количество элементов которой
//                 вычисляется;
//  НомСтр       - номер строки, соответствующей позиции
//                 группы в таблице ТаблЗначений
//
//  Возвращаемое значение: количество элементов группы (число)
//
// Вызывается из других процедур модуля
//
Функция КоличествоЭлементовГруппы(ТаблЗначений, ИдГруппы, НомСтр = 0 )  
	
	//НомСтр = 0;
	КолвоЭлемГруппы	= 0;
	Если ТаблЗначений.НайтиЗначение(ИдГруппы, НомСтр, "Код") > 0 Тогда
		  
		УровеньГруппы = ТаблЗначений.ПолучитьЗначение(НомСтр, "Уровень");		
		КодРодГруппы = Лев(ИдГруппы, УровеньГруппы * 3);
		Поз = НомСтр;
		Пока Поз <= ТаблЗначений.КоличествоСтрок() Цикл
			ТекКод = ТаблЗначений.ПолучитьЗначение(Поз, "Код");
			Если Лев(ТекКод,  УровеньГруппы * 3) <> КодРодГруппы Тогда
				// начало следующей группы
				Прервать;                   
			КонецЕсли;
		
			Поз = Поз + 1;
		КонецЦикла;
	
		КолвоЭлемГруппы = Поз - НомСтр;            
	КонецЕсли;

	Возврат КолвоЭлемГруппы;

КонецФункции // КоличествоЭлементовГруппы()

// ----------------------------------------------------  
// ГенерироватьНовыйКод()
//
// Описание:
// Генерирует код новой группы/элемента, вставляемой в таблицу
// настроек пользователя ТаблЗнач. Вызывается из процедуры
// обновления пользовательских настроек при загрузке новых
// отчетов. Возвращает значение сгенерированного кода
//
// Параметры:                    
// ТаблЗнач   - таблица значений - настроенный пользователем 
//              отображаемый список отчетов;
// Уровень    - уровень новой позиции;
// КодГруппы  - код родительской группы, в которую следует добавлять
// 			    новый элемент или группу. При отсутствии значения
//			    новый элемент(группа) создается на первом уровне;
// КонПозиция - рассчетный параметр - соответствует номеру позиции
//				(строки) последнего элемента в родительской группе.
// ИсхПорядок - порядковый номер отчета, определяемый по исходному
//				списку, предоставленному фирмой 1С
//
// Возвращаемое значение: код отчета (строка).
//
Функция ГенерироватьНовыйКод(ТаблЗнач, Уровень, КодГруппы = "", КонПозиция = 0, ИсхПорядок = "")
	Перем НачПозиция;
	Перем НовыйКод;
	Перем ИсхПоз;
	Перем КодКонПоз;
	
	Если ПустаяСтрока(КодГруппы) = 0 Тогда
		// вычислим кол-во элементов группы		
		КолЭлементов = КоличествоЭлементовГруппы(ТаблЗнач, КодГруппы, НачПозиция);
		
		// вычислим позицию последнего элемента в группе (в списке)
		КонПозиция = НачПозиция + КолЭлементов - 1;
	Иначе
		Если ТаблЗнач.КоличествоСтрок() = 0 Тогда
			// генерируем код для самого первого элемента
			НовыйКод = "001000000";
			
			Возврат НовыйКод;
		КонецЕсли;
		
		// вычислим позицию последнего элемента в группе (в списке)
		Для Ном = 1 По ТаблЗнач.КоличествоСтрок() Цикл
			Если ТаблЗнач.ПолучитьЗначение(Ном, "Уровень") = 1 Тогда
				КонПозиция = Ном;
			КонецЕсли;	       
		КонецЦикла;	
	КонецЕсли;

	Если ПустоеЗначение(НачПозиция) = 1 Тогда
		НачПозиция  = 1;
	КонецЕсли;

	ПорядокКонПоз = 0;
	// определим наибольший порядковый номер в группе  
	Для НомПоз = НачПозиция По КонПозиция Цикл  
		ПромКод = ТаблЗнач.ПолучитьЗначение(НомПоз, "Код");
		Если ТаблЗнач.ПолучитьЗначение(НомПоз, "Уровень") = Уровень Тогда
			ПромПорядокКонПоз = Число( Лев(ПромКод, Уровень * 3) );
			Если ПромПорядокКонПоз > ПорядокКонПоз Тогда
				ПорядокКонПоз = ПромПорядокКонПоз;
				
				КодКонПоз = ПромКод;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;	 
	
	Если ПустоеЗначение(КодКонПоз) = 1 Тогда 
		// это в случае, когда добавляется 
		// первый элемент группы 
		КодКонПоз = КодГруппы;
	КонецЕсли;	
		
	// генерируем код новой группы или элемента
	НовыйКод = Число(Лев(КодКонПоз, Уровень * 3)) + 1;			
	// представим код в формате 999999999
	НовыйКод = ДополнитьСтроку("" + НовыйКод, "0", Уровень * 3, 0);
	НовыйКод = ДополнитьСтроку(НовыйКод, "0", 9);
	
	Если ПустаяСтрока(ИсхПорядок) = 0 Тогда
		// для соблюдения требуемого порядка следования
		// отчетов в родительской группе применяется
		// следующая конструкция
		
		ИсхКод = Лев(КодКонПоз, (Уровень - 1) * 3) + ИсхПорядок;
		ИсхКод = ДополнитьСтроку(ИсхКод, "0", 9);
		     
		// проверим на наличие сгенерированного кода
		// в пользовательских настройках		 	
		Если  ТаблЗнач.НайтиЗначение(ИсхКод, ИсхПоз, "Код") = 0 Тогда
			НовыйКод = ИсхКод;
		КонецЕсли;
	КонецЕсли;	
	
	Возврат НовыйКод;	                         
	
КонецФункции // ГенерироватьНовыйКод()

// ---------------------------------------------------- 
// ВыстроитьПоПорядку()
//
// Описание:
// Вычисляет номер строки таблицы настроек пользователя,
// в которую необходимо вставить новый элемент (часть отчета),
// и возвращает вычисленное значение.
// Вызывается из процедуры обновления пользовательских настроек
// после обновления (добавления) комплекта отчетности.
//
// Параметры:
// ТаблЗнач   - временная таблица значений, соответствующая таблице
// 				настроек пользователя;
// НачПозиция - номер строки родительской группы отчета в таблице
//				значений;
// КонПозиция - номер строки последнего элемента родительской группы
// 				в таблице настроек;
// КодНовЭлемента - код нового элемента, добавляемого в список отчетов, 
// 					настроенный пользователем.				
//
// Возвращаемое значение: число.
//
Функция ВыстроитьПоПорядку(ТаблЗнач, НачПозиция, КонПозиция, КодНовЭлемента)
	
	НовыйНомер = КонПозиция + 1;
	ПорядковыйНомер = Число( Прав(КодНовЭлемента, 3) );
	
	Если НЕ(КонПозиция > НачПозиция) Тогда
		
		Возврат НовыйНомер;
	КонецЕсли;	
	
	Для НП = (НачПозиция + 1) По КонПозиция Цикл
		ПромКод = ТаблЗнач.ПолучитьЗначение(НП, "Код");
		ПромПорядковыйНомер = Число( Прав(ПромКод, 3) );
		
		Если ПорядковыйНомер < ПромПорядковыйНомер Тогда
			НовыйНомер = НП;
			
			Прервать;
		КонецЕсли;
	КонецЦикла;

	Возврат НовыйНомер;
	
КонецФункции
// ---------------------------------------------------- 
// ОбновлениеПользовательскойНастройки()
//
// Описание:
// Обновляет пользовательскую настройку после обновления 
// комплекта отчетности или отдельно взятых отчетов.
//
// Вызывается из процедуры загруки(обновления) отчетных форм
//

Процедура ОбновлениеПользовательскойНастройки()  
	
	Если СписокЗагруженных.РазмерСписка() = 0 Тогда
		Возврат;
	КонецЕсли;
				               
	КаталогОтчетов = ГруппыОтчетов.ПолучитьЗначение(ГруппыОтчетов.ТекущаяСтрока(), ИдГруппыОтчетов);		

	// заполняем ТаблНастройки начстроенной и сохраненной таблицей
	// списка отчетности
	ТаблНастройки = ВосстановитьЗначение("РеглОтчетНастройка" + СокрЛП(КаталогОтчетов));
	Если ТипЗначенияСтр(ТаблНастройки) <> "ТаблицаЗначений" Тогда
		
		Возврат;
	КонецЕсли;	    
	
	Если ТаблНастройки.КоличествоСтрок() = 0 Тогда
		
		Возврат;
	КонецЕсли;	
	
	// заполняем таблицу ВремТаблица по листингу RpList.txt  
	ФайлСписка = КаталогОтчетов + "\RpList.txt";
	Если ФС.СуществуетФайл(ФайлСписка) = 0 Тогда
		
		Возврат;
	КонецЕсли;	
	
	Текст = СоздатьОбъект("Текст");
	Текст.Открыть(КаталогОтчетов + "\RpList.txt");
	ЗаполнитьСписокОтчетов(Текст, 1);          
	
	Если ВремТаблица.КоличествоСтрок() = 0 Тогда
		Возврат;
	КонецЕсли;                         
	
	ПредыдущийКод = "";
	
	// имеются загруженные отчеты
	СписокЗагруженных.Сортировать();
	Для Ном = 1 По СписокЗагруженных.РазмерСписка() Цикл
		ИФ = ВРег(СписокЗагруженных.ПолучитьЗначение(Ном));
		
		Состояние("Обновление пользовательских настроек ...");
		
		// сначала поищем отчет в настроенном
		// пользователем списке отчетов   
		НП = 0;
		Если ТаблНастройки.НайтиЗначение(ИФ, НП, "ФайлОтчета") > 0 Тогда
			ТаблНастройки.ПолучитьСтрокуПоНомеру(НП);
			// Скорее всего мы загрузили обновленный отчет.
			// На всякий случай обновим его параметры во временной таблице
			Поз = 0;
			Если ВремТаблица.НайтиЗначение(ИФ, Поз, "ФайлОтчета") > 0 Тогда
				ВремТаблица.ПолучитьСтрокуПоНомеру(Поз);
				
				ТаблНастройки.НазвОтчета  = ВремТаблица.НазвОтчета;
				ТаблНастройки.ДопОписание = ВремТаблица.ДопОписание;
				
				ТекущийКод = Лев(ТаблНастройки.Код, 6);
				
				Если НЕ(ПредыдущийКод = ТекущийКод) Тогда
					
					Кол = ВремТаблица.Уровень - 1;
					
					// В цикле обновим наименования групп первого и второго уровней.
					Для Индекс = 1 По Кол Цикл
						
						// Найдем строку с наименованием группы текущего отчета 
						// в списке отчетов, настроенном пользователем.
						Знч    = ?(Индекс = 1, Лев(ТаблНастройки.Код, 6) + "000", Лев(ТаблНастройки.Код, 3) + "000000");
						НомСтр = 0;
						
						Если ТаблНастройки.НайтиЗначение(Знч, НомСтр, "Код") = 1 Тогда
							
							ТаблНастройки.ПолучитьСтрокуПоНомеру(НомСтр);
							
							// Найдем строку с наименованием группы текущего отчета 
							// в стандартном списке отчетов, поставляемым фирмой "1С".
							Знч    = ?(Индекс = 1, Лев(ВремТаблица.Код, 6) + "000", Лев(ВремТаблица.Код, 3) + "000000");
							НомСтр = 0;
							
							Если ВремТаблица.НайтиЗначение(Знч, НомСтр, "Код") = 1 Тогда
								
								ВремТаблица.ПолучитьСтрокуПоНомеру(НомСтр);
								
								// Обновим наименование группы текущего отчета в списке отчетов, 
								// настроенном пользователем.
								ТаблНастройки.НазвОтчета = ВремТаблица.НазвОтчета;
								
							КонецЕсли;
							
						КонецЕсли; 
						
					КонецЦикла;
					
					ПредыдущийКод = ТекущийКод;
					
				КонецЕсли;
				
			КонецЕсли;
			
			Продолжить;
			
		КонецЕсли;
			
		// имеем новый отчет или часть отчета
		// попытаемся идентифицировать родительскую группу
		Поз = 0;
		Если ВремТаблица.НайтиЗначение(ИФ, Поз, "ФайлОтчета") = 0 Тогда
			// пропускаем вспомогательные файлы,
			// не отображаемые в списке отчетов
			Продолжить;
		КонецЕсли;	
		
		ВремТаблица.ПолучитьСтрокуПоНомеру(Поз);

		// определяем параметры отчета
		Код 		= ВремТаблица.Код;
		Уровень 	= ВремТаблица.Уровень;
		ЭтоГруппа 	= ВремТаблица.ЭтоГруппа;
		Статус 		= ВремТаблица.Статус;      
		НазвОтчета 	= ВремТаблица.НазвОтчета;
		ФайлОтчета 	= ВремТаблица.ФайлОтчета;
		ДопОписание = ВремТаблица.ДопОписание;
		
		Группа1 = "";
		Группа2 = "";
		ДопОписание1 = "";
		ДопОписание2 = "";
		
		Если Уровень > 1 Тогда
			// это тот случай, когда отчет является элементом
			// вложенной группировки листинга
			
			// определяем родительские группы
			Если Уровень > 2 Тогда
				КодГруппы2 = ДополнитьСтроку(Лев(Код, (Уровень - 1) * 3), "0", 9);
				КодГруппы1 = ДополнитьСтроку(Лев(Код, (Уровень - 2) * 3), "0", 9);
				
				Поз = 0;
				Если ВремТаблица.НайтиЗначение(КодГруппы2, Поз, "Код") > 0 Тогда
					Группа2 = ВремТаблица.ПолучитьЗначение(Поз, "НазвОтчета");
					ДопОписание2 = ВремТаблица.ПолучитьЗначение(Поз, "ДопОписание");
				КонецЕсли;
				
				Поз = 0;
				Если ВремТаблица.НайтиЗначение(КодГруппы1, Поз, "Код") > 0 Тогда
					Группа1 = ВремТаблица.ПолучитьЗначение(Поз, "НазвОтчета");
					ДопОписание1 = ВремТаблица.ПолучитьЗначение(Поз, "ДопОписание");						
				КонецЕсли;
				
			Иначе
				КодГруппы1 = ДополнитьСтроку(Лев(Код, (Уровень - 1) * 3), "0", 9);
				
				Поз = 0;
				Если ВремТаблица.НайтиЗначение(КодГруппы1, Поз, "Код") > 0 Тогда
					Группа1 = ВремТаблица.ПолучитьЗначение(Поз, "НазвОтчета");
					ДопОписание1 = ВремТаблица.ПолучитьЗначение(Поз, "ДопОписание");						
				КонецЕсли;
				
			КонецЕсли;
			
~М6:				
			// проверим на наличие родительских групп в 
			// настроенной пользователем таблице
			Поз1 = 0;
			Если ТаблНастройки.НайтиЗначение(Группа1, Поз1, "НазвОтчета") > 0 Тогда
				КодГруппы1 = ТаблНастройки.ПолучитьЗначение(Поз1, "Код");
				
				Если ПустаяСтрока(Группа2) = 0 Тогда
					Поз2 = 0;
					Если ТаблНастройки.НайтиЗначение(Группа2, Поз2, "НазвОтчета") > 0 Тогда
						// обнаружена родительская группа 2-го уровня
						КодГруппы2 = ТаблНастройки.ПолучитьЗначение(Поз2, "Код");
						
						ПоследПоз2 = 0;
						КодОтчета = ГенерироватьНовыйКод(ТаблНастройки, Уровень, КодГруппы2, ПоследПоз2, Прав(Код, 3));							
						
						// необходимо соблюсти рекомендованный фирмой 1С порядок
						// следования отчетов внутри родительской группы
						ПорядковыйНомер = Число( Прав(Код, 3) );
						НомНовойСтроки = Мин(Поз2 + ПорядковыйНомер, ПоследПоз2 + 1); 
						
						Если НомНовойСтроки < (Поз2 + ПорядковыйНомер) Тогда
							// выстроем порядок следования частей отчета
							// внутри родительской группы
							НомНовойСтроки = ВыстроитьПоПорядку(ТаблНастройки, Поз2, ПоследПоз2, КодОтчета);
						КонецЕсли;	
						
						// добавляем строку в найденную группу
						ТаблНастройки.НоваяСтрока(НомНовойСтроки);                 
						ТаблНастройки.Код = КодОтчета;
						ТаблНастройки.Уровень = Уровень;
						ТаблНастройки.ЭтоГруппа = ЭтоГруппа;
						ТаблНастройки.Статус = Статус;
						ТаблНастройки.НазвОтчета = НазвОтчета;
						ТаблНастройки.ФайлОтчета = ФайлОтчета;
						ТаблНастройки.ДопОписание = ДопОписание;
					Иначе  
						// Родительская группа не обнаружена.
						// Сгенерируем код группы
						ПоследПоз1 = 0;
						КодГруппы2 = ГенерироватьНовыйКод(ТаблНастройки, (Уровень - 1), КодГруппы1, ПоследПоз1);							
						
						// добавляем новую группу
						ТаблНастройки.НоваяСтрока(ПоследПоз1 + 1);                 
						ТаблНастройки.Код = КодГруппы2;
						ТаблНастройки.Уровень = Уровень - 1;
						ТаблНастройки.ЭтоГруппа = 1;
						ТаблНастройки.Статус = 1;
						ТаблНастройки.НазвОтчета = Группа2;
						ТаблНастройки.ФайлОтчета = "";
						ТаблНастройки.ДопОписание = ДопОписание2;
						
						// добавляем элемент (непосредственно отчет)
						// в созданную группу 
						КодОтчета = Лев(КодГруппы2, (Уровень - 1) * 3) + Прав(Код, 3);
						
						ТаблНастройки.НоваяСтрока(ПоследПоз1 + 2);                 
						ТаблНастройки.Код = КодОтчета;
						ТаблНастройки.Уровень = Уровень;
						ТаблНастройки.ЭтоГруппа = ЭтоГруппа;
						ТаблНастройки.Статус = Статус;
						ТаблНастройки.НазвОтчета = НазвОтчета;
						ТаблНастройки.ФайлОтчета = ФайлОтчета;
						ТаблНастройки.ДопОписание = ДопОписание;
						
					КонецЕсли;	
					
				Иначе		
					// отчет является элементом второго уровня 
					// определим новый код элемента (отчета) в
					// таблице настроек пользователя
					
					ПоследПоз1 = 0;
					КодОтчета = ГенерироватьНовыйКод(ТаблНастройки, Уровень, КодГруппы1, ПоследПоз1, Прав(Код, 3));							
					                               
					// необходимо соблюсти рекомендованный фирмой 1С порядок
					// следования отчетов внутри родительской группы
					ПорядковыйНомер = Число( Прав(Код, 3) );
					НомНовойСтроки = Мин(Поз1 + ПорядковыйНомер, ПоследПоз1 + 1);
					                                 
					Если НомНовойСтроки < (Поз1 + ПорядковыйНомер) Тогда
						// выстроем порядок следования частей отчета
						// внутри родительской группы
						НомНовойСтроки = ВыстроитьПоПорядку(ТаблНастройки, Поз1, ПоследПоз1, КодОтчета);
					КонецЕсли;	
					
					// добавляем элемент в найденную группу
					ТаблНастройки.НоваяСтрока(НомНовойСтроки);                 
					ТаблНастройки.Код = КодОтчета;
					ТаблНастройки.Уровень = Уровень;
					ТаблНастройки.ЭтоГруппа = ЭтоГруппа;
					ТаблНастройки.Статус = Статус;
					ТаблНастройки.НазвОтчета = НазвОтчета;
					ТаблНастройки.ФайлОтчета = ФайлОтчета;
					ТаблНастройки.ДопОписание = ДопОписание;
				КонецЕсли;	
				
			Иначе
				// родительская группа отчета в иерархической структуре
				// не обнаружена. Создаем новую ветвь в этой структуре
				// и добавим в конец списка
				
				// определим код группы 1-го уровня					
				КодГруппы1 = ГенерироватьНовыйКод(ТаблНастройки, 1);							
				
				// добавляем новую группу
				ТаблНастройки.НоваяСтрока();                 
				ТаблНастройки.Код = КодГруппы1;
				ТаблНастройки.Уровень = 1;
				ТаблНастройки.ЭтоГруппа = 1;
				ТаблНастройки.Статус = 1;
				ТаблНастройки.НазвОтчета = Группа1;
				ТаблНастройки.ФайлОтчета = "";
				ТаблНастройки.ДопОписание = ДопОписание1;					
				
				// далее заполняем группы нижестоящих уровней
				// по изложенной конструкции
				Перейти ~М6;
			КонецЕсли;					
			
		Иначе	        
			// отчет является элементом верхнего уровня
			// добавляем новый элемент (непосредственно отчет)
			// в конец списка
			
			// определим код нового элемента 1-го уровня					
			КодЭлемента1 = ГенерироватьНовыйКод(ТаблНастройки, Уровень);							
			
			// новые элементы верхнего уровня
			// добавляем в начало списка
			ТаблНастройки.НоваяСтрока(1);                 
			ТаблНастройки.Код = КодЭлемента1;
			ТаблНастройки.Уровень = Уровень;
			ТаблНастройки.ЭтоГруппа = ЭтоГруппа;
			ТаблНастройки.Статус = Статус;
			ТаблНастройки.НазвОтчета = НазвОтчета;
			ТаблНастройки.ФайлОтчета = ФайлОтчета;
			ТаблНастройки.ДопОписание = ДопОписание;								
		КонецЕсли;	
	КонецЦикла; 
	
	СписокЗагруженных = "";   
	
	// теперь необходимо очистить настроенный пользователем список
	// от ненужных отчетов и пустых групп 
	
	// сеачала удалим невостребованные отчеты
	ПозЭлем = 1;
	Пока ПозЭлем <= ТаблНастройки.КоличествоСтрок() Цикл
	 
		Состояние("Удаление невостребованных отчетов...");
		
		Если ТаблНастройки.ПолучитьЗначение(ПозЭлем, "ЭтоГруппа") = 0 Тогда
			НомСтр = 0;
			Если ВремТаблица.НайтиЗначение(ТаблНастройки.ПолучитьЗначение(ПозЭлем, "ФайлОтчета"), НомСтр, "ФайлОтчета") = 0 Тогда
				ТаблНастройки.УдалитьСтроку(ПозЭлем);   
				
				Продолжить;
			КонецЕсли;
		КонецЕсли;
	
		ПозЭлем = ПозЭлем + 1;
	КонецЦикла;	                                    
	
	// в конце удаляем "пустые" группы отчетов
	ПозГруппы = 1;
	Пока ПозГруппы <= ТаблНастройки.КоличествоСтрок() Цикл
	 
		Состояние("Удаление невостребованных групп...");
		
		Если ТаблНастройки.ПолучитьЗначение(ПозГруппы, "ЭтоГруппа") = 1 Тогда
			НомСтр = 0;
			Если  НЕ(КоличествоЭлементовГруппы( ТаблНастройки, ТаблНастройки.ПолучитьЗначение(ПозГруппы, "Код" )) > 1) Тогда
				ТаблНастройки.УдалитьСтроку(ПозГруппы);   
				
				Продолжить;
			КонецЕсли;
		КонецЕсли;         
		
		ПозГруппы = ПозГруппы + 1;
	КонецЦикла;	                                    
	             
	ТекГруппаОтчетов = ГруппыОтчетов.ПолучитьЗначение(ГруппыОтчетов.ТекущаяСтрока(), ИдГруппыОтчетов);
	
	СохранитьЗначение("РеглОтчетНастройка" + СокрЛП(ТекГруппаОтчетов), ТаблНастройки); 	
	
	
КонецПроцедуры // ОбновлениеПользовательскойНастройки()

// ----------------------------------------------------
// ПроверкаСостояния()                                  
//
// Описание:                         
// Функция проверяет соответствие текущего списка отчетов
// исходному (сохраненному). Возвращает флаг модифицированности
// списка:
// 		0 - не изменен;
//		1 - модифицирован.
//
// Параметры: нет
//
// Возвращаемое значение: число
//
Функция ПроверкаСостояния()
	
	Если ГруппыОтчетов.РазмерСписка() > 0 Тогда
		ТекГруппаОтчетов = ГруппыОтчетов.ПолучитьЗначение(ГруппыОтчетов.ТекущаяСтрока(), ИдГруппыОтчетов);
		
		ИсхТаблОтчетов = ВосстановитьЗначение("РеглОтчетНастройка" + СокрЛП(ТекГруппаОтчетов));
		Если ТипЗначенияСтр(ИсхТаблОтчетов) <> "ТаблицаЗначений" Тогда
			// вероятно, список отчетов открыт впервые
			// В таком случае флаг модифицированности определить невозможно
			// т.к. не с чем сравнивать. Чтобы подстраховаться, возвращаем
			// флаг модифицированности
			
			Возврат 1;
		Иначе
			Если ИсхТаблОтчетов.КоличествоСтрок() <> ВремТаблица.КоличествоСтрок() Тогда             
				Возврат 1;
			Иначе
				Для Н=1 По ИсхТаблОтчетов.КоличествоСтрок() Цикл
					Если  ИсхТаблОтчетов.ПолучитьЗначение(Н, 1) <> ВремТаблица.ПолучитьЗначение(Н, 1) Тогда
						Возврат 1;
					КонецЕсли;
				КонецЦикла;	
			КонецЕсли;                             
		КонецЕсли;	
	КонецЕсли;
	
	Возврат 0;	
КонецФункции  // ПроверкаСостояния 

// ----------------------------------------------------
// ОбработкаВыбораОтчета(КодВыбОтчета)
//
// Описание:
// Вызывается в двух случаях:
// 	а)  из диалога отчета при выборе строки в списке отчетов
// 		В зависимости от содержимого строки (группа или отчет)
// 		открывается список подчиненных элементов выбранной группы
// 		или форма выбранного отчета;
//  б)  из других процедур модуля отчета
//      При открытии формы обработки восстанавливается сохраненный
//      в предыдущем сеансе работы иерархический список отчетов и
//      позиция курсора в этом списке. 
//
// Параметры:
//   КодСохрОтчета - код отчета(группы отчетов), на котором был
//   позиционирован курсор при завершении предыдущего сеанса работы
//   с отчетом. Передается при вызове процедуры в случае а).
//
// Возвращаемое значение: нет.
//

Процедура ОбработкаВыбораОтчета( КодСохрОтчета = "" ) 
	
	ЭтоЭлемент = 0;	
	Если ПустоеЗначение(КодСохрОтчета) = 1 Тогда
		// вызвана из диалога отчета
		
		Если (ТаблОтчетов.НомерСтроки = 0) и (ТаблОтчетов.КоличествоСтрок() > 0) Тогда
			Возврат;
		КонецЕсли; 
	
		ВыбКод     = ТаблОтчетов.Код;
		ВыбУровень = ТаблОтчетов.Уровень;
		ВыбГруппа  = ТаблОтчетов.ЭтоГруппа; 
		НазвОтчета = ТаблОтчетов.НазвОтчета;	
		ФайлОтчета = ТаблОтчетов.ФайлОтчета;
		ВыбСостГруппы = ТаблОтчетов.Статус; 
	Иначе
		// вызвана в модуле отчета
		НомСтр = 0;
		ВыбГруппа = 1;
		Если ВремТаблица.НайтиЗначение(КодСохрОтчета, НомСтр, "Код") > 0 Тогда
			ПромУровень = ВремТаблица.ПолучитьЗначение(НомСтр, "Уровень");
			ПромГруппа = ВремТаблица.ПолучитьЗначение(НомСтр, "ЭтоГруппа");
			   
			ВыбКод = КодСохрОтчета;			
			ВыбУровень = ПромУровень;
			
			Если (ПромУровень = 1) ИЛИ (ПромГруппа = 1) Тогда
				ВыбСостГруппы = 2;
			Иначе
				// Необходимо позиционировать курсор на элемент - 
				// непосредственно на конечный отчет
				ЭтоЭлемент = 1;     
				
				// найдем родительскую группу и раскроем ее для просмотра
				// Определим код родительской группы -
				ВыбКод = ДополнитьСтроку(Лев(ВыбКод, (ВыбУровень - 1) * 3), "0", 9);
				ВыбУровень = ВыбУровень - 1;
			    ВыбСостГруппы = 1;
			КонецЕсли;	
		Иначе
			// не найден отчет (группа отчетов), на который был
			// позиционирован курсор в предыдущем сеансе работы
			Возврат;
		КонецЕсли;	
		
	КонецЕсли;	
		
	Если ВыбГруппа = 0 Тогда                                                                    		
		
		ВыбОтчет = ГруппыОтчетов.ПолучитьЗначение(ГруппыОтчетов.ТекущаяСтрока(), ИдГруппыОтчетов)+"\"+ФайлОтчета;		
		Расширение = ВРег(Прав(ФайлОтчета, 3));
		Если Расширение = "ERT" Тогда
			ОткрытьФорму("Отчет",,ВыбОтчет);
		ИначеЕсли Расширение = "MXL" Тогда
			Таб = СоздатьОбъект("Таблица");
			Таб.Открыть(ВыбОтчет);
			Таб.ТолькоПросмотр(1);
			Таб.Опции(0, 0, 0, 0);
			Таб.Показать(НазвОтчета);
		ИначеЕсли Расширение = "TXT" Тогда
			Текст = СоздатьОбъект("Текст");
			Текст.Открыть(ВыбОтчет);
			Текст.Показать(НазвОтчета, "");
		КонецЕсли;		          
	Иначе 
		
		ТаблОтчетов.УдалитьСтроки();		
		ОтобразитьСписок();
		
		Если ЭтоЭлемент = 1 Тогда
			// позиционируем курсор на элемент списка,
			// код которго передан параметром КодСохрОтчета
			НомСтр = 0;
			Если ТаблОтчетов.НайтиЗначение(КодСохрОтчета, НомСтр, "Код") > 0 Тогда
				ТаблОтчетов.ТекущаяСтрока(НомСтр);
			КонецЕсли;	
        КонецЕсли;
	КонецЕсли;			
КонецПроцедуры // ОбработкаВыбораОтчета()               

// ---------------------------------------------------- 
// ВосстановитьСохрСписок()
//
// Описание:
// Процедура восстанавливает сохраненное во время предыдущего
// сеанса работы с формой представление списка регламентированных
// отчетов за выбранный период. При этом восстанавливается исход-
// ное положение курсора с учетом иерархического представления
// списка отчетов. Восстанавливаются также пользовательские настрой-
// ки - выстроенный порядок следования отчетов (групп), отсутствие
// ранее удаленных отчетов или групп отчетов.
//
// Вызывается при открытии формы, а также при выборе периода отчет-
// ности.
//
Процедура ВосстановитьСохрСписок()
	                      
	Если ГруппыОтчетов.ТекущаяСтрока() = 0 Тогда
		// не обнаружены комплекты регл. отчетности
		Возврат;
	КонецЕсли;	
	
	ТекГруппаОтчетов = ГруппыОтчетов.ПолучитьЗначение(ГруппыОтчетов.ТекущаяСтрока(), ИдГруппыОтчетов);
	     
	ВосстановитьНастройку();
	Если ВремТаблица.КоличествоСтрок() = 0 Тогда
		// не удалось обнаружить сохраненную настройку
		// по выбранному комплекту отчетности
		// Отобразим исходный список отчетов,
		// поставляемый фирмой 1С
		ЗаполнитьГруппу(ТекГруппаОтчетов, 2);
	КонецЕсли;	 
	
	КодРегламентОтчетности = ВосстановитьЗначение( "РеглОтчетКод" + СокрЛП(ТекГруппаОтчетов) );	
	Если ПустоеЗначение(КодРегламентОтчетности) = 0 Тогда
		// восстановим в списке отчетов исходную позицию курсора,
		// сохраненную в предыдущем сеансе работы
		ОбработкаВыбораОтчета( КодРегламентОтчетности );
	КонецЕсли;	
	
	ДоступностьЭлементов();	
	Активизировать("ТаблОтчетов");	
		
КонецПроцедуры // ВосстановитьСохрСписок()

// ---------------------------------------------------- 
Процедура ВыборГруппы()
	Если ГруппыОтчетов.ТекущаяСтрока() = 0 Тогда
		// не загружены комплекты реглам. отчетности
		Возврат;
	КонецЕсли;
          
	ВосстановитьСохрСписок();
	
КонецПроцедуры // ВыборГруппы

// ----------------------------------------------------  
// Заполнить()

// Описание:
// Заполняет список квартальных комплектов отчетности

Процедура Заполнить( ТекКаталог = "" ) 
	
	Каталог = КаталогИБ() + "ExtForms\";
	ФлС = СоздатьОбъект("ФС");                                      
	
	ГруппыОтчетов.УдалитьВсе();
	
	КаталогОтчет = ФлС.НайтиПервыйФайл(Каталог + "Rp*.grp");
	Пока ПустаяСтрока(КаталогОтчет) = 0 Цикл
		ЗаполнитьГруппу(Каталог + КаталогОтчет, 1);
		КаталогОтчет = ФлС.НайтиСледующийФайл();
	КонецЦикла;	
	
	Если ПустаяСтрока(ТекКаталог) = 0 Тогда
		Поз = ГруппыОтчетов.НайтиЗначение(ВРег(ТекКаталог));
		Если Поз > 0 Тогда
			ГруппыОтчетов.ТекущаяСтрока(Поз);
		КонецЕсли;
	КонецЕсли;

	ФлС = "";		
	
КонецПроцедуры // Заполнить()	

// ----------------------------------------------------  
// ВосстановитьИсхСписок()
//
// Описание:
// Восстанавливает и выводит в диалог исходный список отчетов,
// поставляемый фирмой 1С. Позволяет при неудачной модификации
// пользователем списка отчетов всегда иметь возможность восстановить
// первоначальный вариант списка с рекомендованной фирмой 1С последовательностью
// следования отчетов и групп.
//
// Вызывается по нажатии кнопки КнВосстИсх в диалоге отчета.
//
Процедура ВосстановитьИсхСписок() 
	
	Если Вопрос("Восстановить исходный список отчетов," + РазделительСтрок + 
					"поставляемый фирмой 1С ?", "Да+Нет+Отмена") <> "Да" Тогда
		Возврат;
	КонецЕсли;
	
	ТекГруппаОтчетов = ГруппыОтчетов.ПолучитьЗначение(ГруппыОтчетов.ТекущаяСтрока(), ИдГруппыОтчетов);	
	ЗаполнитьГруппу(ТекГруппаОтчетов, 2);	
	ДоступностьЭлементов();              
	
КонецПроцедуры // ВосстановитьИсхСписок()

// ---------------------------------------------------- 
// ИзменитьПозицию( Шаг )
//
// Описание:
// Вызывается по кнопкам сдвига позиции текущего отчета
// в списке отчетов в диалоге форме. Выполняет сдвиг
// позиции текущего отчета на кол-во уровней, заданный
// параметром Шаг, вверх или вниз в зависимости от знака
// параметра.
//
// Параметры:
// Шаг - кол-во уровней, на которое необходимо сдвигать
// текущий отчет (группу отчетов). Направление сдвига
// задается знаком числового параметра.
//
Процедура ИзменитьПозицию( Шаг ) 
	
	Если (ТаблОтчетов.НомерСтроки = 0) и (ТаблОтчетов.КоличествоСтрок() > 0) Тогда
		Возврат;
	КонецЕсли; 	
	
	ТекНомерСтроки  = ТаблОтчетов.НомерСтроки;
	ВыбКод     		= ТаблОтчетов.Код;
	ВыбУровень 		= ТаблОтчетов.Уровень;
	ВыбГруппа  		= ТаблОтчетов.ЭтоГруппа; 
	
	// возможные варианты относительного положения
	// выбранной строки в списке отчетов
	НомКонПозиции = ТекНомерСтроки + Шаг;  
	
	Если (НомКонПозиции < 1) ИЛИ (НомКонПозиции > ТаблОтчетов.КоличествоСтрок()) Тогда
		Возврат;
	КонецЕсли; 
	
	КодКонПоз     = ТаблОтчетов.ПолучитьЗначение(НомКонПозиции, "Код");	
	УровеньКонПоз = ТаблОтчетов.ПолучитьЗначение(НомКонПозиции, "Уровень");
	ГруппаКонПоз  = ТаблОтчетов.ПолучитьЗначение(НомКонПозиции, "ЭтоГруппа");	
	
	Если УровеньКонПоз <> ВыбУровень Тогда
		Возврат;
	КонецЕсли; 
	          
	НомСтр = 0;
	КолвоЭлемГруппы = 1;
	КолвоЭлемКонГруппы = 1;			
	
	Если ВыбГруппа <> 1 Тогда                   
		// позиционируем непосредственно отчет 
		Если ВремТаблица.НайтиЗначение(ВыбКод, НомСтр, "Код") > 0 Тогда 
			
			Если ГруппаКонПоз = 1 Тогда
				// сдвигаемая строка входит в границу другой группы
				// кол-во подчиненных элементов в заменяемой группе
				КолвоЭлемКонГруппы = КоличествоЭлементовГруппы(ВремТаблица, КодКонПоз);
			КонецЕсли;	
			                                                                           
			ВремТаблица.СдвинутьСтроку(КолвоЭлемКонГруппы * Шаг, НомСтр);
		КонецЕсли;
	Иначе
		// позиционируем группу отчетов
		// вместе с группой сдвигаем также все 
		// принадлежащие группе элементы

		КолвоЭлемГруппы = КоличествоЭлементовГруппы(ВремТаблица, ВыбКод, НомСтр);
		Если КолвоЭлемГруппы > 0 Тогда 
			// исходная строка, с которой начинаем
			// сдвиг группы с подчиненными элементами			
			Если Шаг > 0 Тогда
				ИсхПоз = НомСтр;
			Иначе
				ИсхПоз = НомСтр + КолвоЭлемГруппы - 1; 				
			КонецЕсли;
			
			Если ГруппаКонПоз = 1 Тогда
				// сдвигаемая строка входит в границу другой группы
				// кол-во подчиненных элементов в заменяемой группе
				КолвоЭлемКонГруппы = КоличествоЭлементовГруппы(ВремТаблица, КодКонПоз);
			КонецЕсли;	
			
			Для Ном = 1 По КолвоЭлемГруппы Цикл
				ВремТаблица.СдвинутьСтроку((КолвоЭлемГруппы + КолвоЭлемКонГруппы - 1) * Шаг, ИсхПоз);
			КонецЦикла;	
		КонецЕсли;	
	КонецЕсли;
	
	ТаблОтчетов.СдвинутьСтроку(Шаг, ТекНомерСтроки);
	ТаблОтчетов.ТекущаяСтрока(ТекНомерСтроки + Шаг);
			
КонецПроцедуры // ИзменитьПозицию()	

// ----------------------------------------------------
Процедура УдалитьТекПозицию()
	
	Если (ТаблОтчетов.НомерСтроки = 0) и (ТаблОтчетов.КоличествоСтрок() > 0) Тогда
		Возврат;
	КонецЕсли; 	
	
	ТекНомерСтроки  = ТаблОтчетов.НомерСтроки;
	ВыбКод     	= ТаблОтчетов.Код;
	ВыбУровень 	= ТаблОтчетов.Уровень;
	ВыбГруппа  	= ТаблОтчетов.ЭтоГруппа; 
	ВыбНазвание	= ТаблОтчетов.НазвОтчета;
	   
	НомСтр = 0;
	Если ВыбГруппа <> 1 Тогда
		Если Вопрос("Удалить отчет " + СокрП(ВыбНазвание) + "?", "Да+Нет+Отмена") <> "Да" Тогда
			Возврат;
		КонецЕсли;
		
		// если выбранная позиция является конечным отчетом, то из ВремТаблицы
		// удаляем непосредственно сам отчет
		Если ВремТаблица.НайтиЗначение(ВыбКод, НомСтр, "Код") > 0 Тогда 
			ВремТаблица.УдалитьСтроку(НомСтр);
		КонецЕсли;	
	Иначе
		Если Вопрос("Удалить группу отчетов "+ СокрП(ВыбНазвание) + "?" + РазделительСтрок +
			"(Внимание! Будут удалены все вложенные в группу отчеты)", "Да+Нет+Отмена") <> "Да" Тогда
			
			Возврат;
		КонецЕсли;
		
		// если выбранная позиция является группой, то из ВремТаблицы
		// удаляем группу вместе с вложенными элементами
		Если ВремТаблица.НайтиЗначение(ВыбКод, НомСтр, "Код") > 0 Тогда 
			КолвоЭлемГруппы = КоличествоЭлементовГруппы(ВремТаблица, ВыбКод, НомСтр);
			
			Для Поз = 1 По КолвоЭлемГруппы Цикл
				ВремТаблица.УдалитьСтроку(НомСтр);
			КонецЦикла;
		КонецЕсли;	
	КонецЕсли;

	ТаблОтчетов.УдалитьСтроку(ТекНомерСтроки); 
	ТаблОтчетов.ТекущаяСтрока(Мин(ТекНомерСтроки, ТаблОтчетов.КоличествоСтрок()));
	ДоступностьЭлементов();                              
	
КонецПроцедуры // УдалитьТекПозицию()
                                                       
// ----------------------------------------------------
// ОбновитьСписокОтчетов()
//
// Описание:
// Приводит Rplist.txt  в соответствие со списком загруженных отчетов - из него удаляет те отчеты
// (группы отчетов), которые не были загружены. После установки соответствия в случае, когда
// имеет место обновление комплекта отчетности, приводит в соответствие с листингом Rplist.txt
// из каталога комплекта отчетности.
//  
// Вызывается из других процедур модуля
//
Процедура ОбновитьСписокОтчетов()  
	
	КаталогОтчетов = КаталогРелиза + "\";
	
	ИсхТекст = СоздатьОбъект("Текст");
	ИсхТекст.Открыть(КаталогОтчетов + "Rplist.txt"); 
		       		
	НомСтрГруппы1 = 0; 
	НомСтрГруппы2 = 0;
	НоваяГруппа   = 1;
	
	Инд = 2;
	Пока Инд <= ИсхТекст.КоличествоСтрок() Цикл 		
		Стр = СокрЛП(ИсхТекст.ПолучитьСтроку(Инд));
		Если Лев(Стр, 1) = ";" Тогда 
			// это группа
			Если Лев(Стр, 2) = ";;" Тогда
				// это группа 2-го уровня
				Если ((НомСтрГруппы2 + 1) = Инд) И (НоваяГруппа = 0) Тогда
					// удаляем пустую группу
					ИсхТекст.УдалитьСтроку(НомСтрГруппы2);
					Инд = НомСтрГруппы2;
					
				    Продолжить;
				КонецЕсли;	
				НомСтрГруппы2 = Инд;
			Иначе
				// это группа 1-го уровня
				Если ((НомСтрГруппы1 + 1) = Инд) И (НоваяГруппа = 0) Тогда						
					// удаляем пустую группу
					ИсхТекст.УдалитьСтроку(НомСтрГруппы1);
					Инд = НомСтрГруппы1;
					
				    Продолжить;
				ИначеЕсли (НомСтрГруппы2 + 1) = Инд Тогда
					// удаляем пустую группу 2-го уровня
					ИсхТекст.УдалитьСтроку(НомСтрГруппы2);
					Инд = НомСтрГруппы2;
					
					Продолжить;
				КонецЕсли;
				НомСтрГруппы1 = Инд;
			КонецЕсли;	
			НоваяГруппа = 1;
			Инд = Инд + 1;
			
			Продолжить;
		КонецЕсли;
		                    
		ПР = Найти(Стр, ";");
		Если ПР > 1 Тогда
			ФайлОтчета = Лев(Стр, ПР - 1);
			
			Если ФС.СуществуетФайл(КаталогОтчетов + ФайлОтчета) = 0 Тогда				
				ИсхТекст.УдалитьСтроку(Инд);                             
				НоваяГруппа = 0;
				
				Продолжить;
			КонецЕсли;
		КонецЕсли;        
		
		Инд = Инд + 1;
	КонецЦикла;	 
	
	// проверим, если последняя строка исходного текста 
	// является пустой группой отчетов, то удалим его
	НомерПоследСтроки = ИсхТекст.КоличествоСтрок();
	Стр = СокрЛП(ИсхТекст.ПолучитьСтроку(НомерПоследСтроки));
	
	Пока (ПустоеЗначение(Стр) = 1) ИЛИ (Лев(Стр, 1) = ";") Цикл
		
	    ИсхТекст.УдалитьСтроку(НомерПоследСтроки);
		
		НомерПоследСтроки = ИсхТекст.КоличествоСтрок();
	    Стр = СокрЛП(ИсхТекст.ПолучитьСтроку(НомерПоследСтроки));
		
	КонецЦикла;
	
	Если КопияКомплекта > 0 Тогда
		НаимКомплекта = ИсхТекст.ПолучитьСтроку(1);
		ИсхТекст.ЗаменитьСтроку(1, СокрП(НаимКомплекта) + " (" + КопияКомплекта + ")"); 
		
		КопияКомплекта = 0;
	КонецЕсли;
	
	// запишем модифицированный RpList в каталог отчетов
	ИсхТекст.Записать(КаталогОтчетов + "Rplist.txt");
		
КонецПроцедуры

// ---------------------------------------------------- 
Функция ПолучитьНомерРелиза()
	НомерРелиза = "";
	Текст = СоздатьОбъект("Текст");
	
	Попытка
		Текст.Открыть(ИсхКаталог + "ver.id");
	Исключение
		Сообщить("На указанном источнике отсутствует файл" +РазделительСтрок +
			"версии обновляемых отчетов ver.id.", ".");
			
		Возврат НомерРелиза;
	КонецПопытки;
		
	НомерРелиза = СокрЛП(Текст.ПолучитьСтроку(1));
	Возврат НомерРелиза;
КонецФункции

// ----------------------------------------------------
Процедура ПометитьСписок(Параметр)

	Если СписокЗагрОтчетов.РазмерСписка() = 0 Тогда
		Возврат;
	КонецЕсли;

	Для Поз = 1 По СписокЗагрОтчетов.РазмерСписка() Цикл
		ТекПометка = СписокЗагрОтчетов.Пометка(Поз);
		Если Параметр <> -1 Тогда
			СписокЗагрОтчетов.Пометка(Поз, Параметр);
		Иначе
			// необходимо инвертировать пометки
			СписокЗагрОтчетов.Пометка(Поз, (ТекПометка + Параметр) * (-1));
		КонецЕсли;
	КонецЦикла;	
	
КонецПроцедуры

// ----------------------------------------------------
Функция ПолучитьОтметку( ТекЗначение = "" )
	
	Если ПустоеЗначение(ТекЗначение) = 0 Тогда
		
		// возвращаем значение метки значения списка 
		НП = СписокЗагрОтчетов.НайтиЗначение(ВРег(ТекЗначение));
		Если НП > 0 Тогда 
			Возврат СписокЗагрОтчетов.Пометка(НП);
		КонецЕсли;	  
	Иначе	
		
		// возвращаем общее кол-во помеченных значений		
		КолвоПомеченных = 0;
		Для Поз = 1 По СписокЗагрОтчетов.РазмерСписка() Цикл
		    КолвоПомеченных = КолвоПомеченных + СписокЗагрОтчетов.Пометка(Поз);
		КонецЦикла;
		
		Возврат КолвоПомеченных;
	КонецЕсли;			
			
	Возврат 0;	
КонецФункции	

// ---------------------------------------------------- 
Процедура Очистить()
	
	// очищаем каталог временных файлов 
	Если ПустоеЗначение(ВремКаталог) = 0 Тогда 
		
		ОФС = СоздатьОбъект("ФС");	
		Файл = ОФС.НайтиПервыйФайл(ВремКаталог + "*.*" );
		Пока ПустаяСтрока(Файл) = 0 Цикл
			Если (Файл <> "..") И (Файл <> ".") Тогда			
				Попытка
					ОФС.УдалитьФайл(ВремКаталог + Файл);
				Исключение   
					Сообщить("Не удается удалить файл " + ВремКаталог + Файл, "!");
				КонецПопытки;	
			КонецЕсли;                                              
			
			Файл = ОФС.НайтиСледующийФайл();
		КонецЦикла; 
				
		ОФС = "";  
		
		// удаляем назначенный в модуле каталог временных файлов
		ФС.УдалитьКаталог(ВремКаталог);
		Если ПустойКаталог(КаталогРелиза) = 1 Тогда
			ФС.УдалитьКаталог(КаталогРелиза);
		КонецЕсли;		
		
		ВремКаталог = "";
	КонецЕсли;

	СписокЗагрОтчетов.УдалитьВсе();
	ДоступностьЭлементов();	
	
КонецПроцедуры // Очистить()
          
// ----------------------------------------------------
Процедура ЗаполнитьСписокЗагружаемых( Текст )
	
	// читаем список отчетов
	Для Инд = 1 По Текст.КоличествоСтрок() Цикл
		ТекСтрока = Текст.ПолучитьСтроку(Инд);
		Если Лев(ТекСтрока, 2) = "//" Тогда
			Продолжить;
		КонецЕсли;                                      
		                 
		ПР = Найти(ТекСтрока, ";");
		Если ПР > 0 Тогда
			ИмяФайлаАрхива = ВРег(Лев(ТекСтрока, ПР - 1));
			НазвЗагрОтчета = Сред(ТекСтрока, ПР + 1);
			   
			Если СписокФайловОбязательныхДляОбновления.Принадлежит(ИмяФайлаАрхива) = 0 Тогда
				СписокЗагрОтчетов.ДобавитьЗначение(ИмяФайлаАрхива, НазвЗагрОтчета);
			КонецЕсли;
			
		КонецЕсли;
	КонецЦикла;

	Если СписокЗагрОтчетов.РазмерСписка() = 0 Тогда
		Предупреждение("Список загружаемых отчетов пуст!", 20);
		Возврат;
	КонецЕсли;  
	
	СписокЗагрОтчетов.СортироватьПоПредставлению();
	
	// все элементы списка помечаем по умолчанию
	ПометитьСписок(1);
	
	Форма.ИспользоватьСлой("Загрузка",2);		
	Активизировать("СписокЗагрОтчетов");
    ДоступностьЭлементов();
	
КонецПроцедуры	// ЗаполнитьСписокЗагружаемых()                                        

// ----------------------------------------------------
Функция  РазборФорматаКомплекта(ИмяФайлаАрхива) 
	                                         
	ИмяБезРасширения = ВРег(Лев(ИмяФайлаАрхива, СтрДлина(ИмяФайлаАрхива) - 4));
	
	Если  (СтрДлина(ИмяБезРасширения) = 6)
		И (Лев(ИмяБезРасширения,2) = "RP")
		И (Сред(ИмяБезРасширения,5,1) = "Q")
		И (Число(Прав(ИмяБезРасширения,1)) > 0) Тогда
			
		// имеем комплект регл. отчетов "старого" формата
		Возврат 0;
	КонецЕсли;

	Возврат 1;
	
КонецФункции	

// ----------------------------------------------------
// ОтменитьЗагрузку()
//
// Вызывается по кнопке "Отменить" из диалога формы. 
// Описание:
// Отменяет дальнейшие операции по загрузке реглам.
// отчетов.
Процедура ОтменитьЗагрузку()
	Очистить();
		
	Форма.ИспользоватьСлой("Основной",2);
	ДоступностьЭлементов();	
	
КонецПроцедуры	

// ----------------------------------------------------
// РаскрытьАрхив( СписокАрхивов )
//
// Описание:
// Выполняет команду запуска самораспаковывающихся
// архивов, переданных в виде списка параметром
// СписокАрхивов.
//
// Параметры:
// КаталогЗапуска - каталог хранения архивных файлов;
// СписокАрхивов - список значений, элементами которого 
// 	 являются имена файлов - архивов;
// СписокПолученных - список значений, элементами которого
//   являются имена файлов - архивов, обработанных или ско-
//   пированных во временный каталог .
//
Процедура РаскрытьАрхив( СписокАрхивов )
	// выполняет команду запуска
	//самораспаковывающихся архивов			                         
	
	// создаем batch-файл для запуска самораспаковывающихся
	// архивов непосредственно с носителя - источника
	КомандФайл = СоздатьОбъект("Текст");
	КомандФайл.ДобавитьСтроку("@ECHO OFF");
	КомандФайл.ДобавитьСтроку(Лев(ВремКаталог, 2));
	КомандФайл.ДобавитьСтроку("CD " + Сред(ВремКаталог, 3));
	               
	ЕстьВыбранныйОтчет = 0; 
	
	Для Ном=1 По СписокАрхивов.РазмерСписка() Цикл                  
		ИмяФайла = СписокАрхивов.ПолучитьЗначение(Ном);
				
		ТолькоДляЧтения = ПолучитьАтрибутНаЧтение(ВремКаталог + ИмяФайла);
		
		Распаковать = 0;
		
		Если СписокФайловОбязательныхДляОбновления.Принадлежит(ВРег(ИмяФайла)) = 1 Тогда
			
			Распаковать = 1;
			
		Иначе
			
			Поз = СписокЗагрОтчетов.НайтиЗначение(ВРег(ИмяФайла));
			
			Если Поз > 0 Тогда
				Если СписокЗагрОтчетов.Пометка(Поз) <> 0 Тогда
					Распаковать = 1;
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
		Если Распаковать = 1 Тогда
			
			// файл помечен в списке загружаемых
			Состояние("Извлечение данных из архива " + ИмяФайла);         
			
			// сначала удалим файл Rplist.txt во избежание
			// вывода запроса на перезапись
			КомандФайл.ДобавитьСтроку("if exist rplist.txt del rplist.txt");
			
			// добавляем имя архива
			КомандФайл.ДобавитьСтроку(ИмяФайла); 
			
			Если ТолькоДляЧтения = 1 Тогда
				// командный файл имеет атрибут "Только для чтения"
				// Для ОС Win'98 необходимо предварительно снять атрибут
				КомандФайл.ДобавитьСтроку("ATTRIB -R " + ИмяФайла);
			КонецЕсли;	
			
			// удаляем архивный файл  
			КомандФайл.ДобавитьСтроку("DEL " + ИмяФайла); 
			
			ЕстьВыбранныйОтчет = 1;
			
		КонецЕсли;
		
	КонецЦикла;                                                  
	
	// конец команд. файла              
	КомандФайл.ДобавитьСтроку("EXIT");
	
	// создаем командный файл	
	КомандФайл.Записать(ВремКаталог + "RpLoad.bat");
	
	ФС.УстТекКаталог(ВремКаталог);
	         
	ОшибкаПриВыпКоманды = 0;
	// запускаем командный файл на выполнение
	Попытка
		КомандаСистемы("RpLoad.bat");
		
	Исключение
		Сообщить("Не удалось запустить на выполнение командный файл " + ВремКаталог + "RpLoad.bat.", "!");
		
		ОшибкаПриВыпКоманды = 1;		
	КонецПопытки;  
	               
	// удаляем командный файл
	ФС.УдалитьФайл(ВремКаталог + "RpLoad.bat");	
			
КонецПроцедуры // РаскрытьАрхив

// ---------------------------------------------------- 
Процедура СохранитьСписокОбновляемыхОтчетов(Спрашивать = 0)
	
	Если Спрашивать = 1 Тогда
		
		Если Вопрос("Сохранить текущий список обновляемых отчетов?", "Да+Нет", 60) = "Нет" Тогда
			
		    Возврат;
			
		КонецЕсли;
		
	КонецЕсли;
	     
	Состояние("Сохраняется список обновляемых отчетов...");
	
	СохранитьЗначение("РеглОтчетСписокОбновляемыхОтчетов", СписокЗагрОтчетов);
	
КонецПроцедуры

// ---------------------------------------------------- 
Процедура ВосстановитьСписокОбновляемыхОтчетов(Спрашивать = 0)
	
	Если Спрашивать = 1 Тогда
		
		Если Вопрос("Восстановить сохраненный список обновляемых отчетов?", "Да+Нет", 60) = "Нет" Тогда
			
		    Возврат;
			
		КонецЕсли;
		
	КонецЕсли;
	     
	Состояние("Восстанавливается список обновляемых отчетов...");
	
	ВосстановленныйСписокЗагрОтчетов = ВосстановитьЗначение("РеглОтчетСписокОбновляемыхОтчетов");
	
	Если ТипЗначенияСтр(ВосстановленныйСписокЗагрОтчетов) = "СписокЗначений" Тогда
		
		Для Ном = 1 По СписокЗагрОтчетов.РазмерСписка() Цикл
			
			Значение = СписокЗагрОтчетов.ПолучитьЗначение(Ном);
			
			Позиция = ВосстановленныйСписокЗагрОтчетов.НайтиЗначение(Значение);
			
			Если Позиция > 0 Тогда
				                                                                  
				СписокЗагрОтчетов.Пометка(Ном, ВосстановленныйСписокЗагрОтчетов.Пометка(Позиция));
				
			КонецЕсли;	
			
		КонецЦикла; 
		
	КонецЕсли;
	    
КонецПроцедуры

// ---------------------------------------------------- 
Процедура Добавить()               
	
	СписокЗагрОтчетов.УдалитьВсе(); 
	КопияКомплекта = 0;
	
	Если ФС.ВыбратьФайл(0, ИмяФайла, ИсхКаталог, "Выберите файл обновления отчетов", "Программы (*.exe) |*.exe") <> 1 Тогда
    	Возврат;
	КонецЕсли; 
	             
	Текст = СоздатьОбъект("Текст");	
	
	НовыйФормат = РазборФорматаКомплекта(ИмяФайла);
	Если НовыйФормат = 0 Тогда
		// загружаем комплект "старого" формата
		КаталогРелиза =  КаталогИБ() + "ExtForms\" + Лев(ИмяФайла, СтрДлина(ИмяФайла) - 4) + ".grp";
		Если ФС.СуществуетФайл(КаталогРелиза) = 0 Тогда
			ФС.СоздатьКаталог(КаталогРелиза);
		Иначе
			Ответ = Вопрос("Данная группа отчетов уже существует." + РазделительСтрок + "Заменить на новые?", 3);
			
			Если Ответ = 2 Тогда			
				Возврат;        
				
			ИначеЕсли Ответ = 7 Тогда
				// выбрана "Отмена"
				// создаем "рядом" новый комплект отчетности  
				Сч = 1;
				Пока ФС.СуществуетФайл(КаталогИБ() + "ExtForms\" + Лев(ИмяФайла, СтрДлина(ИмяФайла) - 4) + Сч + ".grp") = 1 Цикл
					Сч = Сч + 1;
				КонецЦикла;	
				
				КаталогРелиза = КаталогИБ() + "ExtForms\" + Лев(ИмяФайла, СтрДлина(ИмяФайла) - 4) + Сч + ".grp";	
				ФС.СоздатьКаталог(КаталогРелиза);
				
				КопияКомплекта = Сч;
				
			КонецЕсли; 
			
		КонецЕсли;
		
		ПредстКомплекта = Сред(ИмяФайла,6,1) + " кв. " + ДатаГод(Дата("01.01." + Сред(ИмяФайла,3,2))) + "г.";				
		
		Текст.ДобавитьСтроку(ИмяФайла + ";" + "Комплект реглам. отчетности за " + ПредстКомплекта);				
		           
		ЗаполнитьСписокЗагружаемых(Текст);		
		
		Возврат;
	КонецЕсли;	
			
	НовНомРелиза = ПолучитьНомерРелиза(); 
	Если ПустаяСтрока(НовНомРелиза) = 1 Тогда
		Сообщить("Загрузка прекращена!", "!");
		Возврат;
	КонецЕсли;  
		
	КаталогРеглОтчетов = КаталогИБ() + "ExtForms\";
	
	// для ОС Win'9x наличие каталога регламентированных отчетов
	// проверяем без слэша в конце пути
	КаталогРеглОтчетовWin9x = КаталогИБ() + "ExtForms";
	
	Если (ФС.СуществуетФайл(КаталогРеглОтчетов) = 0) И (ФС.СуществуетФайл(КаталогРеглОтчетовWin9x) = 0) Тогда
		ФС.СоздатьКаталог(КаталогРеглОтчетов);
	КонецЕсли;	
	
	КаталогРелиза =  КаталогРеглОтчетов + "Rp" + Лев(НовНомРелиза, 4) + ".grp";
	Если ФС.СуществуетФайл(КаталогРелиза) = 0 Тогда
		ФС.СоздатьКаталог(КаталогРелиза);
	Иначе   
		КаталогПуст = 0;
		Попытка   
			// определяем версию имеющегося комплекта отчетности						
			Текст.Открыть(КаталогРелиза + "\ver.id");
			ТекНомРелиза = СокрЛП(Текст.ПолучитьСтроку(1));
			Если Число(Сред(ТекНомРелиза, 5, 3)) > Число(Сред(НовНомРелиза, 5, 3)) Тогда
				Если Вопрос("Загружаемый комплект отчетности имеет более раннюю версию," + РазделительСтрок +
					"чем имеющийся. Вы хотите продолжить загрузку?", "Да+Нет") <> "Да" Тогда
					
					Возврат;
				КонецЕсли;
			КонецЕсли;							
		Исключение   
			КаталогПуст = ПустойКаталог(КаталогРелиза);
			Если КаталогПуст = 0 Тогда
				Сообщить("В каталоге комплекта отчетности " + КаталогРелиза + РазделительСтрок +
				" не обнаружен файл версии ver.id.", "!");
			КонецЕсли;		
		КонецПопытки;
	КонецЕсли;	                        
	      
	Попытка    
		// открываем файл листинга
		Текст.Открыть(ИсхКаталог + "Loadlst.txt"); 
	Исключение
		Предупреждение("На выбранном источнике отсутствует" + РазделительСтрок +
					"список отчетов Loadlst.txt." + РазделительСтрок + 
					"Загрузка прекращена!", 60);			
		Возврат;
	КонецПопытки;
                     
    ЗаполнитьСписокЗагружаемых(Текст);
	      
	ВосстановитьСписокОбновляемыхОтчетов();
	
КонецПроцедуры // Добавить()

// ---------------------------------------------------- 
Процедура Загрузить() 
	Перем Представление; 
	
	ОбновляемССайта  = 0;
	КолвоЗагруженных = 0;		
	КолвоВыбранных   = ПолучитьОтметку();
	
	Если КолвоВыбранных = 0 Тогда
		Предупреждение("Не выбран ни один отчет.", 60);
		
		Возврат;
	КонецЕсли;
	
	КолвоВыбранных = КолвоВыбранных + СписокФайловОбязательныхДляОбновления.РазмерСписка();
	   
	СохранитьСписокОбновляемыхОтчетов();
	
	// создаем каталог размещения временных файлов
	Если Лев(КаталогИБ(), 2) = "\\" Тогда
		ВремКаталог = КаталогВременныхФайлов() + "temp.grp";
	Иначе
		ВремКаталог = КаталогИБ() + "ExtForms\temp.grp";
	КонецЕсли;  
	
	Если Лев(ВремКаталог, 2) = "\\" Тогда
		// ситуация, когда каталог временных файлов определена на сетевом диске, недопустима
		// Выдаем сообщение об этом и прекращаем загрузку
		Сообщить("Обновление регламентированной	отчетности прекращено вследствие определения"   + РазделительСтрок + 
			"каталога временных файлов на сетевом диске. Это может быть каталог, установленный" + РазделительСтрок +
			"в командной строке запуска системы 1С:Предприятие или каталог временных файлов"    + РазделительСтрок +
			"установленный в операционной системе.", "!");
			
		Сообщить("Для выполнения загрузки необходимо определить каталог временных файлов на локальном диске!", "i");	
		
		Возврат;
	КонецЕсли;	
	
	Если ФС.СуществуетФайл( ВремКаталог ) = 0 Тогда
		ФС.СоздатьКаталог(ВремКаталог);
	КонецЕсли;   
	ВремКаталог = ВремКаталог + "\"; 

	СписокПолученных	 = СоздатьОбъект("СписокЗначений");
	           
	ТекКаталог = ФС.ТекКаталог();	
	
	Если Найти( ВРЕГ(ИсхКаталог), "HTTP://") > 0 Тогда
		ОбновляемССайта = 1;     
		
		Попытка			
			
			Для Поз = 1 По СписокФайловОбязательныхДляОбновления.РазмерСписка() Цикл
				
				ИмяФайла = СписокФайловОбязательныхДляОбновления.ПолучитьЗначение(Поз);
				
				Если СписокПолученных.Принадлежит(Врег(ИмяФайла)) = 0 Тогда
					
					КолвоЗагруженных = КолвоЗагруженных + 1;
					
					Состояние("Копируется архив " + ИмяФайла + " ("+КолвоЗагруженных + " из " + КолвоВыбранных + ")"); 
					
					Соединение.ПолучитьКакФайл(ИсхКаталог+ИмяФайла+КаталогСайта, ВремКаталог+ИмяФайла);					
					СписокПолученных.ДобавитьЗначение(ВРег(ИмяФайла));
					
				КонецЕсли;				
				
			КонецЦикла;	                                                  
			
			Для Поз = 1 По СписокЗагрОтчетов.РазмерСписка() Цикл
				
				ИмяФайла = СписокЗагрОтчетов.ПолучитьЗначение(Поз);
				Если (СписокЗагрОтчетов.Пометка(Поз) > 0) И (СписокПолученных.Принадлежит(Врег(ИмяФайла)) = 0) Тогда
					КолвоЗагруженных = КолвоЗагруженных + 1;									
					Состояние("Копируется архив " + ИмяФайла + " ("+КолвоЗагруженных + " из " + КолвоВыбранных + ")"); 
					
					Соединение.ПолучитьКакФайл(ИсхКаталог+ИмяФайла+КаталогСайта, ВремКаталог+ИмяФайла);					
					СписокПолученных.ДобавитьЗначение(ВРег(ИмяФайла));
				КонецЕсли;				
			КонецЦикла;	                                                  
			        
			Соединение = "";
			Инфо = "";
			
			Перейти ~М3;
		Исключение
			Сообщить("Не удалось получить файлы обновленных комплектов.", "!");
			
			Соединение = "";
			Инфо = "";
			Возврат;
		КонецПопытки;
		
	ИначеЕсли НовыйФормат = 0 Тогда
		     
		// Загружаем комплект в "старом" формате
		Для Поз = 1 По СписокФайловОбязательныхДляОбновления.РазмерСписка() Цикл
			
			ИмяФайла = СписокФайловОбязательныхДляОбновления.ПолучитьЗначение(Поз);
			Если СписокПолученных.Принадлежит(Врег(ИмяФайла)) = 0 Тогда
				КолвоЗагруженных = КолвоЗагруженных + 1;
				
				Состояние("Копируется архив " + ИмяФайла + " ("+КолвоЗагруженных + " из " + КолвоВыбранных + ")"); 			
				ФС.КопироватьФайл( ИсхКаталог + ИмяФайла, ВремКаталог + ИмяФайла, 0);
					
				СписокПолученных.ДобавитьЗначение(ВРег(ИмяФайла));				
			КонецЕсли;				
		КонецЦикла;
		
		// Загружаем комплект в "старом" формате
		Для Поз = 1 По СписокЗагрОтчетов.РазмерСписка() Цикл
			
			ИмяФайла = СписокЗагрОтчетов.ПолучитьЗначение(Поз);
			Если (СписокЗагрОтчетов.Пометка(Поз) > 0) И (СписокПолученных.Принадлежит(Врег(ИмяФайла)) = 0) Тогда
				КолвоЗагруженных = КолвоЗагруженных + 1;
				
				Состояние("Копируется архив " + ИмяФайла + " ("+КолвоЗагруженных + " из " + КолвоВыбранных + ")"); 			
				ФС.КопироватьФайл( ИсхКаталог + ИмяФайла, ВремКаталог + ИмяФайла, 0);
					
				СписокПолученных.ДобавитьЗначение(ВРег(ИмяФайла));				
			КонецЕсли;				
		КонецЦикла;
		   
		Перейти ~М3;
	КонецЕсли;	
    
~М1:
    // сначала проверим релиз загружаемых отчетов
	Если ПолучитьНомерРелиза() <> НовНомРелиза Тогда
		Если Вопрос("Номер релиза загружаемой части не совпадает с исходным." + РазделительСтрок + 
			"Продолжить загрузку других частей комплекта?", "Да+Нет") = "Да" Тогда
				
			Перейти ~М2;
		Иначе
			
			Перейти ~М3;
		КонецЕсли;	
	КонецЕсли;  
	          	
	ИмяФайла = ФС.НайтиПервыйФайл( ИсхКаталог + "*.exe"); 
	Пока ПустаяСтрока(ИмяФайла) = 0 Цикл
		     
		//Если (ПолучитьОтметку(Врег(ИмяФайла)) > 0) И (СписокПолученных.Принадлежит(Врег(ИмяФайла)) = 0) Тогда
		Если ((ПолучитьОтметку(Врег(ИмяФайла)) > 0) ИЛИ (СписокФайловОбязательныхДляОбновления.Принадлежит(Врег(ИмяФайла)) = 1))
		   И (СписокПолученных.Принадлежит(Врег(ИмяФайла)) = 0) Тогда
			КолвоЗагруженных = КолвоЗагруженных + 1;

			Состояние("Копируется архив " + ИмяФайла + " ("+КолвоЗагруженных + " из " + КолвоВыбранных + ")"); 			
			ФС.КопироватьФайл( ИсхКаталог + ИмяФайла, ВремКаталог + ИмяФайла, 0);
			
			СписокПолученных.ДобавитьЗначение(ВРег(ИмяФайла));				
		КонецЕсли;	
		
		ИмяФайла = ФС.НайтиСледующийФайл();
	КонецЦикла;	
	               	
~М2:	
	Если (КолвоВыбранных - КолвоЗагруженных) > 0 Тогда 
		// не все отчеты из листинга были загружены
		Источник = ВРЕГ(Лев(ИсхКаталог,2));
		Если (Источник = "A:") ИЛИ (Источник = "B:") Тогда
			// если загружаем с дискет
			Если Вопрос("Вставьте следующую дискету и нажмите <OK>", 1) > 1 Тогда
				Если Вопрос("Не все отчеты из списка были загружены." + РазделительСтрок +
					"Продолжить загрузку с других дискет?", "Да+Нет") = "Нет" Тогда
						
					Перейти ~М3;
				КонецЕсли;	
			КонецЕсли;
			
			Перейти ~М1; 
		
		Иначе
			// загружаем с иных источников
			Если Вопрос("Не все отчеты из списка были загружены." + РазделительСтрок +
				"Продолжить загрузку с других источников?", "Да+Нет+Отмена") = "Да" Тогда
			
				Если ФС.ВыбратьФайл(0, ИмяФайла, ИсхКаталог, "Выберите файл обновления отчетов", "Программы (*.exe) |*.exe") = 1 Тогда
					Перейти ~М1; 
				КонецЕсли;
			КонецЕсли;	
		КонецЕсли;
	КонецЕсли;	
				
~М3:
    
	Если (КолвоВыбранных - КолвоЗагруженных) > 0 Тогда
		                                                 
		ОчиститьОкноСообщений();
		Сообщить("Не удалось получить следующие отчеты:", "!");
		
		Для Инд = 1 По СписокФайловОбязательныхДляОбновления.РазмерСписка() Цикл
			
			Если СписокПолученных.Принадлежит(СписокФайловОбязательныхДляОбновления.ПолучитьЗначение(Инд, Представление)) = 0 Тогда
				Сообщить(Представление, ".");
			КонецЕсли;	
			
		КонецЦикла;	
		
		// если не удалось загрузить все части обновления,
		// то удаляем из листинга незагруженные отчеты
		Для Инд = 1 По СписокЗагрОтчетов.РазмерСписка() Цикл
			Если СписокЗагрОтчетов.Пометка(Инд) = 0 Тогда
				Продолжить;
			КонецЕсли;	
				
			Если СписокПолученных.Принадлежит(СписокЗагрОтчетов.ПолучитьЗначение(Инд, Представление)) = 0 Тогда 
				Сообщить(Представление, ".");
			КонецЕсли;	
		КонецЦикла;	
		
	КонецЕсли;  
	
	СписокПолученных = "";
    
	ОФС = СоздатьОбъект("ФС");		
	Текст = СоздатьОбъект("Текст");  
	СписокЗагруженных = СоздатьОбъект("СписокЗначений");
	СписокАрхивФайлов = СоздатьОбъект("СписокЗначений");
		
	ИмяФайла = ОФС.НайтиПервыйФайл( ВремКаталог + "*.exe"); 
	Пока ПустаяСтрока(ИмяФайла) = 0 Цикл  
		СписокАрхивФайлов.ДобавитьЗначение(ИмяФайла);		
		ИмяФайла = ОФС.НайтиСледующийФайл();
	КонецЦикла;                                                  
	
	Если СписокАрхивФайлов.РазмерСписка() > 0 Тогда
		// исполняем команду запуска самораспаковывающихся
		// архивов непосредственно с носителя - источника
		
		РаскрытьАрхив( СписокАрхивФайлов );		
	КонецЕсли;	
	СписокАрхивФайлов = "";

	Если (ЕстьВыбранныйОтчет = 0) ИЛИ (ФС.СуществуетФайл(ВремКаталог + "Rplist.txt") = 0) Тогда
		Сообщить("Не обнаружен файл " + ВремКаталог + "Rplist.txt.",".");
		Сообщить("Процесс загрузки приостановлен!","!");   
		   
		ФС.УстТекКаталог(ТекКаталог);
		ФС.УдалитьКаталог(ВремКаталог);
		
		СписокЗагрОтчетов.УдалитьВсе();		
		Форма.ИспользоватьСлой("Основной",2);
		ДоступностьЭлементов();	
				
		Возврат;
	КонецЕсли;	
	    
	Если НовыйФормат <> 0 Тогда
		// для нового формата	
		// создаем файл ver.id c номером релиза нового комплекта  
		Текст.ДобавитьСтроку(НовНомРелиза);
		Текст.Записать(ВремКаталог + "ver.id");	
	КонецЕсли;
	                                        
	// скопируем полученные файлы в каталог размещения комплекта 
	// регламентированной отчетности
	Файл = ОФС.НайтиПервыйФайл(ВремКаталог + "*.*" );
	Пока ПустаяСтрока(Файл) = 0 Цикл
		Если (Файл <> "..") И (Файл <> ".") Тогда
			Если (ВРег(Прав(Файл,3)) <> "EXE") Тогда
				Состояние("Копируется файл "+Файл); 
				
				ОФС.КопироватьФайл(ВремКаталог + Файл, КаталогРелиза + "\" + Файл, 0); 
				СписокЗагруженных.ДобавитьЗначение(ВРег(Файл));
			КонецЕсли;	
			
			Попытка
				ОФС.УдалитьФайл(ВремКаталог + Файл);
			Исключение   
				Сообщить("Не удается удалить файл " + ВремКаталог + Файл, "!");
			КонецПопытки;	
		КонецЕсли;                                              
		
		Файл = ОФС.НайтиСледующийФайл();
	КонецЦикла; 
	
	ОФС = "";	
		
	ФС.УстТекКаталог(ТекКаталог);
	Попытка
		ФС.УдалитьКаталог(ВремКаталог); 
	Исключение
		Сообщить("Не удалось удалить временный каталог " + ВремКаталог, "!");
		Сообщить("Для дальнейшего обновления регламентированных отчетов необходимо
				|удалить указанный каталог средствами операционной системы.", ".");
	КонецПопытки;
	
	Состояние("Идет обработка данных ... ");   
	
	// обновляем список отчетов
	ОбновитьСписокОтчетов();						
	                  
	// заполняем группу отчетов
	Заполнить(КаталогРелиза); 
	
	// обновляем пользовательские настройки
	ОбновлениеПользовательскойНастройки();	
	        
	ТекГруппаОтчетов = ГруппыОтчетов.ПолучитьЗначение(ГруппыОтчетов.ТекущаяСтрока(), ИдГруппыОтчетов);		
	
	КодРегламентОтчетности = ВосстановитьЗначение( "РеглОтчетКод" + СокрЛП(ТекГруппаОтчетов) );

	ВосстановитьНастройку();
	Если ВремТаблица.КоличествоСтрок() = 0 Тогда
	    // не обнаружена сохраненная настройка
		// отобразим исходный (полный) список отчетов,
		// поставляемый фирмой 1С
		ЗаполнитьГруппу(ТекГруппаОтчетов, 2);
	КонецЕсли;
	Если ПустоеЗначение(КодРегламентОтчетности) = 0 Тогда
		// восстановим в списке отчетов исходную позицию курсора,
		// сохраненную в предыдущем сеансе работы
		ОбработкаВыбораОтчета( КодРегламентОтчетности );
	КонецЕсли;	
	              
	СписокЗагрОтчетов.УдалитьВсе();
	
	Форма.ИспользоватьСлой("Основной",2);	
	ДоступностьЭлементов();	
	Активизировать("ТаблОтчетов");
	 
	// Открыть внешнюю обработку, выполняющую функции авторана.
	ЗапуститьАвторан();
	
	// Вызвать служебную информацию.
	ПоказатьИнформацию();
	
КонецПроцедуры // Загрузить() 

// ----------------------------------------------------  
//	УстановитьКомпоненту()
//
//	Описание:  Осуществляет загрузку внешней компоненты V7Plus.dll
Функция УстановитьКомпоненту()
	Если ЗагрузитьВнешнююКомпоненту(КаталогИБ()+"ExtForms\v7plus.dll")=0 Тогда
		Если ЗагрузитьВнешнююКомпоненту("v7plus.dll")=0 Тогда
			Сообщить("Не удалось обнаружить компоненту V7Plus.dll!"); 
			Возврат 0;
		КонецЕсли;
	КонецЕсли;
	Попытка
		Соединение = СоздатьОбъект("Addin.V7HttpReader");
		Инфо = СоздатьОбъект("AddIn.V7SysInfo");
		Соединение.КоличествоПопытокАвторизации = 3;
	Исключение 
		Сообщить("Не удалось создать объекты Addin.V7HttpReader или AddIn.V7SysInfo!"); 
		Возврат 0;
	КонецПопытки; 
	Возврат 1;
КонецФункции  // УстановитьКомпоненту 

// ----------------------------------------------------
// ОтчетыССайта()
//
// Описание:
//  По выбранному текущему комплекту определяет имя файла регламентированных
// отчетов для получения в архиве комплектов и запускает обработку получения 
// и установки нужного комплекта
//
Процедура ОтчетыССайта()                                                          
	Перем ТекКаталогОтчетов;    
	Перем АдресКлюча,Ответ;	  
	
	Если ПустоеЗначение(Форма.Параметр) = 1 Тогда
		Если ГруппыОтчетов.ТекущаяСтрока() > 0 Тогда
			ТекКаталогОтчетов = ГруппыОтчетов.ПолучитьЗначение(ГруппыОтчетов.ТекущаяСтрока());
		КонецЕсли;    
		
		Если ПустоеЗначение(ТекКаталогОтчетов)=1 Тогда 
			Предупреждение("Выберите для обновления требуемый комплект отчетности!", 20);
			Возврат;
		КонецЕсли;	
	КонецЕсли;
	
	Адрес="http://downloads.1c.ru/ipp/";   
	
	Если УстановитьКомпоненту() = 0 Тогда
		Возврат;
	КонецЕсли;	
	
	// проверка наличия диска ИТС
	Делт = КодСимв("Z")-КодСимв("A")+1;
	СтрокаИТС = Инфо.ПроверитьИмяФайла("1");
	Если ПустоеЗначение(СтрокаИТС)=1 Тогда
		Сообщить("Вставьте диск ИТС в дисковод и повторите операцию.");
		
		Соединение = "";
		Инфо = "";
		Возврат;
	КонецЕсли;
	
	ИТС = (КодСимв(Сред(СтрокаИТС,2,1)) + Делт-КодСимв(Лев(СтрокаИТС,1))) % Делт;  
	     	                                              
	ИНКонф = глИдентификаторКонфигурации();
	// определение номера последнего обновления (получаем по Ver.id)
	Если Найти(",BUBK,NCPBK,NCBK,EPSBU,BMOB,", "," + ИНКонф + ",") > 0 Тогда
		КатНомераВерсии = "ITSRepV/Reports/BudgetN/Ver.id";	 // для бюджетной конфигурации
	ИначеЕсли ИНКонф = "BASUOR" Тогда  
		КатНомераВерсии = "ITSRepV/Reports/BASUOR/Ver.id";   // для УСН    	 
	ИначеЕсли ИНКонф="PBOUL" Тогда  
		КатНомераВерсии = "ITSRepV/Reports/PBOUL/Ver.id";    // для ПБОЮЛ   	 
	Иначе
		КатНомераВерсии = "ITSRepV/Reports/GeneralN/Ver.id"; // общий
	КонецЕсли;
	       
	НовНомРелиза = "";	
	Попытка
		Соединение.ПолучитьКакСтроку(Адрес+Врег(КатНомераВерсии), НовНомРелиза);
	Исключение
		Сообщить("Не удалось установить соединение.", "!");
	
		Соединение = "";
		Инфо = "";
		Возврат;
	КонецПопытки;
		 
	Текст = СоздатьОбъект("Текст");
	КопияКомплекта = 0;
	
	Если ПустоеЗначение(Форма.Параметр) = 1 Тогда
		// обновляем текущий комплект
		КаталогРелиза = ТекКаталогОтчетов;

		// для текущего комплекта определяем номер обновления
		Текст.Открыть(ТекКаталогОтчетов + "\ver.id");
		ТекНомРелиза = СокрЛП(Текст.ПолучитьСтроку(1)); 
		
		Ответ = Вопрос("Данная группа отчетов уже существует." + РазделительСтрок + "Заменить на новые?", 3);
		Если Ответ = 2 Тогда			
			Соединение = "";
			Инфо = "";
			
			Возврат;        
		
		ИначеЕсли Ответ = 7 Тогда
			// выбрана "Отмена"
			// создаем "рядом" новый комплект отчетности  
			Сч = 1;
			Пока ФС.СуществуетФайл(КаталогИБ() + "ExtForms\" + "Rp" + Лев(ТекНомРелиза, 4) + Сч + ".grp") = 1 Цикл
				Сч = Сч + 1;
			КонецЦикла;	

			КаталогРелиза = КаталогИБ() + "ExtForms\" + "Rp" + Лев(ТекНомРелиза, 4) + Сч + ".grp";	
			ФС.СоздатьКаталог(КаталогРелиза);
			
			КопияКомплекта = Сч;
		КонецЕсли; 
				           
		КаталогК = "Rp" + Лев(ТекНомРелиза,4) + ".grp";	
		
	Иначе	  
		
		КаталогРелиза = КаталогИБ() + "ExtForms\" + "Rp" + Лев(НовНомРелиза, 4) + ".grp";	
		
    	// получаем обновления с сайта 
		Если ФС.СуществуетФайл(КаталогРелиза + "\ver.id") = 1 Тогда
		
			// для текущего комплекта определяем номер обновления
			Текст.Открыть(КаталогРелиза + "\ver.id");
			ТекНомРелиза = СокрЛП(Текст.ПолучитьСтроку(1)); 		
			
			ЧНовНомРелиза = Число(Сред(НовНомРелиза, 5, 3));
			ЧТекНомРелиза = Число(Сред(ТекНомРелиза, 5, 3));
			
			Если ЧНовНомРелиза > ЧТекНомРелиза Тогда
				Если ЧНовНомРелиза > (ЧТекНомРелиза + 1) Тогда
					// загружаем общее обновление текущего комплекта
					КаталогК = "Rp" + Лев(НовНомРелиза,4) + ".upd";
				Иначе				
					// загружаем последнее обновление текущего комплекта
					КаталогК = "Rp" + Лев(НовНомРелиза,4) + "." + Прав(НовНомРелиза,3);
				КонецЕсли;	
			Иначе
				// нет обновлений
				Сообщить("У вас уже установлено последнее обновление комплекта", "i");
				
				Форма.Параметр = "";
				Соединение = "";
				Инфо = "";
				Возврат;
			КонецЕсли;
			
		Иначе
			// получаем полностью весь комплект 
			КаталогРеглОтчетов = КаталогИБ() + "ExtForms\"; 
			
			// для ОС Win'9x наличие каталога регламентированных отчетов
			// проверяем без слэша в конце пути
			КаталогРеглОтчетовWin9x = КаталогИБ() + "ExtForms";
			
			Если (ФС.СуществуетФайл(КаталогРеглОтчетов) = 0) И (ФС.СуществуетФайл(КаталогРеглОтчетовWin9x) = 0) Тогда
				ФС.СоздатьКаталог(КаталогРеглОтчетов);
			КонецЕсли;	
			
			КаталогРелиза =  КаталогРеглОтчетов + "Rp" + Лев(НовНомРелиза, 4) + ".grp";
			
			Если ФС.СуществуетФайл(КаталогРелиза) = 0 Тогда
				ФС.СоздатьКаталог(КаталогРелиза);
			КонецЕсли;	
		
			КаталогК = "Rp" + Лев(НовНомРелиза,4) + ".grp";
		КонецЕсли;	
				
	КонецЕсли;	
	
	// КаталогКомплекта - каталог размещения архива регламентированных отчетов
	Если Найти(",BUBK,NCPBK,NCBK,EPSBU,BMOB,", "," + ИНКонф + ",") > 0 Тогда  
		КаталогКомплекта="\Reports\BudgetN\" + КаталогК;	// для бюджетной конфигурации	
	ИначеЕсли ИНКонф = "BASUOR" Тогда						
		КаталогКомплекта="\Reports\BASUOR\" + КаталогК;     // для УСН
	ИначеЕсли ИНКонф = "PBOUL" Тогда						
		КаталогКомплекта="\Reports\PBOUL\" + КаталогК;      // для ПБОЮЛ
	Иначе
		КаталогКомплекта="\Reports\Gen\" + КаталогК;		// общий
	КонецЕсли;
	
	АдресAuth = "http://downloads.1c.ru/auth.jsp"; 
	АдресGet = "http://downloads.1c.ru/get.jsp"; 
	
	Соединение.ПолучитьКакСтроку(АдресAuth,АдресКлюча);
	
	Если ТипЗначенияСтр(АдресКлюча) = "Число"  Тогда
		АдресКлюча = Строка(АдресКлюча); 
	КонецЕсли;
	Если ПустаяСтрока(АдресКлюча)= 1 Тогда
		Сообщить("Доступ закрыт!", "!");
		        
		Соединение = "";
		Инфо = "";		
		Возврат;
	КонецЕсли;
	
	Ключ = Инфо.ПроверитьИмяФайла(АдресКлюча);
	      
	// получим список файлов комплекта	
	
	// каталог размещения временных файлов
	// создаем каталог размещения временных файлов
	Если Лев(КаталогИБ(), 2) = "\\" Тогда
		ВремКаталог = КаталогВременныхФайлов() + "temp.grp";
	Иначе
		ВремКаталог = КаталогИБ() + "ExtForms\temp.grp";
	КонецЕсли;  
	
	Если ФС.СуществуетФайл( ВремКаталог ) = 0 Тогда
		ФС.СоздатьКаталог(ВремКаталог);
	КонецЕсли;   
	ВремКаталог = ВремКаталог +"\"; 
	
	КаталогКомплекта = Врег(КаталогКомплекта);
	ИмяФайлаЛистинга = "Loadlst.txt";
	ИмяФайлаВерсии	 = "Ver.id";
	Попытка
		Соединение.ПолучитьКакФайл(АдресGet+"?addr="+АдресКлюча+"&d="+Ключ+"&its="+ИТС+"&file="+ВРег(ИмяФайлаЛистинга)+"&dir="+КаталогКомплекта, ВремКаталог+ИмяФайлаЛистинга);
		Соединение.ПолучитьКакФайл(АдресGet+"?addr="+АдресКлюча+"&d="+Ключ+"&its="+ИТС+"&file="+ВРег(ИмяФайлаВерсии)+"&dir="+КаталогКомплекта, ВремКаталог+ИмяФайлаВерсии);
	Исключение
		Сообщить("Не удалось получить список обновленных комплектов.", "!");
	
		Соединение = "";
		Инфо = "";
		
		// удаляем временные каталоги
		Очистить();
		
		Возврат;
	КонецПопытки;
                   
	ИсхКаталог   = АдресGet+"?addr="+АдресКлюча+"&d="+Ключ+"&its="+ИТС+"&file=";
	КаталогСайта = "&dir="+КаталогКомплекта;
	    
	Если ПустоеЗначение(Форма.Параметр) = 1 Тогда	
		Текст.Открыть(ВремКаталог+ИмяФайлаВерсии);
		НовНомРелиза = СокрЛП(Текст.ПолучитьСтроку(1));
	КонецЕсли;	
	
	Текст.Открыть(ВремКаталог+ИмяФайлаЛистинга);

	ОФС = СоздатьОбъект("ФС");
	ОФС.УдалитьФайл(ВремКаталог+ИмяФайлаЛистинга);
	ОФС.УдалитьФайл(ВремКаталог+ИмяФайлаВерсии);
	
    ЗаполнитьСписокЗагружаемых(Текст);  
	
КонецПроцедуры // ОтчетыССайта                         

// ----------------------------------------------------
// Предопределенная процедура
//
Процедура ПриОткрытии()      
		
	// Инициализация механизма закладок
	Форма.ИспользоватьЗакладки(0);
	Форма.ИспользоватьСлой("Основной",2);	

	Форма.Кн_Справка.Видимость( ?(ТипЗначения(Норм_Компонента)=0,0,1 ));
	Форма.Кн_Видеокурс.Видимость( ?(ТипЗначения(Видео_Компонента)=0,0,1 )); 
	
	Форма.КнопкаПоУмолчанию("КнОткрыть");
	                              
	ТаблОтчетов.НоваяКолонка("Код",			"Текст", 9,, "");
	ТаблОтчетов.НоваяКолонка("Уровень",		"Число", 1);
	ТаблОтчетов.НоваяКолонка("ЭтоГруппа",	"Число", 1,, "", 3); 
	ТаблОтчетов.НоваяКолонка("Статус",		"Число", 1,, "", 2);	
	ТаблОтчетов.НоваяКолонка("НазвОтчета",  "Текст",  ,, "");
	ТаблОтчетов.НоваяКолонка("ФайлОтчета", 	"Текст"); 
	ТаблОтчетов.НоваяКолонка("ДопОписание",	"Текст");
	                                           
	ТаблОтчетов.ВидимостьКолонки("Код",  0);
	ТаблОтчетов.ВидимостьКолонки("Уровень",  0);
	ТаблОтчетов.ВидимостьКолонки("ЭтоГруппа",0);		
	ТаблОтчетов.ВидимостьКолонки("ФайлОтчета", 0);
	ТаблОтчетов.ВидимостьКолонки("ДопОписание", 0);  
	
	ТаблОтчетов.ВыводитьПиктограммы("Статус", 1);

	ВремТаблица = СоздатьОбъект("ТаблицаЗначений");
	ВремТаблица.Загрузить(ТаблОтчетов);   
	
	Заполнить();     
	
	Если ГруппыОтчетов.РазмерСписка() <> 0 Тогда
		ГруппыОтчетов.ТекущаяСтрока(Макс(1,ГруппыОтчетов.НайтиЗначение(ВосстановитьЗначение("РеглОтчГруппа"))));
	КонецЕсли;       
	
	ВосстановитьСохрСписок();
	
	Если ПустоеЗначение(Форма.Параметр) = 0 Тогда
		// вызвано из Интернет-поддержки для получения комплекта
		// регламентированной отчетности
		ОтчетыССайта();
	КонецЕсли;	
           
	ДоступностьЭлементов();	
	
КонецПроцедуры // ПриОткрытии() 
        
// ---------------------------------------------------- 
// Предопределенная процедура
//                                                      
Процедура ПриПовторномОткрытии()
	Если ПустоеЗначение(Форма.Параметр) = 0 Тогда
		// вызвано из Интернет-поддержки для получения комплекта
		ОтчетыССайта();	
	КонецЕсли;	
КонецПроцедуры	
// ---------------------------------------------------- 
// Предопределенная процедура
//                                                      
Процедура ПриЗакрытии() 
	
	Если ПроверкаСостояния() = 1 Тогда
		Ответ =  Вопрос("Сохранить текущую настройку списка отчетов?", "Да+Нет+Отмена"); 
		
		Если Ответ="Отмена" Тогда

			СтатусВозврата(0);
			Возврат;
		ИначеЕсли Ответ="Да" Тогда
	
			СохранитьНастройку();
		КонецЕсли;		
	КонецЕсли;		
	
	Если ГруппыОтчетов.ТекущаяСтрока() > 0 Тогда
		ТекГруппаОтчетов = ГруппыОтчетов.ПолучитьЗначение(ГруппыОтчетов.ТекущаяСтрока(), ИдГруппыОтчетов);
				
		// сохраняем текущую группу (квартал) отчетности
		СохранитьЗначение("РеглОтчГруппа", ТекГруппаОтчетов);   
		
		Если ТаблОтчетов.НомерСтроки > 0 Тогда          
			// сохраняем текущую позицию курсора (отчет или группа отчетов, 
			// на котором позиционирован курсор в момент закрытия формы
			СохранитьЗначение("РеглОтчетКод" + СокрЛП(ТекГруппаОтчетов), ТаблОтчетов.Код);
		КонецЕсли; 
		
	КонецЕсли;
	
КонецПроцедуры // ПриЗакрытии

// ---------------------------------------------------- 
Процедура ПолучитьСправку()
	Перем Название;
	
	Если (ТаблОтчетов.НомерСтроки = 0) и (ТаблОтчетов.КоличествоСтрок() > 0) Тогда
		Возврат;
	КонецЕсли; 	
	
	Если ТаблОтчетов.Уровень = 3 Тогда

		// Для отчетов уровня 3 получаем справку по названию группы
		Название = ТаблОтчетов.ПолучитьЗначение( 2, "НазвОтчета");
		Название = СтрЗаменить(Название, "----- ", "");
		Норм_ПолучитьСправку("?RegOtch_"+Название);
		
	Иначе

		Если ТаблОтчетов.Статус = 1 Тогда
		
			// Для группы выдается ее название
			Название = СтрЗаменить(ТаблОтчетов.НазвОтчета, "----- ", "");
			Норм_ПолучитьСправку("?RegOtch_"+Название);
			
		ИначеЕсли ТаблОтчетов.Статус = 3 Тогда 
			
			// Это отчет
			Название = ТаблОтчетов.ПолучитьЗначение(ТаблОтчетов.НомерСтроки, "ФайлОтчета");
			Название = СтрЗаменить(Название, ".ERT", "");
			Название = СтрЗаменить(Название, ".TXT", "");
			Норм_ПолучитьСправку(Название);
		
		КонецЕсли;

	КонецЕсли;

КонецПроцедуры // ПолучитьСправку
        
//******************************************************************************
СписокФайловОбязательныхДляОбновления = СоздатьОбъект("СписокЗначений");
СписокФайловОбязательныхДляОбновления.ДобавитьЗначение("SERVICE.EXE", "Служебные (инструкция, описание изменений и др.)");
