Перем Обновить;
Перем Расшифровка;
Перем ЗаполнитьТаблицуДебиторскойЗадолженности;
Перем ЗаполнитьТаблицуКредиторскойЗадолженности;
Перем ТаблицаСДанными;
Перем ТаблицаГруппировок;
Перем Таб;
Перем ВысотаШапкиТаблицы;

//******************************************************************************
// ПроверкаПериода()
//
// Возвращаемое значение:
//  1 - корректно выбран период в диалоге
//  0 - не корректно выбран период в диалоге
//
// Описание:
// Функция проверяет корректность указания даты отчета
//
Функция ПроверкаПериода()
	
	Если КонДата > КонецРассчитанногоПериодаБИ() Тогда
		Предупреждение("За выбранный период итоги не рассчитаны!"+РазделительСтрок+
		"Расчет итогов выполняется в режиме"+РазделительСтрок+
		"""Операции - Управление бухгалтерскими итогами"".", 60);
		Возврат 0;
	КонецЕсли;
	
	Возврат 1;
	
КонецФункции // ПроверкаПериода()

//******************************************************************************
Функция РасшифровкаОбновить(Обновить)
	Расшифровка.Установить("Обновить", Обновить);
	Возврат Расшифровка;
КонецФункции //РасшифровкаОбновить

//******************************************************************************
// Предопределенная процедура
//
Процедура ПриВыбореЗакладки(Номер, Значение)
	              
	Если РежимФормирования = 1 Тогда // ИНВ -17
		
		Если Значение = "Параметры" Тогда
			Форма.ИспользоватьСлой("Основной, Лица, Кнопки", 2);
		
		ИначеЕсли Значение = "ДебиторскаяЗадолженность" Тогда
			Форма.ИспользоватьСлой("ДебиторскаяЗадолженность, Кнопки, КнопкиДляТаблицы", 2);
			
		ИначеЕсли Значение = "КредиторскаяЗадолженность" Тогда
			Форма.ИспользоватьСлой("КредиторскаяЗадолженность, Кнопки, КнопкиДляТаблицы", 2);
		КонецЕсли;
		
	Иначе // произвольная форма
		Форма.ИспользоватьСлой("Основной, ОсновнойДляПроизвольнойФормы", 2);
	КонецЕсли;
	
КонецПроцедуры // ПриВыбореЗакладки()

//******************************************************************************
// ПриСменеРежиамОтчета()
//
// Параметры:
//  Нет.
//
// Вызывается из формул элементов диалога:
//  Нет.
//
// Описание:
//  Здесь описывается процедура.
//
Процедура ПриСменеРежиамОтчета()
	    
	Форма.Закладки.УдалитьВсе();
	
	Если РежимФормирования = 1 Тогда // ИНВ -17
		Форма.Закладки.ДобавитьЗначение("Параметры", "Параметры");
		Форма.Закладки.ДобавитьЗначение("ДебиторскаяЗадолженность", "Дебиторская задолженность");
		Форма.Закладки.ДобавитьЗначение("КредиторскаяЗадолженность", "Кредиторская задолженность");
		
	Иначе // произвольная форма
		Форма.Закладки.ДобавитьЗначение("Параметры", "Параметры");
	КонецЕсли;	
	
	ПриВыбореЗакладки(1, "Параметры")
	
КонецПроцедуры // ПриСменеРежиамОтчета()

//******************************************************************************
//	Установить(Режим="") 
//
//	Параметры: Режим - строка, режим работы: "Все" - отметить все строки
//					   "Сброс" - снять отметку всех строк
//					   "" - инвертировать отметку всех строк
//
//	Описание: Устанавливает, снимает или инвертирует отметки выбора строк в таблице счетов
Процедура Установить(Режим="") 
	Для Н = 1 По СписокСчетовУчетаЗадолженности.РазмерСписка() Цикл
		Если Режим="Все" Тогда
			СписокСчетовУчетаЗадолженности.Пометка(Н, 1);
		ИначеЕсли Режим="Сброс" Тогда
			СписокСчетовУчетаЗадолженности.Пометка(Н, 0); 
		Иначе
			СписокСчетовУчетаЗадолженности.Пометка(Н, ?(СписокСчетовУчетаЗадолженности.Пометка(Н) = 1, 0, 1)); 
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры  //  Установить()

//******************************************************************************
// Сортировать()
//
// Параметры:
//  Нет.
//
// Вызывается из формул элементов диалога:
//  Кнопки сортировки
//
// Описание:
//  Здесь описывается процедура.
//
Процедура Сортировать(НаправлениеСортиоровки)
	
	Если Форма.Закладки.ТекущаяСтрока() = 2 Тогда // дебиторская задолженность
	    ТекущаяТаблица = ТаблицаДебиторскаяЗадолженность;
	Иначе
		ТекущаяТаблица = ТаблицаКредиторскаяЗадолженность;
	КонецЕсли;
	
    ТекущаяТаблица.Сортировать(НаправлениеСортиоровки + ТекущаяТаблица.ТекущаяКолонка());
	
КонецПроцедуры // Сортировать()

//******************************************************************************
// Процедура ВставитьСтроку()
// 
// Параметры:
//  Нет.
//
// Вызывается из формул элементов диалога:
//  Кнопка ВставитьСтроку
//         
// Описание:
//  Вставляется новая строка в текущую таблицу на место текущей строки,
//  новая строка становится текущей
//
Процедура ВставитьСтроку()
	      
	Если Форма.Закладки.ТекущаяСтрока() = 2 Тогда // дебиторская задолженность
	    ТекущаяТаблица = ТаблицаДебиторскаяЗадолженность;
	Иначе
		ТекущаяТаблица = ТаблицаКредиторскаяЗадолженность;
	КонецЕсли;
	
	Номер = ТекущаяТаблица.ТекущаяСтрока();
	ТекущаяТаблица.НоваяСтрока(Номер);
	ТекущаяТаблица.ТекущаяСтрока(Номер);
		
КонецПроцедуры	

//******************************************************************************
// Процедура УдалитьСтроку()
// 
// Параметры:
//  Нет.
//
// Вызывается из формул элементов диалога:
//  Кнопка УдалитьСтроку
//         
// Описание:
//  Удаляется текущая строка текущей таблицы.
//
Процедура УдалитьСтроку()
	
	Если Форма.Закладки.ТекущаяСтрока() = 2 Тогда // дебиторская задолженность
	    ТекущаяТаблица = ТаблицаДебиторскаяЗадолженность;
	Иначе
		ТекущаяТаблица = ТаблицаКредиторскаяЗадолженность;
	КонецЕсли;
	
	Номер = ТекущаяТаблица.ТекущаяСтрока();
	ТекущаяТаблица.УдалитьСтроку();      
	ТекущаяТаблица.ТекущаяСтрока(Номер);
	
КонецПроцедуры //УдалитьСтроку()

//******************************************************************************
// ПересчетГрафыВсего()
//
// Параметры:
//  Нет.
//
// Вызывается из формул элементов диалога:
//  Нет.
//
// Описание:
//  Здесь описывается процедура.
//
Процедура ПересчетГрафыВсего(ТекущаяТаблица)
	
	ТекущаяТаблица.Всего = ТекущаяТаблица.Подтверждено
						 + ТекущаяТаблица.НеПодтверждено
						 + ТекущаяТаблица.ИстекСрокДавности;
	
КонецПроцедуры // ПересчетГрафыВсего()

//******************************************************************************
// Процедура РедактироватьЯчейку()
// 
// Параметры:
//  Нет.
//
// Вызывается из формул элементов диалога:
//  ТаблицаЗначений ТаблицаДебиторскаяЗадолженность и ТаблицаДебиторскаяЗадолженность
//         
// Описание:
//  При попытке изменить значение в ячейке вызывается соответст-
//  вующий диалог ввода.
//
Процедура РедактироватьЯчейку()
	
	Если Форма.Закладки.ТекущаяСтрока() = 2 Тогда // дебиторская задолженность
	    ТекущаяТаблица = ТаблицаДебиторскаяЗадолженность;
	Иначе
		ТекущаяТаблица = ТаблицаКредиторскаяЗадолженность;
	КонецЕсли;
	
	// При начале редактирования пустой таблицы автоматически добавим в нее пустую строку
	Если ТекущаяТаблица.КоличествоСтрок() = 0 Тогда
	    ВставитьСтроку();
	КонецЕсли;

	Если ТекущаяТаблица.ТекущаяКолонка() = "Контрагент" Тогда
		Контрагент = ТекущаяТаблица.Контрагент;
		ВвестиЗначение(Контрагент,"Выберите контрагента","Справочник.Контрагенты");
		ТекущаяТаблица.Контрагент = Контрагент;
		
	ИначеЕсли ТекущаяТаблица.ТекущаяКолонка() = "Счет" Тогда
		Счет = ТекущаяТаблица.Счет;
		ВвестиЗначение(Счет,"Выберите счет","Счет");
		ТекущаяТаблица.Счет = Счет;

	ИначеЕсли ТекущаяТаблица.ТекущаяКолонка() = "Всего" Тогда
		Предупреждение("Колонка ""Всего"" не корректируется.
					   |Воспользуйтесь корректировкой следующий граф.");
					   
	ИначеЕсли ТекущаяТаблица.ТекущаяКолонка()="Подтверждено" Тогда
		Подтверждено = ТекущаяТаблица.Подтверждено;
		ВвестиЧисло(Подтверждено, "Подтвержденная задолженнсть:", 15, 2);
		ТекущаяТаблица.Подтверждено = Подтверждено;
		ПересчетГрафыВсего(ТекущаяТаблица);
	
	ИначеЕсли ТекущаяТаблица.ТекущаяКолонка()="НеПодтверждено" Тогда
		НеПодтверждено = ТекущаяТаблица.НеПодтверждено;
		ВвестиЧисло(НеПодтверждено, "Не подтвержденная задолженнсть:", 15, 2);
		ТекущаяТаблица.НеПодтверждено = НеПодтверждено;
		ПересчетГрафыВсего(ТекущаяТаблица);
		
	ИначеЕсли ТекущаяТаблица.ТекущаяКолонка()="ИстекСрокДавности" Тогда
		ИстекСрокДавности = ТекущаяТаблица.ИстекСрокДавности;
		ВвестиЧисло(ИстекСрокДавности, "Задолженность с истекш. сроком давности:", 15, 2);
		ТекущаяТаблица.ИстекСрокДавности = ИстекСрокДавности;
		ПересчетГрафыВсего(ТекущаяТаблица);
	КонецЕсли;
	
КонецПроцедуры //РедактироватьЯчейку

//******************************************************************************
// ЗаписатьВТаблицу()
//
// Параметры:
//  Нет.
//
// Вызывается из формул элементов диалога:
//  Нет.
//
// Описание:
//  Здесь описывается процедура.
//
Процедура ЗаписатьВТаблицу(БухИт)
	
	КредиторскаяЗадолженность = БухИт.СКК();
	ДебиторскаяЗадолженность  = БухИт.СКД();
	
	// Если есть субконто "Договоры", то определяем истек срок давности по задолженности или нет
	СрокДавностиИстек = 0;
	Счет = БухИт.Счет;
	Если Счет.ВидСубконто(2) = ВидыСубконто.Договоры Тогда
		Договор = БухИт.Субконто(2);
		Если ПустоеЗначение(Договор.ДатаПогашенияОбязательства) = 1 Тогда // если дата погашения не указана, то считаем, что срок давности не истек
		ИначеЕсли ДобавитьМесяц(Договор.ДатаПогашенияОбязательства, 36) < КонДата Тогда // истек
			СрокДавностиИстек = 1;
		КонецЕсли;
	КонецЕсли;                                       
	
	Если ЗаполнитьТаблицуКредиторскойЗадолженности = 1 Тогда
	    Если КредиторскаяЗадолженность <> 0 Тогда
			ТаблицаКредиторскаяЗадолженность.НоваяСтрока();
			ТаблицаКредиторскаяЗадолженность.Контрагент = БухИт.Субконто(1);
			ТаблицаКредиторскаяЗадолженность.Счет       = Счет;
			ТаблицаКредиторскаяЗадолженность.Всего      = КредиторскаяЗадолженность;
			ТаблицаКредиторскаяЗадолженность.Подтверждено      = ?(СрокДавностиИстек = 0, КредиторскаяЗадолженность, 0);
			ТаблицаКредиторскаяЗадолженность.ИстекСрокДавности = ?(СрокДавностиИстек = 1, КредиторскаяЗадолженность, 0);
		КонецЕсли;
	КонецЕсли;
	
	Если ЗаполнитьТаблицуДебиторскойЗадолженности = 1 Тогда
	    Если ДебиторскаяЗадолженность <> 0 Тогда
			ТаблицаДебиторскаяЗадолженность.НоваяСтрока();
			ТаблицаДебиторскаяЗадолженность.Контрагент = БухИт.Субконто(1);
			ТаблицаДебиторскаяЗадолженность.Счет       = Счет;
			ТаблицаДебиторскаяЗадолженность.Всего      = ДебиторскаяЗадолженность;
			ТаблицаДебиторскаяЗадолженность.Подтверждено      = ?(СрокДавностиИстек = 0, ДебиторскаяЗадолженность, 0);
			ТаблицаДебиторскаяЗадолженность.ИстекСрокДавности = ?(СрокДавностиИстек = 1, ДебиторскаяЗадолженность, 0);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ЗаписатьВТаблицу()

//*******************************************
Процедура Заполнить()
	
	Если ПроверкаПериода() = 0 Тогда
	    Возврат;
	КонецЕсли;
	
	Меню = СоздатьОбъект("СписокЗначений");
	Меню.ДобавитьЗначение(1,"Дебиторскую и кредиторскую задолженность");
	Меню.ДобавитьЗначение(2,"Дебиторскую задолженность");
	Меню.ДобавитьЗначение(3,"Кредиторскую задолженность");
	РежимЗаполнения = 1;
	Если Меню.ВыбратьЗначение(РежимЗаполнения,,,,1) = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если РежимЗаполнения = 1 Тогда
	    ЗаполнитьТаблицуКредиторскойЗадолженности = 1;
		ЗаполнитьТаблицуДебиторскойЗадолженности  = 1;
		
	ИначеЕсли РежимЗаполнения = 2 Тогда
		ЗаполнитьТаблицуДебиторскойЗадолженности  = 1;
		ЗаполнитьТаблицуКредиторскойЗадолженности = 0;
		
	Иначе
		ЗаполнитьТаблицуДебиторскойЗадолженности  = 0;
		ЗаполнитьТаблицуКредиторскойЗадолженности = 1;
	КонецЕсли;
	
	Если ЗаполнитьТаблицуКредиторскойЗадолженности = 1 Тогда
		ТаблицаКредиторскаяЗадолженность.УдалитьСтроки();
	КонецЕсли;
	
	Если ЗаполнитьТаблицуДебиторскойЗадолженности = 1 Тогда
	    ТаблицаДебиторскаяЗадолженность.УдалитьСтроки();
	КонецЕсли;
	
	СписокСчетов = "60, 62, 66, 67, 75, 76.1, 76.2, 76.3, 76.5, 76.6, 76.11, 76.22, 76.55, 79.3";
	БухИт = СоздатьОбъект("БухгалтерскиеИтоги");
	БухИт.ИспользоватьСубконто();
	БухИт.ИспользоватьСубконто();
	БухИт.ВключатьСубсчета(-1,);
	БухИт.ВыполнитьЗапрос(, КонДата, СписокСчетов,,,,,);
	БухИт.ВыбратьСчета(1);
	Пока БухИт.ПолучитьСчет() = 1 Цикл
		Счет = БухИт.Счет;
		
		БухИт.ВыбратьСубконто(1);
		Пока БухИт.ПолучитьСубконто(1) = 1 Цикл
			                                                     
			// Если на счете есть субкотнто, то можно определить задолженност с истекшим сроком давности
			Если Счет.ВидСубконто(2) = ВидыСубконто.Договоры Тогда
				БухИт.ВыбратьСубконто(2);
				Пока БухИт.ПолучитьСубконто(2) = 1 Цикл
					ЗаписатьВТаблицу(БухИт);	
				КонецЦикла;
				
			Иначе
				ЗаписатьВТаблицу(БухИт);
			КонецЕсли;
			
		КонецЦикла;    
	КонецЦикла;
	
	Если ЗаполнитьТаблицуКредиторскойЗадолженности = 1 Тогда
		ТаблицаКредиторскаяЗадолженность.Свернуть("Контрагент, Счет", "Всего, Подтверждено, НеПодтверждено, ИстекСрокДавности");
	КонецЕсли;
	
	Если ЗаполнитьТаблицуДебиторскойЗадолженности = 1 Тогда
	    ТаблицаДебиторскаяЗадолженность.Свернуть("Контрагент, Счет", "Всего, Подтверждено, НеПодтверждено, ИстекСрокДавности");
	КонецЕсли;
	
	// Переход на соответствующую закладку
	НомерТекущейЗакладки = Форма.Закладки.ТекущаяСтрока();
	Если РежимЗаполнения = 1 Тогда // заполняются обе таблицы
		Если (НомерТекущейЗакладки = 1)
		 или (НомерТекущейЗакладки = 4) Тогда
		 	Форма.Закладки.ТекущаяСтрока(2);
		    ПриВыбореЗакладки(2, "ДебиторскаяЗадолженность");
		КонецЕсли;
		
	ИначеЕсли РежимЗаполнения = 2 Тогда // заполняются таблица по дебиторской задолженности
		Если НомерТекущейЗакладки <> 2 Тогда
			Форма.Закладки.ТекущаяСтрока(2);
		    ПриВыбореЗакладки(2, "ДебиторскаяЗадолженность");
		КонецЕсли;
		
	ИначеЕсли РежимЗаполнения = 3 Тогда // заполняются таблица по кредиторской задолженности
	    Если НомерТекущейЗакладки <> 3 Тогда
			Форма.Закладки.ТекущаяСтрока(3);
		    ПриВыбореЗакладки(3, "КредиторскаяЗадолженность");
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

//******************************************************************************
// ПечатьИНВ17()
//
// Параметры:
//  Нет.
//
// Вызывается из формул элементов диалога:
//  Нет.
//
// Описание:
//  Здесь описывается процедура.
//
Процедура ПечатьИНВ17()
	
	Таб = СоздатьОбъект("Таблица");
	Таб.ИсходнаяТаблица("ИНВ-17");
	
	ТабОборот = СоздатьОбъект("Таблица");
	ТабОборот.ИсходнаяТаблица("ИНВ-17");
	
	ДеньСоставления = ДатаЧисло(КонДата);
	МесяцСоставления = Формат(КонДата, "Д ММММГГГГ");
	
	Таб.ВывестиСекцию("Шапка1");
	
	ТаблицаДебиторскаяЗадолженность.ВыбратьСтроки();
	Пока ТаблицаДебиторскаяЗадолженность.ПолучитьСтроку() = 1 Цикл
		Если ПустоеЗначение(ТаблицаДебиторскаяЗадолженность.Контрагент) = 1 Тогда
			Контрагент = "";
		Иначе
			Контрагент = СокрП(ТаблицаДебиторскаяЗадолженность.Контрагент.ПолнНаименование);
		КонецЕсли;
		Счет              = ТаблицаДебиторскаяЗадолженность.Счет;
		Всего             = ФорматС(ТаблицаДебиторскаяЗадолженность.Всего);
		Подтверждено      = ФорматС(ТаблицаДебиторскаяЗадолженность.Подтверждено);
		НеПодтверждено    = ФорматС(ТаблицаДебиторскаяЗадолженность.НеПодтверждено);
		ИстекСрокДавности = ФорматС(ТаблицаДебиторскаяЗадолженность.ИстекСрокДавности);
		
		Таб.ВывестиСекцию("Строка");
	КонецЦикла;
	    
	Всего             = ФорматС(ТаблицаДебиторскаяЗадолженность.Итог("Всего"));
	Подтверждено      = ФорматС(ТаблицаДебиторскаяЗадолженность.Итог("Подтверждено"));
	НеПодтверждено    = ФорматС(ТаблицаДебиторскаяЗадолженность.Итог("НеПодтверждено"));
	ИстекСрокДавности = ФорматС(ТаблицаДебиторскаяЗадолженность.Итог("ИстекСрокДавности"));
	Таб.ВывестиСекцию("ПодвалТаблицы");
	
	ТабОборот.ВывестиСекцию("Шапка2");
	
	ТаблицаКредиторскаяЗадолженность.ВыбратьСтроки();
	Пока ТаблицаКредиторскаяЗадолженность.ПолучитьСтроку() = 1 Цикл
		Если ПустоеЗначение(ТаблицаКредиторскаяЗадолженность.Контрагент) = 1 Тогда
			Контрагент = "";
		Иначе
			Контрагент = СокрП(ТаблицаКредиторскаяЗадолженность.Контрагент.ПолнНаименование);
		КонецЕсли;
		Счет              = ТаблицаКредиторскаяЗадолженность.Счет;
		Всего             = ФорматС(ТаблицаКредиторскаяЗадолженность.Всего);
		Подтверждено      = ФорматС(ТаблицаКредиторскаяЗадолженность.Подтверждено);
		НеПодтверждено    = ФорматС(ТаблицаКредиторскаяЗадолженность.НеПодтверждено);
		ИстекСрокДавности = ФорматС(ТаблицаКредиторскаяЗадолженность.ИстекСрокДавности);
		
		ТабОборот.ВывестиСекцию("Строка");
	КонецЦикла;
	    
	Всего             = ФорматС(ТаблицаКредиторскаяЗадолженность.Итог("Всего"));
	Подтверждено      = ФорматС(ТаблицаКредиторскаяЗадолженность.Итог("Подтверждено"));
	НеПодтверждено    = ФорматС(ТаблицаКредиторскаяЗадолженность.Итог("НеПодтверждено"));
	ИстекСрокДавности = ФорматС(ТаблицаКредиторскаяЗадолженность.Итог("ИстекСрокДавности"));
	ТабОборот.ВывестиСекцию("ПодвалТаблицы");
	
	ТабОборот.ВывестиСекцию("Подвал");
	
	ТабОборот.ПовторятьПриПечатиСтроки(4,7);
	ТабОборот.ТолькоПросмотр(1);
   	ТабОборот.Опции(0, 0, 0, 0, "ПечатьИНВ-17Оборот", "ОкноИНВ-17Оборот");
   	ТабОборот.ОбластьПечати(1, 2, 1, 1);
   	ТабОборот.Показать("ИНВ-17 (оборотная сторона)");
	
	Таб.ПовторятьПриПечатиСтроки(26,29);
   	Таб.ТолькоПросмотр(1);
   	Таб.Опции(0, 0, 0, 0, "ПечатьИНВ-17", "ОкноИНВ-17");
   	Таб.ОбластьПечати(1, 2, 1, 1);
   	Таб.Показать("ИНВ-17");
	
КонецПроцедуры // ПечатьИНВ17()
   
//******************************************************************************
// ВыводИтоговПоПредыдущейГруппе()
//
// Параметры:
//  Нет.
//
// Вызывается из формул элементов диалога:
//  Нет.
//
// Описание:
//  Здесь описывается процедура.
//
Процедура ВыводИтоговПоПредыдущейГруппе()
	
	Если ТаблицаСДанными.НомерСтроки <> 1 Тогда 
		НомерСтрокиИтогов = ТаблицаГруппировок.НомерСтрокиТаблицы;
		
		Если ЗаполнитьТаблицуДебиторскойЗадолженности = 1 Тогда
			Таб.Область(НомерСтрокиИтогов, 6).Текст = ФорматС(ТаблицаГруппировок.Дебиторская);    
		КонецЕсли;
		
		Если ЗаполнитьТаблицуКредиторскойЗадолженности = 1 Тогда
			Таб.Область(НомерСтрокиИтогов, 6+ЗаполнитьТаблицуДебиторскойЗадолженности).Текст = ФорматС(ТаблицаГруппировок.Кредиторская);
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры // ВыводИтоговПоПредыдущейГруппе()

//******************************************************************************
// ОбновлениеТаблицыГруппировок()
//
// Параметры:
//  Нет.
//
// Вызывается из формул элементов диалога:
//  Нет.
//
// Описание:
//  Здесь описывается процедура.
//
Процедура ОбновлениеТаблицыГруппировок(НоваяГруппа);
	
	ТаблицаГруппировок.Значение = НоваяГруппа;
	ТаблицаГруппировок.НомерСтрокиТаблицы = Таб.ВысотаТаблицы();
	ТаблицаГруппировок.Дебиторская  = 0;
	ТаблицаГруппировок.Кредиторская = 0;
	
КонецПроцедуры // КорректировкаТаблицаГруппировок()

//******************************************************************************
// НоваяГруппа()
//
// Параметры:
//  Нет.
//
// Вызывается из формул элементов диалога:
//  Нет.
//
// Описание:
//  Здесь описывается процедура.
//
Процедура НоваяГруппа(НоваяГруппа)            
	
	НомерСтроки = ТаблицаГруппировок.НомерСтроки;
	
	// вывод итогов в таблицу по предыдущей группировке
	ВыводИтоговПоПредыдущейГруппе();
	НазваниеГруппы = НоваяГруппа;
	Группа= ТаблицаГруппировок.ПрефиксКИмени + ТаблицаГруппировок.СинонимИмени +": " + НазваниеГруппы;  
	
	ИмяВыводимойСекции = "Группа"+ НомерСтроки;
	Таб.ВывестиСекцию(ИмяВыводимойСекции +"|Тело");
	
	Если ЗаполнитьТаблицуДебиторскойЗадолженности = 1 Тогда
	    Таб.ПрисоединитьСекцию(ИмяВыводимойСекции +"|Дебиторская");
	КонецЕсли;
	
	Если ЗаполнитьТаблицуКредиторскойЗадолженности = 1 Тогда
	    Таб.ПрисоединитьСекцию(ИмяВыводимойСекции +"|Кредиторская");
	КонецЕсли;
	
	// внесение новой информации по новой группировке
	ОбновлениеТаблицыГруппировок(НоваяГруппа);
	
	// обнуление значения вложенной  группировки, для того, чтобы в дальнейшем оно наверняка обработалось, как новое
	Если ТаблицаГруппировок.КоличествоСтрок() > НомерСтроки Тогда
		ТаблицаГруппировок.УстановитьЗначение(НомерСтроки+1, "Значение", "Значение группировки не задано");
	КонецЕсли;
	
КонецПроцедуры // НоваяГруппа()

//******************************************************************************
// ВидаДоговораУдовлетворяетУсловию()
//
// Параметры:
//  Нет.
//
// Возвращаемое значение:
//  Здесь описывается возвращаемое значение.
//
// Вызывается из формул элементов диалога:
//  Нет.
//
// Описание:
//  Здесь описывается функция.
//
Функция ВидаДоговораУдовлетворяетУсловию(БухИт)
	
	// Если установлен отбор по виду договора, то проверим удовлетворяют
	// ли полученные бух. итоги этому условию
	Если ПустоеЗначение(ВыбранныйВидДоговора) = 0 Тогда
		ВидДоговора = БухИт.Субконто(ВидыСубконто.Договоры).ВидДоговора;    
		Если ВидДоговора <> ВыбранныйВидДоговора Тогда
		    Возврат 0;
		КонецЕсли;
	КонецЕсли;
	
	Возврат 1;
	
КонецФункции // ВидаДоговораУдовлетворяетУсловию()
   
//******************************************************************************
// ЗаписатьВТаблицуДанных()
//
// Параметры:
//  Нет.
//
// Вызывается из формул элементов диалога:
//  Нет.
//
// Описание:
//  Здесь описывается процедура.
//
Процедура ЗаписатьВТаблицуДанных(БухИт)
	
	КредиторскаяЗадолженность = БухИт.СКК();
	ДебиторскаяЗадолженность  = БухИт.СКД();
	
	Если ВидаДоговораУдовлетворяетУсловию(БухИт) = 0 Тогда
	    Возврат;
	КонецЕсли;
	
	// Если в отчет надо включать информацию о дебиторской задолженности, то включаем
	Если ЗаполнитьТаблицуДебиторскойЗадолженности = 1 Тогда
	    Если ДебиторскаяЗадолженность <> 0 Тогда
			ТаблицаСДанными.НоваяСтрока();
			ТаблицаСДанными.Контрагент  = БухИт.Субконто(ВидыСубконто.Контрагенты);
			ТаблицаСДанными.Договор     = БухИт.Субконто(ВидыСубконто.Договоры);
			ТаблицаСДанными.ВидДоговора = БухИт.Субконто(ВидыСубконто.Договоры).ВидДоговора;
			ТаблицаСДанными.Счет        = БухИт.Счет;
			ТаблицаСДанными.Дебиторская = ДебиторскаяЗадолженность;
		КонецЕсли;
	КонецЕсли;
	
	// Если в отчет надо включать информацию о кредиторской задолженности, то включаем
	Если ЗаполнитьТаблицуКредиторскойЗадолженности = 1 Тогда
	    Если КредиторскаяЗадолженность <> 0 Тогда
			ТаблицаСДанными.НоваяСтрока();
			ТаблицаСДанными.Контрагент   = БухИт.Субконто(1);
			ТаблицаСДанными.Договор      = БухИт.Субконто(ВидыСубконто.Договоры);
			ТаблицаСДанными.ВидДоговора  = БухИт.Субконто(ВидыСубконто.Договоры).ВидДоговора;
			ТаблицаСДанными.Счет         = БухИт.Счет;
			ТаблицаСДанными.Кредиторская = КредиторскаяЗадолженность;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ЗаписатьВТаблицуДанных()
   
//******************************************************************************
// ЗаполнитьТаблицуДанных()
//
// Параметры:
//  Нет.
//
// Вызывается из формул элементов диалога:
//  Нет.
//
// Описание:
//  Здесь описывается процедура.
//
Процедура ЗаполнитьТаблицуДанных()
	
	Если ТипЗадолженности.ТекущаяСтрока() = 1 Тогда
	    ЗаполнитьТаблицуКредиторскойЗадолженности = 1;
		ЗаполнитьТаблицуДебиторскойЗадолженности  = 1;
		
	ИначеЕсли ТипЗадолженности.ТекущаяСтрока() = 2 Тогда
		ЗаполнитьТаблицуДебиторскойЗадолженности  = 1;
		ЗаполнитьТаблицуКредиторскойЗадолженности = 0;
		
	Иначе
		ЗаполнитьТаблицуДебиторскойЗадолженности  = 0;
		ЗаполнитьТаблицуКредиторскойЗадолженности = 1;
	КонецЕсли;
	            
	// Сформируем список из отмеченных счетов
	СписокСчетов = СоздатьОбъект("СписокЗначений");;
	Для НомерСтроки = 1 По СписокСчетовУчетаЗадолженности.РазмерСписка() Цикл
		Если СписокСчетовУчетаЗадолженности.Пометка(НомерСтроки) = 1 Тогда
		    СписокСчетов.ДобавитьЗначение(СписокСчетовУчетаЗадолженности.ПолучитьЗначение(НомерСтроки,));
		КонецЕсли;
	КонецЦикла;
	
	БухИт = СоздатьОбъект("БухгалтерскиеИтоги");
	
	Если ПустоеЗначение(ВыбранныйКонтрагент) = 1 Тогда
		БухИт.ИспользоватьСубконто(ВидыСубконто.Контрагенты);
	Иначе
		БухИт.ИспользоватьСубконто(ВидыСубконто.Контрагенты, ВыбранныйКонтрагент);
	КонецЕсли;
	
	БухИт.ИспользоватьСубконто(ВидыСубконто.Договоры);
	БухИт.ВключатьСубсчета(-1,);
	БухИт.ВыполнитьЗапрос(, КонДата, СписокСчетов,,,,,);
	БухИт.ВыбратьСчета(1);
	Пока БухИт.ПолучитьСчет() = 1 Цикл
		Счет = БухИт.Счет;
		
		БухИт.ВыбратьСубконто(ВидыСубконто.Контрагенты);
		Пока БухИт.ПолучитьСубконто(ВидыСубконто.Контрагенты) = 1 Цикл
			                                                     
			БухИт.ВыбратьСубконто(ВидыСубконто.Договоры);
			Пока БухИт.ПолучитьСубконто(ВидыСубконто.Договоры) = 1 Цикл
				ЗаписатьВТаблицуДанных(БухИт);	
			КонецЦикла;
			
		КонецЦикла;    
	КонецЦикла;
	
КонецПроцедуры // ЗаполнитьТаблицуДанных()

//******************************************************************************
// ФормированиеШапкиТаблицы()
//
// Параметры:
//  Нет.
//
// Вызывается из формул элементов диалога:
//  Нет.
//
// Описание:
//  Здесь описывается процедура.
//
Процедура ФормированиеШапкиТаблицы()
	
	Таб.ВывестиСекцию("Шапка<|Тело");
	
	Если ЗаполнитьТаблицуДебиторскойЗадолженности = 1 Тогда
	    Таб.ПрисоединитьСекцию("Шапка<|Дебиторская");
	КонецЕсли;
	
	Если ЗаполнитьТаблицуКредиторскойЗадолженности = 1 Тогда
	    Таб.ПрисоединитьСекцию("Шапка<|Кредиторская");
	КонецЕсли;
	
	// Если отчет формируется по одному из типов задолженности
	// (дебиторская/кредиторская), выведем эту информацию в шапку отчета.
	Если ТипЗадолженности.ТекущаяСтрока() <> 1 Тогда
		ВыбранныйВидЗадолженности = "";
		ТипЗадолженности.ПолучитьЗначение(ТипЗадолженности.ТекущаяСтрока(), ВыбранныйВидЗадолженности);
		Таб.ВывестиСекцию("ВидЗадолженности|Тело");
	КонецЕсли;
	
	Если ПустоеЗначение(ВыбранныйВидДоговора) = 0 Тогда
		Таб.ВывестиСекцию("ВидДоговора|Тело");
	КонецЕсли;
	
	Если ПустоеЗначение(ВыбранныйКонтрагент) = 0 Тогда
		Таб.ВывестиСекцию("Контрагент|Тело");
	КонецЕсли;
	
	Таб.ВывестиСекцию("Шапка>|Тело");
	
	Если ЗаполнитьТаблицуДебиторскойЗадолженности = 1 Тогда
	    Таб.ПрисоединитьСекцию("Шапка>|Дебиторская");
	КонецЕсли;
	
	Если ЗаполнитьТаблицуКредиторскойЗадолженности = 1 Тогда
	    Таб.ПрисоединитьСекцию("Шапка>|Кредиторская");
	КонецЕсли;
	
	ВысотаШапкиТаблицы = Таб.ВысотаТаблицы();
	
КонецПроцедуры // ФормированиеШапкиТаблицы()

//******************************************************************************
// ОсновнаяРасшифровка()
//
// Параметры:
//  Нет.
//
// Возвращаемое значение:
//  Здесь описывается возвращаемое значение.
//
// Вызывается из формул элементов диалога:
//  Нет.
//
// Описание:
//  Здесь описывается функция.
//
Функция ОсновнаяРасшифровка()
	
	ОсновнаяРасшифровкаОСВ = СоздатьОбъект("СписокЗначений");
	ОсновнаяРасшифровкаОСВ.Установить("Отчет", "ОборотноСальдоваяВедомостьПоСчету");
	ОсновнаяРасшифровкаОСВ.Установить("Обновить", 0);
	ОсновнаяРасшифровкаОСВ.Установить("ДанныеПоСубсчетам", 0);
	ОсновнаяРасшифровкаОСВ.Установить("Дата1", НачМесяца(КонДата));
	ОсновнаяРасшифровкаОСВ.Установить("Дата2", КонДата);
	ОсновнаяРасшифровкаОСВ.Установить("ВидСубконто1", ВидыСубконто.Контрагенты);
	ОсновнаяРасшифровкаОСВ.Установить("ВидСубконто2", ВидыСубконто.Договоры);
	ОсновнаяРасшифровкаОСВ.Установить("ОтборСубконто1", 3);
	ОсновнаяРасшифровкаОСВ.Установить("ОтборСубконто2", 1);
	ОсновнаяРасшифровкаОСВ.Установить("ОтборСубконто3", 3);
	
	Возврат ОсновнаяРасшифровкаОСВ;
	
КонецФункции // ОсновнаяРасшифровка()


//******************************************************************************
// РасшифровкаЗадолженности()
//
// Параметры:
//  Нет.
//
// Возвращаемое значение:
//  Здесь описывается возвращаемое значение.
//
// Вызывается из формул элементов диалога:
//  Нет.
//
// Описание:
//  Здесь описывается функция.
//
Функция РасшифровкаЗадолженности(ТаблицаСДанными, ОсновнвяРасшифровка)
	
	РасшифровкаЗадолженности = СоздатьОбъект("СписокЗначений");
	ОсновнвяРасшифровка.Выгрузить(РасшифровкаЗадолженности);
	РасшифровкаЗадолженности.Установить("Счет", ТаблицаСДанными.Счет);
	РасшифровкаЗадолженности.Установить("Субконто1", ТаблицаСДанными.Контрагент);
	РасшифровкаЗадолженности.Установить("Субконто2", ТаблицаСДанными.Договор);
	
	Возврат РасшифровкаЗадолженности;
	
КонецФункции // РасшифровкаЗадолженности()

//******************************************************************************
// ФормированиеТаблицы()
//
// Параметры:
//  Нет.
//
// Вызывается из формул элементов диалога:
//  Нет.
//
// Описание:
//  Здесь описывается процедура.
//
Процедура ФормированиеТаблицы()
	
	// создание объекта "Таблица"
	Если Обновить = 2 Тогда
	    СтрокаДействийФормы = "#Закрыть";
	КонецЕсли;
	Если (ТипЗначенияСтр(Таб) <> "Таблица") ИЛИ (Обновить = 0) Тогда
	   	Таб = СоздатьОбъект("Таблица");
	Иначе
	 	Таб.Очистить();
	КонецЕсли;
	 
	Таб.ИсходнаяТаблица("Таблица");
	ФормированиеШапкиТаблицы();
	
	ОсновнвяРасшифровка = ОсновнаяРасшифровка();
	
	// выбираем данные из таблицы и выводим в отчет
	ТаблицаСДанными.ВыбратьСтроки();
	Пока ТаблицаСДанными.ПолучитьСтроку() = 1 Цикл
		
		// смотрим какие имеются у нас группировки и обрабатываем их
		ТаблицаГруппировок.ВыбратьСтроки();
		Пока ТаблицаГруппировок.ПолучитьСтроку() = 1  Цикл
			ЗначениеГруппировки = ТаблицаСДанными.ПолучитьЗначение(ТаблицаСДанными.НомерСтроки, ТаблицаГруппировок.ИмяГруппировки);
			
			// если это новое значение группировки
			Если ТаблицаГруппировок.Значение <> ЗначениеГруппировки Тогда
				НоваяГруппа(ЗначениеГруппировки);
			КонецЕсли;                            
			
			ТаблицаГруппировок.Дебиторская  = ТаблицаГруппировок.Дебиторская  + ТаблицаСДанными.Дебиторская;
			ТаблицаГруппировок.Кредиторская = ТаблицаГруппировок.Кредиторская + ТаблицаСДанными.Кредиторская;
		КонецЦикла;              
		              
		// подготовка данных для вывода исходную таблицу
		Контрагент   = ТаблицаСДанными.Контрагент;
		Договор      = ТаблицаСДанными.Договор;
		ВидДоговора  = ТаблицаСДанными.ВидДоговора;
		Счет         = ТаблицаСДанными.Счет;
		Дебиторская  = ФорматС(ТаблицаСДанными.Дебиторская);
		Кредиторская = ФорматС(ТаблицаСДанными.Кредиторская);
		РасшифровкаЗадолженности = РасшифровкаЗадолженности(ТаблицаСДанными, ОсновнвяРасшифровка);
		
		Таб.ВывестиСекцию("Строка|Тело");
		
		Если ЗаполнитьТаблицуДебиторскойЗадолженности = 1 Тогда
		    Таб.ПрисоединитьСекцию("Строка|Дебиторская");
		КонецЕсли;
		
		Если ЗаполнитьТаблицуКредиторскойЗадолженности = 1 Тогда
		    Таб.ПрисоединитьСекцию("Строка|Кредиторская");
		КонецЕсли;
	КонецЦикла;
	
	// необходимо вывести итоги по последним значениям группировок
	Если ТаблицаСДанными.КоличествоСтрок() <> 0 Тогда
		ТаблицаГруппировок.ВыбратьСтроки();
		Пока ТаблицаГруппировок.ПолучитьСтроку() = 1  Цикл
			ВыводИтоговПоПредыдущейГруппе();
		КонецЦикла;              
	КонецЕсли;
	
	Дебиторская  = ФорматС(ТаблицаСДанными.Итог("Дебиторская"));
	Кредиторская = ФорматС(ТаблицаСДанными.ИТог("Кредиторская"));
	
	Таб.ВывестиСекцию("Подвал|Тело");
	Если ЗаполнитьТаблицуДебиторскойЗадолженности = 1 Тогда
	    Таб.ПрисоединитьСекцию("Подвал|Дебиторская");
	КонецЕсли;
	
	Если ЗаполнитьТаблицуКредиторскойЗадолженности = 1 Тогда
	    Таб.ПрисоединитьСекцию("Подвал|Кредиторская");
	КонецЕсли;
	
	Таб.ТолькоПросмотр(1);
	Таб.ОбластьПечати(2, 2,,);
	Таб.ПовторятьПриПечатиСтроки(ВысотаШапкиТаблицы-1, ВысотаШапкиТаблицы);
	Таб.Опции(0, 0, ВысотаШапкиТаблицы-1, 0, "ПечатьИнвентаризацияРасчетов", "ОкноИнвентаризацияРасчетов");
	Таб.Показать("Инвентаризация расчетов с контрагентами");
	
КонецПроцедуры // ФормированиеТаблицы()

//******************************************************************************
// Сформировать()
//
// Параметры:
//  Нет.
//
// Вызывается из формул элементов диалога:
//  Нет.
//
// Описание:
//  Здесь описывается процедура.
//
Процедура Сформировать()
	
	Если ПроверкаПериода() = 0 Тогда
	    Возврат;
	КонецЕсли;
	
	// Расшифровка необходимая для обновления сформированного отчета
	Расшифровка = СоздатьОбъект("СписокЗначений");
	Расшифровка.Установить("Отчет", "ИнвентаризацияРасчетов");
	Расшифровка.Установить("Дата", КонДата);
	Расшифровка.Установить("ТипЗадолженности", ТипЗадолженности.ТекущаяСтрока());
	Расшифровка.Установить("СписокСчетовУчетаЗадолженности", СписокСчетовУчетаЗадолженности);
	Расшифровка.Установить("СписокВозможныхГруппировок", СписокВозможныхГруппировок);
	Расшифровка.Установить("ВидДоговора", ВыбранныйВидДоговора);
	Расшифровка.Установить("Контрагент", ВыбранныйКонтрагент);
	
	// таблица в которую необхдоимо записать все данные для их дельнейшей обработки (группировки, отбора)
	ТаблицаСДанными = СоздатьОбъект("ТаблицаЗначений");
	ТаблицаСДанными.НоваяКолонка("Контрагент", "Справочник.Контрагенты");
	ТаблицаСДанными.НоваяКолонка("Договор", "Справочник.Договоры");
	ТаблицаСДанными.НоваяКолонка("ВидДоговора", "Справочник.ВидыДоговоров");
	ТаблицаСДанными.НоваяКолонка("Счет", "Счет");
	ТаблицаСДанными.НоваяКолонка("Кредиторская", "Число", 15, 2);
	ТаблицаСДанными.НоваяКолонка("Дебиторская", "Число", 15, 2);
	
	// таблица с выбранными видами группировок
	ТаблицаГруппировок = СоздатьОбъект("ТаблицаЗначений");
	ТаблицаГруппировок.НоваяКолонка("ИмяГруппировки", "Строка");
	ТаблицаГруппировок.НоваяКолонка("СинонимИмени", "Строка");
	ТаблицаГруппировок.НоваяКолонка("ПрефиксКИмени", "Строка");
	ТаблицаГруппировок.НоваяКолонка("Значение");
	ТаблицаГруппировок.НоваяКолонка("НомерСтрокиТаблицы", "Число", 10, 0);
	ТаблицаГруппировок.НоваяКолонка("Кредиторская", "Число", 15, 2);
	ТаблицаГруппировок.НоваяКолонка("Дебиторская", "Число", 15, 2);
	
	ЗаполнитьТаблицуДанных();
	
	// Формирование строки-параметра для сортировки таблицы.
	СтрокаСортировки = "";
	Префикс = "";
	Для СчетчикЦикла = 1 По СписокВозможныхГруппировок.РазмерСписка() Цикл
		Если СписокВозможныхГруппировок.Пометка(СчетчикЦикла) = 1 Тогда
			Группировка = СписокВозможныхГруппировок.ПолучитьЗначение(СчетчикЦикла);
			СтрокаСортировки = СтрокаСортировки + Группировка +",";
			
			ТаблицаГруппировок.НоваяСтрока();
			ТаблицаГруппировок.ИмяГруппировки = Группировка;        
			Представление = "";
			СписокВозможныхГруппировок.ПолучитьЗначение(СчетчикЦикла, Представление);
			ТаблицаГруппировок.СинонимИмени = Представление;
			ТаблицаГруппировок.Значение = "Значение группировки не задано";
			ТаблицаГруппировок.ПрефиксКИмени = Префикс;
			Префикс = Префикс + "    ";
		КонецЕсли;
	КонецЦикла;
	
	// сортируем таблицу указанным образом
	Если ПустоеЗначение(СтрокаСортировки) = 0 Тогда
	    СтрокаСортировки = Лев(СтрокаСортировки, СтрДлина(СтрокаСортировки)-1);
		ТаблицаСДанными.Сортировать(СтрокаСортировки, 1);
	КонецЕсли;
	
	// Формирование таблицы
	ФормированиеТаблицы();
	
КонецПроцедуры // Сформировать()

//******************************************************************************
// ДобавитьСчетВСписок(КодСчета, СписокСчетовУчетаЗадолженности)
//
// Параметры:
//  КодСчета - код счета, который нужно добавить в список.
//  СписокСчетовУчетаЗадолженности - список в который нужно бавить счет
//
// Вызывается из формул элементов диалога:
//  Нет.
//
// Описание:
//  Добавляет в СписокСчетовУчетаЗадолженности счет, переданный в качестве параметра.
//
Процедура ДобавитьСчетВСписок(КодСчета, СписокСчетовУчетаЗадолженности)
	
	Счет = СчетПоКоду(КодСчета);
	
	СписокСчетовУчетаЗадолженности.ДобавитьЗначение(Счет, КодСчета + " """ + Счет.ПолнНаименование+ """");
	
КонецПроцедуры // ДобавитьСчетВСписок()
   
//******************************************************************************
// Предопределенная процедура
//
Процедура ПриОткрытии(ФлагЧтенияНастройки)
	
	Если ФлагЧтенияНастройки = 0 Тогда
		РежимФормирования = 1; // формирование ИНВ-17
	КонецЕсли;
	
	Если ТаблицаДебиторскаяЗадолженность.КоличествоСтрок() = 0 Тогда
		ТаблицаДебиторскаяЗадолженность.НоваяКолонка("Контрагент", "Справочник");
		ТаблицаДебиторскаяЗадолженность.НоваяКолонка("Счет", "Счет");
		ТаблицаДебиторскаяЗадолженность.НоваяКолонка("Всего", "Число", 15, 2);
		ТаблицаДебиторскаяЗадолженность.НоваяКолонка("Подтверждено", "Число", 15, 2);
		ТаблицаДебиторскаяЗадолженность.НоваяКолонка("НеПодтверждено", "Число", 15, 2, "Не подтверждено");
		ТаблицаДебиторскаяЗадолженность.НоваяКолонка("ИстекСрокДавности", "Число", 15, 2, "С истекшим сроком давности");
	КонецЕсли;
	
	Если ТаблицаКредиторскаяЗадолженность.КоличествоСтрок() = 0 Тогда
		ТаблицаКредиторскаяЗадолженность.НоваяКолонка("Контрагент", "Справочник");
		ТаблицаКредиторскаяЗадолженность.НоваяКолонка("Счет", "Счет");
		ТаблицаКредиторскаяЗадолженность.НоваяКолонка("Всего", "Число", 15, 2);
		ТаблицаКредиторскаяЗадолженность.НоваяКолонка("Подтверждено", "Число", 15, 2);
		ТаблицаКредиторскаяЗадолженность.НоваяКолонка("НеПодтверждено", "Число", 15, 2, "Не подтверждено");
		ТаблицаКредиторскаяЗадолженность.НоваяКолонка("ИстекСрокДавности", "Число", 15, 2, "С истекшим сроком давности");
	КонецЕсли;
	
	Если СписокВозможныхГруппировок.РазмерСписка() = 0 Тогда
		СписокВозможныхГруппировок.ДобавитьЗначение("ВидДоговора", "Вид договора");
		СписокВозможныхГруппировок.ДобавитьЗначение("Счет",        "Счет учета");    
		СписокВозможныхГруппировок.ДобавитьЗначение("Контрагент",  "Контрагент");
	КонецЕсли;
	
	Если ТипЗадолженности.РазмерСписка() = 0 Тогда
	    ТипЗадолженности.ДобавитьЗначение(1,  "дебиторская и кредиторская");
		ТипЗадолженности.ДобавитьЗначение(2,  "дебиторская");
		ТипЗадолженности.ДобавитьЗначение(3,  "кредиторская");
	КонецЕсли;
	
	Если СписокСчетовУчетаЗадолженности.РазмерСписка() = 0 Тогда
		ДобавитьСчетВСписок("60", СписокСчетовУчетаЗадолженности);
		ДобавитьСчетВСписок("62", СписокСчетовУчетаЗадолженности);
		ДобавитьСчетВСписок("66", СписокСчетовУчетаЗадолженности);
		ДобавитьСчетВСписок("67", СписокСчетовУчетаЗадолженности);
		ДобавитьСчетВСписок("76", СписокСчетовУчетаЗадолженности);
		ДобавитьСчетВСписок("79", СписокСчетовУчетаЗадолженности);
		
		Для СчетчикЦикла = 1 По СписокСчетовУчетаЗадолженности.РазмерСписка() Цикл
			СписокСчетовУчетаЗадолженности.Пометка(СчетчикЦикла, 1)
		КонецЦикла;
	КонецЕсли;
	
	Если глФлагРасшифровки = 1 Тогда
		Обновить = глОбновить;
		РежимФормирования = 0;
		КонДата = глРасшифровка.Получить("Дата");
		ТипЗадолженности.ТекущаяСтрока(глРасшифровка.Получить("ТипЗадолженности"));
		ВыбранныйВидДоговора = глРасшифровка.Получить("ВидДоговора");
		ВыбранныйКонтрагент  = глРасшифровка.Получить("Контрагент");
		    
		// Если в расшифровке не было передано списка счетов, то в
		// сеществующем списке стави пометку у всех счетов.
		Если ПустоеЗначение(глРасшифровка.Получить("СписокСчетовУчетаЗадолженности")) = 1 Тогда
		    Для СчетчикЦикла = 1 По СписокСчетовУчетаЗадолженности.РазмерСписка() Цикл
				СписокСчетовУчетаЗадолженности.Пометка(СчетчикЦикла, 1)
			КонецЦикла;
			
		Иначе
			глРасшифровка.Получить("СписокСчетовУчетаЗадолженности").Выгрузить(СписокСчетовУчетаЗадолженности);
		КонецЕсли;
		                                                   
		// Если в расшифровке не было передано списка группировок, то в
		// сеществующем списке сбрасываем все пометки.
		Если ПустоеЗначение(глРасшифровка.Получить("СписокВозможныхГруппировок")) = 1 Тогда
		    Для СчетчикЦикла = 1 По СписокВозможныхГруппировок.РазмерСписка() Цикл
				СписокВозможныхГруппировок.Пометка(СчетчикЦикла, 0)
			КонецЦикла;
			
		Иначе
			глРасшифровка.Получить("СписокВозможныхГруппировок").Выгрузить(СписокВозможныхГруппировок);
		КонецЕсли;
		
		Если Обновить <> 0 Тогда
			Таб = глТаблица;
		КонецЕсли;

		Если Обновить <> 2 Тогда
			Сформировать();
			СтатусВозврата(0);
			Возврат;
		КонецЕсли;
		
	Иначе
		Обновить = 0;
	КонецЕсли;
		      
	КонДата = РабочаяДата();
	Форма.ИспользоватьЗакладки(1);
	ПриСменеРежиамОтчета();
	
КонецПроцедуры // ПриОткрытии()