Перем НачальнаяДатаДокумента; 
Перем ТекущийВариантРасчетаНалогов;
Перем Новый;
Перем СписокДействий;

//******************************************************************************
// УправлениеКурсом(ИзменитьКурс)
//
// Параметры:
//  ИзменитьКурс - Число. Определяет должна ли процедура установить новый курс.
//
// Описание:
//  Управлет видимостью поля "Курс".
//
Процедура УправлениеКурсом(ИзменитьКурс=0)
	
	ВидимостьКурса = Договор.ВалютаДоговора.Выбран();
	Форма.ПодписьКурса.Видимость(ВидимостьКурса);
	Форма.Курс.Видимость(ВидимостьКурса);
	
	Если ИзменитьКурс = 1 Тогда
		Если ВидимостьКурса = 1 Тогда
		    Курс = Договор.ВалютаДоговора.Курс.Получить(ДатаДок);
			
		Иначе
			Курс = 0;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // УправлениеКурсом()

//******************************************************************************
// ИнформацияОДоговоре()
//
// Возвращаемое значение:
//  Строка - Наименование валюты договора и валюты оплаты.
//
// Вызывается из формул элементов диалога:
//  Текст "ИнформацияОДоговоре".
//
// Описание:
//  Формирует строку, содержащую наименование валюты договора и валюты оплаты.
//
Функция ИнформацияОДоговоре() 
	
	Стр = "";
	Если Договор.Выбран() = 1 Тогда
		Если Договор.ВалютаДоговора.Выбран() = 1 Тогда
		    Стр = "Валюта договора: " + Договор.ВалютаДоговора;
		КонецЕсли;	    
	КонецЕсли;
	Возврат Стр;
	
КонецФункции // ИнформацияОДоговоре()

//*****************************************************************************
// ПриВыбореДоговора()
//
// Вызывается из формул элементов диалога:
//  Поле ввода "Договор"
// 
// Описание:
//  Проверяет соответствие договора выбранному контрагенту.
//
Процедура ПриВыбореДоговора()

	глПриВыбореДоговора(Контрагент, Договор);
	УправлениеКурсом(1); // при изменении договора могла измениться валюта
	
КонецПроцедуры // ПриВыбореДоговора()

//*****************************************************************************
// ПриВыбореКонтрагента()
//
// Вызывается из формул элементов диалога:
//  Поле ввода "Контрагент".
//
// Описание:
//  Проверяет соответствие договора выбранному контрагенту.
//
Процедура ПриВыбореКонтрагента()
	
	глПриВыбореКонтрагента(Контрагент, Договор);
	УправлениеКурсом(1);
	
КонецПроцедуры // ПриВыбореКонтрагента()

//_____________________________________________________________________________
Функция ИтоговаяСтрока()
	Стр = "Итого без налогов: " + СокрЛП(Формат((Итог("Всего")-Итог("НДС")-Итог("НП")),"Ч20.2-'"));
	Если Итог("НДС") = 0 Тогда
		Стр = Стр + ", без НДС";
	Иначе
		Стр = Стр + ", НДС: " + СокрЛП(Формат(Итог("НДС"),"Ч20.2-'"));
	КонецЕсли;
	Если Итог("НП") <> 0 Тогда
		Стр = Стр + ", НП: " + СокрЛП(Формат(Итог("НП"),"Ч20.2-'"));
	КонецЕсли;
	Стр = Стр + ", Всего: " + СокрЛП(Формат(Итог("Всего"),"Ч20.2-'"));
	Возврат Стр;
КонецФункции // ИтоговаяСтрока
//_____________________________________________________________________________
Процедура РассчитатьНалоги()
	НДС = глПоказательДокумента(Контекст, "НДС");
	НП = глПоказательДокумента(Контекст, "НП");
	Всего = глПоказательДокумента(Контекст, "СуммаСНалогами");
	Форма.НДС.Видимость(глПризнакУчетаНалога(Контекст, "НДС"));
	Форма.НП.Видимость(глПризнакУчетаНалога(Контекст, "НП"));
КонецПроцедуры // РассчитатьНалоги
//_____________________________________________________________________________
Процедура Пересчет(ИмяРеквизита="")
	Если ИмяРеквизита = "" Тогда // вызов из формулы колонки табличной части
	    ИмяРеквизита = Форма.ТекущаяКолонка();
	КонецЕсли;
	Если ОбъектВнеоборотныхАктивов.Выбран() = 1 Тогда
		Если (ИмяРеквизита = "ОбъектВнеоборотныхАктивов") Тогда
			Стоимость = 0;
			РассчитатьНалоги();
		ИначеЕсли (ИмяРеквизита = "Стоимость") Тогда
			РассчитатьНалоги();
		ИначеЕсли (ИмяРеквизита = "НДС") или (ИмяРеквизита = "НП") Тогда
			Всего = глПоказательДокумента(Контекст, "СуммаСНалогами");
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры //Пересчет
//_____________________________________________________________________________
Процедура ПриПредъявленииСчетаФактуры()
	Если СчетФактураПредъявлен = 1 Тогда
		Форма.ДатаНомерСчетаФактуры.Доступность(1);
	Иначе
		Форма.ДатаНомерСчетаФактуры.Доступность(0);
		ДатаНомерСчетаФактуры = "";
	КонецЕсли;
КонецПроцедуры

//*****************************************************************************
// ПриВыбореВариантаРасчетаНалогов()
//
// Вызывается из формул элементов диалога:
//  Поле ввода "ВариантРасчетаНалогов".
//
// Описание:
//  Пересчитывает суммы в документе при смене варианта расчета налогов.
//
Процедура ПриВыбореВариантаРасчетаНалогов()  
	
	Если ВариантРасчетаНалогов = ТекущийВариантРасчетаНалогов Тогда
		Возврат
	КонецЕсли;
	
	Если КоличествоСтрок() > 0 Тогда
		Ответ = Вопрос("Пересчитать суммы налогов в существующих строках
		            |табличной части (суммы налогов будут
		            |обновлены в соответствии с выбранным вариантом)?", "Да+Нет+Отмена");
		Если Ответ = "Да" Тогда
			ОбщееКоличество = КоличествоСтрок();
			ВыбратьСтроки();
			Пока ПолучитьСтроку() = 1 Цикл
				РассчитатьНалоги();
				Состояние("Обработано: " + Окр(НомерСтроки/ОбщееКоличество*100, 0, 1) + "%");
			КонецЦикла;
			
		ИначеЕсли Ответ = "Отмена" Тогда
			ВариантРасчетаНалогов = ТекущийВариантРасчетаНалогов;
		КонецЕсли;
	КонецЕсли;
	УчитыватьНП = глПризнакУчетаНалога(Контекст, "НП");
	УчитыватьНДС = глПризнакУчетаНалога(Контекст, "НДС");
	ВыбратьСтроки();
	Пока ПолучитьСтроку() = 1 Цикл
		НДС = ?(УчитыватьНДС = 0, 0, НДС);
		НП = ?(УчитыватьНП = 0, 0, НП);
	КонецЦикла;
	Форма.НДС.Видимость(УчитыватьНДС);
	Форма.НП.Видимость(УчитыватьНП);
	
КонецПроцедуры // ПриВыбореВариантаРасчетаНалогов()

//_____________________________________________________________________________
Процедура ПриВыбореВариантаЗачетаАванса()
	ЗачитыватьАванс = ВариантЗачетаАванса.ПолучитьЗначение(ВариантЗачетаАванса.ТекущаяСтрока());
КонецПроцедуры //ПриВыбореВариантаЗачетаАванса
//_____________________________________________________________________________
Процедура ВводНового(Копирование) //предопределенная
	глЗаполнитьШапку(Контекст, Копирование);
	Новый = 1;
	ВерсияОбъекта = Константа.НомерРелиза;
	Если Копирование = 1 Тогда
	    Возврат;
	КонецЕсли;
    Если ПустоеЗначение(Форма.Параметр) = 0 Тогда
	    Контрагент = Форма.Параметр.Получить("Контрагент");
	КонецЕсли;
	ЗачитыватьАванс = 0;
	ВариантРасчетаНалогов = Константа.ОсновнойВариантРасчетаНалогов;
	Если Константа.ОрганизацияЯвляетсяПлательщикомНДС = Нет Тогда
		НДСвключатьВСтоимость = 1;
	КонецЕсли;
КонецПроцедуры //ВводНового
//_____________________________________________________________________________
Процедура ПриОткрытии() //предопределенная
	ПриЗаписиПерепроводить(1);
	глПроверкаРазрешенияРедактирования(Контекст);
	Если Форма.ТолькоПросмотр() = 1 Тогда
		Форма.КнопкаОК.Доступность(0);
		Форма.КнопкаЗаписать.Доступность(0);
	КонецЕсли;

	Если (ПустоеЗначение(ДатаНомерСчетаФактуры) = 1) и (Выбран() = 1) Тогда
		СчетФактураПредъявлен = 0;
		Форма.ДатаНомерСчетаФактуры.Доступность(0);
	Иначе
		СчетФактураПредъявлен = 1;
		Форма.ДатаНомерСчетаФактуры.Доступность(1);
	КонецЕсли;

	Форма.НДС.Видимость(глПризнакУчетаНалога(Контекст, "НДС"));
	Форма.НП.Видимость(глПризнакУчетаНалога(Контекст, "НП"));
	
	ВариантЗачетаАванса.ДобавитьЗначение(1, "не зачитывать");
	ВариантЗачетаАванса.ДобавитьЗначение(2, "только по договору");
	ВариантЗачетаАванса.ДобавитьЗначение(0, "без указания договора");
	ВариантЗачетаАванса.ТекущаяСтрока(ВариантЗачетаАванса.НайтиЗначение(ЗачитыватьАванс));

	Форма.Стоимость.ВыполнятьФормулуТолькоПриИзменении(1);
	Форма.НДС.ВыполнятьФормулуТолькоПриИзменении(1);
	Форма.НП.ВыполнятьФормулуТолькоПриИзменении(1);
	Форма.Всего.ВыполнятьФормулуТолькоПриИзменении(1);
	НачальнаяДатаДокумента = ДатаДок;
	УправлениеКурсом();
КонецПроцедуры //ПриОткрытии

//*****************************************************************************
// Предопределенная процедура
//
Процедура ПриНачалеВыбораЗначения(ЭлементДиалога, Флаг)
	
	Если ЭлементДиалога = "ВариантРасчетаНалогов" Тогда
		ТекущийВариантРасчетаНалогов = ВариантРасчетаНалогов;
	КонецЕсли;
	
КонецПроцедуры // ПриНачалеВыбораЗначения()

//_____________________________________________________________________________
Процедура ПриЗаписи() //предопределенная
	
	Если глМожноЗаписатьДокумент(Контекст) = 0 Тогда
		СтатусВозврата(0);
		Возврат;
	ИначеЕсли глКонтрольДатыДокумента(Контекст, НачальнаяДатаДокумента) = 1 Тогда
		СтатусВозврата(0);
		Возврат;
	ИначеЕсли (СокрЛП(ДатаНомерСчетаФактуры) = "") и (СчетФактураПредъявлен = 1) Тогда
		Предупреждение("Введите данные о документе поставщика
					   |или поставьте переключатель в положение
					   |""Счет-фактура поставщиком не предъявлен""");
		СтатусВозврата(0);
		Возврат;
	КонецЕсли;
    
	ЦеныВДоговоре = 1; //в рублях
	Если Договор.Выбран() = 1 Тогда
	    Если ПустоеЗначение(Договор.ВалютаДоговора) = 0 Тогда
			ЦеныВДоговоре = 2; //в валюте
		КонецЕсли;
	КонецЕсли;
	
	Если ЦеныВДоговоре = 2 Тогда
		Валюта = Договор.ВалютаДоговора;
		Кратность = Валюта.Кратность.Получить(ДатаДок);
		Кратность = ?(Кратность=0, 1, Кратность);
		Если Договор.ВестиУчетРасчетовУЕ = 1 Тогда
			Кратность = Кратность * 100 / (100 + Договор.ПроцентКорректировкиКурсаУЕ);
		КонецЕсли;
		Операция.СуммаОперации = Окр(Итог("Всего")*Курс/Кратность, 2, 1);
	Иначе
		Операция.СуммаОперации = Итог("Всего");
	КонецЕсли;
	
	Операция.Содержание = "Приобретение НМА за плату";
	
КонецПроцедуры //ПриЗаписи

//******************************************************************************
// Предопределенная процедура
//
Процедура ПриЗакрытии()
	
	Если ПустоеЗначение(Форма.Параметр) = 0 Тогда
		КонтекстЖурнала = Форма.Параметр.Получить("КонтекстЖурнала");
		Если ПустоеЗначение(КонтекстЖурнала) = 0 Тогда
			КонтекстЖурнала.Активизировать(КонтекстЖурнала.Форма.ТекущаяКолонка(), 0);
			
		Иначе
			глОткрытьЖурнал(Контекст, Новый);
		КонецЕсли;
		
	Иначе
		глОткрытьЖурнал(Контекст, Новый);
	КонецЕсли;	
	
КонецПроцедуры // ПриЗакрытии()

//*****************************************************************************
Новый = 0;

СписокДействий = СоздатьОбъект("СписокЗначений");
СписокДействий.ДобавитьЗначение("Отчет о движениях документа");
СписокДействий.ДобавитьЗначение("Структура подчиненности");
СписокДействий.ДобавитьЗначение("Ввести на основании");
СписокДействий.ДобавитьЗначение("Перейти  в журнал");