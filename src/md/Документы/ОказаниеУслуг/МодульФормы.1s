////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ
//
Перем ТаблицаПечФорм;  // список печатных форм документа
Перем НомерТекущейФормы;
Перем НачальнаяДатаДокумента; 
Перем Новый;
Перем СписокДействий;
Перем Валюта;
Перем СтарыйДоговор;
Перем СтарыйКурс;
Перем ТекущийВариантРасчетаНалогов;

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ МОДУЛЯ
//

//******************************************************************************
//  СуммаПрописью(Сумма) 
//
// Параметры:
// 		Сумма - число, на основе которого формируется сумма
//
// Возвращаемое значение: 
//		Сумма прописью
//
// Описание:
// 	Формирует сумму прописью в соответствии с файлом прописи, заданным в валюте.
//
Функция СуммаПрописью(Сумма) Экспорт
	
	Валюта = Договор.ВалютаДоговора;
	Если ПустоеЗначение(Валюта) = 0 Тогда
		
		Если ПустоеЗначение(Валюта.ИмяФайлаПрописи) = 1 Тогда
	        Предупреждение("Для выбранной валюты не указан файл прописи.");
		ИначеЕсли ФС.СуществуетФайл(КаталогИБ()+Валюта.ИмяФайлаПрописи) = 0 Тогда
	        Предупреждение("Для выбранной валюты неверно указан файл прописи.");
		Иначе
			Пропись(КаталогИБ()+Валюта.ИмяФайлаПрописи);
	    КонецЕсли;
		
	КонецЕсли;

	СтрокаСуммы	= Формат(Сумма, "ЧПДС");
	
	// установим пропись по умолчанию
	Пропись("");
	Возврат СтрокаСуммы;
	
КонецФункции // СуммаПрописью()

//******************************************************************************
// ПриВыбореТипаУслуги()
//
// Вызывается из формул элементов диалога:
//  Текст "СписокТиповУслуг".
//
// Описание:
//  Управляет видимостью реквизитов "Зачет аванса" и "Зачет требований".
//
Процедура ПриВыбореТипаУслуги() 
	
	Если СписокТиповУслуг.ТекущаяСтрока() = ТипУслуги Тогда
	Иначе
		ТипУслуги = СписокТиповУслуг.ТекущаяСтрока();
	КонецЕсли;
	
	Если ТипУслуги = 1 Тогда
	    Форма.ИспользоватьСлой("ЗачетАванса", 1);
		Форма.ИспользоватьСлой("ЗачетТребований", 0);
		Форма.ИспользоватьСлой("ПрочиеДоходы", 0);
	ИначеЕсли ТипУслуги = 2 Тогда
		Форма.ИспользоватьСлой("ЗачетАванса", 0);
		Форма.ИспользоватьСлой("ЗачетТребований", 1);
		Форма.ИспользоватьСлой("ПрочиеДоходы", 0);
	Иначе
		Форма.ИспользоватьСлой("ЗачетАванса", 1);
		Форма.ИспользоватьСлой("ЗачетТребований", 0);
		Форма.ИспользоватьСлой("ПрочиеДоходы", 1);
	КонецЕсли;
	
КонецПроцедуры // ПриВыбореТипаУслуги()

//******************************************************************************
// ИнформацияОДоговоре()
//
// Возвращаемое значение:
//  Строка - Наименование валюты договора и валюты оплаты.
//
// Вызывается из формул элементов диалога:
//  Текст "ИнформацияОДоговоре".
//
// Описание:
//  Формирует строку, содержащую наименование валюты договора и валюты оплаты.
//
Функция ИнформацияОДоговоре() 
	
	Стр = "";
	Если Договор.Выбран() = 1 Тогда
		Если Договор.ВалютаДоговора.Выбран() = 1 Тогда
		    Стр = "Валюта договора: " + Договор.ВалютаДоговора;
		КонецЕсли;	    
	КонецЕсли;
	Возврат Стр;
	
КонецФункции // ИнформацияОДоговоре()

//******************************************************************************
// УправлениеКурсом(ИзменитьКурс)
//
// Параметры:
//  ИзменитьКурс - Число. 1 - установить новый курс валюты, 0 - не изменять.
//
// Описание:
//  При выбранной иностранной валюте делает видимым поле "Курс" и записывает
// в него значение из справочника.
//
Процедура УправлениеКурсом(ИзменитьКурс=0)
	
	ВидимостьКурса = Договор.ВалютаДоговора.Выбран();
	Форма.ПодписьКурса.Видимость(ВидимостьКурса);
	Форма.Курс.Видимость(ВидимостьКурса);
	СтарыйКурс = ?(Курс = 0, 1, Курс);
	
	Если ИзменитьКурс = 1 Тогда
		Если ВидимостьКурса = 1 Тогда
		    Курс = Договор.ВалютаДоговора.Курс.Получить(ДатаДок);
			
		Иначе
			Курс = 0;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // УправлениеКурсом()

//******************************************************************************
// РассчитатьНалоги()
//
// Описание:
//  Пересчитывает значения численных реквизитов табличной части документа 
// в зависимости от найденных ставок налогов и выбранного варианта формирования
// отпускных цен.
//
Процедура РассчитатьНалоги()
	
	НДС = глПоказательДокумента(Контекст, "НДС");
	НП = глПоказательДокумента(Контекст, "НП");
	Всего = глПоказательДокумента(Контекст, "СуммаСНалогами");
	Форма.НДС.Видимость(глПризнакУчетаНалога(Контекст, "НДС"));
	Форма.НП.Видимость(глПризнакУчетаНалога(Контекст, "НП"));
	
КонецПроцедуры // РассчитатьНалоги()

//*****************************************************************************
// Пересчет(ИмяРеквизита)
//
// Параметры:
//  ИмяРеквизита - Строка. Идентификатор колонки из формулы которой вызывается
//                 процедура.
//
// Вызывается из формул элементов диалога:
//  Колонка "Услуга",
//  Колонка "Количество",
//  Колонка "Цена",
//  Колонка "Сумма",
//  Колонка "НДС",
//  Колонка "НП",
//  Колонка "Всего".
//
// Описание:
//  Пересчитывает значения численных реквизитов табличной части документа.
//
Процедура Пересчет(ИмяРеквизита="")
	
	Если ИмяРеквизита = "" Тогда // вызов из формулы колонки табличной части
	    ИмяРеквизита = Форма.ТекущаяКолонка();
	КонецЕсли;

	Если Услуга.Выбран() = 1 Тогда
		Если (ИмяРеквизита = "Услуга") Тогда
			Цена = глПолучитьЦену(Контекст,Услуга,ТипЦен,ДатаДок,?(Договор.Выбран() = 0,"",Договор.ВалютаДоговора),Курс);
			Если Количество <> 0 Тогда
				Пересчет("Цена");
			КонецЕсли;
		ИначеЕсли (ИмяРеквизита = "Количество") Тогда
			Сумма = Цена*Количество;
			РассчитатьНалоги();
	    ИначеЕсли (ИмяРеквизита = "Цена") Тогда
			Сумма = Цена*Количество;
			РассчитатьНалоги();
		ИначеЕсли (ИмяРеквизита = "Сумма") Тогда
			РассчитатьНалоги();
			Цена = ?(Количество = 0, Сумма, Сумма/Количество);
		ИначеЕсли (ИмяРеквизита = "НДС") или (ИмяРеквизита = "НП") Тогда
			Всего = глПоказательДокумента(Контекст, "СуммаСНалогами");
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // Пересчет()

//******************************************************************************
Процедура ПересчитатьЦены()
	ВыбратьСтроки();
	Пока ПолучитьСтроку()=1 Цикл
		Пересчет("Услуга");
	КонецЦикла;
КонецПроцедуры

//*****************************************************************************
// ПриВыбореВариантаРасчетаНалогов()
//
// Вызывается из формул элементов диалога:
//  Поле ввода "ВариантРасчетаНалогов".
//
// Описание:
//  Пересчитывает суммы в документе при смене варианта расчета налогов.
//
Процедура ПриВыбореВариантаРасчетаНалогов()
	
	Если ВариантРасчетаНалогов = ТекущийВариантРасчетаНалогов Тогда
		Возврат
	КонецЕсли;
	
	Если КоличествоСтрок() > 0 Тогда
		ОбщееКоличество = КоличествоСтрок();
		ВыбратьСтроки();
		Пока ПолучитьСтроку() = 1 Цикл
			РассчитатьНалоги();
			Состояние("Обработано: " + Окр(НомерСтроки/ОбщееКоличество*100, 0, 1) + "%");
		КонецЦикла;
	КонецЕсли;
	УчитыватьНП = глПризнакУчетаНалога(Контекст, "НП");
	УчитыватьНДС = глПризнакУчетаНалога(Контекст, "НДС");
	ВыбратьСтроки();
	Пока ПолучитьСтроку() = 1 Цикл
		НДС = ?(УчитыватьНДС = 0, 0, НДС);
		НП = ?(УчитыватьНП = 0, 0, НП);
	КонецЦикла;
	Форма.НДС.Видимость(УчитыватьНДС);
	Форма.НП.Видимость(УчитыватьНП);
	
КонецПроцедуры // ПриВыбореВариантаРасчетаНалогов()

//******************************************************************************
// ПриВыбореТипаЗаказчика()
//
// Параметры:
//  Нет.
//
// Вызывается из формул элементов диалога:
//  Нет.
//
// Описание:
//  Здесь описывается процедура.
//
Процедура ПриВыбореТипаЗаказчика()
	
	Если СписокТиповЗаказчика.ТекущаяСтрока() = ТипЗаказчика Тогда
	Иначе
		ТипЗаказчика = СписокТиповЗаказчика.ПолучитьЗначение(СписокТиповЗаказчика.ТекущаяСтрока());
	КонецЕсли;
	
КонецПроцедуры // ПриВыбореТипаЗаказчика()

//******************************************************************************
// ПриВыбореВариантаЗачетаАванса()
//
// Вызывается из формул элементов диалога:
//  Поле со списком "ВариантыЗачетаАванса".
//
// Описание:
//  Устанавливает значение реквизита "ЗачитыватьАванс".
//
Процедура ПриВыбореВариантаЗачетаАванса()
	
	ЗачитыватьАванс = ВариантЗачетаАванса.ПолучитьЗначение(ВариантЗачетаАванса.ТекущаяСтрока());
	
КонецПроцедуры // ПриВыбореВариантаЗачетаАванса()

//*****************************************************************************   
// ПриВыбореТипаЦен()
//
// Вызывается из формул элементов диалога:
//  Поле ввода "Тип цен"
// 
// Описание:
//  Проверяет соответствие типа цен.
//
Процедура ПриВыбореТипаЦен()
	Если (ТипЦен.Выбран()=1)и(КоличествоСтрок()>0) Тогда
		Если Вопрос("Перезаполнить цены в документе?","Да+Нет",60) = "Да" Тогда
			ПересчитатьЦены();
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

//*****************************************************************************   
// ПроверитьДоговор()
//
Процедура ПроверитьДоговор()
	СтараяВалюта = ПолучитьПустоеЗначение("Справочник.Валюты");
	НоваяВалюта = ПолучитьПустоеЗначение("Справочник.Валюты");
	НовыйКурс = ?(Курс = 0, 1, Курс);
	
	Если КоличествоСтрок() = 0 Тогда
	    Возврат;
	КонецЕсли;  
	
	Если ПустоеЗначение(СтарыйДоговор) = 1 Тогда
		СтараяВалюта = ПолучитьПустоеЗначение("Справочник.Валюты");
	Иначе
		СтараяВалюта = СтарыйДоговор.ВалютаДоговора;
	КонецЕсли;
	
	Если ПустоеЗначение(Договор) = 1 Тогда
		НоваяВалюта = ПолучитьПустоеЗначение("Справочник.Валюты");
	Иначе
		НоваяВалюта = Договор.ВалютаДоговора;
	КонецЕсли;
	
	Если СтараяВалюта <> НоваяВалюта Тогда
		Если Вопрос("Изменена валюта договора."+РазделительСтрок+"Пересчитать цены в документе?","Да+Нет",30) = "Да" Тогда
			ВыбратьСтроки();
			Пока ПолучитьСтроку()=1 Цикл
				Цена = глПересчет(Цена,СтараяВалюта,СтарыйКурс,НоваяВалюта,НовыйКурс);
				Пересчет("Цена");
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры


//*****************************************************************************
// ПриВыбореДоговора()
//
// Вызывается из формул элементов диалога:
//  Поле ввода "Договор"
// 
// Описание:
//  Проверяет соответствие договора выбранному контрагенту.
//
Процедура ПриВыбореДоговора()

	глПриВыбореДоговора(Контрагент, Договор);
	УправлениеКурсом(1); // при изменении договора могла измениться валюта
	ПроверитьДоговор();
	
КонецПроцедуры // ПриВыбореДоговора()

//*****************************************************************************
// ПриВыбореКонтрагента()
//
// Вызывается из формул элементов диалога:
//  Поле ввода "Контрагент".
//
// Описание:
//  Проверяет соответствие договора выбранному контрагенту.
//
Процедура ПриВыбореКонтрагента()
	
	глПриВыбореКонтрагента(Контрагент, Договор);
	УправлениеКурсом(1);
	ПроверитьДоговор();
	
КонецПроцедуры // ПриВыбореКонтрагента()

//*****************************************************************************   
// ПриВыбореКурса()
//
// Вызывается из формул элементов диалога:
//  Поле ввода "Курс"
// 
// Описание:
//  Проверяет соответствие типа цен.
//
Процедура ПриВыбореКурса()
	//
КонецПроцедуры

//*****************************************************************************
// ИтоговаяСтрока()
// 
// Вызывается из формул элементов диалога:
//  Текст ИтоговаяСтрока.
//
// Описание:
//  Формирует строку, содержащую итоговые суммы колонок табличной части.
//
Функция ИтоговаяСтрока()
	
	ИтСтр = "Всего: " + СокрЛ(Формат(Итог("Всего"),"Ч20.2-,")) + ", "+
			"в т.ч. НДС: " + СокрЛ(Формат(Итог("НДС"),"Ч20.2-,"));
	Если Итог("НП") > 0 Тогда
		ИтСтр = ИтСтр + ", НП: " + СокрЛ(Формат(Итог("НП"),"Ч20.2-,"));
	КонецЕсли;
	ИтСтр = ИтСтр + ", без налогов: " + СокрЛ(Формат(Итог("Всего") - Итог("НДС") - Итог("НП"),"Ч20.2-,"));

	Возврат ИтСтр;
	
КонецФункции // ИтоговаяСтрока()

//******************************************************************************
//  Печать()
//
// Вызывается из формул элементов диалога:
//  Кнопка "Печать".
//
// Описание:
//  Формирование печатной формы документа.
//
Процедура Печать()

	Таб = СоздатьОбъект("Таблица");
	
	АдресТелефон = "";
	глДобавитьРеквизит(АдресТелефон, "Адрес: ", глПредставлениеАдреса(Константа.АдресОрганизации));
	глДобавитьРеквизит(АдресТелефон, ", тел.: ", Константа.ТелефоныОрганизации);
	Таб.ВывестиСекцию("Шапка");
	
	Ном = 0;
	ВыбратьСтроки();
	Пока ПолучитьСтроку() = 1 Цикл
		Ном = Ном + 1;
		Наименование = ?(ПустаяСтрока(Услуга.ПолнНаименование)=1, Услуга.Наименование, Услуга.ПолнНаименование);
		Таб.ВывестиСекцию("Строка");
		Состояние("Выведено строк: " + НомерСтроки);
	КонецЦикла;
	
	Таб.ВывестиСекцию("Итоги");
	Если УчитыватьНП = 1 Тогда
		Таб.ВывестиСекцию("НП");
	КонецЕсли;
	Таб.ВывестиСекцию("Подвал");

	Таб.Опции(0,0,0,0,"ОпцииПечатиНакладной","ОкноНакладной");
	Таб.ТолькоПросмотр(1);
	Таб.Показать("Печать акта");
	
КонецПроцедуры // Печать()

//******************************************************************************
// ПоКнопкеПечать()
// 
// Вызывается из формул элементов диалога:
//  Кнопка "кнПечать".
//
// Описание:
//  Определяется соответствующая печатная форма.
// 	
Процедура ПоКнопкеПечать(СразуНаПринтер = 0,КолЭкз = 1)
	
	Если  ПустоеЗначение(НомерТекущейФормы) = 1  Тогда
		НомерТекущейФормы = 1;
		Форма.кнПечать.Заголовок(ТаблицаПечФорм.ПолучитьЗначение(НомерТекущейФормы, "Кнопка"));
	КонецЕсли;
	
	Если НомерТекущейФормы = 1  Тогда
		Печать();
		
	Иначе
		Параметры = СоздатьОбъект("СписокЗначений");
		Параметры.ДобавитьЗначение(Контекст, "Контекст");
		Параметры.ДобавитьЗначение(СразуНаПринтер, "Устройство");
		Параметры.ДобавитьЗначение(КолЭкз, "КоличествоКопий");
		
		ОткрытьФорму("Отчет", Параметры, глКаталогПечФорм+ТаблицаПечФорм.ПолучитьЗначение(НомерТекущейФормы,"Файл"));
	КонецЕсли;
	
КонецПроцедуры // ПоКнопкеПечать()

//******************************************************************************
// ПоКнопкеВыборПечатнойФормы()
//
// Вызывается из формул элементов диалога:
//  Кнопка "кнВыбПечать".
//
// Описание:
//  - открывает список для выбора способа печати. 
//  - формирует таблицу по выбранному способу.
//
Процедура ПоКнопкеВыборПечатнойФормы()
	
    ВыбНомер = глВыборПечатнойФормы("Документ." + Вид(), ТаблицаПечФорм);
	Если ВыбНомер > 0 Тогда
		НомерТекущейФормы = ВыбНомер;
		Форма.кнПечать.Заголовок(ТаблицаПечФорм.ПолучитьЗначение(НомерТекущейФормы, "Кнопка"));
		ПоКнопкеПечать();
	КонецЕсли;

КонецПроцедуры // ПоКнопкеВыборПечатнойФормы()

//*****************************************************************************
// Подбор()
//
// Вызывается из формул элементов диалога:
//  Кнопка "КнопкаПодбор".
//
// Описание:
//  Открывает форму списка справочника "Номенклатура" для подбора наименований
// позиций в табличной части.
//
Процедура Подбор()
	
	КонтекстФормыПодбора = СоздатьОбъект("СписокЗначений");
	КонтекстФормыПодбора.ДобавитьЗначение(Контекст, "Контекст");
	Если ТипУслуги = 2 Тогда
		КонтекстФормыПодбора.ДобавитьЗначение(Перечисление.ТипыНоменклатуры.ПосредническаяУслуга, "ОтборПоТипу");
	КонецЕсли;
	ОткрытьПодбор("Справочник.Номенклатура", "ДляПодбора", КонтекстФормыПодбора);
	
КонецПроцедуры // Подбор()


////////////////////////////////////////////////////////////////////////////////
// ПРЕДОПРЕДЕЛЕННЫЕ ПРОЦЕДУРЫ
//

//*****************************************************************************
// Предопределенная процедура
//
Процедура ВводНового(Копирование)
	глЗаполнитьШапку(Контекст, Копирование);
	Новый = 1;
	ВерсияОбъекта = Константа.НомерРелиза;
	Если Копирование = 1 Тогда
	    Возврат;
	КонецЕсли;
    
	Если Константа.ОсновнойСклад.Выбран() = 1 Тогда
	    ТипЦен = Константа.ОсновнойСклад.ТипЦен;
	КонецЕсли;
	
	ЗачитыватьАванс = 0;
	ВРН = Константа.ОсновнойВариантРасчетаНалоговОтгрузки;
	Если (ВРН.СтавкаНП.Ставка = 0) и
		 (ВРН.СтавкаНДС.Ставка = 0) Тогда
		ВариантРасчетаНалогов = ВРН;
		
	Иначе  // попробуем найти подходящий из существующих вариантов расчета налогов
		
		СпрВариант = СоздатьОбъект("Справочник.ВариантыРасчетаНалогов");
		СпрВариант.ВыбратьЭлементы();
		Пока СпрВариант.ПолучитьЭлемент() = 1 Цикл
			
			Если ((ВРН.СтавкаНДС.Ставка = 0)
			    и (СпрВариант.СтавкаНДС = ВРН.СтавкаНДС)
			    и (СпрВариант.СуммаВключаетНДС = ВРН.СуммаВключаетНДС))
				
			 или ((ВРН.СтавкаНДС.Ставка <> 0)
				и (СпрВариант.СтавкаНДС.Выбран() = 0)
			    и (СпрВариант.СуммаВключаетНДС = ВРН.СуммаВключаетНДС)) Тогда
					
				Если ((ВРН.СтавкаНП.Ставка = 0)
				    и (СпрВариант.СтавкаНП = ВРН.СтавкаНП)
				    и (СпрВариант.СуммаВключаетНП = ВРН.СуммаВключаетНП))
					
				 или ((ВРН.СтавкаНП.Ставка <> 0)
					и (СпрВариант.СтавкаНП.Выбран() = 0)
				    и (СпрВариант.СуммаВключаетНП = ВРН.СуммаВключаетНП)) Тогда
		
					ВариантРасчетаНалогов = СпрВариант.ТекущийЭлемент();
					Прервать;
				КонецЕсли;
			КонецЕсли;
			
		КонецЦикла;
	
	КонецЕсли;
	
	ТипУслуги = 1;
	
КонецПроцедуры // ВводНового()

//*****************************************************************************
// Предопределенная процедура
//
Процедура ВводНаОсновании(ДокОсн)
	
	Новый = 1;
	ВерсияОбъекта = Константа.НомерРелиза;
	Если ДокОсн.Вид() = "Счет" Тогда
		ЗачитыватьАванс = 0;
		Контрагент = ДокОсн.Контрагент;
		Договор = ДокОсн.Договор;
		Если Договор.ВалютаДоговора.Выбран() = 1 Тогда
		    Курс = Договор.ВалютаДоговора.Курс.Получить(ДатаДок);
		КонецЕсли;
		ВариантРасчетаНалогов = ДокОсн.ВариантРасчетаНалогов;
		ТипЦен = ДокОсн.ТипЦен;
		ДокОсн.ВыбратьСтроки();
		Пока ДокОсн.ПолучитьСтроку() = 1 Цикл
			НоваяСтрока();
			Услуга = ДокОсн.Товар;
			Если (Услуга.ВидНоменклатуры.ТипНоменклатуры = Перечисление.ТипыНоменклатуры.Услуга)
			 или (Услуга.ВидНоменклатуры.ТипНоменклатуры = Перечисление.ТипыНоменклатуры.УслугаЕНВД) Тогда
			    ТипУслуги = 1;
			Иначе
				ТипУслуги = 2;
			КонецЕсли;
			Количество = ДокОсн.Количество;
			Цена = ДокОсн.Цена;
			Сумма = ДокОсн.Сумма;
			НДС = ДокОсн.НДС;
			НП = ДокОсн.НП;
			Всего = ДокОсн.Всего;
		КонецЦикла;
	КонецЕсли;
	
	Комментарий = "Введен на основании: "+ГлПредставлениеДокумента(ДокОсн);
	
КонецПроцедуры // ВводНаОсновании()

//*****************************************************************************
// Предопределенная процедура
//
Процедура ПриОткрытии()
	
	ПриЗаписиПерепроводить(1);
	глПроверкаРазрешенияРедактирования(Контекст);
	Если Форма.ТолькоПросмотр() = 1 Тогда
		Форма.КнопкаОК.Доступность(0);
		Форма.КнопкаОчистить.Доступность(0);
		Форма.КнопкаПодбор.Доступность(0);
		Форма.КнопкаЗаписать.Доступность(0);
	КонецЕсли;
	
	Форма.Услуга.ВыполнятьФормулуТолькоПриИзменении(1);
	Форма.Количество.ВыполнятьФормулуТолькоПриИзменении(1);
	Форма.Цена.ВыполнятьФормулуТолькоПриИзменении(1);
	Форма.Сумма.ВыполнятьФормулуТолькоПриИзменении(1);
	Форма.НДС.ВыполнятьФормулуТолькоПриИзменении(1);
	Форма.НП.ВыполнятьФормулуТолькоПриИзменении(1);
    
	Если Константа.ИспользоватьТипыЦен = Нет Тогда
	    Форма.ПодписьТипаЦен.Видимость(0);
		Форма.ТипЦен.Видимость(0);
	Иначе
		Форма.ПодписьТипаЦен.Видимость(1);
		Форма.ТипЦен.Видимость(1);
	КонецЕсли;
	
	ВариантЗачетаАванса.ДобавитьЗначение(1, "не зачитывать");
	ВариантЗачетаАванса.ДобавитьЗначение(2, "только по договору");
	ВариантЗачетаАванса.ДобавитьЗначение(0, "без указания договора");
	ВариантЗачетаАванса.ТекущаяСтрока(ВариантЗачетаАванса.НайтиЗначение(ЗачитыватьАванс));
	НачальнаяДатаДокумента = ДатаДок;
	
	СписокТиповУслуг.ДобавитьЗначение(1, "Оказание услуг (счет 90)");
	СписокТиповУслуг.ДобавитьЗначение(2, "Оказание посредн. услуг в торговле"); 
	СписокТиповУслуг.ДобавитьЗначение(3, "Оказание услуг (счет 91)");
	СписокТиповУслуг.ТекущаяСтрока(ТипУслуги);
	ПриВыбореТипаУслуги();
	
	СписокТиповЗаказчика.ДобавитьЗначение(1, "Покупатель (счет 62)");
	СписокТиповЗаказчика.ДобавитьЗначение(2, "Прочий дебитор (счет 76)"); 
	СписокТиповЗаказчика.ТекущаяСтрока(ТипЗаказчика);

	УправлениеКурсом();
	Форма.НДС.Видимость(глПризнакУчетаНалога(Контекст, "НДС"));
	Форма.НП.Видимость(глПризнакУчетаНалога(Контекст, "НП"));
	Валюта = Договор.ВалютаДоговора;
	
	Активизировать("НомерДок",);
	
	// Заполним таблицу для выбора печатной формы
	НомерТекущейФормы = глУстановкаКнопкиПечать(Контекст, "Документ." + Вид(),ТаблицаПечФорм);
	
КонецПроцедуры // ПриОткрытии()

//*****************************************************************************
// Предопределенная процедура
//
Процедура ПриНачалеВыбораЗначения(ЭлементДиалога,Флаг)
	
	Если ЭлементДиалога = "Услуга" Тогда
		Если ТипУслуги = 2 Тогда
		    ОтборНоменклатуры = Перечисление.ТипыНоменклатуры.ПосредническаяУслуга;
		Иначе
			ОтборНоменклатуры = "";
		КонецЕсли;
		
	ИначеЕсли ЭлементДиалога = "ВариантРасчетаНалогов" Тогда
		ТекущийВариантРасчетаНалогов = ВариантРасчетаНалогов;
		Флаг = 0;
		СписокВариантов = СоздатьОбъект("СписокЗначений");
		СпрВариант = СоздатьОбъект("Справочник.ВариантыРасчетаНалогов");
		СпрВариант.ВыбратьЭлементы();
		Пока СпрВариант.ПолучитьЭлемент() = 1 Цикл
			Если (СпрВариант.СтавкаНП.Ставка = 0) и
				 (СпрВариант.СтавкаНДС.Ставка = 0) Тогда
				СписокВариантов.ДобавитьЗначение(СпрВариант.ТекущийЭлемент());
			КонецЕсли;
		КонецЦикла;
		Значение = ВариантРасчетаНалогов;
		Если СписокВариантов.ВыбратьЗначение(Значение, , , , 2) = 0 Тогда
			Возврат;
		КонецЕсли;
		ВариантРасчетаНалогов = Значение;
		ПриВыбореВариантаРасчетаНалогов();
	ИначеЕсли (ЭлементДиалога = "Договор")или(ЭлементДиалога = "Контрагент") Тогда
		СтарыйДоговор = Договор;	
	КонецЕсли;
	
КонецПроцедуры // ПриНачалеВыбораЗначения()

//*****************************************************************************
// Предопределенная процедура
//
Процедура ОбработкаПодбора(ВыбрНоменклатура,Конт)
	
	Кол = 1;
	Если ВвестиЧисло(Кол, "Введите количество", 14, 3) = 0 Тогда
	    Возврат;
	ИначеЕсли Кол = 0 Тогда
		Возврат;
	КонецЕсли;
	
	НоваяСтрока();
	Услуга = ВыбрНоменклатура;
	Количество = Кол;
	АктивизироватьСтроку();
	Пересчет("Услуга");
	Если Константа.ИспользоватьТипыЦен = Нет Тогда
	Иначе
		Цена = глПолучитьЦену(Контекст,Услуга,Конт.ТипЦен,ДатаДок,?(Договор.Выбран() = 0,"",Договор.ВалютаДоговора),Курс);
		Пересчет("Цена");
	КонецЕсли;
	
КонецПроцедуры // ОбработкаПодбора()

//*****************************************************************************
// Предопределенная процедура
//
Процедура ПриЗаписи()
	
	Если глМожноЗаписатьДокумент(Контекст) = 0 Тогда
		СтатусВозврата(0);
		Возврат;
		
	ИначеЕсли глКонтрольДатыДокумента(Контекст, НачальнаяДатаДокумента) = 1 Тогда
		СтатусВозврата(0);
		Возврат;
	КонецЕсли;

	ЦеныВДоговоре = 1; // в рублях
	Если Договор.Выбран() = 1 Тогда
	    Если ПустоеЗначение(Договор.ВалютаДоговора) = 0 Тогда
			ЦеныВДоговоре = 2; // в валюте
		КонецЕсли;
	КонецЕсли;
	
	Если ЦеныВДоговоре = 2 Тогда
		Валюта = Договор.ВалютаДоговора;
		Кратность = Валюта.Кратность.Получить(ДатаДок);
		Кратность = ?(Кратность=0, 1, Кратность);
		Если Договор.ВестиУчетРасчетовУЕ = 1 Тогда
			Кратность = Кратность * 100 / (100 + Договор.ПроцентКорректировкиКурсаУЕ);
		КонецЕсли;
		Операция.СуммаОперации = Окр(Итог("Всего")*Курс/Кратность, 2, 1);
	Иначе
		Операция.СуммаОперации = Итог("Всего");
	КонецЕсли;
	Операция.Содержание = "Оказание услуг";
	
КонецПроцедуры // ПриЗаписи()

//******************************************************************************
// Предопределенная процедура
//
Процедура ПриЗакрытии()
	
	глОткрытьЖурнал(Контекст, Новый);	
	
КонецПроцедуры // ПриЗакрытии()

//*****************************************************************************
Новый = 0;

ТаблицаПечФорм		= СоздатьОбъект("ТаблицаЗначений");
ТаблицаПечФорм.НоваяКолонка("Название","Строка",,,,30);
ТаблицаПечФорм.НоваяКолонка("Файл","Строка",,,"Файл",10);
ТаблицаПечФорм.НоваяКолонка("Кнопка","Строка",,,,10); 
ТаблицаПечФорм.НоваяКолонка("ФайлОписания","Строка");
	
// добавим информацию о встроенной форме
ТаблицаПечФорм.НоваяСтрока();
ТаблицаПечФорм.Название     = "Акт об оказании услуг";
ТаблицаПечФорм.Кнопка       = "Печать";

СписокДействий = СоздатьОбъект("СписокЗначений");
СписокДействий.ДобавитьЗначение("Отчет о движениях документа");
СписокДействий.ДобавитьЗначение("Структура подчиненности");
СписокДействий.ДобавитьЗначение("Ввести на основании"); 
СписокДействий.ДобавитьЗначение("Перейти  в журнал");