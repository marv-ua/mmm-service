Перем НачальнаяДатаДокумента;
Перем Новый;
Перем СписокДействий;
Перем ТекущийВариантРасчетаНалогов;
Перем ДополнительнаяИнформационнаяСтрока;
Перем КодВидаПоступления;
Перем ТекДоговор;

//******************************************************************************
// ПолучитьКодВидаДвижения();
//                                                    
Функция ПолучитьКодВидаПоступления() 
	ПромежуточныйКод = 0;
	
	Если ВидПоступления = 11 Тогда
	    ПромежуточныйКод = 1;
		
	ИначеЕсли ВидПоступления = 12 Тогда
	    ПромежуточныйКод = 3;
		
	ИначеЕсли ВидПоступления = 13 Тогда
	    ПромежуточныйКод = 4;
	КонецЕсли;
	
	Если (МестоХранения.Выбран() = 0) Тогда
	    Возврат ПромежуточныйКод;
		
	ИначеЕсли (МестоХранения.ТипСклада.Выбран() = 0) Тогда
	    Возврат ПромежуточныйКод;
	КонецЕсли;
	
	Если ВидПоступления <> 12 Тогда
		Если МестоХранения.ТипСклада = Перечисление.ТипыСкладов.Розничный Тогда
	        ПромежуточныйКод = ПромежуточныйКод + 1;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ПромежуточныйКод;
КонецФункции  

//******************************************************************************
// УправлениеВидимостьюГТД(РежимПроверки)
//
// Параметры:
//  РежимПроверки: 1 - анализировать все строки табличной части;
//                 0 - анализировать только текущую строку табличной части.
//
// Вызывается из формул элементов диалога:
//  Нет.
//
// Описание:
//  Осущетсвляется управление видимостью
//  реквиза табличной части ГТД.
//
Процедура УправлениеВидимостьюГТД(РежимПроверки = 0)
	
	Если КодВидаПоступления = 3 Тогда
		Форма.ГТД.Видимость(0);
		Возврат;
		
	ИначеЕсли Форма.ИспользоватьЗакладки() = 1 Тогда
		Если Форма.Закладки.ТекущаяСтрока() <> 1 Тогда
		    Форма.ГТД.Видимость(0);
			Возврат;
		КонецЕсли;
		
	ИначеЕсли СчетФактураПредъявлен = 0 Тогда
		Форма.ГТД.Видимость(0);
		Возврат;
	КонецЕсли;
		
	Если РежимПроверки = 0 Тогда
		Если ТипЗначенияСтр(Товар) = "Справочник" Тогда
			Если Товар.Вид() = "Номенклатура" Тогда
				Если Товар.СтранаПроисхожд = 0 Тогда
					Форма.ГТД.Видимость(1);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
	Иначе // проверить все строки
		Видимость = 0;
		ВыбратьСтроки();
		Пока ПолучитьСтроку() = 1 Цикл
			Если ТипЗначенияСтр(Товар) = "Справочник" Тогда
				Если Товар.Вид() = "Номенклатура" Тогда
					Если Товар.СтранаПроисхожд = 0 Тогда
						Видимость = 1;
						Прервать;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		Форма.ГТД.Видимость(Видимость);
	КонецЕсли;
	
КонецПроцедуры // УправлениеВидимостьюГТД()

//******************************************************************************
// УправлениеКурсом(ИзменитьКурс)
//
// Параметры:
//  ИзменитьКурс - Число. Определяет должна ли процедура установить новый курс.
//
// Описание:
//  Управлет видимостью поля "Курс".
//
Процедура УправлениеКурсом(ИзменитьКурс=0)
	
	Если ИзменитьКурс <> 2 Тогда
		ВидимостьКурса = Договор.ВалютаДоговора.Выбран();
		
		Если Форма.ИспользоватьЗакладки() = 1 Тогда
			Если Форма.Закладки.ТекущаяСтрока() <> 1 Тогда
				ВидимостьКурса = 0;
			КонецЕсли;
		КонецЕсли;
		
		Форма.ПодписьКурса.Видимость(ВидимостьКурса);
		Форма.Курс.Видимость(ВидимостьКурса);
		
		Если ИзменитьКурс = 1 Тогда
			Если ВидимостьКурса = 1 Тогда
				Курс = Договор.ВалютаДоговора.Курс.Получить(ДатаДок);
				
			Иначе
				Курс = 0;
			КонецЕсли;
		КонецЕсли;
		
		Если ВидПоступления > 10 Тогда
			Если (ВидПоступления <> СписокВидовПоступления.ТекущаяСтрока()+10) Тогда
				ВидПоступления = СписокВидовПоступления.ТекущаяСтрока()+10;
			КонецЕсли;
			КодВидаПоступления = ПолучитьКодВидаПоступления();
			
		Иначе // до редакции 4.5
			Если (ВидПоступления <> СписокВидовПоступления.ТекущаяСтрока()) Тогда
				ВидПоступления = СписокВидовПоступления.ТекущаяСтрока();
				КодВидаПоступления = ВидПоступления;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	ВидимостьФлагаЗКП = ?((Договор.Выбран() = 1) и (Договор.АвтоОбработкаНДС = 0) и (СчетФактураПредъявлен = 1) и (ДатаДок>='01.01.2006'), ?((КодВидаПоступления = 4) и (ПокупателемВыставляетсяСчетФактураНаВозврат = 0), 0, 1), 0);
	Если (КодВидаПоступления <= 2) или (КодВидаПоступления = 4) Тогда
		Форма.ВключатьВКнигуПокупок.Видимость(ВидимостьФлагаЗКП);
		
	Иначе
		Если ИзменитьКурс = 2 Тогда
			ВключатьВКнигуПокупок = 0;
		КонецЕсли;
		Форма.ВключатьВКнигуПокупок.Видимость(0);
	КонецЕсли;
	
КонецПроцедуры // УправлениеКурсом()

//******************************************************************************
// УправлениеВидимостьюСлояКомиссия()
//
// Параметры:
//  РежимПроверки: 1 - анализировать все строки табличной части;
//                 0 - анализировать только текущую строку табличной части.
//
// Вызывается из формул элементов диалога:
//  Нет.
//
// Описание:
//  Анализиреутся необходимость в слое "Комиссия".
//
Процедура УправлениеВидимостьюСлояКомиссия(РежимПроверки = 0)
	
	СлойНужен = 0;
	                                                                                         
	// Этот слой нужен только в случае возврата реализованных товаров, принятых на комиссию.
	Если КодВидаПоступления < 4 Тогда
		Форма.ИспользоватьСлой("Комиссия", 0);
		
 	ИначеЕсли РежимПроверки = 0 Тогда
 		Если Товар.Выбран() = 1 Тогда
	 	    Если (Товар.ТипНоменклатуры = Перечисление.ТипыНоменклатуры.Товар) 
			   и (Товар.ТипТовара = Перечисление.ТипыТоваров.НаКомиссии) Тогда
				СлойНужен = 1;
			КонецЕсли;
		КонецЕсли;
		
 	Иначе // анализировать все строки табличной части
		ВыбратьСтроки();
		Пока ПолучитьСтроку() = 1 Цикл
			Если (Товар.ТипНоменклатуры = Перечисление.ТипыНоменклатуры.Товар) 
			   и (Товар.ТипТовара = Перечисление.ТипыТоваров.НаКомиссии) Тогда
			   	СлойНужен = 1;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если СлойНужен = 1 Тогда
		Форма.ИспользоватьСлой("Комиссия", 1);
		
	ИначеЕсли РежимПроверки = 1 Тогда 
		// если проверяются все строки, то однозначно, если
		// в строках нет комиссионных товаров, от и слой не нужен
		Форма.ИспользоватьСлой("Комиссия", 0);
		
	КонецЕсли;
	
КонецПроцедуры // УправлениеВидимостьюСлояКомиссия()

//******************************************************************************
// УправлениеВидимостьюРеквизитов()
//
// Параметры:
//  Нет.
//
// Вызывается из формул элементов диалога:
//  Нет.
//
// Описание:
//  Здесь описывается процедура.
//
Процедура УправлениеВидимостьюРеквизитов(НомерЗакладки)
	
	// Управление реквизитами табличной части.
	ВидимостьПервойГруппыРеквизитов = 0;
	ВидимостьВторойГруппыРеквизитов = 0;
	ВидимостьТретейГруппыРеквизитов = 0;
	Если НомерЗакладки <= 1 Тогда
		ВидимостьПервойГруппыРеквизитов = 1;
		
	ИначеЕсли НомерЗакладки = 2 Тогда
		ВидимостьВторойГруппыРеквизитов = 1;
		
	ИначеЕсли НомерЗакладки = 3 Тогда
		ВидимостьТретейГруппыРеквизитов = 1;
	КонецЕсли;	
	    
	// первая группа реквизитов
	Форма.Цена.Видимость(ВидимостьПервойГруппыРеквизитов);
	Форма.Сумма.Видимость(ВидимостьПервойГруппыРеквизитов);
	Форма.НДС.Видимость(глПризнакУчетаНалога(Контекст, "НДС")*ВидимостьПервойГруппыРеквизитов);
	Форма.НП.Видимость(глПризнакУчетаНалога(Контекст, "НП")*ВидимостьПервойГруппыРеквизитов);
	Форма.Всего.Видимость(ВидимостьПервойГруппыРеквизитов);
	УправлениеВидимостьюГТД(1);
	                           
	// вторая группа реквизитов
	Форма.Стоимость.Видимость(ВидимостьВторойГруппыРеквизитов);
	Форма.ВсегоСтоимость.Видимость(ВидимостьВторойГруппыРеквизитов);
	
	// третья группа реквизитов
	Форма.СтоимостьНУ.Видимость(ВидимостьТретейГруппыРеквизитов);
	Форма.ВсегоСтоимостьНУ.Видимость(ВидимостьТретейГруппыРеквизитов);
	                                             
	ВидимостьДопСтроки = 0;
	Если Форма.ИспользоватьЗакладки() = 1 Тогда
		Если Форма.Закладки.ТекущаяСтрока() <> 1 Тогда
			ВидимостьДопСтроки = 1;
		КонецЕсли;
	КонецЕсли;
	Форма.ДополнительнаяИнформационнаяСтрока.Видимость(ВидимостьДопСтроки);
	
	УправлениеКурсом();
	
КонецПроцедуры // УправлениеВидимостьюРеквизитов()

//******************************************************************************
// ИнформацияОДоговоре()
//
// Возвращаемое значение:
//  Строка - Наименование валюты договора и валюты оплаты.
//
// Вызывается из формул элементов диалога:
//  Текст "ИнформацияОДоговоре".
//
// Описание:
//  Формирует строку, содержащую наименование валюты договора и валюты оплаты.
//
Функция ИнформацияОДоговоре() 
	
	Стр = "";
	Если Договор.Выбран() = 1 Тогда
		Если Договор.ВалютаДоговора.Выбран() = 1 Тогда
		    Стр = "Валюта договора: " + Договор.ВалютаДоговора;
		КонецЕсли;	    
	КонецЕсли;
	Возврат Стр;
	
КонецФункции // ИнформацияОДоговоре()

//******************************************************************************
// ПредставлениеКомитента()
//
// Вызывается из формул элементов диалога:
//  Текст "ПредставлениеКомитента"
//
// Возвращаемое значение:
//  Стрка - наименование комитента.
//
// Описание:
//  Формурует строку с наименованием комитента, поставившего товар.
//
Функция ПредставлениеКомитента()
	
	Перем Предст;

    Если Комитент.Выбран() = 1 Тогда
    	Предст = СокрЛП(Комитент.Наименование);
	Иначе
    	Предст = "<Автовыбор>";
	КонецЕсли;
	Возврат Предст;
	
КонецФункции // ПредставлениеКомитента()

//******************************************************************************
// ПредставлениеДоговораКомиссии()
//
// Вызывается из формул элементов диалога:
//  Текст "ПредставлениеДоговораКомиссии"
//
// Возвращаемое значение:
//  Стрка - наименование договора.
//
// Описание:
//  Формурует строку с наименованием договора с комитентом, по которому был
// поставлен товар.
//
Функция ПредставлениеДоговораКомиссии()
	
	Перем Предст;

    Если ДоговорКомиссии.Выбран() = 1 Тогда
    	Предст = СокрЛП(ДоговорКомиссии.Наименование);
	Иначе
    	Предст = "<Автовыбор>";
	КонецЕсли;
	Возврат Предст;
	
КонецФункции // ПредставлениеДоговораКомиссии()

//******************************************************************************
// ВыборКомитента()
//
// Вызывается из формул элементов диалога:
//  Кнопка "КнопкаВыбораКомитнета"
//
// Описание:
//  Устанавливает значение реквизита табличной части "Комитент".
//
Процедура ВыборКомитента()
	
	Если Товар.Выбран() = 0 Тогда
	ИначеЕсли Товар.ТипНоменклатуры.Выбран() = 0 Тогда
	ИначеЕсли Товар.ТипНоменклатуры <> Перечисление.ТипыНоменклатуры.Товар Тогда
	ИначеЕсли Товар.ТипТовара.Выбран() = 0 Тогда
	ИначеЕсли Товар.ТипТовара = Перечисление.ТипыТоваров.НаКомиссии Тогда
		Если КодВидаПоступления = 3 Тогда 
			ПунктМеню = 1;
			Меню = СоздатьОбъект("СписокЗначений");
			Меню.ДобавитьЗначение("Автовыбор при проведении");
			Меню.ДобавитьЗначение("Подобрать по бух.итогам");
			Меню.ДобавитьЗначение("Выбрать из справочника");
			Меню.ВыбратьЗначение(,,ПунктМеню,,1);
			
		Иначе
			ПунктМеню = 3;
		КонецЕсли;
		
		Если ПунктМеню = 1 Тогда
			Комитент = "";
			ДоговорКомиссии = "";

		ИначеЕсли ПунктМеню = 2 Тогда
			Если ДатаДок > КонецРассчитанногоПериодаБИ() Тогда
				Предупреждение("На " + ДатаДок + " бухгалтерские итоги не рассчитаны!
								|Расчет итогов выполняется в режиме
								|""Операции - Управление бухгалтерскими итогами"".");
				
			ИначеЕсли (Выбран() = 0) или (Модифицированность() = 1) Тогда
				Предупреждение("Для подбора комитента по данным бухгалтерского учета
								|необходимо записать документ."); 
			
			Иначе
				БухИт = СоздатьОбъект("БухгалтерскиеИтоги"); БухИт.ИспользоватьРазделительУчета(ЮрЛицо);
				ТаблицаКомитентов = СоздатьОбъект("ТаблицаЗначений");
				ТаблицаКомитентов.НоваяКолонка("Комитент",,,,,20);
				ТаблицаКомитентов.НоваяКолонка("ДоговорКомиссии",,,,"Договор",20);
				ТаблицаКомитентов.НоваяКолонка("Остаток",,,,,10,"Ч10.2.,",2);
				ТаблицаКомитентов.НоваяКолонка("Сумма",,,,,15,"Ч15.2-,",2);
				ТаблицаКомитентов.НоваяКолонка("Цена",,,,,10,"Ч10.2-,",2);
				
				БухИт.ИспользоватьСубконто(ВидыСубконто.Номенклатура, Товар, 2);
				БухИт.ИспользоватьСубконто(ВидыСубконто.ДоговорыС_Комитентами);
				БухИт.ИспользоватьСубконто(ВидыСубконто.ДоговорыС_Комиссионерами, Договор, 2);
				БухИт.ВыполнитьЗапрос(ТекущийДокумент(),,"КМС");
				БухИт.ВыбратьСубконто(ВидыСубконто.ДоговорыС_Комитентами);
				Пока БухИт.ПолучитьСубконто(ВидыСубконто.ДоговорыС_Комитентами) = 1 Цикл
					ТаблицаКомитентов.НоваяСтрока();
					ТаблицаКомитентов.Комитент = БухИт.Субконто(ВидыСубконто.ДоговорыС_Комитентами).Владелец;
					ТаблицаКомитентов.ДоговорКомиссии = БухИт.Субконто(ВидыСубконто.ДоговорыС_Комитентами);
					ТаблицаКомитентов.Остаток = БухИт.СНД("К");
					ТаблицаКомитентов.Сумма = БухИт.СНД("С");
					Если ТаблицаКомитентов.Остаток = 0 Тогда
						ТаблицаКомитентов.Цена = 0;
					Иначе
						ТаблицаКомитентов.Цена = ТаблицаКомитентов.Сумма / ТаблицаКомитентов.Остаток;
					КонецЕсли;
				КонецЦикла;
				Позиция = 1;
				Если ТаблицаКомитентов.ВыбратьСтроку(Позиция,"Выберите комитента") = 0 Тогда
				ИначеЕсли Позиция > 0 Тогда
					Комитент = ТаблицаКомитентов.ПолучитьЗначение(Позиция,"Комитент");
					Дог = ТаблицаКомитентов.ПолучитьЗначение(Позиция,"ДоговорКомиссии");
					Если ТипЗначенияСтр(Дог) = "Справочник" Тогда
						ДоговорКомиссии = Дог;
					Иначе
						ДоговорКомиссии = "";
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;

		Иначе //Если ПунктМеню = 3 Тогда
			СпрКонтр = СоздатьОбъект("Справочник.Контрагенты");
			Если СпрКонтр.Выбрать("Выберите комитента",) = 1 Тогда
				Комитент = СпрКонтр.ТекущийЭлемент();
				глПриВыбореКонтрагента(Комитент,ДоговорКомиссии);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ВыборКомитента()

//******************************************************************************
// ВыборДоговораКомиссии()
//
// Вызывается из формул элементов диалога:
//  Кнопка "КнопкаВыбораДоговораКомиссии"
//
// Описание:
//  Устанавливает значение реквизита табличной части "ДоговорКомиссии".
//
Процедура ВыборДоговораКомиссии()
	
	Если Товар.Выбран() = 0 Тогда
	ИначеЕсли Товар.ТипНоменклатуры.Выбран() = 0 Тогда
	ИначеЕсли Товар.ТипНоменклатуры <> Перечисление.ТипыНоменклатуры.Товар Тогда
	ИначеЕсли Товар.ТипТовара.Выбран() = 0 Тогда
	ИначеЕсли Товар.ТипТовара = Перечисление.ТипыТоваров.НаКомиссии Тогда
		Если КодВидаПоступления = 3 Тогда
			ПунктМеню = 1;
			Меню = СоздатьОбъект("СписокЗначений");
			Меню.ДобавитьЗначение("Автовыбор при проведении");
			Меню.ДобавитьЗначение("Подобрать по бух.итогам");
			Меню.ДобавитьЗначение("Выбрать из справочника");
			Меню.ВыбратьЗначение(,,ПунктМеню,,1);
			
		Иначе
			ПунктМеню = 3;
		КонецЕсли;
		
		Если ПунктМеню = 1 Тогда
			ДоговорКомиссии = "";

		ИначеЕсли ПунктМеню = 2 Тогда
			Если ДатаДок > КонецРассчитанногоПериодаБИ() Тогда
				Предупреждение("На " + ДатаДок + " бухгалтерские итоги не рассчитаны!
								|Расчет итогов выполняется в режиме
								|""Операции - Управление бухгалтерскими итогами"".");
				
			ИначеЕсли (Выбран() = 0) или (Модифицированность() = 1) Тогда
				Предупреждение("Для подбора договора комиссии по данным бухгалтерского учета
								|необходимо записать документ."); 
			
			Иначе
				БухИт = СоздатьОбъект("БухгалтерскиеИтоги"); БухИт.ИспользоватьРазделительУчета(ЮрЛицо);
				ТаблицаКомитентов = СоздатьОбъект("ТаблицаЗначений");
				Если Комитент.Выбран() = 0 Тогда
					ТаблицаКомитентов.НоваяКолонка("Комитент",,,,,20);
				КонецЕсли;
				ТаблицаКомитентов.НоваяКолонка("ДоговорКомиссии",,,,"Договор",20);
				ТаблицаКомитентов.НоваяКолонка("Остаток",,,,,10,"Ч10.2.,",2);
				ТаблицаКомитентов.НоваяКолонка("Сумма",,,,,15,"Ч15.2-,",2);
				ТаблицаКомитентов.НоваяКолонка("Цена",,,,,10,"Ч10.2-,",2);
				
				Если Комитент.Выбран() = 0 Тогда
					БухИт.ИспользоватьСубконто(ВидыСубконто.Номенклатура, Товар, 2);
					БухИт.ИспользоватьСубконто(ВидыСубконто.ДоговорыС_Комитентами);
					БухИт.ИспользоватьСубконто(ВидыСубконто.ДоговорыС_Комиссионерами, Договор, 2);
					БухИт.ВыполнитьЗапрос(ТекущийДокумент(),,"КМС");
					БухИт.ВыбратьСубконто(ВидыСубконто.ДоговорыС_Комитентами);
					Пока БухИт.ПолучитьСубконто(ВидыСубконто.ДоговорыС_Комитентами) = 1 Цикл
						ТаблицаКомитентов.НоваяСтрока();
						ТаблицаКомитентов.Комитент = БухИт.Субконто(ВидыСубконто.ДоговорыС_Комитентами).Владелец;
						ТаблицаКомитентов.ДоговорКомиссии = "Всего:";
						ТаблицаКомитентов.Остаток = БухИт.СНД("К");
						ТаблицаКомитентов.Сумма = БухИт.СНД("С");
						Если ТаблицаКомитентов.Остаток = 0 Тогда
							ТаблицаКомитентов.Цена = 0;
						Иначе
							ТаблицаКомитентов.Цена = ТаблицаКомитентов.Сумма / ТаблицаКомитентов.Остаток;
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
				Позиция = 1;
				Если ТаблицаКомитентов.ВыбратьСтроку(Позиция,"Выберите договор комиссии") = 0 Тогда
				ИначеЕсли Позиция > 0 Тогда
					Если Комитент.Выбран() = 0 Тогда
						Комитент = ТаблицаКомитентов.ПолучитьЗначение(Позиция,"Комитент");
					КонецЕсли;
					Дог = ТаблицаКомитентов.ПолучитьЗначение(Позиция,"ДоговорКомиссии");
					Если ТипЗначенияСтр(Дог) = "Справочник" Тогда
						ДоговорКомиссии = Дог;
					Иначе
						ДоговорКомиссии = "";
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;

		Иначе //Если ПунктМеню = 3 Тогда
			Если Комитент.Выбран() = 0 Тогда
				СпрКонтр = СоздатьОбъект("Справочник.Контрагенты");
				Если СпрКонтр.Выбрать("Выберите комитента",) = 1 Тогда
					Комитент = СпрКонтр.ТекущийЭлемент();
					глПриВыбореКонтрагента(Комитент,ДоговорКомиссии);
				КонецЕсли;
			КонецЕсли;
			Если Комитент.Выбран() = 1 Тогда
				СпрДог = СоздатьОбъект("Справочник.Договоры");
				СпрДог.ИспользоватьВладельца(Комитент);
				Если СпрДог.Выбрать("Выберите договор комиссии",) = 1 Тогда
					ДоговорКомиссии = СпрДог.ТекущийЭлемент();
					глПриВыбореДоговора(Комитент,ДоговорКомиссии);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ВыборДоговораКомиссии()

//_____________________________________________________________________________
Функция ИтоговаяСтрока()
	
	ТипИтогов = 1;
	Если КодВидаПоступления = 3 Тогда // возврат товаров отгруженных без перехода права собственности
	    ТипИтогов = 0;
		
	ИначеЕсли Форма.ИспользоватьЗакладки() = 1 Тогда
		Если Форма.Закладки.ТекущаяСтрока() = 2 Тогда
		    ТипИтогов = 2; // отражать в итоговой строке себестоимость МПЗ по данным бух. учета
			
		ИначеЕсли Форма.Закладки.ТекущаяСтрока() = 3 Тогда
			ТипИтогов = 3; // отражать в итоговой строке себестоимость МПЗ по данным нало. учета
		КонецЕсли;
	КонецЕсли;
	
	Если ТипИтогов = 0 Тогда
		Стр = "";
		ДополнительнаяИнформационнаяСтрока = "";
		
	ИначеЕсли ТипИтогов = 1 Тогда
	    
		Стр = "Итого без налогов: " + СокрЛП(Формат((Итог("Всего")-Итог("НДС")-Итог("НП")),"Ч20.2-'"));
		Если Итог("НДС") = 0 Тогда
			Стр = Стр + ", без НДС";
		Иначе
			Стр = Стр + ", НДС: " + СокрЛП(Формат(Итог("НДС"),"Ч20.2-'"));
		КонецЕсли;
		Если Итог("НП") <> 0 Тогда
			Стр = Стр + ", НП: " + СокрЛП(Формат(Итог("НП"),"Ч20.2-'"));
		КонецЕсли;
		Стр = Стр + ", Всего: " + СокрЛП(Формат(Итог("Всего"),"Ч20.2-'"));
		
		ДополнительнаяИнформационнаяСтрока = "";
		
	ИначеЕсли ТипИтогов = 2 Тогда
		Стр = "Итого стоимость возвращаемых МПЗ: " + СокрЛП(Формат(Итог("ВсегоСтоимость"),"Ч20.2-'"));
		ДополнительнаяИнформационнаяСтрока = "Себестоимость возвращаемых МПЗ по данным бухгалтерского учета";
		
	Иначе                                                                                      
		Стр = "Итого стоимость возвращаемых МПЗ: " + СокрЛП(Формат(Итог("ВсегоСтоимостьНУ"),"Ч20.2-'"));
		ДополнительнаяИнформационнаяСтрока = "Себестоимость возвращаемых МПЗ по данным налогового учета";
	КонецЕсли;
	
	Возврат Стр;
КонецФункции // ИтоговаяСтрока
//_____________________________________________________________________________
Процедура РассчитатьНалоги()
	НДС = глПоказательДокумента(Контекст, "НДС");
	НП = глПоказательДокумента(Контекст, "НП");
	Всего = глПоказательДокумента(Контекст, "СуммаСНалогами");
	//Форма.НДС.Видимость(глПризнакУчетаНалога(Контекст, "НДС"));
	//Форма.НП.Видимость(глПризнакУчетаНалога(Контекст, "НП"));
КонецПроцедуры // РассчитатьНалоги
//_____________________________________________________________________________
Процедура Пересчет(ИмяРеквизита)
	Если Товар.Выбран() = 1 Тогда
		Если (ИмяРеквизита = "Товар") Тогда
			Цена = глПолучитьЦену(Контекст,Товар,ТипЦен,ДатаДок,?(Договор.Выбран() = 0,"",Договор.ВалютаДоговора),Курс);
			//глСуммаДокумента(Контекст, Товар, Товар.Себестоимость);
			Если Количество <> 0 Тогда
				Пересчет("Цена")
			КонецЕсли;
			УправлениеВидимостьюГТД();
			УправлениеВидимостьюСлояКомиссия();
			
		ИначеЕсли (ИмяРеквизита = "Количество") Тогда
			Если Сумма  = 0 Тогда
				Сумма = Цена*Количество;
				РассчитатьНалоги();
			Иначе
				Если Константа.ПриИзмененииКоличестваВПриходныхДокументах = 1 Тогда // пересчитывать сумму
					Сумма = Цена*Количество;
					РассчитатьНалоги();
				Иначе // пересчитывать цену
					Цена = ?(Количество = 0, Сумма, Сумма/Количество);
				КонецЕсли;
			КонецЕсли;
			
			Если ВсегоСтоимость  = 0 Тогда
				ВсегоСтоимость = Стоимость*Количество;
			Иначе
				Если Константа.ПриИзмененииКоличестваВПриходныхДокументах = 1 Тогда // пересчитывать сумму
					ВсегоСтоимость = Стоимость*Количество;
				Иначе // пересчитывать стоимость
					Стоимость = ?(Количество = 0, ВсегоСтоимость, ВсегоСтоимость/Количество);
				КонецЕсли;
			КонецЕсли;
			
			Если ВсегоСтоимостьНУ  = 0 Тогда
				ВсегоСтоимостьНУ = СтоимостьНУ*Количество;
			Иначе
				Если Константа.ПриИзмененииКоличестваВПриходныхДокументах = 1 Тогда // пересчитывать сумму
					ВсегоСтоимостьНУ = СтоимостьНУ*Количество;
				Иначе // пересчитывать стоимость
					СтоимостьНУ = ?(Количество = 0, ВсегоСтоимостьНУ, ВсегоСтоимостьНУ/Количество);
				КонецЕсли;
			КонецЕсли;
			
        ИначеЕсли (ИмяРеквизита = "Цена") Тогда
			Сумма = Цена*Количество;
			РассчитатьНалоги();
		ИначеЕсли (ИмяРеквизита = "Сумма") Тогда
			РассчитатьНалоги();
			Цена = ?(Количество = 0, Сумма, Сумма/Количество);
		ИначеЕсли (ИмяРеквизита = "НДС") или (ИмяРеквизита = "НП") Тогда
			Всего = глПоказательДокумента(Контекст, "СуммаСНалогами");
		ИначеЕсли ИмяРеквизита = "Стоимость" Тогда
			ВсегоСтоимость = Стоимость*Количество;
		ИначеЕсли ИмяРеквизита = "ВсегоСтоимость" Тогда
			Стоимость = ?(Количество = 0, ВсегоСтоимость, ВсегоСтоимость/Количество);
		ИначеЕсли ИмяРеквизита = "СтоимостьНУ" Тогда
			ВсегоСтоимостьНУ = СтоимостьНУ*Количество;
		ИначеЕсли ИмяРеквизита = "ВсегоСтоимостьНУ" Тогда
			СтоимостьНУ = ?(Количество = 0, ВсегоСтоимостьНУ, ВсегоСтоимостьНУ/Количество);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры //Пересчет  

//******************************************************************************
Процедура ПересчитатьЦены()
	ВыбратьСтроки();
	Пока ПолучитьСтроку()=1 Цикл
		Пересчет("Товар");
	КонецЦикла;
КонецПроцедуры

//*****************************************************************************
// ПриВыбореДоговора()
//
// Вызывается из формул элементов диалога:
//  Поле ввода "Договор"
// 
// Описание:
//  Проверяет соответствие договора выбранному контрагенту.
//
Процедура ПриВыбореДоговора()

	глПриВыбореДоговора(Контрагент, Договор);
	УправлениеКурсом(1); // при изменении договора могла измениться валюта
	
	Если Договор <> ТекДоговор Тогда
		Если (Договор.Выбран() = 1) и (Договор.АвтоОбработкаНДС = 0) и (СчетФактураПредъявлен = 1) и (ДатаДок>='01.01.2006') Тогда
		    ВключатьВКнигуПокупок = 1;
			
		Иначе
			ВключатьВКнигуПокупок = 0;
		КонецЕсли;
	Иначе
		
		Если (Договор.АвтоОбработкаНДС = 1) и (ВключатьВКнигуПокупок = 1) Тогда
			ВключатьВКнигуПокупок = 0;
		КонецЕсли;
		
	КонецЕсли;
	
	ТекДоговор = Договор;
	
КонецПроцедуры // ПриВыбореДоговора()

//*****************************************************************************
// ПриВыбореКонтрагента()
//
// Вызывается из формул элементов диалога:
//  Поле ввода "Контрагент".
//
// Описание:
//  Проверяет соответствие договора выбранному контрагенту.
//
Процедура ПриВыбореКонтрагента()
	
	глПриВыбореКонтрагента(Контрагент, Договор);
	ПриВыбореДоговора();
	
КонецПроцедуры // ПриВыбореКонтрагента()

//******************************************************************************
// ПриВыбореВидаПоступления()
//
// Вызывается из формул элементов диалога:
//  Поле со списком - "СписокВидовПоступления".
//
// Описание:
//  Управляет видимостью реквизитов диалога в
//  зависимости от выбранного типа поступления товаров.
//
Процедура ПриВыбореВидаПоступления(РежимПроверки = 0)
	
	Если ВидПоступления > 10 Тогда
		Если (ВидПоступления <> СписокВидовПоступления.ТекущаяСтрока()+10) Тогда
			ВидПоступления = СписокВидовПоступления.ТекущаяСтрока()+10;
		КонецЕсли;
		КодВидаПоступления = ПолучитьКодВидаПоступления();
		
	Иначе // до редакции 4.5
		Если (ВидПоступления <> СписокВидовПоступления.ТекущаяСтрока()) Тогда
			ВидПоступления = СписокВидовПоступления.ТекущаяСтрока();
			КодВидаПоступления = ВидПоступления;
		КонецЕсли;
	КонецЕсли;
	
	Если ПустоеЗначение(ДокументОснование) = 1 Тогда
		
	ИначеЕсли КодВидаПоступления = 3 Тогда // возврат отгруженного товара
		Если ДокументОснование.Вид() = "РасходнаяНакладная" Тогда
			Если (ДокументОснование.ВидОтгрузки <> 2) и (ДокументОснование.ВидОтгрузки <> 12) Тогда
				ДокументОснование = "";
			КонецЕсли;
			
		Иначе
			ДокументОснование = "";
		КонецЕсли;
		
	ИначеЕсли КодВидаПоступления = 4 Тогда // // возврат реализованных товаров на оптовый склад
		Если ДокументОснование.Вид() = "РасходнаяНакладная" Тогда
			Если (ДокументОснование.ВидОтгрузки <> 1) и (ДокументОснование.ВидОтгрузки <> 11) Тогда
				ДокументОснование = "";
			КонецЕсли;
			
		ИначеЕсли ДокументОснование.Вид() <> "РеализацияОтгруженнойПродукции" Тогда
			ДокументОснование = "";
		КонецЕсли;
		
	ИначеЕсли КодВидаПоступления = 5 Тогда // // возврат реализованных товаров в розничную торговлю
		Если ДокументОснование.Вид() <> "ПродажаВРозницу" Тогда
			ДокументОснование = "";
		КонецЕсли;
	КонецЕсли;
	
	Если КодВидаПоступления <= 2 Тогда // поступление от поставщика
		Форма.ИспользоватьЗакладки(0);
		Форма.ИспользоватьСлой("Возврат, Возврат2", 0);
		Форма.ИспользоватьСлой("Дополнительный1, Дополнительный2, Дополнительный4, Дополнительный3", 1);
				
	ИначеЕсли КодВидаПоступления = 3 Тогда // возврат отгруженного товара
		Форма.ИспользоватьЗакладки(0);
		Форма.ИспользоватьСлой("Дополнительный1, Дополнительный3, Возврат", 1);
		Форма.ИспользоватьСлой("Дополнительный2, Дополнительный4, Возврат2", 0); 		
		Форма.ПокупателемВыставляетсяСчетФактураНаВозврат.Видимость(0);		
				
		Если РежимПроверки<>1 Тогда
			НДСвключатьВСтоимость = 0;
			ДатаНомерСчетаФактуры = "";
		КонецЕсли; 
		
	Иначе // возврат реализованного товара
		Форма.ИспользоватьЗакладки(1);           
		
		Если ПокупателемВыставляетсяСчетФактураНаВозврат = 1 Тогда
			Форма.ИспользоватьСлой("Дополнительный4,Возврат2", 0);
			Форма.ИспользоватьСлой("Дополнительный1, Дополнительный2, Дополнительный3, Возврат", 1);   
		Иначе
			Форма.ИспользоватьСлой("Дополнительный2,Дополнительный4", 0);
			Форма.ИспользоватьСлой("Дополнительный1, Дополнительный3, Возврат, Возврат2", 1);   
		КонецЕсли;			
		
		Форма.Закладки.УдалитьВсе();
		Форма.Закладки.ДобавитьЗначение("Стоимость реализации");
		Форма.Закладки.ДобавитьЗначение("Себестоимость в БУ");
		Форма.Закладки.ДобавитьЗначение("Себестоимость в НУ");
		
		Если РежимПроверки<>1 Тогда						
			НДСвключатьВСтоимость = 0;
		КонецЕсли;		

	КонецЕсли;
	
	Если (Константа.ИспользоватьТипыЦен = Нет) или (КодВидаПоступления = 3) Тогда
	    Форма.ПодписьТипаЦен.Видимость(0);
		Форма.ТипЦен.Видимость(0);
	Иначе
		Форма.ПодписьТипаЦен.Видимость(1);
		Форма.ТипЦен.Видимость(1);
	КонецЕсли;
	
	Если РежимПроверки = 0 Тогда
		Если КодВидаПоступления <= 2 Тогда
			Если (Договор.Выбран() = 1) и (Договор.АвтоОбработкаНДС = 0) и (СчетФактураПредъявлен = 1) и (ДатаДок>='01.01.2006') Тогда
				ВключатьВКнигуПокупок = 1;
				
			Иначе
				ВключатьВКнигуПокупок = 0;
			КонецЕсли;
			
		Иначе
			Если  ВариантОтраженияВозврата = 0 Тогда
			    ВключатьВКнигуПокупок = 0;
			КонецЕсли;			
		КонецЕсли;
	КонецЕсли;
	
	УправлениеВидимостьюРеквизитов(1);
	УправлениеВидимостьюСлояКомиссия(1);
	
КонецПроцедуры // ПриВыбореВидаПоступления()

//*****************************************************************************
// ПриВыбореВариантаРасчетаНалогов()
//
// Вызывается из формул элементов диалога:
//  Поле ввода "ВариантРасчетаНалогов".
//
// Описание:
//  Пересчитывает суммы в документе при смене варианта расчета налогов.
//
Процедура ПриВыбореВариантаРасчетаНалогов()
	
	Если ВариантРасчетаНалогов = ТекущийВариантРасчетаНалогов Тогда
		Возврат
	КонецЕсли;
	
	Если КоличествоСтрок() > 0 Тогда
		Ответ = Вопрос("Пересчитать суммы налогов в существующих строках
		            |табличной части (суммы налогов будут
		            |обновлены в соответствии с выбранным вариантом)?", "Да+Нет+Отмена");
		Если Ответ = "Да" Тогда
			ОбщееКоличество = КоличествоСтрок();
			ВыбратьСтроки();
			Пока ПолучитьСтроку() = 1 Цикл
				РассчитатьНалоги();
				Состояние("Обработано: " + Окр(НомерСтроки/ОбщееКоличество*100, 0, 1) + "%");
			КонецЦикла;
			
		ИначеЕсли Ответ = "Отмена" Тогда
			ВариантРасчетаНалогов = ТекущийВариантРасчетаНалогов;
		КонецЕсли;
	КонецЕсли;
	УчитыватьНП = глПризнакУчетаНалога(Контекст, "НП");
	УчитыватьНДС = глПризнакУчетаНалога(Контекст, "НДС");
	ВыбратьСтроки();
	Пока ПолучитьСтроку() = 1 Цикл
		НДС = ?(УчитыватьНДС = 0, 0, НДС);
		НП = ?(УчитыватьНП = 0, 0, НП);
	КонецЦикла;
	Форма.НДС.Видимость(УчитыватьНДС);
	Форма.НП.Видимость(УчитыватьНП);
	
КонецПроцедуры // ПриВыбореВариантаРасчетаНалогов()

//******************************************************************************
Процедура ПриВыбореВариантаЗачетаАванса()
	ЗачитыватьАванс = ВариантЗачетаАванса.ПолучитьЗначение(ВариантЗачетаАванса.ТекущаяСтрока());
КонецПроцедуры //ПриВыбореВариантаЗачетаАванса

//******************************************************************************
Процедура Подбор()
	
	Если КодВидаПоступления > 2 Тогда // возврат
		//ОткрытьПодбор("Справочник.Номенклатура","Продажа");
		КонтекстФормыПодбора = СоздатьОбъект("СписокЗначений");
		КонтекстФормыПодбора.ДобавитьЗначение(Контекст, "Контекст");
		КонтекстФормыПодбора.ДобавитьЗначение(МестоХранения, "МестоХранения");
		КонтекстФормыПодбора.ДобавитьЗначение(Комитент, "Комитент");
		КонтекстФормыПодбора.ДобавитьЗначение(ДоговорКомиссии, "ДоговорКомиссии");
		ОткрытьПодбор("Справочник.Номенклатура", "ДляПодбора", КонтекстФормыПодбора);
	Иначе
		//ОткрытьПодбор("Справочник.Номенклатура","Покупка");
		КонтекстФормыПодбора = СоздатьОбъект("СписокЗначений");
		КонтекстФормыПодбора.ДобавитьЗначение(Контекст, "Контекст");
		КонтекстФормыПодбора.ДобавитьЗначение(МестоХранения, "МестоХранения");
		КонтекстФормыПодбора.ДобавитьЗначение(Комитент, "Комитент");
		КонтекстФормыПодбора.ДобавитьЗначение(ДоговорКомиссии, "ДоговорКомиссии");
		КонтекстФормыПодбора.ДобавитьЗначение(Перечисление.ТипыНоменклатуры.Товар, "ОтборПоТипу");
		ОткрытьПодбор("Справочник.Номенклатура", "ДляПодбора", КонтекстФормыПодбора);
	КонецЕсли;
	
КонецПроцедуры

//******************************************************************************
Процедура ОбработкаПодбора(ВыбрТовар, Конт)
	
	Если КодВидаПоступления <= 2 Тогда // поступление от поставщика
		Если ВыбрТовар.ТипНоменклатуры <> Перечисление.ТипыНоменклатуры.Товар Тогда
		    Предупреждение("Выбранная номенклатурная единица не является покупным товаром.");
			Возврат;
		КонецЕсли;
		
	Иначе // возврат
		Если (ВыбрТовар.ТипНоменклатуры <> Перечисление.ТипыНоменклатуры.Товар)
	       и (ВыбрТовар.ТипНоменклатуры <> Перечисление.ТипыНоменклатуры.Продукция)
	       и (ВыбрТовар.ТипНоменклатуры <> Перечисление.ТипыНоменклатуры.Полуфабрикат) Тогда
		   	Предупреждение("Выбранная номенклатурная единица не является покупным товаром, полуфабрикатом или продукцией.");
		   	Возврат;
		КонецЕсли;	
    КонецЕсли;
	
	Кол = 1;
	Если ВвестиЧисло(Кол, "Введите количество", 14, 3) = 0 Тогда
		Возврат;
	ИначеЕсли Кол = 0 Тогда
		Возврат;
	КонецЕсли;
	Если Константа.ИспользоватьТипыЦен = Нет Тогда
		Сум = глПолучитьЦену(Контекст,ВыбрТовар,ТипЦен,ДатаДок,?(Договор.Выбран() = 0,"",Договор.ВалютаДоговора),Курс)*Кол;
		Если ВвестиЧисло(Сум, "Введите сумму", 15, 2) = 0 Тогда
			Возврат;
		ИначеЕсли Сум = 0 Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
    НоваяСтрока();
	Товар = ВыбрТовар;
	Количество = Кол;
	Если Константа.ИспользоватьТипыЦен = Нет Тогда
		Сумма = Сум;
		АктивизироватьСтроку();
		Пересчет("Сумма");
	Иначе
		АктивизироватьСтроку();
		Пересчет("Товар");
		Цена = глПолучитьЦену(Контекст,Товар,Конт.ТипЦен,ДатаДок,?(Договор.Выбран() = 0,"",Договор.ВалютаДоговора),Курс);
		Пересчет("Цена");
	КонецЕсли;
	
	УправлениеВидимостьюГТД();
	
КонецПроцедуры
//_____________________________________________________________________________
Процедура ПриПредъявленииСчетаФактуры()
	Если СчетФактураПредъявлен = 1 Тогда
		Форма.ДатаНомерСчетаФактуры.Доступность(1);
	Иначе
		Форма.ДатаНомерСчетаФактуры.Доступность(0);
		ДатаНомерСчетаФактуры = "";
	КонецЕсли;
	УправлениеВидимостьюГТД(1);
	
	Если (Договор.Выбран() = 1) и (Договор.АвтоОбработкаНДС = 0) и (СчетФактураПредъявлен = 1) и (ДатаДок>='01.01.2006') Тогда
		ВключатьВКнигуПокупок = 1;
		Форма.ВключатьВКнигуПокупок.Видимость(1);
	Иначе
		ВключатьВКнигуПокупок = 0;
		Форма.ВключатьВКнигуПокупок.Видимость(0);
	КонецЕсли;

	
КонецПроцедуры 

//******************************************************************************
//ПриВыбореВариантаОтраженияВозврата(Режим) 
//Режим - 0 - перерисовываем форму, 1 - изменение флага, 2 - выбор значения из списка
//
Процедура ПриВыбореВариантаОтраженияВозврата(Режим = 0) 
	
	Если Режим = 2 Тогда
		ВариантОтраженияВозврата = СписокВариантовОтраженияВозврата.ПолучитьЗначение(СписокВариантовОтраженияВозврата.ТекущаяСтрока());
	КонецЕсли;
	
	Если Режим = 1 Тогда                                          		
		Если ПокупателемВыставляетсяСчетФактураНаВозврат = 0 Тогда			
			ДатаНомерСчетаФактуры = "";
			СчетФактураПредъявлен = 0;
		Иначе
			ВариантОтраженияВозврата = 1;
			СчетФактураПредъявлен = 1;
		КонецЕсли;
		СписокВариантовОтраженияВозврата.ТекущаяСтрока(СписокВариантовОтраженияВозврата.НайтиЗначение(ВариантОтраженияВозврата));
		ПриПредъявленииСчетаФактуры(); 
	КонецЕсли;
	
	ПриВыбореВидаПоступления();
	УправлениеВидимостьюРеквизитов(1);

КонецПроцедуры    

//*****************************************************************************
// ЗаполнитьНаОсновании(ДокОсн)
//
// Параметры:
//  Нет.
//
// Возвращаемое значение:
//  Число  - 1 - реквизиты заполнены, 0 - не заполнены.
//
// Вызывается из формул элементов диалога:
//  Кнопка "КнопкаЗаполнить".
//
// Описание:
//  Устанавливает значения реквизитов документа в зависимости от значений
//  реквизитов документа основания.
//
Функция ЗаполнитьНаОсновании()
	
	Если ПустоеЗначение(ДокументОснование) = 1 Тогда
	    Предупреждение("Выберите документ, которым была оформлена
		               |ранее отгрузка возвращаемого товара!");
		Возврат 0;
		
	ИначеЕсли
		Вопрос("Документ будет  заполнен на основании
		       |выбранного документа. Продолжить?", "Да+Нет" ) <> "Да" Тогда
					
		Возврат 0;
	КонецЕсли;
	
	// Заполненеие шапки.
	Если ДокументОснование.Вид() <> "РеализацияОтгруженнойПродукции" Тогда
		МестоХранения = ДокументОснование.МестоХранения;    
	КонецЕсли;
	
	Если ДокументОснование.Вид() <> "ПродажаВРозницу" Тогда
		Контрагент    = ДокументОснование.Контрагент;
		Договор       = ДокументОснование.Договор;
		ПриВыбореДоговора();
		Курс          = ДокументОснование.Курс;
		
	Иначе
		Если ВидПоступления > 10 Тогда
			СписокВидовПоступления.ТекущаяСтрока(3);
			КодВидаПоступления = ПолучитьКодВидаПоступления();
		Иначе
			СписокВидовПоступления.ТекущаяСтрока(5);
		КонецЕсли;
		
	КонецЕсли;
	ТипЦен = ДокументОснование.ТипЦен;
	ВариантРасчетаНалогов = ДокументОснование.ВариантРасчетаНалогов;
	
	Если Форма.ИспользоватьЗакладки() = 1 Тогда
		УправлениеВидимостьюРеквизитов(Форма.Закладки.ТекущаяСтрока());
	КонецЕсли;
	
	// Заполнение табличной части.
	УдалитьСтроки();
	
	ТаблицаДокумента = СоздатьОбъект("ТаблицаЗначений");
	ДокументОснование.ВыгрузитьТабличнуюЧасть(ТаблицаДокумента, "Товар, Количество, Сумма, НДС, НП, Всего");
	
	Если ДокументОснование.Проведен() = 0 Тогда
		ЗагрузитьТабличнуюЧасть(ТаблицаДокумента);
	    Предупреждение("Документ, которым была оформлена ранее
		               |отгрузка возвращаемого товара не проведен,
					   |по этой причине себестоимотсь товара необходимо
					   |указать вручную");
					   
	Иначе
		
		Если КодВидаПоступления >= 4 Тогда // возврат реализованных товаров
			СчетКомиссионныхТоваров = СчетПоКоду("004");
			
		Иначе // возврат отгруженных товаров
			СчетКомиссионныхТоваров = СчетПоКоду("КМС");
		КонецЕсли;
		
		БухИт = СоздатьОбъект("БухгалтерскиеИтоги"); БухИт.ИспользоватьРазделительУчета(ЮрЛицо);
		БухИт.ИспользоватьСубконто(ВидыСубконто.Номенклатура);
		БухИт.ВыполнитьЗапрос(ДокументОснование, ДокументОснование, "21, 41, 43, 45, Н02.02, Н02.03, Н02.04, Н02.07",,,,, "С");
		                                                      
		БухИтКомис = СоздатьОбъект("БухгалтерскиеИтоги"); БухИтКомис.ИспользоватьРазделительУчета(ЮрЛицо);
		БухИтКомис.ИспользоватьСубконто(ВидыСубконто.Номенклатура);
		БухИтКомис.ВыполнитьЗапрос(ДокументОснование, ДокументОснование, СчетКомиссионныхТоваров,,,, "Проводка", "СК");
		
		ТаблицаДокумента.НоваяКолонка("ВсегоСтоимость", "Число");
		ТаблицаДокумента.НоваяКолонка("ВсегоСтоимостьНУ", "Число");
		ТаблицаДокумента.НоваяКолонка("Комитент");
		ТаблицаДокумента.НоваяКолонка("ДоговорКомиссии");
		ТаблицаДокумента.НоваяКолонка("СтрокуНеУчитывать", "Число", 1);
		
		ТаблицаКомиссионныхТоваров = СоздатьОбъект("ТаблицаЗначений");
		ТаблицаКомиссионныхТоваров.НоваяКолонка("Товар");
		ТаблицаКомиссионныхТоваров.НоваяКолонка("Количество");
		ТаблицаКомиссионныхТоваров.НоваяКолонка("Сумма", "Число");
		ТаблицаКомиссионныхТоваров.НоваяКолонка("НДС", "Число");
		ТаблицаКомиссионныхТоваров.НоваяКолонка("НП", "Число");
		ТаблицаКомиссионныхТоваров.НоваяКолонка("Всего", "Число");
		ТаблицаКомиссионныхТоваров.НоваяКолонка("ВсегоСтоимость", "Число");
		ТаблицаКомиссионныхТоваров.НоваяКолонка("Комитент");
		ТаблицаКомиссионныхТоваров.НоваяКолонка("ДоговорКомиссии");
		
		// Рассчитаем себестоимость возвращаемых товаров
		// по проводкам сформированным документом реализации.
		// По коммисионным товарам создадим отдельную таблицу
		// в которой будет хранится информация о комитенте и
		// догворе с ним.
		ТаблицаДокумента.Свернуть("Товар", "Количество, Сумма, НДС, НП, Всего, ВсегоСтоимость, ВсегоСтоимостьНУ, Комитент, ДоговорКомиссии, СтрокуНеУчитывать");
		ТаблицаДокумента.ВыбратьСтроки();
		Пока ТаблицаДокумента.ПолучитьСтроку() = 1 Цикл
			АнализируемыйТовар = ТаблицаДокумента.Товар;
			Если БухИт.ПолучитьСубконто(,, АнализируемыйТовар) = 1 Тогда
				
				СебестоимостьБУ = 0; СебестоимостьНУ = 0;
				БухИт.ВыбратьСчета(, 2);
				Пока БухИт.ПолучитьСчет() = 1 Цикл
					Если Найти(БухИт.Счет.Код, "Н") = 0 Тогда // счет бухгалтерского учета
						СебестоимостьБУ = СебестоимостьБУ + БухИт.КО();
						
					Иначе // счет налогового учета
						СебестоимостьНУ = СебестоимостьНУ + БухИт.КО();
					КонецЕсли;
					
				КонецЦикла;
				ТаблицаДокумента.ВсегоСтоимость   = СебестоимостьБУ;
				ТаблицаДокумента.ВсегоСтоимостьНУ = СебестоимостьНУ;    
				
			ИначеЕсли БухИтКомис.ПолучитьСубконто(,, АнализируемыйТовар) = 1 Тогда
				                
				// Необходимо выручку по данному товару распределить
				// по комитентам и договорам комиссии, относящимся к этому товару.
				ВсегоКоличество = ?(КодВидаПоступления >= 4, БухИтКомис.КО("К"), БухИтКомис.ДО("К"));
				Если ВсегоКоличество = 0 Тогда
				 	Продолжить;
				КонецЕсли;
				ТаблицаДокумента.СтрокуНеУчитывать = 1;
				
				СуммаВпервичномДокументе = ТаблицаДокумента.Сумма;
				НДСВпервичномДокументе   = ТаблицаДокумента.НДС;
				НПВпервичномДокументе    = ТаблицаДокумента.НП;
				ВсегоВпервичномДокументе = ТаблицаДокумента.Всего;
				
				УчтеноКоличество   = 0;
				УчтенаСумма = 0;
				УчтенНДС    = 0;
				УчтенНП     = 0;
				УчтеноВсего = 0;
				БухИтКомис.ВыбратьПериоды(,);
				Пока БухИтКомис.ПолучитьПериод() = 1 Цикл
					                                                      
					Если КодВидаПоступления >= 4 Тогда // возврат реализованного товара
						Себестоимость     = БухИтКомис.КО("С");
						КоличествоСписано = БухИтКомис.КО("К");
						КомитентВпервичномДокументе        = БухИтКомис.Операция.Кредит.Контрагенты;
						ДоговорКомиссииВпервичномДокументе = БухИтКомис.Операция.Кредит.Договоры;
						
					Иначе // возврат отгруженного товара
						Себестоимость     = БухИтКомис.ДО("С");
						КоличествоСписано = БухИтКомис.ДО("К");
						ДоговорКомиссииВпервичномДокументе   = БухИтКомис.Операция.Дебет.ДоговорыС_Комитентами;
						Если ПустоеЗначение(ДоговорКомиссииВпервичномДокументе) = 0 Тогда
							КомитентВпервичномДокументе = ДоговорКомиссииВпервичномДокументе.Владелец;    
						КонецЕсли;
					КонецЕсли;
					
					УчтеноКоличество = УчтеноКоличество + КоличествоСписано;
					Коэф = УчтеноКоличество/ВсегоКоличество;
					
					ТаблицаКомиссионныхТоваров.НоваяСтрока();
					ТаблицаКомиссионныхТоваров.Товар          = АнализируемыйТовар;
					ТаблицаКомиссионныхТоваров.Количество     = КоличествоСписано;
					ТаблицаКомиссионныхТоваров.Сумма          = СуммаВпервичномДокументе*Коэф - УчтенаСумма;
					ТаблицаКомиссионныхТоваров.НДС            = НДСВпервичномДокументе*Коэф   - УчтенНДС;
					ТаблицаКомиссионныхТоваров.НП             = НПВпервичномДокументе*Коэф    - УчтенНП;
					ТаблицаКомиссионныхТоваров.Всего          = ВсегоВпервичномДокументе*Коэф - УчтеноВсего;
					ТаблицаКомиссионныхТоваров.ВсегоСтоимость = Себестоимость;
					ТаблицаКомиссионныхТоваров.Комитент       = КомитентВпервичномДокументе;
					ТаблицаКомиссионныхТоваров.ДоговорКомиссии= ДоговорКомиссииВпервичномДокументе;
					
					УчтенаСумма = УчтенаСумма + ТаблицаКомиссионныхТоваров.Сумма;
					УчтенНДС    = УчтенНДС    + ТаблицаКомиссионныхТоваров.НДС;
					УчтенНП     = УчтенНП     + ТаблицаКомиссионныхТоваров.НП;
					УчтеноВсего = УчтеноВсего + ТаблицаКомиссионныхТоваров.Всего;
				КонецЦикла;
			КонецЕсли;
		КонецЦикла;
		
		// Выгрузим получившуюся таблицу по комиссионным товарам.
		ТаблицаКомиссионныхТоваров.Свернуть("Товар, Комитент, ДоговорКомиссии", "Количество, Сумма, НДС, НП, Всего, ВсегоСтоимость, ВсегоСтоимостьНУ");
		ТаблицаКомиссионныхТоваров.ВыбратьСтроки();
		Пока ТаблицаКомиссионныхТоваров.ПолучитьСтроку() = 1 Цикл
		    НоваяСтрока();
			Товар          = ТаблицаКомиссионныхТоваров.Товар;
			Количество     = ТаблицаКомиссионныхТоваров.Количество;
			Сумма          = ТаблицаКомиссионныхТоваров.Сумма;
			Цена           = ?(Количество = 0, Сумма, Сумма/Количество);
			НДС            = ТаблицаКомиссионныхТоваров.НДС;
			НП             = ТаблицаКомиссионныхТоваров.НП;
			Всего          = ТаблицаКомиссионныхТоваров.Всего;
			Комитент       = ТаблицаКомиссионныхТоваров.Комитент;
			ДоговорКомиссии= ТаблицаКомиссионныхТоваров.ДоговорКомиссии;
			
			// себестоимость
			ВсегоСтоимость = ТаблицаКомиссионныхТоваров.ВсегоСтоимость;
			Стоимость      = ?(Количество = 0, ВсегоСтоимость, ВсегоСтоимость/Количество);
		КонецЦикла;
	
		ТаблицаДокумента.ВыбратьСтроки();
		Пока ТаблицаДокумента.ПолучитьСтроку() = 1 Цикл
			Если (ТаблицаДокумента.Товар.ТипНоменклатуры <> Перечисление.ТипыНоменклатуры.Товар)
			   и (ТаблицаДокумента.Товар.ТипНоменклатуры <> Перечисление.ТипыНоменклатуры.Продукция)
			   и (ТаблицаДокумента.Товар.ТипНоменклатуры <> Перечисление.ТипыНоменклатуры.Полуфабрикат) Тогда
				Продолжить;
				
			ИначеЕсли ТаблицаДокумента.СтрокуНеУчитывать = 1 Тогда
				Продолжить;
			КонецЕсли;
			
			НоваяСтрока();
			Товар           = ТаблицаДокумента.Товар;
			Количество      = ТаблицаДокумента.Количество;
			Сумма           = ТаблицаДокумента.Сумма;
			Цена            = ?(Количество = 0, Сумма, Сумма/Количество);
			НДС             = ТаблицаДокумента.НДС;
			НП              = ТаблицаДокумента.НП;
			Всего           = ТаблицаДокумента.Всего;
			Комитент        = ТаблицаДокумента.Комитент;
			ДоговорКомиссии = ТаблицаДокумента.ДоговорКомиссии;
			                                                                              
			// себестоимость
			ВсегоСтоимость = ТаблицаДокумента.ВсегоСтоимость;
			Стоимость      = ?(Количество = 0, ВсегоСтоимость, ВсегоСтоимость/Количество);
			                
			// себестоимость для целей налогового учета
			ВсегоСтоимостьНУ = ТаблицаДокумента.ВсегоСтоимостьНУ;
			СтоимостьНУ      = ?(Количество = 0, ВсегоСтоимостьНУ, ВсегоСтоимостьНУ/Количество);
		КонецЦикла;
	КонецЕсли;
	
	УправлениеВидимостьюСлояКомиссия(1);
	
КонецФункции // ЗаполнитьНаОсновании()

//_____________________________________________________________________________
Процедура ВводНового(Копирование) //предопределенная
	глЗаполнитьШапку(Контекст, Копирование);
	Новый = 1;
	ВерсияОбъекта = Константа.НомерРелиза;
	Если Копирование = 1 Тогда //копирование документа
	    Возврат;
	КонецЕсли;
	
	//Для ввода нового документа из журнала "Счета-фактуры выданные"
	//в качестве параметра передается контрагент.
    Если ПустоеЗначение(Форма.Параметр) = 0 Тогда
	    Контрагент = Форма.Параметр.Получить("Контрагент");
	КонецЕсли;
	
	МестоХранения = глЗначениеПоУмолчанию("ОсновнойСклад");
	ТипЦен = глЗначениеПоУмолчанию("ОсновнаяЦенаПриобретения");
	ВидПоступления = 11; //на оптовый склад
	ЗачитыватьАванс = 0;
	ВариантРасчетаНалогов = Константа.ОсновнойВариантРасчетаНалогов;
	ПокупателемВыставляетсяСчетФактураНаВозврат = 1;
	ВариантОтраженияВозврата = 1;
	Если Константа.ОрганизацияЯвляетсяПлательщикомНДС = Нет Тогда
		НДСвключатьВСтоимость = 1;
	КонецЕсли;
	СчетФактураПредъявлен=0;
КонецПроцедуры //ВводНового

//*****************************************************************************
// Предопределенная процедура
//
Процедура ПриНачалеВыбораЗначения(ЭлементДиалога, Флаг)
	
	Если ЭлементДиалога = "ВариантРасчетаНалогов" Тогда
		ТекущийВариантРасчетаНалогов = ВариантРасчетаНалогов;
		
	ИначеЕсли ЭлементДиалога = "ДокументОснование" Тогда
		
		Если КодВидаПоступления = 3 Тогда // возврат отгруженного товара
			ДокументОснование.ВидыДляВыбора("РасходнаяНакладная");
			
		ИначеЕсли КодВидаПоступления = 4 Тогда // // возврат реализованных товаров на оптовый склад
			Флаг = 0;
			
			Меню = СоздатьОбъект("СписокЗначений");
			Меню.ДобавитьЗначение("РасходнаяНакладная", "Отгрузка товаров");
			Меню.ДобавитьЗначение("РеализацияОтгруженнойПродукции", "Реализ.отгр.продукции");
		    ВидДок = ДокументОснование.Вид();
			Если Меню.ВыбратьЗначение(ВидДок,,,,2) = 1 Тогда
				Конт = ПолучитьПустоеЗначение("");
				ОткрытьФорму("Журнал.Общий", Конт);
				Конт.УстановитьОтбор(ВидДок);
				Конт.АктивизироватьОбъект(ДокументОснование);
			КонецЕсли;
			
		ИначеЕсли КодВидаПоступления = 5 Тогда // // возврат реализованных товаров в розничную продажу
			ДокументОснование.ВидыДляВыбора("ПродажаВРозницу");
		КонецЕсли;	
		
	ИначеЕсли ЭлементДиалога = "Товар" Тогда
		Если КодВидаПоступления > 2 Тогда // возврат
			Флаг = 0;
			ОткрытьФорму("Справочник.Номенклатура.Продажа");
		КонецЕсли;  
		
	КонецЕсли;
	
КонецПроцедуры // ПриНачалеВыбораЗначения()

//******************************************************************************
// Предопределенная процедура
//
Процедура ОбработкаВыбораЗначения(ВыбЗнач, ИдентЭлемДиалога, ФлагСтандОбр)
	
	Если ИдентЭлемДиалога = "Товар" Тогда
	    Если ПустоеЗначение(ВыбЗнач) = 1 Тогда
			
		ИначеЕсли КодВидаПоступления <= 2 Тогда // поступление от поставщика
			Если ВыбЗнач.ТипНоменклатуры <> Перечисление.ТипыНоменклатуры.Товар Тогда
			    Предупреждение("Выбранная номенклатурная единица не является покупным товаром.");
				ФлагСтандОбр = 0;
			КонецЕсли;
			
		Иначе // возврат
			Если (ВыбЗнач.ТипНоменклатуры <> Перечисление.ТипыНоменклатуры.Товар)
		       и (ВыбЗнач.ТипНоменклатуры <> Перечисление.ТипыНоменклатуры.Продукция)
		       и (ВыбЗнач.ТипНоменклатуры <> Перечисление.ТипыНоменклатуры.Полуфабрикат) Тогда
			   	Предупреждение("Выбранная номенклатурная единица не является покупным товаром, полуфабрикатом или продукцией.");
			   	ФлагСтандОбр = 0;
			КонецЕсли;	
	        
		КонецЕсли;
		
	ИначеЕсли ИдентЭлемДиалога = "ДокументОснование" Тогда
		
		Если ПустоеЗначение(ВыбЗнач) = 1 Тогда
			
		ИначеЕсли КодВидаПоступления = 3 Тогда // возврат отгруженного товара
			Если (ВыбЗнач.ВидОтгрузки <> 2) и (ВыбЗнач.ВидОтгрузки <> 12) Тогда
				Предупреждение("Выбранный документ не отражает отгрузку без перехода права собственности.");
			   	ФлагСтандОбр = 0;
			КонецЕсли;
			
		ИначеЕсли КодВидаПоступления = 4 Тогда // // возврат реализованных товаров на оптовый склад
			Если ВыбЗнач.Вид() <> "РасходнаяНакладная" Тогда
			ИначеЕсли (ВыбЗнач.ВидОтгрузки <> 1) и (ВыбЗнач.ВидОтгрузки <> 11) Тогда
				Предупреждение("Выбираемый документ должен отражать реализацию товаров покупателю.");
			   	ФлагСтандОбр = 0;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ОбработкаВыбораЗначения()

//*****************************************************************************
// Предопределенная процедура
// 
// Описание:
//  Не позволяет выбирать номер ГТД для не импортных товаров.
//
Процедура ПриНачалеРедактированияСтроки()
	
    Если Товар.Выбран() = 1 Тогда
		Если Товар.СтранаПроисхожд = 1 Тогда
			Форма.ГТД.Доступность(0);
		Иначе
			Форма.ГТД.Доступность(1);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ПриНачалеРедактированияСтроки()

//*****************************************************************************
// Предопределенная процедура
//
Процедура ПриВыбореЗакладки(НомерЗакладки,ЗначениеЗакладки)
	
	Если НомерЗакладки <> 1 Тогда
		Форма.ИспользоватьСлой("Основной", 2);
		
	Иначе
		ПриВыбореВидаПоступления();
	КонецЕсли;
	УправлениеВидимостьюРеквизитов(НомерЗакладки);
	
КонецПроцедуры

//*****************************************************************************
// Предопределенная процедура
//
Процедура ПриОткрытии()
	
	ПриЗаписиПерепроводить(1);
	глПроверкаРазрешенияРедактирования(Контекст);
	Если Форма.ТолькоПросмотр() = 1 Тогда
		Форма.КнопкаОК.Доступность(0);
		Форма.КнопкаПодбор.Доступность(0);
		Форма.КнопкаОчистить.Доступность(0);
		Форма.КнопкаЗаписать.Доступность(0);
	КонецЕсли;
	Если ВидПоступления > 10 Тогда
		СписокВидовПоступления.ДобавитьЗначение(11, "Поступление от поставщика");
		СписокВидовПоступления.ДобавитьЗначение(12, "Возврат ранее отгруженных (сч. 45)");
		СписокВидовПоступления.ДобавитьЗначение(13, "Возврат от покупателя");
		СписокВидовПоступления.ТекущаяСтрока(ВидПоступления - 10);
		КодВидаПоступления = ПолучитьКодВидаПоступления();
	Иначе
		СписокВидовПоступления.ДобавитьЗначение(1, "От поставщика на оптовый склад");
		СписокВидовПоступления.ДобавитьЗначение(2, "От поставщика в розничную продажу");
		СписокВидовПоступления.ДобавитьЗначение(3, "Возврат ранее отгруженных (сч. 45)");
		СписокВидовПоступления.ДобавитьЗначение(4, "Возврат от покупателя на опт. склад");
		СписокВидовПоступления.ДобавитьЗначение(5, "Возврат от покупателя в розн. продажу");
		СписокВидовПоступления.ТекущаяСтрока(ВидПоступления);
		КодВидаПоступления = ВидПоступления;
	КонецЕсли;

	Если ((ПустоеЗначение(ДатаНомерСчетаФактуры) = 1) и (Выбран() = 1) и (КодВидаПоступления < 5))
	 или (КодВидаПоступления = 3) Тогда
		СчетФактураПредъявлен = 0;
		Форма.ДатаНомерСчетаФактуры.Доступность(0);
	Иначе
	//	СчетФактураПредъявлен = 1;
		Форма.ДатаНомерСчетаФактуры.Доступность(1);
	КонецЕсли;
	
	Форма.Товар.ВыполнятьФормулуТолькоПриИзменении(1);
	Форма.Количество.ВыполнятьФормулуТолькоПриИзменении(1);
	Форма.Цена.ВыполнятьФормулуТолькоПриИзменении(1);
	Форма.Сумма.ВыполнятьФормулуТолькоПриИзменении(1);
	Форма.НДС.ВыполнятьФормулуТолькоПриИзменении(1);
	Форма.НП.ВыполнятьФормулуТолькоПриИзменении(1);
	Форма.Всего.ВыполнятьФормулуТолькоПриИзменении(1);
	Форма.Стоимость.ВыполнятьФормулуТолькоПриИзменении(1);
	Форма.ВсегоСтоимость.ВыполнятьФормулуТолькоПриИзменении(1);

	ВариантЗачетаАванса.ДобавитьЗначение(1, "не зачитывать");
	ВариантЗачетаАванса.ДобавитьЗначение(2, "только по договору");
	ВариантЗачетаАванса.ДобавитьЗначение(0, "без указания договора");
	ВариантЗачетаАванса.ТекущаяСтрока(ВариантЗачетаАванса.НайтиЗначение(ЗачитыватьАванс));

	Форма.НДС.Видимость(глПризнакУчетаНалога(Контекст, "НДС"));
	Форма.НП.Видимость(глПризнакУчетаНалога(Контекст, "НП"));
	
	Форма.Кн_Видеокурс.Видимость(?(ТипЗначения(Видео_Компонента) = 0, 0, 1));
	
	НачальнаяДатаДокумента = ДатаДок;
	
	ПриВыбореВидаПоступления(1);
	УправлениеВидимостьюГТД(1);
	
	ТекДоговор = Договор;
	
	СписокВариантовОтраженияВозврата.ТекущаяСтрока(СписокВариантовОтраженияВозврата.НайтиЗначение(ВариантОтраженияВозврата));	
	
КонецПроцедуры // ПриОткрытии()

//*****************************************************************************
// Предопределенная процедура
//
Процедура ПриЗаписи()
	
	Если глМожноЗаписатьДокумент(Контекст) = 0 Тогда
		СтатусВозврата(0);
		Возврат;
		
	ИначеЕсли глКонтрольДатыДокумента(Контекст, НачальнаяДатаДокумента) = 1 Тогда
		СтатусВозврата(0);
		Возврат;
		
	ИначеЕсли (СокрЛП(ДатаНомерСчетаФактуры) = "") и (СчетФактураПредъявлен = 1)
	        и ((КодВидаПоступления <=2 ) или ((КодВидаПоступления =4) и (ПокупателемВыставляетсяСчетФактураНаВозврат = 1) и (ВариантОтраженияВозврата = 1))) Тогда 
		Предупреждение("Введите данные о документе поставщика
					   |или поставьте переключатель в положение
					   |""Счет-фактура поставщиком не предъявлен""");
		СтатусВозврата(0);
		Возврат;
	КонецЕсли;
	
	ЦеныВДоговоре = 1; // в рублях
	Если Договор.Выбран() = 1 Тогда
	    Если ПустоеЗначение(Договор.ВалютаДоговора) = 0 Тогда
			ЦеныВДоговоре = 2; // в валюте
		КонецЕсли;
	КонецЕсли;
	
	Если ЦеныВДоговоре = 2 Тогда
		Валюта = Договор.ВалютаДоговора;
		Кратность = Валюта.Кратность.Получить(ДатаДок);
		Кратность = ?(Кратность=0, 1, Кратность);
		Если Договор.ВестиУчетРасчетовУЕ = 1 Тогда
			Кратность = Кратность * 100 / (100 + Договор.ПроцентКорректировкиКурсаУЕ);
		КонецЕсли;
		Операция.СуммаОперации = Окр(Итог("Всего")*Курс/Кратность, 2, 1);
	Иначе
		Операция.СуммаОперации = Итог("Всего");
	КонецЕсли;
	
	Операция.Содержание = "Поступление товаров";
	
КонецПроцедуры // ПриЗаписи()

//******************************************************************************
// Предопределенная процедура
//
Процедура ПриЗакрытии()
	
	глОткрытьЖурнал(Контекст, Новый);	
	
КонецПроцедуры // ПриЗакрытии()

//******************************************************************************
Новый = 0;

СписокДействий = СоздатьОбъект("СписокЗначений");
СписокДействий.ДобавитьЗначение("Отчет о движениях документа");
СписокДействий.ДобавитьЗначение("Структура подчиненности");
СписокДействий.ДобавитьЗначение("Ввести на основании"); 
СписокДействий.ДобавитьЗначение("Перейти  в журнал");

СписокВариантовОтраженияВозврата.ДобавитьЗначение(1, "в книге покупок");
СписокВариантовОтраженияВозврата.ДобавитьЗначение(0, "в книге продаж");