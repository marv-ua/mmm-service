Перем Валютный, ТипВыписки;
Перем ОстатокНаНачалоДня, ОстатокНаКонецДня;
Перем Сч51, Сч52, Сч60, Сч60_1, Сч60_2, Сч60_7, Сч60_22, Сч62, Сч62_1, Сч62_11, Сч62_2, Сч62_7;
Перем Сч62_22, Сч62_4, Сч62_44, Сч76_2, Сч76_22, Сч76_5;
Перем НачальнаяДатаДокумента;
Перем Новый;
Перем СписокДействий;
                       
Процедура ПослеИзмененияСчета() Далее	

//******************************************************************************

Функция ВалютаДокумента(Д)
	
	Если Д.Выбран() = 1 Тогда
		Если (Д.Договор.ВалютаДоговора.Выбран() = 1) Тогда
		    Возврат Д.Договор.ВалютаДоговора;
		КонецЕсли;
		
	ИначеЕсли ТипЗначенияСтр(Субконто2) = "Справочник" Тогда
		Если Субконто2.Вид() = "Договоры" Тогда
			Возврат Субконто2.ВалютаДоговора;
		КонецЕсли;
	КонецЕсли;
	
	Возврат "";
	
КонецФункции // ВалютаДокумента()

//******************************************************************************
// УправлениеВидимостьюВалютыПродажиПокупки()
//
// Параметры:
//  Нет.
//
// Вызывается из формул элементов диалога:
//  Нет.
//
// Описание:
//  Здесь описывается процедура.
//
Процедура УправлениеВидимостьюВалютыПродажиПокупки()
	
	ВидимостьВалюты = 0;
	ВидимостьКурса = 0;
	
	ВыбратьСтроки();
	Пока ПолучитьСтроку() = 1 Цикл
		Если ВидДвижения.ВидДвижения = Перечисление.ВидыДвиженийДенежныхСредств.КупляПродажаИностраннойВалюты Тогда
			Если Валютный = 2 Тогда
	        	ВидимостьКурса = 1;
				Прервать;
				
			Иначе                                  
		 		ВидимостьВалюты = 1;
	        	ВидимостьКурса  = 1;
				Прервать;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Форма.ПроданнаяВалюта.Видимость(ВидимостьВалюты);
	Форма.КурсПокупкиПродажи.Видимость(ВидимостьКурса);
	
КонецПроцедуры // УправлениеВидимостьюВалютыПродажиПокупки()       

//****************************************************************************** 
Функция ВалСуммаДокумента(Д)
	Если Д.Выбран() = 1 Тогда
		Если Д.Вид() = "ПередачаОС" Тогда
			ИтогВсего = Д.Стоимость*Д.КоличествоСтрок();
		ИначеЕсли Д.Вид() = "ПередачаНМА" Тогда
			ИтогВсего = Д.Стоимость;
		Иначе
			ИтогВсего = Д.Итог("Всего");
		КонецЕсли;
		Возврат ИтогВсего;
	КонецЕсли;
	

	Возврат "";
КонецФункции // ВалСуммаДокумента()

//*****************************************************************************
// КурсДокумента()
//
// Возвращаемое значение:
//  Число - значение курса.
// 
// Вызывается из формул элементов диалога:
//  Колонка "Курс док.".
//
// Описание:
//  Возвращает значение курса, указанного в выбранном документе.
//
Функция КурсДокумента(Д)
	
	Если Д.Выбран() = 1 Тогда
		Если Д.Вид() = "Счет"	Тогда
			Возврат Формат(1, "Ч15.4")
		КонецЕсли;
		Если Д.Курс <> 0 Тогда
		    Возврат СокрП(Формат(Д.Курс, "Ч15.4"));
		КонецЕсли;
	КонецЕсли;

	Возврат "";
	
КонецФункции // КурсДокумента()

//*******************************************************************************
Процедура УправлениеВидимостьюСуммовыхРазниц()
	
	Видимость = 0;

	ВыбратьСтроки();
	Пока ПолучитьСтроку() = 1 Цикл
		Если ТипЗначенияСтр(Субконто2) = "Справочник" Тогда
			Если Субконто2.Вид()="Договоры" Тогда
				Если ПустоеЗначение(Субконто2.ВалютаДоговора)=0 Тогда
					Если Субконто2.ОплатаДоговора=1 Тогда
						Видимость = 1;
					КонецЕсли;	
				КонецЕсли;	
			КонецЕсли;
		КонецЕсли;	
	КонецЦикла;
	
	Форма.ВалютаДоговора.Видимость(Видимость);
	Форма.КурсОплаты.Видимость(Видимость);
	Форма.КурсДок.Видимость(Видимость);
	
КонецПроцедуры // УправлениеВидимостьюВалютыПродажиПокупки()

//******************************************************************************
// ПредставлениеСубконто(НомерСубконто)
//
// Параменты:
//  НмерСубконто - Число.
//
// Возвращаемое значение:
//  Строка - представление вида субконто.
// 
// Вызывается из формул элементов диалога:
//  Колонка "Вид Субк.1",
//  Колонка "Вид Субк.2",
//  Колонка "Вид Субк.3".
//
// Описание:
//  Формирует представление субконто.
//
Функция ПредставлениеСубконто(НомерСубконто)
	
	Если ТипЗначения(ПолучитьАтрибут("Субконто" + НомерСубконто)) = 0 Тогда
		Возврат "";
		
	ИначеЕсли ТипЗначения(ПолучитьАтрибут("Субконто" + НомерСубконто)) <= 3 Тогда
		
		Возврат КоррСчет.ВидСубконто(НомерСубконто);
		
	Иначе		
		Возврат ПолучитьАтрибут("Субконто" + НомерСубконто).ПредставлениеВида();
	КонецЕсли;

КонецФункции // ПредставлениеСубконто()

//******************************************************************************
// НазначитьТипыСубконто()
//
Процедура НазначитьТипыСубконто()
    
	Если КоррСчет.Выбран() = 1 Тогда
	    УсловныйКоррСчет = КоррСчет;
		
	ИначеЕсли ВидДвижения.Выбран() = 1 Тогда
		Если ВидДвижения.ВидДвижения = Перечисление.ВидыДвиженийДенежныхСредств.ВыручкаПоОбычнымВидамДеятельности Тогда
			УсловныйКоррСчет = Сч62_2;
			
		ИначеЕсли ВидДвижения.ВидДвижения = Перечисление.ВидыДвиженийДенежныхСредств.ПриобретениеТоваровПродукцииРаботИУслуг Тогда
			УсловныйКоррСчет = Сч60_1;
			
		Иначе
		    УсловныйКоррСчет = ПолучитьПустоеЗначение("Счет.Основной");
		КонецЕсли;
		
	Иначе
		УсловныйКоррСчет = ПолучитьПустоеЗначение("Счет.Основной");
	КонецЕсли;
	
	НазначитьТип("Субконто1", УсловныйКоррСчет.ВидСубконто(1));
	НазначитьТип("Субконто2", УсловныйКоррСчет.ВидСубконто(2));
	НазначитьТип("Субконто3", УсловныйКоррСчет.ВидСубконто(3));
	
КонецПроцедуры // НазначитьТипыСубконто()

//******************************************************************************
// ПриВыбореСубконто(ТекКолонка)
//
// Параметры:
//  ТекКолонка - Строка. Идентификатор текущей колонки.
//
// Вызывается из формул элементов диалога:
//  Субконто1, Субконто2, Субконто3.
//
// Описание:
//  Проверяется соотвествие контрагента и договора, указанного в аналитике.
//
Процедура ПриВыбореСубконто(ТекКолонка = "")
	
	ИдентификаторРеквизита = ?(ТекКолонка = "", Форма.ТекущаяКолонка(), ТекКолонка);
	ЗначениеРеквизита = ПолучитьАтрибут(ИдентификаторРеквизита);
	НомерСубконто = Число(Прав(ИдентификаторРеквизита, 1));
	Если ТипЗначенияСтр(ЗначениеРеквизита) = "Справочник" Тогда
		Если ЗначениеРеквизита.Вид() = "Контрагенты" Тогда
			Если НомерСубконто < 3 Тогда
				ИдентификаторСледующегоРеквизита = Лев(ИдентификаторРеквизита, СтрДлина(ИдентификаторРеквизита)-1) + (НомерСубконто + 1);
				ЗначениеСледующегоРеквизита = ПолучитьАтрибут(ИдентификаторСледующегоРеквизита);
				Если ТипЗначенияСтр(ЗначениеСледующегоРеквизита) = "Справочник" Тогда
					Если ЗначениеСледующегоРеквизита.Вид() = "Договоры" Тогда
						Если ЗначениеРеквизита <> ЗначениеСледующегоРеквизита.Владелец Тогда
						    УстановитьАтрибут(ИдентификаторСледующегоРеквизита, ЗначениеРеквизита.ОсновнойДоговор);
							Если (ВалютаДокумента(ДокументПоставки)<>"") Тогда
								КурсОплаты = ВалютаДокумента(ДокументПоставки).Курс.Получить(ДатаДок);
								Кратность = ВалютаДокумента(ДокументПоставки).Кратность.Получить(ДатаДок);
								Кратность = ?(Кратность = 0, 1, Кратность);
								
							Иначе
								КурсОплаты = 0;
								Кратность = 1;
							КонецЕсли;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
		ИначеЕсли ЗначениеРеквизита.Вид() = "Договоры" Тогда
			Если (ПустоеЗначение(ЗначениеРеквизита) = 0) и (НомерСубконто > 1) Тогда
				ИдентификаторПредыдущегоРеквизита = Лев(ИдентификаторРеквизита, СтрДлина(ИдентификаторРеквизита)-1) + (НомерСубконто - 1);
				ЗначениеПредыдущегоРеквизита = ПолучитьАтрибут(ИдентификаторПредыдущегоРеквизита);
				Если ТипЗначенияСтр(ЗначениеПредыдущегоРеквизита) = "Справочник" Тогда
					Если ЗначениеПредыдущегоРеквизита.Вид() = "Контрагенты" Тогда
						Если ЗначениеРеквизита.Владелец <> ЗначениеПредыдущегоРеквизита Тогда
						    УстановитьАтрибут(ИдентификаторПредыдущегоРеквизита, ЗначениеРеквизита.Владелец);
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
				
				Если (ВалютаДокумента(ДокументПоставки)<>"") Тогда    
					КурсОплаты = ВалютаДокумента(ДокументПоставки).Курс.Получить(ДатаДок);
					Кратность = ВалютаДокумента(ДокументПоставки).Кратность.Получить(ДатаДок);
					Кратность = ?(Кратность = 0, 1, Кратность);
				
				Иначе
					КурсОплаты = 0;
					Кратность = 1;
				КонецЕсли;
			КонецЕсли;
			
			Если (ЗначениеРеквизита.Наименование = глИмяДоговораДляПлатежейБезДоговора) и 
				 (КоррСчет <> Сч62_2) и (КоррСчет <> Сч62_7) и (КоррСчет <> Сч62_22) и (КоррСчет <> Сч60_2) и (КоррСчет <> Сч60_7) и (КоррСчет <> Сч60_22) Тогда
				Предупреждение("Служебный договор ""Без договора..."" можно использовать
							   |только при явно указанном счете учета полученных или 
							   |выданных авансов. Укажите другой договор.");
				УстановитьАтрибут(ИдентификаторРеквизита, "");
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
	Если ДокументПоставки.Выбран()=1 Тогда
	    Если ДокументПоставки.Договор<>Субконто2 Тогда
	        ДокументПоставки="";
	    КонецЕсли;
	КонецЕсли;
	УправлениеВидимостьюСуммовыхРазниц();
КонецПроцедуры // ПриВыбореСубконто()

//****************************************************************************** 
Процедура ПриВыбореДокументаПоставки()
	
	Если (ВалютаДокумента(ДокументПоставки)<>"") Тогда
		КурсОплаты = ВалютаДокумента(ДокументПоставки).Курс.Получить(ДатаДок);
		Кратность = ВалютаДокумента(ДокументПоставки).Кратность.Получить(ДатаДок);
		Кратность = ?(Кратность = 0, 1, Кратность);
		
	Иначе
		КурсОплаты = 0;
		Кратность = 1;
	КонецЕсли;
	
	УправлениеВидимостьюСуммовыхРазниц();
	
КонецПроцедуры	

//_____________________________________________________________________________
Функция ПоказатьКурс()
	Перем Стр;

	Если Валюта.Выбран() = 1 Тогда
		Стр = Валюта.Курс.Получить(ДатаДок);
	Иначе
		Стр = "";
	КонецЕсли;

	Возврат Стр;
КонецФункции //ПоказатьКурс
//_____________________________________________________________________________
Процедура УстановитьТипВыписки()
	Если БанковскийСчет.ТипСчета = Перечисление.ТипыБанковскихСчетов.Валютный Тогда
		Валютный = 2;
		ТипВыписки = "валютная (по счету 52)";
		Если Валюта.Выбран() = 0 Тогда
			Валюта = глЗначениеПоУмолчанию("ОсновнаяВалюта");
		КонецЕсли;
	Иначе
		Валютный = 1;
		ТипВыписки = "рублевая (по счету 51)";
		Если Валюта.Выбран() = 1 Тогда
			Валюта = "";
		КонецЕсли;
	КонецЕсли;
	Форма.Валюта.Видимость(Валютный-1);
	Форма.Курс.Видимость(Валютный-1);
	Форма.РамкаВалюты.Видимость(Валютный-1);
КонецПроцедуры //УстановитьТипВыписки
//_____________________________________________________________________________
Процедура ПриВыбореБанковскогоСчета()
	ВыбрБанковскийСчет = СоздатьОбъект("Справочник.БанковскиеСчета");
	ВыбрБанковскийСчет.НайтиЭлемент(БанковскийСчет);
	Если ВыбрБанковскийСчет.Выбрать("Укажите расчетный счет","ДляВыбора") = 1 Тогда
		БанковскийСчет = ВыбрБанковскийСчет.ТекущийЭлемент();
	КонецЕсли;

	УстановитьТипВыписки();  
	
	ПослеИзмененияСчета();
КонецПроцедуры
//_____________________________________________________________________________
Процедура РассчитатьОстатки()
    Если ДатаДок > КонецРассчитанногоПериодаБИ() Тогда
		Предупреждение("На " + ДатаДок + " бухгалтерские итоги не рассчитаны!
						|Расчет итогов выполняется в режиме
						|""Операции - Управление бухгалтерскими итогами"".");

	ИначеЕсли (Выбран() = 0) или (Модифицированность() = 1) Тогда
		Предупреждение("Для получения остатков по данным бухгалтерского учета
						|необходимо записать документ."); 

	Иначе
		БухИт = СоздатьОбъект("БухгалтерскиеИтоги"); БухИт.ИспользоватьРазделительУчета(ЮрЛицо);
		БухИт.ИспользоватьСубконто(ВидыСубконто.БанковскиеСчета, БанковскийСчет, 2);
		Если Валютный = 2 Тогда
			БухИт.ВыполнитьЗапрос(ДатаДок,, Сч52,, Валюта,,, "В");
			ОстатокНаНачалоДня = БухИт.СНД("В");
		Иначе
			БухИт.ВыполнитьЗапрос(ДатаДок,, Сч51,,,,, "С");
			ОстатокНаНачалоДня = БухИт.СНД("С");
		КонецЕсли;
		ОстатокНаКонецДня = ОстатокНаНачалоДня + Итог("Приход") - Итог("Расход");
	КонецЕсли;
КонецПроцедуры //РассчитатьОстатки

//******************************************************************************
// ЗаполнитьКурсЦБнаДатуПродажиВалюты()
//
// Параметры:
//  Нет.
//
// Вызывается из формул элементов диалога:
//  Нет.
//
// Описание:
//  Здесь описывается процедура.
//
Процедура ЗаполнитьКурсЦБнаДатуПродажиВалюты()
	
	Если Валютный = 1 Тогда // выписка рублевая
		Если ВидДвижения.ВидДвижения = Перечисление.ВидыДвиженийДенежныхСредств.КупляПродажаИностраннойВалюты Тогда
			Если ПустоеЗначение(ПроданнаяВалюта) = 0 Тогда
				Если ПустоеЗначение(КурсПокупкиПродажи) = 1 Тогда
			        КурсПокупкиПродажи = ПроданнаяВалюта.Курс.Получить(ДатаДок);
			    КонецЕсли;    
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьКурсЦБнаДатуПродажиВалюты()
//_____________________________________________________________________________
Процедура ПриВыбореКоррСчета()
	
	КодыСчетовДляРасчетовУЕ = "60.6, 60.7, 62.6, 62.7, 62.8, 76.6";
	
	Если (КоррСчет.Валютный = 1) и (Валютный = 1) и (Найти(КодыСчетовДляРасчетовУЕ, КоррСчет.Код) = 0) Тогда
		Предупреждение("Корреспондирующий счет не может быть валютным.");

	ИначеЕсли КоррСчет.ПринадлежитГруппе(СчетПоКоду("50")) = 1 Тогда
		Предупреждение("Проводки по кассе формируются только кассовыми документами.
						|По этой строке проводка сформирована не будет, но указанная
						|сумма будет учтена при выводе оборотов и остатка на конец дня.");
	    
	ИначеЕсли ((КоррСчет = СчетПоКоду("51")) или (КоррСчет = СчетПоКоду("52"))) и (Расход <> 0) Тогда
		Предупреждение("Проводки по перечислению денежных средств с одного банковского 
						|счета на другой формируются выпиской по тому счету, на который 
						|денежные средства поступают.
						|По этой строке проводка сформирована не будет, но указанная
						|сумма будет учтена при выводе оборотов и остатка на конец дня.");
	КонецЕсли;
				
	// Механизм автоматического добавления новых корреспонденций
	// в список корректных проводок.
	Если (Константа.ИспользоватьСписокКорректныхПроводок = Да) Тогда
		Если Валютный = 2 Тогда
		    СчБезНалРасч = Сч52;
		Иначе
		    СчБезНалРасч = Сч51;
		КонецЕсли;
	    
		Если (глДвижениеПоРасчетномуСчету(ВидДвижения) >= 0) или ((Приход+Расход) <> 0) Тогда
			Если глДвижениеПоРасчетномуСчету(ВидДвижения) >= 0 Тогда
				Отбор = глДвижениеПоРасчетномуСчету(ВидДвижения);
			ИначеЕсли Расход <> 0 Тогда
				Отбор = 0;
			ИначеЕсли Приход <> 0 Тогда
				Отбор = 1;
			КонецЕсли;
		КонецЕсли;
		
		Если Отбор=1 тогда
			глПроверкаКорректныхПроводок(СчБезНалРасч,КоррСчет);
		Иначе
			глПроверкаКорректныхПроводок(КоррСчет,СчБезНалРасч);
		КонецЕсли;	
	КонецЕсли;

	НазначитьТипыСубконто();
	
	// Контроль использования служебного договора.
	ПриВыбореСубконто("Субконто1");
	ПриВыбореСубконто("Субконто2");
	ПриВыбореСубконто("Субконто3");
	
КонецПроцедуры

//_____________________________________________________________________________
Процедура ПриВыбореВидаДвижения()
	
	СписокВидов = СоздатьОбъект("СписокЗначений");
	
	Если глДвижениеПоРасчетномуСчету(ВидДвижения) = 0 Тогда
		Форма.Приход.Доступность(0);
		Форма.Расход.Доступность(1);
		Расход = ?(Расход<>0, Расход, Приход);
		Приход = 0;
		
		СписокВидов.ДобавитьЗначение("УслугиСтороннихОрганизаций");
		СписокВидов.ДобавитьЗначение("ПоступлениеТоваров");
		СписокВидов.ДобавитьЗначение("ПоступлениеМатериалов");
		СписокВидов.ДобавитьЗначение("ПоступлениеОборудования");
		СписокВидов.ДобавитьЗначение("ПоступлениеОС");
		СписокВидов.ДобавитьЗначение("ПоступлениеНМА");
		
	ИначеЕсли глДвижениеПоРасчетномуСчету(ВидДвижения) = 1 Тогда 
		Форма.Приход.Доступность(1);
		Форма.Расход.Доступность(0);
		Приход = ?(Приход<>0, Приход, Расход);
		Расход = 0; 
		
		СписокВидов.ДобавитьЗначение("РасходнаяНакладная");
		СписокВидов.ДобавитьЗначение("РеализацияОтгруженнойПродукции");
		СписокВидов.ДобавитьЗначение("ОказаниеУслуг"); 
		СписокВидов.ДобавитьЗначение("ВыполнениеЭтапаРабот");
		СписокВидов.ДобавитьЗначение("ОтпускМатериаловНаСторону");
		СписокВидов.ДобавитьЗначение("ПередачаОС"); 
		СписокВидов.ДобавитьЗначение("ПередачаНМА");
		СписокВидов.ДобавитьЗначение("Счет");
		
	Иначе
		Форма.Приход.Доступность(1);
		Форма.Расход.Доступность(1);
	КонецЕсли;
    
	Если ДокументПоставки.Выбран()=1 Тогда
	    Если СписокВидов.Принадлежит(ДокументПоставки.Вид())=0 Тогда
	        ДокументПоставки="";
	    КонецЕсли;
	КонецЕсли;
	
	ДоступностьВалюты = 0;
	ДоступностьКурса  = 0;
	
	Если ВидДвижения.Выбран() = 1 Тогда
		Если ПустоеЗначение(ВидДвижения.Счет) = 0 Тогда
		    КоррСчет = ВидДвижения.Счет;
			Количество = 0;
		КонецЕсли;
		
		НазначитьТипыСубконто();
		Для а = 1 по 3 Цикл
			Если ПустоеЗначение(ВидДвижения.ПолучитьАтрибут("Субконто" + а)) = 0 Тогда
				УстановитьАтрибут("Субконто" + а, ВидДвижения.ПолучитьАтрибут("Субконто" + а));
			КонецЕсли;
		КонецЦикла;
		
		// Управление дополнительными реквизитами, необходимыми при покупке-продаже валюты.
		Если ВидДвижения.ВидДвижения = Перечисление.ВидыДвиженийДенежныхСредств.КупляПродажаИностраннойВалюты Тогда
			Если Валютный = 2 Тогда
		       	ДоступностьКурса = 1;
			Иначе                                  
		 		ДоступностьВалюты = 1;
	        	ДоступностьКурса  = 1;
			КонецЕсли;
		КонецЕсли;
	    
		Если ДоступностьВалюты = 1 Тогда
		    Форма.ПроданнаяВалюта.Видимость(1);
			
		Иначе
			ПроданнаяВалюта = 0;
			СуммаПроданнойВалюты = 0;
		КонецЕсли;
		
		Если ДоступностьКурса = 1 Тогда
		    Форма.КурсПокупкиПродажи.Видимость(1);
			
		Иначе
			КурсПокупкиПродажи = 0;
		КонецЕсли;
		
	КонецЕсли;
	
	Форма.ПроданнаяВалюта.Доступность(ДоступностьВалюты);
	Форма.СуммаПроданнойВалюты.Доступность(ДоступностьВалюты);
	Форма.КурсПокупкиПродажи.Доступность(ДоступностьКурса); 
	
	ЗаполнитьКурсЦБнаДатуПродажиВалюты()
	
КонецПроцедуры  

//*****************************************************************************
// СформироватьСтрокиПоДокументу(Док)
//
// Параметры:
//  Док - Документ. Докумет отгрузки, счет или счет-фактура.
//
// Описание:
//  Заполняет строки выписки на основании указанного документа.
//
Процедура СформироватьСтрокиПоДокументу(Док)

	ВыбДвижение = СоздатьОбъект("Справочник.ДвиженияДенежныхСредств");
	ВыбДвижение.Выбрать("Укажите движение денежных средств", "ФормаСписка");
	Если ПустоеЗначение(ВыбДвижение.ТекущийЭлемент()) = 1 Тогда
	    Возврат;
		
	ИначеЕсли Док.Вид() = "ОтпускМатериаловНаСторону" Тогда
		Если Док.ВидОтпуска = 1 Тогда
		    Предупреждение("Документ " + Док + " не отражает операции реализации.");
			СтатусВозврата(0);
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ТЗ = СоздатьОбъект("ТаблицаЗначений");
	ТЗ.НоваяКолонка("КоррСчет",,,,,,,);
	ТЗ.НоваяКолонка("Субконто1",,,,,,,);
	ТЗ.НоваяКолонка("Субконто2",,,,,,,);
	ТЗ.НоваяКолонка("Субконто3",,,,,,,);
	ТЗ.НоваяКолонка("Приход",,,,,,,);
	
	ДокВид = Док.Вид();
	УчитыватьНП = ?(ДокВид = "СчетФактура", 0, глПризнакУчетаНалога(Док, "НП"));

	Если УчитыватьНП = 1 Тогда
		Если Вопрос("В документе "+Док+" указан налог с продаж.
					|Продолжить?", "Да+Нет") = "Нет" Тогда
			СтатусВозврата(0);
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ЦеныВДоговоре = 1; // в рублях
	Если Док.Договор.Выбран() = 1 Тогда
	    Если ПустоеЗначение(Док.Договор.ВалютаДоговора) = 0 Тогда
			ЦеныВДоговоре = 2; // в валюте
		КонецЕсли;
		ОплатаДоговора = Док.Договор.ОплатаДоговора; // 1 - в рублях, 2 - в валюте
	КонецЕсли;
	
	Если ЦеныВДоговоре = 2 Тогда
		ВалютаДокумента = Док.Договор.ВалютаДоговора;
		КурсДокумента = ВалютаДокумента.Курс.Получить(ДатаДок);
		Кратность = Валюта.Кратность.Получить(ДатаДок);
		Кратность = ?(Кратность=0, 1, Кратность);
		
		Если Док.Договор.ВестиУчетРасчетовУЕ = 1 Тогда
			Кратность = Кратность * 100 / (100 + Док.Договор.ПроцентКорректировкиКурсаУЕ);
		КонецЕсли;
	КонецЕсли;
	
	Если (ДокВид = "ПередачаОС") или (ДокВид = "ПередачаНМА") Тогда
		Кол = ?(Док.КоличествоСтрок() = 0, 1, Док.КоличествоСтрок());
		ТЗ.НоваяСтрока();
		ТЗ.КоррСчет = ?(ОплатаДоговора = 2, Сч62_11, Сч62_1);
		ТЗ.Субконто1 = Док.Контрагент;
		ТЗ.Субконто2 = Док.Договор;
		ТЗ.Субконто3 = "";
		Если (ЦеныВДоговоре = 2) и (ОплатаДоговора = 1) Тогда
		    ТЗ.Приход = Док.Стоимость*Кол*КурсДокумента/Кратность;
		Иначе
			ТЗ.Приход = Док.Стоимость*Кол;
		КонецЕсли;
		
	Иначе
		Док.ВыбратьСтроки();
		Пока Док.ПолучитьСтроку() = 1 Цикл
			ТЗ.НоваяСтрока();
			ТЗ.КоррСчет = ?(ОплатаДоговора = 2, Сч62_11, Сч62_1);
			ТЗ.Субконто1 = Док.Контрагент;
			ТЗ.Субконто2 = Док.Договор;
			ТЗ.Субконто3 = "";
			// Если возврат товара или материала поставщику, то счет
			// расчетов с поставщиком 76.2 (76.22)
			Если ДокВид = "РасходнаяНакладная"  Тогда
				Если (Док.ВидОтгрузки = 3) или (Док.ВидОтгрузки = 4) или (Док.ВидОтгрузки = 13) Тогда
				    ТЗ.КоррСчет = ?(ОплатаДоговора = 2, Сч76_22, Сч76_2);
				КонецЕсли;
				
			ИначеЕсли ДокВид = "ОтпускМатериаловНаСторону" Тогда
				Если Док.ВидОтпуска = 2 Тогда
				    ТЗ.КоррСчет = ?(ОплатаДоговора = 2, Сч76_22, Сч76_2);
				КонецЕсли;
				
			ИначеЕсли ДокВид = "СчетФактура" Тогда
				Если Док.Аванс = 1 Тогда
					ТЗ.КоррСчет = ?(ОплатаДоговора = 2, Сч62_22, Сч62_2);
				КонецЕсли;
			КонецЕсли;
			
			Если (ДокВид = "РасходнаяНакладная") или
				 (ДокВид = "РеализацияОтгруженнойПродукции") или
			  	 (ДокВид = "Счет") или 
			  	 (ДокВид = "СчетФактура") Тогда
			  	 	Если ТипЗначенияСтр(Док.Товар) <> "Строка" Тогда
			  	 		Если Док.Товар.Вид() = "Номенклатура" Тогда
			  	 			Если Док.Товар.ТипТовара = Перечисление.ТипыТоваров.НаКомиссии Тогда
			  	 				ТЗ.КоррСчет = ?(ОплатаДоговора = 2, Сч62_44, Сч62_4);
			  	 				ТЗ.Субконто3 = "";
			  	 			КонецЕсли;
			  	 		КонецЕсли;
			  	 	КонецЕсли;
			КонецЕсли;
			
			Если (ЦеныВДоговоре = 2) и (ОплатаДоговора = 1) Тогда
			    ТЗ.Приход = Док.Всего*КурсДокумента/Кратность;
			Иначе
				ТЗ.Приход = Док.Всего;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	ТЗ.Свернуть("КоррСчет, Субконто1, Субконто2, Субконто3", "Приход");
	ТЗ.ВыбратьСтроки();
	Пока ТЗ.ПолучитьСтроку() = 1 Цикл
		НоваяСтрока();
		НазначитьТип("Субконто1", ТЗ.КоррСчет.ВидСубконто(1));
		НазначитьТип("Субконто2", ТЗ.КоррСчет.ВидСубконто(2));
		НазначитьТип("Субконто3", ТЗ.КоррСчет.ВидСубконто(3));
		Субконто1 = ТЗ.Субконто1;
		Субконто2 = ТЗ.Субконто2;
		Субконто3 = ТЗ.Субконто3;
		Приход = ТЗ.Приход;
		НазначениеПлатежа = "Оплата по документу "+Док;
		ВидДвижения = ВыбДвижение.ТекущийЭлемент();
		Если (ВидДвижения.ВидДвижения = Перечисление.ВидыДвиженийДенежныхСредств.ВыручкаПоОбычнымВидамДеятельности) или
			 (ВидДвижения.ВидДвижения = Перечисление.ВидыДвиженийДенежныхСредств.ПриобретениеТоваровПродукцииРаботИУслуг) или
			 (ВидДвижения.Счет.Выбран() = 1) Тогда
			ПриВыбореВидаДвижения();
			
		Иначе
			КоррСчет = ТЗ.КоррСчет;
		КонецЕсли;
		АктивизироватьСтроку();
		Если (Док.Вид()<>"СчетФактура") Тогда
			Если Док.Вид() = "Счет" Тогда
				Если ВидДвижения.ВидДвижения <> Перечисление.ВидыДвиженийДенежныхСредств.ВыручкаПоОбычнымВидамДеятельности Тогда
					Продолжить;
				КонецЕсли;
			КонецЕсли;
			ДокументПоставки = Док.ТекущийДокумент();
			ПриВыбореДокументаПоставки();
		КонецЕсли;
	КонецЦикла;
		
КонецПроцедуры // СформироватьСтрокиПоДокументу()

//_____________________________________________________________________________
Процедура ПоступлениеПоДокументам()
	Меню = СоздатьОбъект("СписокЗначений");
	Меню.ДобавитьЗначение("Счет", 							"Счет");
	Меню.ДобавитьЗначение("СчетФактура", 					"Счет-фактура");
	Меню.ДобавитьЗначение("РасходнаяНакладная", 			"Отгрузка товаров, продукции");
	Меню.ДобавитьЗначение("РеализацияОтгруженнойПродукции", "Реализация отгруженной продукции");
	Меню.ДобавитьЗначение("ОказаниеУслуг",					"Оказание услуг");
	Меню.ДобавитьЗначение("ВыполнениеЭтапаРабот",			"Выполнение этапа работ");
	Меню.ДобавитьЗначение("ОтпускМатериаловНаСторону",		"Отгрузка материалов на сторону");
	Меню.ДобавитьЗначение("ПередачаОС",						"Передача ОС");
	Меню.ДобавитьЗначение("ПередачаНМА",					"Передача НМА");
	
	ВидДок = "";
	Если Меню.ВыбратьЗначение(ВидДок,,,,1) = 1 Тогда
	   Док = СоздатьОбъект("Документ."+ВидДок);
	   Если Док.Выбрать("Выберите документ, в оплату которого поступили денежные средства") = 1 Тогда
	       СформироватьСтрокиПоДокументу(Док);
	   КонецЕсли;
	КонецЕсли;
КонецПроцедуры //ПоступлениеПоДокументам 

//******************************************************************************
// ПриВыбореПлатежногоДокумента()
//
// Параметры:
//  Нет.
//
// Вызывается из формул элементов диалога:
//  Нет.
//
// Описание:
//  Здесь описывается процедура.
//
Процедура ПриВыбореПлатежногоДокумента()
	
	Если ПустоеЗначение(ПервичныйДокумент) = 0 Тогда
		НомерДокВходящий = ПервичныйДокумент.НомерДок;
		ДатаДокВходящий  = ПервичныйДокумент.ДатаДок;    
	КонецЕсли;
	
	Форма.НомерДокВходящий.Доступность(ПустоеЗначение(ПервичныйДокумент));
	Форма.ДатаДокВходящий.Доступность(ПустоеЗначение(ПервичныйДокумент));	
	
КонецПроцедуры // ПриВыбореПлатежногоДокумента()

//_____________________________________________________________________________
Процедура ПодборПоПлатежнымДокументам()
	ОткрытьПодбор("Журнал.ПлатежныеДокументы","ДляПодбора",Контекст,0);
КонецПроцедуры //ПодборПоПлатежнымДокументам
//_____________________________________________________________________________
Процедура ВводНового(Копирование)
	глЗаполнитьШапку(Контекст, Копирование);
	Новый = 1;
	Если Копирование = 1 Тогда	//копирование документа
		Возврат;
	КонецЕсли;
	БанковскийСчет = Константа.ОсновнойБанковскийСчет;
	Валюта = глЗначениеПоУмолчанию("ОсновнаяВалюта");

КонецПроцедуры
//_____________________________________________________________________________
Процедура ВводНаОсновании(ДокументОснование) //предопределенная
	Новый = 1;
	Если Найти(",Счет,СчетФактура,РасходнаяНакладная,РеализацияОтгруженнойПродукции,ВыполнениеЭтапаРабот,ОказаниеУслуг,ОтпускМатериаловНаСторону,ПередачаОС,ПередачаНМА,",
				","+ДокументОснование.Вид()+",") <> 0 Тогда
		Если ДокументОснование.Вид() = "СчетФактура" Тогда
		    Если ДокументОснование.Аванс = 1  Тогда
		        Предупреждение("Нельза вводить выписку на основании счета-фактуры на аванс");
				СтатусВозврата(0);
				Возврат;
		    КонецЕсли;
		КонецЕсли;
		СформироватьСтрокиПоДокументу(ДокументОснование);	
	КонецЕсли;
	Если Метаданные.Документ(ДокументОснование.Вид()).РеквизитШапки("РасчетныйСчет").Выбран() = 1 Тогда
	    БанковскийСчет = ДокументОснование.РасчетныйСчет;
		УстановитьТипВыписки();
	Иначе
		БанковскийСчет = Константа.ОсновнойБанковскийСчет;
	КонецЕсли;
	
КонецПроцедуры //ВводНаОсновании
//_____________________________________________________________________________
Процедура ПриОткрытии()
	ПриЗаписиПерепроводить(1);
	глПроверкаРазрешенияРедактирования(Контекст);
	Если Форма.ТолькоПросмотр() = 1 Тогда
		Форма.КнопкаВыбораРасчетногоСчета.Доступность(0);
		Форма.КнопкаЗаписать.Доступность(0);
		Форма.КнопкаОК.Доступность(0);
		Форма.КнопкаПоступлениеПоДокументам.Доступность(0);
		Форма.КнопкаПодборПоПлатежнымДокументам.Доступность(0);
	КонецЕсли;
    УправлениеВидимостьюСуммовыхРазниц();
	Форма.КоррСчет.ВыполнятьФормулуТолькоПриИзменении();
	Форма.КоррСчет.ВыборГруппы(0);
	ОстатокНаНачалоДня = 0;
	ОстатокНаКонецДня = 0;
	УстановитьТипВыписки();
	Форма.Кн_Видеокурс.Видимость(?(ТипЗначения(Видео_Компонента) = 0, 0, 1));
	НачальнаяДатаДокумента = ДатаДок;
	
	Форма.Приход.ВыполнятьФормулуТолькоПриИзменении(1);
	Форма.Расход.ВыполнятьФормулуТолькоПриИзменении(1);
	
	УправлениеВидимостьюВалютыПродажиПокупки();
	
КонецПроцедуры

//***************************************************************************
Процедура ПриНачалеРедактированияСтроки()
	
	Если Форма.АктивныйЭлемент() = "ПоказатьПлатежныйДокумент" Тогда
		глОткрытьДиалог(Контекст, "ПервичныйДокумент");
	ИначеЕсли Форма.АктивныйЭлемент() = "ПоказатьДокументПоставки" Тогда
		глОткрытьДиалог(Контекст, "ДокументПоставки");
	КонецЕсли;
	
	Форма.НомерДокВходящий.Доступность(ПустоеЗначение(ПервичныйДокумент));
	Форма.ДатаДокВходящий.Доступность(ПустоеЗначение(ПервичныйДокумент));
	
КонецПроцедуры

//_____________________________________________________________________________
Процедура ПриНачалеВыбораЗначения(ИдентЭлемДиалога, ФлагСтандОбр)
	Если ИдентЭлемДиалога = "ПервичныйДокумент" Тогда
		ОткрытьФорму("Журнал.ПлатежныеДокументы");
		ФлагСтандОбр = 0;
		
	ИначеЕсли (ИдентЭлемДиалога = "КоррСчет") и (Константа.ИспользоватьСписокКорректныхПроводок = Да) Тогда
		СписокКорректныхПроводок = СоздатьОбъект("СписокЗначений");
		Если Валютный = 2 Тогда
		    СчБезНалРасч = Сч52;
		Иначе
		    СчБезНалРасч = Сч51;
		КонецЕсли;
	    
		Если (глДвижениеПоРасчетномуСчету(ВидДвижения) >= 0) или ((Приход+Расход) <> 0) Тогда
			Если глДвижениеПоРасчетномуСчету(ВидДвижения) >= 0 Тогда
				Отбор = глДвижениеПоРасчетномуСчету(ВидДвижения);
			ИначеЕсли Расход <> 0 Тогда
				Отбор = 0;
			ИначеЕсли Приход <> 0 Тогда
				Отбор = 1;
			КонецЕсли;
			СписокКорректныхПроводок.Установить("Счет", СчБезНалРасч);
		    СписокКорректныхПроводок.Установить("Корреспонденция", Отбор);
			глЗначениеОтбора = СписокКорректныхПроводок;
		КонецЕсли;
	ИначеЕсли ИдентЭлемДиалога = "ДокументПоставки" Тогда
		
		МенюП = СоздатьОбъект("СписокЗначений");
		МенюП.ДобавитьЗначение("УслугиСтороннихОрганизаций");
		МенюП.ДобавитьЗначение("ПоступлениеТоваров");
		МенюП.ДобавитьЗначение("ПоступлениеМатериалов");
		МенюП.ДобавитьЗначение("ПоступлениеОборудования");
		МенюП.ДобавитьЗначение("ПоступлениеОС");
		МенюП.ДобавитьЗначение("ПоступлениеНМА");

		МенюР = СоздатьОбъект("СписокЗначений");
		МенюР.ДобавитьЗначение("РасходнаяНакладная");
		МенюР.ДобавитьЗначение("РеализацияОтгруженнойПродукции");
		МенюР.ДобавитьЗначение("ОказаниеУслуг"); 
		МенюР.ДобавитьЗначение("ВыполнениеЭтапаРабот");
		МенюР.ДобавитьЗначение("ОтпускМатериаловНаСторону");
		МенюР.ДобавитьЗначение("ПередачаОС"); 
		МенюР.ДобавитьЗначение("ПередачаНМА"); 
		МенюР.ДобавитьЗначение("Счет"); 
		                                                                   
		Меню = ?(глДвижениеПоРасчетномуСчету(ВидДвижения)=1,МенюР,МенюП);
		
		ТабДок = СоздатьОбъект("ТаблицаЗначений");	
		ТабДок.НоваяКолонка("Документ","Документ",,,"Документ",40);
		ТабДок.НоваяКолонка("Валюта",,,,"Валюта",8);
		ТабДок.НоваяКолонка("Курс","Число",10,4,,14);
		ТабДок.НоваяКолонка("Сумма","Число",14,2,,18);
		Док = СоздатьОбъект("Документ");
		Док.ВыбратьПоЗначению(,ДатаДок,"Договор",Субконто2);
		Пока Док.ПолучитьДокумент()=1 Цикл          
			ТекДок = Док.ТекущийДокумент();
			Если ТекДок.Вид() <> "Счет"	Тогда
				Если ТекДок.Проведен()=0 Тогда
					Продолжить;
				КонецЕсли;	   
			КонецЕсли;	   
			
			Если Меню.Принадлежит(ТекДок.Вид())=0 Тогда
				Продолжить;
			КонецЕсли;	                         
			                
			ТабДок.НоваяСтрока();
			ТабДок.Документ = ТекДок;
			ТабДок.Валюта   = ?(ВалютаДокумента(ТекДок)="","Руб.",ВалютаДокумента(ТекДок));;
			ТабДок.Курс     = КурсДокумента(ТекДок);
			ТабДок.Сумма    = ВалСуммаДокумента(ТекДок);
			
		КонецЦикла;	                    
		
		Если ТабДок.КоличествоСтрок()<>0 Тогда
			НомСтр = 0;
			Если ТабДок.ВыбратьСтроку(НомСтр,"Выберите документ поставки")=0 Тогда
				ФлагСтандОбр = 0;
				Возврат;
			КонецЕсли;
			Если НомСтр = 0 Тогда
			    ФлагСтандОбр = 0;
				Возврат;
			КонецЕсли; 
			ДокументПоставки = ТабДок.ПолучитьЗначение(НомСтр,"Документ");
			ПриВыбореДокументаПоставки();
			ФлагСтандОбр = 0;
			Возврат;
		Иначе	
			Предупреждение("Нет документов для подбора.");
			ФлагСтандОбр = 0;
			Возврат;
		КонецЕсли;	
	КонецЕсли;
КонецПроцедуры
//_____________________________________________________________________________
Процедура ОбработкаВыбораЗначения(ВыбЗнач, ИдентЭлемДиалога, ФлагСтандОбр)
	Если ИдентЭлемДиалога = "ПервичныйДокумент" Тогда
		Если ВыбЗнач.Вид() = "ОперацияПоРасчСчету" Тогда
			Если ВыбЗнач.ПлательщикСчет = БанковскийСчет Тогда
			    РС = ВыбЗнач.ПлательщикСчет;
				Движение = "Списание";
			ИначеЕсли ВыбЗнач.ПолучательСчет = БанковскийСчет Тогда
			    РС = ВыбЗнач.ПолучательСчет;
				Движение = "Поступление";
			Иначе
				РС = ПолучитьПустоеЗначение("Справочник.БанковскиеСчета");
			КонецЕсли; 
		Иначе
			РС = ВыбЗнач.РасчетныйСчет;
		КонецЕсли;
		Если РС <> БанковскийСчет Тогда
		    Предупреждение("Банковский счет выбранного документа "+ВыбЗнач+"
   	         	  		   |не соответствует указанному в выписке.");
		КонецЕсли;
   			 	  	
	ИначеЕсли ИдентЭлемДиалога = "ПроданнаяВалюта" Тогда
		ПроданнаяВалюта = ВыбЗнач;
   	    ЗаполнитьКурсЦБнаДатуПродажиВалюты();
	КонецЕсли;
КонецПроцедуры
//_____________________________________________________________________________
//NDline
Процедура ДобавитьОплату(ТекКонтрагент, ТекДоговор, ТекСчет, ТекСумма, ДДС, ТекПлПоручение)
	
	ВыбратьСтроки();
	Пока ПолучитьСтроку() = 1 Цикл
		Если (КоррСчет=ТекСчет) И (Субконто1=ТекКонтрагент) И (Субконто2=ТекДоговор) И (ПервичныйДокумент=ТекПлПоручение) Тогда
			Расход = ТекСумма;
			Возврат;
		КонецЕсли;
	КонецЦикла;
	
    НоваяСтрока();
	ВидДвижения = ДДС;
	НазначитьТип("Субконто1", "Справочник.Контрагенты");
	НазначитьТип("Субконто2", "Справочник.Договоры");
	Субконто1 = ТекКонтрагент;
	Субконто2 = ТекДоговор;
	Если ТекСчет = СчетПоКоду("60.2") Тогда
		НазначениеПлатежа = "Аванс по "+СокрЛП(ТекДоговор);
	Иначе
		НазначениеПлатежа = "Оплата по "+СокрЛП(ТекДоговор);
	КонецЕсли;
	КоррСчет = ТекСчет;
    Расход = ТекСумма;

	ПервичныйДокумент = ТекПлПоручение;
	ДатаДокВходящий = ПервичныйДокумент.ДатаДок;
	НомерДокВходящий = ПервичныйДокумент.НомерДок;
КонецПроцедуры
//NDline
//_____________________________________________________________________________
Процедура ОбработкаПодбора(ВыбрДок)
	Если ТипЗначенияСтр(ВыбрДок) = "ТаблицаЗначений" Тогда
		ДДС = ""; //NDline
		СпрДДС = СоздатьОбъект("Справочник.ДвиженияДенежныхСредств");
		Если СпрДДС.НайтиПоНаименованию("Оплата поставщику") = 1 Тогда
		    ДДС = СпрДДС.ТекущийЭлемент();
		КонецЕсли; //NDline
		ВыбрДок.ВыбратьСтроки();
		Пока ВыбрДок.ПолучитьСтроку() = 1 Цикл
			ПлПоручение = ВыбрДок.ПлатДок; //NDline
			ОбрабатыватьСтандартно = 1;
			Если ПлПоручение.Вид() = "ПлатежноеПоручение" Тогда
				
				Если (ПлПоручение.ПеречислениеНалога=0) И (ПлПоручение.КоличествоСтрок()>0) Тогда
					ОбрабатыватьСтандартно = 0;
					ТекКонтрагент = ПлПоручение.Контрагент;
					Если ТекКонтрагент.Выбран() = 0 Тогда
					    Продолжить;
					КонецЕсли;
					Если Проведен() = 1 Тогда
					    ДатаБИ = СформироватьПозициюДокумента(ТекущийДокумент(), -1);
					Иначе
						ДатаБИ = ДатаДок;
						Если ДатаБИ > КонецРассчитанногоПериодаБИ() Тогда
						    ДатаБИ = КонецРассчитанногоПериодаБИ();
						КонецЕсли;
					КонецЕсли;
					
					РаспрСумма = ПлПоручение.Сумма;
					БИ = СоздатьОбъект("БухгалтерскиеИтоги"); //БИ.ИспользоватьРазделительУчета(ЮрЛицо);
					БИ.ИспользоватьСубконто(ВидыСубконто.Контрагенты, ТекКонтрагент, 2);
					БИ.ИспользоватьСубконто(ВидыСубконто.Договоры, , 1, 0);
					Если БИ.ВыполнитьЗапрос(, ДатаБИ, "60.1, 76.5", , , 1, , "С") = 1 Тогда
						Если БИ.ПолучитьСубконто(1, , ТекКонтрагент) = 1 Тогда
							Если ПлПоручение.КоличествоСтрок() = 0 Тогда
								БИ.ВыбратьСчета();
								Пока БИ.ПолучитьСчет() = 1 Цикл
									
									Если БИ.Счет.ЭтоГруппа() = 1 Тогда
										Продолжить;
									КонецЕсли;
									Если ПустоеЗначение(ПлПоручение.Договор) = 0 Тогда
										Если БИ.ПолучитьСубконто(2,,ПлПоручение.Договор) = 1 Тогда
											ТекДолг = Макс(БИ.СКК("С")-БИ.СКД("С"), 0);
											ТекСумма = Мин(ТекДолг, РаспрСумма);
											Если ТекСумма > 0 Тогда
												ДобавитьОплату(ТекКонтрагент, БИ.Субконто(2), БИ.Счет, ТекСумма, ДДС, ПлПоручение);
												РаспрСумма = РаспрСумма - ТекСумма;
											КонецЕсли;
										КонецЕсли;
									КонецЕсли;
									
									БИ.ВыбратьСубконто(2);
												
									Пока БИ.ПолучитьСубконто(2) = 1 Цикл
										Если БИ.Субконто(2).ЭтоГруппа() = 1 Тогда
											Продолжить;
										ИначеЕсли Найти(ПлПоручение.Содержание, СокрЛП(БИ.Субконто(2).Наименование)) = 0 Тогда
											Продолжить;
										ИначеЕсли БИ.Субконто(2) = ПлПоручение.Договор Тогда
											Продолжить;
										КонецЕсли;
										
										ТекДолг = Макс(БИ.СКК("С")-БИ.СКД("С"), 0);
										ТекСумма = Мин(ТекДолг, ПлПоручение.Сумма);
										Если ТекСумма > 0 Тогда
											ДобавитьОплату(ТекКонтрагент, БИ.Субконто(2), БИ.Счет, ТекСумма, ДДС, ПлПоручение);
											РаспрСумма = РаспрСумма - ТекСумма;
										КонецЕсли;
									КонецЦикла;
								КонецЦикла;
							Иначе
								
								ПлПоручение.ВыбратьСтроки();
								Пока ПлПоручение.ПолучитьСтроку() = 1 Цикл
									СуммаПоСтроке = ПлПоручение.СуммаТ;
									БИ.ВыбратьСубконто(2);
									Если БИ.ПолучитьСубконто(2,,ПлПоручение.ДоговорТ) = 1 Тогда
										БИ.ВыбратьСчета();
										Пока БИ.ПолучитьСчет() = 1 Цикл
											
											Если БИ.Счет.ЭтоГруппа() = 1 Тогда
												Продолжить;
											КонецЕсли;
											
											ТекДолг = Макс(БИ.СКК("С")-БИ.СКД("С"), 0);
											ТекСумма = Мин(ТекДолг, СуммаПоСтроке);
											Если ТекСумма > 0 Тогда
												ДобавитьОплату(ТекКонтрагент, БИ.Субконто(2), БИ.Счет, ТекСумма, ДДС, ПлПоручение);
												РаспрСумма = РаспрСумма - ТекСумма;
												СуммаПоСтроке = СуммаПоСтроке - ТекСумма;
											КонецЕсли;
										КонецЦикла;
									КонецЕсли;
								КонецЦикла;
							КонецЕсли;
						КонецЕсли;
					КонецЕсли;
					
					Если РаспрСумма > 0 Тогда
						ДобавитьОплату(ТекКонтрагент, ПлПоручение.Договор, СчетПоКоду("60.2"), РаспрСумма, ДДС, ПлПоручение);
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			Если ОбрабатыватьСтандартно = 1 Тогда //NDline
			НоваяСтрока();
			ПервичныйДокумент = ВыбрДок.ПлатДок; 
			глЗаполнитьСтрокуВыпискиПоПлатежномуДокументу(Контекст, ПервичныйДокумент, ВыбрДок.СуммаДок);
            ПриВыбореПлатежногоДокумента();
			ПриВыбореВидаДвижения();
			АктивизироватьСтроку();
			КонецЕсли; //NDline
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

//******************************************************************************
// Предопределенная процедура
//
Процедура ПриЗаписи()
	Если глМожноЗаписатьДокумент(Контекст) = 0 Тогда
		СтатусВозврата(0);
		Возврат;     
	ИначеЕсли глКонтрольДатыДокумента(Контекст, НачальнаяДатаДокумента) = 1 Тогда
		СтатусВозврата(0);
		Возврат;
	КонецЕсли;
	
	ТекстПредупреждения = СоздатьОбъект("Текст");
	ВыбратьСтроки();
	Пока ПолучитьСтроку() = 1 Цикл
		Если ВидДвижения.Выбран() = 0 Тогда
			ТекстПредупреждения.ДобавитьСтроку("строка № " + НомерСтроки + "  - не указан вид движения денежных средств.");
			ДокументПоставки = "";
			Продолжить;
		
		ИначеЕсли КоррСчет.Выбран() = 0 Тогда
			Если ВидДвижения.ВидДвижения = Перечисление.ВидыДвиженийДенежныхСредств.ВыручкаПоОбычнымВидамДеятельности Тогда
				СчетПроверки = Сч62_2;
			
			ИначеЕсли ВидДвижения.ВидДвижения = Перечисление.ВидыДвиженийДенежныхСредств.ПриобретениеТоваровПродукцииРаботИУслуг Тогда
				СчетПроверки = Сч60_1;
				
			Иначе
				ТекстПредупреждения.ДобавитьСтроку("строка № " + НомерСтроки + "  - не указан корреспондирующий счет.");
				Продолжить;
			КонецЕсли;
		Иначе
			СчетПроверки = КоррСчет;
		КонецЕсли;
		
		Для А = 1 По СчетПроверки.КоличествоСубконто() Цикл
		    Если (ПолучитьАтрибут("Субконто"+А).Выбран() = 0) и (СчетПроверки.ТолькоОбороты(А) = 0) Тогда
				ТекстПредупреждения.ДобавитьСтроку("строка № " + НомерСтроки + "  - не указано Субконто" + А + ": """ + СчетПроверки.ВидСубконто(А) + """");
			КонецЕсли;
		КонецЦикла; 
	КонецЦикла;
	
	Если ТекстПредупреждения.КоличествоСтрок() > 0 Тогда
		Сообщить("Обнаружены незаполненные реквизиты документа:");
		Для А = 1 По ТекстПредупреждения.КоличествоСтрок() Цикл
			Сообщить(ТекстПредупреждения.ПолучитьСтроку(А));
		КонецЦикла;
		Если Вопрос("Обнаружены незаполненные реквизиты документа.
					|Вернуться к редактированию документа?","Да+Нет") = "Да" Тогда
			Сообщить("Документ не записан.", "i");
	    	СтатусВозврата(0);
			Возврат;
			
		Иначе
			Сообщить("Документ записан.", "i");
		КонецЕсли;                      
	КонецЕсли;

	Операция.СуммаОперации = Итог("Приход") + Итог("Расход");
	Операция.Содержание = "Движения по р/с"; 
	
	Если ПустоеЗначение(ГруппаСчет) = 1 Тогда
		ПослеИзмененияСчета();
	КонецЕсли;	
	
КонецПроцедуры // ПриЗаписи()

//******************************************************************************
// Предопределенная процедура
//
Процедура ПриЗакрытии()
	
	глОткрытьЖурнал(Контекст, Новый);	
	
КонецПроцедуры // ПриЗакрытии()

//***************************************************************************** 

Процедура ПослеИзмененияСчета()
	
	Если ПустоеЗначение(БанковскийСчет) = 0 Тогда
		спрП20 = СоздатьОбъект("Справочник.БанковскиеСчета");  
		спрП20.НайтиПоНаименованию("П20");
		спрПерс = СоздатьОбъект("Справочник.БанковскиеСчета");  
		спрПерс.НайтиПоНаименованию("Перс");
		
		Если БанковскийСчет = спрП20.ТекущийЭлемент() Тогда
			ГруппаСчет = Перечисление.ГруппыСчета.П20;
		ИначеЕсли БанковскийСчет = спрПерс.ТекущийЭлемент() Тогда  
			ГруппаСчет = Перечисление.ГруппыСчета.Перс;
		Иначе  
			ГруппаСчет = Перечисление.ГруппыСчета.Универсам;
		КонецЕсли;
		
	КонецЕсли;	
	
КонецПроцедуры	
	
Новый = 0;

СписокДействий = СоздатьОбъект("СписокЗначений");
СписокДействий.ДобавитьЗначение("Отчет о движениях документа");
СписокДействий.ДобавитьЗначение("Структура подчиненности");
СписокДействий.ДобавитьЗначение("Ввести на основании"); 
СписокДействий.ДобавитьЗначение("Перейти  в журнал");
Сч51    = СчетПоКоду("51");
Сч52    = СчетПоКоду("52");
Сч60    = СчетПоКоду("60");
Сч60_1  = СчетПоКоду("60.1");
Сч60_2  = СчетПоКоду("60.2");
Сч60_7  = СчетПоКоду("60.7");
Сч60_22 = СчетПоКоду("60.22");
Сч62    = СчетПоКоду("62");
Сч62_1  = СчетПоКоду("62.1");
Сч62_2  = СчетПоКоду("62.2");
Сч62_4  = СчетПоКоду("62.4");
Сч62_7  = СчетПоКоду("62.7");
Сч62_11 = СчетПоКоду("62.11");
Сч62_22 = СчетПоКоду("62.22");
Сч62_44 = СчетПоКоду("62.44");
Сч76_2  = СчетПоКоду("76.2");
Сч76_22 = СчетПоКоду("76.22");
Сч76_5  = СчетПоКоду("76.5");