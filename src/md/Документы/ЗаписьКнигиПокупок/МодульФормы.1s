////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ
//

Перем НачальнаяДатаДокумента;
Перем Новый;
Перем СписокДействий;


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ МОДУЛЯ
//

//******************************************************************************
Функция ИнформацияОПроводке()
	
	ОграничениеДлиныНаименования = 40;
	                
	Если Аванс =0 Тогда
		СчетДебет = КоррСчет;
		Субконто1Дебет = Субконто1;
		Субконто2Дебет = Субконто2;
		Субконто3Дебет = Субконто3;
		СчетКредит = Субсчет19;
		
	Иначе
		СчетДебет = СчетПоКоду("68.2");
		Субконто1Дебет = Перечисление.ВидыПлатежейВБюджет.Налог;
		Субконто2Дебет = "";
		Субконто3Дебет = "";   
		СчетКредит = СчетПоКоду("76.АВ");
	КонецЕсли;
	
	
	Инф = "Дт "+СчетДебет.Код+" ("+
	Лев(СчетДебет.Наименование,ОграничениеДлиныНаименования)+
	?(СтрДлина(СчетДебет.Наименование)>ОграничениеДлиныНаименования,"...","")+")";
	Если ТипЗначения(Субконто1Дебет)=0 Тогда
	Иначе
    	Инф = Инф+" / "+?(ПустоеЗначение(Субконто1Дебет) = 1, "<...>", Лев(Субконто1Дебет, 25));
		Если ТипЗначения(Субконто2Дебет)=0 Тогда
		Иначе
			Инф = Инф+" / "+?(ПустоеЗначение(Субконто2Дебет) = 1, "<...>", Лев(Субконто2Дебет, 25));
			Если ТипЗначения(Субконто3Дебет)=0 Тогда
			Иначе
				Инф = Инф+" / "+?(ПустоеЗначение(Субконто3Дебет) = 1, "<...>", Лев(Субконто3Дебет, 25));
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Инф = Инф + РазделительСтрок;
	Инф = Инф +"Кт "+СчетКредит.Код+" ("+
	Лев(СчетКредит.Наименование,ОграничениеДлиныНаименования)+
	?(СтрДлина(СчетКредит.Наименование)>ОграничениеДлиныНаименования,"...","")+")";
    Инф = Инф+" / "+?(ПустоеЗначение(Контрагент) = 1, "<...>", Лев(Контрагент, 35));
	Инф = Инф+" / "+?(ПустоеЗначение(ДокументОснование) = 1, "<...>", Лев(ДокументОснование, 35));
	
	Возврат Инф;

КонецФункции // ИнформацияОПроводке()

//******************************************************************************
// ИнформацияОДоговоре()
//
// Возвращаемое значение:
//  Строка - Наименование валюты договора и валюты оплаты.
//
// Вызывается из формул элементов диалога:
//  Текст "ИнформацияОДоговоре".
//
// Описание:
//  Формирует строку, содержащую наименование валюты договора и валюты оплаты.
//
Функция ИнформацияОДоговоре() 
	
	Стр = "";
	Если Договор.Выбран() = 1 Тогда
		Если Договор.ВалютаДоговора.Выбран() = 1 Тогда
			Если Договор.ОплатаДоговора = 1 Тогда
				Стр = "Валюта оплаты: рубли";
			Иначе
				Стр = "Валюта оплаты: " + Договор.ВалютаДоговора;
			КонецЕсли;
		КонецЕсли;	    
	КонецЕсли;
	Возврат Стр;
	
КонецФункции // ИнформацияОДоговоре()

//******************************************************************************
// УправлениеКурсом(ИзменитьКурс)
//
// Параметры:
//  ИзменитьКурс - Число. 1 - установить новый курс валюты, 0 - не изменять.
//
// Описание:
//  При выбранной иностранной валюте делает видимым поле "Курс" и записывает
// в него значение из справочника.
//
Процедура УправлениеКурсом(ИзменитьКурс=0)
	
	ВидимостьКурса = 0;
	Если Договор.ВалютаДоговора.Выбран() = 1 Тогда
		Если Договор.ОплатаДоговора = 2 Тогда
		    ВидимостьКурса = 1;
		КонецЕсли;
	КонецЕсли;
	
	Форма.ПодписьКурса.Видимость(ВидимостьКурса);
	Форма.Курс.Видимость(ВидимостьКурса);
	
	Если ИзменитьКурс = 1 Тогда
		Если ВидимостьКурса = 1 Тогда
		    Курс = Договор.ВалютаДоговора.Курс.Получить(ДатаДок);
			
		Иначе
			Курс = 0;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // УправлениеКурсом()

//*****************************************************************************
// ПриВыбореДоговора()
//
// Вызывается из формул элементов диалога:
//  Поле ввода "Договор"
// 
// Описание:
//  Устанавливает значение курса валюты.
//
Процедура ПриВыбореДоговора()
    Если Договор.АвтоОбработкаНДС=1 Тогда
		Если Вопрос ("По договору """+Договор+""" Записи книги покупок формируются автоматически!
		|Для формирования Записей книги покупок следует использовать документ
		|""Формирование записей книги продаж"". Продолжить?", "Да+Нет") = "Нет" Тогда
			//Предупреждение("По договору """+Договор+""" Записи книги покупок формируются автоматически");
			Договор = "";			
			Возврат;
		КонецЕсли;
	КонецЕсли;
	глПриВыбореДоговора(Контрагент, Договор);
	УправлениеКурсом(1);
	
КонецПроцедуры // ПриВыбореДоговора()

//*****************************************************************************
// ПриВыбореСубсчета19()
//
// Вызывается из формул элементов диалога:
//  Поле со списком "СписокСубсчетов19".
//
// Описание:
//  Устанавливает значение реквизита Субсчет19 в зависимости от выбранного 
// элемента списка "СписокСубсчетов19".
//
Процедура ПриВыбореСубсчета19()
	
	Субсчет19 = СписокСубсчетов19.ПолучитьЗначение(СписокСубсчетов19.ТекущаяСтрока());
	
КонецПроцедуры // ПриВыбореСубсчета19()

//*****************************************************************************
// ДобавитьСчетВ_Список(Сч)
//
// Параметры:
//  Сч - Счет.Основной. Счет, который требуется добавить в список.
//
// Описание:
//  Формирует элемент списка "СписокСубсчетов19".
//
Процедура ДобавитьСчетВ_Список(Сч)

	Значение = СчетПоКоду(Сч);
	Представление = Значение.Код + " """+ Значение.Наименование + """";
	СписокСубсчетов19.ДобавитьЗначение(Значение, Представление);
	
КонецПроцедуры // ДобавитьСчетВ_Список()

//*****************************************************************************
// ПриВыбореСтавкиНольПроцентов()
//
// Вызывается из формул элементов диалога:
//  Поле со списком "НДСпоСтавкеНольПроцентов".
//
// Описание:
//  Управляет диалогом и пересчетом числовых реквизитов документа.
//
Процедура ПриВыбореСтавкиНольПроцентов(Режим = 0)
	
	Если НДСпоСтавкеНольПроцентов = 1 Тогда
		Форма.СуммаБезНДС20.Доступность(0);
		Форма.НДС20.Доступность(0);
		Форма.СуммаБезНДС10.Доступность(0);
		Форма.НДС10.Доступность(0);
		Форма.СуммаСовсемБезНДС.Доступность(0);
		Если Режим = 1 Тогда
			СуммаБезНДС20 = 0;
			НДС20 = 0;
			СуммаБезНДС10 = 0;
			НДС10 = 0;
			СуммаСовсемБезНДС = 0;
		КонецЕсли;
	Иначе
		Форма.СуммаБезНДС20.Доступность(1);
		Форма.НДС20.Доступность(1);
		Форма.СуммаБезНДС10.Доступность(1);
		Форма.НДС10.Доступность(1);
		Форма.СуммаСовсемБезНДС.Доступность(1);
	КонецЕсли;
	
КонецПроцедуры // ПриВыбореСтавкиНольПроцентов()

//*****************************************************************************
// ПриВыбореСчета()
//
// Вызывается из формул элементов диалога:
//  Поле со списком "КоррСчет".
//
// Описание:
//  Назначает тип реквизитам неопределенного вида "Субконто1", "Субконто2" и
// "Субконто3".
//
Процедура ПриВыбореСчета()
	
	Для А = 1 По 3 Цикл
		НазначитьТип("Субконто"+А,КоррСчет.ВидСубконто(А));
	КонецЦикла;
	
КонецПроцедуры // ПриВыбореСчета()

//******************************************************************************
// ПриВыбореЗачестьАванс()
//
// Вызывается из формул элементов диалога:
//  Флажок "Аванс".
//
// Описание:
//  Управляет видимостью слоя "Корреспондирующие счета".
//
Процедура ПриВыбореЗачестьАванс()
	    
	КоличествоЗакладок = Форма.Закладки.РазмерСписка();
	Если (Аванс = 1) и (КоличествоЗакладок = 2) Тогда
		Форма.Закладки.УдалитьЗначение(КоличествоЗакладок);
	
	ИначеЕсли (Аванс = 0) и (КоличествоЗакладок = 1) Тогда
		Форма.Закладки.ДобавитьЗначение("Общий,Корреспонденции", "Корреспондирующие счета");
	КонецЕсли;
	
КонецПроцедуры // ПриВыбореЗачестьАванс() 

//*****************************************************************************
Процедура ДопЛист(Режим = 0)
	Если ЗаписьДопЛистаПК = 1 Тогда
		Форма.ДатаДопЛистаПК.Доступность(1);
		Если Режим = 1 Тогда
			ДатаДопЛистаПК = ?(ДокументОснование.Выбран() = 1, ДокументОснование.ДатаДок, "");
		КонецЕсли;
	Иначе
		Форма.ДатаДопЛистаПК.Доступность(0); 
		Если Режим = 1 Тогда
			ДатаДопЛистаПК = "";
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

//*****************************************************************************
// Запонить(ДокОсн)
//
// Описание:
//  Заполняет реквизиты документа на основании выбранного счета-фактруры.
//
Функция Заполнить(ДокОсн)
	
	КурсПересчета = 1;
	Кратность = 1;
	
	Если ПустоеЗначение(ДокОсн) = 1 Тогда
		Возврат 0;
	
	ИначеЕсли ((ДокОсн.Вид() = "Выписка") или (ДокОсн.Вид() = "РасходныйОрдер")) Тогда
		
		ТаблицаОплаты = СоздатьОбъект("ТаблицаЗначений");
		Если ДокОсн.Вид() = "Выписка" Тогда
			ДокОсн.ВыгрузитьТабличнуюЧасть(ТаблицаОплаты);
		Иначе
			ТаблицаОплаты.НоваяКолонка("КоррСчет");
			ТаблицаОплаты.НоваяКолонка("Субконто1");
			ТаблицаОплаты.НоваяКолонка("Субконто2");
			ТаблицаОплаты.НоваяКолонка("Расход");
			ТаблицаОплаты.НоваяСтрока();
			ТаблицаОплаты.КоррСчет = ДокОсн.КоррСчет;
			ТаблицаОплаты.Субконто1 = ДокОсн.Субконто1;
			ТаблицаОплаты.Субконто2 = ДокОсн.Субконто2;
			ТаблицаОплаты.Расход = ДокОсн.Сумма;
		КонецЕсли;
		
		ТаблицаВыбора = СоздатьОбъект("ТаблицаЗначений");
		ТаблицаВыбора.НоваяКолонка("Контрагент",,,,, 25);
		ТаблицаВыбора.НоваяКолонка("Договор",,,,, 25);
		ТаблицаВыбора.НоваяКолонка("Сумма",,,,, 10);
		
		Сч60_2 = СчетПоКоду("60.2");
		Сч60_7 = СчетПоКоду("60.7");
		Сч60_22 = СчетПоКоду("60.22");
		
		Если ПустоеЗначение(глТекущаяСтрока) = 1 Тогда
			ТаблицаОплаты.ВыбратьСтроки();
			Пока ТаблицаОплаты.ПолучитьСтроку() = 1 Цикл
				Если ТаблицаОплаты.Расход = 0 Тогда
				    Продолжить;
				КонецЕсли;
				
				Если (ТаблицаОплаты.КоррСчет = Сч60_2) или
					 (ТаблицаОплаты.КоррСчет = Сч60_7) или
					 (ТаблицаОплаты.КоррСчет = Сч60_22) Тогда
				
				ИначеЕсли (ТипЗначенияСтр(ТаблицаОплаты.Субконто1) = "Справочник") и
					 	  (ТипЗначенияСтр(ТаблицаОплаты.Субконто2) = "Справочник") Тогда
					
					 Если (ТаблицаОплаты.Субконто1.Вид() = "Контрагенты") и 
						 (ТаблицаОплаты.Субконто2.Вид() = "Договоры") Тогда
						ТаблицаВыбора.НоваяСтрока();
						ТаблицаВыбора.Контрагент = ТаблицаОплаты.Субконто1;
						ТаблицаВыбора.Договор = ТаблицаОплаты.Субконто2;
						ТаблицаВыбора.Сумма = ТаблицаОплаты.Расход;
				    КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		
			НомСтроки = 0;
			Если ТаблицаВыбора.КоличествоСтрок() = 0 Тогда
				Если ДокОсн.Вид() = "Выписка" Тогда
					Предупреждение("Указанная выписка не отражает погашения
								   |задолженности перед поставщиком");
					
				Иначе
					Предупреждение("Указанный расходный кассовый ордер не отражает
								   |погашения задолженности перед поставщиком");
				КонецЕсли;
				
				Возврат 0;
				
			ИначеЕсли ТаблицаВыбора.КоличествоСтрок() = 1 Тогда
				НомСтроки = 1;
				
			ИначеЕсли ТаблицаВыбора.ВыбратьСтроку(НомСтроки, "Укажите оплату") = 0 Тогда
				Возврат 0;
			КонецЕсли;
		
		Иначе
			НомСтроки = 1;              
			ТаблицаОплаты.ПолучитьСтрокуПоНомеру(глТекущаяСтрока);
			ТаблицаВыбора.НоваяСтрока();
			ТаблицаВыбора.Контрагент = ТаблицаОплаты.Субконто1;
			ТаблицаВыбора.Договор = ТаблицаОплаты.Субконто2;
			ТаблицаВыбора.Сумма = ТаблицаОплаты.Расход;
		КонецЕсли;
		ТаблицаВыбора.ПолучитьСтрокуПоНомеру(НомСтроки);
		
		КонтекстЖурнала = СоздатьОбъект("СписокЗначений");
		КонтекстЖурнала.Установить("ДатаБИ", ДатаДок);
    	КонтекстЖурнала.Установить("Контрагент", ТаблицаВыбора.Контрагент);
		ОткрытьФормуМодально("Журнал.СчетаФактурыПолученные", КонтекстЖурнала);
		Если ТипЗначенияСтр(КонтекстЖурнала) = "Документ" Тогда
			Док = КонтекстЖурнала;
			Если Док.Вид() = "СчетФактураПолученный" Тогда
			    ДокОтгрузки = Док.ДокументОприходования;
			Иначе
				ДокОтгрузки = Док;
			КонецЕсли;
			
			Если ДокОтгрузки.Выбран() = 1 Тогда
				Если ПустоеЗначение(ДокОтгрузки.Договор.ВалютаДоговора) = 1 Тогда
				    СуммаОтгрузкиВсего = ДокОтгрузки.Итог("Всего");
				
				ИначеЕсли ДокОтгрузки.Договор.ОплатаДоговора = 2 Тогда
					СуммаОтгрузкиВсего = ДокОтгрузки.Итог("Всего");
					
				Иначе
					КурсПересчета = ДокОтгрузки.Договор.ВалютаДоговора.Курс.Получить(ДокОсн.ДатаДок);
					Кратность = ДокОтгрузки.Договор.ВалютаДоговора.Кратность.Получить(ДокОсн.ДатаДок);
					Кратность = ?(Кратность = 0, 1, Кратность);
					Если ДокОтгрузки.Договор.ВестиУчетРасчетовУЕ = 1 Тогда
						Кратность = Кратность * 100 / (100 + ДокОтгрузки.Договор.ПроцентКорректировкиКурсаУЕ);
					КонецЕсли;
			    	СуммаОтгрузкиВсего = ДокОтгрузки.Итог("Всего")*КурсПересчета/Кратность;
				КонецЕсли;
			Иначе
				Предупреждение("В счете-фактуре не обнаружена ссылка на документ поступления");
				Возврат 0;
			КонецЕсли;
			
			Если СуммаОтгрузкиВсего = 0 Тогда
			    Предупреждение("В документе поступления не указана сумма");
				Возврат 0;
			КонецЕсли;
			
			ДатаОплаты = Формат(ДокОсн.ДатаДок, "Д");
			СуммаОплаты = ТаблицаВыбора.Сумма;
			
		Иначе
			Возврат 0;
		КонецЕсли;

	Иначе
		Док = ДокОсн;
		ДатаОплаты = Формат(ДатаДок, "Д");
		СуммаОплаты = 0;
		СуммаОтгрузкиВсего = 0
	КонецЕсли;
	
	Если (Док.Вид() = "УслугиСтороннихОрганизаций") или
		 (Док.Вид() = "ПоступлениеТоваров") или
		 (Док.Вид() = "ПоступлениеМатериалов") или
		 (Док.Вид() = "ПоступлениеОборудования") или
		 (Док.Вид() = "ПоступлениеОС") или
		 (Док.Вид() = "ПоступлениеНМА") Тогда 
		
		Если Док.Вид() = "ПоступлениеТоваров" Тогда
			Если ((Док.ВидПоступления=4) или (Док.ВидПоступления=13)) и (Док.ПокупателемВыставляетсяСчетФактураНаВозврат = 0) и (Док.ВариантОтраженияВозврата = 1) Тогда
				СФ=СоздатьОбъект("Документ");
				СФ.ВыбратьПодчиненныеДокументы(Док.ДокументОснование.ДатаДок,Док.ДатаДок,Док.ДокументОснование);
				Пока СФ.ПолучитьДокумент()=1 Цикл
					Если СФ.Вид()="СчетФактура" Тогда
						Прервать;
					КонецЕсли;
				КонецЦикла;
				Если СФ.Вид()<>"СчетФактура" Тогда
					СФ.НайтиДокумент(Док.ТекущийДокумент());
				КонецЕсли;
				//Если СФ.Вид() = "ПоступлениеТоваров" Тогда
				//	Продолжить;
				//КонецЕсли; 
			Иначе
				Если ПустоеЗначение(Док.ДатаНомерСчетаФактуры)=1 Тогда
					Предупреждение("Выбранный документ не регистрирует 
					|получения счета-фактуры");
					Возврат 0;
				КонецЕсли;
			КонецЕсли;		 	
		ИначеЕсли ПустоеЗначение(Док.ДатаНомерСчетаФактуры) = 1 Тогда
			Предупреждение("Выбранный документ не регистрирует 
			|получения счета-фактуры");
			Возврат 0;
		КонецЕсли; 
		
		ДатаНомерСФ = "";
		Если Док.Вид() = "ПоступлениеТоваров" Тогда 
			Если ((Док.ВидПоступления=4) или (Док.ВидПоступления=13)) и (Док.ПокупателемВыставляетсяСчетФактураНаВозврат = 0) и (Док.ВариантОтраженияВозврата = 1) Тогда					
				ДатаНомерСФ 	= Формат(СФ.ДатаДок, "Д") + " №" + 
				СокрЛП(глПреобразоватьНомерДок(СФ.НомерДок, 0, 0)) + "  НДС по возврату от покупателя";                
			ИначеЕсли ((Док.ВидПоступления=4) или (Док.ВидПоступления=13)) и (Док.ПокупателемВыставляетсяСчетФактураНаВозврат = 1) и (Док.ВариантОтраженияВозврата = 1) и (ПустоеЗначение(Док.ДатаНомерСчетаФактуры) = 0) Тогда					
				ДатаНомерСФ 	= Док.ДатаНомерСчетаФактуры + "  НДС по возврату от покупателя";                
			КонецЕсли;
		КонецЕсли;
		
		ДатаОприходования = Док.ДатаДок;
		ДатаНомерСчетаФактуры = ?(ПустоеЗначение(ДатаНомерСФ) = 0, ДатаНомерСФ, Док.ДатаНомерСчетаФактуры);
		
	ИначеЕсли (Док.Вид() = "СчетФактура") Тогда
		ДатаОплаты = Формат(Док.ДатаДок, "Д");
		ДатаОприходования = ДатаДок;
		ДатаНомерСчетаФактуры = Формат(ДокОсн.ДатаДок, "Д") +
		                   " №" + глПреобразоватьНомерДок(ДокОсн.НомерДок);
						   
	Иначе
		ДатаОприходования = Док.ДатаОприходования;
		ДатаНомерСчетаФактуры = Док.ДатаНомерСчетаФактуры;
	КонецЕсли;
	
	Контрагент = Док.Контрагент;
	КоррСчет = СчетПоКоду("68.2");
	ПриВыбореСчета();
	Субконто1 = Перечисление.ВидыПлатежейВБюджет.Налог;
	
	Если Док.Вид() = "СчетФактураПолученный" Тогда
		Субсчет19 = Док.Субсчет19;
		
	ИначеЕсли (Док.Вид() = "ПоступлениеТоваров") или
		 (Док.Вид() = "ПоступлениеМатериалов") Тогда
		Субсчет19 = СчетПоКоду("19.3");
		
	ИначеЕсли (Док.Вид() = "ПоступлениеОборудования") Тогда
		Субсчет19 = СчетПоКоду("19.1");
		
	ИначеЕсли Док.Вид() = "УслугиСтороннихОрганизаций" Тогда
		Субсчет19 = СчетПоКоду("19.3");
		Если Док.ДокументПоступления.Выбран() = 1 Тогда
			Если (Док.ДокументПоступления.Вид() = "ПоступлениеОС")
			или (Док.ДокументПоступления.Вид() = "ПоступлениеОборудования") Тогда
				Субсчет19 = СчетПоКоду("19.1");
			ИначеЕсли Док.ДокументПоступления.Вид() = "ПоступлениеНМА" Тогда
				Субсчет19 = СчетПоКоду("19.2");
			КонецЕсли;
		КонецЕсли;
		 	
	ИначеЕсли Док.Вид() = "ПоступлениеОС" Тогда
		Субсчет19 = СчетПоКоду("19.1");
		
	ИначеЕсли Док.Вид() = "ПоступлениеНМА" Тогда
		Субсчет19 = СчетПоКоду("19.2");
		
	Иначе
		Субсчет19 = СчетПоКоду("19.3");
	КонецЕсли;
	
	Договор = Док.Договор;
	Если (Договор.Выбран() = 1) и (СуммаОплаты = 0) Тогда
		Если Договор.ВалютаДоговора.Выбран() = 1 Тогда
			Курс = Договор.ВалютаДоговора.Курс.Получить(ДатаДок);
			Кратн = Договор.ВалютаДоговора.Кратность.Получить(ДатаДок);
			Если Договор.ОплатаДоговора = 1 Тогда
			    КурсПересчета = Курс;
				Кратность = ?(Кратн=0, 1, Кратн);
				
				Если Договор.ВестиУчетРасчетовУЕ = 1 Тогда
					Кратность = Кратность * 100 / (100 + Договор.ПроцентКорректировкиКурсаУЕ);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	// Реквизиты, соответствующие графам книги покупок.
	Если (Док.Вид() = "УслугиСтороннихОрганизаций") или
		 (Док.Вид() = "ПоступлениеТоваров") или
		 (Док.Вид() = "ПоступлениеМатериалов") или
		 (Док.Вид() = "ПоступлениеОборудования") или
		 (Док.Вид() = "ПоступлениеОС") или
		 (Док.Вид() = "ПоступлениеНМА") Тогда
		 	
		ФормироватьПроводки = ?(Док.НДСвключатьВСтоимость = 1, 0, 1);
		Всего = (Док.Итог("Всего") - Док.Итог("НП"))*КурсПересчета/Кратность;
		СуммаБезНДС20=0;
		СуммаБезНДС10=0;
		НДС20=0;
		НДС10=0;
		СуммаСовсемБезНДС=0;
		
		Док.ВыбратьСтроки();
		Пока Док.ПолучитьСтроку() = 1 Цикл
			Если Док.Вид() = "ПоступлениеТоваров" Тогда
				Если Док.Товар.ТипТовара = Перечисление.ТипыТоваров.НаКомиссии Тогда
					Продолжить;
				КонецЕсли;
			КонецЕсли;
			СуммаБезНалогов = (Док.Всего - Док.НДС - Док.НП)*КурсПересчета/Кратность;
			Если СуммаБезНалогов > 0 Тогда
				СтавкаНДС = 100*Док.НДС/(Док.Всего - Док.НДС - Док.НП);
			Иначе
				СтавкаНДС = 20;
			КонецЕсли;
	
			Если СтавкаНДС>10.5 Тогда
				НДС20=НДС20+Док.НДС*КурсПересчета/Кратность;
			    СуммаБезНДС20=СуммаБезНДС20+СуммаБезНалогов;
			ИначеЕсли СтавкаНДС>0 Тогда
				НДС10=НДС10+Док.НДС*КурсПересчета/Кратность;
				СуммаБезНДС10=СуммаБезНДС10+СуммаБезНалогов;
			Иначе
				СуммаСовсемБезНДС=СуммаСовсемБезНДС+СуммаБезНалогов;
			КонецЕсли;
		КонецЦикла;
		НДСпоСтавкеНольПроцентов = 0;
		ПриВыбореСтавкиНольПроцентов();
		
	ИначеЕсли Док.Вид() = "СчетФактураПолученный" Тогда
		ФормироватьПроводки = Док.ФормироватьПроводки;
		Всего = Док.Всего*КурсПересчета/Кратность;
		СуммаБезНДС20=Док.СуммаБезНДС20*КурсПересчета/Кратность;
		СуммаБезНДС10=Док.СуммаБезНДС10*КурсПересчета/Кратность;
		НДС20=Док.НДС20*КурсПересчета/Кратность;
		НДС10=Док.НДС10*КурсПересчета/Кратность;
		СуммаСовсемБезНДС=Док.СуммаСовсемБезНДС*КурсПересчета/Кратность;
		Если Док.НДСпоСтавкеНольПроцентов = 1 Тогда
			НДС10 = 0;
			НДС20 = 0;
			СуммаБезНДС10 = 0;
			СуммаБезНДС20 = 0;
			СуммаСовсемБезНДС = Всего;
		КонецЕсли;               
		НДСпоСтавкеНольПроцентов = Док.НДСпоСтавкеНольПроцентов;
		ПриВыбореСтавкиНольПроцентов();
		
	ИначеЕсли Док.Вид() = "СчетФактура" Тогда
		Аванс = ДокОсн.Аванс;
		Если Аванс = 0 Тогда
		    Предупреждение("Счет-фактура должен быть на аванс");
			Возврат 0;
		КонецЕсли;
	
		ДополнительнаяИнформация = "зачет НДС с аванса";
		
		ФормироватьПроводки = 1;
		НДСпоСтавкеНольПроцентов = Док.НДСпоСтавкеНольПроцентов;
		Всего = Док.Итог("Всего");
		СуммаБезНДС20=0;
		СуммаБезНДС10=0;
		НДС20=0;
		НДС10=0;
		СуммаСовсемБезНДС=0;
		
		Док.ВыбратьСтроки();
		Пока Док.ПолучитьСтроку() = 1 Цикл
			СуммаБезНалогов = Док.Сумма;
			Если Док.НДСпоСтавкеНольПроцентов = 0 Тогда
		        СтавкаНДС = Док.СтавкаНДС.Ставка;
				Если СтавкаНДС>10.5 Тогда
					НДС20=НДС20+Док.НДС;
				    СуммаБезНДС20=СуммаБезНДС20+СуммаБезНалогов;
				ИначеЕсли СтавкаНДС>0 Тогда
					НДС10=НДС10+Док.НДС;
					СуммаБезНДС10=СуммаБезНДС10+СуммаБезНалогов;
				Иначе
					СуммаСовсемБезНДС=СуммаСовсемБезНДС+СуммаБезНалогов;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		// На основании счета-фактуры до 30 июля 2001 могли быть введены записи книги продаж
		ЗаписиКнигиПродаж = СоздатьОбъект("Документ");
		Если ЗаписиКнигиПродаж.ВыбратьПодчиненныеДокументы(, РабочаяДата(), ДокОсн) = 1 Тогда
			Пока ЗаписиКнигиПродаж.ПолучитьДокумент() = 1 Цикл
				Если (ЗаписиКнигиПродаж.ПометкаУдаления() = 0) и (ЗаписиКнигиПродаж.ТекущийДокумент() <> ТекущийДокумент()) Тогда
					Если ЗаписиКнигиПродаж.Вид() = "ЗаписьКнигиПродаж" Тогда
						Если НДСпоСтавкеНольПроцентов = 0 Тогда
							ЗаписиКнигиПродаж.ВыбратьСтроки();
							Пока ЗаписиКнигиПродаж.ПолучитьСтроку() = 1 Цикл
								СуммаБезНалогов = ЗаписиКнигиПродаж.Сумма;
								СтавкаНДС = ЗаписиКнигиПродаж.СтавкаНДС.Ставка;
								Если СтавкаНДС>10.5 Тогда
									НДС20 = НДС20 + ЗаписиКнигиПродаж.НДС;
								    СуммаБезНДС20 = СуммаБезНДС20 + СуммаБезНалогов;
								ИначеЕсли СтавкаНДС>0 Тогда
									НДС10 = НДС10 + ЗаписиКнигиПродаж.НДС;
									СуммаБезНДС10 = СуммаБезНДС10 + СуммаБезНалогов;
								Иначе
									СуммаСовсемБезНДС = СуммаСовсемБезНДС + СуммаБезНалогов;
								КонецЕсли;
							КонецЦикла;
							Всего = Всего + ЗаписиКнигиПродаж.Итог("Всего");
						КонецЕсли;
						Сообщить("По данному счету-фактуре уже существует "+
							глПредставлениеДокумента(ЗаписиКнигиПродаж.ТекущийДокумент())+
							" на сумму "+ЗаписиКнигиПродаж.Итог("Всего"));
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		ПриВыбореСтавкиНольПроцентов();
	КонецЕсли;
	
	Если (СуммаОплаты > 0) и (СуммаОплаты < СуммаОтгрузкиВсего) Тогда // сумма оплаты указана явно (из выписки)
		КоэффициентЧастичнойОплаты = СуммаОплаты/СуммаОтгрузкиВсего;
		Всего = Всего*КоэффициентЧастичнойОплаты;
		СуммаБезНДС20 = СуммаБезНДС20*КоэффициентЧастичнойОплаты;
		СуммаБезНДС10 = СуммаБезНДС10*КоэффициентЧастичнойОплаты;
		НДС20 = НДС20*КоэффициентЧастичнойОплаты;
		НДС10 = НДС10*КоэффициентЧастичнойОплаты;
		СуммаСовсемБезНДС = СуммаСовсемБезНДС*КоэффициентЧастичнойОплаты;
	КонецЕсли;
	
	// Уменьшим сумму оплаты на сумму записей книги покупок уже введенных на основании 
	// данного счета-фактуры.
	Если ((ДокОсн.Вид() = "Выписка") или (ДокОсн.Вид() = "РасходныйОрдер")) Тогда
	Иначе
		Запись = СоздатьОбъект("Документ");
		Запись.ВыбратьПодчиненныеДокументы(, РабочаяДата(), Док);
		Пока Запись.ПолучитьДокумент() = 1 Цикл
			Если (Запись.ПометкаУдаления() = 0) и (Запись.Вид() = "ЗаписьКнигиПокупок") и
				 (Запись.ТекущийДокумент() <> ТекущийДокумент()) Тогда
				Всего = Всего - Запись.Всего;
				СуммаБезНДС20 = СуммаБезНДС20 - Запись.СуммаБезНДС20;
				СуммаБезНДС10 = СуммаБезНДС10 - Запись.СуммаБезНДС10;
				НДС20 = НДС20 - Запись.НДС20;
				НДС10 = НДС10 - Запись.НДС10;
				СуммаСовсемБезНДС = СуммаСовсемБезНДС - Запись.СуммаСовсемБезНДС;
			    Сообщить("По выбраному основанию уже существует "+
					глПредставлениеДокумента(Запись.ТекущийДокумент())+" на сумму "+Запись.Всего);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если Договор.АвтоОбработкаНДС=1 Тогда
	    Предупреждение("По договору """+Договор+""" Записи книги покупок формируются автоматически");
		Договор = "";
		Возврат 0;
	КонецЕсли;
	
	ДокументОснование = Док;
	Возврат 1;

КонецФункции // Заполнить()

//*****************************************************************************
// ПриВыбореОснования(ДокОсн)
//
// Описание:
//  Устанавливает значения реквизитов документа в зависимости от значений
// реквизитов документа основания.
//
Процедура ПриВыбореОснования(ДокОсн)
	
	Если ПустоеЗначение(ДокОсн) = 1 Тогда
		Если ДокОсн.Вид() = "СчетФактураПолученный" Тогда
			Форма.НДСпоСтавкеНольПроцентов.Доступность(0);
		Иначе
			ДокОсн.ВыбратьСтроки();
			ВсегоНДСоснования = 0;
			Пока ДокОсн.ПолучитьСтроку() = 1 Цикл
				ВсегоНДСоснования = ВсегоНДСоснования + ДокОсн.НДС;
			КонецЦикла;
			Форма.НДСпоСтавкеНольПроцентов.Доступность(?(ВсегоНДСоснования=0, 1, 0));
		КонецЕсли;
	КонецЕсли;                                
	ПриВыбореСтавкиНольПроцентов();
	СписокСубсчетов19.ТекущаяСтрока(СписокСубсчетов19.НайтиЗначение(Субсчет19));
	УправлениеКурсом();
	
КонецПроцедуры // ПриВыбореОснования()

//*****************************************************************************
// ЗаполнитьНаОсновании(ДокОсн)
//
// Параметры:
//  ДокОсн - Документ. Документ-основание.
//
// Возвращаемое значение:
//  Число  - 1 - реквизиты заполнены, 0 - не заполнены.
//
// Вызывается из формул элементов диалога:
//  Кнопка "КнопкаЗаполнить".
//
// Описание:
//  Устанавливает значения реквизитов документа в зависимости от значений
// реквизитов документа основания.
//
Функция ЗаполнитьНаОсновании(ДокОсн="")
	
	Если ДокОсн = "" Тогда
	    ДокОсн = ДокументОснование;
	КонецЕсли;
	
	Если ПустоеЗначение(ДокОсн) = 1 Тогда
	    Предупреждение("Выберите документ-основание!");
		Возврат 0;
	КонецЕсли;
	
	Если Вопрос("Запись книги покупок будет заполнена на основании
				|выбранного документа. Продолжить?", "Да+Нет" ) = "Да" Тогда
		Док = СоздатьОбъект("Документ");
		Док.НайтиДокумент(ДокОсн);
	    Если Заполнить(Док.ТекущийДокумент()) = 1 Тогда
	        ПриВыбореОснования(Док.ТекущийДокумент());
			Возврат 1;
		КонецЕсли;
	КонецЕсли;
	
	Возврат 0;
	
КонецФункции // ЗаполнитьНаОсновании()

//*****************************************************************************
// ПриВыбореКонтрагента()
//
// Вызывается из формул элементов диалога:
//  Поле ввода "Контрагент".
//
// Описание:
//  Выполняет проверку соответсвия Договора и документа-основания выбранному
// контрагенту.
//
Процедура ПриВыбореКонтрагента()
	
	глПриВыбореКонтрагента(Контрагент, Договор, ДокументОснование);
	ПриВыбореОснования(ДокументОснование);
	УправлениеКурсом(1);
	
КонецПроцедуры // ПриВыбореКонтрагента()

////////////////////////////////////////////////////////////////////////////////
// ПРЕДОПРЕДЕЛЕННЫЕ ПРОЦЕДУРЫ
//

//*****************************************************************************
// Предопределенная процедура
//
Процедура ВводНового(Копирование)
	глЗаполнитьШапку(Контекст, Копирование);
	Новый = 1;
	Если Копирование = 1 Тогда
		Возврат;
	КонецЕсли;
	Субсчет19 = СчетПоКоду("19.3");
	КоррСчет = СчетПоКоду("68.2");
	ПриВыбореСчета();
	Субконто1 = Перечисление.ВидыПлатежейВБюджет.Налог;
	ФормироватьПроводки = 1;
	
КонецПроцедуры // ВводНового()

//*****************************************************************************
// Предопределенная процедура
//
Процедура ВводНаОсновании(ДокОсн)
	
	Новый = 1;
	Если Заполнить(ДокОсн) = 0 Тогда
		СтатусВозврата(0); Возврат;
	КонецЕсли;
	Комментарий = "Введен на основании: "+глПредставлениеДокумента(ДокОсн);
	
КонецПроцедуры // ВводНаОсновании()

//*****************************************************************************
// Предопределенная процедура
//
Процедура ПриОткрытии()
	
	ПриЗаписиПерепроводить(1);
	глПроверкаРазрешенияРедактирования(Контекст);
	Если Форма.ТолькоПросмотр() = 1 Тогда
		Форма.КнопкаОК.Доступность(0);
		Форма.КнопкаЗаписать.Доступность(0);
		Форма.КнопкаЗаполнить.Доступность(0); 
		Форма.кнОчиститьОснование.Доступность(0);
	КонецЕсли;
	НачальнаяДатаДокумента = ДатаДок;
	
	ДобавитьСчетВ_Список("19.1");
	ДобавитьСчетВ_Список("19.2");
	ДобавитьСчетВ_Список("19.3");
	ДобавитьСчетВ_Список("19.4");
	
	Форма.ИспользоватьСлой("Общий,Основной", 2);
	Форма.ИспользоватьЗакладки(1);
	Форма.Закладки.ДобавитьЗначение("Общий,Основной", "Сведения о покупке");
	ПриВыбореЗачестьАванс();
	
	ПриВыбореОснования(ДокументОснование); 
	ДопЛист();

КонецПроцедуры // ПриОткрытии()

//*****************************************************************************
// Предопределенная процедура
//
Процедура ПриВыбореЗакладки(НомерЗакладки, ЗначениеЗакладки)
	
	Форма.ИспользоватьСлой(ЗначениеЗакладки, 2);
	Если НомерЗакладки = 1 Тогда
	    УправлениеКурсом();
	КонецЕсли;
	
КонецПроцедуры // ПриВыбореЗакладки()

//*****************************************************************************
// Предопределенная процедура
//
Процедура ПриНачалеВыбораЗначения(ЭлементДиалога, Флаг)
	
	Если ЭлементДиалога = "ДокументОснование" Тогда
		Флаг = 0;
		КонтекстЖурнала = СоздатьОбъект("СписокЗначений");
		КонтекстЖурнала.Установить("ДатаБИ", ДатаДок);
		Если Контрагент.Выбран() = 1 Тогда
	    	КонтекстЖурнала.Установить("Контрагент", Контрагент);
		КонецЕсли;
		Если Аванс = 0 Тогда
			ОткрытьФорму("Журнал.СчетаФактурыПолученные", КонтекстЖурнала);
			
		Иначе
			ОткрытьФорму("Журнал.СчетаФактурыВыданные", КонтекстЖурнала);
		КонецЕсли;
		
	ИначеЕсли ЭлементДиалога = "ДатаОплаты" Тогда
		ВыбранноеЗначение = ?(ПустоеЗначение(Дата(СокрЛП(ДатаОплаты))) = 1, ДатаДок, Дата(СокрЛП(ДатаОплаты)));
		Если ВвестиЗначение(ВыбранноеЗначение, "Укажите дату оплаты счета-фактуры", "Дата") = 1 Тогда
			ДатаОплаты = ?(ПустоеЗначение(ВыбранноеЗначение)=1, "", Формат(ВыбранноеЗначение, "Д"));
		КонецЕсли;
		
	ИначеЕсли ЭлементДиалога = "ДополнительнаяИнформация" Тогда
		Флаг = 0;
		ДопИнформация = СоздатьОбъект("СписокЗначений");
		ДопИнформация.ДобавитьЗначение("Частичная оплата");
		ДопИнформация.ВыбратьЗначение(ДополнительнаяИнформация,,,,2);
	КонецЕсли;
	
КонецПроцедуры // ПриНачалеВыбораЗначения()

//*****************************************************************************
// Предопределенная процедура
//
Процедура ОбработкаВыбораЗначения(ВыбЗначение, ЭлементДиалога, Флаг)
	
	Если ЭлементДиалога = "ДокументОснование" Тогда
		Флаг = ЗаполнитьНаОсновании(ВыбЗначение);
	КонецЕсли;
                     
КонецПроцедуры // ОбработкаВыбораЗначения()

//*****************************************************************************
// Предопределенная процедура
//
Процедура ПриЗаписи()
	
	Если глМожноЗаписатьДокумент(Контекст) = 0 Тогда
		СтатусВозврата(0);
		Возврат;
	ИначеЕсли глКонтрольДатыДокумента(Контекст, НачальнаяДатаДокумента) = 1 Тогда
		СтатусВозврата(0);
		Возврат;
	Иначе
		Если ((ЗаписьДопЛистаПК = 1) и (ПустоеЗначение(ДатаДопЛистаПК) = 1)) Тогда
			Если Вопрос("Не указана дата дополнительного листа.
						|Вернуться к редактированию документа?", "Да+Нет") = "Да" Тогда
				Сообщить("Документ не записан.", "i");					
				СтатусВозврата(0);
				Возврат; 
			Иначе
				СтатусВозврата(0);
				Форма.Закрыть(0);				
			КонецЕсли;
		КонецЕсли; 
	КонецЕсли; 
	
	ОплатаДоговора = 1;
	Если Договор.Выбран() = 1 Тогда
		Если Договор.ОплатаДоговора = 2 Тогда
		    Кратность = Договор.ВалютаДоговора.Кратность.Получить(ДатаДок);
			Кратность = ?(Кратность = 0, 1, Кратность);
			ОплатаДоговора = 2;
		КонецЕсли;
	КонецЕсли;
	
	Если ОплатаДоговора = 2 Тогда
	    Операция.СуммаОперации = Всего*Курс/Кратность;
		
	Иначе
		Операция.СуммаОперации = Всего;
	КонецЕсли;
	
	Операция.Содержание = "Запись книги покупок";
	
КонецПроцедуры // ПриЗаписи()

//******************************************************************************
// Предопределенная процедура
//
Процедура ПриЗакрытии()
	
	глОткрытьЖурнал(Контекст, Новый);	
	
КонецПроцедуры // ПриЗакрытии()

//*****************************************************************************
Новый = 0;

СписокДействий = СоздатьОбъект("СписокЗначений");
СписокДействий.ДобавитьЗначение("Отчет о движениях документа");
СписокДействий.ДобавитьЗначение("Структура подчиненности");
СписокДействий.ДобавитьЗначение("Ввести на основании");
СписокДействий.ДобавитьЗначение("Перейти  в журнал");