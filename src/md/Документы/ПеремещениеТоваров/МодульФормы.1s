////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ
//
Перем ТаблицаПечФорм;  // список печатных форм документа
Перем НомерТекущейФормы;
Перем СписокДействий; // для механизма кнопки "Действия"
Перем НачальнаяДатаДокумента; // для механизма контроля уникальности номеров
Перем Новый;
Перем КодВидаПеремещения;


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ МОДУЛЯ
//

//******************************************************************************
// ПолучитьСуммуНДС(БухИт, Таб)
//
// Параметры:
//  Таб - ТаблицаЗначений. Табличная часть полученного счета-фактуры.
//
// Возвращаемое значение:
//  Число - сумма НДС.
//
// Описание:
//  Определяет сумму НДС выделенного данным счетом-фактурой поставщика по 
// данному товару.
//
Функция ПолучитьСуммуНДС(БухИт="", Таб="")
	
	Если ПустоеЗначение(Таб) = 1 Тогда
	    Таб = СоздатьОбъект("ТаблицаЗначений");
		СчетФактура.ВыгрузитьТабличнуюЧасть(Таб);
		Ном = 0;
	    Если Таб.НайтиЗначение(Товар, Ном, "Товар") = 1 Тогда
			Таб.ПолучитьСтрокуПоНомеру(Ном);
		Иначе
			Возврат 0;
		КонецЕсли;
	КонецЕсли;
	
	Если Таб.Количество = 0 Тогда
	Иначе
		Если СчетФактура.Договор.ВалютаДоговора.Выбран() = 1 Тогда
			Кратность = СчетФактура.Договор.ВалютаДоговора.Кратность.Получить(СчетФактура.ДатаДок);
			Кратность = ?(Кратность = 0, 1, Кратность);
		    НДСзаЕдиницу = Таб.НДС/Таб.Количество*СчетФактура.Курс/Кратность;
			
		Иначе
			НДСзаЕдиницу = Таб.НДС/Таб.Количество;
		КонецЕсли;
	КонецЕсли;
	Возврат НДСзаЕдиницу*Количество;
	
КонецФункции // ПолучитьСуммуНДС()

//******************************************************************************
// ПриВключенииНДСВСтоимость()
//
Процедура ПриВключенииНДСВСтоимость()
	
	Форма.Контрагент.Видимость(НДСВключатьВСтоимость);
	Форма.СчетФактура.Видимость(НДСВключатьВСтоимость);
	Форма.НДС.Видимость(НДСВключатьВСтоимость);

КонецПроцедуры // ПриВключенииНДСВСтоимость()

//******************************************************************************
// УправлениеВидимостьюСлояКомиссия()
//
// Параметры:
//  РежимПроверки: 1 - анализировать все строки табличной части;
//                 0 - анализировать только текущую строку табличной части.
//
// Вызывается из формул элементов диалога:
//  Нет.
//
// Описание:
//  Анализиреутся необходимость в слое "Комиссия".
//
Процедура УправлениеВидимостьюСлояКомиссия(РежимПроверки = 0)
	
	СлойНужен = 0;
	                                                                                         
	// Этот слой нужен только в случае реализации (отгрузке) товаров, принятых на комиссию.
	Если (КодВидаПеремещения = 0) Тогда // если возврат поставщику.
		Форма.ИспользоватьСлой("Комиссия", 0);
	          
	// если слой уже виден, то и аналировать не надо
	ИначеЕсли Форма.ПодписьКомитента.Видимость() = 0 Тогда
	 	Если РежимПроверки = 0 Тогда
	 		Если Товар.Выбран() = 1 Тогда
		 	    Если (Товар.ТипНоменклатуры = Перечисление.ТипыНоменклатуры.Товар) 
				   и (Товар.ТипТовара = Перечисление.ТипыТоваров.НаКомиссии) Тогда
					СлойНужен = 1;
				КонецЕсли;
			КонецЕсли;
			
	 	Иначе // анализировать все строки табличной части
			ВыбратьСтроки();
			Пока ПолучитьСтроку() = 1 Цикл
				Если (Товар.ТипНоменклатуры = Перечисление.ТипыНоменклатуры.Товар) 
				   и (Товар.ТипТовара = Перечисление.ТипыТоваров.НаКомиссии) Тогда
				   	СлойНужен = 1;
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	
		Если СлойНужен = 1 Тогда
			Форма.ИспользоватьСлой("Комиссия", 1);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // УправлениеВидимостьюСлояКомиссия()

//******************************************************************************
// ПредставлениеКомитента()
//
// Вызывается из формул элементов диалога:
//  Текст "ПредставлениеКомитента"
//
// Возвращаемое значение:
//  Стрка - наименование комитента.
//
// Описание:
//  Формурует строку с наименованием комитента, поставившего товар.
//
Функция ПредставлениеКомитента()
	
	Перем Предст;

    Если Комитент.Выбран() = 1 Тогда
    	Предст = СокрЛП(Комитент.Наименование);
	Иначе
    	Предст = "<Автовыбор>";
	КонецЕсли;
	Возврат Предст;
	
КонецФункции // ПредставлениеКомитента()

//******************************************************************************
// ПолучитьКодВидаДвижения();
//
Функция ПолучитьКодВидаДвижения()
	Если (Склад.Выбран() = 0) или (СкладПолучатель.Выбран() =0) Тогда
	    Возврат 0;
	КонецЕсли;    
	Если (Склад.ТипСклада.Выбран() = 0) или (СкладПолучатель.ТипСклада.Выбран() =0) Тогда
	    Возврат 0;
	КонецЕсли;
	Если Склад.ТипСклада = Перечисление.ТипыСкладов.Оптовый Тогда
		Если СкладПолучатель.ТипСклада = Перечисление.ТипыСкладов.Розничный Тогда
		    Возврат 1;
		Иначе
			Возврат 0;
		КонецЕсли;
	Иначе
		Если СкладПолучатель.ТипСклада = Перечисление.ТипыСкладов.Розничный Тогда
		    Возврат 2;
		Иначе
			Возврат 3;
		КонецЕсли;
	КонецЕсли;
КонецФункции

//******************************************************************************
Функция СтрокаВидаПеремещения()                                                            
	Если Склад.Выбран() = 0 Тогда
	    Возврат "Не выбран склад отправитель"; 
	ИначеЕсли Склад.ТипСклада.Выбран() = 0 Тогда
	    Возврат "Для склада отправителя не установлен тип"; 
	КонецЕсли;
	Если СкладПолучатель.Выбран() = 0 Тогда
	    Возврат "Не выбран склад получатель";
	ИначеЕсли СкладПолучатель.ТипСклада.Выбран() = 0 Тогда
	    Возврат "Для склада получателя не установлен тип";
	КонецЕсли;
	Текст = "";
	Текст = Текст +?(КодВидаПеремещения = 0, "Опт -> Опт (складское перемещение)","");
	Текст = Текст +?(КодВидаПеремещения = 1, "Опт -> Розница (передача со склада в торговую точку)","");
	Текст = Текст +?(КодВидаПеремещения = 2, "Розница -> Розница (складское перемещение)","");
	Текст = Текст +?(КодВидаПеремещения = 3, "Розница -> Опт (передача из торговой точки на склад)","");
	
	Возврат Текст;
КонецФункции
//******************************************************************************
// ПредставлениеДоговораКомиссии()
//
// Вызывается из формул элементов диалога:
//  Текст "ПредставлениеДоговораКомиссии"
//
// Возвращаемое значение:
//  Стрка - наименование договора.
//
// Описание:
//  Формурует строку с наименованием договора с комитентом, по которому был
// поставлен товар.
//
Функция ПредставлениеДоговораКомиссии()
	
	Перем Предст;

    Если ДоговорКомиссии.Выбран() = 1 Тогда
    	Предст = СокрЛП(ДоговорКомиссии.Наименование);
	Иначе
    	Предст = "<Автовыбор>";
	КонецЕсли;
	Возврат Предст;
	
КонецФункции // ПредставлениеДоговораКомиссии()

//******************************************************************************
// ВыборКомитента()
//
// Вызывается из формул элементов диалога:
//  Кнопка "КнопкаВыбораКомитнета"
//
// Описание:
//  Устанавливает значение реквизита табличной части "Комитент".
//
Процедура ВыборКомитента()
	
	Если Товар.Выбран() = 0 Тогда
	ИначеЕсли Товар.ТипНоменклатуры.Выбран() = 0 Тогда
	ИначеЕсли Товар.ТипНоменклатуры <> Перечисление.ТипыНоменклатуры.Товар Тогда
	ИначеЕсли Товар.ТипТовара.Выбран() = 0 Тогда
	ИначеЕсли Товар.ТипТовара = Перечисление.ТипыТоваров.НаКомиссии Тогда
		ПунктМеню = 1;
		Меню = СоздатьОбъект("СписокЗначений");
		Меню.ДобавитьЗначение("Автовыбор при проведении");
		Меню.ДобавитьЗначение("Подобрать по бух.итогам");
		Меню.ДобавитьЗначение("Выбрать из справочника");
		Меню.ВыбратьЗначение(,,ПунктМеню,,1);
		Если ПунктМеню = 1 Тогда
			Комитент = "";
			ДоговорКомиссии = "";

		ИначеЕсли ПунктМеню = 2 Тогда 
			
			Если (Выбран() = 0) или (Модифицированность() = 1) Тогда
				Если Вопрос("Подобрать комитента по данным бухгалтерского учета
							|можно только после записи документа.
							|Записать документ?", "Да+Нет") = "Да" Тогда
					Записать();
				Иначе
					Возврат;
				КонецЕсли;
			КонецЕсли;			
			
			Если ДатаДок > КонецРассчитанногоПериодаБИ() Тогда
				Предупреждение("На " + ДатаДок + " бухгалтерские итоги не рассчитаны!
								|Расчет итогов выполняется в режиме
								|""Операции - Управление бухгалтерскими итогами"".");

			ИначеЕсли (Склад.Выбран() = 0) и (КодВидаПеремещения > 1) Тогда
				Предупреждение("Для подбора комитента по данным бухгалтерского учета
								|необходимо указать склад - отправитель.");
			
			Иначе
				БухИт = СоздатьОбъект("БухгалтерскиеИтоги"); БухИт.ИспользоватьРазделительУчета(ЮрЛицо);
				ТаблицаКомитентов = СоздатьОбъект("ТаблицаЗначений");
				ТаблицаКомитентов.НоваяКолонка("Комитент",,,,,20);
				ТаблицаКомитентов.НоваяКолонка("ДоговорКомиссии",,,,"Договор",20);
				ТаблицаКомитентов.НоваяКолонка("Остаток",,,,,10,"Ч10.2.,",2);
				ТаблицаКомитентов.НоваяКолонка("Сумма",,,,,15,"Ч15.2-,",2);
				ТаблицаКомитентов.НоваяКолонка("Цена",,,,,10,"Ч10.2-,",2);
				
				БухИт.ИспользоватьСубконто(ВидыСубконто.Номенклатура, Товар, 2);
				Если КодВидаПеремещения > 1 Тогда
				    БухИт.ИспользоватьСубконто(ВидыСубконто.МестаХранения, Склад, 2);
					БухИт.ИспользоватьСубконто(ВидыСубконто.Договоры);
					БухИт.ВыполнитьЗапрос(ТекущийДокумент(),,"КТР");
				Иначе
					БухИт.ИспользоватьСубконто(ВидыСубконто.Контрагенты);
					БухИт.ИспользоватьСубконто(ВидыСубконто.Договоры);
					БухИт.ВыполнитьЗапрос(ТекущийДокумент(),,"004");
				КонецЕсли;
				БухИт.ВыбратьСубконто(2);
				Пока БухИт.ПолучитьСубконто(2) = 1 Цикл 
					Если КодВидаПеремещения < 2 Тогда
						ТаблицаКомитентов.НоваяСтрока();
						ТаблицаКомитентов.Комитент = БухИт.Субконто(2);
						ТаблицаКомитентов.ДоговорКомиссии = "Всего:";
						ТаблицаКомитентов.Остаток = БухИт.СНД("К");
						ТаблицаКомитентов.Сумма = БухИт.СНД("С");
						ТаблицаКомитентов.Цена = ТаблицаКомитентов.Сумма / ТаблицаКомитентов.Остаток;
					КонецЕсли;
					БухИт.ВыбратьСубконто(3);
					Пока БухИт.ПолучитьСубконто(3) = 1 Цикл
						ТаблицаКомитентов.НоваяСтрока();
						ТаблицаКомитентов.Комитент = БухИт.Субконто(3).Владелец;
						ТаблицаКомитентов.ДоговорКомиссии = БухИт.Субконто(3);
						ТаблицаКомитентов.Остаток = БухИт.СНД("К");
						ТаблицаКомитентов.Сумма = БухИт.СНД("С");
						ТаблицаКомитентов.Цена = ТаблицаКомитентов.Сумма / ТаблицаКомитентов.Остаток;
					КонецЦикла;
				КонецЦикла;
				Позиция = 1;
				Если ТаблицаКомитентов.ВыбратьСтроку(Позиция,"Выберите комитента") = 0 Тогда
				ИначеЕсли Позиция > 0 Тогда
					Комитент = ТаблицаКомитентов.ПолучитьЗначение(Позиция,"Комитент");
					Дог = ТаблицаКомитентов.ПолучитьЗначение(Позиция,"ДоговорКомиссии");
					Если ТипЗначенияСтр(Дог) = "Справочник" Тогда
						ДоговорКомиссии = Дог;
					Иначе
						ДоговорКомиссии = "";
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;

		Иначе //Если ПунктМеню = 3 Тогда
			СпрКонтр = СоздатьОбъект("Справочник.Контрагенты");
			Если СпрКонтр.Выбрать("Выберите комитента",) = 1 Тогда
				Комитент = СпрКонтр.ТекущийЭлемент();
				глПриВыбореКонтрагента(Комитент,ДоговорКомиссии);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ВыборКомитента()

//******************************************************************************
// ВыборДоговораКомиссии()
//
// Вызывается из формул элементов диалога:
//  Кнопка "КнопкаВыбораДоговораКомиссии"
//
// Описание:
//  Устанавливает значение реквизита табличной части "ДоговорКомиссии".
//
Процедура ВыборДоговораКомиссии()
	
	Если Товар.Выбран() = 0 Тогда
	ИначеЕсли Товар.ТипНоменклатуры.Выбран() = 0 Тогда
	ИначеЕсли Товар.ТипНоменклатуры <> Перечисление.ТипыНоменклатуры.Товар Тогда
	ИначеЕсли Товар.ТипТовара.Выбран() = 0 Тогда
	ИначеЕсли Товар.ТипТовара = Перечисление.ТипыТоваров.НаКомиссии Тогда
		ПунктМеню = 1;
		Меню = СоздатьОбъект("СписокЗначений");
		Меню.ДобавитьЗначение("Автовыбор при проведении");
		Меню.ДобавитьЗначение("Подобрать по бух.итогам");
		Меню.ДобавитьЗначение("Выбрать из справочника");
		Меню.ВыбратьЗначение(,,ПунктМеню,,1);
		Если ПунктМеню = 1 Тогда
			ДоговорКомиссии = "";

		ИначеЕсли ПунктМеню = 2 Тогда
			Если ДатаДок > КонецРассчитанногоПериодаБИ() Тогда
				Предупреждение("На " + ДатаДок + " бухгалтерские итоги не рассчитаны!
								|Расчет итогов выполняется в режиме
								|""Операции - Управление бухгалтерскими итогами"".");
				
			ИначеЕсли (Выбран() = 0) или (Модифицированность() = 1) Тогда
				Предупреждение("Для подбора договора комиссии по данным бухгалтерского учета
								|необходимо провести документ."); 
			
			Иначе
				БухИт = СоздатьОбъект("БухгалтерскиеИтоги"); БухИт.ИспользоватьРазделительУчета(ЮрЛицо);
				ТаблицаКомитентов = СоздатьОбъект("ТаблицаЗначений");
				ТаблицаКомитентов.НоваяКолонка("Комитент",,,,,20);
				ТаблицаКомитентов.НоваяКолонка("ДоговорКомиссии",,,,"Договор",20);
				ТаблицаКомитентов.НоваяКолонка("Остаток",,,,,10,"Ч10.2.,",2);
				ТаблицаКомитентов.НоваяКолонка("Сумма",,,,,15,"Ч15.2-,",2);
				ТаблицаКомитентов.НоваяКолонка("Цена",,,,,10,"Ч10.2-,",2);
				
				
				БухИт.ИспользоватьСубконто(ВидыСубконто.Номенклатура, Товар, 2);
				Если КодВидаПеремещения > 1 Тогда
					БухИт.ИспользоватьСубконто(ВидыСубконто.МестаХранения, Склад, 2);
					БухИт.ИспользоватьСубконто(ВидыСубконто.Договоры);
					БухИт.ВыполнитьЗапрос(ТекущийДокумент(),,"КТР");
				Иначе
					БухИт.ИспользоватьСубконто(ВидыСубконто.Контрагенты, Комитент, Комитент.Выбран()+1);
					БухИт.ИспользоватьСубконто(ВидыСубконто.Договоры);
					БухИт.ВыполнитьЗапрос(ТекущийДокумент(),,"004");
				КонецЕсли;
				БухИт.ВыбратьСубконто(2);
				Пока БухИт.ПолучитьСубконто(2) = 1 Цикл
					Если (КодВидаПеремещения < 2) и (Комитент.Выбран() = 0) Тогда
						ТаблицаКомитентов.НоваяСтрока();
						ТаблицаКомитентов.Комитент = БухИт.Субконто(2);
						ТаблицаКомитентов.ДоговорКомиссии = "Всего:";
						ТаблицаКомитентов.Остаток = БухИт.СНД("К");
						ТаблицаКомитентов.Сумма = БухИт.СНД("С");
						ТаблицаКомитентов.Цена = ТаблицаКомитентов.Сумма / ТаблицаКомитентов.Остаток;
					КонецЕсли;
					БухИт.ВыбратьСубконто(3);
					Пока БухИт.ПолучитьСубконто(3) = 1 Цикл
						Если (Комитент.Выбран()=1) и (БухИт.Субконто(3).Владелец <> Комитент) Тогда
						    Продолжить;
						КонецЕсли;
						ТаблицаКомитентов.НоваяСтрока();
						ТаблицаКомитентов.Комитент = БухИт.Субконто(3).Владелец;
						ТаблицаКомитентов.ДоговорКомиссии = БухИт.Субконто(3);
						ТаблицаКомитентов.Остаток = БухИт.СНД("К");
						ТаблицаКомитентов.Сумма = БухИт.СНД("С");
						ТаблицаКомитентов.Цена = ТаблицаКомитентов.Сумма / ТаблицаКомитентов.Остаток;
					КонецЦикла;
				КонецЦикла;

				Позиция = 1;
				Если Комитент.Выбран() = 1 Тогда
				    ЗаголовокВыбора = "Выберите договор комиссии";
				Иначе
					ЗаголовокВыбора = "Выберите комитента";
				КонецЕсли;
				Если ТаблицаКомитентов.ВыбратьСтроку(Позиция,"Выберите комитента") = 0 Тогда
				ИначеЕсли Позиция > 0 Тогда
					Если Комитент.Выбран() = 0 Тогда
						Комитент = ТаблицаКомитентов.ПолучитьЗначение(Позиция,"Комитент");
					КонецЕсли;
					Дог = ТаблицаКомитентов.ПолучитьЗначение(Позиция,"ДоговорКомиссии");
					Если ТипЗначенияСтр(Дог) = "Справочник" Тогда
						ДоговорКомиссии = Дог;
					Иначе
						ДоговорКомиссии = "";
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;

		Иначе //Если ПунктМеню = 3 Тогда
			Если Комитент.Выбран() = 0 Тогда
				СпрКонтр = СоздатьОбъект("Справочник.Контрагенты");
				Если СпрКонтр.Выбрать("Выберите комитента",) = 1 Тогда
					Комитент = СпрКонтр.ТекущийЭлемент();
					глПриВыбореКонтрагента(Комитент,ДоговорКомиссии);
				КонецЕсли;
			КонецЕсли;
			Если Комитент.Выбран() = 1 Тогда
				СпрДог = СоздатьОбъект("Справочник.Договоры");
				СпрДог.ИспользоватьВладельца(Комитент);
				Если СпрДог.Выбрать("Выберите договор комиссии",) = 1 Тогда
					ДоговорКомиссии = СпрДог.ТекущийЭлемент();
					глПриВыбореДоговора(Комитент,ДоговорКомиссии);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ВыборДоговораКомиссии()

//******************************************************************************
// ПриВыбореВидаПеремещения()
//
Процедура ПриВыбореВидаПеремещения()
	Если ВидПеремещения > 8 Тогда
	    КодВидаПеремещения = ПолучитьКодВидаДвижения();
	Иначе
		ВП = ВидПеремещенияМПЗ.ПолучитьЗначение(ВидПеремещенияМПЗ.ТекущаяСтрока());
		Если ВП = ВидПеремещения Тогда
		Иначе
			ВидПеремещения = ВП;
		КонецЕсли;
		КодВидаПеремещения = ВидПеремещения;
	КонецЕсли;
	
	Если (КодВидаПеремещения = 0) или (КодВидаПеремещения = 2) Тогда
		Форма.НДСВключатьВСтоимость.Видимость(0);
		Если НДСВключатьВСтоимость = 1 Тогда
		    НДСВключатьВСтоимость = 0;
		КонецЕсли;
		
	Иначе
		Форма.НДСВключатьВСтоимость.Видимость(1);
		Если (КодВидаПеремещения = 1) Тогда
		    Форма.НДСВключатьВСтоимость.Заголовок("НДС включать в стоимость");
		Иначе
			Форма.НДСВключатьВСтоимость.Заголовок("Выделять НДС");
		КонецЕсли;
	КонецЕсли;
	
	ПриВключенииНДСВСтоимость();
    УправлениеВидимостьюСлояКомиссия(1);
КонецПроцедуры // ПриВыбореВидаПеремещения()

//******************************************************************************
// Печать()
//
Процедура Печать()
	
	Перем ИтогоКоличество, ИтогоСумма;	// итоги по странице
	Перем ВсегоКоличество, ВсегоСумма;	// итоги по документу
	
	// номер текущей страницы
	Перем НомерСтраницы;
	// макс. количество строк, которое влезает на страницу (без шапки и подвала)
	Перем СтрокНаСТранице;
	// высота шапки и подвала документах в товарных строках
	Перем ВысотаШапки, ВысотаПодвала;
	// количество выведеных строк
	Перем ВыведеноНаСтраницу, ВыведеноВсего;
	// количество строк документа
	Перем ВсегоСтрок;
	// используется для расчета количества строк, которое может вместить страница
	Перем ОстатокСтрок;
	
	Перем Себестоимость;
	
	Если (Модифицированность() = 1) и (Проведен() = 1) Тогда
	    Предупреждение("Для печати проведенного и измененного
					   |документа, его необходимо провести.");
		Возврат;
	КонецЕсли;
	
	ВсегоСтрок = КоличествоСтрок();
	ВыведеноНаСтраницу = 0; ВыведеноВсего = 0;
	
	НомерСтраницы = 1;
	// установка размеров секций
	ВысотаШапки = 14;
	ВысотаПодвала = 7;
	СтрокНаСТранице = 32;
	
	// инициализация
	ВсегоКоличество	= 0; ВсегоСумма = 0;
	ИтогоКоличество = 0; ИтогоСумма = 0;
	
	ИсхТаблица = СоздатьОбъект("Таблица");

	Если Проведен() = 0 Тогда
	    ТекстПредупреждения = "Для непроведенного документа графы ""Цена"" и ""Сумма"" не заполняются.";
		ИсхТаблица.ВывестиСекцию("Предупреждение");
		ВысотаШапки = ВысотаШапки + 1;
	КонецЕсли;

	ИсхТаблица.ВывестиСекцию("Шапка");
	ИсхТаблица.ВывестиСекцию("Заголовок");
	
	// выводим строки документа
	ВыбратьСтроки();
		
	Пока ПолучитьСтроку() = 1 Цикл
		
		// получим количество строк, которое еще можно поместить на странице
		ОстатокСтрок = СтрокНаСТранице - ВыведеноНаСтраницу;
		
		// если 1-я страница, то уменьшим количество строк на высоту шапки
		Если НомерСтраницы = 1 Тогда
		    ОстатокСтрок = ОстатокСтрок - ВысотаШапки;
		КонецЕсли;
		
		Если ВыведеноВсего = ВсегоСтрок -1  Тогда
		    // выводим последнюю строку
		    ОстатокСтрок = ОстатокСтрок - ВысотаПодвала;
		КонецЕсли;
		
		Если Не(ОстатокСтрок > 0) Тогда
			// выводим итоги по странице
			ИсхТаблица.ВывестиСекцию("Итог_по_странице");
			
			// переход на новую страницу
			ИсхТаблица.НоваяСтраница();
			ИсхТаблица.ВывестиСекцию("Заголовок");
			ВыведеноНаСтраницу = 0;	
			// обнуляем итоги по старанице
			ИтогоКоличество = 0; ИтогоСумма = 0;
			// увеличиваем номер страницы
			НомерСтраницы = НомерСтраницы + 1;
		КонецЕсли;
		
		// получим себестоимость товара
		НомСтр="";
		
		ПечатьВсего = 0;
		Если Проведен() = 1 Тогда
			ПечатьВсего = Всего;
		    ВсегоСумма = ВсегоСумма + Всего;
			ИтогоСумма = ИтогоСумма + Всего;
		КонецЕсли;
		ВсегоКоличество	= ВсегоКоличество + Количество;
		ИтогоКоличество = ИтогоКоличество + Количество;
		Наименование = ?(ПустаяСтрока(Товар.ПолнНаименование)=1, 
						 Товар.Наименование,
					     Товар.ПолнНаименование);
		
		ИсхТаблица.ВывестиСекцию("Строка");
		
		ВыведеноНаСтраницу = ВыведеноНаСтраницу + 1;
		ВыведеноВсего = ВыведеноВсего + 1;
	КонецЦикла;
	
	ИсхТаблица.ВывестиСекцию("Итог_по_странице");
	ИсхТаблица.ВывестиСекцию("Подвал");
	
	ИсхТаблица.Опции(0,0,0,0);
	ИсхТаблица.ТолькоПросмотр(1);
	ИсхТаблица.ОбластьПечати(2);
	ИсхТаблица.Показать("Печать ТОРГ-13","");    
	
КонецПроцедуры // Печать()

//******************************************************************************
// ПоКнопкеПечать()
// 
// Вызывается из формул элементов диалога:
//  Кнопка "кнПечать".
//
// Описание:
//  Определяется соответствующая печатная форма.
// 	
Процедура ПоКнопкеПечать(СразуНаПринтер = 0,КолЭкз = 1)
	
	Если  ПустоеЗначение(НомерТекущейФормы) = 1  Тогда
		НомерТекущейФормы = 1;
		Форма.кнПечать.Заголовок(ТаблицаПечФорм.ПолучитьЗначение(НомерТекущейФормы, "Кнопка"));
	КонецЕсли;
	
	Если НомерТекущейФормы = 1  Тогда
		Печать();
		
	Иначе
		Параметры = СоздатьОбъект("СписокЗначений");
		Параметры.ДобавитьЗначение(Контекст, "Контекст");
		Параметры.ДобавитьЗначение(СразуНаПринтер, "Устройство");
		Параметры.ДобавитьЗначение(КолЭкз, "КоличествоКопий");
		
		ОткрытьФорму("Отчет", Параметры, глКаталогПечФорм+ТаблицаПечФорм.ПолучитьЗначение(НомерТекущейФормы,"Файл"));
	КонецЕсли;
	
КонецПроцедуры // ПоКнопкеПечать()

//******************************************************************************
// ПоКнопкеВыборПечатнойФормы()
//
// Вызывается из формул элементов диалога:
//  Кнопка "кнВыбПечать".
//
// Описание:
//  - открывает список для выбора способа печати. 
//  - формирует таблицу по выбранному способу.
//
Процедура ПоКнопкеВыборПечатнойФормы()
	
    ВыбНомер = глВыборПечатнойФормы("Документ." + Вид(), ТаблицаПечФорм);
	Если ВыбНомер > 0 Тогда
		НомерТекущейФормы = ВыбНомер;
		Форма.кнПечать.Заголовок(ТаблицаПечФорм.ПолучитьЗначение(НомерТекущейФормы, "Кнопка"));
		ПоКнопкеПечать();
	КонецЕсли;

КонецПроцедуры // ПоКнопкеВыборПечатнойФормы()

//******************************************************************************
// Пересчет()
//
Процедура Пересчет(ИмяРеквизита = "")
	
	Если ИмяРеквизита = "" Тогда // вызов из формулы колонки табличной части
	    ИмяРеквизита = Форма.ТекущаяКолонка();
	КонецЕсли;
	
	Если ИмяРеквизита = "Товар" Тогда
		УправлениеВидимостьюСлояКомиссия();
	    Контрагент = "";
		СчетФактура = "";
		НДС = 0;
		
	ИначеЕсли ИмяРеквизита = "Контрагент" Тогда
		СчетФактура = "";
		НДС = 0;
		
	ИначеЕсли ИмяРеквизита = "Количество" Тогда
		Если СчетФактура.Выбран() = 1 Тогда
		    НДС = ПолучитьСуммуНДС();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // Пересчет()

//*****************************************************************************
// Подбор()
//
// Вызывается из формул элементов диалога:
//  Кнопка "КнопкаПодбор".
//
// Описание:
//  Открывает форму подбора номенклатуры.
//
Процедура Подбор()
	
	КонтекстФормыПодбора = СоздатьОбъект("СписокЗначений");
	КонтекстФормыПодбора.ДобавитьЗначение(Контекст, "Контекст");
	КонтекстФормыПодбора.ДобавитьЗначение(Склад, "МестоХранения");
	КонтекстФормыПодбора.ДобавитьЗначение(КодВидаПеремещения, "ВидПеремещения");
	КонтекстФормыПодбора.ДобавитьЗначение(Перечисление.ТипыНоменклатуры.Товар, "ОтборПоТипу");
	ОткрытьПодбор("Справочник.Номенклатура", "ДляПодбора", КонтекстФормыПодбора);
	
КонецПроцедуры // Подбор()

//////////////////////////////////////////////////////////////////////////////////
// ПРЕДОПРЕДЕЛЕННЫЕ ПРОЦЕДУРЫ
//
                                                  
//******************************************************************************
// Предопределенная процедура
//
Процедура ВводНового(Скопирован)
	глЗаполнитьШапку(Контекст, Скопирован);
	Новый = 1;
	Если Скопирован = 1 Тогда	//копирование документа 
		Возврат;
	КонецЕсли;
	ВидПеремещения = 9;
	КодВидаПеремещения = 0;
	
КонецПроцедуры // ВводНового()

//******************************************************************************
// Предопределенная процедура
//
Процедура ВводНаОсновании(ДокОсн)
	                  
	Новый = 1;
	
	Если (ДокОсн.ВидПоступления = 1) или (ДокОсн.ВидПоступления = 11) Тогда
		ВидПеремещения = 9;
		КодВидаПеремещения = 0;
	Иначе
		ВидПеремещения = 9;    
		КодВидаПеремещения = 2;
	КонецЕсли;
	
	Склад = ДокОсн.МестоХранения;
	
	ДокОсн.ВыбратьСтроки();
	Пока ДокОсн.ПолучитьСтроку() = 1 Цикл
		
		НоваяСтрока();
		Товар = ДокОсн.Товар;
		Количество = ДокОсн.Количество;
				
		Если ПустоеЗначение(ДокОсн.ДатаНомерСчетаФактуры) = 0 Тогда
			Контрагент = ДокОсн.Контрагент;
			СчетФактура = ДокОсн;
			НДС = ПолучитьСуммуНДС();
		КонецЕсли;
	КонецЦикла;

	Комментарий = "Введен на основании: "+ГлПредставлениеДокумента(ДокОсн);
	
КонецПроцедуры // ВводНаОсновании()

//******************************************************************************
// Предопределенная процедура
//
Процедура ПриОткрытии() 
	                     
	ПриЗаписиПерепроводить(1);
	Если ВидПеремещения = 9 Тогда
	    Форма.ВидПеремещенияМПЗ.Видимость(0);
		Форма.ТекстВидаПеремещенияМПЗ.Видимость(1);
		Форма.ИспользоватьСлой("Основной");
		КодВидаПеремещения = ПолучитьКодВидаДвижения();
	Иначе
		Форма.ВидПеремещенияМПЗ.Видимость(1);
		Форма.ТекстВидаПеремещенияМПЗ.Видимость(0);
		ВидПеремещенияМПЗ.ДобавитьЗначение(0, "Опт -> Опт (складское перемещение)");
		ВидПеремещенияМПЗ.ДобавитьЗначение(1, "Опт -> Розница (передача со склада в торговую точку)");
		ВидПеремещенияМПЗ.ДобавитьЗначение(2, "Розница -> Розница (складское перемещение)");
		ВидПеремещенияМПЗ.ДобавитьЗначение(3, "Розница -> Опт (передача из торговой точки на склад)");
		ВидПеремещенияМПЗ.ТекущаяСтрока(ВидПеремещения + 1); 
		Форма.ИспользоватьСлой("Основной,СписокВидовПеремещения");
		КодВидаПеремещения = ВидПеремещения;
	КонецЕсли;
	
	Форма.Товар 		.ВыполнятьФормулуТолькоПриИзменении(1);
	Форма.Контрагент	.ВыполнятьФормулуТолькоПриИзменении(1);
	Форма.СчетФактура	.ВыполнятьФормулуТолькоПриИзменении(1);
	Форма.Количество	.ВыполнятьФормулуТолькоПриИзменении(1);
	Форма.НДС			.ВыполнятьФормулуТолькоПриИзменении(1);
	
	глПроверкаРазрешенияРедактирования(Контекст);
	Если Форма.ТолькоПросмотр()=1 Тогда
		Форма.кнОК.Доступность(0);
		Форма.кнПровести.Доступность(0);
		Форма.КнопкаОчистить.Доступность(0);
		Форма.кнПодбор.Доступность(0);
	    Форма.КнопкаПоУмолчанию("кнЗакрыть");
		
	Иначе
	    Форма.КнопкаПоУмолчанию("кнОК");
	КонецЕсли;
	НачальнаяДатаДокумента = ДатаДок;
	ПриВыбореВидаПеремещения();
	
	// Заполним таблицу для выбора печатной формы
	НомерТекущейФормы = глУстановкаКнопкиПечать(Контекст, "Документ." + Вид(),ТаблицаПечФорм);
	          
КонецПроцедуры // ПриОткрытии()

//*****************************************************************************
// Предопределенная процедура
//
Процедура ПриНачалеВыбораЗначения(ЭлементДиалога, Флаг)
	
	Если ЭлементДиалога = "СчетФактура" Тогда
		Флаг = 0;
		КонтекстЖурнала = СоздатьОбъект("СписокЗначений");
		КонтекстЖурнала.Установить("ДатаБИ", ДатаДок);
		Если Контрагент.Выбран() = 1 Тогда
	    	КонтекстЖурнала.Установить("Контрагент", Контрагент);
		КонецЕсли;
		ОткрытьФорму("Журнал.СчетаФактурыПолученные", КонтекстЖурнала);
		
	ИначеЕсли ЭлементДиалога = "Товар" Тогда
	    ОтборНоменклатуры = Перечисление.ТипыНоменклатуры.Товар;
	КонецЕсли;
	
КонецПроцедуры // ПриНачалеВыбораЗначения()

//*****************************************************************************
// Предопределенная процедура
//
Процедура ОбработкаВыбораЗначения(ВыбЗначение, ЭлементДиалога, Флаг)
	
	Если ЭлементДиалога = "СчетФактура" Тогда
		Если ВыбЗначение.Вид() = "ПоступлениеТоваров" Тогда
			СчетФактура = ВыбЗначение;
			Контрагент = СчетФактура.Контрагент;
			НДС = ПолучитьСуммуНДС();
						
		ИначеЕсли ВыбЗначение.Вид() = "СчетФактураПолученный" Тогда
			СчетФактура = ВыбЗначение;
			Контрагент = СчетФактура.Контрагент;
			НДС = 0;
			
		Иначе
			Предупреждение("Выбранный документ не отражает операции
							|поступления товаров");
			Флаг = 0;
		КонецЕсли;
	КонецЕсли;
                     
КонецПроцедуры // ОбработкаВыбораЗначения()

//******************************************************************************
// Предопределенная процедура
//
Процедура ОбработкаПодбора(ВыбрТовар, КонтФормыПодбора)
	
	Если ВыбрТовар.ТипНоменклатуры = Перечисление.ТипыНоменклатуры.Товар Тогда
	    Кол = 1;
		Если ВвестиЧисло(Кол, "Введите количество", 14, 3) = 0 Тогда
			Возврат;
		
		ИначеЕсли Кол = 0 Тогда
			Возврат;
		КонецЕсли;
	
		НоваяСтрока();
		Товар = ВыбрТовар;
		Количество = Кол;
		АктивизироватьСтроку();
		Пересчет("Товар");
		
	Иначе
		Предупреждение("Документ предназначен только для перемещения товаров.
						|Для перемещения продукции используйте документ
						|""Перемещение материалов""");
	КонецЕсли;
		
КонецПроцедуры // ОбработкаПодбора()

//******************************************************************************
// Предопределенная процедура
//
Процедура ПриЗаписи()
	
	Если глМожноЗаписатьДокумент(Контекст) = 0 Тогда
		СтатусВозврата(0);
		Возврат;
	
	ИначеЕсли глКонтрольДатыДокумента(Контекст, НачальнаяДатаДокумента) = 1 Тогда
		СтатусВозврата(0);
		Возврат;
	КонецЕсли;

	Операция.Содержание = "Перемещение товаров";
	
КонецПроцедуры // ПриЗаписи()

//******************************************************************************
// Предопределенная процедура
//
Процедура ПриЗакрытии()
	
	глОткрытьЖурнал(Контекст, Новый);	
	
КонецПроцедуры // ПриЗакрытии()

//*****************************************************************************
Новый = 0;

ТаблицаПечФорм		= СоздатьОбъект("ТаблицаЗначений");
ТаблицаПечФорм.НоваяКолонка("Название","Строка",,,,30);
ТаблицаПечФорм.НоваяКолонка("Файл","Строка",,,"Файл",10);
ТаблицаПечФорм.НоваяКолонка("Кнопка","Строка",,,,10); 
ТаблицаПечФорм.НоваяКолонка("ФайлОписания","Строка");
	
// добавим информацию о встроенной форме
ТаблицаПечФорм.НоваяСтрока();
ТаблицаПечФорм.Название     = "Накладная на внутреннее перемещение, передачу товаров, тары";
ТаблицаПечФорм.Кнопка       = "Печать";

СписокДействий = СоздатьОбъект("СписокЗначений");
СписокДействий.ДобавитьЗначение("Отчет о движениях документа");
СписокДействий.ДобавитьЗначение("Структура подчиненности");
СписокДействий.ДобавитьЗначение("Ввести на основании");
СписокДействий.ДобавитьЗначение("Перейти  в журнал");