////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ
//
Перем ТаблицаПечФорм;  // список печатных форм документа
Перем НомерТекущейФормы;
Перем НачальнаяДатаДокумента; 
Перем КонтекстФормыПодбора;
Перем Новый;
Перем СписокДействий;
Перем СтарыйДоговор; 
Перем СтарыйКурс;
Перем КодВидаОтгрузки; 
Перем ТекущийВариантРасчетаНалогов;

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ МОДУЛЯ
//
//******************************************************************************
// ПолучитьКодВидаОтгрузки();
//                                                    
Функция ПолучитьКодВидаОтгрузки() 
	ПромежуточныйКод = ВидОтгрузки - 10;
	Если (МестоХранения.Выбран() = 0) Тогда
	    Возврат ПромежуточныйКод;
	КонецЕсли;    
	Если (МестоХранения.ТипСклада.Выбран() = 0) Тогда
	    Возврат ПромежуточныйКод;
	КонецЕсли;
	Если (МестоХранения.ТипСклада = Перечисление.ТипыСкладов.Розничный) и (ПромежуточныйКод = 3) Тогда
        ПромежуточныйКод = ПромежуточныйКод + 1;
	КонецЕсли;
	Возврат ПромежуточныйКод;
КонецФункции

//******************************************************************************
// ИнформацияОДоговоре()
//
// Возвращаемое значение:
//  Строка - Наименование валюты договора и валюты оплаты.
//
// Вызывается из формул элементов диалога:
//  Текст "ИнформацияОДоговоре".
//
// Описание:
//  Формирует строку, содержащую наименование валюты договора и валюты оплаты.
//
Функция ИнформацияОДоговоре() 
	
	Стр = "";
	Если Договор.Выбран() = 1 Тогда
		Если Договор.ВалютаДоговора.Выбран() = 1 Тогда
		    Стр = "Валюта договора: " + Договор.ВалютаДоговора;
		КонецЕсли;	    
	КонецЕсли;
	Возврат Стр;
	
КонецФункции // ИнформацияОДоговоре()

//******************************************************************************
// УправлениеКурсом(ИзменитьКурс)
//
// Параметры:
//  ИзменитьКурс - Число. 1 - установить новый курс валюты, 0 - не изменять.
//
// Описание:
//  При выбранной иностранной валюте делает видимым поле "Курс" и записывает
// в него значение из справочника.
//
Процедура УправлениеКурсом(ИзменитьКурс=0)
	
	ВидимостьКурса = Договор.ВалютаДоговора.Выбран();
	Форма.ПодписьКурса.Видимость(ВидимостьКурса);
	Форма.Курс.Видимость(ВидимостьКурса);
	СтарыйКурс = ?(Курс = 0, 1, Курс);
	
	Если ИзменитьКурс = 1 Тогда
		Если ВидимостьКурса = 1 Тогда
		    Курс = Договор.ВалютаДоговора.Курс.Получить(ДатаДок);
			
		Иначе
			Курс = 0;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // УправлениеКурсом()

//******************************************************************************
// ПриВыбореВариантаЗачетаАванса()
//
// Вызывается из формул элементов диалога:
//  Поле со списком "ВариантыЗачетаАванса".
//
// Описание:
//  Устанавливает значение реквизита "ЗачитыватьАванс".
//
Процедура ПриВыбореВариантаЗачетаАванса()
	
	ЗачитыватьАванс = ВариантЗачетаАванса.ПолучитьЗначение(ВариантЗачетаАванса.ТекущаяСтрока());
	
КонецПроцедуры // ПриВыбореВариантаЗачетаАванса() 

//*****************************************************************************
// УправлениеВидимостьюГТД(РежимПроверки)
//
// Параметры:
//  Режим: 1 - анализировать всю таблицу
//         0 - анализировать только текущую строку.
//
// Вызывается из формул элементов диалога:
//  Нет.
//
// Описание:
//  Анализиреутся необходимость в рекизите "ГТД" табличной части.
// 
Процедура УправлениеВидимостьюГТД(РежимПроверки = 0)

	Если КодВидаОтгрузки >= 3 Тогда
		
		Если РежимПроверки = 0 Тогда
		    Если Товар.Выбран() = 1 Тогда
				Если (Товар.ТипНоменклатуры = Перечисление.ТипыНоменклатуры.Товар) и (Товар.СтранаПроисхожд = 0) Тогда
					Форма.ГТД.Видимость(1);
				КонецЕсли;
			КонецЕсли;
			
		Иначе // проверить все строки
			Видимость = 0;
			ВыбратьСтроки();
			Пока ПолучитьСтроку() = 1 Цикл
			    Если Товар.Выбран() = 1 Тогда
					Если (Товар.ТипНоменклатуры = Перечисление.ТипыНоменклатуры.Товар) и (Товар.СтранаПроисхожд = 0) Тогда
						Видимость = 1;
						Прервать;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			Форма.ГТД.Видимость(Видимость);
		КонецЕсли;
		
	Иначе
		Форма.ГТД.Видимость(0);
	КонецЕсли;
	
КонецПроцедуры // УправлениеВидимостьюГТД()

//******************************************************************************
// УправлениеВидимостьюСлояКомиссия()
//
// Параметры:
//  РежимПроверки: 1 - анализировать все строки табличной части;
//                 0 - анализировать только текущую строку табличной части.
//
// Вызывается из формул элементов диалога:
//  Нет.
//
// Описание:
//  Анализиреутся необходимость в слое "Комиссия".
//
Процедура УправлениеВидимостьюСлояКомиссия(РежимПроверки = 0)
	
	СлойНужен = 0;
	                                                                                         
	// Этот слой нужен только в случае реализации (отгрузке) товаров, принятых на комиссию.
	Если КодВидаОтгрузки >= 3 Тогда // если возврат поставщику.
		Форма.ИспользоватьСлой("Комиссия", 0);
	          
	// если слой уже виден, то и аналировать не надо
	ИначеЕсли Форма.ПодписьКомитента.Видимость() = 0 Тогда
	 	Если РежимПроверки = 0 Тогда
	 		Если Товар.Выбран() = 1 Тогда
		 	    Если (Товар.ТипНоменклатуры = Перечисление.ТипыНоменклатуры.Товар) 
				   и (Товар.ТипТовара = Перечисление.ТипыТоваров.НаКомиссии) Тогда
					СлойНужен = 1;
				КонецЕсли;
			КонецЕсли;
			
	 	Иначе // анализировать все строки табличной части
			ВыбратьСтроки();
			Пока ПолучитьСтроку() = 1 Цикл
				Если (Товар.ТипНоменклатуры = Перечисление.ТипыНоменклатуры.Товар) 
				   и (Товар.ТипТовара = Перечисление.ТипыТоваров.НаКомиссии) Тогда
				   	СлойНужен = 1;
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	
		Если СлойНужен = 1 Тогда
			Форма.ИспользоватьСлой("Комиссия", 1);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // УправлениеВидимостьюСлояКомиссия()

//******************************************************************************
// РассчитатьНалоги()
//
// Описание:
//  Пересчитывает значения численных реквизитов табличной части документа 
// в зависимости от найденных ставок налогов и выбранного варианта формирования
// отпускных цен.
//
Процедура РассчитатьНалоги()
	
	НДС = глПоказательДокумента(Контекст, "НДС");
	НП = глПоказательДокумента(Контекст, "НП");
	Всего = глПоказательДокумента(Контекст, "СуммаСНалогами");
	Форма.НДС.Видимость(глПризнакУчетаНалога(Контекст, "НДС"));
	Форма.НП.Видимость(глПризнакУчетаНалога(Контекст, "НП"));
	
КонецПроцедуры // РассчитатьНалоги()

//*****************************************************************************
// Пересчет(ИмяРеквизита)
//
// Параметры:
//  ИмяРеквизита - Строка. Идентификатор колонки из формулы которой вызывается
//                 процедура.
//
// Вызывается из формул элементов диалога:
//  Колонка "Товар",
//  Колонка "Количество",
//  Колонка "Цена",
//  Колонка "Сумма",
//  Колонка "НДС",
//  Колонка "НП",
//  Колонка "Всего".
//
// Описание:
//  Пересчитывает значения численных реквизитов табличной части документа.
//
Процедура Пересчет(ИмяРеквизита="")
		
	Если ИмяРеквизита = "" Тогда // вызов из формулы колонки табличной части
	    ИмяРеквизита = Форма.ТекущаяКолонка();
	КонецЕсли;

	Если Товар.Выбран() = 1 Тогда
		Если (ИмяРеквизита = "Товар") Тогда
			Цена = глПолучитьЦену(Контекст,Товар,ТипЦен,ДатаДок,?(Договор.Выбран() = 0,"",Договор.ВалютаДоговора),Курс);
			Если Количество <> 0 Тогда
				Пересчет("Цена");
			КонецЕсли;
			УправлениеВидимостьюСлояКомиссия();
			УправлениеКурсом();
			УправлениеВидимостьюГТД();
			
		ИначеЕсли (ИмяРеквизита = "Количество") Тогда
			Сумма = Цена*Количество;
			РассчитатьНалоги();
	    ИначеЕсли (ИмяРеквизита = "Цена") Тогда
			Сумма = Цена*Количество;
			РассчитатьНалоги();
		ИначеЕсли (ИмяРеквизита = "Сумма") Тогда
			РассчитатьНалоги();
			Цена = ?(Количество = 0, Сумма, Сумма/Количество);
		ИначеЕсли (ИмяРеквизита = "НДС") или (ИмяРеквизита = "НП") Тогда
			Всего = глПоказательДокумента(Контекст, "СуммаСНалогами");
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры // Пересчет()

//******************************************************************************
Процедура ПересчитатьЦены()
	ВыбратьСтроки();
	Пока ПолучитьСтроку()=1 Цикл
		Пересчет("Товар");
	КонецЦикла;
КонецПроцедуры

//*****************************************************************************
// ПриВыбореВариантаРасчетаНалогов()
//
// Вызывается из формул элементов диалога:
//  Поле ввода "ВариантРасчетаНалогов".
//
// Описание:
//  Пересчитывает суммы в документе при смене варианта расчета налогов.
//
Процедура ПриВыбореВариантаРасчетаНалогов()
	
	Если ВариантРасчетаНалогов = ТекущийВариантРасчетаНалогов Тогда
		Возврат
	КонецЕсли;
	
	Если КоличествоСтрок() > 0 Тогда
		Ответ = Вопрос("Пересчитать суммы налогов в существующих строках
		|табличной части (суммы налогов будут
		|обновлены в соответствии с выбранным вариантом)?", "Да+Нет+Отмена");
		Если Ответ = "Да" Тогда
			
			ОбщееКоличество = КоличествоСтрок();
			ВыбратьСтроки();
			Пока ПолучитьСтроку() = 1 Цикл
				РассчитатьНалоги();
				Состояние("Обработано: " + Окр(НомерСтроки/ОбщееКоличество*100, 0, 1) + "%");
			КонецЦикла; 
			
		ИначеЕсли Ответ = "Отмена" Тогда
			ВариантРасчетаНалогов = ТекущийВариантРасчетаНалогов;
		КонецЕсли;
		
	КонецЕсли;
	УчитыватьНП = глПризнакУчетаНалога(Контекст, "НП");
	УчитыватьНДС = глПризнакУчетаНалога(Контекст, "НДС");
	ВыбратьСтроки();
	Пока ПолучитьСтроку() = 1 Цикл
		НДС = ?(УчитыватьНДС = 0, 0, НДС);
		НП = ?(УчитыватьНП = 0, 0, НП);
	КонецЦикла;
	Форма.НДС.Видимость(УчитыватьНДС);
	Форма.НП.Видимость(УчитыватьНП);
	
КонецПроцедуры // ПриВыбореВариантаРасчетаНалогов()

//*****************************************************************************   
// ПриВыбореТипаЦен()
//
// Вызывается из формул элементов диалога:
//  Поле ввода "Тип цен"
// 
// Описание:
//  Проверяет соответствие типа цен.
//
Процедура ПриВыбореТипаЦен()
	Если (ТипЦен.Выбран()=1)и(КоличествоСтрок()>0) Тогда
		Если Вопрос("Перезаполнить цены в документе?","Да+Нет",60) = "Да" Тогда
			ПересчитатьЦены();
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

//*****************************************************************************   
// ПроверитьДоговор()
//
Процедура ПроверитьДоговор()
    
	СтараяВалюта = ПолучитьПустоеЗначение("Справочник.Валюты");
	НоваяВалюта = ПолучитьПустоеЗначение("Справочник.Валюты");
	НовыйКурс = ?(Курс = 0, 1, Курс);

	Если КоличествоСтрок() = 0 Тогда
	    Возврат;
	КонецЕсли;  
	
	Если ПустоеЗначение(СтарыйДоговор) = 1 Тогда
		СтараяВалюта = ПолучитьПустоеЗначение("Справочник.Валюты");
	Иначе
		СтараяВалюта = СтарыйДоговор.ВалютаДоговора;
	КонецЕсли;
	
	Если ПустоеЗначение(Договор) = 1 Тогда
		НоваяВалюта = ПолучитьПустоеЗначение("Справочник.Валюты");
	Иначе
		НоваяВалюта = Договор.ВалютаДоговора;
	КонецЕсли;
	
	Если СтараяВалюта <> НоваяВалюта Тогда
		Если Вопрос("Изменена валюта договора."+РазделительСтрок+"Пересчитать цены в документе?","Да+Нет",30) = "Да" Тогда
			ВыбратьСтроки();
			Пока ПолучитьСтроку()=1 Цикл
				Цена = глПересчет(Цена,СтараяВалюта,СтарыйКурс,НоваяВалюта,НовыйКурс);
				Пересчет("Цена");
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

//*****************************************************************************
// ПриВыбореДоговора()
//
// Вызывается из формул элементов диалога:
//  Поле ввода "Договор"
// 
// Описание:
//  Проверяет соответствие договора выбранному контрагенту.
//
Процедура ПриВыбореДоговора()

	глПриВыбореДоговора(Контрагент, Договор);
	УправлениеКурсом(1);
	ПроверитьДоговор();
	
КонецПроцедуры // ПриВыбореДоговора()

//*****************************************************************************
// ПриВыбореКонтрагента()
//
// Вызывается из формул элементов диалога:
//  Поле ввода "Контрагент".
//
// Описание:
//  Проверяет соответствие договора выбранному контрагенту.
//
Процедура ПриВыбореКонтрагента()
	
	Плательщик = Контрагент;
	глПриВыбореКонтрагента(Контрагент, Договор);
	УправлениеКурсом(1);
	ПроверитьДоговор()
	
КонецПроцедуры // ПриВыбореКонтрагента()

//*****************************************************************************   
// ПриВыбореКурса()
//
// Вызывается из формул элементов диалога:
//  Поле ввода "Курс"
// 
// Описание:
//  Проверяет соответствие типа цен.
//
Процедура ПриВыбореКурса()
	
	//
	
КонецПроцедуры

//******************************************************************************
// ПредставлениеКомитента()
//
// Вызывается из формул элементов диалога:
//  Текст "ПредставлениеКомитента"
//
// Возвращаемое значение:
//  Стрка - наименование комитента.
//
// Описание:
//  Формурует строку с наименованием комитента, поставившего товар.
//
Функция ПредставлениеКомитента()
	
	Перем Предст;

    Если Комитент.Выбран() = 1 Тогда
    	Предст = СокрЛП(Комитент.Наименование);
	Иначе
    	Предст = "<Автовыбор>";
	КонецЕсли;
	Возврат Предст;
	
КонецФункции // ПредставлениеКомитента()

//******************************************************************************
// ПредставлениеДоговораКомиссии()
//
// Вызывается из формул элементов диалога:
//  Текст "ПредставлениеДоговораКомиссии"
//
// Возвращаемое значение:
//  Стрка - наименование договора.
//
// Описание:
//  Формурует строку с наименованием договора с комитентом, по которому был
// поставлен товар.
//
Функция ПредставлениеДоговораКомиссии()
	
	Перем Предст;

    Если ДоговорКомиссии.Выбран() = 1 Тогда
    	Предст = СокрЛП(ДоговорКомиссии.Наименование);
	Иначе
    	Предст = "<Автовыбор>";
	КонецЕсли;
	Возврат Предст;
	
КонецФункции // ПредставлениеДоговораКомиссии()

//******************************************************************************
// ВыборКомитента()
//
// Вызывается из формул элементов диалога:
//  Кнопка "КнопкаВыбораКомитнета"
//
// Описание:
//  Устанавливает значение реквизита табличной части "Комитент".
//
Процедура ВыборКомитента()
	
	Если Товар.Выбран() = 0 Тогда
	ИначеЕсли Товар.ТипНоменклатуры.Выбран() = 0 Тогда
	ИначеЕсли Товар.ТипНоменклатуры <> Перечисление.ТипыНоменклатуры.Товар Тогда
	ИначеЕсли Товар.ТипТовара.Выбран() = 0 Тогда
	ИначеЕсли Товар.ТипТовара = Перечисление.ТипыТоваров.НаКомиссии Тогда
		ПунктМеню = 1;
		Меню = СоздатьОбъект("СписокЗначений");
		Меню.ДобавитьЗначение("Автовыбор при проведении");
		Меню.ДобавитьЗначение("Подобрать по бух.итогам");
		Меню.ДобавитьЗначение("Выбрать из справочника");
		Меню.ВыбратьЗначение(,,ПунктМеню,,1);
		Если ПунктМеню = 1 Тогда
			Комитент = "";
			ДоговорКомиссии = "";

		ИначеЕсли ПунктМеню = 2 Тогда
			Если ДатаДок > КонецРассчитанногоПериодаБИ() Тогда
				Предупреждение("На " + ДатаДок + " бухгалтерские итоги не рассчитаны!
								|Расчет итогов выполняется в режиме
								|""Операции - Управление бухгалтерскими итогами"".");
				
			ИначеЕсли (Выбран() = 0) или (Модифицированность() = 1) Тогда
				Предупреждение("Для подбора комитента по данным бухгалтерского учета
								|необходимо записать документ."); 
			
			Иначе
				БухИт = СоздатьОбъект("БухгалтерскиеИтоги"); БухИт.ИспользоватьРазделительУчета(ЮрЛицо);
				ТаблицаКомитентов = СоздатьОбъект("ТаблицаЗначений");
				ТаблицаКомитентов.НоваяКолонка("Комитент",,,,,20);
				ТаблицаКомитентов.НоваяКолонка("ДоговорКомиссии",,,,"Договор",20);
				ТаблицаКомитентов.НоваяКолонка("Остаток",,,,,10,"Ч10.2.,",2);
				ТаблицаКомитентов.НоваяКолонка("Сумма",,,,,15,"Ч15.2-,",2);
				ТаблицаКомитентов.НоваяКолонка("Цена",,,,,10,"Ч10.2-,",2);
				
				БухИт.ИспользоватьСубконто(ВидыСубконто.Номенклатура, Товар, 2);
				БухИт.ИспользоватьСубконто(ВидыСубконто.Контрагенты);
				БухИт.ИспользоватьСубконто(ВидыСубконто.Договоры);
				БухИт.ВыполнитьЗапрос(ТекущийДокумент(),,"004");
				БухИт.ВыбратьСубконто(2);
				Пока БухИт.ПолучитьСубконто(2) = 1 Цикл
					ТаблицаКомитентов.НоваяСтрока();
					ТаблицаКомитентов.Комитент = БухИт.Субконто(2);
					ТаблицаКомитентов.ДоговорКомиссии = "Всего:";
					ТаблицаКомитентов.Остаток = БухИт.СНД("К");
					ТаблицаКомитентов.Сумма = БухИт.СНД("С");
					ТаблицаКомитентов.Цена = ТаблицаКомитентов.Сумма / ТаблицаКомитентов.Остаток;
					
					БухИт.ВыбратьСубконто(3);
					Пока БухИт.ПолучитьСубконто(3) = 1 Цикл
						ТаблицаКомитентов.НоваяСтрока();
						ТаблицаКомитентов.Комитент = БухИт.Субконто(2);
						ТаблицаКомитентов.ДоговорКомиссии = БухИт.Субконто(3);
						ТаблицаКомитентов.Остаток = БухИт.СНД("К");
						ТаблицаКомитентов.Сумма = БухИт.СНД("С");
						ТаблицаКомитентов.Цена = ТаблицаКомитентов.Сумма / ТаблицаКомитентов.Остаток;
					КонецЦикла;
				КонецЦикла;
				Позиция = 1;
				Если ТаблицаКомитентов.ВыбратьСтроку(Позиция,"Выберите комитента") = 0 Тогда
				ИначеЕсли Позиция > 0 Тогда
					Комитент = ТаблицаКомитентов.ПолучитьЗначение(Позиция,"Комитент");
					Дог = ТаблицаКомитентов.ПолучитьЗначение(Позиция,"ДоговорКомиссии");
					Если ТипЗначенияСтр(Дог) = "Справочник" Тогда
						ДоговорКомиссии = Дог;
					Иначе
						ДоговорКомиссии = "";
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;

		Иначе //Если ПунктМеню = 3 Тогда
			СпрКонтр = СоздатьОбъект("Справочник.Контрагенты");
			Если СпрКонтр.Выбрать("Выберите комитента",) = 1 Тогда
				Комитент = СпрКонтр.ТекущийЭлемент();
				глПриВыбореКонтрагента(Комитент,ДоговорКомиссии);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ВыборКомитента()

//******************************************************************************
// ВыборДоговораКомиссии()
//
// Вызывается из формул элементов диалога:
//  Кнопка "КнопкаВыбораДоговораКомиссии"
//
// Описание:
//  Устанавливает значение реквизита табличной части "ДоговорКомиссии".
//
Процедура ВыборДоговораКомиссии()
	
	Если Товар.Выбран() = 0 Тогда
	ИначеЕсли Товар.ТипНоменклатуры.Выбран() = 0 Тогда
	ИначеЕсли Товар.ТипНоменклатуры <> Перечисление.ТипыНоменклатуры.Товар Тогда
	ИначеЕсли Товар.ТипТовара.Выбран() = 0 Тогда
	ИначеЕсли Товар.ТипТовара = Перечисление.ТипыТоваров.НаКомиссии Тогда
		ПунктМеню = 1;
		Меню = СоздатьОбъект("СписокЗначений");
		Меню.ДобавитьЗначение("Автовыбор при проведении");
		Меню.ДобавитьЗначение("Подобрать по бух.итогам");
		Меню.ДобавитьЗначение("Выбрать из справочника");
		Меню.ВыбратьЗначение(,,ПунктМеню,,1);
		Если ПунктМеню = 1 Тогда
			ДоговорКомиссии = "";

		ИначеЕсли ПунктМеню = 2 Тогда
			Если ДатаДок > КонецРассчитанногоПериодаБИ() Тогда
				Предупреждение("На " + ДатаДок + " бухгалтерские итоги не рассчитаны!
								|Расчет итогов выполняется в режиме
								|""Операции - Управление бухгалтерскими итогами"".");
				
			ИначеЕсли (Выбран() = 0) или (Модифицированность() = 1) Тогда
				Предупреждение("Для подбора договора комиссии по данным бухгалтерского учета
								|необходимо записать документ."); 
			
			Иначе
				БухИт = СоздатьОбъект("БухгалтерскиеИтоги"); БухИт.ИспользоватьРазделительУчета(ЮрЛицо);
				ТаблицаКомитентов = СоздатьОбъект("ТаблицаЗначений");
				Если Комитент.Выбран() = 0 Тогда
					ТаблицаКомитентов.НоваяКолонка("Комитент",,,,,20);
				КонецЕсли;
				ТаблицаКомитентов.НоваяКолонка("ДоговорКомиссии",,,,"Договор",20);
				ТаблицаКомитентов.НоваяКолонка("Остаток",,,,,10,"Ч10.2.,",2);
				ТаблицаКомитентов.НоваяКолонка("Сумма",,,,,15,"Ч15.2-,",2);
				ТаблицаКомитентов.НоваяКолонка("Цена",,,,,10,"Ч10.2-,",2);
				
				Если Комитент.Выбран() = 0 Тогда
					БухИт.ИспользоватьСубконто(ВидыСубконто.Номенклатура, Товар, 2);
					БухИт.ИспользоватьСубконто(ВидыСубконто.Контрагенты);
					БухИт.ИспользоватьСубконто(ВидыСубконто.Договоры);
					БухИт.ВыполнитьЗапрос(ТекущийДокумент(),,"004");
					БухИт.ВыбратьСубконто(2);
					Пока БухИт.ПолучитьСубконто(2) = 1 Цикл
						ТаблицаКомитентов.НоваяСтрока();
						ТаблицаКомитентов.Комитент = БухИт.Субконто(2);
						ТаблицаКомитентов.ДоговорКомиссии = "Всего:";
						ТаблицаКомитентов.Остаток = БухИт.СНД("К");
						ТаблицаКомитентов.Сумма = БухИт.СНД("С");
						ТаблицаКомитентов.Цена = ТаблицаКомитентов.Сумма / ТаблицаКомитентов.Остаток;
						
						БухИт.ВыбратьСубконто(3);
						Пока БухИт.ПолучитьСубконто(3) = 1 Цикл
							ТаблицаКомитентов.НоваяСтрока();
							ТаблицаКомитентов.Комитент = БухИт.Субконто(2);
							ТаблицаКомитентов.ДоговорКомиссии = БухИт.Субконто(3);
							ТаблицаКомитентов.Остаток = БухИт.СНД("К");
							ТаблицаКомитентов.Сумма = БухИт.СНД("С");
							ТаблицаКомитентов.Цена = ТаблицаКомитентов.Сумма / ТаблицаКомитентов.Остаток;
						КонецЦикла;
					КонецЦикла;
					
				Иначе
					БухИт.ИспользоватьСубконто(ВидыСубконто.Номенклатура, Товар, 2);
					БухИт.ИспользоватьСубконто(ВидыСубконто.Контрагенты,Комитент);
					БухИт.ИспользоватьСубконто(ВидыСубконто.Договоры);
					БухИт.ВыполнитьЗапрос(ТекущийДокумент(),,"004");
					БухИт.ВыбратьСубконто(3);
					Пока БухИт.ПолучитьСубконто(3) = 1 Цикл
						ТаблицаКомитентов.НоваяСтрока();
						ТаблицаКомитентов.ДоговорКомиссии = БухИт.Субконто(3);
						ТаблицаКомитентов.Остаток = БухИт.СНД("К");
						ТаблицаКомитентов.Сумма = БухИт.СНД("С");
						ТаблицаКомитентов.Цена = ТаблицаКомитентов.Сумма / ТаблицаКомитентов.Остаток;
					КонецЦикла;
				КонецЕсли;
				Позиция = 1;
				Если Комитент.Выбран() = 1 Тогда
				    ЗаголовокВыбора = "Выберите договор комиссии";
				Иначе
					ЗаголовокВыбора = "Выберите комитента";
				КонецЕсли;
				Если ТаблицаКомитентов.ВыбратьСтроку(Позиция,"Выберите комитента") = 0 Тогда
				ИначеЕсли Позиция > 0 Тогда
					Если Комитент.Выбран() = 0 Тогда
						Комитент = ТаблицаКомитентов.ПолучитьЗначение(Позиция,"Комитент");
					КонецЕсли;
					Дог = ТаблицаКомитентов.ПолучитьЗначение(Позиция,"ДоговорКомиссии");
					Если ТипЗначенияСтр(Дог) = "Справочник" Тогда
						ДоговорКомиссии = Дог;
					Иначе
						ДоговорКомиссии = "";
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;

		Иначе //Если ПунктМеню = 3 Тогда
			Если Комитент.Выбран() = 0 Тогда
				СпрКонтр = СоздатьОбъект("Справочник.Контрагенты");
				Если СпрКонтр.Выбрать("Выберите комитента",) = 1 Тогда
					Комитент = СпрКонтр.ТекущийЭлемент();
					глПриВыбореКонтрагента(Комитент,ДоговорКомиссии);
				КонецЕсли;
			КонецЕсли;
			Если Комитент.Выбран() = 1 Тогда
				СпрДог = СоздатьОбъект("Справочник.Договоры");
				СпрДог.ИспользоватьВладельца(Комитент);
				Если СпрДог.Выбрать("Выберите договор комиссии",) = 1 Тогда
					ДоговорКомиссии = СпрДог.ТекущийЭлемент();
					глПриВыбореДоговора(Комитент,ДоговорКомиссии);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ВыборДоговораКомиссии()

//*****************************************************************************
// ИтоговаяСтрока()
// 
// Вызывается из формул элементов диалога:
//  Текст ИтоговаяСтрока.
//
// Описание:
//  Формирует строку, содержащую итоговые суммы колонок табличной части.
//
Функция ИтоговаяСтрока()
	
	ИтСтр = "Итого отгружено на сумму: " + СокрЛ(Формат(Итог("Всего"),"Ч20.2-,")) + ", "+ 
			"в т.ч. НДС: " + СокрЛ(Формат(Итог("НДС"),"Ч20.2-,"));
	Если Итог("НП") > 0 Тогда
		ИтСтр = ИтСтр + ", НП: " + СокрЛ(Формат(Итог("НП"),"Ч20.2-,"));
	КонецЕсли;
	Возврат ИтСтр;
	
КонецФункции // ИтоговаяСтрока()

//******************************************************************************
// Печать()
//
// Вызывается из формул элементов диалога:
//  Кнопка "Печать".
//
// Описание:
//  Формирование печатной формы документа.
//
Процедура Печать()
	
	НомерДокПечатнойФормы = глПреобразоватьНомерДок(НомерДок, 0, 0);

	//Для простоты настройки печатной формы примем следующие соглашения:
	//	-	высота строк в таблице печатной формы задана жестко,
	//		тогда известно, сколько строк помещается на странице;
	СтрокНаСтранице = 20;
	//	-	высота шапки и подвала задана жестко и кратна высоте строк таблицы,
	//		тогда можно указать, сколько строк занимают шапка и подвал
	//		в пересчете на строки таблицы;
	СтрокШапки = 11;
	СтрокПодвала = 8;
	//	-	для нормальной работы алгоритма необходимо, чтобы шапка и подвал
	//		могли поместиться на одной странице + хотя бы одна строка таблицы:
	//		СтрокНаСтранице >= СтрокШапки + СтрокПодвала + 1
	//	-	если подвал не помещается на странице, он переносится на другую
	//		страницу с последней строкой; исключение составляет случай,
	//		когда в таблице всего одна строка.
	Если КоличествоСтрок() <= 3 Тогда
		ПереноситьПоследнююСтроку = 0;
	Иначе
		ЦелыхСтраницСПодвалом = Цел((СтрокШапки+КоличествоСтрок()+СтрокПодвала)/СтрокНаСтранице);
		ЦелыхСтраницБезПодвала = Цел((СтрокШапки+КоличествоСтрок()-1)/СтрокНаСтранице);
		ПереноситьПоследнююСтроку = ЦелыхСтраницСПодвалом - ЦелыхСтраницБезПодвала;
	КонецЕсли;
	//Если ПереноситьПоследнююСтроку = 1 - переносить,
	//если ПереноситьПоследнююСтроку = 0 - не надо переносить.

	Если Итог("НП") > 0 Тогда
    	ФлагНП = 1;
	Иначе
    	ФлагНП = 0;
	КонецЕсли;
	
	Если Договор.ВалютаДоговора.Выбран() = 1 Тогда
	    ЦеныВДоговоре = 2;
		Кратность = Договор.ВалютаДоговора.Кратность.Получить(ДатаДок);
		Кратность = ?(Кратность = 0, 1, Кратность);
		Если Договор.ВестиУчетРасчетовУЕ = 1 Тогда
			Кратность = Кратность * 100 / (100 + Договор.ПроцентКорректировкиКурсаУЕ);
		КонецЕсли;
		
	Иначе
		ЦеныВДоговоре = 1;
	КонецЕсли;

	Таб = СоздатьОбъект("Таблица");
	ИмяФайлаПечатнойФормы = КаталогИБ()+"ExtForms\PrnForms\1cbt-12.mxl";
	Если ФС.СуществуетФайл(ИмяФайлаПечатнойФормы) = 1 Тогда
		Таб.ИсходнаяТаблица(ИмяФайлаПечатнойФормы);
	Иначе
		Таб.ИсходнаяТаблица("ТОРГ-12");
	КонецЕсли;

	// формирование адреса поставщика 
	Если СтрДлина(СокрЛП(Константа.ИННОрганизации))<13 Тогда
		ИННОрганизации = СокрЛП(Константа.ИННОрганизации);
	ИначеЕсли Найти("0123456789",СРЕД(Константа.ИННОрганизации,11,1))=0 Тогда
		ИННОрганизации = СРЕД(Константа.ИННОрганизации,1,10);
	Иначе
		ИННОрганизации = СРЕД(Константа.ИННОрганизации,1,12);
	КонецЕсли;

	ОрганизацияАдрес = СокрЛП(Константа.НазваниеОрганизации);
	глДобавитьРеквизит(ОрганизацияАдрес, ", ИНН ", ИННОрганизации);
	глДобавитьРеквизит(ОрганизацияАдрес, ", ", глПредставлениеАдреса(Константа.АдресОрганизации));
	глДобавитьРеквизит(ОрганизацияАдрес, ", тел. : ", Константа.ТелефоныОрганизации);
	Если РасчетныйСчет.Выбран() = 1 Тогда
	    глДобавитьРеквизит(ОрганизацияАдрес, ", р/с ", СокрЛП(РасчетныйСчет.Номер) + " в " + РасчетныйСчет.БанкОрганизации);
		глДобавитьРеквизит(ОрганизацияАдрес, ", БИК ", СокрЛП(РасчетныйСчет.БанкОрганизации.Код));
		глДобавитьРеквизит(ОрганизацияАдрес, ", корр/с ", РасчетныйСчет.БанкОрганизации.КоррСчет);
	КонецЕсли;
	ПоставщикОКПО = Константа.КодОКПО;
	// формирование адреса грузоотправителя
	Если ПустоеЗначение(Грузоотправитель) = 1 Тогда 
		
		ГрузоотправительАдрес = СокрЛП(Константа.НазваниеОрганизации);
		глДобавитьРеквизит(ГрузоотправительАдрес, ", ИНН ", ИННОрганизации);
		глДобавитьРеквизит(ГрузоотправительАдрес, ", ", глПредставлениеАдреса(Константа.ПочтовыйАдресОрганизации));
		глДобавитьРеквизит(ГрузоотправительАдрес, ", тел. : ", Константа.ТелефоныОрганизации);
		Если РасчетныйСчет.Выбран() = 1 Тогда
			глДобавитьРеквизит(ГрузоотправительАдрес, ", р/с ", СокрЛП(РасчетныйСчет.Номер) + " в " + РасчетныйСчет.БанкОрганизации);
			глДобавитьРеквизит(ГрузоотправительАдрес, ", БИК ", СокрЛП(РасчетныйСчет.БанкОрганизации.Код));
			глДобавитьРеквизит(ГрузоотправительАдрес, ", корр/с ", РасчетныйСчет.БанкОрганизации.КоррСчет);
		КонецЕсли;
        ГрузоотправительОКПО = Константа.КодОКПО;
	Иначе
		СчетКонтрагента = "";
		СчетКонтрагента = глРасчетныйСчетКонтрагента(Грузоотправитель);
		ИННКонтрагента = ?(Грузоотправитель.ВидКонтрагента = Перечисление.ВидыКонтрагентов.ЧастноеЛицо, СРЕД(Грузоотправитель.ИНН,1,12),СРЕД(Грузоотправитель.ИНН,1,10));
		ГрузоотправительАдрес = СокрЛП(Грузоотправитель.ПолнНаименование)+?(ПустоеЗначение(ИННКонтрагента) = 0, ", ИНН " + ИННКонтрагента, "")+", "+СокрЛП(Грузоотправитель.ПочтовыйАдрес)+", тел: "+СокрЛП(Грузоотправитель.Телефоны);
		Если ПустоеЗначение(СчетКонтрагента) = 0 Тогда
		    глДобавитьРеквизит(ГрузоотправительАдрес, ", р/с ", СокрЛП(СчетКонтрагента.Номер) + " в " + СчетКонтрагента.БанкОрганизации);
			глДобавитьРеквизит(ГрузоотправительАдрес, ", БИК ", СокрЛП(СчетКонтрагента.БанкОрганизации.Код));
			глДобавитьРеквизит(ГрузоотправительАдрес, ", корр/с ", СчетКонтрагента.БанкОрганизации.КоррСчет);
		КонецЕсли;
		ГрузоотправительОКПО = Грузоотправитель.ОКПО;
	КонецЕсли;
	
	ПредставлениеГода = Лев(ДатаГод(ДатаДок),2);
	
	// формирование адреса плательщика
	СчетКонтрагента = "";
	СчетКонтрагента = глРасчетныйСчетКонтрагента(Контрагент);
	ИННКонтрагента = ?(Контрагент.ВидКонтрагента = Перечисление.ВидыКонтрагентов.ЧастноеЛицо, СРЕД(Контрагент.ИНН,1,12),СРЕД(Контрагент.ИНН,1,10));
	КонтрагентАдрес = СокрЛП(Контрагент.ПолнНаименование)+?(ПустоеЗначение(ИННКонтрагента) = 0, ", ИНН " + ИННКонтрагента, "")+", "+СокрЛП(Контрагент.ЮридическийАдрес)+", тел: "+СокрЛП(Контрагент.Телефоны);
	Если ПустоеЗначение(СчетКонтрагента) = 0 Тогда
	    глДобавитьРеквизит(КонтрагентАдрес, ", р/с ", СокрЛП(СчетКонтрагента.Номер) + " в " + СчетКонтрагента.БанкОрганизации);
		глДобавитьРеквизит(КонтрагентАдрес, ", БИК ", СокрЛП(СчетКонтрагента.БанкОрганизации.Код));
		глДобавитьРеквизит(КонтрагентАдрес, ", корр/с ", СчетКонтрагента.БанкОрганизации.КоррСчет);
	КонецЕсли;
	ПлательщикОКПО = Контрагент.ОКПО;
	// формирование адреса грузополучателя
	Если ПустоеЗначение(Грузополучатель) = 1 Тогда
		ГрузополучательАдрес = СокрЛП(Контрагент.ПолнНаименование)+?(ПустоеЗначение(ИННКонтрагента) = 0, ", ИНН " + ИННКонтрагента, "")+", "+СокрЛП(Контрагент.ПочтовыйАдрес)+", тел: "+СокрЛП(Контрагент.Телефоны);
		Если ПустоеЗначение(СчетКонтрагента) = 0 Тогда
			глДобавитьРеквизит(ГрузополучательАдрес, ", р/с ", СокрЛП(СчетКонтрагента.Номер) + " в " + СчетКонтрагента.БанкОрганизации);
			глДобавитьРеквизит(ГрузополучательАдрес, ", БИК ", СокрЛП(СчетКонтрагента.БанкОрганизации.Код));
			глДобавитьРеквизит(ГрузополучательАдрес, ", корр/с ", СчетКонтрагента.БанкОрганизации.КоррСчет);
		КонецЕсли;
		ГрузополучательОКПО = Контрагент.ОКПО;
	Иначе
		СчетКонтрагента = "";
		СчетКонтрагента = глРасчетныйСчетКонтрагента(Грузополучатель);
		ИННКонтрагента = ?(Грузополучатель.ВидКонтрагента = Перечисление.ВидыКонтрагентов.ЧастноеЛицо, СРЕД(Грузополучатель.ИНН,1,12),СРЕД(Грузополучатель.ИНН,1,10));
		ГрузополучательАдрес = СокрЛП(Грузополучатель.ПолнНаименование)+?(ПустоеЗначение(ИННКонтрагента) = 0, ", ИНН " + ИННКонтрагента, "")+", "+СокрЛП(Грузополучатель.ПочтовыйАдрес)+", тел: "+СокрЛП(Грузополучатель.Телефоны);
		Если ПустоеЗначение(СчетКонтрагента) = 0 Тогда
		    глДобавитьРеквизит(ГрузополучательАдрес, ", р/с ", СокрЛП(СчетКонтрагента.Номер) + " в " + СчетКонтрагента.БанкОрганизации);
			глДобавитьРеквизит(ГрузополучательАдрес, ", БИК ", СокрЛП(СчетКонтрагента.БанкОрганизации.Код));
			глДобавитьРеквизит(ГрузополучательАдрес, ", корр/с ", СчетКонтрагента.БанкОрганизации.КоррСчет);
		КонецЕсли;
		ГрузополучательОКПО = Грузополучатель.ОКПО;
	КонецЕсли;   
	
	// Выгрузим табличную часть документа в таблицу значений.
	ТабДок = СоздатьОбъект("ТаблицаЗначений");
	ВыгрузитьТабличнуюЧасть(ТабДок); 
	
	ТабДок.НоваяКолонка("СтавкаНДС", "Число");
	ВыбратьСтроки();
	Пока ПолучитьСтроку() = 1 Цикл
	    ТабДок.УстановитьЗначение(НомерСтроки, "СтавкаНДС", глСтавкаНалога(Контекст, "НДС").Ставка);
	КонецЦикла;
	
	//************************************************************************************
	//Для документов в у.е
	ТекстПредупреждения = "";
	ДокументВУЕ = 0; 
	ДокументВВАЛ = 0; 
	
	Если КодВидаОтгрузки = 1 Тогда
		
		ЦеныВДоговоре = 1; // в рублях
		ОплатаДоговора = 1; // в рублях
		
		Если Договор.Выбран() = 1 Тогда
			Если ПустоеЗначение(Договор.ВалютаДоговора) = 0 Тогда
				ЦеныВДоговоре = 2; // в валюте
				ОплатаДоговора = Договор.ОплатаДоговора; // 1 - врублях, 2 - в валюте
				Если ОплатаДоговора = 1 Тогда
					ДокументВУЕ = 1; 
					ВестиУчетРасчетовУЕ = Договор.ВестиУчетРасчетовУЕ;				
				Иначе
					ДокументВВАЛ = 1; 
					ВестиУчетРасчетовУЕ = Договор.ВестиУчетРасчетовУЕ;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		Если (ДокументВУЕ = 1)
		ИЛИ ((ДокументВВАЛ = 1) И (ДатаДок >= '01.01.2008')) Тогда
			Опер = СоздатьОбъект("Операция");
			//Предварительно получим сумму выручки, если документ проведен
			Сч90_1_1 = СчетПоКоду("90.1.1");			
			ВыручкаПоДокументуРуб = 0;
			Если Проведен() = 1 Тогда
				Если Опер.НайтиОперацию(ТекущийДокумент()) = 1 Тогда
					Опер.ВыбратьПроводки();
					Пока Опер.ПолучитьПроводку() = 1 Цикл
						Если (Опер.Кредит.Счет = Сч90_1_1) ИЛИ (Лев(Опер.Кредит.Счет.Код,2) = "76") Тогда //или выручка или расчеты за комиссионный товар
							ВыручкаПоДокументуРуб = ВыручкаПоДокументуРуб + Опер.Сумма;
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
			КонецЕсли;
			
			Если ДокументВУЕ = 1 Тогда
				Сч62_6 = СчетПоКоду("62.6");
				Сч62_7 = СчетПоКоду("62.7");
				Сч62_8 = СчетПоКоду("62.8");
				СчВР_6 = СчетПоКоду("ВР.6");
			Иначе
				Сч62_6 = СчетПоКоду("62.11");
				Сч62_7 = СчетПоКоду("62.22");
				СчВР_6 = СчетПоКоду("ВР.11");
			КонецЕсли;
			
			
			СуммаЗачетаВал = 0;
			СуммаЗачетаРуб = 0;
			ЗадолженностьВал = 0;
			ЗадолженностьРуб = 0;
			
			Если Опер.НайтиОперацию(ТекущийДокумент()) = 1 Тогда
				Опер.ВыбратьПроводки();
				Пока Опер.ПолучитьПроводку() = 1 Цикл
					Если Опер.Дебет.Счет = СчВР_6 Тогда
						СуммаЗачетаВал = СуммаЗачетаВал + Опер.ВалСумма;
						СуммаЗачетаРуб = СуммаЗачетаРуб + Опер.Сумма;
						ЗадолженностьВал = ЗадолженностьВал + Опер.ВалСумма;
						ЗадолженностьРуб = ЗадолженностьРуб + Опер.Сумма;
						
					Иначе
						Если (Опер.Дебет.Счет = Сч62_7) и ((Опер.Кредит.Счет = Сч62_6) ИЛИ (Опер.Кредит.Счет = Сч62_8)) Тогда
							СуммаЗачетаВал = СуммаЗачетаВал + Опер.ВалСумма;
							СуммаЗачетаРуб = СуммаЗачетаРуб + Опер.Сумма;
						КонецЕсли;
						
						Если (Опер.Дебет.Счет = Сч62_6) ИЛИ (Опер.Дебет.Счет = Сч62_8) Тогда
							ЗадолженностьВал = ЗадолженностьВал + Опер.ВалСумма;
							ЗадолженностьРуб = ЗадолженностьРуб + Опер.Сумма;
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			
			ВалютаДок = Договор.ВалютаДоговора;
			
			Если ВерсияОбъекта < "7.70.421" Тогда
				ЦеныВДоговоре = 2;
				КурсДок = ВалютаДок.Курс.Получить(ДатаДок);
			КонецЕсли;
			
			Если ЦеныВДоговоре = 2 Тогда
				Кратность = ВалютаДок.Кратность.Получить(ДатаДок);
				Кратность = ?(Кратность=0, 1, Кратность);
				Если Договор.ВестиУчетРасчетовУЕ = 1 Тогда
					Кратность = Кратность * 100 / (100 + Договор.ПроцентКорректировкиКурсаУЕ);
				КонецЕсли;
			КонецЕсли;
			
			ДоляОплаченнойОтгрузки = ?(ЗадолженностьВал = 0, 0, СуммаЗачетаВал / ЗадолженностьВал);
			КурсОплаты = ?(СуммаЗачетаВал = 0, 0, Окр(СуммаЗачетаРуб / СуммаЗачетаВал, 4, 1));
			КурсСФ = Курс / Кратность;
			
			ТабДок.ВыбратьСтроки();
			Пока ТабДок.ПолучитьСтроку()= 1 Цикл
				
				ОплСумма = ТабДок.Сумма * ДоляОплаченнойОтгрузки;
				ТабДок.Сумма = Окр(ОплСумма * КурсОплаты + (ТабДок.Сумма - ОплСумма) * КурсСФ, 2, 1);
				
				ОплНДС = ТабДок.НДС * ДоляОплаченнойОтгрузки;
				Если ДокументВВАЛ = 1 Тогда
					ТабДок.НДС = Окр(ТабДок.НДС * КурсСФ, 2, 1);
				Иначе
					ТабДок.НДС = Окр(ОплНДС * КурсОплаты + (ТабДок.НДС - ОплНДС) * КурсСФ, 2, 1);
				КонецЕсли;
				
				ОплНП = ТабДок.НП * ДоляОплаченнойОтгрузки;
				ТабДок.НП = Окр(ОплНП * КурсОплаты + (ТабДок.НП - ОплНП) * КурсСФ, 2, 1);
				
				ОплЦена = ТабДок.Цена * ДоляОплаченнойОтгрузки;
				Если ДокументВВАЛ = 1 Тогда
					ТабДок.Цена = Окр(ТабДок.Сумма / ?(ТабДок.Количество = 0, 1, ТабДок.Количество), 2, 1);
				Иначе
					ТабДок.Цена = Окр(ОплЦена * КурсОплаты + (ТабДок.Цена - ОплЦена) * КурсСФ, 2, 1);
				КонецЕсли;
				
				ОплВсего = ТабДок.Всего * ДоляОплаченнойОтгрузки;
				ТабДок.Всего  = Окр(ОплВсего * КурсОплаты + (ТабДок.Всего  - ОплВсего) * КурсСФ, 2, 1);
								
			КонецЦикла;
			
			Если Проведен() = 1 Тогда
				Если (ВыручкаПоДокументуРуб <> ТабДок.Итог("Всего")) и (ДоляОплаченнойОтгрузки <> 0) Тогда
					ТекстПредупреждения = "Внимание! Сумма документа отличается от суммы отраженной в бухгалтерском учете. Возможно следует перепровести документ.";
					Таб.ВывестиСекцию("ТекстПредупреждения");					
				Иначе
					ТекстПредупреждения = "";
				КонецЕсли;
			КонецЕсли;
		КонецЕсли; 
	КонецЕсли; 
	//Для документов в у.е
	//************************************************************************************
	
	Таб.ВывестиСекцию("Шапка|БезНГСМиНП");
	
	НомерСтраницы = 1;
	ИтогоКоличествоНаСтранице = 0;
	ИтогоСуммаНаСтранице = 0;
	ИтогоНДСНаСтранице = 0;
	ИтогоСуммаСНДСНаСтранице = 0;
	ИтогоНПНаСтранице = 0;
	ИтогоСумма = 0;
	ИтогоСуммаСНДС = 0;
	ИтогоНДС = 0;
	ИтогоНП = 0;
	Таб.ВывестиСекцию("ЗаголовокТаблицы|БезНГСМиНП");
	Если ФлагНП = 1 Тогда
		Таб.ПрисоединитьСекцию("ЗаголовокТаблицы|НП");
	КонецЕсли;  
	
	Ном = 0;
	ТабДок.ВыбратьСтроки();
	Пока ТабДок.ПолучитьСтроку() = 1 Цикл
		Ном = Ном + 1;
		//Начинаем новую страницу, если предыдущая строка была последней на странице
		//или пора переносить последнюю строку на последнюю страницу с подвалом.
		ЦелаяСтраница = (СтрокШапки+Ном-1)/СтрокНаСтранице;
		Если (ЦелаяСтраница = Цел(ЦелаяСтраница))
			или ((ПереноситьПоследнююСтроку = 1) и (Ном = КоличествоСтрок())) Тогда
				Таб.ВывестиСекцию("ИтогоПоСтранице|БезНГСМиНП");
				Если ФлагНП = 1 Тогда
					Таб.ПрисоединитьСекцию("ИтогоПоСтранице|НП");
				КонецЕсли;
			ИтогоКоличествоНаСтранице = 0;
			ИтогоСуммаНаСтранице = 0;
			ИтогоНДСНаСтранице = 0;
			ИтогоСуммаСНДСНаСтранице = 0;
			ИтогоНПНаСтранице = 0;
			Таб.НоваяСтраница();
			НомерСтраницы = НомерСтраницы + 1;
			Таб.ВывестиСекцию("ЗаголовокТаблицы|БезНГСМиНП");
			Если ФлагНП = 1 Тогда
				Таб.ПрисоединитьСекцию("ЗаголовокТаблицы|НП");
			КонецЕсли;
		КонецЕсли;
	    СтавкаНДС = ТабДок.СтавкаНДС;
		Кол = ?(ТабДок.Количество = 0, 1, ТабДок.Количество);
		Пересчитать = 0;
		Если Цел(СтавкаНДС) = СтавкаНДС Тогда
		    ЦенаНаПечать = (ТабДок.Всего - ТабДок.НДС - ТабДок.НП)/Кол;
			СуммаНаПечать = ТабДок.Всего - ТабДок.НДС - ТабДок.НП;
		Иначе
			ЦенаНаПечать = (ТабДок.Всего - ТабДок.НП)/Кол;
			СуммаНаПечать = ТабДок.Всего - ТабДок.НП;
		КонецЕсли;
		                                                     
		// Если цена, указанная в документе без налогов,
		// то в печ. форме надо отражть ее.
		Если (ВариантРасчетаНалогов.СуммаВключаетНДС = 0)
		   и (ВариантРасчетаНалогов.СуммаВключаетНП = 0) Тогда
		   ЦенаНаПечать = ТабДок.Цена;
		КонецЕсли;
	
		Если (ДокументВУЕ = 1)
		ИЛИ ((ДокументВВАЛ = 1) И (ДатаДок >= '01.01.2008')) Тогда
			СуммаНаПечать = СуммаНаПечать;
			ЦенаНаПечать = ЦенаНаПечать;
			НДСНаПечать = ТабДок.НДС;
			НПНаПечать = ТабДок.НП;
		ИначеЕсли ЦеныВДоговоре = 2 Тогда
			СуммаНаПечать = СуммаНаПечать*Курс/Кратность;
			ЦенаНаПечать = ЦенаНаПечать*Курс/Кратность;
			НДСНаПечать = ТабДок.НДС*Курс/Кратность;
			НПНаПечать = ТабДок.НП*Курс/Кратность;
		Иначе
			НДСНаПечать = ТабДок.НДС;
			НПНаПечать = ТабДок.НП;
		КонецЕсли;
		
		Таб.ВывестиСекцию("Строка|БезНГСМиНП");
		Если ФлагНП = 1 Тогда
		    Таб.ПрисоединитьСекцию("Строка|НП");
		КонецЕсли;
		ИтогоКоличествоНаСтранице = ИтогоКоличествоНаСтранице + ТабДок.Количество;
		ИтогоСуммаНаСтранице = ИтогоСуммаНаСтранице + СуммаНаПечать;
		ИтогоСумма = ИтогоСумма + СуммаНаПечать;
		ИтогоНДС = ИтогоНДС + НДСНаПечать;
		ИтогоНП = ИтогоНП + НПНаПечать;
		ИтогоНДСНаСтранице = ИтогоНДСНаСтранице + НДСНаПечать;
		Если Цел(СтавкаНДС) = СтавкаНДС Тогда
		    ИтогоСуммаСНДСНаСтранице = ИтогоСуммаСНДСНаСтранице + СуммаНаПечать + НДСНаПечать;
			ИтогоСуммаСНДС = ИтогоСуммаСНДС + СуммаНаПечать + НДСНаПечать;
		Иначе
			ИтогоСуммаСНДСНаСтранице = ИтогоСуммаСНДСНаСтранице + СуммаНаПечать;
			ИтогоСуммаСНДС = ИтогоСуммаСНДС + СуммаНаПечать;
		КонецЕсли;
		ИтогоНПНаСтранице = ИтогоНПНаСтранице + НПНаПечать;
	КонецЦикла;

	Таб.ВывестиСекцию("ИтогоПоСтранице|БезНГСМиНП");
	Если ФлагНП = 1 Тогда
		Таб.ПрисоединитьСекцию("ИтогоПоСтранице|НП");
	КонецЕсли;
	Таб.ВывестиСекцию("Всего|БезНГСМиНП");
	Если ФлагНП = 1 Тогда
		Таб.ПрисоединитьСекцию("Всего|НП");
	КонецЕсли;
	Таб.ВывестиСекцию("Подвал|БезНГСМиНП");
	Таб.Опции(0,0,0,0,"ОпцииПечатиНакладной","ОкноНакладной"); 
	
	Если ПустоеЗначение(ТекстПредупреждения) = 1 Тогда
	    Таб.ОбластьПечати(1,,,);
	Иначе
		Таб.ОбластьПечати(2,,,);
	КонецЕсли;             
	
	Таб.ПараметрыСтраницы(2,,,,,0,0,,,1);
	Таб.ТолькоПросмотр(1);
	Таб.Показать("Печать накладной","");
	
КонецПроцедуры // Печать()

//******************************************************************************
// ПоКнопкеПечать()
// 
// Вызывается из формул элементов диалога:
//  Кнопка "кнПечать".
//
// Описание:
//  Определяется соответствующая печатная форма.
// 	
Процедура ПоКнопкеПечать(СразуНаПринтер = 0,КолЭкз = 1)
	
	Если  ПустоеЗначение(НомерТекущейФормы) = 1  Тогда
		НомерТекущейФормы = 1;
		Форма.кнПечать.Заголовок(ТаблицаПечФорм.ПолучитьЗначение(НомерТекущейФормы, "Кнопка"));
	КонецЕсли;
	
	Если НомерТекущейФормы = 1  Тогда
		Печать();
		
	Иначе
		Параметры = СоздатьОбъект("СписокЗначений");
		Параметры.ДобавитьЗначение(Контекст, "Контекст");
		Параметры.ДобавитьЗначение(СразуНаПринтер, "Устройство");
		Параметры.ДобавитьЗначение(КолЭкз, "КоличествоКопий");
		
		ОткрытьФорму("Отчет", Параметры, глКаталогПечФорм+ТаблицаПечФорм.ПолучитьЗначение(НомерТекущейФормы,"Файл"));
	КонецЕсли;
	
КонецПроцедуры // ПоКнопкеПечать()

//******************************************************************************
// ПоКнопкеВыборПечатнойФормы()
//
// Вызывается из формул элементов диалога:
//  Кнопка "кнВыбПечать".
//
// Описание:
//  - открывает список для выбора способа печати. 
//  - формирует таблицу по выбранному способу.
//
Процедура ПоКнопкеВыборПечатнойФормы()
	
    ВыбНомер = глВыборПечатнойФормы("Документ." + Вид(), ТаблицаПечФорм);
	Если ВыбНомер > 0 Тогда
		НомерТекущейФормы = ВыбНомер;
		Форма.кнПечать.Заголовок(ТаблицаПечФорм.ПолучитьЗначение(НомерТекущейФормы, "Кнопка"));
		ПоКнопкеПечать();
	КонецЕсли;

КонецПроцедуры // ПоКнопкеВыборПечатнойФормы()

//******************************************************************************
// ПриВыбореВидовОтгрузки()
//
// Параметры:
//  Нет.
//
// Вызывается из формул элементов диалога:
//  Поле со списком - СписокВидовОтгрузки.
//
// Описание:
//  Здесь описывается процедура.
//
Процедура ПриВыбореВидовОтгрузки()
	
	Если ВидОтгрузки <> СписокВидовОтгрузки.ПолучитьЗначение(СписокВидовОтгрузки.ТекущаяСтрока()) Тогда
		ВидОтгрузки = СписокВидовОтгрузки.ПолучитьЗначение(СписокВидовОтгрузки.ТекущаяСтрока());    
	КонецЕсли;
	Если ВидОтгрузки > 10 Тогда
	    КодВидаОтгрузки = ПолучитьКодВидаОтгрузки();
	Иначе
		КодВидаОтгрузки = ВидОтгрузки;
	КонецЕсли;
	Если КодВидаОтгрузки  >= 3 Тогда //возврат поставщику
		Форма.ИспользоватьСлой("Возврат", 1);
		Форма.СтатикВариантЗачетаАванса.Видимость(0);
		Форма.ВариантЗачетаАванса.Видимость(0);
		
	Иначе // релизация или отгрузка
		Форма.ИспользоватьСлой("Возврат", 0);
		Форма.СтатикВариантЗачетаАванса.Видимость(1);
		Форма.ВариантЗачетаАванса.Видимость(1);
	КонецЕсли;
	
	УправлениеВидимостьюСлояКомиссия(1);
	УправлениеВидимостьюГТД(1);
	
КонецПроцедуры // ПриВыбореВидовОтгрузки()

//*****************************************************************************
// ПриВыбореМестаХранения()
//
// Вызывается из формул элементов диалога:
//  ПолеВвода "МестоХранения".
//
// Описание:
//  Изменяет выбранный склад в открытой форме подбора номенклатуры.
//
Процедура ПриВыбореМестаХранения()
	
	Если ТипЗначения(КонтекстФормыПодбора) = 100 Тогда
		КонтекстФормыПодбора.Форма.Обновить();
	КонецЕсли;
	Если (МестоХранения.Выбран()=1) и (Константа.ИспользоватьТипыЦен <> Нет) Тогда
		Если (МестоХранения.ТипЦен <> ТипЦен)и(КоличествоСтрок()>0) Тогда
			Если Вопрос("Для выбранного склада установлен другой тип цен."+РазделительСтрок+"Перезаполнить цены в документе?","Да+Нет",30) = "Да" Тогда
				ТипЦен = МестоХранения.ТипЦен;
				ПересчитатьЦены();
			КонецЕсли;
		ИначеЕсли МестоХранения.ТипЦен <> ТипЦен Тогда
			ТипЦен = МестоХранения.ТипЦен;
		КонецЕсли;
	КонецЕсли;
	ПриВыбореВидовОтгрузки();
	
КонецПроцедуры // ПриВыбореМестаХранения()

//******************************************************************************
// УправлениеВидимостьюГрузоотправителя()
//
// Параметры:
//  Нет.
//
// Вызывается из формул элементов диалога:
//  Нет.
//
// Описание:
//  Здесь описывается процедура.
//
Процедура УправлениеВидимостьюГрузоотправителя()
	                         
	Если ВариантОтправки = 1 Тогда // он же
		Видимость = 0;
		
		Если ПустоеЗначение(Грузоотправитель) = 0 Тогда
			Грузоотправитель = 0;    
		КонецЕсли;
		
		
	Иначе
		Видимость = 1;
	КонецЕсли;
		
	Форма.Грузоотправитель.Видимость(Видимость);
	Форма.ПоказатьГрузоотправителя.Видимость(Видимость);
	
КонецПроцедуры // УправлениеВидимостьюГрузоотправителя()

//******************************************************************************
// УправлениеВидимостьюГрузополучателя()
//
// Параметры:
//  Нет.
//
// Вызывается из формул элементов диалога:
//  Нет.
//
// Описание:
//  Здесь описывается процедура.
//
Процедура УправлениеВидимостьюГрузополучателя()
	
	Если ВариантПолучения = 1 Тогда // он же
		Видимость = 0;
		
		Если ПустоеЗначение(Грузополучатель) = 0 Тогда
			Грузополучатель = 0;    
		КонецЕсли;
		
	Иначе
		Видимость = 1;
	КонецЕсли;
		
	Форма.Грузополучатель.Видимость(Видимость);
	Форма.ПоказатьГрузополучателя.Видимость(Видимость);
	
КонецПроцедуры // УправлениеВидимостьюГрузополучателя()

//*****************************************************************************
// Подбор()
//
// Вызывается из формул элементов диалога:
//  Кнопка "КнопкаПодбор".
//
// Описание:
//  Открывает форму подбора номенклатуры.
//
Процедура Подбор()
	
	КонтекстФормыПодбора = СоздатьОбъект("СписокЗначений");
	КонтекстФормыПодбора.ДобавитьЗначение(Контекст, "Контекст");
	КонтекстФормыПодбора.ДобавитьЗначение(МестоХранения, "МестоХранения");
	КонтекстФормыПодбора.ДобавитьЗначение(Комитент, "Комитент");
	КонтекстФормыПодбора.ДобавитьЗначение(ДоговорКомиссии, "ДоговорКомиссии");
	ОткрытьПодбор("Справочник.Номенклатура", "ДляПодбора", КонтекстФормыПодбора);
	
КонецПроцедуры // Подбор()  

//*****************************************************************************
// ВариантРасчетаНалогов()
//
// Вызывается из формул элементов диалога:
//  Нет.
//
// Описание:
//  Подбирает вариант расчета налогов.
//
Процедура ВариантРасчетаНалогов(ВРН)
	Если (ВРН.СтавкаНП.Ставка = 0) и
	(ВРН.СтавкаНДС.Ставка = 0) Тогда
		ВариантРасчетаНалогов = ВРН;
		
	Иначе  // попробуем найти подходящий из существующих вариантов расчета налогов
		
		СпрВариант = СоздатьОбъект("Справочник.ВариантыРасчетаНалогов");
		СпрВариант.ВыбратьЭлементы();
		Пока СпрВариант.ПолучитьЭлемент() = 1 Цикл
			
			Если ((ВРН.СтавкаНДС.Ставка = 0)
			и (СпрВариант.СтавкаНДС = ВРН.СтавкаНДС)
			и (СпрВариант.СуммаВключаетНДС = ВРН.СуммаВключаетНДС))
			
			или ((ВРН.СтавкаНДС.Ставка <> 0)
			и (СпрВариант.СтавкаНДС.Выбран() = 0)
			и (СпрВариант.СуммаВключаетНДС = ВРН.СуммаВключаетНДС)) Тогда
				
				Если ((ВРН.СтавкаНП.Ставка = 0)
				и (СпрВариант.СтавкаНП = ВРН.СтавкаНП)
				и (СпрВариант.СуммаВключаетНП = ВРН.СуммаВключаетНП))
				
				или ((ВРН.СтавкаНП.Ставка <> 0)
				и (СпрВариант.СтавкаНП.Выбран() = 0)
				и (СпрВариант.СуммаВключаетНП = ВРН.СуммаВключаетНП)) Тогда
					
					ВариантРасчетаНалогов = СпрВариант.ТекущийЭлемент();
					Прервать;
				КонецЕсли;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
КонецПроцедуры // ВариантРасчетаНалогов()

//*****************************************************************************
// ЗаполнитьНаОсновании(ДокОсн)
//
// Параметры:
//  Нет.
//
// Возвращаемое значение:
//  Число  - 1 - реквизиты заполнены, 0 - не заполнены.
//
// Вызывается из формул элементов диалога:
//  Кнопка "КнопкаЗаполнить".
//
// Описание:
//  Устанавливает значения реквизитов документа в зависимости от значений
//  реквизитов документа основания.
//
Функция ЗаполнитьНаОсновании()
	
	Если ПустоеЗначение(ДокументПоступления) = 1 Тогда
	    Предупреждение("Выберите документ, которым ранее было 
		               |отражено поступление товаров от поставщика!");
		Возврат 0;
		
	ИначеЕсли
		Вопрос("Документ будет  заполнен на основании
		       |выбранного документа. Продолжить?", "Да+Нет" ) <> "Да" Тогда
					
		Возврат 0;
	КонецЕсли;
	
	// Заполненеие шапки.
	МестоХранения = ДокументПоступления.МестоХранения;    
	Контрагент    = ДокументПоступления.Контрагент;
	Договор       = ДокументПоступления.Договор;
	Курс          = ДокументПоступления.Курс;
	ТипЦен        = ДокументПоступления.ТипЦен;
	ВариантРасчетаНалогов(ДокументПоступления.ВариантРасчетаНалогов);
	НДСВключатьВСтоимость = ДокументПоступления.НДСВключатьВСтоимость;
	Если (ДокументПоступления.ВидПоступления = 2) или (ДокументПоступления.ВидПоступления = 1) Тогда // возврат из розничной продажи
	    СписокВидовОтгрузки.ТекущаяСтрока(3);
		ВидОтгрузки = 13;
	КонецЕсли;
	ПриВыбореДоговора();
	УправлениеКурсом(0);
	
	// Заполнение табличной части.
	УдалитьСтроки();
	
	ТаблицаДокумента = СоздатьОбъект("ТаблицаЗначений");
	ДокументПоступления.ВыгрузитьТабличнуюЧасть(ТаблицаДокумента, "Товар, Количество, Цена, Сумма, НДС, НП, Всего, ГТД");
	ЗагрузитьТабличнуюЧасть(ТаблицаДокумента);
	
	Форма.НДС.Видимость(глПризнакУчетаНалога(Контекст, "НДС"));
	Форма.НП.Видимость(глПризнакУчетаНалога(Контекст, "НП"));
	УправлениеВидимостьюГТД(1);
	
КонецФункции // ЗаполнитьНаОсновании()

////////////////////////////////////////////////////////////////////////////////
// ПРЕДОПРЕДЕЛЕННЫЕ ПРОЦЕДУРЫ
//

//*****************************************************************************
// Предопределенная процедура
//
Процедура ВводНового(Копирование)
	глЗаполнитьШапку(Контекст, Копирование);
	Новый = 1;
	ВерсияОбъекта = Константа.НомерРелиза;
	Если Копирование = 1 Тогда //копирование документа
	    Возврат;
	КонецЕсли;

	РасчетныйСчет = глЗначениеПоУмолчанию("ОсновнойБанковскийСчет");
	ВидОтгрузки = 11;
	МестоХранения = глЗначениеПоУмолчанию("ОсновнойСклад");
	Если МестоХранения.Выбран() = 1 Тогда
	    ТипЦен = МестоХранения.ТипЦен;
	КонецЕсли;
	ЗачитыватьАванс = 0;                           
	
	ВариантРасчетаНалогов(Константа.ОсновнойВариантРасчетаНалоговОтгрузки);
	
	ПоставщикуВыставляетсяСчетФактураНаВозврат = 1;
	
КонецПроцедуры // ВводНового()

//*****************************************************************************
// Предопределенная процедура
//
Процедура ВводНаОсновании(ДокОсн)
	
	Новый = 1;
	ВерсияОбъекта = Константа.НомерРелиза;
	Если ДокОсн.Вид() = "Счет" Тогда
		РасчетныйСчет = ДокОсн.РасчетныйСчет;
		ВидОтгрузки = 11;
		ЗачитыватьАванс = 0;
		МестоХранения = глЗначениеПоУмолчанию("ОсновнойСклад");
		ТипЦен = ДокОсн.ТипЦен;
		Контрагент = ДокОсн.Контрагент;
		Если ПустоеЗначение(ДокОсн.Плательщик) = 0 Тогда
		    Грузополучатель = ДокОсн.Плательщик;
		КонецЕсли;
		
		Договор = ДокОсн.Договор;
		Если Договор.ВалютаДоговора.Выбран() = 1 Тогда
		    Курс = Договор.ВалютаДоговора.Курс.Получить(ДатаДок);
		КонецЕсли;
		
		ВариантРасчетаНалогов = ДокОсн.ВариантРасчетаНалогов;
		ДокОсн.ВыбратьСтроки();
		Пока ДокОсн.ПолучитьСтроку() = 1 Цикл
			НоваяСтрока();
			Товар = ДокОсн.Товар;
			Количество = ДокОсн.Количество;
			Цена = ДокОсн.Цена;
			Сумма = ДокОсн.Сумма;
			НДС = ДокОсн.НДС;
			НП = ДокОсн.НП;
			Всего = ДокОсн.Всего;
		КонецЦикла;
	КонецЕсли; 
	Комментарий = "Введен на основании: "+ГлПредставлениеДокумента(ДокОсн);
	
КонецПроцедуры // ВводНаОсновании()

//*****************************************************************************
// Предопределенная процедура
//
Процедура ПриОткрытии()
	
	ПриЗаписиПерепроводить(1);
	глПроверкаРазрешенияРедактирования(Контекст);
	Если Форма.ТолькоПросмотр() = 1 Тогда
		Форма.КнопкаЗаписать.Доступность(0);
		Форма.КнопкаОК.Доступность(0);
		Форма.КнопкаПодбор.Доступность(0);
		Форма.КнопкаОчистить.Доступность(0);
		Форма.КнопкаВыбораКомитента.Доступность(0);
		Форма.КнопкаВыбораДоговораКомиссии.Доступность(0);
	КонецЕсли;
	КонтекстФормыПодбора = 0;
	
	Активизировать("НомерДок");

	Форма.Товар.ВыполнятьФормулуТолькоПриИзменении(1);
	Форма.Количество.ВыполнятьФормулуТолькоПриИзменении(1);
	Форма.Цена.ВыполнятьФормулуТолькоПриИзменении(1);
	Форма.Сумма.ВыполнятьФормулуТолькоПриИзменении(1);
	Форма.НДС.ВыполнятьФормулуТолькоПриИзменении(1);
	Форма.НП.ВыполнятьФормулуТолькоПриИзменении(1);

	ВариантЗачетаАванса.ДобавитьЗначение(1, "не зачитывать");
	ВариантЗачетаАванса.ДобавитьЗначение(2, "только по договору");
	ВариантЗачетаАванса.ДобавитьЗначение(0, "без указания договора");
	ВариантЗачетаАванса.ТекущаяСтрока(ВариантЗачетаАванса.НайтиЗначение(ЗачитыватьАванс));

	Форма.ИспользоватьСлой("Основной");
	
	Если Константа.ИспользоватьТипыЦен = Нет Тогда
	    Форма.ПодписьТипаЦен.Видимость(0);
		Форма.ТипЦен.Видимость(0);
	Иначе
		Форма.ПодписьТипаЦен.Видимость(1);
		Форма.ТипЦен.Видимость(1);
	КонецЕсли;
	
	НачальнаяДатаДокумента = ДатаДок;
	УправлениеКурсом(0);
	Форма.НДС.Видимость(глПризнакУчетаНалога(Контекст, "НДС"));
	Форма.НП.Видимость(глПризнакУчетаНалога(Контекст, "НП"));
	
	Если ВидОтгрузки > 10 Тогда
		СписокВидовОтгрузки.ДобавитьЗначение(11, "Продажа (счет 90)");
		СписокВидовОтгрузки.ДобавитьЗначение(12, "Отгрузка (счет 45)");
		СписокВидовОтгрузки.ДобавитьЗначение(13, "Возврат поставщику");
		СписокВидовОтгрузки.ТекущаяСтрока(ВидОтгрузки - 10);
		КодВидаОтгрузки = ПолучитьКодВидаОтгрузки();
	Иначе
		СписокВидовОтгрузки.ДобавитьЗначение(1, "Продажа (счет 90)");
		СписокВидовОтгрузки.ДобавитьЗначение(2, "Отгрузка (счет 45)");
		СписокВидовОтгрузки.ДобавитьЗначение(3, "Возврат поставщику с оптового склада");
		СписокВидовОтгрузки.ДобавитьЗначение(4, "Возврат поставщику из рознич. продажи");
		СписокВидовОтгрузки.ТекущаяСтрока(ВидОтгрузки);
		КодВидаОтгрузки = ВидОтгрузки;
	КонецЕсли;
	
	ПриВыбореВидовОтгрузки();
	
	// Управление видимостью реквизитов "Грузополучатель" и "Грузотправитель".
	Если ПустоеЗначение(Грузоотправитель) = 1 Тогда
	    ВариантОтправки = 1;
	КонецЕсли;
	УправлениеВидимостьюГрузоотправителя();
	
	Если ПустоеЗначение(Грузополучатель) = 1 Тогда
		ВариантПолучения = 1;
	КонецЕсли;
	УправлениеВидимостьюГрузополучателя();
	
	// Заполним таблицу для выбора печатной формы
	НомерТекущейФормы = глУстановкаКнопкиПечать(Контекст, "Документ." + Вид(),ТаблицаПечФорм);
	
КонецПроцедуры // ПриОткрытии()

//*****************************************************************************
// Предопределенная процедура
//
Процедура ПриНачалеВыбораЗначения(ЭлементДиалога,Флаг)
	
	Если ЭлементДиалога = "ВариантРасчетаНалогов" Тогда
		ТекущийВариантРасчетаНалогов = ВариантРасчетаНалогов;
		Флаг = 0;
		СписокВариантов = СоздатьОбъект("СписокЗначений");
		СпрВариант = СоздатьОбъект("Справочник.ВариантыРасчетаНалогов");
		СпрВариант.ВыбратьЭлементы();
		Пока СпрВариант.ПолучитьЭлемент() = 1 Цикл
			Если (СпрВариант.СтавкаНП.Ставка = 0) и
				 (СпрВариант.СтавкаНДС.Ставка = 0) Тогда
				СписокВариантов.ДобавитьЗначение(СпрВариант.ТекущийЭлемент());
			КонецЕсли;
		КонецЦикла;
		Значение = ВариантРасчетаНалогов;
		Если СписокВариантов.ВыбратьЗначение(Значение, , , , 2) = 0 Тогда
			Возврат;
		КонецЕсли;
		ВариантРасчетаНалогов = Значение;
		ПриВыбореВариантаРасчетаНалогов();
	ИначеЕсли (ЭлементДиалога = "Договор")или(ЭлементДиалога = "Контрагент") Тогда
		СтарыйДоговор = Договор; 
	
	КонецЕсли;
	
КонецПроцедуры // ПриНачалеВыбораЗначения()

//*****************************************************************************
// Предопределенная процедура
//
Процедура ОбработкаПодбора(ВыбрТовар, Конт)
	
	Если КодВидаОтгрузки >= 3 Тогда // // возврат поставщику товара
		Если ВыбрТовар.ТипНоменклатуры <> Перечисление.ТипыНоменклатуры.Товар Тогда	
			Предупреждение("Возвращать поставщику возможно только покупные товары!");
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Кол = 1;
	Если ВвестиЧисло(Кол, "Введите количество", 14, 3) = 0 Тогда
		Возврат;
	ИначеЕсли Кол = 0 Тогда
		Возврат;
	КонецЕсли;

	НоваяСтрока();
	Товар = ВыбрТовар;
	Количество = Кол;
	АктивизироватьСтроку();
	Пересчет("Товар");
	Если Константа.ИспользоватьТипыЦен = Нет Тогда
	Иначе
		Цена = глПолучитьЦену(Контекст,Товар,Конт.ТипЦен,ДатаДок,?(Договор.Выбран() = 0,"",Договор.ВалютаДоговора),Курс);
		Пересчет("Цена");
	КонецЕсли;
	
	УправлениеВидимостьюГТД(0);
	
КонецПроцедуры // ОбработкаПодбора()

//*****************************************************************************
// Предопределенная процедура
//
Процедура ПриЗаписи() //предопределенная
	
	Если глМожноЗаписатьДокумент(Контекст) = 0 Тогда
		СтатусВозврата(0);
		Возврат;
		
	ИначеЕсли глКонтрольДатыДокумента(Контекст, НачальнаяДатаДокумента) = 1 Тогда
		СтатусВозврата(0);
		Возврат;
	КонецЕсли;

	ЦеныВДоговоре = 1; // в рублях
	Если Договор.Выбран() = 1 Тогда
	    Если ПустоеЗначение(Договор.ВалютаДоговора) = 0 Тогда
			ЦеныВДоговоре = 2; // в валюте
		КонецЕсли;
	КонецЕсли;
	
	Если ЦеныВДоговоре = 2 Тогда
		Валюта = Договор.ВалютаДоговора;
		Кратность = Валюта.Кратность.Получить(ДатаДок);
		Кратность = ?(Кратность=0, 1, Кратность);
		Если Договор.ВестиУчетРасчетовУЕ = 1 Тогда
			Кратность = Кратность * 100 / (100 + Договор.ПроцентКорректировкиКурсаУЕ);
		КонецЕсли;
		Операция.СуммаОперации = Окр(Итог("Всего")*Курс/Кратность, 2, 1);
	Иначе
		Операция.СуммаОперации = Итог("Всего");
	КонецЕсли;
	Операция.Содержание = "Отгрузка товаров (продукции)";
	
КонецПроцедуры // ПриЗаписи()

//******************************************************************************
// Предопределенная процедура
//
Процедура ПриЗакрытии()
	
	глОткрытьЖурнал(Контекст, Новый);	
	
КонецПроцедуры // ПриЗакрытии()

//******************************************************************************
Новый = 0;

ТаблицаПечФорм		= СоздатьОбъект("ТаблицаЗначений");
ТаблицаПечФорм.НоваяКолонка("Название","Строка",,,,30);
ТаблицаПечФорм.НоваяКолонка("Файл","Строка",,,"Файл",10);
ТаблицаПечФорм.НоваяКолонка("Кнопка","Строка",,,,10); 
ТаблицаПечФорм.НоваяКолонка("ФайлОписания","Строка");
	
// добавим информацию о встроенной форме
ТаблицаПечФорм.НоваяСтрока();
ТаблицаПечФорм.Название     = "ТОРГ-12";
ТаблицаПечФорм.Кнопка       = "ТОРГ-12";

СписокДействий = СоздатьОбъект("СписокЗначений");
СписокДействий.ДобавитьЗначение("Отчет о движениях документа");
СписокДействий.ДобавитьЗначение("Структура подчиненности");
СписокДействий.ДобавитьЗначение("Ввести на основании");
СписокДействий.ДобавитьЗначение("Перейти  в журнал");