////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ
// 

Перем НачальнаяДатаДокумента; 
Перем ТекущийВариантРасчетаНалогов;
Перем Новый;
Перем СписокДействий;
Перем ТекДоговор;

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ МОДУЛЯ
// 

//******************************************************************************
// УправлениеКурсом(ИзменитьКурс)
//
// Параметры:
//  ИзменитьКурс - Число. Определяет должна ли процедура установить новый курс.
//
// Описание:
//  Управлет видимостью поля "Курс".
//
Процедура УправлениеКурсом(ИзменитьКурс=0)
	Если ИзменитьКурс<>2 Тогда
	ВидимостьКурса = Договор.ВалютаДоговора.Выбран();
	Форма.ПодписьКурса.Видимость(ВидимостьКурса);
	Форма.Курс.Видимость(ВидимостьКурса);
	
	Если ИзменитьКурс = 1 Тогда
		Если ВидимостьКурса = 1 Тогда
		    Курс = Договор.ВалютаДоговора.Курс.Получить(ДатаДок);
			
		Иначе
			Курс = 0;
		КонецЕсли;
	КонецЕсли;
	КонецЕсли;
	
	ВидимостьФлагаЗКП = ?((Договор.Выбран() = 1) и (Договор.АвтоОбработкаНДС = 0) и (СчетФактураПредъявлен = 1) и (ДатаДок>='01.01.2006'), 1, 0);
	Форма.ВключатьВКнигуПокупок.Видимость(ВидимостьФлагаЗКП);
	
	Если (ИзменитьКурс=2) и (ДатаДок<'01.01.2006') Тогда
		ВключатьВКнигуПокупок = 0;
	КонецЕсли;
	
КонецПроцедуры // УправлениеКурсом()

//*****************************************************************************
// ПриВыбореДоговора()
//
// Вызывается из формул элементов диалога:
//  Поле ввода "Договор"
// 
// Описание:
//  Проверяет соответствие договора выбранному контрагенту.
//
Процедура ПриВыбореДоговора()

	глПриВыбореДоговора(Контрагент, Договор);
	УправлениеКурсом(1); // при изменении договора могла измениться валюта
	
	Если Договор <> ТекДоговор Тогда
		Если (Договор.Выбран() = 1) и (Договор.АвтоОбработкаНДС = 0) и (СчетФактураПредъявлен = 1) и (ДатаДок>='01.01.2006') Тогда
		    ВключатьВКнигуПокупок = 1;
			
		Иначе
			ВключатьВКнигуПокупок = 0;
		КонецЕсли;
	Иначе
		
		Если (Договор.АвтоОбработкаНДС = 1) и (ВключатьВКнигуПокупок = 1) Тогда
			ВключатьВКнигуПокупок = 0;
		КонецЕсли;
		
	КонецЕсли;
	
	ТекДоговор = Договор;
	
КонецПроцедуры // ПриВыбореДоговора()

//*****************************************************************************
// ПриВыбореКонтрагента()
//
// Вызывается из формул элементов диалога:
//  Поле ввода "Контрагент".
//
// Описание:
//  Проверяет соответствие договора выбранному контрагенту.
//
Процедура ПриВыбореКонтрагента()
	
	глПриВыбореКонтрагента(Контрагент, Договор);
	ПриВыбореДоговора();
	
КонецПроцедуры // ПриВыбореКонтрагента()

//******************************************************************************
// ИнформацияОДоговоре()
//
// Возвращаемое значение:
//  Строка - описание договора.
//
// Вызывается из формул элементов диалога:
//  Текст "Строка с информацией о договоре".
//
// Описание:
//  Формирует строку,описывающую валюту договора и валюту оплаты.
//
Функция ИнформацияОДоговоре() 
	
	Стр = "";
	Если Договор.Выбран() = 1 Тогда
		Если Договор.ВалютаДоговора.Выбран() = 1 Тогда
		    Стр = "Валюта договора: " + Договор.ВалютаДоговора;
		КонецЕсли;	    
	КонецЕсли;
	Возврат Стр;
	
КонецФункции // ИнформацияОДоговоре()

//******************************************************************************
// РассчитатьНалоги()
//
// Вызывается из формул элементов диалога:
//  Поле ввода Сумма,
//  Поле ввода НДС,
//  Поле ввода НП.
//
// Описание:
//  Пересчитывает значения численных реквизитов табличной части документа 
// в зависимости от найденных ставок налогов и выбранного варианта расчета налогов.
//
Процедура РассчитатьНалоги()
	
	НДС = глПоказательДокумента(Контекст, "НДС");
	НП = глПоказательДокумента(Контекст, "НП");
	Всего = глПоказательДокумента(Контекст, "СуммаСНалогами");
	Форма.НДС.Доступность(глПризнакУчетаНалога(Контекст, "НДС"));
	Форма.НП.Доступность(глПризнакУчетаНалога(Контекст, "НП"));
	
КонецПроцедуры // РассчитатьНалоги()

//*****************************************************************************
// Пересчет()
//
Процедура Пересчет(ИмяРеквизита="")
	
	Если ИмяРеквизита = "" Тогда // вызов из формулы колонки табличной части
	    ИмяРеквизита = Форма.ТекущаяКолонка();
	КонецЕсли;
	
	Если (ИмяРеквизита = "Сумма") Тогда
		РассчитатьНалоги();
		Цена = ?(Количество = 0, Сумма, Сумма/Количество);
		
	ИначеЕсли (ИмяРеквизита = "НДС") или (ИмяРеквизита = "НП") Тогда
		Всего = глПоказательДокумента(Контекст, "СуммаСНалогами");
	КонецЕсли;
	
КонецПроцедуры // Пересчет()

//*****************************************************************************
// ПриВыбореВариантаРасчетаНалогов()
//
// Вызывается из формул элементов диалога:
//  Поле ввода "ВариантРасчетаНалогов".
//
// Описание:
//  Пересчитывает суммы в документе при смене варианта расчета налогов.
//
Процедура ПриВыбореВариантаРасчетаНалогов()
	
	Если ВариантРасчетаНалогов = ТекущийВариантРасчетаНалогов Тогда
		Возврат
	КонецЕсли;
	
	Если КоличествоСтрок() > 0 Тогда
		Ответ = Вопрос("Пересчитать суммы налогов в существующих строках
		            |табличной части (суммы налогов будут
		            |обновлены в соответствии с выбранным вариантом)?", "Да+Нет+Отмена");
		Если Ответ = "Да" Тогда
			ОбщееКоличество = КоличествоСтрок();
			ВыбратьСтроки();
			Пока ПолучитьСтроку() = 1 Цикл
				РассчитатьНалоги();
				Состояние("Обработано: " + Окр(НомерСтроки/ОбщееКоличество*100, 0, 1) + "%");
			КонецЦикла;
			
		ИначеЕсли Ответ = "Отмена" Тогда
			ВариантРасчетаНалогов = ТекущийВариантРасчетаНалогов;
		КонецЕсли;
	КонецЕсли;
	УчитыватьНП = глПризнакУчетаНалога(Контекст, "НП");
	УчитыватьНДС = глПризнакУчетаНалога(Контекст, "НДС");
	ВыбратьСтроки();
	Пока ПолучитьСтроку() = 1 Цикл
		НДС = ?(УчитыватьНДС = 0, 0, НДС);
		НП = ?(УчитыватьНП = 0, 0, НП);
	КонецЦикла;
	Форма.НДС.Доступность(УчитыватьНДС);
	Форма.НП.Доступность(УчитыватьНП);
	
КонецПроцедуры // ПриВыбореВариантаРасчетаНалогов()

//******************************************************************************
// ПриПредъявленииСчетаФактуры()
//
// Вызывается из формул элементов диалога:
//  Переключатель СчетФактураПредъявлен.
//
// Описание:
//  Устанавливает доступность реквизита ДатаНомерСчетаФактуры.
//
Процедура ПриПредъявленииСчетаФактуры()
	
	Если СчетФактураПредъявлен = 1 Тогда
		Форма.ДатаНомерСчетаФактуры.Доступность(1);
	Иначе
		Форма.ДатаНомерСчетаФактуры.Доступность(0);
		ДатаНомерСчетаФактуры = "";
	КонецЕсли;
	            
	Если (Договор.Выбран() = 1) и (Договор.АвтоОбработкаНДС = 0) и (СчетФактураПредъявлен = 1) и (ДатаДок>='01.01.2006') Тогда
		ВключатьВКнигуПокупок = 1;
		Форма.ВключатьВКнигуПокупок.Видимость(1);
	Иначе
		ВключатьВКнигуПокупок = 0;
		Форма.ВключатьВКнигуПокупок.Видимость(0);
	КонецЕсли;

	
КонецПроцедуры // ПриПредъявленииСчетаФактуры()

//******************************************************************************
// ПриВыбореКоррСчета()
//
// Вызывается из формул элементов диалога:
//  Поле ввода КоррСчет.
//
// Описание:
//  Устанавливает типы реквизитов Субконто1, Субконто2 и Субконто3 
// в зависимости от выбранного значения счета затрат.
//
Процедура ПриВыбореКоррСчета()
	
	НазначитьТип("Субконто1", КоррСчет.ВидСубконто(1));
	НазначитьТип("Субконто2", КоррСчет.ВидСубконто(2));
	НазначитьТип("Субконто3", КоррСчет.ВидСубконто(3));
	
	Если (Константа.ИспользоватьСписокКорректныхПроводок = Да) Тогда
		Если Договор.Выбран() = 1 Тогда
			ОплатаДоговора = Договор.ОплатаДоговора; //1 - врублях, 2 - в валюте
		КонецЕсли;
		Если ОплатаДоговора = 2 Тогда
			Если ТипИсполнителя = 1 Тогда
				СчетРасчетов = СчетПоКоду("60.11");
			Иначе
				СчетРасчетов = СчетПоКоду("76.55");
			КонецЕсли;
		Иначе
			Если ТипИсполнителя = 1 Тогда
				СчетРасчетов = СчетПоКоду("60.1");
			Иначе
				СчетРасчетов = СчетПоКоду("76.5");
			КонецЕсли;
		КонецЕсли;
		глПроверкаКорректныхПроводок(КоррСчет,СчетРасчетов);
	КонецЕсли;
	
КонецПроцедуры // ПриВыбореКоррСчета()

//******************************************************************************
// ПриВыбореВариантаЗачетаАванса()
//
// Вызывается из формул элементов диалога:
//  Поле со списком ВариантЗачетаАванса.
//
// Описание:
//  Устанавливает значение реквизита ЗачитыватьАванс в соответствии с выбранным 
// значением списка.
//
Процедура ПриВыбореВариантаЗачетаАванса()
	
	ЗачитыватьАванс = 
		ВариантЗачетаАванса.ПолучитьЗначение(ВариантЗачетаАванса.ТекущаяСтрока());
	
КонецПроцедуры // ПриВыбореВариантаЗачетаАванса()

//******************************************************************************
// ИтоговаяСтрока()
//
// Возвращаемое значение:
//  Строка - итоговые значения числовых реквизитов табличной части.
//
// Вызывается из формул элементов диалога:
//  Текст, содержащий итоговые значения.
//
// Описание:
//  Формирует информационную строку для вывода в диалог.
//
Функция ИтоговаяСтрока()
	
    ИтСтр = "Итого: "+ СокрЛ(Формат(Итог("Всего"),"Ч20.2-,"))+
			", в т.ч. НДС: "+СокрЛ(Формат(Итог("НДС"),"Ч20.2-,"));
	Возврат ИтСтр;
	
КонецФункции // ИтоговаяСтрока()

//******************************************************************************
// ПриВыбореДокументаПоступления()
//
// Вызывается из формул элементов диалога:
//  Поле ввода ДокументПоступления.
//
// Описание:
//  Определяет видимость счета затрат и объектов аналитического учета.
//
Процедура ПриВыбореДокументаПоступления()

	Если ДокументПоступления.Выбран() = 0 Тогда
		ФлагВидимости = 1;
	Иначе
		ФлагВидимости = 0;
	КонецЕсли;
	
	Форма.КоррСчет.Видимость(ФлагВидимости);
	Форма.ВидСубконто1.Видимость(ФлагВидимости);
	Форма.ВидСубконто2.Видимость(ФлагВидимости);
	Форма.ВидСубконто3.Видимость(ФлагВидимости);
	Форма.Субконто1.Видимость(ФлагВидимости);
	Форма.Субконто2.Видимость(ФлагВидимости);
	Форма.Субконто3.Видимость(ФлагВидимости);
	Форма.ВариантПринятияРасходовНУ.Видимость(0);
	
	Если ДокументПоступления.Выбран() = 1 Тогда 
		Если ДокументПоступления.Вид() = "ПоступлениеТоваров" Тогда
			Форма.ВариантПринятияРасходовНУ.Видимость(1); 
			
		Иначе
			ВариантПринятияРасходовНУ = Перечисление.ВариантыПринятияРасходовНУ.Прямые;
		КонецЕсли; 
	Иначе
		ВариантПринятияРасходовНУ = "";
	КонецЕсли;
	
КонецПроцедуры // ПриВыбореДокументаПоступления()


////////////////////////////////////////////////////////////////////////////////
// ПРЕДОПРЕДЕЛЕННЫЕ ПРОЦЕДУРЫ
// 

//******************************************************************************
// Предопределенная процедура
//
Процедура ВводНового(Копирование)
	глЗаполнитьШапку(Контекст, Копирование);
	Новый = 1;
	ВерсияОбъекта = Константа.НомерРелиза;
	Если Копирование = 1 Тогда
	    Возврат;
	КонецЕсли;
    Если ПустоеЗначение(Форма.Параметр) = 0 Тогда
	    Контрагент = Форма.Параметр.Получить("Контрагент");
	КонецЕсли;
	ЗачитыватьАванс = 0;
//	СчетФактураПредъявлен = 1;
	ВариантРасчетаНалогов = Константа.ОсновнойВариантРасчетаНалогов;
	Если Константа.ОрганизацияЯвляетсяПлательщикомНДС = Нет Тогда
		НДСвключатьВСтоимость = 1;
	КонецЕсли;
	ТипИсполнителя = 1;
	
КонецПроцедуры // ВводНового()   
//******************************************************************************
// Предопределенная процедура
//
Процедура ПриНачалеРедактированияСтроки()  

	Если ДокументПоступления.Выбран() = 1 Тогда 
		Если ДокументПоступления.Вид() <> "ПоступлениеТоваров" Тогда
			ВариантПринятияРасходовНУ = Перечисление.ВариантыПринятияРасходовНУ.Прямые;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

//******************************************************************************
// Предопределенная процедура
//
Процедура ВводНаОсновании(ДокОсн)
	
	Новый = 1;
	ВерсияОбъекта = Константа.НомерРелиза;
	ДокументПоступления = ДокОсн;
	ЗачитыватьАванс = ДокОсн.ЗачитыватьАванс;
	ВариантРасчетаНалогов = ДокОсн.ВариантРасчетаНалогов;
	ТипИсполнителя = 1;
	НДСвключатьВСтоимость = ДокОсн.НДСвключатьВСтоимость;
	Комментарий = "Введен на основании: "+ГлПредставлениеДокумента(ДокОсн);
	
КонецПроцедуры // ВводНаОсновании()

//******************************************************************************
// Предопределенная процедура
//
Процедура ПриОткрытии()
	
	ПриЗаписиПерепроводить(1);
	глПроверкаРазрешенияРедактирования(Контекст);
	Если Форма.ТолькоПросмотр() = 1 Тогда
		Форма.КнопкаОК.Доступность(0);
		Форма.КнопкаЗаписать.Доступность(0);
		Форма.КнопкаОчиститьДокументПоступления.Доступность(0);
	КонецЕсли;
	Форма.КоррСчет.ВыборГруппы(0);
	ВариантЗачетаАванса.ДобавитьЗначение(1, "не зачитывать");
	ВариантЗачетаАванса.ДобавитьЗначение(2, "только по договору");
	ВариантЗачетаАванса.ДобавитьЗначение(0, "без указания договора");
	ВариантЗачетаАванса.ТекущаяСтрока(ВариантЗачетаАванса.НайтиЗначение(ЗачитыватьАванс)); 
	НачальнаяДатаДокумента = ДатаДок;
	Если (ПустоеЗначение(ДатаНомерСчетаФактуры) = 1) и (Выбран() = 1) Тогда
		СчетФактураПредъявлен = 0;
		Форма.ДатаНомерСчетаФактуры.Доступность(0);
	Иначе
	//	СчетФактураПредъявлен = 1;
		Форма.ДатаНомерСчетаФактуры.Доступность(1);
	КонецЕсли;
	ПриВыбореДокументаПоступления();
	УправлениеКурсом();
	Форма.НДС.Доступность(глПризнакУчетаНалога(Контекст, "НДС"));
	Форма.НП.Доступность(глПризнакУчетаНалога(Контекст, "НП"));
	
	СписокТиповИсполнителей.ДобавитьЗначение(1, "Поставщик (счет 60)");
	СписокТиповИсполнителей.ДобавитьЗначение(2, "Прочий кредитор (счет 76)");
	СписокТиповИсполнителей.ТекущаяСтрока(ТипИсполнителя);
	
	Если ВерсияОбъекта < "7.70.421" Тогда
		Форма.ИспользоватьСлой("Редакция_4_0", 1);
	Иначе
		Форма.ИспользоватьСлой("Редакция_4_0", 0);
	КонецЕсли;
	
	ТекДоговор = Договор;
	
КонецПроцедуры // ПриОткрытии()

//******************************************************************************
// Предопределенная процедура
//
Процедура ПриНачалеВыбораЗначения(ЭлементДиалога, Флаг)
	
	Если (ЭлементДиалога = "КоррСчет") и
		 (Константа.ИспользоватьСписокКорректныхПроводок = Да) Тогда
		СписокКорректныхПроводок = СоздатьОбъект("СписокЗначений");
		Если Договор.Выбран() = 1 Тогда
			ОплатаДоговора = Договор.ОплатаДоговора; //1 - врублях, 2 - в валюте
		КонецЕсли;
		Если ОплатаДоговора = 2 Тогда
		    Если ТипИсполнителя = 1 Тогда
			    СчетРасчетов = СчетПоКоду("60.11");
			Иначе
				СчетРасчетов = СчетПоКоду("76.55");
			КонецЕсли;
		Иначе
			Если ТипИсполнителя = 1 Тогда
			    СчетРасчетов = СчетПоКоду("60.1");
			Иначе
				СчетРасчетов = СчетПоКоду("76.5");
			КонецЕсли;
		КонецЕсли;
	    СписокКорректныхПроводок.Установить("Счет", СчетРасчетов);
	    СписокКорректныхПроводок.Установить("Корреспонденция", 0);
		глЗначениеОтбора = СписокКорректныхПроводок;
		
	ИначеЕсли ЭлементДиалога = "ДокументПоступления" Тогда
		Флаг = 0;
		Меню = СоздатьОбъект("СписокЗначений");
		Для А = 1 По Метаданные.Документ() Цикл
			Для Б = 1 По Метаданные.Документ(А).ВводимыеНаОснованииДокументы.Количество() Цикл
				Если Метаданные.Документ(А).ВводимыеНаОснованииДокументы.Получить(Б).Идентификатор = "УслугиСтороннихОрганизаций" Тогда
					Меню.ДобавитьЗначение(Метаданные.Документ(А).Идентификатор, Строка(Метаданные.Документ(А)));
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
		ВидДок = ДокументПоступления.Вид();
		Если Меню.ВыбратьЗначение(ВидДок,,,,2) = 1 Тогда
			Конт = ПолучитьПустоеЗначение("");
			ОткрытьФорму("Журнал.Общий", Конт);
			Конт.УстановитьОтбор(ВидДок);
			Конт.АктивизироватьОбъект(ДокументПоступления);
		КонецЕсли;
	
	ИначеЕсли ЭлементДиалога = "ВариантРасчетаНалогов" Тогда
		ТекущийВариантРасчетаНалогов = ВариантРасчетаНалогов;
		
	КонецЕсли;
	
КонецПроцедуры // ПриНачалеВыбораЗначения()

//******************************************************************************
// Предопределенная процедура
//
Процедура ПриЗаписи()
	
	Если глМожноЗаписатьДокумент(Контекст) = 0 Тогда
		СтатусВозврата(0);
		Возврат;
	ИначеЕсли глКонтрольДатыДокумента(Контекст, НачальнаяДатаДокумента) = 1 Тогда
		СтатусВозврата(0);
		Возврат;
	ИначеЕсли (СокрЛП(ДатаНомерСчетаФактуры) = "") и (СчетФактураПредъявлен = 1) Тогда
		Предупреждение("Введите данные о документе поставщика
					   |или поставьте переключатель в положение
					   |""Счет-фактура поставщиком не предъявлен""");
		СтатусВозврата(0);
		Возврат;
	КонецЕсли;
    
	ЦеныВДоговоре = 1; //в рублях
	Если Договор.Выбран() = 1 Тогда
	    Если ПустоеЗначение(Договор.ВалютаДоговора) = 0 Тогда
			ЦеныВДоговоре = 2; //в валюте
		КонецЕсли;
	КонецЕсли;
	
	Если ЦеныВДоговоре = 2 Тогда
		Валюта = Договор.ВалютаДоговора;
		Кратность = Валюта.Кратность.Получить(ДатаДок);
		Если Договор.ВестиУчетРасчетовУЕ = 1 Тогда
			Кратность = Кратность * 100 / (100 + Договор.ПроцентКорректировкиКурсаУЕ);
		КонецЕсли;
		Кратность = ?(Кратность=0, 1, Кратность);
		Операция.СуммаОперации = Окр(Итог("Всего")*Курс/Кратность, 2, 1);
	Иначе
		Операция.СуммаОперации = Итог("Всего");
	КонецЕсли;
	
	Операция.Содержание = "Оказание услуг сторонней организацией";
	ТипИсполнителя = СписокТиповИсполнителей.ТекущаяСтрока();
		
КонецПроцедуры // ПриЗаписи()

//******************************************************************************
// Предопределенная процедура
//
Процедура ПриЗакрытии()
	
	Если ПустоеЗначение(Форма.Параметр) = 0 Тогда
		КонтекстЖурнала = Форма.Параметр.Получить("КонтекстЖурнала");
		Если ПустоеЗначение(КонтекстЖурнала) = 0 Тогда
			КонтекстЖурнала.Активизировать(КонтекстЖурнала.Форма.ТекущаяКолонка(), 0);
			
		Иначе
			глОткрытьЖурнал(Контекст, Новый);
		КонецЕсли;
		
	Иначе
		глОткрытьЖурнал(Контекст, Новый);
	КонецЕсли;	
	
КонецПроцедуры // ПриЗакрытии()

//******************************************************************************
Новый = 0;

СписокДействий = СоздатьОбъект("СписокЗначений");
СписокДействий.ДобавитьЗначение("Отчет о движениях документа");
СписокДействий.ДобавитьЗначение("Структура подчиненности");
СписокДействий.ДобавитьЗначение("Ввести на основании");
СписокДействий.ДобавитьЗначение("Перейти  в журнал");