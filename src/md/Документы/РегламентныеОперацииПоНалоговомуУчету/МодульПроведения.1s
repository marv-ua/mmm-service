////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ
// 

Перем ДатаНач;
Перем ДатаКон;
Перем ТаблицаПроводок;
Перем ТаблицаРаспределенияСчетаН01_06;
Перем ТаблицаПрямыхРасходов;
Перем СубконтоВидыПродукцииИУслуг;

// Переменные для формирования печатных форм
Перем ТаблицаРасшифровкаРегламентнойОперации, ТаблицаРасшифровкаРегламентнойОперацииДополнительно;
Перем ТаблицаРасшифровкаКорректировкиМатериалов, ТаблицаРасшифровкаКорректировкиТоваров, ТаблицаРасшифровкаКорректировкиРозничныхТоваров, ТаблицаРасшифровкаКорректировкиОтгруженныхТоваров;
Перем ТаблицаРасшифровкаНЗП;
Перем ОсновнаяРасшифровкаОСВ, ОсновнаяРасшифровкаОПП;
Перем Таб;

//******************************************************************************
Процедура ЗакрытиеСчета(Счет, БухИт, знач НомерВыбираемогоСубконто = 0) Далее
////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ МОДУЛЯ
//
//******************************************************************************
// ФормированиеОсновныхРасшифровок()
//
Процедура ФормированиеОсновныхРасшифровок()
	
	ОсновнаяРасшифровкаОСВ = СоздатьОбъект("СписокЗначений");
	ОсновнаяРасшифровкаОСВ.Установить("Отчет", "ОборотноСальдоваяВедомостьПоСчету");
	ОсновнаяРасшифровкаОСВ.Установить("Обновить", 0);
	ОсновнаяРасшифровкаОСВ.Установить("ДанныеПоСубсчетам", 0);
	ОсновнаяРасшифровкаОСВ.Установить("Дата1", ДатаНач);
	ОсновнаяРасшифровкаОСВ.Установить("Дата2", ДатаКон);
	ОсновнаяРасшифровкаОСВ.Установить("ОтборСубконто1", 3);
	ОсновнаяРасшифровкаОСВ.Установить("ОтборСубконто2", 3);
	ОсновнаяРасшифровкаОСВ.Установить("ОтборСубконто3", 3);
	
	ОсновнаяРасшифровкаОПП = СоздатьОбъект("СписокЗначений");
	ОсновнаяРасшифровкаОПП.Установить("Отчет", "ОтчетПоПроводкам");
	ОсновнаяРасшифровкаОПП.Установить("Дата1", ДатаНач);
	ОсновнаяРасшифровкаОПП.Установить("Дата2", ДатаКон);
	
КонецПроцедуры // ФормированиеОсновныхРасшифровок()

//******************************************************************************
// ИнициализироватьРасшифровкуПоЗакрытиюСчетаН04()
//
Процедура ИнициализироватьРасшифровкуПоЗакрытиюСчетаН04()
	
	ТаблицаРасшифровкаРегламентнойОперации = СоздатьОбъект("ТаблицаЗначений");
	ТаблицаРасшифровкаРегламентнойОперации.НоваяКолонка("СтатьяРБП",  "Справочник.РасходыБудущихПериодов");
	ТаблицаРасшифровкаРегламентнойОперации.НоваяКолонка("ВидРасхода", "Перечисление.ВидыРасходов");
	ТаблицаРасшифровкаРегламентнойОперации.НоваяКолонка("ЭлементРасхода");
	ТаблицаРасшифровкаРегламентнойОперации.НоваяКолонка("Объект");
	ТаблицаРасшифровкаРегламентнойОперации.НоваяКолонка("Субконто2");
	ТаблицаРасшифровкаРегламентнойОперации.НоваяКолонка("ДатаНачала",    "Дата");
	ТаблицаРасшифровкаРегламентнойОперации.НоваяКолонка("ДатаОкончания", "Дата");
	ТаблицаРасшифровкаРегламентнойОперации.НоваяКолонка("ОбщаяСуммаРасходов", "Число");
	ТаблицаРасшифровкаРегламентнойОперации.НоваяКолонка("ОстатокНаКонец",     "Число");
	ТаблицаРасшифровкаРегламентнойОперации.НоваяКолонка("СуммаСписания",      "Число");
	
	// колонки для расшифровки
	ТаблицаРасшифровкаРегламентнойОперации.НоваяКолонка("РасшифровкаОСВПоСчету",  "СписокЗначений");
	
КонецПроцедуры // ИнициализироватьРасшифровкуПоЗакрытиюСчетаН04()

//******************************************************************************
// ИнициализироватьРасшифровкуПоЗакрытиюСчетаН04_07()
//
Процедура ИнициализироватьРасшифровкуПоЗакрытиюСчетаН04_07()
	
	ТаблицаРасшифровкаРегламентнойОперации = СоздатьОбъект("ТаблицаЗначений");
	ТаблицаРасшифровкаРегламентнойОперации.НоваяКолонка("СтатьяРБП", "Справочник.РасходыБудущихПериодов");
	ТаблицаРасшифровкаРегламентнойОперации.НоваяКолонка("Субконто2", "Справочник.Сотрудники");
	ТаблицаРасшифровкаРегламентнойОперации.НоваяКолонка("ДатаНачала",    "Дата");
	ТаблицаРасшифровкаРегламентнойОперации.НоваяКолонка("ДатаОкончания", "Дата");
	ТаблицаРасшифровкаРегламентнойОперации.НоваяКолонка("ОбщаяСуммаРасходов", "Число");
	ТаблицаРасшифровкаРегламентнойОперации.НоваяКолонка("ОстатокНаКонец",     "Число");
	ТаблицаРасшифровкаРегламентнойОперации.НоваяКолонка("СуммаСписания",      "Число");
	ТаблицаРасшифровкаРегламентнойОперации.НоваяКолонка("ПринятоКНУ",         "Число");
	ТаблицаРасшифровкаРегламентнойОперации.НоваяКолонка("НеПринятоКНУ",       "Число");
	ТаблицаРасшифровкаРегламентнойОперации.НоваяКолонка("ПринятоКНУВсего",    "Число");
	
	// колонки для расшифровки
	ТаблицаРасшифровкаРегламентнойОперации.НоваяКолонка("РасшифровкаОСВПоСчетуН04_07",  "СписокЗначений");
	ТаблицаРасшифровкаРегламентнойОперации.НоваяКолонка("РасшифровкаОСВПоСчетуН03_07",  "СписокЗначений");
	
КонецПроцедуры // ИнициализироватьРасшифровкуПоЗакрытиюСчетаН04_07()

//******************************************************************************
// ИнициализироватьРасшифровкуПоЗакрытиюСчетаН04_07()
//
Процедура ИнициализироватьРасшифровкуУчетаДДС()
	
	ТаблицаРасшифровкаРегламентнойОперации = СоздатьОбъект("ТаблицаЗначений");
	ТаблицаРасшифровкаРегламентнойОперации.НоваяКолонка("СуммаРасходовНаОплатуТруда", "Число");
	ТаблицаРасшифровкаРегламентнойОперации.НоваяКолонка("ФактическаяСуммаПлатежа",    "Число");
	ТаблицаРасшифровкаРегламентнойОперации.НоваяКолонка("Норматив",                    "Строка");
	ТаблицаРасшифровкаРегламентнойОперации.НоваяКолонка("РасходыВПределахНорм",       "Число");
	ТаблицаРасшифровкаРегламентнойОперации.НоваяКолонка("СуммаРасходовНаСтрахование", "Число");
	
	// колонки для расшифровки
	ТаблицаРасшифровкаРегламентнойОперации.НоваяКолонка("РасшифровкаПоСотрудникам",  "СписокЗначений");
	
КонецПроцедуры // ИнициализироватьРасшифровкуУчетаДДС()

//******************************************************************************
// РасшифровкаДДСпоСотрудникам()
//
Функция РасшифровкаДДСпоСотрудникам(НаимененованиеОперции)
	
	ТаблицаПоСотрудникам = СоздатьОбъект("ТаблицаЗначений");
	ТаблицаПоСотрудникам.НоваяКолонка("Сотрудник", "Справочник.Сотрудники");
	ТаблицаПоСотрудникам.НоваяКолонка("СуммаПлатежа",               "Число");
	ТаблицаПоСотрудникам.НоваяКолонка("СуммаРасходовНаОплатуТруда", "Число");
	ТаблицаПоСотрудникам.НоваяКолонка("СуммаРасходовНаСтрахование", "Число");
	ТаблицаПоСотрудникам.НоваяКолонка("РасходыУчтенныеРанее",       "Число");
	ТаблицаПоСотрудникам.НоваяКолонка("СуммаКорректировки",         "Число");
	
	// колонки для расшифровки
	ТаблицаПоСотрудникам.НоваяКолонка("РасшифровкаОСВПоСчету", "СписокЗначений");
	
	Расшифровка = СоздатьОбъект("СписокЗначений");
	Расшифровка.ДобавитьЗначение("РасшифровкаДДСпоСОтрудникам", "Наименование таблицы");
	Расшифровка.ДобавитьЗначение(ТаблицаПоСотрудникам, "Таблица данных");
	Расшифровка.ДобавитьЗначение(ДатаДок, "Дата операции");
	Расшифровка.ДобавитьЗначение(НаимененованиеОперции + " (расшифровка по сотрудникам)", "Дополнительные данные");
	
	Возврат Расшифровка;
	
КонецФункции // РасшифровкаПрямыхРасходовПоСтатьям()

//******************************************************************************
// ИнициализироватьРасшифровкиПоКорректировкеМПЗ()
//
Процедура ИнициализироватьРасшифровкиПоКорректировкеМПЗ()
	
	ТаблицаРасшифровкаРегламентнойОперации = СоздатьОбъект("ТаблицаЗначений");
	ТаблицаРасшифровкаРегламентнойОперации.НоваяКолонка("МПЗ",                        "Справочник");
	ТаблицаРасшифровкаРегламентнойОперации.НоваяКолонка("СуммаНаНачало",              "Число");
	ТаблицаРасшифровкаРегламентнойОперации.НоваяКолонка("КоличествоНаНачало",         "Число");
	ТаблицаРасшифровкаРегламентнойОперации.НоваяКолонка("ПриходСумма",                "Число");
	ТаблицаРасшифровкаРегламентнойОперации.НоваяКолонка("ПриходКоличество",           "Число");
	ТаблицаРасшифровкаРегламентнойОперации.НоваяКолонка("ВозвратСумма",               "Число");
	ТаблицаРасшифровкаРегламентнойОперации.НоваяКолонка("ВозвратКоличество",          "Число");
	ТаблицаРасшифровкаРегламентнойОперации.НоваяКолонка("СредневзвешеннаяСтоимость",  "Число");
	ТаблицаРасшифровкаРегламентнойОперации.НоваяКолонка("ФактическиСписаноСумма",     "Число");
	ТаблицаРасшифровкаРегламентнойОперации.НоваяКолонка("ФактическиСписаноКоличество","Число");
	ТаблицаРасшифровкаРегламентнойОперации.НоваяКолонка("РасчетнаяСуммаСписания",     "Число");
	ТаблицаРасшифровкаРегламентнойОперации.НоваяКолонка("СуммаКорректировки",         "Число");
	
	// колонки для расшифровки
	ТаблицаРасшифровкаРегламентнойОперации.НоваяКолонка("РасшифровкаОСВПоСчету1", "СписокЗначений");
	ТаблицаРасшифровкаРегламентнойОперации.НоваяКолонка("РасшифровкаОСВПоСчету2", "СписокЗначений");
	ТаблицаРасшифровкаРегламентнойОперации.НоваяКолонка("РасшифровкаСуммаКорректировки", "СписокЗначений");
	
	ТаблицаРасшифровкаКорректировкиМатериалов = СоздатьОбъект("ТаблицаЗначений");
	ТаблицаРасшифровкаКорректировкиМатериалов.Загрузить(ТаблицаРасшифровкаРегламентнойОперации);
	
	ТаблицаРасшифровкаКорректировкиТоваров = СоздатьОбъект("ТаблицаЗначений");
	ТаблицаРасшифровкаКорректировкиТоваров.Загрузить(ТаблицаРасшифровкаРегламентнойОперации);
	
	ТаблицаРасшифровкаКорректировкиРозничныхТоваров = СоздатьОбъект("ТаблицаЗначений");
	ТаблицаРасшифровкаКорректировкиРозничныхТоваров.Загрузить(ТаблицаРасшифровкаРегламентнойОперации);
	
	ТаблицаРасшифровкаКорректировкиОтгруженныхТоваров = СоздатьОбъект("ТаблицаЗначений");
	ТаблицаРасшифровкаКорректировкиОтгруженныхТоваров.Загрузить(ТаблицаРасшифровкаРегламентнойОперации);
	ТаблицаРасшифровкаКорректировкиОтгруженныхТоваров.НоваяКолонка("РасчетнаяСуммаВозврата",     "Число");
	ТаблицаРасшифровкаКорректировкиОтгруженныхТоваров.НоваяКолонка("СуммаКорректировкиВозврата", "Число");
	
КонецПроцедуры // ИнициализироватьРасшифровкиПоКорректировкеМПЗ()

//******************************************************************************
// РасшифровкаКорректировкиСписанияПоМПЗ(МПЗ)
//
Функция РасшифровкаКорректировкиСписанияПоМПЗ(МПЗ)
	
	ТаблицаКорректировки = СоздатьОбъект("ТаблицаЗначений"	);
	
	ТаблицаКорректировки.НоваяКолонка("Счет", "Счет");
	ТаблицаКорректировки.НоваяКолонка("Субконто1");
	ТаблицаКорректировки.НоваяКолонка("Субконто2");
	ТаблицаКорректировки.НоваяКолонка("Субконто3");
	ТаблицаКорректировки.НоваяКолонка("ФактическиСписаноСумма",  "Число");
	ТаблицаКорректировки.НоваяКолонка("ФактическиСписаноКоличество",  "Число");
	ТаблицаКорректировки.НоваяКолонка("СредневзвешеннаяСтоимость",  "Число");
	ТаблицаКорректировки.НоваяКолонка("СуммаСписания",  "Число");
	ТаблицаКорректировки.НоваяКолонка("СуммаКорректировки",  "Число");
	
	// расшифровка
	ТаблицаКорректировки.НоваяКолонка("РасшифровкаОтчетПоПроводкам", "СписокЗначений");
	
	Расшифровка = СоздатьОбъект("СписокЗначений");
	Расшифровка.ДобавитьЗначение("ТаблицаРасшифровкаКорректировкиПоМатериалу", "Наименование таблицы");
	Расшифровка.ДобавитьЗначение(ТаблицаКорректировки, "Таблица данных");
	Расшифровка.ДобавитьЗначение(ДатаДок, "Дата операции");
	Расшифровка.ДобавитьЗначение(МПЗ, "Дополнительные данные");
	
	Возврат Расшифровка;
	
КонецФункции // РасшифровкаКорректировкиСписанияПоМПЗ()

//******************************************************************************
// ИнициализироватьРасшифровкуРаспределенияПрямыхРасходов()
//
Процедура ИнициализироватьРасшифровкуРаспределенияПрямыхРасходов()
	
	ТаблицаРасшифровкаРегламентнойОперации = СоздатьОбъект("ТаблицаЗначений");
	ТаблицаРасшифровкаРегламентнойОперации.НоваяКолонка("НаименованиеБазыРаспределения", "Строка");	
	ТаблицаРасшифровкаРегламентнойОперации.НоваяКолонка("ОплатаТруда",              "Число");  
	ТаблицаРасшифровкаРегламентнойОперации.НоваяКолонка("ОплатаТруда_ЕНВД",         "Число");
	ТаблицаРасшифровкаРегламентнойОперации.НоваяКолонка("ЕСН",                      "Число");
	ТаблицаРасшифровкаРегламентнойОперации.НоваяКолонка("ЕСН_ЕНВД",                 "Число");
	ТаблицаРасшифровкаРегламентнойОперации.НоваяКолонка("Амортизация",              "Число");
	ТаблицаРасшифровкаРегламентнойОперации.НоваяКолонка("Амортизация_ЕНВД",         "Число");
	ТаблицаРасшифровкаРегламентнойОперации.НоваяКолонка("МатериальныеРасходы",      "Число");
	ТаблицаРасшифровкаРегламентнойОперации.НоваяКолонка("МатериальныеРасходы_ЕНВД", "Число");
	ТаблицаРасшифровкаРегламентнойОперации.НоваяКолонка("ДругиеРасходы",      "Число");
	ТаблицаРасшифровкаРегламентнойОперации.НоваяКолонка("ДругиеРасходы_ЕНВД", "Число");
	
	// колонки для расшифровки
	ТаблицаРасшифровкаРегламентнойОперации.НоваяКолонка("РаспределениеПрямыхРасходов", "СписокЗначений");
	
КонецПроцедуры // ИнициализироватьРасшифровкуРаспределенияПрямыхРасходов()

//******************************************************************************
// ИнициализироватьРасшифровкуРасчетаНЗП()
//
Процедура ИнициализироватьРасшифровкуРасчетаНЗП(ТаблКоэффНЗП)
	
	ТаблицаРасшифровкаРегламентнойОперацииДополнительно = СоздатьОбъект("ТаблицаЗначений");
	ТаблицаРасшифровкаРегламентнойОперацииДополнительно.НоваяКолонка("СпособРасчетаНЗП", "Строка");	
	ТаблицаРасшифровкаРегламентнойОперацииДополнительно.НоваяКолонка("Расшифровка",      "СписокЗначений");
	// Строка с расшифровкой первого способа расчета НЗП
	РасшифровкаСтрокиТаблицы = СоздатьОбъект("ТаблицаЗначений");
	РасшифровкаСтрокиТаблицы.НоваяКолонка("ВидНоменклатуры", "Справочник.ВидыНоменклатуры");
	РасшифровкаСтрокиТаблицы.НоваяКолонка("НачСальдоНЗП",    "Число");
	РасшифровкаСтрокиТаблицы.НоваяКолонка("РасшифровкаПоВидамРасходов", "ТаблицаЗначений");
	РасшифровкаСтрокиТаблицы.НоваяКолонка("ВсегоРасходов",   "Число");
	РасшифровкаСтрокиТаблицы.НоваяКолонка("ОсновнойМатериал",                "Справочник.Материалы");
	РасшифровкаСтрокиТаблицы.НоваяКолонка("ИсходноеКоличесто",               "Число");
	РасшифровкаСтрокиТаблицы.НоваяКолонка("ОстатокНаКонецМесяца",            "Число");
	РасшифровкаСтрокиТаблицы.НоваяКолонка("Коэффициент",                     "Число");
	РасшифровкаСтрокиТаблицы.НоваяКолонка("СтоимостьВыпущеннойНоменклатуры", "Число");
	РасшифровкаСтрокиТаблицы.НоваяКолонка("КонСальдоНЗП",                    "Число");
	РасшифровкаСтрокиТаблицы.НоваяКолонка("РасшифровкаОСВПоСчету",           "СписокЗначений");   
	
	
	Расшифровка = СоздатьОбъект("СписокЗначений");
	Расшифровка.ДобавитьЗначение("РасчетНЗП_1", "Наименование таблицы");
	Расшифровка.ДобавитьЗначение(РасшифровкаСтрокиТаблицы, "Таблица данных");
	Расшифровка.ДобавитьЗначение(ДатаДок, "Дата операции");
	
	ТаблицаРасшифровкаРегламентнойОперацииДополнительно.НоваяСтрока();
	ТаблицаРасшифровкаРегламентнойОперацииДополнительно.СпособРасчетаНЗП = "Производство, связанное с обработкой и переработкой сырья";
	ТаблицаРасшифровкаРегламентнойОперацииДополнительно.Расшифровка = Расшифровка;
	
	// Строка с расшифровкой второго способа расчета НЗП
	РасшифровкаСтрокиТаблицы = СоздатьОбъект("ТаблицаЗначений");
	РасшифровкаСтрокиТаблицы.НоваяКолонка("ВидНоменклатуры", "Справочник.ВидыНоменклатуры");
	РасшифровкаСтрокиТаблицы.НоваяКолонка("НачСальдоНЗП",    "Число");
	РасшифровкаСтрокиТаблицы.НоваяКолонка("РасшифровкаПоВидамРасходов", "ТаблицаЗначений");
	РасшифровкаСтрокиТаблицы.НоваяКолонка("ВсегоРасходов",   "Число");
	РасшифровкаСтрокиТаблицы.НоваяКолонка("ВыполненоЗаказов",                "Число");
	РасшифровкаСтрокиТаблицы.НоваяКолонка("ОбъемНезавершенныхЗаказов",       "Число");
	РасшифровкаСтрокиТаблицы.НоваяКолонка("Коэффициент",                     "Число");
	РасшифровкаСтрокиТаблицы.НоваяКолонка("СтоимостьВыпущеннойНоменклатуры", "Число");
	РасшифровкаСтрокиТаблицы.НоваяКолонка("КонСальдоНЗП",                    "Число");
	РасшифровкаСтрокиТаблицы.НоваяКолонка("РасшифровкаОСВПоСчету",           "СписокЗначений");  
	
	Расшифровка = СоздатьОбъект("СписокЗначений");
	Расшифровка.ДобавитьЗначение("РасчетНЗП_2", "Наименование таблицы");
	Расшифровка.ДобавитьЗначение(РасшифровкаСтрокиТаблицы, "Таблица данных");
	Расшифровка.ДобавитьЗначение(ДатаДок, "Дата операции");
	
	ТаблицаРасшифровкаРегламентнойОперацииДополнительно.НоваяСтрока();
	ТаблицаРасшифровкаРегламентнойОперацииДополнительно.СпособРасчетаНЗП = "Производство, связанное с выполнением работ и оказанием услуг";
	ТаблицаРасшифровкаРегламентнойОперацииДополнительно.Расшифровка = Расшифровка;
	
	// Строка с расшифровкой третьего способа расчета НЗП
	РасшифровкаСтрокиТаблицы = СоздатьОбъект("ТаблицаЗначений");
	РасшифровкаСтрокиТаблицы.НоваяКолонка("ВидНоменклатуры", "Справочник.ВидыНоменклатуры");
	РасшифровкаСтрокиТаблицы.НоваяКолонка("НачСальдоНЗП",    "Число");
	РасшифровкаСтрокиТаблицы.НоваяКолонка("РасшифровкаПоВидамРасходов", "ТаблицаЗначений");
	РасшифровкаСтрокиТаблицы.НоваяКолонка("ВсегоРасходов",   "Число");
	РасшифровкаСтрокиТаблицы.НоваяКолонка("ПлановаяСтоимость",               "Число");
	РасшифровкаСтрокиТаблицы.НоваяКолонка("ПлановаяСтоимостьНЗП",            "Число");
	РасшифровкаСтрокиТаблицы.НоваяКолонка("Коэффициент",                     "Число");
	РасшифровкаСтрокиТаблицы.НоваяКолонка("СтоимостьВыпущеннойНоменклатуры", "Число");
	РасшифровкаСтрокиТаблицы.НоваяКолонка("КонСальдоНЗП",                    "Число");
	РасшифровкаСтрокиТаблицы.НоваяКолонка("РасшифровкаОСВПоСчету",           "СписокЗначений");  
	
	Расшифровка = СоздатьОбъект("СписокЗначений");
	Расшифровка.ДобавитьЗначение("РасчетНЗП_3", "Наименование таблицы");
	Расшифровка.ДобавитьЗначение(РасшифровкаСтрокиТаблицы, "Таблица данных");
	Расшифровка.ДобавитьЗначение(ДатаДок, "Дата операции");
	
	ТаблицаРасшифровкаРегламентнойОперацииДополнительно.НоваяСтрока();
	ТаблицаРасшифровкаРегламентнойОперацииДополнительно.СпособРасчетаНЗП = "Производство прочих налогоплательщиков";
	ТаблицаРасшифровкаРегламентнойОперацииДополнительно.Расшифровка = Расшифровка;
	
	// Строка с расшифровкой четвертого способа расчета НЗП
	РасшифровкаСтрокиТаблицы = СоздатьОбъект("ТаблицаЗначений");
	РасшифровкаСтрокиТаблицы.НоваяКолонка("ВидНоменклатуры", "Справочник.ВидыНоменклатуры");
	РасшифровкаСтрокиТаблицы.НоваяКолонка("НачСальдоНЗП",    "Число");
	РасшифровкаСтрокиТаблицы.НоваяКолонка("РасшифровкаПоВидамРасходов", "ТаблицаЗначений");
	РасшифровкаСтрокиТаблицы.НоваяКолонка("ВсегоРасходов",   "Число");
	РасшифровкаСтрокиТаблицы.НоваяКолонка("РасшифровкаВидовРасходов");
	РасшифровкаСтрокиТаблицы.НоваяКолонка("КонСальдоНЗП",    "Число");
	РасшифровкаСтрокиТаблицы.НоваяКолонка("СтоимостьВыпущеннойНоменклатуры", "Число");
	РасшифровкаСтрокиТаблицы.НоваяКолонка("РасшифровкаОСВПоСчету",           "СписокЗначений"); 
	
	Расшифровка = СоздатьОбъект("СписокЗначений");
	Расшифровка.ДобавитьЗначение("РасчетНЗП_4", "Наименование таблицы");
	Расшифровка.ДобавитьЗначение(РасшифровкаСтрокиТаблицы, "Таблица данных");
	Расшифровка.ДобавитьЗначение(ДатаДок, "Дата операции");
	
	ТаблицаРасшифровкаРегламентнойОперацииДополнительно.НоваяСтрока();
	ТаблицаРасшифровкаРегламентнойОперацииДополнительно.СпособРасчетаНЗП = "Остатки незавершенного производства, указанные произвольно";
	ТаблицаРасшифровкаРегламентнойОперацииДополнительно.Расшифровка = Расшифровка;
	
КонецПроцедуры // ИнициализироватьРасшифровкуРасчетаНЗП()

//******************************************************************************
// ИнициализироватьСокращеннуюРасшифровкуПоНЗП()
//
Процедура ИнициализироватьСокращеннуюРасшифровкуПоНЗП()
	
	ТаблицаРасшифровкаРегламентнойОперации = СоздатьОбъект("ТаблицаЗначений");
	ТаблицаРасшифровкаРегламентнойОперации.НоваяКолонка("ВидНоменклатуры",  "Справочник.ВидыНоменклатуры");
	ТаблицаРасшифровкаРегламентнойОперации.НоваяКолонка("ТипНоменклатуры",  "Перечисление");
	ТаблицаРасшифровкаРегламентнойОперации.НоваяКолонка("КонСальдоНЗП",     "Число");
	ТаблицаРасшифровкаРегламентнойОперации.НоваяКолонка("СтоимостьВыпуска", "Число");
	ТаблицаРасшифровкаРегламентнойОперации.НоваяКолонка("РасшифровкаПоВидамРасходов", "ТаблицаЗначений");
	
	// колонки для расшифровки
	ТаблицаРасшифровкаРегламентнойОперации.НоваяКолонка("РасшифровкаПрямыхРасходов",   "СписокЗначений");
	ТаблицаРасшифровкаРегламентнойОперации.НоваяКолонка("РасшифровкаВыпускаПродукции", "СписокЗначений");
	
КонецПроцедуры // ИнициализироватьСокращеннуюРасшифровкуПоНЗП()

//******************************************************************************
// РасшифровкаРаспределенияПрямыхРасходов()
//
Функция РасшифровкаРаспределенияПрямыхРасходов(ВидНоменклатуры)
	
	ТаблицаВыпуска = СоздатьОбъект("ТаблицаЗначений");
	ТаблицаВыпуска.НоваяКолонка("Продукция", "Справочник.Номенклатура");
	ТаблицаВыпуска.НоваяКолонка("КоличествоВыпуска", "Число");
	ТаблицаВыпуска.НоваяКолонка("ПлановаяСтоимость", "Число");
	ТаблицаВыпуска.НоваяКолонка("Коэффициент", "Число");
	ТаблицаВыпуска.НоваяКолонка("СуммаВыпуска", "Число");
	
	// колонки для расшифровки
	ТаблицаВыпуска.НоваяКолонка("РасшифровкаОСВПоСчету", "СписокЗначений");
	
	Расшифровка = СоздатьОбъект("СписокЗначений");
	Расшифровка.ДобавитьЗначение("ТаблицаРаспределенияПрямыхРасходовНУ", "Наименование таблицы");
	Расшифровка.ДобавитьЗначение(ТаблицаВыпуска, "Таблица данных");
	Расшифровка.ДобавитьЗначение(ДатаДок, "Дата операции");
	Расшифровка.ДобавитьЗначение(ВидНоменклатуры, "Дополнительные данные");
	
	Возврат Расшифровка;
	
КонецФункции // РасшифровкаРаспределенияПрямыхРасходов()

//******************************************************************************
// ИнициализироватьРасшифровкиПоКорректировкеПродукции()
//
Процедура ИнициализироватьРасшифровкиПоКорректировкеПродукции()
	
	ТаблицаРасшифровкаРегламентнойОперации = СоздатьОбъект("ТаблицаЗначений");
	ТаблицаРасшифровкаРегламентнойОперации.НоваяКолонка("МПЗ",                        "Справочник");
	ТаблицаРасшифровкаРегламентнойОперации.НоваяКолонка("СуммаНаНачало",              "Число");
	ТаблицаРасшифровкаРегламентнойОперации.НоваяКолонка("КоличествоНаНачало",         "Число");
	ТаблицаРасшифровкаРегламентнойОперации.НоваяКолонка("ПриходСумма",                "Число");
	ТаблицаРасшифровкаРегламентнойОперации.НоваяКолонка("ПриходКоличество",           "Число");
	ТаблицаРасшифровкаРегламентнойОперации.НоваяКолонка("ВозвратСумма",               "Число");
	ТаблицаРасшифровкаРегламентнойОперации.НоваяКолонка("ВозвратКоличество",          "Число");
	ТаблицаРасшифровкаРегламентнойОперации.НоваяКолонка("СредневзвешеннаяСтоимость",  "Число");
	ТаблицаРасшифровкаРегламентнойОперации.НоваяКолонка("ФактическиСписаноСумма",     "Число");
	ТаблицаРасшифровкаРегламентнойОперации.НоваяКолонка("ФактическиСписаноКоличество","Число");
	ТаблицаРасшифровкаРегламентнойОперации.НоваяКолонка("РасчетнаяСуммаСписания",     "Число");
	ТаблицаРасшифровкаРегламентнойОперации.НоваяКолонка("СуммаКорректировки",         "Число");
	
	// колонки для расшифровки
	ТаблицаРасшифровкаРегламентнойОперации.НоваяКолонка("РасшифровкаОСВПоСчету1", "СписокЗначений");
	ТаблицаРасшифровкаРегламентнойОперации.НоваяКолонка("РасшифровкаОСВПоСчету2", "СписокЗначений");
	ТаблицаРасшифровкаРегламентнойОперации.НоваяКолонка("РасшифровкаСуммаКорректировки", "СписокЗначений");
	
	ТаблицаРасшифровкаКорректировкиТоваров = СоздатьОбъект("ТаблицаЗначений");
	ТаблицаРасшифровкаКорректировкиТоваров.Загрузить(ТаблицаРасшифровкаРегламентнойОперации);
	ТаблицаРасшифровкаКорректировкиТоваров.НоваяКолонка("СчетУчета",                  "Счет");
	
	ТаблицаРасшифровкаКорректировкиОтгруженныхТоваров = СоздатьОбъект("ТаблицаЗначений");
	ТаблицаРасшифровкаКорректировкиОтгруженныхТоваров.Загрузить(ТаблицаРасшифровкаРегламентнойОперации);
	ТаблицаРасшифровкаКорректировкиОтгруженныхТоваров.НоваяКолонка("РасчетнаяСуммаВозврата",     "Число");
	ТаблицаРасшифровкаКорректировкиОтгруженныхТоваров.НоваяКолонка("СуммаКорректировкиВозврата", "Число");
	
КонецПроцедуры // ИнициализироватьРасшифровкиПоКорректировкеПродукции()

//******************************************************************************
// ИнициализироватьРасшифровкуТранспортныхРасходов()
//
Процедура ИнициализироватьРасшифровкуТранспортныхРасходов()
	
	ТаблицаРасшифровкаРегламентнойОперации = СоздатьОбъект("ТаблицаЗначений");
	ТаблицаРасшифровкаРегламентнойОперации.НоваяКолонка("РасходовНаНачало",       "Число");
	ТаблицаРасшифровкаРегламентнойОперации.НоваяКолонка("РасходовВТекущемМесяце", "Число");
	ТаблицаРасшифровкаРегламентнойОперации.НоваяКолонка("ОстатокТоваровНаНачало", "Число");
	ТаблицаРасшифровкаРегламентнойОперации.НоваяКолонка("ПриобретеноТоваров",     "Число");
	ТаблицаРасшифровкаРегламентнойОперации.НоваяКолонка("РеализованоТоваров",     "Число");
	ТаблицаРасшифровкаРегламентнойОперации.НоваяКолонка("ВыбылоПоЕНДВ",           "Число");
	ТаблицаРасшифровкаРегламентнойОперации.НоваяКолонка("ПрочееВыбытие",          "Число");
	ТаблицаРасшифровкаРегламентнойОперации.НоваяКолонка("ОстатокТоваровНаКонец",  "Число");
	ТаблицаРасшифровкаРегламентнойОперации.НоваяКолонка("СреднийПроцент",         "Число");
	ТаблицаРасшифровкаРегламентнойОперации.НоваяКолонка("ОстатокРасходов",        "Число");
	ТаблицаРасшифровкаРегламентнойОперации.НоваяКолонка("ПризнаноРасхов",         "Число");
	ТаблицаРасшифровкаРегламентнойОперации.НоваяКолонка("НеПризнаноРасходов",     "Число");
	
	// колонки для расшифровки
	ТаблицаРасшифровкаРегламентнойОперации.НоваяКолонка("РасшифровкаОСВПоСчетуН01_07",  "СписокЗначений");
	
КонецПроцедуры // ИнициализироватьРасшифровкуТранспортныхРасходов()

//******************************************************************************
// ИнициализироватьРасшифровкуПоНормировованиюРасходовНаРекламу()
//
Процедура ИнициализироватьРасшифровкуПоНормировованиюРасходовНаРекламу()
	
	ТаблицаРасшифровкаРегламентнойОперации = СоздатьОбъект("ТаблицаЗначений");
	ТаблицаРасшифровкаРегламентнойОперации.НоваяКолонка("ВсегоРасходов", "Число");
	ТаблицаРасшифровкаРегламентнойОперации.НоваяКолонка("Выручка", "Число");
	ТаблицаРасшифровкаРегламентнойОперации.НоваяКолонка("ВПределахНорм", "Число");
	ТаблицаРасшифровкаРегламентнойОперации.НоваяКолонка("ПринятоКУчетуРанее", "Число");
	ТаблицаРасшифровкаРегламентнойОперации.НоваяКолонка("ПринятоВТекущемМесяце", "Число");
	
	// колонки для расшифровки
	ТаблицаРасшифровкаРегламентнойОперации.НоваяКолонка("РасшифровкаОСВПоСчетуН03_04",  "СписокЗначений");
	ТаблицаРасшифровкаРегламентнойОперации.НоваяКолонка("РасшифровкаОСВПоСчетуН06",     "СписокЗначений");
	
КонецПроцедуры // ИнициализироватьРасшифровкуПоНормировованиюРасходовНаРекламу()

//******************************************************************************
// ИнициализироватьРасшифровкуПоНормировованиюПредставительскихРасходов()
//
Процедура ИнициализироватьРасшифровкуПоНормировованиюПредставительскихРасходов()
	
	ТаблицаРасшифровкаРегламентнойОперации = СоздатьОбъект("ТаблицаЗначений");
	ТаблицаРасшифровкаРегламентнойОперации.НоваяКолонка("ВсегоРасходов", "Число");
	ТаблицаРасшифровкаРегламентнойОперации.НоваяКолонка("РасходыНаОплатуТруда", "Число");
	ТаблицаРасшифровкаРегламентнойОперации.НоваяКолонка("ВПределахНорм", "Число");
	ТаблицаРасшифровкаРегламентнойОперации.НоваяКолонка("ПринятоКУчетуРанее", "Число");
	ТаблицаРасшифровкаРегламентнойОперации.НоваяКолонка("ПринятоВТекущемМесяце", "Число");
	
	// колонки для расшифровки
	ТаблицаРасшифровкаРегламентнойОперации.НоваяКолонка("РасшифровкаОСВПоСчету",  "СписокЗначений");
	
КонецПроцедуры // ИнициализироватьРасшифровкуПоНормировованиюПредставительскихРасходов()

//******************************************************************************
// ИнициализироватьРасшифровкуРаспределенияКосвенныхРасходов()
//
Процедура ИнициализироватьРасшифровкуРаспределенияКосвенныхРасходов()
	
	ТаблицаРасшифровкаРегламентнойОперации = СоздатьОбъект("ТаблицаЗначений");
	ТаблицаРасшифровкаРегламентнойОперации.НоваяКолонка("ГруппаРасходов", "Перечисление.ГруппыВидыРасходов");
	ТаблицаРасшифровкаРегламентнойОперации.НоваяКолонка("ВсегоРасходов", "Число");
	ТаблицаРасшифровкаРегламентнойОперации.НоваяКолонка("РасходыНеЕНВД", "Число");
	ТаблицаРасшифровкаРегламентнойОперации.НоваяКолонка("РасходыЕНВД",   "Число");
	
	// колонки для расшифровки
	ТаблицаРасшифровкаРегламентнойОперации.НоваяКолонка("РасшифровкаОСВПоСчету",  "СписокЗначений");
	
КонецПроцедуры // ИнициализироватьРасшифровкуРаспределенияКосвенныхРасходов()

//******************************************************************************
// РасшифровкаРасчетаКоэффициентаРаспределения()
//
Функция РасшифровкаРасчетаКоэффициентаРаспределения()
	
	РасшифровкаРасчета = СоздатьОбъект("ТаблицаЗначений");
	РасшифровкаРасчета.НоваяКолонка("ВыручкаНеЕНВД", "Число");
	РасшифровкаРасчета.НоваяКолонка("ВыручкаЕНВД",   "Число");
	РасшифровкаРасчета.НоваяКолонка("ВыручкаБезНалогов",   "Число");
	РасшифровкаРасчета.НоваяКолонка("НДС",           "Число");
	РасшифровкаРасчета.НоваяКолонка("Акцизы",        "Число");
	РасшифровкаРасчета.НоваяКолонка("Пошлины",       "Число");
	РасшифровкаРасчета.НоваяКолонка("НП",            "Число");
	РасшифровкаРасчета.НоваяКолонка("Коэффициент",   "Число");
	РасшифровкаРасчета.НоваяКолонка("ВыручкаПрочая",   "Число");
	РасшифровкаРасчета.НоваяКолонка("НДСПрочий",   "Число");
	
	// колонки для расшифровки
	РасшифровкаРасчета.НоваяКолонка("РасшифровкаОСВПоСчету90_1_1","СписокЗначений");
	РасшифровкаРасчета.НоваяКолонка("РасшифровкаОСВПоСчету90_1_2",  "СписокЗначений");
	РасшифровкаРасчета.НоваяКолонка("РасшифровкаОСВПоСчету90_3",  "СписокЗначений");
	РасшифровкаРасчета.НоваяКолонка("РасшифровкаОСВПоСчету90_4",  "СписокЗначений");
	РасшифровкаРасчета.НоваяКолонка("РасшифровкаОСВПоСчету90_5",  "СписокЗначений");
	РасшифровкаРасчета.НоваяКолонка("РасшифровкаОСВПоСчету90_6",  "СписокЗначений");
	РасшифровкаРасчета.НоваяКолонка("РасшифровкаОСВПоСчету91_1",  "СписокЗначений");
	РасшифровкаРасчета.НоваяКолонка("РасшифровкаЖурналПроводок91_2_68_2",  "СписокЗначений");
	
	Расшифровка = СоздатьОбъект("СписокЗначений");
	Расшифровка.ДобавитьЗначение("РасчетКоэффициентаРаспределенияРасходовПоВД", "Наименование таблицы");
	Расшифровка.ДобавитьЗначение(РасшифровкаРасчета, "Таблица данных");
	Расшифровка.ДобавитьЗначение(ДатаДок, "Дата операции");
	
	Возврат Расшифровка;
	
КонецФункции // РасшифровкаРасчетаКоэффициентаРаспределения()

//******************************************************************************
// ВыводВОтчетИнформацииОВыполненииОперации(ИдентификаторТаблицы, ТаблицаДанных, ДополнительныеДанные, НаименованиеВыполненнойОперации, НаименованиеНеВыполненнойОперации)
//
// Параметры:
//  ИдентификаторТаблицы - строка - идентификатор отображаемой таблицы;
//  ТаблицаДанных -  таблица с данными, для заполнения печатной формы;
//  ДополнительныеДанные -  дополнительные данные;
//  НаименованиеВыполненнойОперации - строка, выводимая в отчет-список выполненных 
//                                    операций, в случае если операция выполнена
//  НаименованиеНеВыполненнойОперации - строка, выводимая в отчет-список выполненных 
//                                      операций, в случае если операция не выполнена
//
// Описание:
//  Вывод в отчет по документу сто троки с содержанием выполненной операции
//  и расшифровкой в которой содержатся данные для формирования печатной формы по операции.
//
Процедура ВыводВОтчетИнформацииОВыполненииОперации(ИдентификаторТаблицы, ТаблицаДанных, ДополнительныеДанные, НаименованиеВыполненнойОперации, НаименованиеНеВыполненнойОперации, НачалоПериода = "")
	
	Если ТаблицаДанных.КоличествоСтрок() > 0 Тогда
		Расшифровка = СоздатьОбъект("СписокЗначений");
		Расшифровка.ДобавитьЗначение(ИдентификаторТаблицы, "Наименование таблицы");
		Расшифровка.ДобавитьЗначение(ТаблицаДанных, "Таблица данных");
		Расшифровка.ДобавитьЗначение(ДатаДок, "Дата операции");
		
		Если ПустоеЗначение(НачалоПериода) = 0 Тогда
			Расшифровка.Установить("Начало периода", НачГода(ДатаНач));
		КонецЕсли;
		
		Расшифровка.ДобавитьЗначение(ДополнительныеДанные, "Дополнительные данные");
		
		НаименованиеРегламентнойПодоперации = НаименованиеВыполненнойОперации;
		Таб.ВывестиСекцию("ПодоперацияВыполненаНУ");
		
	Иначе
		НаименованиеРегламентнойПодоперации = НаименованиеНеВыполненнойОперации;
		Таб.ВывестиСекцию("ПодоперацияНеВыполненаНУ");    
	КонецЕсли;
	
	ИдентификаторТаблицы = 0;
	
КонецПроцедуры // ВыводВОтчетИнформацииОВыполненииОперации()

//******************************************************************************
// ЗакрытьСчетН15()
//
// Параметры:
//  Нет.
//
// Вызывается из формул элементов диалога:
//  Нет.
//
// Описание:
//  Выполняется закрытие счета Н15. Выбирается вся оплата налога за год,
//  и распределяется на счете Н15 по срокам начисленного налога, начиная с самого раннего.
//  После закрытие на счете Н15 остаются суммы налогов, которые не уплачены.
//
Процедура ЗакрытьСчетН15()
	
	Сч_Н15 = СчетПоКоду("Н15");
	
	БухИт = СоздатьОбъект("БухгалтерскиеИтоги"); БухИт.ИспользоватьРазделительУчета(ЮрЛицо);
	БухИт.ПериодМНГ(ДатаДок);
	
	БухИтН15 = СоздатьОбъект("БухгалтерскиеИтоги"); БухИтН15.ИспользоватьРазделительУчета(ЮрЛицо);
	БухИтН15.ИспользоватьСубконто(ВидыСубконто.НалогиИОтчисления);
	БухИтН15.ИспользоватьСубконто(ВидыСубконто.СрокиУплаты);
	БухИтН15.ВыполнитьЗапрос(, ДатаКон, Сч_Н15,,,,,);
	БухИтН15.ВыбратьСубконто(ВидыСубконто.НалогиИОтчисления);
	Пока БухИтН15.ПолучитьСубконто(ВидыСубконто.НалогиИОтчисления) = 1 Цикл
		
		ВидНалога = БухИтН15.Субконто(ВидыСубконто.НалогиИОтчисления);
		Если ПустоеЗначение(ВидНалога) = 1 Тогда
			Продолжить;
		КонецЕсли;
		
		// Рассчитаем сумму переплаты по налогу
		СуммаПереплатыНаНачалоГода = 0;
		Если БухИтН15.ПолучитьСубконто(ВидыСубконто.СрокиУплаты,, ПолучитьПустоеЗначение(ВидыСубконто.СрокиУплаты)) = 1 Тогда
			СуммаПереплатыНаНачалоГода = -Мин(БухИтН15.СНК(), 0);	
		КонецЕсли;
		СуммаУплачено = СуммаПереплатыНаНачалоГода;
		
		// Рассчитаем сумму, которая уплачена
		СчетУчетаНалога = ВидНалога.Счет;
		Если (СчетУчетаНалога.ПринадлежитГруппе(СчетПоКоду("68")) = 1)
		или (СчетУчетаНалога.ПринадлежитГруппе(СчетПоКоду("69.2")) = 1)
		или (СчетУчетаНалога.ПринадлежитГруппе(СчетПоКоду("69.3")) = 1) Тогда
			
			Субконто2 = ПолучитьПустоеЗначение();
			
			// На счете 68.10 может вестись учет нескольких налогов
			Если СчетУчетаНалога = СчетПоКоду("68.10") Тогда
				Для НомерСубконто = 1 по СчетУчетаНалога.КоличествоСубконто() Цикл
					Если СчетУчетаНалога.ВидСубконто(НомерСубконто) = ВидыСубконто.ПрочиеОбъектыУчета Тогда
						Субконто2 = ВидНалога.ПолучитьАтрибут("Субконто"+ НомерСубконто);
						Прервать;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;  
			
			// На счете 68.4.1 учет ведется в разрезе бюджетов 
			Если СчетУчетаНалога = СчетПоКоду("68.4.1") Тогда				
				Субконто2 = ВидНалога.ПолучитьАтрибут("Субконто2");
			КонецЕсли;                                           
			
			СуммаУплачено = СуммаУплачено + БухИт.ДО(СчетУчетаНалога,,, Перечисление.ВидыПлатежейВБюджет.Налог, Субконто2);
			СуммаУплачено = СуммаУплачено + БухИт.ДО(СчетУчетаНалога,,, Перечисление.ВидыПлатежейВБюджет.НалогСам, Субконто2);
			СуммаУплачено = СуммаУплачено + БухИт.ДО(СчетУчетаНалога,,, Перечисление.ВидыПлатежейВБюджет.НалогАкт, Субконто2);
			
		ИначеЕсли (СчетУчетаНалога = СчетПоКоду("69.1"))
		или (СчетУчетаНалога = СчетПоКоду("69.11"))
		или (СчетУчетаНалога = СчетПоКоду("69.12")) Тогда
			
			СуммаУплачено = СуммаУплачено + БухИт.ДО(СчетУчетаНалога,,, Перечисление.ВидыПлатежейВФонды.Взносы);
			СуммаУплачено = СуммаУплачено + БухИт.ДО(СчетУчетаНалога,,, Перечисление.ВидыПлатежейВФонды.ВзносыСам);
			СуммаУплачено = СуммаУплачено + БухИт.ДО(СчетУчетаНалога,,, Перечисление.ВидыПлатежейВФонды.ВзносыАкт);
			
		Иначе
			ТекстСообщения = "Для налога " + ВидНалога + " не указан счет учета " + СчетУчетаНалога + "
			|Необходимо указать один из субсчетов счетов 68 или 69.";
			глСообщениеПроведения(ТекстСообщения, ТекущийДокумент(), -1,, ВидНалога.ТекущийЭлемент());
			Продолжить;
		КонецЕсли;
		
		Если СуммаУплачено > 0 Тогда
			БухИтН15.ВыбратьСубконто(ВидыСубконто.СрокиУплаты,,,,,);
			Пока (БухИтН15.ПолучитьСубконто(ВидыСубконто.СрокиУплаты) = 1) и (СуммаУплачено > 0) Цикл
				НеОплачено = БухИтН15.СКК();
				СуммаЗакрыть = Мин(НеОплачено, СуммаУплачено);
				Если СуммаЗакрыть > 0 Тогда
					Операция.НоваяПроводка(); Операция.РазделительУчета = ЮрЛицо;
					Операция.НомерЖурнала = "НУ";
					Операция.СодержаниеПроводки = "Закрытие счета по окончанию налогового периода";
					Операция.Дебет.Счет = Сч_Н15;
					Операция.Дебет.НалогиИОтчисления = ВидНалога;
					Операция.Дебет.СрокиУплаты = БухИтН15.Субконто(ВидыСубконто.СрокиУплаты);
					Операция.Сумма = СуммаЗакрыть;
					
					СуммаУплачено = СуммаУплачено - СуммаЗакрыть;
				КонецЕсли;
			КонецЦикла;
			
			// Переплату относим на пустой срок уплаты (при этом учитываем
			// переплату, существовавшую на начало года).
			СуммаПереплатыНаКонецГода = Макс(СуммаУплачено, 0);
			СуммаКорректировкиПереплаты = СуммаПереплатыНаКонецГода - СуммаПереплатыНаНачалоГода;
			Если СуммаКорректировкиПереплаты <> 0 Тогда
				Операция.НоваяПроводка(); Операция.РазделительУчета = ЮрЛицо;
				Операция.НомерЖурнала = "НУ";
				Операция.СодержаниеПроводки = "Отражение переплаты при закрытии счета";
				Операция.Дебет.Счет = Сч_Н15;
				Операция.Дебет.НалогиИОтчисления = ВидНалога;
				Операция.Сумма = СуммаКорректировкиПереплаты;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры // ЗакрытьСчетН15()
//****************************************************************************** 
// КоэффициентРаспределенияПоВидамДеятельности(ТипПериода, ПрочиеДоходы, ФормироватьРасшифровку)
//
// Параметры:
//  ТипПериода:
//   0 - база распределения определяется за текущий месяц;
//   1 - база распределения определяется с начала года;
//
//  ПрочиеДоходы:
//   0 - прочие доходы не учитываются в базе распределения;
//   1 - прочие доходы учитываются в базе распределения;
//
//  ФормироватьРасшифровку:
//   0 - не формировать;
//   1 - формировать.
//
// Возвращаемое значение:
//  К - Число - коэффициент распределения.
//
// Описание:
//  Определяется коэффициент доходов от деятельности не облагаемой ЕНВД в общем объеме доходов.
//
Функция КоэффициентРаспределенияПоВидамДеятельности(ТипПериода, ПрочиеДоходы, ФормироватьРасшифровку)
	
	Сч90_1_1 = СчетПоКоду("90.1.1");
	Сч90_1_2 = СчетПоКоду("90.1.2");
	Сч90_3   = СчетПоКоду("90.3");
	Сч90_4   = СчетПоКоду("90.4");
	Сч90_5   = СчетПоКоду("90.5");
	Сч90_6   = СчетПоКоду("90.6");
	Сч91_1   = СчетПоКоду("91.1");
	Сч91_2	 = СчетПоКоду("91.2");
	Сч68_2	 = СчетПоКоду("68.2");
	
	БухИт90 = СоздатьОбъект("БухгалтерскиеИтоги"); БухИт90.ИспользоватьРазделительУчета(ЮрЛицо);
	
	Если ТипПериода = 0 Тогда // за месяц
		БухИт90.ПериодМ(ДатаДок);	
		
	Иначе // нарастающим итогом
		БухИт90.ПериодМНГ(ДатаДок);
	КонецЕсли;
	
	ВыручкаНеЕНВД  = БухИт90.КО(Сч90_1_1);
	Налоги         = БухИт90.ДО(Сч90_3) + БухИт90.ДО(Сч90_4) + БухИт90.ДО(Сч90_5) + БухИт90.ДО(Сч90_6);
	ВыручкаЕНВД    = БухИт90.КО(Сч90_1_2);

	ВыручкаПрочая = 0;
	НДСПрочий = 0;
	
	Если ПрочиеДоходы = 1 Тогда
		ВыручкаПрочая  = ВыручкаПрочая + БухИт90.КО(Сч91_1);
		
		БухИт68 = СоздатьОбъект("БухгалтерскиеИтоги"); БухИт68.ИспользоватьРазделительУчета(ЮрЛицо);
		БухИт68.ИспользоватьСубконто(ВидыСубконто.ВидыПлатежейВБюджет,Перечисление.ВидыПлатежейВБюджет.Налог,2);
		
		Если ТипПериода = 0 Тогда // за месяц
			БухИт68.ВыполнитьЗапрос(НачМесяца(ДатаДок),ДатаДок,"68.2","91.2",,2,,"С");	
		
		Иначе // нарастающим итогом
			БухИт68.ВыполнитьЗапрос(НачГода(ДатаДок),ДатаДок,"68.2","91.2",,2,,"С");
		КонецЕсли;
		
		Если БухИт68.ПолучитьСубконто(1,,Перечисление.ВидыПлатежейВБюджет.Налог) = 1 Тогда			
			НДСПрочий = НДСПрочий + БухИт68.КО();                                                               
		КонецЕсли;
	КонецЕсли;
	
	ВыручкаНеЕНВДсУчетомПрочихДоходов = ВыручкаНеЕНВД + ВыручкаПрочая;
	Налоги = Налоги + НДСПрочий;
	
	ВыручкаБезНалогов = ВыручкаНеЕНВДсУчетомПрочихДоходов - Налоги;	
	ПрибыльОбщая = ВыручкаБезНалогов + ВыручкаЕНВД;
	
	Если ПрибыльОбщая = 0 Тогда
		К = 1;
		
	Иначе
		К = ВыручкаБезНалогов/ПрибыльОбщая ;
	КонецЕсли;
	
	// Формирование печатной формы
	Если ФормироватьРасшифровку = 1 Тогда
		
		ТаблицаРасшифровкаРегламентнойОперацииДополнительно = РасшифровкаРасчетаКоэффициентаРаспределения();
		РасшифровкаРасчетаКоэффициента = ТаблицаРасшифровкаРегламентнойОперацииДополнительно.Получить("Таблица данных");
		
		Если ТипПериода = 1 Тогда // нарастающим итогом
			ТаблицаРасшифровкаРегламентнойОперацииДополнительно.Установить("Начало периода", НачГода(ДатаНач));
		КонецЕсли;
		
		РасшифровкаРасчетаКоэффициента.НоваяСтрока();
		РасшифровкаРасчетаКоэффициента.ВыручкаНеЕНВД     = ВыручкаНеЕНВД;
		РасшифровкаРасчетаКоэффициента.ВыручкаБезНалогов = ВыручкаБезНалогов;
		РасшифровкаРасчетаКоэффициента.ВыручкаЕНВД       = ВыручкаЕНВД;
		РасшифровкаРасчетаКоэффициента.НДС               = БухИт90.ДО(Сч90_3);
		РасшифровкаРасчетаКоэффициента.Акцизы            = БухИт90.ДО(Сч90_4);
		РасшифровкаРасчетаКоэффициента.Пошлины           = БухИт90.ДО(Сч90_5);
		РасшифровкаРасчетаКоэффициента.НП                = БухИт90.ДО(Сч90_6);
		РасшифровкаРасчетаКоэффициента.ВыручкаПрочая     = ВыручкаПрочая;
		РасшифровкаРасчетаКоэффициента.НДСПрочий         = НДСПрочий;
		РасшифровкаРасчетаКоэффициента.Коэффициент       = К;
		
		// формирование расшифровки показателей строки
		Расшифровка = СоздатьОбъект("СписокЗначений");
		ОсновнаяРасшифровкаОСВ.Выгрузить(Расшифровка);
		Расшифровка.Установить("Счет", Сч90_1_1);
		Если ТипПериода = 1 Тогда
			Расшифровка.Установить("Дата1", НачГода(ДатаНач));    
		КонецЕсли;
		РасшифровкаРасчетаКоэффициента.РасшифровкаОСВПоСчету90_1_1 = Расшифровка;
		
		Расшифровка = СоздатьОбъект("СписокЗначений");
		ОсновнаяРасшифровкаОСВ.Выгрузить(Расшифровка);
		Если ТипПериода = 1 Тогда
			Расшифровка.Установить("Дата1", НачГода(ДатаНач));    
		КонецЕсли;
		Расшифровка.Установить("Счет", Сч90_1_2);
		РасшифровкаРасчетаКоэффициента.РасшифровкаОСВПоСчету90_1_2 = Расшифровка;
		
		Расшифровка = СоздатьОбъект("СписокЗначений");
		ОсновнаяРасшифровкаОСВ.Выгрузить(Расшифровка);
		Если ТипПериода = 1 Тогда
			Расшифровка.Установить("Дата1", НачГода(ДатаНач));    
		КонецЕсли;
		Расшифровка.Установить("Счет", Сч90_3);
		РасшифровкаРасчетаКоэффициента.РасшифровкаОСВПоСчету90_3 = Расшифровка;
		
		Расшифровка = СоздатьОбъект("СписокЗначений");
		ОсновнаяРасшифровкаОСВ.Выгрузить(Расшифровка);
		Если ТипПериода = 1 Тогда
			Расшифровка.Установить("Дата1", НачГода(ДатаНач));    
		КонецЕсли;
		Расшифровка.Установить("Счет", Сч90_4);
		РасшифровкаРасчетаКоэффициента.РасшифровкаОСВПоСчету90_4 = Расшифровка;
		
		Расшифровка = СоздатьОбъект("СписокЗначений");
		ОсновнаяРасшифровкаОСВ.Выгрузить(Расшифровка);
		Если ТипПериода = 1 Тогда
			Расшифровка.Установить("Дата1", НачГода(ДатаНач));    
		КонецЕсли;
		Расшифровка.Установить("Счет", Сч90_5);
		РасшифровкаРасчетаКоэффициента.РасшифровкаОСВПоСчету90_5 = Расшифровка;
		
		Расшифровка = СоздатьОбъект("СписокЗначений");
		ОсновнаяРасшифровкаОСВ.Выгрузить(Расшифровка);
		Если ТипПериода = 1 Тогда
			Расшифровка.Установить("Дата1", НачГода(ДатаНач));    
		КонецЕсли;
		Расшифровка.Установить("Счет", Сч90_6);
		РасшифровкаРасчетаКоэффициента.РасшифровкаОСВПоСчету90_6 = Расшифровка;
		
		Если ПрочиеДоходы = 1 Тогда
			Расшифровка = СоздатьОбъект("СписокЗначений");
			ОсновнаяРасшифровкаОСВ.Выгрузить(Расшифровка);
			Если ТипПериода = 1 Тогда
				Расшифровка.Установить("Дата1", НачГода(ДатаНач));    
			КонецЕсли;
			Расшифровка.Установить("Счет", Сч91_1);
			РасшифровкаРасчетаКоэффициента.РасшифровкаОСВПоСчету91_1 = Расшифровка;
			
			Расшифровка = СоздатьОбъект("СписокЗначений");
			Расшифровка.Установить("Отчет", "ОтчетПоПроводкам");
			Расшифровка.Установить("Обновить", 0);
			Расшифровка.Установить("Дата1", ДатаНач);    
			Расшифровка.Установить("Дата2", ДатаКон);
			Расшифровка.Установить("Счет", Сч68_2);
			Расшифровка.Установить("КорСчет", Сч91_2);
			Расшифровка.Установить("ДтКт", 2);
			Расшифровка.Установить("ВидСубконто1", ВидыСубконто.ВидыПлатежейВБюджет);
			Расшифровка.Установить("Субконто1", Перечисление.ВидыПлатежейВБюджет.Налог);
			Если ТипПериода = 1 Тогда
				Расшифровка.Установить("Дата1", НачГода(ДатаНач));    
			КонецЕсли;
			РасшифровкаРасчетаКоэффициента.РасшифровкаЖурналПроводок91_2_68_2 = Расшифровка;
			
		Иначе
			РасшифровкаРасчетаКоэффициента.РасшифровкаОСВПоСчету91_1 = "";
			РасшифровкаРасчетаКоэффициента.РасшифровкаЖурналПроводок91_2_68_2 = "";
		КонецЕсли;
	КонецЕсли;
	
	Возврат К;
	
КонецФункции // КоэффициентРаспределенияПоВидамДеятельности()

//******************************************************************************
// РаспределениеПоСчетам1()
//
// Параметры:
//  Нет.
//
// Вызывается из формул элементов диалога:
//  Нет.
//
// Описание:
//  Переданные в процедуру вид расхода, объект и элемент расхода трансформируются в
//  счет и связанные с ним объекты аналитического учета. Результат помещается в таблицу.
//
Функция РаспределениеПоСчетам1(ОбъектУчета, ВидРасхода, ЭлементРасхода)
	
	СчетИАналитикаДляОтнесенияРасходов = глПолучитьСчетРасходовДляЦелейНалоговогоУчета(ВидРасхода, ЭлементРасхода, ОбъектУчета, ДатаДок);
	Возврат СчетИАналитикаДляОтнесенияРасходов;
	
КонецФункции // РаспределениеПоСчетам1()

//****************************************************************************** 
// РаспределениеПоСчетам2()
//
// Параметры:
//  Нет.
//
// Возвращаемое значение:
//  Здесь описывается возвращаемое значение.
//
// Вызывается из формул элементов диалога:
//  Нет.
//
// Описание:
//  Здесь описывается функция.
//
Процедура РаспределениеПоСчетам2(Объект, УсловиеВыбытия, ВидДохода, ТаблицаПроводок)
	
	СчН07_01   = СчетПоКоду("Н07.01");
	СчН07_05   = СчетПоКоду("Н07.05");
	СчН07_06   = СчетПоКоду("Н07.06");
	СчН07_04_1 = СчетПоКоду("Н07.04.1");
	СчН12      = СчетПоКоду("Н12");
	
	Если УсловиеВыбытия = Перечисление.УсловияВыбытияИмущества.СписаниеИмущества Тогда
		ТаблицаПроводок.Счет = СчН07_04_1;
		ТаблицаПроводок.Субконто1 = Перечисление.ГруппыВидыРасходов.ДругиеРасходы;
		
	ИначеЕсли УсловиеВыбытия = Перечисление.УсловияВыбытияИмущества.ВРамкахЦелевогоФинансирования Тогда
		ТаблицаПроводок.Счет = СчН12;
		
	ИначеЕсли (УсловиеВыбытия <> Перечисление.УсловияВыбытияИмущества.ВРамкахБлаготворительнойДеятельности)
	и (УсловиеВыбытия <> Перечисление.УсловияВыбытияИмущества.Безвозмездно) 
	и ((УсловиеВыбытия <> Перечисление.УсловияВыбытияИмущества.Другие)
	или (ПустоеЗначение(ВидДохода) = 0)) Тогда
		
		Если Объект.Вид() = "Номенклатура" Тогда
			Если Объект.ТипНоменклатуры = Перечисление.ТипыНоменклатуры.Продукция Тогда
				ТаблицаПроводок.Счет = СчН07_01; 
				
			ИначеЕсли Объект.ТипНоменклатуры = Перечисление.ТипыНоменклатуры.Товар Тогда
				ТаблицаПроводок.Счет = СчН07_05;
			КонецЕсли;
			
		ИначеЕсли Объект.Вид() = "Материалы" Тогда
			ТаблицаПроводок.Счет = СчН07_06;
		КонецЕсли;
		
	КонецЕсли;	
	
КонецПроцедуры // РаспределениеПоСчетам2()

//******************************************************************************
// СуммаСписанияЗаМесяц()
//
// Параметры:
//  Нет.
//
// Возвращаемое значение:
//  Здесь описывается возвращаемое значение.
//
// Вызывается из формул элементов диалога:
//  Нет.
//
// Описание:
//  Здесь описывается функция.
//
Функция СуммаСписанияЗаМесяц(СтатьяРасходовБудущихПериодов, СуммаСписания = 0)
	
	Если СуммаСписания = 0 Тогда
		СуммаСписания = СтатьяРасходовБудущихПериодов.Сумма;
	КонецЕсли;
	
	Если СуммаСписания = 0 Тогда
		Возврат 0;
	КонецЕсли;

	ДатаНачалаСписания = ?(СтатьяРасходовБудущихПериодов.ДатаНачалаСписания > ДатаНач, СтатьяРасходовБудущихПериодов.ДатаНачалаСписания, ДатаНач);
	Если ПустоеЗначение(ДатаНачалаСписания) = 1 Тогда
		Возврат 0;
	ИначеЕсли ДатаНачалаСписания > ДатаКон Тогда
		Возврат 0;
	КонецЕсли;
	
	ДатаОкончанияСписания = СтатьяРасходовБудущихПериодов.ДатаОкончанияСписания;
	Если ПустоеЗначение(ДатаОкончанияСписания) = 1 Тогда
		Возврат 0;
	ИначеЕсли ДатаОкончанияСписания < ДатаНач Тогда
		Возврат 0;
	ИначеЕсли ДатаОкончанияСписания < ДатаНачалаСписания Тогда
		Возврат 0;
	КонецЕсли;
	
	Если (Лев(Строка(КонМесяца(ДатаНачалаСписания)), 5) = "29.02")
	И НЕ (Лев(Строка(ДатаНачалаСписания), 5) = "01.02") Тогда
		ПоправкаНаВисокосныйГодВНачалеПериода = -1;
	КонецЕсли;
	Если Лев(Строка(КонМесяца(ДатаОкончанияСписания)), 5) = "29.02" Тогда
		ПоправкаНаВисокосныйГодВКонцеПериода = -1;
	КонецЕсли;
	
	Если СтатьяРасходовБудущихПериодов.СпособПризнанияРасходов = Перечисление.СпособыПризнанияРасходов.ПоКалендарнымДням Тогда 
		КоличествоДней = ДатаОкончанияСписания - ДатаНачалаСписания + 1;
		ЦенаДня = СуммаСписания / КоличествоДней;		
		Если КонМесяца(ДатаОкончанияСписания) = КонМесяца(ДатаНачалаСписания) Тогда 
			КоличествоДнейТекущегоМесяца = ДатаЧисло(КонМесяца(ДатаДок)); 
			СуммаСписанияЗаМесяц = СуммаСписания;
		Иначе
			КоличествоДнейТекущегоМесяца = КонМесяца(ДатаНачалаСписания) - ДатаНачалаСписания + 1;
			СуммаСписанияЗаМесяц = ЦенаДня * КоличествоДнейТекущегоМесяца;
		КонецЕсли;
		
		
	ИначеЕсли СтатьяРасходовБудущихПериодов.СпособПризнанияРасходов = Перечисление.СпособыПризнанияРасходов.ВОсобомПорядке Тогда 
		СуммаСписанияЗаМесяц = 0;
	Иначе
		
		ДоляПоследнегоМесяца = ДатаЧисло(ДатаОкончанияСписания) / ДатаЧисло(КонМесяца(ДатаОкончанияСписания));
		Если КонМесяца(ДатаНачалаСписания) = КонМесяца(ДатаОкончанияСписания) Тогда
			ДоляТекущегоМесяца = ДоляПоследнегоМесяца;
			КоличествоМесяцев  = ДоляПоследнегоМесяца;
		Иначе
			ДоляТекущегоМесяца   = (КонМесяца(ДатаНачалаСписания) - ДатаНачалаСписания + 1) / ДатаЧисло(КонМесяца(ДатаНачалаСписания));
			КоличествоМесяцевСеридины = 0;
			ТекДата = ДобавитьМесяц(КонМесяца(ДатаНачалаСписания), 1);
			Пока КонМесяца(ДатаОкончанияСписания) >= ТекДата Цикл
				КоличествоМесяцевСеридины = КоличествоМесяцевСеридины + 1;
				ТекДата               = ДобавитьМесяц(ТекДата, 1);
			КонецЦикла;
			КоличествоМесяцев = КоличествоМесяцевСеридины - 1 + ДоляПоследнегоМесяца + ДоляТекущегоМесяца;
		КонецЕсли;
		
		СуммаСписанияЗаМесяц = ?(КоличествоМесяцев = 0, 0, СуммаСписания * ДоляТекущегоМесяца / КоличествоМесяцев);
		
	КонецЕсли;

	Если СуммаСписания > 0 Тогда
		Возврат Мин(СуммаСписанияЗаМесяц, СуммаСписания);
	Иначе
		Возврат Макс(СуммаСписанияЗаМесяц, СуммаСписания);
	КонецЕсли;
	
КонецФункции // СуммаСписанияЗаМесяц()

//******************************************************************************
// ПроводкиПоРБП_1()
//
Процедура ПроводкиПоРБП_1(Сч)
	
	БухИт = СоздатьОбъект("БухгалтерскиеИтоги"); БухИт.ИспользоватьРазделительУчета(ЮрЛицо);
	БухИт.ИспользоватьСубконто(ВидыСубконто.РасходыБудущихПериодов,,,);
	БухИт.ВыполнитьЗапрос(, ДатаКон, Сч,,,,,);
	БухИт.ВыбратьСубконто(ВидыСубконто.РасходыБудущихПериодов,,,,,,);
	Пока БухИт.ПолучитьСубконто(ВидыСубконто.РасходыБудущихПериодов,,) = 1 Цикл
		ОстатокРасходовБудущихПериодов = БухИт.СКД();
		Если ОстатокРасходовБудущихПериодов <= 0 Тогда
			Продолжить;
		КонецЕсли;
		
		СтатьяРасходовБудущихПериодов = БухИт.Субконто(ВидыСубконто.РасходыБудущихПериодов);
		СуммаСписанияЗаМесяц = Мин(СуммаСписанияЗаМесяц(СтатьяРасходовБудущихПериодов, ОстатокРасходовБудущихПериодов), ОстатокРасходовБудущихПериодов);
		Если СуммаСписанияЗаМесяц > 0 Тогда
			Операция.НоваяПроводка(); Операция.РазделительУчета = ЮрЛицо;
			Операция.НомерЖурнала = "НУ";
			Операция.СодержаниеПроводки = "РБП за " + ПериодСтр(ДатаНач, ДатаКон);
			Операция.Сумма = СуммаСписанияЗаМесяц;
			Операция.Кредит.Счет = Сч;
			Операция.Кредит.РасходыБудущихПериодов = СтатьяРасходовБудущихПериодов;        
			
			СчетИАналитикаДляОтнесенияРасходов = РаспределениеПоСчетам1(СтатьяРасходовБудущихПериодов.Объект, СтатьяРасходовБудущихПериодов.ВидРасхода, СтатьяРасходовБудущихПериодов.ЭлементРасхода);
			СчетРасходов = СчетИАналитикаДляОтнесенияРасходов.Получить("Счет");
			СчетРасходов = глПолучитьСчетУчетаКосвенныхРасходовНУ(ДатаДок, СтатьяРасходовБудущихПериодов.СчетЗатрат, СтатьяРасходовБудущихПериодов.Субконто1, СчетРасходов);
			Если ПустоеЗначение(СчетРасходов) = 0 Тогда
				Операция.Дебет.Счет = СчетРасходов;
				Операция.Дебет.Субконто(1, СчетИАналитикаДляОтнесенияРасходов.Получить("Субконто1"));
				Операция.Дебет.Субконто(2, СчетИАналитикаДляОтнесенияРасходов.Получить("Субконто2"));
				Операция.Дебет.Субконто(3, СчетИАналитикаДляОтнесенияРасходов.Получить("Субконто3"));
			КонецЕсли;
		КонецЕсли;
		
		// Формирование печатной формы
		Если ФормироватьПечатнуюФорму = 1 Тогда
			ТаблицаРасшифровкаРегламентнойОперации.НоваяСтрока();
			ТаблицаРасшифровкаРегламентнойОперации.СтатьяРБП          = СтатьяРасходовБудущихПериодов;
			ТаблицаРасшифровкаРегламентнойОперации.ВидРасхода         = СтатьяРасходовБудущихПериодов.ВидРасхода;
			ТаблицаРасшифровкаРегламентнойОперации.ЭлементРасхода     = СтатьяРасходовБудущихПериодов.ЭлементРасхода;
			ТаблицаРасшифровкаРегламентнойОперации.Объект             = СтатьяРасходовБудущихПериодов.Объект;
			ТаблицаРасшифровкаРегламентнойОперации.ДатаНачала         = СтатьяРасходовБудущихПериодов.ДатаНачалаСписания;
			ТаблицаРасшифровкаРегламентнойОперации.ДатаОкончания      = СтатьяРасходовБудущихПериодов.ДатаОкончанияСписания;
			ТаблицаРасшифровкаРегламентнойОперации.ОбщаяСуммаРасходов = СтатьяРасходовБудущихПериодов.Сумма;
			ТаблицаРасшифровкаРегламентнойОперации.ОстатокНаКонец     = ОстатокРасходовБудущихПериодов;
			ТаблицаРасшифровкаРегламентнойОперации.СуммаСписания      = СуммаСписанияЗаМесяц;
			
			Расшифровка = СоздатьОбъект("СписокЗначений");
			ОсновнаяРасшифровкаОСВ.Выгрузить(Расшифровка);
			Расшифровка.Установить("Счет", Сч);
			Расшифровка.Установить("ВидСубконто1", ВидыСубконто.РасходыБудущихПериодов);
			Расшифровка.Установить("Субконто1", СтатьяРасходовБудущихПериодов);
			Расшифровка.Установить("ОтборСубконто1", 1);
			ТаблицаРасшифровкаРегламентнойОперации.РасшифровкаОСВПоСчету = Расшифровка;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры // ПроводкиПоРБП_1()

//******************************************************************************
// ПроводкиПоРБП_2()
//
// Описание:
//  Учета РБП по договорам добровольного страхования (счета Н04.05 и Н04.06).
//
Процедура ПроводкиПоРБП_2(Сч, Сч2 = "")
	
	БухИт = СоздатьОбъект("БухгалтерскиеИтоги"); БухИт.ИспользоватьРазделительУчета(ЮрЛицо);
	БухИт.ИспользоватьСубконто(ВидыСубконто.РасходыБудущихПериодов,,,);
	БухИт.ИспользоватьСубконто(ВидыСубконто.Сотрудники,,,);
	БухИт.ВыполнитьЗапрос(, ДатаКон, Сч,,,,,);
	БухИт.ВыбратьСубконто(ВидыСубконто.РасходыБудущихПериодов,,,,,,);
	Пока БухИт.ПолучитьСубконто(ВидыСубконто.РасходыБудущихПериодов,,) = 1 Цикл
		БухИт.ВыбратьСубконто(ВидыСубконто.Сотрудники,,,,,,);
		Пока БухИт.ПолучитьСубконто(ВидыСубконто.Сотрудники,,) = 1 Цикл
			ОстатокРасходовБудущихПериодов = БухИт.СКД();
			Если ОстатокРасходовБудущихПериодов <= 0 Тогда
				Продолжить;
			КонецЕсли;
			
			Сотрудник = БухИт.Субконто(ВидыСубконто.Сотрудники);
			
			СтатьяРасходовБудущихПериодов = БухИт.Субконто(ВидыСубконто.РасходыБудущихПериодов);
			СуммаСписанияЗаМесяц = Мин(СуммаСписанияЗаМесяц(СтатьяРасходовБудущихПериодов, ОстатокРасходовБудущихПериодов), ОстатокРасходовБудущихПериодов);
			Если СуммаСписанияЗаМесяц > 0 Тогда
				Операция.НоваяПроводка(); Операция.РазделительУчета = ЮрЛицо;
				Операция.НомерЖурнала = "НУ";
				Операция.СодержаниеПроводки = "РБП за " + ПериодСтр(ДатаНач, ДатаКон);
				Операция.Сумма = СуммаСписанияЗаМесяц;
				Операция.Кредит.Счет = Сч;
				Операция.Кредит.РасходыБудущихПериодов = СтатьяРасходовБудущихПериодов;
				Операция.Кредит.Сотрудники = Сотрудник;
				Если ПустоеЗначение(Сч2) = 1 Тогда // расходы на оплату труда
					
					СчетИАналитикаДляОтнесенияРасходов = РаспределениеПоСчетам1(СтатьяРасходовБудущихПериодов.Объект, СтатьяРасходовБудущихПериодов.ВидРасхода, СтатьяРасходовБудущихПериодов.ЭлементРасхода);
					СчетРасходов = СчетИАналитикаДляОтнесенияРасходов.Получить("Счет");
					Если ПустоеЗначение(СчетРасходов) = 0 Тогда
						Операция.Дебет.Счет = СчетРасходов;
						Операция.Дебет.Субконто(1, СчетИАналитикаДляОтнесенияРасходов.Получить("Субконто1"));
						Операция.Дебет.Субконто(2, СчетИАналитикаДляОтнесенияРасходов.Получить("Субконто2"));
						Операция.Дебет.Субконто(3, СчетИАналитикаДляОтнесенияРасходов.Получить("Субконто3"));
					КонецЕсли;
					
				Иначе
					Операция.Дебет.Счет = Сч2;
					Операция.Дебет.Сотрудники = Сотрудник;
				КонецЕсли;
			КонецЕсли;
			
			// Формирование печатной формы
			Если ФормироватьПечатнуюФорму = 1 Тогда
				
				ТаблицаРасшифровкаРегламентнойОперации.НоваяСтрока();
				ТаблицаРасшифровкаРегламентнойОперации.СтатьяРБП          = СтатьяРасходовБудущихПериодов;
				ТаблицаРасшифровкаРегламентнойОперации.ВидРасхода         = СтатьяРасходовБудущихПериодов.ВидРасхода;
				ТаблицаРасшифровкаРегламентнойОперации.ЭлементРасхода     = СтатьяРасходовБудущихПериодов.ЭлементРасхода;
				ТаблицаРасшифровкаРегламентнойОперации.Объект             = СтатьяРасходовБудущихПериодов.Объект;
				ТаблицаРасшифровкаРегламентнойОперации.Субконто2          = Сотрудник;
				ТаблицаРасшифровкаРегламентнойОперации.ДатаНачала         = СтатьяРасходовБудущихПериодов.ДатаНачалаСписания;
				ТаблицаРасшифровкаРегламентнойОперации.ДатаОкончания      = СтатьяРасходовБудущихПериодов.ДатаОкончанияСписания;
				
				ТаблицаРасшифровкаРегламентнойОперации.ОбщаяСуммаРасходов = СтатьяРасходовБудущихПериодов.Сумма;
				ТаблицаРасшифровкаРегламентнойОперации.ОстатокНаКонец     = ОстатокРасходовБудущихПериодов;
				ТаблицаРасшифровкаРегламентнойОперации.СуммаСписания      = СуммаСписанияЗаМесяц;
				
				Расшифровка = СоздатьОбъект("СписокЗначений");
				ОсновнаяРасшифровкаОСВ.Выгрузить(Расшифровка);
				Расшифровка.Установить("Счет", Сч);
				Расшифровка.Установить("ВидСубконто1", ВидыСубконто.РасходыБудущихПериодов);
				Расшифровка.Установить("Субконто1", СтатьяРасходовБудущихПериодов);
				Расшифровка.Установить("ОтборСубконто1", 1);
				Расшифровка.Установить("ВидСубконто2", ВидыСубконто.Сотрудники);
				Расшифровка.Установить("Субконто2", Сотрудник);
				Расшифровка.Установить("ОтборСубконто2", 1);
				ТаблицаРасшифровкаРегламентнойОперации.РасшифровкаОСВПоСчету = Расшифровка;
				
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры // ПроводкиПоРБП_2()

//******************************************************************************
// ПроводкиПоРБП_3()
//
// Описание:
//  Учета РБП по договорам добровольного страхования (счет Н04.07).
//
Процедура ПроводкиПоРБП_3()
	
	СчН04_07 = СчетПоКоду("Н04.07");
	СчН03_07 = СчетПоКоду("Н03.07");
	
	БухИтН03 = СоздатьОбъект("БухгалтерскиеИтоги"); БухИтН03.ИспользоватьРазделительУчета(ЮрЛицо);
	БухИтН03.ИспользоватьСубконто(ВидыСубконто.Сотрудники,,,);
	БухИтН03.ВыполнитьЗапрос(НачГода(ДатаКон), ДатаКон, СчН03_07,,,,,);
	
	БухИт = СоздатьОбъект("БухгалтерскиеИтоги"); БухИт.ИспользоватьРазделительУчета(ЮрЛицо);
	БухИт.ИспользоватьСубконто(ВидыСубконто.РасходыБудущихПериодов,,,);
	БухИт.ИспользоватьСубконто(ВидыСубконто.Сотрудники,,,);
	БухИт.ВыполнитьЗапрос(НачГода(ДатаКон), ДатаКон, СчН04_07,,,,,);
	БухИт.ВыбратьСубконто(ВидыСубконто.РасходыБудущихПериодов,,,,,,);
	Пока БухИт.ПолучитьСубконто(ВидыСубконто.РасходыБудущихПериодов,,) = 1 Цикл
		БухИт.ВыбратьСубконто(ВидыСубконто.Сотрудники,,,,,,);
		Пока БухИт.ПолучитьСубконто(ВидыСубконто.Сотрудники,,) = 1 Цикл
			ОстатокРасходовБудущихПериодов = БухИт.СКД();
			Если ОстатокРасходовБудущихПериодов <= 0 Тогда
				Продолжить;
			КонецЕсли;
			
			Сотрудник = БухИт.Субконто(ВидыСубконто.Сотрудники);
			
			//Описание "Регистра учета расходов по добровольному страхованию работников":
			//"По договорам добровольного личного страхования, заключаемым исключительно на случай 
			//наступления смерти или утраты трудоспособности отражаются суммы в размере, 
			//до 2008 г. - не превышающем 10 тысяч рублей в год на одного застрахованного работника.
			//с 2008 г. - не превышающем 15 тысяч рублей в год на одного застрахованного работника."
			
			СтатьяРасходовБудущихПериодов = БухИт.Субконто(ВидыСубконто.РасходыБудущихПериодов);
			
			НормаРасхода = ?((СтатьяРасходовБудущихПериодов.ДатаНачалаСписания < '01.01.2008'), 10000, 15000);
			
			ПринятоКНалоговомуУчету   = 0;
			НеПринятоКНалоговомуУчету = 0;
			
			Если БухИтН03.ПолучитьСубконто(ВидыСубконто.Сотрудники,, Сотрудник) = 1 Тогда
				ОтраженоРанее = БухИтН03.ДО();
			Иначе
				ОтраженоРанее = 0;
			КонецЕсли;
			МаксСуммаСписанияЗаМесяц = Макс(НормаРасхода - ОтраженоРанее, 0);
			
			СуммаСписанияЗаМесяц = Мин(СуммаСписанияЗаМесяц(СтатьяРасходовБудущихПериодов, ОстатокРасходовБудущихПериодов), ОстатокРасходовБудущихПериодов);
			
			Если СуммаСписанияЗаМесяц > 0 Тогда
				ПринятоКНалоговомуУчету   = Мин(СуммаСписанияЗаМесяц, МаксСуммаСписанияЗаМесяц);
				НеПринятоКНалоговомуУчету = СуммаСписанияЗаМесяц - ПринятоКНалоговомуУчету;
				
				Если ПринятоКНалоговомуУчету > 0 Тогда
					Операция.НоваяПроводка(); Операция.РазделительУчета = ЮрЛицо;
					Операция.НомерЖурнала = "НУ";
					Операция.СодержаниеПроводки = "РБП за " + ПериодСтр(ДатаНач, ДатаКон);
					Операция.Дебет.Счет = СчН03_07;
					Операция.Дебет.Сотрудники = Сотрудник;
					Операция.Кредит.Счет = СчН04_07;
					Операция.Кредит.РасходыБудущихПериодов = СтатьяРасходовБудущихПериодов;
					Операция.Кредит.Сотрудники = Сотрудник;
					Операция.Сумма = ПринятоКНалоговомуУчету;
				КонецЕсли;
				
				Если НеПринятоКНалоговомуУчету > 0 Тогда
					Операция.НоваяПроводка(); Операция.РазделительУчета = ЮрЛицо;
					Операция.НомерЖурнала = "НУ";
					Операция.СодержаниеПроводки = "Расходы, превышающие норматив";
					Операция.Кредит.Счет = СчН04_07;
					Операция.Кредит.РасходыБудущихПериодов = СтатьяРасходовБудущихПериодов;
					Операция.Кредит.Сотрудники = БухИт.Субконто(ВидыСубконто.Сотрудники);
					Операция.Сумма = НеПринятоКНалоговомуУчету;
				КонецЕсли;
			КонецЕсли;
			
			// Формирование печатной формы
			Если ФормироватьПечатнуюФорму = 1 Тогда
				
				ТаблицаРасшифровкаРегламентнойОперации.НоваяСтрока();
				ТаблицаРасшифровкаРегламентнойОперации.СтатьяРБП          = СтатьяРасходовБудущихПериодов;
				ТаблицаРасшифровкаРегламентнойОперации.Субконто2          = Сотрудник;
				ТаблицаРасшифровкаРегламентнойОперации.ДатаНачала         = СтатьяРасходовБудущихПериодов.ДатаНачалаСписания;
				ТаблицаРасшифровкаРегламентнойОперации.ДатаОкончания      = СтатьяРасходовБудущихПериодов.ДатаОкончанияСписания;
				ТаблицаРасшифровкаРегламентнойОперации.ОбщаяСуммаРасходов = СтатьяРасходовБудущихПериодов.Сумма;
				ТаблицаРасшифровкаРегламентнойОперации.ОстатокНаКонец     = ОстатокРасходовБудущихПериодов;
				ТаблицаРасшифровкаРегламентнойОперации.СуммаСписания      = СуммаСписанияЗаМесяц;
				ТаблицаРасшифровкаРегламентнойОперации.ПринятоКНУ         = ПринятоКНалоговомуУчету;
				ТаблицаРасшифровкаРегламентнойОперации.НеПринятоКНУ       = НеПринятоКНалоговомуУчету;
				ТаблицаРасшифровкаРегламентнойОперации.ПринятоКНУВсего    = ПринятоКНалоговомуУчету + ОтраженоРанее;
				
				// формирование расшифровки 
				Расшифровка = СоздатьОбъект("СписокЗначений");
				ОсновнаяРасшифровкаОСВ.Выгрузить(Расшифровка);
				Расшифровка.Установить("Счет", СчН04_07);
				Расшифровка.Установить("ВидСубконто1", ВидыСубконто.РасходыБудущихПериодов);
				Расшифровка.Установить("Субконто1", СтатьяРасходовБудущихПериодов);
				Расшифровка.Установить("ОтборСубконто1", 1);
				Расшифровка.Установить("ВидСубконто2", ВидыСубконто.Сотрудники);
				Расшифровка.Установить("Субконто2", Сотрудник);
				Расшифровка.Установить("ОтборСубконто2", 1);
				ТаблицаРасшифровкаРегламентнойОперации.РасшифровкаОСВПоСчетуН04_07 = Расшифровка;
				
				Расшифровка = СоздатьОбъект("СписокЗначений");
				ОсновнаяРасшифровкаОСВ.Выгрузить(Расшифровка);
				Расшифровка.Установить("Счет", СчН03_07);
				Расшифровка.Установить("ВидСубконто1", ВидыСубконто.Сотрудники);
				Расшифровка.Установить("Субконто1", Сотрудник);
				Расшифровка.Установить("ОтборСубконто1", 1);
				ТаблицаРасшифровкаРегламентнойОперации.РасшифровкаОСВПоСчетуН03_07 = Расшифровка;
				
			КонецЕсли;
			
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры // ПроводкиПоРБП_3()

//******************************************************************************
// ПроводкиПоРБП_4()
//
// Описание:
//  Учета РБП по налогоам и сборам с расходов на оплату труда будущих периодов (счет Н04.11).
//
Процедура ПроводкиПоРБП_4(Сч) 
	
	БухИт = СоздатьОбъект("БухгалтерскиеИтоги"); БухИт.ИспользоватьРазделительУчета(ЮрЛицо);
	БухИт.ИспользоватьСубконто(ВидыСубконто.РасходыБудущихПериодов,,,);
	БухИт.ИспользоватьСубконто(ВидыСубконто.НалогиИОтчисления,,,);
	БухИт.ВыполнитьЗапрос(, ДатаКон, Сч,,,,,);
	БухИт.ВыбратьСубконто(ВидыСубконто.РасходыБудущихПериодов,,,,,,);
	Пока БухИт.ПолучитьСубконто(ВидыСубконто.РасходыБудущихПериодов,,) = 1 Цикл
		БухИт.ВыбратьСубконто(ВидыСубконто.НалогиИОтчисления,,,,,,);
		Пока БухИт.ПолучитьСубконто(ВидыСубконто.НалогиИОтчисления,,) = 1 Цикл
			ОстатокРасходовБудущихПериодов = БухИт.СКД();
			Если ОстатокРасходовБудущихПериодов <= 0 Тогда
				Продолжить;
			КонецЕсли;
			
			ТекНалог = БухИт.Субконто(ВидыСубконто.НалогиИОтчисления);
			СтатьяРасходовБудущихПериодов = БухИт.Субконто(ВидыСубконто.РасходыБудущихПериодов);
			
			// Определение вида расхода, элемента расхода и объекта учета.
			ВидРасхода     = СтатьяРасходовБудущихПериодов.ВидРасхода;
			ЭлементРасхода = СтатьяРасходовБудущихПериодов.ЭлементРасхода;
			Объект         = СтатьяРасходовБудущихПериодов.Объект;
			
			Если (ВидРасхода = Перечисление.ВидыРасходов.ПрямыеРасходы) и (ТекНалог.ПорядокОтраженияВНУ.Получить(ДатаДок) <> Перечисление.ПорядокОтраженияНалоговНУ.ПропорциональноРасчетнойБазе) Тогда
				ВидРасхода = Перечисление.ВидыРасходов.КосвенныеРасходы;
				Объект = "";
			КонецЕсли;
			
			Если Найти("ЕСН_ФБ,ФСС,ФФОМС,ТФОМС", СокрЛП(ТекНалог.Код)) > 0 Тогда
				ЭлементРасхода = Перечисление.ГруппыВидыРасходов.ЕСН;
			
			ИначеЕсли (СокрЛП(ТекНалог.Код) = "ФСС_НС") или (СокрЛП(ТекНалог.Код) = "ПФР_нак") или (СокрЛП(ТекНалог.Код) = "ПФР_страх") Тогда
				ЭлементРасхода = Перечисление.ГруппыВидыРасходов.ДругиеРасходы;
			
			Иначе
				ЭлементРасхода = Перечисление.ГруппыВидыРасходов.НалогиИСборы;
			КонецЕсли;
			
			// Расчет суммы списания в текущем месяце
			Сумма = 0;
			
			Если Найти("ЕСН_ФБ,ФСС,ФФОМС,ТФОМС,ФСС_НС,ПФР_нак,ПФР_страх", СокрЛП(ТекНалог.Код)) > 0 Тогда
				Если ПустоеЗначение(ТекНалог) = 0 Тогда
					Сумма = СтатьяРасходовБудущихПериодов.ПолучитьАтрибут("Сумма" + СокрЛП(ТекНалог.Код));
				КонецЕсли;
			КонецЕсли;
			
			СуммаСписанияЗаМесяц = Мин(СуммаСписанияЗаМесяц(СтатьяРасходовБудущихПериодов, Сумма), ОстатокРасходовБудущихПериодов);
			Если СуммаСписанияЗаМесяц > 0 Тогда
				Операция.НоваяПроводка(); Операция.РазделительУчета = ЮрЛицо;
				Операция.НомерЖурнала = "НУ";
				Операция.СодержаниеПроводки = "РБП за " + ПериодСтр(ДатаНач, ДатаКон);
				Операция.Сумма = СуммаСписанияЗаМесяц;
				Операция.Кредит.Счет = Сч;
				Операция.Кредит.РасходыБудущихПериодов = СтатьяРасходовБудущихПериодов;
				Операция.Кредит.НалогиИОтчисления = ТекНалог;
				
				СчетИОбъектыАналитики = глПолучитьСчетРасходовДляЦелейНалоговогоУчета(ВидРасхода, ЭлементРасхода, Объект, ДатаДок);
				СчетРасходов = СчетИОбъектыАналитики.Получить("Счет");
				Если ПустоеЗначение(СчетРасходов) = 0 Тогда
					Операция.Дебет.Счет = СчетРасходов;
					Операция.Дебет.Субконто(1, СчетИОбъектыАналитики.Получить("Субконто1"));
					Операция.Дебет.Субконто(2, СчетИОбъектыАналитики.Получить("Субконто2"));
					Операция.Дебет.Субконто(3, СчетИОбъектыАналитики.Получить("Субконто3"));
				КонецЕсли;
			КонецЕсли;
			
			// Формирование печатной формы
			Если ФормироватьПечатнуюФорму = 1 Тогда
				ТаблицаРасшифровкаРегламентнойОперации.НоваяСтрока();
				ТаблицаРасшифровкаРегламентнойОперации.СтатьяРБП          = СтатьяРасходовБудущихПериодов;
				ТаблицаРасшифровкаРегламентнойОперации.Субконто2          = ТекНалог;
				ТаблицаРасшифровкаРегламентнойОперации.ВидРасхода         = ВидРасхода;
				ТаблицаРасшифровкаРегламентнойОперации.ЭлементРасхода     = ЭлементРасхода;
				ТаблицаРасшифровкаРегламентнойОперации.Объект             = Объект;
				ТаблицаРасшифровкаРегламентнойОперации.ДатаНачала         = СтатьяРасходовБудущихПериодов.ДатаНачалаСписания;
				ТаблицаРасшифровкаРегламентнойОперации.ДатаОкончания      = СтатьяРасходовБудущихПериодов.ДатаОкончанияСписания;
				ТаблицаРасшифровкаРегламентнойОперации.ОбщаяСуммаРасходов = Сумма;
				ТаблицаРасшифровкаРегламентнойОперации.ОстатокНаКонец     = ОстатокРасходовБудущихПериодов;
				ТаблицаРасшифровкаРегламентнойОперации.СуммаСписания      = СуммаСписанияЗаМесяц;
				
				Расшифровка = СоздатьОбъект("СписокЗначений");
				ОсновнаяРасшифровкаОСВ.Выгрузить(Расшифровка);
				Расшифровка.Установить("Счет", Сч);
				Расшифровка.Установить("ВидСубконто1", ВидыСубконто.РасходыБудущихПериодов);
				Расшифровка.Установить("Субконто1", СтатьяРасходовБудущихПериодов);
				Расшифровка.Установить("ОтборСубконто1", 1);
				Расшифровка.Установить("ВидСубконто2", ВидыСубконто.НалогиИОтчисления);
				Расшифровка.Установить("Субконто2", ТекНалог);
				Расшифровка.Установить("ОтборСубконто2", 1);
				ТаблицаРасшифровкаРегламентнойОперации.РасшифровкаОСВПоСчету = Расшифровка;
			КонецЕсли;
			
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры // ПроводкиПоРБП_4()

//******************************************************************************
// ЗаписатьВТаблицуРасходыНаОплатуТруда(БухИт, ТаблицаРасходовНаОплатуТруда)
//
// Параметры:
//  БухИт - бухгалтерские итоги.
//  ТаблицаРасходовНаОплатуТруда - таблица значений
//
// Описание:
//  В таблицу записываются расходы на оплату труда
//  застрахованного сотрудника, а так же все счета и аналитика на которые
//  были списаны эти расходы.
//
Процедура ЗаписатьВТаблицуРасходыНаОплатуТруда(БухИт, ТаблицаРасходовНаОплатуТруда)
	
	СчН07_04_1 = СчетПоКоду("Н07.04.1");
	
	// Не принимаемые расходы не учитываем
	Если БухИт.КорСубконто(1) = Перечисление.ГруппыВидыРасходов.НеПринимаемые Тогда
		Возврат;
	КонецЕсли;
	
	СуммаРасходов = БухИт.КорКО();
	Если СуммаРасходов > 0 Тогда
		ТаблицаРасходовНаОплатуТруда.НоваяСтрока();
		ТаблицаРасходовНаОплатуТруда.Сотрудник    = БухИт.Субконто(ВидыСубконто.Сотрудники);
		ТаблицаРасходовНаОплатуТруда.КорСчет      = БухИт.КорСчет;
		ТаблицаРасходовНаОплатуТруда.КорСубконто1 = БухИт.КорСубконто(1);
		ТаблицаРасходовНаОплатуТруда.КорСубконто2 = БухИт.КорСубконто(2);
		ТаблицаРасходовНаОплатуТруда.КорСубконто3 = БухИт.КорСубконто(3);
		ТаблицаРасходовНаОплатуТруда.СуммаРасходов= СуммаРасходов;
		
		// Если установлено, что расходы по договорам добровольного страхования
		// не могут относиться к прямым расходам, то все расходы по этим договорам
		// которые распределены на прямые расходы будут отнесены на налоговый
		// счет учета косвенных расходов.
		Если Константа.РасходыПоДСнеВключаютсяВПрямыеРасходы.Получить(ДатаДок) = Да Тогда
			Если (БухИт.КорСчет.Код = "Н01.05")
			или (БухИт.КорСчет.Код = "Н01.06") Тогда
				ТаблицаРасходовНаОплатуТруда.КорСчет      = СчН07_04_1;
				ТаблицаРасходовНаОплатуТруда.КорСубконто2 = ПолучитьПустоеЗначение(СчН07_04_1.ВидСубконто(2));
				ТаблицаРасходовНаОплатуТруда.КорСубконто3 = ПолучитьПустоеЗначение(СчН07_04_1.ВидСубконто(3));
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // ЗаписатьВТаблицуРасходыНаОплатуТруда()

//******************************************************************************
// СобратьРасходыНаОплатуТруда(БухИт, ТаблицаРасходовНаОплатуТруда)
//
// Параметры:
//  БухИт - бухгалтерские итоги.
//  ТаблицаРасходовНаОплатуТруда - таблица значений
//
// Описание:
//  Перебираются все корреспонденции (все счета и аналитика на которые
//  были списаны расходы на оплату труда застрахованного сотрудника).
//  Эти расходы, счет и аналитика записываются в таблицу.
//
Процедура СобратьРасходыНаОплатуТруда(БухИт, ТаблицаРасходовНаОплатуТруда)
	
	БухИт.ВыбратьКорСчета(, 2);
	Пока БухИт.ПолучитьКорСчет() = 1 Цикл
		
		КоррСчет = БухИт.КорСчет;
		КоличествоСубконто = КоррСчет.КоличествоСубконто();
		Если КоличествоСубконто = 0 Тогда
			ЗаписатьВТаблицуРасходыНаОплатуТруда(БухИт, ТаблицаРасходовНаОплатуТруда);
			
		Иначе
			БухИт.ВыбратьКорСубконто(1);
			Пока БухИт.ПолучитьКорСубконто(1) = 1 Цикл
				Если КоличествоСубконто = 1 Тогда
					ЗаписатьВТаблицуРасходыНаОплатуТруда(БухИт, ТаблицаРасходовНаОплатуТруда);
					
				Иначе
					БухИт.ВыбратьКорСубконто(2);
					Пока БухИт.ПолучитьКорСубконто(2) = 1 Цикл
						Если КоличествоСубконто = 2 Тогда
							ЗаписатьВТаблицуРасходыНаОплатуТруда(БухИт, ТаблицаРасходовНаОплатуТруда);
							
						Иначе
							БухИт.ВыбратьКорСубконто(3);
							Пока БухИт.ПолучитьКорСубконто(3) = 1 Цикл
								ЗаписатьВТаблицуРасходыНаОплатуТруда(БухИт, ТаблицаРасходовНаОплатуТруда);
								
							КонецЦикла;
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры // СобратьРасходыНаОплатуТруда()

//******************************************************************************
// СформироватьТаблицуРасходовНаОплатуТруда(ТаблицаЗастрахованныхСотрудников)
//
// Параметры:
//  Таблица значений - таблица сотрудников по которым заключены
//  договора добровольного страхования.
//
// Возвращаемое значение:
//  Таблица значений - таблица, в которой записано сумма расходов на
//   оплату труда застрахованных сотрудников в разрезе налоговых счетов,
//   на которые эти расходы отнесены
//
// Описание:
//  По застрахованным сотрудникам формируется таблица в которой записаны
//  расходы на их оплату труда и счета отнесения этих расходов.
//
Функция СформироватьТаблицуРасходовНаОплатуТруда(ТаблицаЗастрахованныхСотрудников)
	
	БухИт = СоздатьОбъект("БухгалтерскиеИтоги"); БухИт.ИспользоватьРазделительУчета(ЮрЛицо);
	ТаблицаРасходовНаОплатуТруда = СоздатьОбъект("ТаблицаЗначений");
	ТаблицаРасходовНаОплатуТруда.НоваяКолонка("Сотрудник", "Справочник.Сотрудники");
	ТаблицаРасходовНаОплатуТруда.НоваяКолонка("КорСчет", "Счет");
	ТаблицаРасходовНаОплатуТруда.НоваяКолонка("КорСубконто1");
	ТаблицаРасходовНаОплатуТруда.НоваяКолонка("КорСубконто2");
	ТаблицаРасходовНаОплатуТруда.НоваяКолонка("КорСубконто3");
	ТаблицаРасходовНаОплатуТруда.НоваяКолонка("СуммаРасходов", "Число");
	
	СписокЗастрахованных = СоздатьОбъект("СписокЗначений");
	ТаблицаЗастрахованныхСотрудников.Выгрузить(СписокЗастрахованных,,, "Сотрудник");
	
	Если СписокЗастрахованных.РазмерСписка() > 0 Тогда
		
		БухИт.ИспользоватьСубконто(ВидыСубконто.Сотрудники, СписокЗастрахованных, 2);
		БухИт.ИспользоватьКорСубконто();
		БухИт.ИспользоватьКорСубконто();
		БухИт.ИспользоватьКорСубконто();
		БухИт.ВключатьСубсчета(, -1);
		БухИт.ВыполнитьЗапрос(НачГода(ДатаНач), ДатаКон, "Н14",,, 2,,);
		БухИт.ВыбратьСубконто(ВидыСубконто.Сотрудники,, 2);
		Пока БухИт.ПолучитьСубконто(ВидыСубконто.Сотрудники) = 1 Цикл
			СобратьРасходыНаОплатуТруда(БухИт, ТаблицаРасходовНаОплатуТруда);
		КонецЦикла;
		
		// РБП
		БухИт.ИспользоватьСубконто(ВидыСубконто.Сотрудники, СписокЗастрахованных, 2);
		БухИт.ИспользоватьСубконто(ВидыСубконто.РасходыБудущихПериодов);
		БухИт.ИспользоватьКорСубконто();
		БухИт.ИспользоватьКорСубконто();
		БухИт.ИспользоватьКорСубконто();
		БухИт.ВключатьСубсчета(, -1);
		БухИт.ВыполнитьЗапрос(НачГода(ДатаНач), ДатаКон, "Н04.10",,, 2,,);
		БухИт.ВыбратьСубконто(ВидыСубконто.Сотрудники,, 2);
		Пока БухИт.ПолучитьСубконто(ВидыСубконто.Сотрудники) = 1 Цикл
			БухИт.ВыбратьСубконто(ВидыСубконто.РасходыБудущихПериодов,, 2);
			Пока БухИт.ПолучитьСубконто(ВидыСубконто.РасходыБудущихПериодов) = 1 Цикл
				СобратьРасходыНаОплатуТруда(БухИт, ТаблицаРасходовНаОплатуТруда);
			КонецЦикла;
		КонецЦикла;
		
		ТаблицаРасходовНаОплатуТруда.Свернуть("Сотрудник, КорСчет, КорСубконто1, КорСубконто2, КорСубконто3", "СуммаРасходов");
	КонецЕсли;
	
	ТаблицаРасходовНаОплатуТруда.НоваяКолонка("СуммаРасходовНаСтрахование", "Число");
	
	Возврат ТаблицаРасходовНаОплатуТруда;
	
КонецФункции // СформироватьТаблицуРасходовНаОплатуТруда()

//******************************************************************************
// СформироватьТаблицуЗастрахованныхСотрудников()
//
// Параметры:
//  Сч - счет учета расходов по добровольному страхованию,
//       относящихся к текущему налоговому периоду.
//
// Возвращаемое значение:
//  Таблица значений - таблица, в которой отражены расходы
//  по добровольному страхованию в разрезе сотрудников.
//
// Описание:
//  Формируется таблица застрахованных сотрудников с указанием
//  суммы расходов по страхованию.
//
Функция СформироватьТаблицуЗастрахованныхСотрудников(Сч)
	
	ТаблицаЗастрахованныхСотрудников = СоздатьОбъект("ТаблицаЗначений");
	ТаблицаЗастрахованныхСотрудников.НоваяКолонка("Сотрудник", "Справочник.Сотрудники");
	ТаблицаЗастрахованныхСотрудников.НоваяКолонка("СуммаПлатежа", "Число");
	
	БухИт = СоздатьОбъект("БухгалтерскиеИтоги"); БухИт.ИспользоватьРазделительУчета(ЮрЛицо);
	БухИт.ИспользоватьСубконто(ВидыСубконто.Сотрудники,,,);
	БухИт.ВыполнитьЗапрос(НачГода(ДатаНач), ДатаКон, Сч,,,,,);
	БухИт.ВыбратьСубконто(,, 1);
	Пока БухИт.ПолучитьСубконто() = 1 Цикл
		Если БухИт.ДО() > 0 Тогда
			ТаблицаЗастрахованныхСотрудников.НоваяСтрока();
			ТаблицаЗастрахованныхСотрудников.Сотрудник    = БухИт.Субконто();
			ТаблицаЗастрахованныхСотрудников.СуммаПлатежа = БухИт.ДО() ;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ТаблицаЗастрахованныхСотрудников;
	
КонецФункции // СформироватьТаблицуЗастрахованныхСотрудников()

//******************************************************************************
// ПолучитьСуммуРасходовНаОплатуТрудаСНачалаГода()
//
// Параметры:
//  Нет.
//
// Возвращаемое значение:
//  Число - сумма расходов на оплату труда,
//  которая принимается к налоговому учету.
//
// Описание:
//  Рассчитывается сумма расходов на оплату труда
//  исключая суммы расходов, которые не принимаются к налоговому учету.
//
Функция ПолучитьСуммуРасходовНаОплатуТрудаСНачалаГода(Сотрудник = "")
	
	БухИт = СоздатьОбъект("БухгалтерскиеИтоги"); БухИт.ИспользоватьРазделительУчета(ЮрЛицо);
	БухИт.ПериодМНГ(ДатаДок);
	
	Если ПустоеЗначение(Сотрудник) = 1 Тогда
		СуммаРасходовНаОплатуТруда = БухИт.КО("Н14") + БухИт.КО("Н04.10");
		
	Иначе
		СуммаРасходовНаОплатуТруда = БухИт.КО("Н14",,, Сотрудник) + БухИт.КО("Н04.10",,,, Сотрудник);
		БухИт.ИспользоватьСубконто(ВидыСубконто.Сотрудники, Сотрудник, 2);
	КонецЕсли;
	
	
	// Из общей суммы расходов необходимо исключить
	// расходы, не учитываемые в целях налогообложения.
	БухИт.ИспользоватьКорСубконто(ВидыСубконто.ГруппыВидыРасходов, Перечисление.ГруппыВидыРасходов.НеПринимаемые, 2);
	Если БухИт.ВыполнитьЗапрос(НачГода(ДатаКон), ДатаКон, "Н14, Н04.10", "Н07.04",, 2,,) = 1 Тогда
		СуммаРасходовНаОплатуТруда = СуммаРасходовНаОплатуТруда - БухИт.КорКО();    
	КонецЕсли;
	
	Возврат СуммаРасходовНаОплатуТруда;
	
КонецФункции // ПолучитьСуммуРасходовНаОплатуТрудаСНачалаГода()

//******************************************************************************
// РаспределитьРасходыПоВидамРасходовСНачалаГода(Сч, ТаблицаРасходовНаОплатуТруда, ФактическаяСуммаПлатежа, УчитываемаяСуммаПлатежа)
//
// Параметры:
//  Сч - счет учета расходов по добровольному страхованию,
//  	относящихся к текущему налоговому периоду.
//  ТаблицаРасходовНаОплатуТруда - таблица расходов на оплату
//		труда застрахованных сотрудников.
//  ФактическаяСуммаПлатежа - сумма расходов по всем договорам страхования,
//  	относящаяся к текущему налоговому периоду.
//  УчитываемаяСуммаПлатежа - сумма расходов по всем договорам страхования,
//		которая может быть включена в состав расходов согласно нормам
//  	описанным в пункте 16 статьи 255.
//
// Описание:
//  Сумма расходов по договорам добровольного страхования 
//  распределяется по видам расходов согласно тому, куда
//  отнесены расходы на оплату труда застрахованных сотрудников.
//
Процедура РаспределитьРасходыПоВидамРасходовСНачалаГода(Сч, ТаблицаРасходовНаОплатуТруда, ФактическаяСуммаПлатежа, УчитываемаяСуммаПлатежа)
	
	БухИт = СоздатьОбъект("БухгалтерскиеИтоги"); БухИт.ИспользоватьРазделительУчета(ЮрЛицо);
	БухИт.ПериодМНГ(ДатаКон);
	
	ОбщаяФактическаяСуммаПлатежа = 0;
	КоэффициентУчета = 0;
	
	Если ТаблицаРасходовНаОплатуТруда.КоличествоСтрок() = 0 Тогда // если нет расходов на оплату труда, то распределить автоматически невозможно
	Иначе
		
		КоэффициентУчета = УчитываемаяСуммаПлатежа / ФактическаяСуммаПлатежа;
		
		ПредыдущийСотрудник = ПолучитьПустоеЗначение("Справочник.Сотрудники");
		УчитываемаяСуммаПлатежаПоСотруднику         = 0;
		СуммаРасходовНаОплатуТрудаПоСотрудникуВсего = 0;
		
		ТаблицаРасходовНаОплатуТруда.ВыбратьСтроки();
		Пока ТаблицаРасходовНаОплатуТруда.ПолучитьСтроку() = 1 Цикл
			
			Сотрудник = ТаблицаРасходовНаОплатуТруда.Сотрудник;
			
			Если Сотрудник <> ПредыдущийСотрудник Тогда // начало в таблице расходов на оплату строк, относящихся к другому сотруднику
				ФактическаяСуммаПлатежаПоСотруднику = БухИт.ДО(Сч,,, Сотрудник);
				Если ФактическаяСуммаПлатежаПоСотруднику = 0 Тогда
					Продолжить;
				КонецЕсли;
				ПредыдущийСотрудник = Сотрудник;
				
				ОбщаяФактическаяСуммаПлатежа = ОбщаяФактическаяСуммаПлатежа + ФактическаяСуммаПлатежаПоСотруднику;
				УчитываемаяСуммаПлатежаПоСотруднику = ФактическаяСуммаПлатежаПоСотруднику * КоэффициентУчета;
				СуммаРасходовНаОплатуТрудаПоСотрудникуВсего = ПолучитьСуммуРасходовНаОплатуТрудаСНачалаГода(Сотрудник);
			КонецЕсли;
			
			Если СуммаРасходовНаОплатуТрудаПоСотрудникуВсего = 0 Тогда // по сотруднику нет расходов на оплату труда => невозможно распределить расходы
				Продолжить;
				
			Иначе
				СуммаРасходовНаСтрахование = Окр(ТаблицаРасходовНаОплатуТруда.СуммаРасходов* УчитываемаяСуммаПлатежаПоСотруднику / СуммаРасходовНаОплатуТрудаПоСотрудникуВсего, 2);
				Если СуммаРасходовНаСтрахование = 0 Тогда
					Продолжить;
				КонецЕсли;
			КонецЕсли;
			
			ТаблицаРасходовНаОплатуТруда.СуммаРасходовНаСтрахование = СуммаРасходовНаСтрахование;
		КонецЦикла;
	КонецЕсли;
	
	Если ОбщаяФактическаяСуммаПлатежа = ФактическаяСуммаПлатежа Тогда
		ОбщаяУчитываемаяСуммаПлатежа = УчитываемаяСуммаПлатежа;
		
	Иначе
		ОбщаяУчитываемаяСуммаПлатежа = Окр(ОбщаяФактическаяСуммаПлатежа*КоэффициентУчета, 2);
	КонецЕсли;
	
	Корректировка = ОбщаяУчитываемаяСуммаПлатежа - ТаблицаРасходовНаОплатуТруда.Итог("СуммаРасходовНаСтрахование");
	Если (Корректировка <> 0) и (ТаблицаРасходовНаОплатуТруда.КоличествоСтрок() > 0) Тогда
		ТаблицаРасходовНаОплатуТруда.Сортировать("- СуммаРасходовНаСтрахование");
		ТаблицаРасходовНаОплатуТруда.ПолучитьСтрокуПоНомеру(1);
		ТаблицаРасходовНаОплатуТруда.СуммаРасходовНаСтрахование = ТаблицаРасходовНаОплатуТруда.СуммаРасходовНаСтрахование + Корректировка;
	КонецЕсли;
	
КонецПроцедуры // РаспределитьРасходыПоВидамРасходовСНачалаГода()

//******************************************************************************
// ЗаписатьРанееУчтенныеРасходыВТаблицу(БухИт, ТаблицаРасходовНаОплатуТруда)
//
// Параметры:
//  БухИт - бухгалтерские итоги.
//  ТаблицаРасходовНаОплатуТруда - таблица значений
//
// Описание:
//  В таблицу со знаком минус записываются распределенные в
//  предыдущих месяцах расходы по договорам добровольного страхования.
//
Процедура ЗаписатьРанееУчтенныеРасходыВТаблицу(БухИт, ТаблицаРасходовНаОплатуТруда)
	
	СуммаРасходов = БухИт.КорКО();
	Если СуммаРасходов > 0 Тогда
		ТаблицаРасходовНаОплатуТруда.НоваяСтрока();
		ТаблицаРасходовНаОплатуТруда.Сотрудник    = БухИт.Субконто(ВидыСубконто.Сотрудники);
		ТаблицаРасходовНаОплатуТруда.КорСчет      = БухИт.КорСчет;
		ТаблицаРасходовНаОплатуТруда.КорСубконто1 = БухИт.КорСубконто(1);
		ТаблицаРасходовНаОплатуТруда.КорСубконто2 = БухИт.КорСубконто(2);
		ТаблицаРасходовНаОплатуТруда.КорСубконто3 = БухИт.КорСубконто(3);
		ТаблицаРасходовНаОплатуТруда.СуммаРасходовНаСтрахование= -СуммаРасходов;
	КонецЕсли;
	
КонецПроцедуры // ЗаписатьРанееУчтенныеРасходыВТаблицу()

//******************************************************************************
// УчетРанееРаспределенныхРасходов(Сч, ТаблицаРасходовНаОплатуТруда);
//
// Параметры:
//  Сч - счет учета расходов по добровольному страхованию,
//  	относящихся к текущему налоговому периоду.
//  ТаблицаРасходовНаОплатуТруда - таблица расходов на оплату
//		труда застрахованных сотрудников.
//
// Описание:
//  Рассчитываются суммы расходов по договорам добровольного страхования,
//  которые распределены по видам расходов в предыдущих месяцах налогового
//  периода. Эти распределенные сумму записывается со знаком минус в таблицу
//  расходов в разрезе счетов и аналитики на которую они были отнесены.
//
Процедура УчетРанееРаспределенныхРасходов(Сч, ТаблицаРасходовНаОплатуТруда);
	
	// Если документ за январь, то ранее
	// распределенных расходов по договорам ДС не было
	Если ДатаМесяц(ДатаДок) = 1 Тогда 
		Возврат;
	КонецЕсли;
	
	БухИт = СоздатьОбъект("БухгалтерскиеИтоги"); БухИт.ИспользоватьРазделительУчета(ЮрЛицо);
	БухИт.ИспользоватьСубконто(ВидыСубконто.Сотрудники);
	БухИт.ИспользоватьКорСубконто();
	БухИт.ИспользоватьКорСубконто();
	БухИт.ИспользоватьКорСубконто();
	БухИт.ВключатьСубсчета(, -1);
	БухИт.ВыполнитьЗапрос(НачГода(ДатаНач), ДатаНач-1, Сч,,, 2,,);
	БухИт.ВыбратьСубконто(ВидыСубконто.Сотрудники,, 2);
	Пока БухИт.ПолучитьСубконто(ВидыСубконто.Сотрудники) = 1 Цикл
		БухИт.ВыбратьКорСчета(, 2);
		Пока БухИт.ПолучитьКорСчет() = 1 Цикл
			
			КоррСчет = БухИт.КорСчет;
			КоличествоСубконто = КоррСчет.КоличествоСубконто();
			Если КоличествоСубконто = 0 Тогда
				ЗаписатьРанееУчтенныеРасходыВТаблицу(БухИт, ТаблицаРасходовНаОплатуТруда);
				
			Иначе
				БухИт.ВыбратьКорСубконто(1);
				Пока БухИт.ПолучитьКорСубконто(1) = 1 Цикл
					Если КоличествоСубконто = 1 Тогда
						ЗаписатьРанееУчтенныеРасходыВТаблицу(БухИт, ТаблицаРасходовНаОплатуТруда);
						
					Иначе
						БухИт.ВыбратьКорСубконто(2);
						Пока БухИт.ПолучитьКорСубконто(2) = 1 Цикл
							Если КоличествоСубконто = 2 Тогда
								ЗаписатьРанееУчтенныеРасходыВТаблицу(БухИт, ТаблицаРасходовНаОплатуТруда);
								
							Иначе
								БухИт.ВыбратьКорСубконто(3);
								Пока БухИт.ПолучитьКорСубконто(3) = 1 Цикл
									ЗаписатьРанееУчтенныеРасходыВТаблицу(БухИт, ТаблицаРасходовНаОплатуТруда);
									
								КонецЦикла;
							КонецЕсли;
						КонецЦикла;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	ТаблицаРасходовНаОплатуТруда.Свернуть("Сотрудник, КорСчет, КорСубконто1, КорСубконто2, КорСубконто3", "СуммаРасходов, СуммаРасходовНаСтрахование");
	
КонецПроцедуры // УчетРанееРаспределенныхРасходов()

//******************************************************************************
// ФормированиеПроводокПоРасходамДС(Сч, ТаблицаРасходовНаОплатуТруда)
//
// Параметры:
//  Сч - счет учета расходов по добровольному страхованию,
//  	относящихся к текущему налоговому периоду.
//  ТаблицаРасходовНаОплатуТруда - таблица расходов на оплату
//		труда застрахованных сотрудников.
//
// Описание:
//  Формирование проводок по распределению расходов.
//
Процедура ФормированиеПроводокПоРасходамДС(Сч, ТаблицаРасходовНаОплатуТруда)
	
	ТаблицаРасходовНаОплатуТруда.ВыбратьСтроки();
	Пока ТаблицаРасходовНаОплатуТруда.ПолучитьСтроку() = 1 Цикл
		СуммаРасходовНаСтрахование = Окр(ТаблицаРасходовНаОплатуТруда.СуммаРасходовНаСтрахование, 2);
		Если СуммаРасходовНаСтрахование = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Операция.НоваяПроводка(); Операция.РазделительУчета = ЮрЛицо;
		Операция.СодержаниеПроводки = "Страхование";
		Операция.НомерЖурнала = "НУ";
		Операция.Дебет.Счет = ТаблицаРасходовНаОплатуТруда.КорСчет;
		Операция.Дебет.Субконто(1, ТаблицаРасходовНаОплатуТруда.КорСубконто1);
		Операция.Дебет.Субконто(2, ТаблицаРасходовНаОплатуТруда.КорСубконто2);
		Операция.Дебет.Субконто(3, ТаблицаРасходовНаОплатуТруда.КорСубконто3);
		Операция.Кредит.Счет = Сч;
		Операция.Кредит.Сотрудники = ТаблицаРасходовНаОплатуТруда.Сотрудник;
		Операция.Сумма = СуммаРасходовНаСтрахование;    
	КонецЦикла;
	
КонецПроцедуры // ФормированиеПроводокПоРасходамДДС()

//******************************************************************************
// ПечатнаяФормаПоСтрахованию(ТаблицаЗастрахованныхСотрудников, ТаблицаРасходовНаОплатуТруда, НаимененованиеОперции)
//
// Описание:
//  Запись в таблицу, используемую при формировании печатной формы информации
//  о застрахованных, фактических расходах по договорам добровольного страхования
//  и суммы расходов на оплату труда застрахованных.
//
Процедура ПечатнаяФормаПоСтрахованию(ТаблицаЗастрахованныхСотрудников, ТаблицаРасходовНаОплатуТруда, НаимененованиеОперции)
	
	// Формирование печатной формы
	Если ФормироватьПечатнуюФорму = 1 Тогда
		
		ТаблицаРасшифровкаРегламентнойОперации.СуммаРасходовНаСтрахование = ТаблицаРасходовНаОплатуТруда.Итог("СуммаРасходовНаСтрахование");
		
		ТаблицаРасшифровкаРегламентнойОперации.РасшифровкаПоСотрудникам = РасшифровкаДДСпоСотрудникам(НаимененованиеОперции);
		РасшифровкаПоСотрудникам = ТаблицаРасшифровкаРегламентнойОперации.РасшифровкаПоСотрудникам.Получить("Таблица данных");
		
		ТаблицаЗастрахованныхСотрудников.ВыбратьСтроки();
		Пока ТаблицаЗастрахованныхСотрудников.ПолучитьСтроку() = 1 Цикл
			Сотрудник = ТаблицаЗастрахованныхСотрудников.Сотрудник;
			РасшифровкаПоСотрудникам.НоваяСтрока();
			РасшифровкаПоСотрудникам.Сотрудник = Сотрудник;
			РасшифровкаПоСотрудникам.СуммаПлатежа = ТаблицаЗастрахованныхСотрудников.СуммаПлатежа;
			
			ТаблицаРасходовНаОплатуТруда.ВыбратьСтроки();
			Пока ТаблицаРасходовНаОплатуТруда.ПолучитьСтроку() = 1 Цикл
				Если ТаблицаРасходовНаОплатуТруда.Сотрудник = Сотрудник Тогда
					РасшифровкаПоСотрудникам.СуммаРасходовНаОплатуТруда = РасшифровкаПоСотрудникам.СуммаРасходовНаОплатуТруда + ТаблицаРасходовНаОплатуТруда.СуммаРасходов;
					РасшифровкаПоСотрудникам.СуммаРасходовНаСтрахование = РасшифровкаПоСотрудникам.СуммаРасходовНаСтрахование + ТаблицаРасходовНаОплатуТруда.СуммаРасходовНаСтрахование;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры // ПечатнаяФормаПоСтрахованию()

//******************************************************************************
// ФормированиеПечатнойФормы()
//
// Параметры:
//  Нет.
//
// Вызывается из формул элементов диалога:
//  Нет.
//
// Описание:
//  Здесь описывается процедура.
//
Процедура ФормированиеПечатнойФормы(ТаблицаРасходовНаОплатуТруда, Сч, НаименованиеОперации)
	
	// Формирование печатной формы
	Если ФормироватьПечатнуюФорму = 1 Тогда
		
		Если ТаблицаРасшифровкаРегламентнойОперации.ФактическаяСуммаПлатежа = 0 Тогда
			ТаблицаРасшифровкаРегламентнойОперации.УдалитьСтроку();
			
		Иначе
			
			РасшифровкаПоСотрудникам = ТаблицаРасшифровкаРегламентнойОперации.РасшифровкаПоСотрудникам.Получить("Таблица данных");
			
			// В таблицу расшифровки запишем отклонение суммы расходов, которые отражены
			// в учете, от суммы которая должна быть отражена согласно нормированию.
			ТаблицаРасходовНаОплатуТруда.ВыбратьСтроки();
			Пока ТаблицаРасходовНаОплатуТруда.ПолучитьСтроку() = 1 Цикл
				Сотрудник = ТаблицаРасходовНаОплатуТруда.Сотрудник;
				Если глПолучитьСтрокуПоЗначению(РасшифровкаПоСотрудникам, Сотрудник, "Сотрудник")  = 1 Тогда
					РасшифровкаПоСотрудникам.СуммаКорректировки = РасшифровкаПоСотрудникам.СуммаКорректировки + Окр(ТаблицаРасходовНаОплатуТруда.СуммаРасходовНаСтрахование, 2);
				КонецЕсли;
			КонецЦикла;
			
			// В таблицу расшифровки запишем недостающие данные.
			РасшифровкаПоСотрудникам.ВыбратьСтроки();
			Пока РасшифровкаПоСотрудникам.ПолучитьСтроку() = 1 Цикл
				
				РасшифровкаПоСотрудникам.РасходыУчтенныеРанее = РасшифровкаПоСотрудникам.СуммаРасходовНаСтрахование - РасшифровкаПоСотрудникам.СуммаКорректировки;
				
				Расшифровка = СоздатьОбъект("СписокЗначений");
				ОсновнаяРасшифровкаОСВ.Выгрузить(Расшифровка);
				Расшифровка.Установить("Дата1", НачГода(ДатаДок));
				Расшифровка.Установить("Счет", Сч);
				Расшифровка.Установить("ВидСубконто1", ВидыСубконто.Сотрудники);
				Расшифровка.Установить("Субконто1", РасшифровкаПоСотрудникам.Сотрудник);
				Расшифровка.Установить("ОтборСубконто1", 1);
				РасшифровкаПоСотрудникам.РасшифровкаОСВПоСчету = Расшифровка;
			КонецЦикла;
		КонецЕсли;
		
		// Вывод строки в отчет по выполненным регламентным операциям
		НаименованиеРегламентнойОперации = НаименованиеОперации +" (" + Сч + ")";
		Таб.ВывестиСекцию("РегламентнаяОперацияНУ");
		
		ВыводВОтчетИнформацииОВыполненииОперации("УчетРасходовПоДС", // идентификатор отображаемой таблицы
		ТаблицаРасшифровкаРегламентнойОперации, // таблица с данными, для заполнения печатной формы
		НаименованиеОперации, // дополнительные данные
		НаименованиеОперации +" (" + Сч + ")", //строка, выводимая в отчет-список выполненных операций, в случае если операция выполнена
		"По счету " + Сч + " """ +  Сч.ПолнНаименование + """ расходов нет"); //строка, выводимая в отчет-список выполненных операций, в случае если операция не выполнена
	КонецЕсли;
	
КонецПроцедуры // ФормированиеПечатнойФормы()

//******************************************************************************
// РасчетСуммыУчитываемыхРасходовДС()
//
// Описание:
//  Рассчитывается сумма расходов по добровольному страхованию,
//  которые согласно подпункту 16 статья 255 НК могут быть
//  приняты к налоговому учету.
//
Процедура РасчетСуммыУчитываемыхРасходовДС(Сч, Норматив, ФактическаяСуммаПлатежа, УчитываемаяСуммаПлатежа)
	
	// Если в текущем налоговом периоде нет расходы по добровольному
	// страхованию, то выходим из процедуры.
	БухИт = СоздатьОбъект("БухгалтерскиеИтоги"); БухИт.ИспользоватьРазделительУчета(ЮрЛицо);
	БухИт.ПериодМНГ(ДатаКон);
	ФактическаяСуммаПлатежа = БухИт.ДО(Сч);
	Если ФактическаяСуммаПлатежа <> 0 Тогда
		
		// Расчет максимальной суммы платежа, по договорам добр. страх.,
		// которая может быть принята к налоговому учету.
		СуммаРасходовНаОплатуТрудаВсего = ПолучитьСуммуРасходовНаОплатуТрудаСНачалаГода();
		Если Норматив = 0 Тогда // все расходы можно принять к налоговому учету
			УчитываемаяСуммаПлатежа = ФактическаяСуммаПлатежа;
			
		Иначе
			// Для расчета суммы платежа, включаемой в состав расходов
			// необходимо рассчитать сумму расходов на оплату труда.
			СуммаПлатежаВПределахУстановленныхНорм = Норматив * СуммаРасходовНаОплатуТрудаВсего;
			УчитываемаяСуммаПлатежа = Мин(ФактическаяСуммаПлатежа, СуммаПлатежаВПределахУстановленныхНорм);
		КонецЕсли;
	КонецЕсли;
	
	// Формирование печатной формы
	Если ФормироватьПечатнуюФорму = 1 Тогда
		
		ИнициализироватьРасшифровкуУчетаДДС();
		
		ТаблицаРасшифровкаРегламентнойОперации.НоваяСтрока();
		ТаблицаРасшифровкаРегламентнойОперации.СуммаРасходовНаОплатуТруда = СуммаРасходовНаОплатуТрудаВсего;
		ТаблицаРасшифровкаРегламентнойОперации.ФактическаяСуммаПлатежа    = ФактическаяСуммаПлатежа;
		ТаблицаРасшифровкаРегламентнойОперации.Норматив                   = ?(Норматив <> 0, 
		"Не превышает "+ Норматив*100 + "% от суммы расходов на оплату труда",
		"Не превышает десяти тысяч рублей в год на одного застрахованного работника");
		ТаблицаРасшифровкаРегламентнойОперации.РасходыВПределахНорм       = ?(Норматив = 0,ФактическаяСуммаПлатежа, СуммаПлатежаВПределахУстановленныхНорм);
	КонецЕсли;
	
КонецПроцедуры // РасчетСуммыУчитываемыхРасходовДС()

//******************************************************************************
// ПроводкиПоСтрахованию(Сч, Норматив)
//
// Параметры:
//  Сч - счет учета расходов по добровольному страхованию,
//  	относящихся к текущему налоговому периоду.
// 	Норматив - число - норматив, по которому рассчитывается сумма расходов,
// 		которая может быть принята к налоговому учету согласно пункту 16 статьи 255 НК.
//
Процедура ПроводкиПоСтрахованию(КодСчета, Норматив, НаименованиеОперации)
	
	Сч = СчетПоКоду(КодСчета);
	
	Состояние(НаименованиеОперации +" (" + КодСчета + ")");
	
	Если Операция.КоличествоПроводок() > 0 Тогда
		Операция.ЗаписатьПроводки();
	КонецЕсли;
	
	//Расчет суммы расходов по добровольному страхованию,
	//которые согласно подпункту 16 статья 255 НК могут быть
	//приняты к налоговому учету.
	ФактическаяСуммаПлатежа = 0;
	УчитываемаяСуммаПлатежа = 0;
	РасчетСуммыУчитываемыхРасходовДС(Сч, Норматив, ФактическаяСуммаПлатежа, УчитываемаяСуммаПлатежа);
	
	// Сформируем таблицу застрахованных сотрудников и запишем в нее тех сотрудник,
	// по которым был заключен договор добр. страх.
	ТаблицаЗастрахованныхСотрудников = СформироватьТаблицуЗастрахованныхСотрудников(Сч);
	
	// По застрахованным сотрудникам сформируем таблицу в которую запишем
	// расходы на их оплату труда и счета отнесения этих расходов.
	ТаблицаРасходовНаОплатуТруда = СформироватьТаблицуРасходовНаОплатуТруда(ТаблицаЗастрахованныхСотрудников);
	
	// Распределим расходы по добровольному страхованию по счетам учета расходов.
	РаспределитьРасходыПоВидамРасходовСНачалаГода(Сч, ТаблицаРасходовНаОплатуТруда, ФактическаяСуммаПлатежа, УчитываемаяСуммаПлатежа);
	
	// Запись данных в таблицу, используемую при формировании печатной формы
	ПечатнаяФормаПоСтрахованию(ТаблицаЗастрахованныхСотрудников, ТаблицаРасходовНаОплатуТруда, НаименованиеОперации);
	
	// Из распределенных расходов вычтем те расходы, которые уже отражены
	// по налоговым счетам в предыдущих месяцах текущего налогового периода.
	УчетРанееРаспределенныхРасходов(Сч, ТаблицаРасходовНаОплатуТруда);
	
	ФормированиеПроводокПоРасходамДС(Сч, ТаблицаРасходовНаОплатуТруда);
	
	// Формирование печатной формы
	ФормированиеПечатнойФормы(ТаблицаРасходовНаОплатуТруда, Сч, НаименованиеОперации);
	
КонецПроцедуры // ПроводкиПоСтрахованию() 

//****************************************************************************** 
// ЗаполнениеТаблицыПроводок()
//
// Параметры:
// ТаблицаОперацийПоОбъекту - Таблица значений - таблица операций по текущему объекту.
// ТаблицаПроводок - Таблица значений - таблица хранящая список проводок, которые будут сформированы
// СуммаСписанияЗаПериод - Число - рассчитанная стоимость списанных МПЗ.
// Объект - Справочник - объект учета.
//
// Вызывается из формул элементов диалога:
//  Нет.
//
// Описание:
//  Распределяется по проводкам сумма расходов.
//
Процедура ЗаполнениеТаблицыПроводок(ТаблицаОперацийПоОбъекту, ТаблицаПроводок, СуммаСписанияЗаПериод, Объект = "")
	
	ТаблицаОперацийПоОбъекту.ВыбратьСтроки();
	Пока ТаблицаОперацийПоОбъекту.ПолучитьСтроку() = 1 Цикл
		ТаблицаОперацийЗаДень = ТаблицаОперацийПоОбъекту.ТаблицаОперацийЗаДень;
		ТаблицаОперацийЗаДень.ВыбратьСтроки();
		Пока ТаблицаОперацийЗаДень.ПолучитьСтроку() = 1 Цикл
			КодОперации = ТаблицаОперацийЗаДень.КодОперации;
			Если КодОперации = 2 Тогда // выпуск продукции
				ТаблицаПроводок.НоваяСтрока();
				ТаблицаПроводок.Счет = СчетПоКоду("Н02.03");
				ТаблицаПроводок.Субконто1 = Объект;
				ТаблицаПроводок.Сумма = ТаблицаОперацийЗаДень.Сумма;
				ТаблицаПроводок.СодержаниеПроводки = "Распредел. расходов";
				
			ИначеЕсли КодОперации = 3 Тогда // отгрузка товаров без перехода права собственности
				ТаблицаПроводок.НоваяСтрока();
				ТаблицаПроводок.Счет = СчетПоКоду("Н02.04.1");
				Если Объект.Вид() = "Номенклатура" Тогда
					Если Объект.ТипНоменклатуры = Перечисление.ТипыНоменклатуры.Продукция Тогда
						ТаблицаПроводок.Счет = СчетПоКоду("Н02.04.2");
					КонецЕсли;
				КонецЕсли;
				
				ТаблицаПроводок.Субконто1 = Объект;
				ТаблицаПроводок.Сумма = ТаблицаОперацийЗаДень.Сумма;
				ТаблицаПроводок.СодержаниеПроводки = "Отгрузка";
				
			ИначеЕсли (КодОперации = 5) или (КодОперации = 6) Тогда // списание
				Документ  = ТаблицаОперацийЗаДень.Документ;
				НомСтроки = ТаблицаОперацийЗаДень.СтрокаДокумента;
				Сумма     = -ТаблицаОперацийЗаДень.Сумма;
				СуммаСписанияЗаПериод = СуммаСписанияЗаПериод + Сумма;
				ТаблицаПроводок.НоваяСтрока();
				
				Если Документ.Вид() = "ОперацииВыбытияИмущества" Тогда
					Документ.ПолучитьСтрокуПоНомеру(НомСтроки);
					РаспределениеПоСчетам2(Документ.Объект, Документ.УсловиеВыбытия, Документ.ВидДохода, ТаблицаПроводок);
					
				ИначеЕсли Документ.Вид() = "СписаниеМатериаловТоваровПродукции" Тогда
					Документ.ПолучитьСтрокуПоНомеру(НомСтроки);
					ЭлементРасхода = ?(Документ.ВидРасхода = Перечисление.ВидыРасходов.ПрямыеРасходы, Перечисление.ГруппыВидыРасходов.МатериальныеРасходы, Документ.ЭлементРасхода);
					СчетИАналитикаДляОтнесенияРасходов = РаспределениеПоСчетам1(Документ.Объект, Документ.ВидРасхода, ЭлементРасхода);
					ТаблицаПроводок.Заполнить(СчетИАналитикаДляОтнесенияРасходов, ТаблицаПроводок.КоличествоСтрок());
				КонецЕсли;
				ТаблицаПроводок.Сумма = Сумма;
				ТаблицаПроводок.СодержаниеПроводки = "Стоимость МПЗ";
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры // ЗаполнениеТаблицыПроводок()

//******************************************************************************
// ПолучитьБазуРаспределения()
//
// Параметры:
//  ТаблицаОбъектов - Таблица значений -  таблица содержащая информацию об объектах(МПЗ).
//  ТаблицаВидовНоменклатуры - ТаблицаЗначений - содержит информацию сгруппированную по видам номенклатуры 
//                             необходимую для расчета стоимости выпущенной продукции.
//
// Возвращаемое значение:
//  Таблица значений - база распределения прямых расходов (Н01.06).
//
// Вызывается из формул элементов диалога:
//  Нет.
//
// Описание:
//  Формирует базу распределения прямых расходов.
//
Функция ПолучитьБазуРаспределения(ТаблицаОбъектов, ТаблицаВидовНоменклатуры)
	
	ТаблицаБазыРаспределения = СоздатьОбъект("ТаблицаЗначений");
	ТаблицаБазыРаспределения.НоваяКолонка("ВидНоменклатуры");
	ТаблицаБазыРаспределения.НоваяКолонка("БазаРаспределения", "Число");                          
	
	БазаРаспределенияПрямыхРасходов = Константа.БазаРаспределенияПрямыхРасходов.Получить(ДатаКон);	                                                                                                       
	
	Если БазаРаспределенияПрямыхРасходов = Перечисление.БазаРаспределенияПрямыхРасходов.СуммаПрямыхЗатрат Тогда
		
		// Прямые расходы  - это остатки по счету Н01.05 и еще не рассчитанные прямые
		// расходы по документам "Списание материалов, товаров, продукции".
		БухИтН01_05 = СоздатьОбъект("БухгалтерскиеИтоги"); БухИтН01_05.ИспользоватьРазделительУчета(ЮрЛицо);
		БухИтН01_05.ИспользоватьСубконто(СубконтоВидыПродукцииИУслуг,,,);
		БухИтН01_05.ВыполнитьЗапрос(ДатаНач, ДатаКон, "Н01.05",,,,,);
		БухИтН01_05.ВыбратьСубконто(СубконтоВидыПродукцииИУслуг);
		Пока БухИтН01_05.ПолучитьСубконто(СубконтоВидыПродукцииИУслуг) = 1 Цикл
			Если (БухИтН01_05.Субконто(СубконтоВидыПродукцииИУслуг).ТипНоменклатуры = Перечисление.ТипыНоменклатуры.Товар)
			или (БухИтН01_05.Субконто(СубконтоВидыПродукцииИУслуг).ТипНоменклатуры = Перечисление.ТипыНоменклатуры.ПосредническаяУслуга) Тогда
				Продолжить;
			КонецЕсли;
			
			СуммаПрямыхЗатрат = БухИтН01_05.ДО();
			
			Если СуммаПрямыхЗатрат > 0 Тогда
				ТаблицаБазыРаспределения.НоваяСтрока();
				ТаблицаБазыРаспределения.ВидНоменклатуры = БухИтН01_05.Субконто(СубконтоВидыПродукцииИУслуг);
				ТаблицаБазыРаспределения.БазаРаспределения = СуммаПрямыхЗатрат;
			КонецЕсли;
		КонецЦикла;
		
		Запрос = СоздатьОбъект("Запрос");
		ТекстЗапроса = 
		"//{{ЗАПРОС(ПрямыеРасходы)
		|Период с ДатаНач по ДатаКон;
		|ВидРасхода = Документ.СписаниеМатериаловТоваровПродукции.ВидРасхода;
		|Количество = Документ.СписаниеМатериаловТоваровПродукции.Количество;
		|МПЗ = Документ.СписаниеМатериаловТоваровПродукции.МПЗ;
		|Объект = Документ.СписаниеМатериаловТоваровПродукции.Объект;
		|Группировка МПЗ;
		|Группировка Документ;
		|Группировка СтрокаДокумента;
		|Условие(ВидРасхода = Перечисление.ВидыРасходов.ПрямыеРасходы);
		|Условие(ПустоеЗначение(Объект) = 0);
		|"//}}ЗАПРОС
		;
		
		Запрос.Выполнить(ТекстЗапроса);
		
		Пока Запрос.Группировка("МПЗ") = 1 Цикл      
			МПЗ = Запрос.МПЗ;
			Пока Запрос.Группировка("Документ") = 1 Цикл
				Документ = Запрос.Документ;
				ДатаОперации = Документ.ДатаДок;           
				Пока Запрос.Группировка("СтрокаДокумента") = 1 Цикл
					Сумма = глРассчитатьСтоимостьОбъекта(ТаблицаОбъектов,, МПЗ,  Документ, Запрос.СтрокаДокумента, ДатаНач, ДатаОперации, 0);
					Если Сумма <> 0 Тогда
						ТаблицаБазыРаспределения.НоваяСтрока();
						ТаблицаБазыРаспределения.ВидНоменклатуры = Запрос.Объект;
						ТаблицаБазыРаспределения.БазаРаспределения = Сумма;	
					КонецЕсли;
				КонецЦикла;
			КонецЦикла;
		КонецЦикла;
		
	ИначеЕсли БазаРаспределенияПрямыхРасходов = Перечисление.БазаРаспределенияПрямыхРасходов.Выручка Тогда
		ЗапросВыручка = СоздатьОбъект("Запрос");
		ТекстЗапроса = 
		"//{{ЗАПРОС(ВыручкаОтРеализацииПродукции)
		|Период с ДатаНач по ДатаКон;
		|Номенклатура = Документ.ОперацииВыбытияИмущества.Объект;
		|Сумма = Документ.ОперацииВыбытияИмущества.Сумма;
		|ВидДохода = Документ.ОперацииВыбытияИмущества.ВидДохода;
		|Функция Выручка = Сумма(Сумма);
		|Группировка Номенклатура без упорядочивания;                                             
		|Условие((ВидДохода = Перечисление.ВидыДоходов.РеализацияПродукции)
		|    или (ВидДохода = Перечисление.ВидыДоходов.РеализацияПродукцииРанееОтгруженной)
		|    или (ВидДохода = Перечисление.ВидыДоходов.РеализацияПродукцииОбслуживающихПроизводств));
		|"//}}ЗАПРОС
		;
		ЗапросВыручка.Выполнить(ТекстЗапроса);
		
		Пока ЗапросВыручка.Группировка(1) = 1 Цикл            
			Номенклатура = ЗапросВыручка.Номенклатура;
			ТаблицаБазыРаспределения.НоваяСтрока();
			ТаблицаБазыРаспределения.ВидНоменклатуры = Номенклатура.ВидНоменклатуры;
			ТаблицаБазыРаспределения.БазаРаспределения = ЗапросВыручка.Выручка;	
		КонецЦикла;
		
	ИначеЕсли БазаРаспределенияПрямыхРасходов = Перечисление.БазаРаспределенияПрямыхРасходов.ПлановаяСебестоимость Тогда
		
		// Из запроса по документам получим данные по выполнению работ и услуг,
		// из бух. запроса данные по выпуску продукции.
		ЗапросПлановаяСебестоимость = СоздатьОбъект("Запрос");
		ТекстЗапроса = 
		"//{{ЗАПРОС(ПлановаяСебестоимость)
		|Период с ДатаНач по ДатаКон;
		|Номенклатура = Документ.ОперацииВыбытияИмущества.Объект;
		|Количество = Документ.ОперацииВыбытияИмущества.Количество;
		|Функция ОбщееКоличество = Сумма(Количество);
		|Функция НеУказаноКолчество = Счётчик() когда (Количество = 0);
		|Группировка Номенклатура без упорядочивания;                                                           
		|Условие(Номенклатура.Вид() = ""Номенклатура"");
		|Условие((Номенклатура.ТипНоменклатуры = Перечисление.ТипыНоменклатуры.Услуга)
		|    или (Номенклатура.ТипНоменклатуры = Перечисление.ТипыНоменклатуры.Работа));
		|"//}}ЗАПРОС
		;
		ЗапросПлановаяСебестоимость.Выполнить(ТекстЗапроса);
		
		Пока ЗапросПлановаяСебестоимость.Группировка(1) = 1 Цикл             
			Номенклатура = ЗапросПлановаяСебестоимость.Номенклатура;
			ПлановаяСебестоимость = Номенклатура.ПлановаяСебестоимость.Получить(ДатаКон);
			Если ПлановаяСебестоимость = 0 Тогда
				Ошибка = "Для работы(услуги): " + Номенклатура + " не указана плановая себестоимость!";
				Возврат Ошибка;
			КонецЕсли;
			
			// В запрос включен счетчик "НеУказаноКолчество", который накапливает 
			// количество записей в документах, в которых не указанно количество, что интерпретируем как единицу.
			СуммаПлановойСебестоимости = (ЗапросПлановаяСебестоимость.ОбщееКоличество + ЗапросПлановаяСебестоимость.НеУказаноКолчество) * ПлановаяСебестоимость;
			Если СуммаПлановойСебестоимости <> 0 Тогда
				ТаблицаБазыРаспределения.НоваяСтрока();
				ТаблицаБазыРаспределения.ВидНоменклатуры = Номенклатура.ВидНоменклатуры;
				ТаблицаБазыРаспределения.БазаРаспределения = СуммаПлановойСебестоимости;	
			КонецЕсли;
		КонецЦикла;
		
		БухИт43 = СоздатьОбъект("БухгалтерскиеИтоги"); БухИт43.ИспользоватьРазделительУчета(ЮрЛицо);
		БухИт43.ИспользоватьСубконто(ВидыСубконто.Номенклатура);
		БухИт43.ВыполнитьЗапрос(ДатаНач, ДатаКон, "43",,, 3,, "К");
		БухИт43.ВыбратьСубконто(ВидыСубконто.Номенклатура,, 1);
		Пока БухИт43.ПолучитьСубконто(ВидыСубконто.Номенклатура) = 1 Цикл 
			Номенклатура = БухИт43.Субконто(ВидыСубконто.Номенклатура);
			
			ПлановаяСебестоимость = Номенклатура.ПлановаяСебестоимость.Получить(ДатаКон);
			Если ПлановаяСебестоимость = 0 Тогда
				Ошибка = "Для продукции: " + Номенклатура + " не указана плановая себестоимость!";
				Возврат Ошибка;
			КонецЕсли;
			
			Количество = БухИт43.ДО("К");
			Если БухИт43.ПолучитьКорСчет(, "43") = 1 Тогда // вычтем внутреннее перемещение по счету 43
				Количество = Количество - БухИт43.КорДО("К");
			КонецЕсли;
			СуммаПлановойСебестоимости = Количество * ПлановаяСебестоимость;
			Если СуммаПлановойСебестоимости <> 0 Тогда
				ТаблицаБазыРаспределения.НоваяСтрока();
				ТаблицаБазыРаспределения.ВидНоменклатуры = Номенклатура.ВидНоменклатуры;
				ТаблицаБазыРаспределения.БазаРаспределения = СуммаПлановойСебестоимости;	
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	ТаблицаБазыРаспределения.Свернуть("ВидНоменклатуры", "БазаРаспределения");
	
	Возврат ТаблицаБазыРаспределения;
	
КонецФункции // ПолучитьБазуРаспределения()
//******************************************************************************
// СформироватьТаблицуРаспределенияСчетаН01_06()
//
// Параметры:
//  РасходыПоСчетуН01_06 - Таблица значений - прямые расходы подлежащие распределению по видам номенклатуры.
//  ТаблицаБазыРаспределения - Таблица значений - база распределения прямых расходов
//
// Возвращаемое значение:
//  Таблица значений - распределенные по видам номенклатуры прямые расходы подлежащие распределению.
//
// Вызывается из формул элементов диалога:
//  Нет.
//
// Описание:
//  Распределяет по видам номенклатуры прямые расходы подлежащие распределению.
//
Функция СформироватьТаблицуРаспределенияСчетаН01_06(РасходыПоСчетуН01_06, ТаблицаБазыРаспределения)
	
	// таблица для хранения распределенных прямых расходов
	ТаблицаРаспределенияСчетН01_06 = СоздатьОбъект("ТаблицаЗначений");
	ТаблицаРаспределенияСчетН01_06.НоваяКолонка("ВидНоменклатуры");
	ТаблицаРаспределенияСчетН01_06.НоваяКолонка("ГруппаВидРасхода");
	ТаблицаРаспределенияСчетН01_06.НоваяКолонка("Сумма", "Число");
	
	БазаРаспределения = ТаблицаБазыРаспределения.Итог("БазаРаспределения");
	Если БазаРаспределения > 0 Тогда // если есть база  
		РасходыПоСчетуН01_06.ВыбратьСтроки();
		Пока РасходыПоСчетуН01_06.ПолучитьСтроку() =  1 Цикл
			СуммаСписания = РасходыПоСчетуН01_06.Сумма;
			Если СуммаСписания = 0 Тогда
				Продолжить;
			КонецЕсли;
			ГруппаВидРасхода = РасходыПоСчетуН01_06.ГруппаВидРасхода;
			Списано = 0;
			ТаблицаБазыРаспределения.ВыбратьСтроки();
			Пока ТаблицаБазыРаспределения.ПолучитьСтроку() = 1 Цикл
				Списать = СуммаСписания * ТаблицаБазыРаспределения.БазаРаспределения / БазаРаспределения;
				Списано = Списано + Списать;
				Если (ТаблицаБазыРаспределения.НомерСтроки = ТаблицаБазыРаспределения.КоличествоСтрок())
				и (Списано <> СуммаСписания) Тогда
					Списать = Списать + (СуммаСписания - Списано);
				КонецЕсли;                                     
				Если Списать > 0 Тогда
					ТаблицаРаспределенияСчетН01_06.НоваяСтрока();
					ТаблицаРаспределенияСчетН01_06.ВидНоменклатуры  = ТаблицаБазыРаспределения.ВидНоменклатуры;
					ТаблицаРаспределенияСчетН01_06.ГруппаВидРасхода = ГруппаВидРасхода;
					ТаблицаРаспределенияСчетН01_06.Сумма = Списать;    
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;			
	Иначе
		Ошибка = "База распределения равна нулю. Счет Н01.06 автоматически распределить невозможно.";
		Возврат Ошибка;
	КонецЕсли;	
	
	Возврат ТаблицаРаспределенияСчетН01_06;
	
КонецФункции // СформироватьТаблицуРаспределенияСчетаН01_06()

//******************************************************************************
// ЗаполнитьТаблицуПрямымиРасходами()
//
// Параметры:
//  ТаблицаВидовНоменклатуры - ТаблицаЗначений - содержит информацию сгруппированную по видам номенклатуры 
//                             необходимую для расчета стоимости выпущенной продукции.
//  ТаблицаРаспределенияСчетаН01_06 - ТаблицаЗначений - распределенные прямые расходы подлежащие распределению.
//
// Вызывается из формул элементов диалога:
//  Нет.
//
// Описание:
//  Группируются все прямые расходы по видам номенклатуры.
//
Процедура ЗаполнитьТаблицуПрямымиРасходами(ТаблицаВидовНоменклатуры, ТаблицаРаспределенияСчетаН01_06)
	
	// Если есть распределенные прямые расходы, то выгрузим их в общую таблицу прямых расходов.
	Если ПустоеЗначение(ТаблицаРаспределенияСчетаН01_06) = 0 Тогда
		ТаблицаРаспределенияСчетаН01_06.Выгрузить(ТаблицаПрямыхРасходов);    
	КонецЕсли;
	
	// Добавим в общую таблицу расходы, отраженные по счету Н01.05.
	БухИт = СоздатьОбъект("БухгалтерскиеИтоги"); БухИт.ИспользоватьРазделительУчета(ЮрЛицо);
	БухИт.ИспользоватьСубконто(СубконтоВидыПродукцииИУслуг);
	БухИт.ИспользоватьСубконто(ВидыСубконто.ГруппыВидыРасходов);
	БухИт.ВыполнитьЗапрос(, ДатаКон, "Н01.05",,,,,);
	БухИт.ВыбратьСубконто(СубконтоВидыПродукцииИУслуг);
	Пока БухИт.ПолучитьСубконто(СубконтоВидыПродукцииИУслуг) = 1 Цикл
		БухИт.ВыбратьСубконто(ВидыСубконто.ГруппыВидыРасходов);
		Пока БухИт.ПолучитьСубконто(ВидыСубконто.ГруппыВидыРасходов) = 1 Цикл
			Сумма = БухИт.СКД();
			Если Сумма = 0 Тогда
				Продолжить;
			КонецЕсли;
			ТаблицаПрямыхРасходов.НоваяСтрока();
			ТаблицаПрямыхРасходов.ВидНоменклатуры = БухИт.Субконто(СубконтоВидыПродукцииИУслуг);
			ТаблицаПрямыхРасходов.ГруппаВидРасхода = БухИт.Субконто(ВидыСубконто.ГруппыВидыРасходов);
			ТаблицаПрямыхРасходов.Сумма = Сумма;
		КонецЦикла;
	КонецЦикла;
	
	// Учтем незавершенное производство.
	ЗапросНЗП = СоздатьОбъект("Запрос");
	ТекстЗапроса = 
	"//{{ЗАПРОС(НЗП)
	|Период с ДатаНач по ДатаКон;
	|ОбрабатыватьДокументы все;
	|Обрабатывать НеПомеченныеНаУдаление;
	|ВидНоменклатуры = Документ.ПрямыеРасходыНезавершенногоПроизводства.ВидНоменклатуры;
	|ГруппаРасхода = Документ.ПрямыеРасходыНезавершенногоПроизводства.ВидРасхода;
	|Сумма = Документ.ПрямыеРасходыНезавершенногоПроизводства.Сумма;
	|Функция СуммаПрямыхРасходовНЗП = Сумма(Сумма);
	|Группировка ВидНоменклатуры без упорядочивания;
	|Группировка ГруппаРасхода без упорядочивания;
	|"//}}ЗАПРОС
	;                                                                                            
	ЗапросНЗП.Выполнить(ТекстЗапроса);
	Пока ЗапросНЗП.Группировка("ВидНоменклатуры") = 1 Цикл
		Пока ЗапросНЗП.Группировка("ГруппаРасхода") = 1 Цикл
			ТаблицаПрямыхРасходов.НоваяСтрока();
			ТаблицаПрямыхРасходов.ВидНоменклатуры = ЗапросНЗП.ВидНоменклатуры;
			ТаблицаПрямыхРасходов.ГруппаВидРасхода = ЗапросНЗП.ГруппаРасхода;
			ТаблицаПрямыхРасходов.Сумма = -ЗапросНЗП.СуммаПрямыхРасходовНЗП;
		КонецЦикла;    
	КонецЦикла;
	
	// Выгрузим сформированные прямые расходы, которое участвуют в формировании стоимости выпущенной продукции 
	ТаблицаПрямыхРасходов.Выгрузить(ТаблицаВидовНоменклатуры,,, "ВидНоменклатуры, Сумма");
	ТаблицаВидовНоменклатуры.Свернуть("ВидНоменклатуры", "Сумма");
	
	// Выделим не рассчитанные прямые расходы, которые будут  при расчете стоимости продукции
	ТаблицаВидовНоменклатуры.НоваяКолонка("НеРассчитанныеПрямыеРасходы", "ТаблицаЗначений");
	Запрос = СоздатьОбъект("Запрос");
	ТекстЗапроса = 
	"//{{ЗАПРОС(СчетН01_05)
	|Период с ДатаНач по ДатаКон;
	|ВидРасхода = Документ.СписаниеМатериаловТоваровПродукции.ВидРасхода;
	|Колво = Документ.СписаниеМатериаловТоваровПродукции.Количество;
	|МПЗ = Документ.СписаниеМатериаловТоваровПродукции.МПЗ;
	|Объект = Документ.СписаниеМатериаловТоваровПродукции.Объект;
	|Функция Количество = Сумма(Колво);
	|Группировка Объект;
	|Группировка МПЗ;
	|Группировка Документ;
	|Группировка СтрокаДокумента;
	|Условие(ВидРасхода = Перечисление.ВидыРасходов.ПрямыеРасходы);
	|Условие(ПустоеЗначение(Объект) = 0);
	|"//}}ЗАПРОС
	;                                                                    
	
	Если Запрос.Выполнить(ТекстЗапроса) = 1 Тогда
		Пока Запрос.Группировка("Объект") = 1 Цикл
			ВидНоменклатуры = Запрос.Объект;
			
			Если глПолучитьСтрокуПоЗначению(ТаблицаВидовНоменклатуры, ВидНоменклатуры, "ВидНоменклатуры") = 0  Тогда
				ТаблицаВидовНоменклатуры.НоваяСтрока();
				ТаблицаВидовНоменклатуры.ВидНоменклатуры = ВидНоменклатуры;
			КонецЕсли;
			
			НеРассчитанныеПрямыеРасходы = СоздатьОбъект("ТаблицаЗначений");
			НеРассчитанныеПрямыеРасходы.НоваяКолонка("Объект");
			НеРассчитанныеПрямыеРасходы.НоваяКолонка("ДатаОперации", "Дата");
			НеРассчитанныеПрямыеРасходы.НоваяКолонка("Документ", "Документ");
			НеРассчитанныеПрямыеРасходы.НоваяКолонка("СтрокаДокумента", "Число", 3, 0);
			НеРассчитанныеПрямыеРасходы.НоваяКолонка("Сумма", "Число", 15, 2);			
			Пока Запрос.Группировка("МПЗ") = 1 Цикл
				МПЗ = Запрос.МПЗ;
				Пока Запрос.Группировка("Документ") = 1 Цикл
					Документ = Запрос.Документ;
					ДатаОперации = Документ.ДатаДок;
					Пока Запрос.Группировка("СтрокаДокумента") = 1 Цикл
						НеРассчитанныеПрямыеРасходы.НоваяСтрока();
						НеРассчитанныеПрямыеРасходы.Объект = МПЗ;
						НеРассчитанныеПрямыеРасходы.ДатаОперации = ДатаОперации;
						НеРассчитанныеПрямыеРасходы.Документ = Документ;
						НеРассчитанныеПрямыеРасходы.СтрокаДокумента = Запрос.СтрокаДокумента;
					КонецЦикла;
				КонецЦикла;
			КонецЦикла;                                  
			ТаблицаВидовНоменклатуры.НеРассчитанныеПрямыеРасходы = НеРассчитанныеПрямыеРасходы; 
		КонецЦикла;
	КонецЕсли;
	
	ТаблицаВидовНоменклатуры.НоваяКолонка("СтатусРасчета", "Число", 1, 0);
	
КонецПроцедуры // ЗаполнитьТаблицуПрямымиРасходами()

//******************************************************************************
// ЗаполнитьТаблицуВыпускомПродукции()
//
// Параметры:
//  ТаблицаВидовНоменклатуры - ТаблицаЗначений - содержит информацию сгруппированную по видам номенклатуры 
//                             необходимую для расчета стоимости выпущенной продукции.
//
// Вызывается из формул элементов диалога:
//  Нет.
//
// Описание:
//  Информация о выпущенной продукции группируется по видам номенклатуры.
//
Процедура ЗаполнитьТаблицуВыпускомПродукции(ТаблицаВидовНоменклатуры)
	
	ТаблицаВыпускаПродукции = СоздатьОбъект("ТаблицаЗначений");
	ТаблицаВыпускаПродукции.НоваяКолонка("Номенклатура", "Справочник.Номенклатура");
	ТаблицаВыпускаПродукции.НоваяКолонка("ВидНоменклатуры", "Справочник.ВидыНоменклатуры");
	ТаблицаВыпускаПродукции.НоваяКолонка("БазаРаспределения", "Число");
	ТаблицаВыпускаПродукции.НоваяКолонка("Количество", "Число");
	
	БухПродукция = СоздатьОбъект("БухгалтерскиеИтоги"); БухПродукция.ИспользоватьРазделительУчета(ЮрЛицо);
	БухПродукция.ИспользоватьСубконто(ВидыСубконто.Номенклатура);
	БухПродукция.ВыполнитьЗапрос(ДатаНач, ДатаКон, "43",,, 3,, "К");
	БухПродукция.ВыбратьСубконто(ВидыСубконто.Номенклатура);
	Пока БухПродукция.ПолучитьСубконто(ВидыСубконто.Номенклатура) = 1 Цикл
		Номенклатура = БухПродукция.Субконто(ВидыСубконто.Номенклатура);
		
		// если на счете 43, по какой-то причине, не продукция собственного производства
		Если Номенклатура.ТипНоменклатуры <> Перечисление.ТипыНоменклатуры.Продукция Тогда
			Продолжить;          
		КонецЕсли;
		
		ПлановаяСебестоимость = Номенклатура.ПлановаяСебестоимость.Получить(ДатаКон);
		Если ПлановаяСебестоимость = 0 Тогда
			ТекстСообщения = "Для продукции: " + Номенклатура + " не указана плановая себестоимость!";
			глСообщениеПроведения(ТекстСообщения, ТекущийДокумент(), -1);
		КонецЕсли;
		
		Количество = БухПродукция.ДО("К");
		Если БухПродукция.ПолучитьКорСчет(, "43") = 1 Тогда // вычтем внутреннее перемещение по счету 43
			Количество = Количество - БухПродукция.КорДО("К");
		КонецЕсли;
		Если Количество <> 0 Тогда
			СуммаПлановойСебестоимости = Количество * ПлановаяСебестоимость;
			ТаблицаВыпускаПродукции.НоваяСтрока();                                 
			ТаблицаВыпускаПродукции.Номенклатура = Номенклатура;
			ТаблицаВыпускаПродукции.ВидНоменклатуры = Номенклатура.ВидНоменклатуры;
			ТаблицаВыпускаПродукции.БазаРаспределения = СуммаПлановойСебестоимости;
			ТаблицаВыпускаПродукции.Количество = Количество;
		КонецЕсли;
		
	КонецЦикла;
	ТаблицаВыпускаПродукции.Сортировать("ВидНоменклатуры");
	
	// Выгружается сформированная таблица выпущенной продукции с сортировкой ее по видам номенклатуры
	ТаблицаВидовНоменклатуры.НоваяКолонка("ВыпускПродукции", "ТаблицаЗначений");
	ВидНоменклатуры = ПолучитьПустоеЗначение();
	ТаблицаВыпускаПродукции.ВыбратьСтроки();
	Пока ТаблицаВыпускаПродукции.ПолучитьСтроку() = 1 Цикл
		ВидНоменклатурыВТаблице = ТаблицаВыпускаПродукции.ВидНоменклатуры;
		Если ВидНоменклатурыВТаблице <> ВидНоменклатуры Тогда
			ВидНоменклатуры = ВидНоменклатурыВТаблице;
			Если глПолучитьСтрокуПоЗначению(ТаблицаВидовНоменклатуры, ВидНоменклатуры, "ВидНоменклатуры") = 0  Тогда
				ТаблицаВидовНоменклатуры.НоваяСтрока();
				ТаблицаВидовНоменклатуры.ВидНоменклатуры = ВидНоменклатуры;
			КонецЕсли;
			ВыпускПродукции = СоздатьОбъект("ТаблицаЗначений");
			ВыпускПродукции.НоваяКолонка("Номенклатура", "Справочник.Номенклатура");
			ВыпускПродукции.НоваяКолонка("БазаРаспределения", "Число");
			ВыпускПродукции.НоваяКолонка("Количество", "Число");
			ТаблицаВидовНоменклатуры.ВыпускПродукции = ВыпускПродукции;
		КонецЕсли;
		ВыпускПродукции.НоваяСтрока();
		ВыпускПродукции.Номенклатура = ТаблицаВыпускаПродукции.Номенклатура;
		ВыпускПродукции.БазаРаспределения = ТаблицаВыпускаПродукции.БазаРаспределения;
		ВыпускПродукции.Количество = ТаблицаВыпускаПродукции.Количество;
	КонецЦикла;
	
КонецПроцедуры // ЗаполнитьТаблицуВыпускомПродукции()

//******************************************************************************
// ФормированиеРасходовПоСчетуН01_06()
//
// Параметры:
//  ТаблицаОбъектов - Таблица значений -  таблица содержащая информацию об объектах(МПЗ).
//
// Возвращаемое значение:
//  Таблица значений - таблица прямых расходов подлежащих распределению.
//
// Вызывается из формул элементов диалога:
//  Нет.
//
// Описание:
//  Формирование прямых расходов подлежащих распределению.
//
Функция ФормированиеРасходовПоСчетуН01_06(ТаблицаОбъектов)
	
	СчН01_06 = СчетПоКоду("Н01.06");
	
	// Таблица прямых расходов подлежащих распределению.
	РасходыПоСчетуН01_06 = СоздатьОбъект("ТаблицаЗначений");
	РасходыПоСчетуН01_06.НоваяКолонка("ГруппаВидРасхода");
	РасходыПоСчетуН01_06.НоваяКолонка("Сумма", "Число", 15, 2);
	
	// Заполнение таблицы прямых расходов по данным счета Н01.06
	БухИт = СоздатьОбъект("БухгалтерскиеИтоги"); БухИт.ИспользоватьРазделительУчета(ЮрЛицо);
	БухИт.ИспользоватьСубконто(ВидыСубконто.ГруппыВидыРасходов);
	БухИт.ВыполнитьЗапрос(ДатаНач, ДатаКон, СчН01_06,,,,, "С");
	БухИт.ВыбратьСубконто(ВидыСубконто.ГруппыВидыРасходов);
	Пока БухИт.ПолучитьСубконто(ВидыСубконто.ГруппыВидыРасходов) = 1 Цикл
		СуммаСписания = БухИт.ДО() - БухИт.КО();
		Если СуммаСписания = 0 Тогда
			Продолжить;
		КонецЕсли;
		РасходыПоСчетуН01_06.НоваяСтрока();
		РасходыПоСчетуН01_06.ГруппаВидРасхода = БухИт.Субконто();
		РасходыПоСчетуН01_06.Сумма = СуммаСписания;
	КонецЦикла;
	
	// Заполнение таблицы прямых расходов не рассчитанным данным еще не отнесенным на счет Н01.06.
	Запрос = СоздатьОбъект("Запрос");
	ТекстЗапроса = 
	"//{{ЗАПРОС(СчетН01_06)
	|Период с ДатаНач по ДатаКон;
	|ВидРасхода = Документ.СписаниеМатериаловТоваровПродукции.ВидРасхода;
	|МПЗ = Документ.СписаниеМатериаловТоваровПродукции.МПЗ;
	|Объект = Документ.СписаниеМатериаловТоваровПродукции.Объект;
	|Группировка МПЗ;
	|Группировка Документ;
	|Группировка СтрокаДокумента;
	|Условие(ВидРасхода = Перечисление.ВидыРасходов.ПрямыеРасходы);
	|Условие(ПустоеЗначение(Объект) = 1);
	|"//}}ЗАПРОС
	;                              
	Запрос.Выполнить(ТекстЗапроса);
	
	Пока Запрос.Группировка("МПЗ") = 1 Цикл
		МПЗ = Запрос.МПЗ;
		Пока Запрос.Группировка("Документ") = 1 Цикл
			Документ = Запрос.Документ;
			ДатаОперации = Документ.ДатаДок;
			Пока Запрос.Группировка("СтрокаДокумента") = 1 Цикл
				Сумма = глРассчитатьСтоимостьОбъекта(ТаблицаОбъектов,, МПЗ,  Документ, Запрос.СтрокаДокумента, ДатаНач, ДатаОперации, 0);
				Если ТипЗначенияСтр(Сумма) = "Строка" Тогда
					Возврат Сумма;
				КонецЕсли;
				Если Сумма <> 0 Тогда
					РасходыПоСчетуН01_06.НоваяСтрока();
					РасходыПоСчетуН01_06.ГруппаВидРасхода = Перечисление.ГруппыВидыРасходов.МатериальныеРасходы;
					РасходыПоСчетуН01_06.Сумма = Сумма;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	
	РасходыПоСчетуН01_06.Свернуть("ГруппаВидРасхода", "Сумма");
	
	Возврат РасходыПоСчетуН01_06;
	
КонецФункции // ФормированиеРасходовПоСчетуН01_06()

//******************************************************************************
// РассчитатьСтоимостьВыпущеннойПродукции()
//
// Параметры:
//  ТаблицаОбъектов - Таблица значений -  таблица содержащая информацию об объектах(МПЗ).
//  ТаблицаВидовНоменклатуры - ТаблицаЗначений - содержит информацию сгруппированную по видам номенклатуры 
//                             необходимую для расчета стоимости выпущенной продукции.
//  Ошибка - Строка - отражает ошибки, которые возникли во время выполнения данной процедуры.
//
// Вызывается из формул элементов диалога:
//  Нет.
//
// Описание:
//  Подготовка данных для расчета стоимости выпущенной продукции.
//
Процедура РассчитатьСтоимостьВыпущеннойПродукции(ТаблицаОбъектов, ТаблицаВидовНоменклатуры, Ошибка)
	
	РасходыПоСчетуН01_06 = ФормированиеРасходовПоСчетуН01_06(ТаблицаОбъектов); // расчет прямых расходов по счету Н01.06
	Если ТипЗначенияСтр(РасходыПоСчетуН01_06) = "Строка" Тогда // возникла ошибка при расчете расходов по счету Н01.06
		Ошибка = РасходыПоСчетуН01_06;
		Возврат;
	КонецЕсли;
	Если РасходыПоСчетуН01_06.Итог("Сумма") > 0 Тогда // если есть прямые расходы, подлежащие распределению
		ТаблицаБазыРаспределения = ПолучитьБазуРаспределения(ТаблицаОбъектов, ТаблицаВидовНоменклатуры); // формирование базы распределения прямых расходов (Н01.06)
		Если ТипЗначенияСтр(ТаблицаБазыРаспределения) = "Строка" Тогда // возникла ошибка при расчете базы распределения для счета Н01.06
			Ошибка = ТаблицаБазыРаспределения;
			Возврат;
		КонецЕсли;                                                                                                                      
		
		// Распределение счета Н01.06 (прямых расходов) по видам номенклатуры
		ТаблицаРаспределенияСчетаН01_06 = СформироватьТаблицуРаспределенияСчетаН01_06(РасходыПоСчетуН01_06, ТаблицаБазыРаспределения);
		Если ТипЗначенияСтр(ТаблицаРаспределенияСчетаН01_06) = "Строка" Тогда // возникла ошибка
			Ошибка = ТаблицаРаспределенияСчетаН01_06;
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ЗаполнитьТаблицуПрямымиРасходами(ТаблицаВидовНоменклатуры, ТаблицаРаспределенияСчетаН01_06); // группируются все прямые расходы по видам номенклатуры
	ЗаполнитьТаблицуВыпускомПродукции(ТаблицаВидовНоменклатуры); // информация о выпущенной продукции группируется по видам номенклатуры
	
КонецПроцедуры // РассчитатьСтоимостьВыпущеннойПродукции()

//******************************************************************************
// ЗакрытиеСчета(Счет, БухИт, НомерВыбираемогоСубконто = 0)
//
// Параметры:
//  Счет - счет - счет, который необходимо закрыть;
//  БухИт- бухгалтерские итоги;
//  НомерВыбираемогоСубконто - число - номер субконто, который по которому уже разворачиваются итоги.
//
// Вызывается из формул элементов диалога:
//  Нет.
//
// Описание:
//  Выполняется закрытие счета налогового учета.
//
Процедура ЗакрытиеСчета(Счет, БухИт, знач НомерВыбираемогоСубконто = 0)
	
	Если Счет.КоличествоСубконто() = НомерВыбираемогоСубконто Тогда
		
		Если (БухИт.СКД("С") > 0) или (БухИт.СКД("К") > 0) Тогда
			Операция.НоваяПроводка(); Операция.РазделительУчета = ЮрЛицо;
			Операция.НомерЖурнала = "НУ";
			Операция.СодержаниеПроводки = "Закрытие счета по окончанию налогового периода";
			Операция.Кредит.Счет = Счет;
			Операция.Кредит.Субконто(1, БухИт.Субконто(1));
			Операция.Кредит.Субконто(2, БухИт.Субконто(2));
			Операция.Кредит.Субконто(3, БухИт.Субконто(3));
			Операция.Сумма = БухИт.СКД("С");
			Операция.Количество = БухИт.СКД("К");
			
			
		ИначеЕсли (БухИт.СКК("С") > 0) или (БухИт.СКК("К") > 0) Тогда
			Операция.НоваяПроводка(); Операция.РазделительУчета = ЮрЛицо;
			Операция.НомерЖурнала = "НУ";
			Операция.СодержаниеПроводки = "Закрытие счета по окончанию налогового периода";
			Операция.Дебет.Счет = Счет;
			Операция.Дебет.Субконто(1, БухИт.Субконто(1));
			Операция.Дебет.Субконто(2, БухИт.Субконто(2));
			Операция.Дебет.Субконто(3, БухИт.Субконто(3));
			Операция.Сумма = БухИт.СКК("С");
			Операция.Количество = БухИт.СКК("К");
		КонецЕсли;
		
	Иначе
		НомерВыбираемогоСубконто = НомерВыбираемогоСубконто + 1;
		
		// Итоги не разворачиваются по оборотным субконто.
		Если Счет.ТолькоОбороты(НомерВыбираемогоСубконто) = 0 Тогда // не оборотное субконто
			БухИт.ВыбратьСубконто(НомерВыбираемогоСубконто);
			Пока БухИт.ПолучитьСубконто(НомерВыбираемогоСубконто) = 1 Цикл
				ЗакрытиеСчета(Счет, БухИт, НомерВыбираемогоСубконто)
			КонецЦикла;
			
		Иначе
			ЗакрытиеСчета(Счет, БухИт, НомерВыбираемогоСубконто)
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ЗакрытиеСчета()

//******************************************************************************
// НайтиВТаблицеРезНУ(ТабРез, Объект, КорОбъект)
//
// Параметры:
//  ТабРез - таблица "перекрестных" списаний вида "Номенклатура" - "Номенклатура" для товаров и материалов
//			 или "передельных" списаний вида "ВидПродукции" - "Полуфабрикат"
//  Объект - объект номенклатуры (товар, материал или вид продукции), на который происходит списание
//  КорОбъект - объект номенклатуры (товар, материал, полуфабрикат или продукция), который списывается
//
// Возвращаемое значение:
//  Номер строки таблицы - если найдено перекрестное списание
//  0 - если такое перекрестное списание еще не рассчитывалось
//
// Вызывается из формул элементов диалога:
//  Нет.
//
// Описание:
//  Выполняет поиск в таблице значений, содержащей результаты расчета перекрестных (передельных) списаний
//  вида "Номенклатура" - "Номенклатура" ("Вид продукции" - "Полуфабрикат") , 
//  строки заданной параметрами "Объект" и "КорОбъект"
//
Функция НайтиВТаблицеРезНУ(ТабРез, Объект, КорОбъект)
	
	Рез = 0;
	
	ТабРез.ВыбратьСтроки();
	Пока (ТабРез.ПолучитьСтроку() = 1)
	и (Рез = 0) Цикл
		Если (ТабРез.Объект = Объект)
		и (ТабРез.КорОбъект = КорОбъект) Тогда
			Рез = ТабРез.НомерСтроки;
			
		КонецЕсли;    
	КонецЦикла;
	
	Возврат Рез;
	
КонецФункции // НайтиВТаблицеРезНУ()

//******************************************************************************
// ПолучитьСписокКорректируемыхСубконтоНУ(Счет)
//
// Параметры:
//  Счет - бухгалтерский счет
//
// Возвращаемое значение:
//  Список значений субконто для счета указанного в параметре, сформированный по
//  особым правилам
//
// Вызывается из формул элементов диалога:
//  Нет.
//
// Описание:
//  Анализирует переданный в параметре счет и составляет для него список значений
//  субконто, которые должны быть учтены при формировании корректирующих проводок
//  при расчете себестоимости
//
Функция ПолучитьСписокКорректируемыхСубконтоНУ(Счет)
	
	Список = СоздатьОбъект("СписокЗначений");
	
	Если ПустоеЗначение(Счет) = 0  Тогда
		КоличествоСубконто = Счет.КоличествоСубконто();
		Для НомерСубконто = 1 По КоличествоСубконто Цикл
			Если (ПустоеЗначение(Счет.ВидСубконто(НомерСубконто)) = 0)
			и (Счет.УчетПоСумме(НомерСубконто) = 1)
			и (Счет.УчетПоКоличеству(НомерСубконто) = 1) Тогда        
				Список.ДобавитьЗначение(НомерСубконто);
			КонецЕсли;	
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат Список;
	
КонецФункции // ПолучитьСписокКорректируемыхСубконтоНУ()

//******************************************************************************
// СформироватьКорректирующиеПроводкиПоДвижениюНоменклатурывНУ(ТаблицаПроводок, ТабРез, НеВозврат)
//
// Параметры:
//  ТаблицаПроводок - таблица с рассчитанными значениями корректировок 
//  ТабРез - таблица результатов расчета сумм "перекрестных" списаний (Номенклатура <- Номенклатура) 
//  НеВозврат - (-1) - если выполняется корректировка возврата на склад товаров отгруженных
//          без перехода права собственности.
//
// Вызывается из формул элементов диалога:
//  Нет.
//
// Описание:
//  Формирует корректирующие проводки для отражения всех списаний товаров и материалов
//  за месяц по средневзвешенной стоимости. Факты дальнейшего использования одних номенклатурных
//  единиц в формировании себестоимости других номенклатурных единиц ("перекрестные списания")
//  фиксируются в специальной таблице ТабРез, для дальнейшего использования в расчете
//
Процедура СформироватьКорректирующиеПроводкиПоДвижениюНоменклатурывНУ(БухИт, ТаблицаПроводок, ТабРез, НеВозврат)
	
	СписаноКоличество = БухИт.КорКО("К");
	СписаноСумма = БухИт.КорКО("С");
	Если (СписаноКоличество = 0) и (СписаноСумма = 0) и (НеВозврат = 1) Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаПроводок.ВыбратьСтроки();
	Пока ТаблицаПроводок.ПолучитьСтроку() = 1 Цикл
		СуммаКорректировки = ТаблицаПроводок.СуммаРасчет - ТаблицаПроводок.СуммаФакт;
		Если СуммаКорректировки <> 0 Тогда
			// Нужно корректировать
			Операция.НоваяПроводка(); Операция.РазделительУчета = ЮрЛицо;
			Операция.НомерЖурнала = "ФР";
			Операция.СодержаниеПроводки = "Корректировка сумм списания товаров и материалов";
			Операция.Дебет.Счет = ТаблицаПроводок.СчетД;
			Операция.Дебет.Субконто(1, ТаблицаПроводок.СубконтоД1);
			Операция.Дебет.Субконто(2, ТаблицаПроводок.СубконтоД2);
			Операция.Дебет.Субконто(3, ТаблицаПроводок.СубконтоД3);
			Операция.Кредит.Счет = ТаблицаПроводок.СчетК;
			Операция.Кредит.Субконто(1, ТаблицаПроводок.СубконтоК1);
			Операция.Кредит.Субконто(2, ТаблицаПроводок.СубконтоК2);
			Операция.Кредит.Субконто(3, ТаблицаПроводок.СубконтоК3);
			Операция.Сумма = СуммаКорректировки;
		КонецЕсли;
		
		// Формирование печатной формы
		Если ФормироватьПечатнуюФорму = 1 Тогда
			Если БухИт.Счет.ПринадлежитГруппе(СчетПоКоду("Н02.04")) = 1 Тогда
				Если НеВозврат = 1 Тогда 
					ТаблицаРасшифровкаРегламентнойОперации.ФактическиСписаноСумма      = ТаблицаРасшифровкаРегламентнойОперации.ФактическиСписаноСумма + ТаблицаПроводок.СуммаФакт;
					ТаблицаРасшифровкаРегламентнойОперации.ФактическиСписаноКоличество = ТаблицаРасшифровкаРегламентнойОперации.ФактическиСписаноКоличество + ТаблицаПроводок.Количество;
					ТаблицаРасшифровкаРегламентнойОперации.РасчетнаяСуммаСписания      = ТаблицаРасшифровкаРегламентнойОперации.РасчетнаяСуммаСписания + ТаблицаПроводок.СуммаРасчет;
					ТаблицаРасшифровкаРегламентнойОперации.СуммаКорректировки          = ТаблицаРасшифровкаРегламентнойОперации.СуммаКорректировки + СуммаКорректировки;
					
				Иначе
					ТаблицаРасшифровкаРегламентнойОперации.РасчетнаяСуммаВозврата    = ТаблицаРасшифровкаРегламентнойОперации.РасчетнаяСуммаВозврата - ТаблицаПроводок.СуммаРасчет;
					ТаблицаРасшифровкаРегламентнойОперации.СуммаКорректировкиВозврата= ТаблицаРасшифровкаРегламентнойОперации.СуммаКорректировкиВозврата - СуммаКорректировки;
				КонецЕсли;
				
			Иначе
				ТаблицаРасшифровкаРегламентнойОперации.ФактическиСписаноСумма      = ТаблицаРасшифровкаРегламентнойОперации.ФактическиСписаноСумма + ТаблицаПроводок.СуммаФакт;
				ТаблицаРасшифровкаРегламентнойОперации.ФактическиСписаноКоличество = ТаблицаРасшифровкаРегламентнойОперации.ФактическиСписаноКоличество + ТаблицаПроводок.Количество;
				ТаблицаРасшифровкаРегламентнойОперации.РасчетнаяСуммаСписания      = ТаблицаРасшифровкаРегламентнойОперации.РасчетнаяСуммаСписания + ТаблицаПроводок.СуммаРасчет;
				ТаблицаРасшифровкаРегламентнойОперации.СуммаКорректировки          = ТаблицаРасшифровкаРегламентнойОперации.СуммаКорректировки + СуммаКорректировки;
				
				ТаблицаКорректировкиСписания = ТаблицаРасшифровкаРегламентнойОперации.РасшифровкаСуммаКорректировки.Получить("Таблица данных");
				ТаблицаКорректировкиСписания.НоваяСтрока();
				ТаблицаКорректировкиСписания.Счет = ТаблицаПроводок.СчетД;
				ТаблицаКорректировкиСписания.Субконто1 = ТаблицаПроводок.СубконтоД1;
				ТаблицаКорректировкиСписания.Субконто2 = ТаблицаПроводок.СубконтоД2;
				ТаблицаКорректировкиСписания.Субконто3 = ТаблицаПроводок.СубконтоД3;
				ТаблицаКорректировкиСписания.ФактическиСписаноСумма = ТаблицаПроводок.СуммаФакт;
				ТаблицаКорректировкиСписания.ФактическиСписаноКоличество = ТаблицаПроводок.Количество;
				ТаблицаКорректировкиСписания.СредневзвешеннаяСтоимость = ТаблицаРасшифровкаРегламентнойОперации.СредневзвешеннаяСтоимость;
				ТаблицаКорректировкиСписания.СуммаСписания = ТаблицаПроводок.СуммаРасчет;
				ТаблицаКорректировкиСписания.СуммаКорректировки = СуммаКорректировки;
				
				// формирование расшифровки
				Расшифровка = СоздатьОбъект("СписокЗначений");
				ОсновнаяРасшифровкаОПП.Выгрузить(Расшифровка);
				
				Расшифровка.Установить("ДтКт", 2);
				
				Расшифровка.Установить("Счет", ТаблицаПроводок.СчетК);
				Расшифровка.Установить("ВидСубконто1", ТаблицаПроводок.СчетК.ВидСубконто(1));
				Расшифровка.Установить("Субконто1",    ТаблицаПроводок.СубконтоК1);
				
				Расшифровка.Установить("КорСчет", ТаблицаПроводок.СчетД);
				Расшифровка.Установить("КорВидСубконто1", ТаблицаПроводок.СчетД.ВидСубконто(1));
				Расшифровка.Установить("КорСубконто1",    ТаблицаПроводок.СубконтоД1);
				Расшифровка.Установить("КорВидСубконто2", ТаблицаПроводок.СчетД.ВидСубконто(2));
				Расшифровка.Установить("КорСубконто2",    ТаблицаПроводок.СубконтоД2);
				Расшифровка.Установить("КорВидСубконто3", ТаблицаПроводок.СчетД.ВидСубконто(3));
				Расшифровка.Установить("КорСубконто3",    ТаблицаПроводок.СубконтоД3);
				ТаблицаКорректировкиСписания.РасшифровкаОтчетПоПроводкам = Расшифровка;
			КонецЕсли;
		КонецЕсли;
		
		Если ((ТаблицаПроводок.СчетД.ВидСубконто(1) = ВидыСубконто.Номенклатура)
		или  (ТаблицаПроводок.СчетД.ВидСубконто(1) = ВидыСубконто.Материалы))
		И ((ТаблицаПроводок.СчетК.ВидСубконто(1) = ВидыСубконто.Номенклатура)
		или  (ТаблицаПроводок.СчетК.ВидСубконто(1) = ВидыСубконто.Материалы)) Тогда
			
			Если НайтиВТаблицеРезНУ(ТабРез, ТаблицаПроводок.СубконтоД1, ТаблицаПроводок.СубконтоК1) = 0 Тогда
				// фиксируем результат расчета суммы перекрестного списания
				ТабРез.НоваяСтрока();
				ТабРез.Объект = ТаблицаПроводок.СубконтоД1;
				ТабРез.КорОбъект = ТаблицаПроводок.СубконтоК1;
				ТабРез.ПоступилоКоличество = ТаблицаПроводок.Количество;
				ТабРез.ПоступилоСумма = ТаблицаПроводок.СуммаРасчет;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры // СформироватьКорректирующиеПроводкиПоДвижениюНоменклатурывНУ()

//******************************************************************************
// АнализДвиженийНоменклатурыПоОперациямНУ(БухИт, ТаблицаПроводок, СредняяСтоимость, ТабРез)
//
// Параметры:
//  БухИт - результаты выполнения запроса к бухитогам по операциям движения товраов и материалов
//  ТаблицаПроводок - сгруппированная таблица движения по текущему объекту номенклатуры
//  СредняяСтоимость - средняя стоимость спозиционированного объекта номенклатуры рассчитанная
//			по методу средне-взвешенной за месяц
//  ТабРез - таблица результатов расчета сумм "перекрестных" (номенклатура - номенклатура) списаний 
//  УчтеноСписанноеКоличество - количество - всего скорректировано списанного количества.
//  НеВозврат - (-1) - если выполняется корректировка возврата на склад товаров отгруженных
//          без перехода права собственности.
//
// Вызывается из формул элементов диалога:
//  Нет.
//
// Описание:
//  Собирает и обобщает информацию по списанию (выбытию) текущей номенклатуры (материала или товара)
//  и выполняет корректировку данных в БухИтогах
//
Процедура АнализДвиженийНоменклатурыПоОперациямНУ(БухИт, ТаблицаПроводок, СредняяСтоимость, ТабРез, УчтеноСписанноеКоличество, НеВозврат = 1)
	
	// Таблица для обобщения движения готовой продукции за месяц
	ТаблицаПроводок.Очистить();
	ТаблицаПроводок.НоваяКолонка("СчетД", "Счет");
	ТаблицаПроводок.НоваяКолонка("СубконтоД1");
	ТаблицаПроводок.НоваяКолонка("СубконтоД2");
	ТаблицаПроводок.НоваяКолонка("СубконтоД3");
	ТаблицаПроводок.НоваяКолонка("СчетК", "Счет");
	ТаблицаПроводок.НоваяКолонка("СубконтоК1");
	ТаблицаПроводок.НоваяКолонка("СубконтоК2");
	ТаблицаПроводок.НоваяКолонка("СубконтоК3");
	ТаблицаПроводок.НоваяКолонка("Количество");
	ТаблицаПроводок.НоваяКолонка("СуммаФакт");
	ТаблицаПроводок.НоваяКолонка("СуммаРасчет");
	
	// просматриваем все операций т.к. нам нужна обобщенная информация в группировке по всем субконто,
	// а не только по тем, на которых ведется и количественный и суммовой учет. Следовательно
	// мы не сможем получить всю интересующую нас информацию только из анализа корреспонденций
	БухИт.ВыбратьПериоды( ,?(НеВозврат = 1, 2, 1));
	Пока БухИт.ПолучитьПериод() = 1 Цикл
		Опер = БухИт.Операция;
		
		// Все сторнирующие проводки не надо корректировать.
		Если (Опер.Количество < 0) и (НеВозврат = 1) Тогда
			Продолжить;
			
		ИначеЕсли (Опер.Количество >= 0) и (НеВозврат = -1) Тогда
			Продолжить;
		КонецЕсли;
		
		ТаблицаПроводок.НоваяСтрока();
		ТаблицаПроводок.СчетД = 	Опер.Дебет.Счет;
		ТаблицаПроводок.СубконтоД1= Опер.Дебет.Субконто(1);	
		ТаблицаПроводок.СубконтоД2= Опер.Дебет.Субконто(2);
		ТаблицаПроводок.СубконтоД3= Опер.Дебет.Субконто(3);
		ТаблицаПроводок.СчетК = 	Опер.Кредит.Счет;
		ТаблицаПроводок.СубконтоК1= Опер.Кредит.Субконто(1);
		ТаблицаПроводок.СубконтоК2= Опер.Кредит.Субконто(2);
		ТаблицаПроводок.СубконтоК3= Опер.Кредит.Субконто(3);
		ТаблицаПроводок.Количество= Опер.Количество;
		ТаблицаПроводок.СуммаФакт = Опер.Сумма;
		ТаблицаПроводок.СуммаРасчет= 0;
		
	КонецЦикла;
	
	// обобщаем информацию по одинаковым разрезам аналитики
	ТаблицаПроводок.Свернуть("СчетД,СубконтоД1,СубконтоД2,СубконтоД3,СчетК,СубконтоК1,СубконтоК2,СубконтоК3","Количество,СуммаФакт,СуммаРасчет");
	
	Если ТаблицаПроводок.КоличествоСтрок() <> 0 Тогда
		// Выполняем окончательную корректировку сумм в таблице обобщенных списаний товаров и материалов
		ТаблицаПроводок.ВыбратьСтроки();
		Пока ТаблицаПроводок.ПолучитьСтроку() = 1 Цикл
			ДолжноБытьСписано  = Окр((УчтеноСписанноеКоличество + ТаблицаПроводок.Количество * НеВозврат) * СредняяСтоимость, 2);
			РанееБылоСписано   = Окр(УчтеноСписанноеКоличество * СредняяСтоимость, 2);
			ТаблицаПроводок.СуммаРасчет = (ДолжноБытьСписано - РанееБылоСписано) * НеВозврат;
			УчтеноСписанноеКоличество = УчтеноСписанноеКоличество + ТаблицаПроводок.Количество * НеВозврат;
		КонецЦикла;
		
		СформироватьКорректирующиеПроводкиПоДвижениюНоменклатурывНУ(БухИт, ТаблицаПроводок, ТабРез, НеВозврат);            
		
	КонецЕсли;
	
КонецПроцедуры // АнализДвиженийНоменклатурыПоОперациямНУ()

//******************************************************************************
// КорректировкаСебестоимостиНоменклатурыНУ(БухИт, СредняяСтоимость, ТабРез, ВозвратСумма, ВозвратКоличество)
//
// Параметры:
//  БухИт - результаты выполнения запроса к бухитогам по операциям списания номенклатуры,
//          спозиционированные на объекте номенклатуры
//  СредняяСтоимость - средняя стоимость спозиционированного объекта номенклатуры рассчитанная
//			по методу средне-взвешенной за месяц
//  ТабРез - таблица результатов расчета сумм "перекрестных" (номенклатура - номенклатура) списаний 
//  ВозвратСумма - сумма возврата, отраженная в учете (необходимо только для продукции отгруженной
//          без перехода права собственности);
//  ВозвратКоличество  - количество возврата, отраженная в учете (необходимо только для товаров
//          отгруженных без перехода права собственности);
//
// Вызывается из формул элементов диалога:
//  Нет.
//
// Описание:
//  Формирование корректирующих проводок для отражения в бух. итогах списания 
//  объекта номенклатуры по средневзвешенной цене
//
Процедура КорректировкаСебестоимостиНоменклатурыНУ(БухИт, СредняяСтоимость, ТабРез, ВозвратСумма, ВозвратКоличество)
	
	ТаблицаПроводок = СоздатьОбъект("ТаблицаЗначений");
	УчтеноСписанноеКоличество = 0;
	
	БухИт.ВыбратьКорСчета(, 2);
	Пока БухИт.ПолучитьКорСчет() = 1 Цикл
		
		// По аналогии с бухгалтерским учетом корректировка передачи
		// товаров в розницу не производится.
		Если (БухИт.КорСчет.Код = "Н02.02.2") и (БухИт.Счет.Код = "Н02.02.1") Тогда
			Продолжить;
			
		ИначеЕсли (БухИт.КорСчет.Код = "Н02.02.1") и (БухИт.Счет.Код = "Н02.02.2") Тогда
			Продолжить;
						
		ИначеЕсли ((БухИт.Счет.Код = "Н02.01") и (БухИт.КорСчет.Код = "Н02.09")) Тогда
			Если БухИт.КорКО("К")=0 тогда
				Продолжить;         
			КонецЕсли; 
						
		ИначеЕсли БухИт.Счет=СчетПоКоду("Н02.09") Тогда 
			Если БухИт.КорКО("К")=0 тогда
				Продолжить;         
			КонецЕсли; 
						
		ИначеЕсли (БухИт.Счет.Родитель()=СчетПоКоду("Н02.02")) и (БухИт.КорСчет.Родитель()=СчетПоКоду("Н02.04")) Тогда 
			Если БухИт.КорКО("К")=0 тогда
				Продолжить;         
			КонецЕсли; 
            			
		КонецЕсли;
		
		СписокКорректируемыхСубконто = ПолучитьСписокКорректируемыхСубконтоНУ(БухИт.КорСчет);
		КоличествоСубконто = СписокКорректируемыхСубконто.РазмерСписка();
		
		Если КоличествоСубконто = 0 Тогда
			АнализДвиженийНоменклатурыПоОперациямНУ(БухИт, ТаблицаПроводок, СредняяСтоимость, ТабРез, УчтеноСписанноеКоличество);
			
		Иначе
			Стр = "";
			НомерСубконто1 = СписокКорректируемыхСубконто.ПолучитьЗначение(1, Стр);
			БухИт.ВыбратьКорСубконто(НомерСубконто1, , 2);
			Пока БухИт.ПолучитьКорСубконто(НомерСубконто1) = 1 Цикл
				Если КоличествоСубконто = 1 Тогда
					АнализДвиженийНоменклатурыПоОперациямНУ(БухИт, ТаблицаПроводок, СредняяСтоимость, ТабРез, УчтеноСписанноеКоличество);
					
				Иначе
					НомерСубконто2 = СписокКорректируемыхСубконто.ПолучитьЗначение(2, Стр);
					БухИт.ВыбратьКорСубконто(НомерСубконто2, , 2);
					Пока БухИт.ПолучитьКорСубконто(НомерСубконто2) = 1 Цикл
						Если КоличествоСубконто = 2 Тогда
							СуммаКорректировки = 0;
							АнализДвиженийНоменклатурыПоОперациямНУ(БухИт, ТаблицаПроводок, СредняяСтоимость, ТабРез, УчтеноСписанноеКоличество);
							
						Иначе
							НомерСубконто3 = СписокКорректируемыхСубконто.ПолучитьЗначение(3, Стр);
							БухИт.ВыбратьКорСубконто(НомерСубконто3,, 2);
							Пока БухИт.ПолучитьКорСубконто(НомерСубконто3) = 1 Цикл
								АнализДвиженийНоменклатурыПоОперациямНУ(БухИт, ТаблицаПроводок, СредняяСтоимость, ТабРез, УчтеноСписанноеКоличество);
								
							КонецЦикла;
						КонецЕсли;
					КонецЦикла;
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	
	// Если был возврат товаров отгруженных без перехода права собственности
	// на склад, то это необходимо скорректировать.
	//Если БухИт.Счет.Код = "Н02.04.1" Тогда
	//	Если БухИт.ПолучитьСубконто(2,, Перечисление.УсловияПоступленияИВыбытия.Возврат) = 1 Тогда
	//		АнализДвиженийНоменклатурыПоОперациямНУ(БухИт, ТаблицаПроводок, СредняяСтоимость, ТабРез, УчтеноСписанноеКоличество, -1);
	//		
	//		БухИт.ПолучитьСубконто(2,, ""); // сбросим выборку по субконто "Возврат"
	//	КонецЕсли;
	//КонецЕсли;
	
КонецПроцедуры // КорректировкаСебестоимостиНоменклатурыНУ()

//******************************************************************************
// НайтиОбъектВТаблице(ОбработанныеОбъекты, Объект, СчетУчета)
//
// Параметры:
//  ОбработанныеОбъекты - таблица значений, хранящий ссылки на объекты, которые были откорректированы;
//  Объект              - объект, который необходимо найти в таблице;
//  СчетУчета           - счет учета объекта;
//
// Возвращаемое значение:
//  Число - номер строки таблицы в которой найден объект
//
// Описание:
//  Производится поиск объекта в таблице.
//
Функция НайтиОбъектВТаблице(ОбработанныеОбъекты, Объект, СчетУчета,Субконто="")
	
	ОбъектНайден = 0;
	
	ОбработанныеОбъекты.ВыбратьСтроки();
	Пока ОбработанныеОбъекты.ПолучитьСтроку() = 1 Цикл
		Если (ОбработанныеОбъекты.Объект = Объект)
		и (ОбработанныеОбъекты.СчетУчета = СчетУчета) Тогда
			Если ((СчетУчета=СчетПоКоду("Н02.04.1")) 
			и (Константа.РассчитыватьВНалоговомУчетеСреднююСтоимостьОтгруженныхТоваровВРазрезеДоговоров.Получить(ДатаДок)=Да)) тогда
				Если ОбработанныеОбъекты.НеоборотноеСубконто = Субконто тогда
					ОбъектНайден = ОбработанныеОбъекты.НомерСтроки;
					Прервать;
				КонецЕсли;
			ИначеЕсли ((Константа.РаздельныйУчетМатериаловСкладПереработка.Получить(ДатаДок)=Да)
			и (СчетУчета=СчетПоКоду("Н02.09"))) Тогда
				Если ОбработанныеОбъекты.НеоборотноеСубконто = Субконто тогда
					ОбъектНайден = ОбработанныеОбъекты.НомерСтроки;
					Прервать;
				КонецЕсли;
			Иначе
				ОбъектНайден = ОбработанныеОбъекты.НомерСтроки;
			КонецЕсли;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ОбъектНайден;
	
КонецФункции // НайтиОбъектВТаблице()

//******************************************************************************
// ТипРасшифровки()
//
// Параметры:
//  Счет - счет, по которому определяется тип расшифровки.
//
// Возвращаемое значение:
//  Таблица значений - таблица в которую необходимо записывать расшифровку
//  по объектам, учитываемым на переданном в функцию счете.
//
// Описание:
//  Определение по счету таблицу, в которую должна записываться расшифровка
//  по объектам, учитываемом на этом счете.
//
Функция ТипРасшифровки(Счет)
	
	Если Счет = СчетПоКоду("Н02.01") Тогда
		ТаблицаРасшифровки = ТаблицаРасшифровкаКорректировкиМатериалов;
		
	ИначеЕсли Счет = СчетПоКоду("Н02.02.2") Тогда
		ТаблицаРасшифровки = ТаблицаРасшифровкаКорректировкиРозничныхТоваров;
		
	ИначеЕсли Счет = СчетПоКоду("Н02.04.1") Тогда
		ТаблицаРасшифровки = ТаблицаРасшифровкаКорректировкиОтгруженныхТоваров;
		
	Иначе
		ТаблицаРасшифровки = ТаблицаРасшифровкаКорректировкиТоваров;
	КонецЕсли;
	
	Возврат ТаблицаРасшифровки;
	
КонецФункции // ТипРасшифровки()

//****************************************************************************** 
// РассчитатьСреднююСтоимостьНоменклатурыНУ(БухИт, Объект, СтекВызовов, УровеньРекурсии, Результат, ТабРез, ОбработанныеОбъекты)
//
// Параметры:
//  БухИт - результаты запроса к бухгалтерским итогам, содержащего все данные
//			по движению номенклатуры
//  Объект - объект номенклатуры расчет себестоимости которого выполняется в данный момент
//  СтекВызовов - таблица значений с историей верхних уровней вызова процедуры (в случае рекурсии)
//  УровеньРекурсии - текущая глубина рекурсивного вызова
//  Результат - результат расчета себестоимости на текущем уровне рекурсии
//  ТабРез - таблица значений, содержащая результаты расчетов 
//			 перекрестных (номенклатура - номенклатура) списаний
//  ОбработанныеОбъекты - таблица значений, хранящий ссылки на объекты, которые были откорректированы
//
// Вызывается из формул элементов диалога:
//  Нет.
//
// Описание:
//  В процедуре выполняется расчет сумм списания товаров и материалов за текущий месяц
//  по средневзвешенной цене. Выполняются корректирующие проводки с целью отражения рассчитанных
//  сумм в бухгалтерских итогах
//
Процедура РассчитатьСреднююСтоимостьНоменклатурыНУ(БухИт, Объект, СтекВызовов, УровеньРекурсии = 1, Результат, ТабРез, ОбработанныеОбъекты)
	
	Если НайтиОбъектВТаблице(ОбработанныеОбъекты, Объект, БухИт.Счет,?(ПустоеЗначение(БухИт.Субконто(3))=1,"",БухИт.Субконто(3))) <> 0 Тогда
		// Для этого объекта уже был выполнен расчет и корректировка себестоимости
		Возврат;
	КонецЕсли;
	
	Если УровеньРекурсии > 1 Тогда
		// Это РЕКУРСИВНЫЙ ВЫЗОВ - повторно инициализируем выборку по счету указанному в реквизите КорСчет
		БухИт.ВыбратьСчета();
		БухИт.ПолучитьСчет( ,СтекВызовов.КорСчет);
		// повторно инициализируем выборку по субконто
		БухИт.ВыбратьСубконто(1);
		ЕстьДанныеПоОбъекту = БухИт.ПолучитьСубконто(1, , Объект);
		
	Иначе
		ЕстьДанныеПоОбъекту = 1;
		
	КонецЕсли;
	
	// подготавливаем исходные данные для расчета
	ОстатокКоличество = БухИт.СНД("К");
	ОстатокСумма	  = БухИт.СНД("С");
	ПоступилоСумма	  = 0;
	ПоступилоКоличество = 0;
	ВозвратСумма      = 0;
	ВозвратКоличество = 0;
	РозницаСумма      = 0;
	РозницаКоличество = 0;
		
	ТоварыОтгруженные = 0;
	ИсключаемыеКорСчета = СоздатьОбъект("СписокЗначений");
	Если (БухИт.Счет = СчетПоКоду("Н02.01"))
	или (БухИт.Счет = СчетПоКоду("Н02.02.1")) Тогда
		// Операции, которые не должны влиять на расчет средней:
		// возврат отгруженных без перехода права собственности товаров и возврат товаров из розницы
		//ИсключаемыеКорСчета.ДобавитьЗначение(СчетПоКоду("Н02.04.1"));
		//ИсключаемыеКорСчета.ДобавитьЗначение(СчетПоКоду("Н02.02.2"));
	ИначеЕсли (БухИт.Счет = СчетПоКоду("Н02.04.1")) Тогда
		ТоварыОтгруженные = 1;
	КонецЕсли;
	
	Если ЕстьДанныеПоОбъекту = 1 Тогда // информация по данной номенклатурной единице есть в рассчитанных итогах
		
		// Если необходимо сформировать печатную форму по регламентной операции.
		Если ФормироватьПечатнуюФорму = 1 Тогда
			ТаблицаРасшифровкаРегламентнойОперации = ТипРасшифровки(БухИт.Счет);
		КонецЕсли;
		
				
		Если БухИт.Счет = СчетПоКоду("Н02.02.1") Тогда
			БухИт.ВыбратьКорСчета( , 2);
			Пока (БухИт.ПолучитьКорСчет() = 1) и (Результат >= 0) Цикл
				Если БухИт.КорСчет = СчетПоКоду("Н02.02.2") Тогда
					РозницаКоличество = РозницаКоличество + БухИт.КорКО("К");
					РозницаСумма   	= РозницаСумма + БухИт.КорКО("С");
					Продолжить;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		БухИт.ВыбратьКорСчета( , 1);
		Пока (БухИт.ПолучитьКорСчет() = 1) и (Результат >= 0) Цикл
			
			Если ИсключаемыеКорСчета.НайтиЗначение(БухИт.КорСчет) <> 0 Тогда
				// Исключаем из расчета обороты с этим счетом
				Продолжить;
			КонецЕсли;
			
			Если ((БухИт.КорСчет.ВидСубконто(1) = ВидыСубконто.Номенклатура) 
			или  (БухИт.КорСчет.ВидСубконто(1) = ВидыСубконто.Материалы))
			и (БухИт.Счет <> СчетПоКоду("Н02.02.2"))
			и (ТоварыОтгруженные = 0) Тогда
				
				Если ((БухИт.КорСчет = СчетПоКоду("Н02.02.2")) И (БухИт.Счет = СчетПоКоду("Н02.02.1"))) Тогда
					ПоступилоКоличество = ПоступилоКоличество + БухИт.КорДО("К");
					ПоступилоСумма	  	= ПоступилоСумма + БухИт.КорДО("С");
					Продолжить;
				КонецЕсли;

				БухИт.ВыбратьКорСубконто(1, , 1);
				// встретили ситуацию, когда на себестоимость рассчитываемого объекта номенклатуры
				// влияет себестоимость другого объекта номенклатуры (материала или товара)
				Пока (БухИт.ПолучитьКорСубконто(1) = 1)
				и (Результат >= 0) Цикл
					Если СтекВызовов.НайтиЗначение(БухИт.КорСубконто(1), , "Субконто") = 0 Тогда
						Стр = НайтиВТаблицеРезНУ(ТабРез, Объект, БухИт.КорСубконто(1));
						Если (Стр = 0) Тогда
							// Корректировка себестоимости для данного объекта номенклатуры еще не выполнена
							УровеньРекурсии = УровеньРекурсии + 1;
							СтекВызовов.НоваяСтрока();
							СтекВызовов.Счет 	 = БухИт.Счет;
							СтекВызовов.Субконто = БухИт.Субконто(1);
							СтекВызовов.КорСчет  = БухИт.КорСчет;
							СтекВызовов.КорСубконто = БухИт.КорСубконто(1);
							
							// РЕКУРСИЯ!
							РассчитатьСреднююСтоимостьНоменклатурыНУ(БухИт, БухИт.КорСубконто(1), СтекВызовов, УровеньРекурсии, Результат, ТабРез, ОбработанныеОбъекты);
							
							// повторная попытка спозиционироваться на результатах расчета перекрестных списаний			    
							Стр = НайтиВТаблицеРезНУ(ТабРез, Объект, БухИт.КорСубконто(1));
							
						КонецЕсли;
						
						Если (Результат >= 0)
						и (Стр <> 0) Тогда
							// при расчете себестоимости ошибки не возникло можно продолжать вести расчеты
							// результаты расчета себестоимости в данном случае помещены в таблице результатов "РезРасчетов"
							ПоступилоКоличество = ПоступилоКоличество + ТабРез.ПолучитьЗначение(Стр, "ПоступилоКоличество");
							ПоступилоСумма	  	= ПоступилоСумма + ТабРез.ПолучитьЗначение(Стр, "ПоступилоСумма");
						КонецЕсли;
						
					Иначе
						// обнаружена обратная связь в цепочке взаимных списаний объектов номенклатуры
						// друг на друга. Рассчитать себестоимость невозможно!
						СтекВызовов.НоваяСтрока();
						СтекВызовов.Счет 	 = БухИт.Счет;
						СтекВызовов.Субконто = БухИт.Субконто(1);
						СтекВызовов.КорСчет  = БухИт.КорСчет;
						СтекВызовов.КорСубконто = БухИт.КорСубконто(1);
						
						Результат = -3;
						
					КонецЕсли;
				КонецЦикла;
			
			Иначе

				ПоступилоКоличество = ПоступилоКоличество + БухИт.КорДО("К");
				ПоступилоСумма	  	= ПоступилоСумма + БухИт.КорДО("С");
			КонецЕсли;
		КонецЦикла;
		
		// В расчете средневзвешенной стоимости товаров (материалов) необходимо учесть возврат.
		БухИт.ВыбратьПериоды();
		Пока БухИт.ПолучитьПериод() = 1 Цикл
			Если БухИт.КО("К") < 0 Тогда
				ВозвратСумма      = ВозвратСумма - БухИт.КО("С");
				ВозвратКоличество = ВозвратКоличество - БухИт.КО("К");
			КонецЕсли;
		КонецЦикла;
				
	Иначе
		// информации по данному объекту нет в рассчитанных итогах
		Если БухИт.Счет.ВидСубконто(1) = ВидыСубконто.Материалы Тогда
			Результат = -1;   // не рассчитаны суммы списания материалов
		Иначе
			Результат = -2;   // не рассчитаны суммы списания товаров 
		КонецЕсли;
		
	КонецЕсли;
	
	Если Результат >= 0 Тогда
		// далее необходимо сделать корректирующие проводки
		Если ОстатокКоличество + ПоступилоКоличество + ВозвратКоличество - РозницаКоличество = 0 Тогда
			СредняяСтоимость = 0;
			
		Иначе
			СредняяСтоимость = (ОстатокСумма + ПоступилоСумма + ВозвратСумма - РозницаСумма) / (ОстатокКоличество + ПоступилоКоличество + ВозвратКоличество - РозницаКоличество);
		КонецЕсли;           
		
		// Если необходимо сформировать печатную форму по регламентной операции.
		Если ФормироватьПечатнуюФорму = 1 Тогда
			ТаблицаРасшифровкаРегламентнойОперации.НоваяСтрока();
			ТаблицаРасшифровкаРегламентнойОперации.МПЗ                = БухИт.Субконто(1);
			ТаблицаРасшифровкаРегламентнойОперации.СуммаНаНачало      = ОстатокСумма;
			ТаблицаРасшифровкаРегламентнойОперации.КоличествоНаНачало = ОстатокКоличество;
			
			Если ТоварыОтгруженные = 0 Тогда
				ТаблицаРасшифровкаРегламентнойОперации.ПриходСумма        = ПоступилоСумма;
				ТаблицаРасшифровкаРегламентнойОперации.ПриходКоличество   = ПоступилоКоличество;    
				
			Иначе
				ТаблицаРасшифровкаРегламентнойОперации.ПриходСумма        = ПоступилоСумма + ВозвратСумма;
				ТаблицаРасшифровкаРегламентнойОперации.ПриходКоличество   = ПоступилоКоличество + ВозвратКоличество;
			КонецЕсли;
			
			ТаблицаРасшифровкаРегламентнойОперации.СредневзвешеннаяСтоимость = СредняяСтоимость;
			ТаблицаРасшифровкаРегламентнойОперации.ВозвратСумма       = ВозвратСумма;
			ТаблицаРасшифровкаРегламентнойОперации.ВозвратКоличество  = ВозвратКоличество;
			ТаблицаРасшифровкаРегламентнойОперации.РасшифровкаСуммаКорректировки = РасшифровкаКорректировкиСписанияПоМПЗ(БухИт.Субконто(1));
			
			// Расшифровка
			Расшифровка = СоздатьОбъект("СписокЗначений");
			ОсновнаяРасшифровкаОСВ.Выгрузить(Расшифровка);
			Расшифровка.Установить("Счет", БухИт.Счет);
			Расшифровка.Установить("ВидСубконто1", БухИт.Счет.ВидСубконто(1));
			Расшифровка.Установить("Субконто1", БухИт.Субконто(1));
			Расшифровка.Установить("ОтборСубконто1", 1);
			ТаблицаРасшифровкаРегламентнойОперации.РасшифровкаОСВПоСчету1 = Расшифровка;
			
			Расшифровка = СоздатьОбъект("СписокЗначений");
			ОсновнаяРасшифровкаОСВ.Выгрузить(Расшифровка);
			Расшифровка.Установить("Счет", БухИт.Счет);
			Расшифровка.Установить("ВидСубконто1", БухИт.Счет.ВидСубконто(1));
			Расшифровка.Установить("Субконто1", БухИт.Субконто(1));
			Расшифровка.Установить("ОтборСубконто1", 1);
			Расшифровка.Установить("ВидСубконто2", ВидыСубконто.УсловияПоступленияИВыбытия);
			Расшифровка.Установить("Субконто2", Перечисление.УсловияПоступленияИВыбытия.Возврат);
			Расшифровка.Установить("ОтборСубконто2", 2);
			ТаблицаРасшифровкаРегламентнойОперации.РасшифровкаОСВПоСчету2 = Расшифровка;
			
		КонецЕсли;
		
		КорректировкаСебестоимостиНоменклатурыНУ(БухИт, СредняяСтоимость, ТабРез, ВозвратСумма, ВозвратКоличество);
		
		// фиксируем рассчитанный объект в таблице для исключения повторных расчетов
		ОбработанныеОбъекты.НоваяСтрока();
		ОбработанныеОбъекты.Объект    = Объект;
		ОбработанныеОбъекты.СчетУчета = БухИт.Счет;
		Если (Константа.РассчитыватьВНалоговомУчетеСреднююСтоимостьОтгруженныхТоваровВРазрезеДоговоров.Получить(ДатаДок)=Да)
		и (БухИт.Счет=СчетПоКоду("Н02.04.1")) тогда
			ОбработанныеОбъекты.НеоборотноеСубконто=БухИт.Субконто(3);
		ИначеЕсли (Константа.РаздельныйУчетМатериаловСкладПереработка.Получить(ДатаДок)=Да)
		и  (БухИт.Счет=СчетПоКоду("Н02.09")) Тогда
			ОбработанныеОбъекты.НеоборотноеСубконто=БухИт.Субконто(2);
		КонецЕсли;

		
		// Формирование печатной формы
		Если ФормироватьПечатнуюФорму = 1 Тогда
			Если БухИт.Счет = СчетПоКоду("Н02.04.1") Тогда
				
				// В печатной форме отражаем только те МПЗ, по которым была корректировка
				СуммаКорректировки         = ТаблицаРасшифровкаРегламентнойОперации.СуммаКорректировки;
				СуммаКорректировкиВозврата = ТаблицаРасшифровкаРегламентнойОперации.СуммаКорректировкиВозврата;
				Если (СуммаКорректировки = 0) и (СуммаКорректировкиВозврата = 0) Тогда
					ТаблицаРасшифровкаРегламентнойОперации.УдалитьСтроку();
				КонецЕсли;
				
			Иначе
				
				// В печатной форме отражаем только те МПЗ, по которым была корректировка
				СуммаКорректировки         = ТаблицаРасшифровкаРегламентнойОперации.СуммаКорректировки;
				Если СуммаКорректировки = 0 Тогда
					ТаблицаРасшифровкаРегламентнойОперации.УдалитьСтроку();
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	// возврат из процедуры
	Если УровеньРекурсии > 1 Тогда
		// восстанавливаем позиционирование в результатах запроса, которое было до РЕКУРСИВНОГО ВЫЗОВА
		// повторно инициализируем выборку по данным из стека вызовов
		УровеньРекурсии = УровеньРекурсии - 1;
		
		БухИт.ВыбратьСчета();
		БухИт.ПолучитьСчет(, СтекВызовов.ПолучитьЗначение(УровеньРекурсии,"Счет"));
		БухИт.ВыбратьСубконто(1);
		БухИт.ПолучитьСубконто(1, , СтекВызовов.ПолучитьЗначение(УровеньРекурсии,"Субконто"));
		БухИт.ВыбратьКорСчета(, 1);
		БухИт.ПолучитьКорСчет(, СтекВызовов.ПолучитьЗначение(УровеньРекурсии,"КорСчет"));
		БухИт.ВыбратьКорСубконто(1, , 1);
		БухИт.ПолучитьКорСубконто(1, , СтекВызовов.ПолучитьЗначение(УровеньРекурсии,"КорСубконто"));
		
		Если Результат >= 0 Тогда
			// при нормальном завершении - затираем значение в стеке вызовов
			СтекВызовов.УдалитьСтроку(УровеньРекурсии);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // РассчитатьСреднююСтоимостьНоменклатурыНУ()

//****************************************************************************** 
// КорректировкаСуммСписанияНоменклатурыНУ()
//
// Параметры:
//
// Вызывается из формул элементов диалога:
//  Нет.
//
// Описание:
//  В процедуре выполняется расчет сумм списания номенклатуры методом средневзвешенной цены за месяц
//  и выполняется корректировка бухгалтерских итогов с целью отражения списания номенклатуры за месяц
//  по рассчитанной средневзвешенной цене
//
Процедура КорректировкаСуммСписанияНоменклатурыНУ()
	
	Если Операция.КоличествоПроводок() > 0 Тогда
		Операция.ЗаписатьПроводки();
	КонецЕсли;
	
	// Формирование печатной формы
	Если ФормироватьПечатнуюФорму = 1 Тогда
		НаименованиеРегламентнойОперации = "Корректировка средневзвешенной стоимости номенклатуры";
		Таб.ВывестиСекцию("РегламентнаяОперацияНУ");
		ИнициализироватьРасшифровкиПоКорректировкеМПЗ();
	КонецЕсли;
	
	Для т = 1 По 2 Цикл
		
		СчетаУчетаНоменклатуры = СоздатьОбъект("СписокЗначений");
		// алгоритм корректировки сумм списания товаров и материалов по средневзвешенной стоимости двухпроходный
		Если т = 1 Тогда
			// на первом проходе рассчитывается и корректируется себестоимости списания товаров и материалов
			СчетаУчетаНоменклатуры.ДобавитьЗначение(СчетПоКоду("Н02.01"));			
			СчетаУчетаНоменклатуры.ДобавитьЗначение(СчетПоКоду("Н02.02.1"));		
			
			СчетаУчетаНоменклатуры.ДобавитьЗначение(СчетПоКоду("Н02.09"));			             
			
		Иначе
			// на втором проходе рассчитывается и корректируется себестоимости списания товаров
			// отгруженных ранее без перехода права собственности
			СчетаУчетаНоменклатуры.ДобавитьЗначение(СчетПоКоду("Н02.04.1"));
			Если Константа.РаздельныйУчетТоваровОптРозница.Получить(ДатаДок) = Да Тогда
				СчетаУчетаНоменклатуры.ДобавитьЗначение(СчетПоКоду("Н02.02.2"));
			КонецЕсли;
		КонецЕсли;
		
		// создаем таблицу для хранения результатов расчета "перекрестных" (номенклатура - номенклатура)
		// сумм списания
		ТабРез = СоздатьОбъект("ТаблицаЗначений");
		ТабРез.НоваяКолонка("Объект", "Справочник");
		ТабРез.НоваяКолонка("КорОбъект", "Справочник");
		ТабРез.НоваяКолонка("ПоступилоКоличество", "Число", 15, 3);
		ТабРез.НоваяКолонка("ПоступилоСумма", "Число", 15, 2);
		
		// таблица для фиксации тех объектов номенклатуры, которые уже рассчитаны и откорректированы
		ОбработанныеОбъекты = СоздатьОбъект("ТаблицаЗначений");
		ОбработанныеОбъекты.НоваяКолонка("Объект",    "Справочник");
		ОбработанныеОбъекты.НоваяКолонка("СчетУчета", "Счет");
		Если (Константа.РаздельныйУчетМатериаловСкладПереработка.Получить(ДатаДок)=Да)
		или (Константа.РассчитыватьВНалоговомУчетеСреднююСтоимостьОтгруженныхТоваровВРазрезеДоговоров.Получить(ДатаДок)=Да) тогда
			ОбработанныеОбъекты.НоваяКолонка("НеоборотноеСубконто", "Основание");
		КонецЕсли;
				
		БухИт = СоздатьОбъект("БухгалтерскиеИтоги"); БухИт.ИспользоватьРазделительУчета(ЮрЛицо);
		БухИт.ИспользоватьПланСчетов(ОсновнойПланСчетов());
		БухИт.ИспользоватьСубконто();
		БухИт.ИспользоватьСубконто();
		БухИт.ИспользоватьСубконто();
		БухИт.ИспользоватьКорСубконто();
		БухИт.ИспользоватьКорСубконто();
		БухИт.ИспользоватьКорСубконто();
		БухИт.ВключатьСубсчета(-1, -1);
		БухИт.ВыполнитьЗапрос(ДатаНач, ДатаКон, СчетаУчетаНоменклатуры,,, 3, "Проводка", "СК");
		БухИт.ВыбратьСчета();
		Пока БухИт.ПолучитьСчет() = 1 Цикл
			
			// Формирование печатной формы
			Если ФормироватьПечатнуюФорму = 1 Тогда
				
			КонецЕсли;
			
			БухИт.ВыбратьСубконто(1);
			Пока БухИт.ПолучитьСубконто(1) = 1 Цикл
				СтекВызовов = СоздатьОбъект("ТаблицаЗначений");
				СтекВызовов.НоваяКолонка("Счет");
				СтекВызовов.НоваяКолонка("Субконто");
				СтекВызовов.НоваяКолонка("КорСчет");
				СтекВызовов.НоваяКолонка("КорСубконто");
				
				Результат = 0; 

				Если ((БухИт.Счет=СчетПоКоду("Н02.04.1")) и (Константа.РассчитыватьВНалоговомУчетеСреднююСтоимостьОтгруженныхТоваровВРазрезеДоговоров.Получить(ДатаДок)=Да)) Тогда
					БухИт.ВыбратьСубконто(3);
					Пока БухИт.ПолучитьСубконто(3)=1 Цикл
						РассчитатьСреднююСтоимостьНоменклатурыНУ(БухИт, БухИт.Субконто(1), СтекВызовов, 1, Результат, ТабРез, ОбработанныеОбъекты);
					КонецЦикла;
				ИначеЕсли ((БухИт.Счет=СчетПоКоду("Н02.09")) и (Константа.РаздельныйУчетМатериаловСкладПереработка.Получить(ДатаДок)=Да)) Тогда
					БухИт.ВыбратьСубконто(2);
					Пока БухИт.ПолучитьСубконто(2)=1 Цикл
						РассчитатьСреднююСтоимостьНоменклатурыНУ(БухИт, БухИт.Субконто(1), СтекВызовов, 1, Результат, ТабРез, ОбработанныеОбъекты);
					КонецЦикла;				
				Иначе
					РассчитатьСреднююСтоимостьНоменклатурыНУ(БухИт, БухИт.Субконто(1), СтекВызовов, 1, Результат, ТабРез, ОбработанныеОбъекты);
				КонецЕсли;

				Если Результат = -3 Тогда
					ТекстСообщения = "Невозможно рассчитать сумму списания для объекта """ + СтекВызовов.ПолучитьЗначение(1, "Субконто") + """ по причине циклического списания!";
					глСообщениеПроведения(ТекстСообщения, ТекущийДокумент(), -1);
					
				ИначеЕсли Результат = -1 Тогда
					ТекстСообщения = "Не рассчитана сумма списания для материала: """ + СтекВызовов.ПолучитьЗначение(СтекВызовов.КоличествоСтрок(), "КорСубконто");
					глСообщениеПроведения(ТекстСообщения, ТекущийДокумент(), -1);
					
				ИначеЕсли Результат = -2 Тогда
					ТекстСообщения = "Не рассчитана сумма списания для товара: """ + СтекВызовов.ПолучитьЗначение(СтекВызовов.КоличествоСтрок(), "КорСубконто");
					глСообщениеПроведения(ТекстСообщения, ТекущийДокумент(), -1);
				КонецЕсли;
				
				Если Результат < 0 Тогда
					СтрокаСписаний = "Последовательность списаний: ";
					Для т = 1 По СтекВызовов.КоличествоСтрок() Цикл
						СтрокаСписаний = СтрокаСписаний + ?(т <> 1,""" <= ""","""") + СтекВызовов.ПолучитьЗначение(т, "Субконто");
					КонецЦикла;
					СтрокаСписаний = СтрокаСписаний + """ <= """ + СтекВызовов.ПолучитьЗначение(СтекВызовов.КоличествоСтрок(), "КорСубконто") + """";
					ТекстСообщения = СтрокаСписаний;
					глСообщениеПроведения(ТекстСообщения, ТекущийДокумент(), -1);
				КонецЕсли;
				
			КонецЦикла;
			
			// Формируем отдельную расшифровку по каждому счету учета товаров (материалов)
			Если ФормироватьПечатнуюФорму = 1 Тогда
				
				Если БухИт.Счет = СчетПоКоду("Н02.01") Тогда
					ВыводВОтчетИнформацииОВыполненииОперации("ТаблицаКорректировкаНоменклатурыНУ", // идентификатор отображаемой таблицы
					ТаблицаРасшифровкаКорректировкиМатериалов, // таблица с данными, для заполнения печатной формы
					"Корректировка средневзвешенной стоимости материалов", // дополнительные данные
					"Корректировка средневзвешенной стоимости материалов", //строка, выводимая в отчет-список выполненных операций, в случае если операция выполнена
					"Стоимость материалов, не нуждается в корректировке"); //строка, выводимая в отчет-список выполненных операций, в случае если операция не выполнена
								
				ИначеЕсли БухИт.Счет = СчетПоКоду("Н02.09") Тогда
					ВыводВОтчетИнформацииОВыполненииОперации("ТаблицаКорректировкаНоменклатурыНУ", // идентификатор отображаемой таблицы
					ТаблицаРасшифровкаКорректировкиМатериалов, // таблица с данными, для заполнения печатной формы
					"Корректировка средневзвешенной стоимости материалов в переработке", // дополнительные данные
					"Корректировка средневзвешенной стоимости материалов в переработке", //строка, выводимая в отчет-список выполненных операций, в случае если операция выполнена
					"Стоимость материалов материалов в переработке, не нуждается в корректировке"); //строка, выводимая в отчет-список выполненных операций, в случае если операция не выполнена
                					
				ИначеЕсли БухИт.Счет = СчетПоКоду("Н02.02.1") Тогда
					ВыводВОтчетИнформацииОВыполненииОперации("ТаблицаКорректировкаНоменклатурыНУ", // идентификатор отображаемой таблицы
					ТаблицаРасшифровкаКорректировкиТоваров, // таблица с данными, для заполнения печатной формы
					"Корректировка средневзвешенной стоимости товаров, находящихся на складе", // дополнительные данные
					"Корректировка средневзвешенной стоимости товаров, находящихся на складе", //строка, выводимая в отчет-список выполненных операций, в случае если операция выполнена
					"Стоимость товаров, находящихся на складе, не нуждается в корректировке"); //строка, выводимая в отчет-список выполненных операций, в случае если операция не выполнена
					
				ИначеЕсли БухИт.Счет = СчетПоКоду("Н02.02.2") Тогда
					ВыводВОтчетИнформацииОВыполненииОперации("ТаблицаКорректировкаНоменклатурыНУ", // идентификатор отображаемой таблицы
					ТаблицаРасшифровкаКорректировкиРозничныхТоваров, // таблица с данными, для заполнения печатной формы
					"Корректировка средневзвешенной стоимости товаров, находящихся в розничной торговле", // дополнительные данные
					"Корректировка средневзвешенной стоимости товаров, находящихся в розничной торговле", //строка, выводимая в отчет-список выполненных операций, в случае если операция выполнена
					"Стоимость товаров, находящихся в розничной торговле, не нуждается в корректировке"); //строка, выводимая в отчет-список выполненных операций, в случае если операция не выполнена
					
				ИначеЕсли БухИт.Счет = СчетПоКоду("Н02.04.1") Тогда
					ВыводВОтчетИнформацииОВыполненииОперации("ТаблицаКорректировкаОтгруженнойНоменклатурыНУ", // идентификатор отображаемой таблицы
					ТаблицаРасшифровкаКорректировкиОтгруженныхТоваров, // таблица с данными, для заполнения печатной формы
					"Корректировка фактической стоимости товаров отгруженных без перехода права собственности", // дополнительные данные
					"Корректировка фактической стоимости товаров отгруженных без перехода права собственности", //строка, выводимая в отчет-список выполненных операций, в случае если операция выполнена
					"Стоимость товаров, отгруженных без перехода права собственности, не нуждается в корректировке"); //строка, выводимая в отчет-список выполненных операций, в случае если операция не выполнена
				КонецЕсли;
			КонецЕсли;
			
		КонецЦикла;
		
		// сохраняем в БухИтогах корректировки, сделанные на данном проходе
		Операция.ЗаписатьПроводки();
		
	КонецЦикла;
	
КонецПроцедуры // КорректировкаСуммСписанияНоменклатурыНУ()

//******************************************************************************
// ПолучитьВидПродукции(Номенклатура)
//
// Параметры:
//  Номенклатура - элемент справочника Номенклатура, для которого нужно определить
//                 вид продукции
//
// Вызывается из формул элементов диалога:
//  Нет.
//
// Описание:
//  Возвращает вид продукции для указанного объекта номенклатуры
//
Функция ПолучитьВидПродукции(Номенклатура)
	
	Возврат Номенклатура.ВидНоменклатуры;
	
КонецФункции // ПолучитьВидПродукции()

//******************************************************************************
// ПолучитьТаблицуРаспределенияПрямыхРасходовНУ(ТаблицаБазыРаспределения, ТекстБазыРаспределения)
//
// Параметры:
//  ТаблицаБазыРаспределения - таблица в которой формируется база для распределения прямых расходов
//  ТекстБазыРаспределения - текст описывающий способ распределения
//
// Вызывается из формул элементов диалога:
//  Нет.
//
// Описание:
//  Формирует базу для распределения прямых расходов в НУ в соответствии с методом
//  выбранным в константе "БазаРаспределенияПрямыхРасходов"
//
Процедура ПолучитьТаблицуРаспределенияПрямыхРасходовНУ(ТаблицаБазыРаспределения, ТекстБазыРаспределения)
	
	БазаРаспределенияПрямыхРасходов = Константа.БазаРаспределенияПрямыхРасходов.Получить(ДатаКон);	                                                                                                       
	БухИт = СоздатьОбъект("БухгалтерскиеИтоги"); БухИт.ИспользоватьРазделительУчета(ЮрЛицо);
	
	Если БазаРаспределенияПрямыхРасходов = Перечисление.БазаРаспределенияПрямыхРасходов.СуммаПрямыхЗатрат Тогда
		
		ТекстБазыРаспределения = Строка(Перечисление.БазаРаспределенияПрямыхРасходов.СуммаПрямыхЗатрат);
		// Прямые расходы  - это остатки по счету Н01.05 полученные после выполнения регламентной процедуры 
		// расчета сумм списания материалов и товаров
		БухИт.ИспользоватьСубконто(СубконтоВидыПродукцииИУслуг,,,);
		БухИт.ВыполнитьЗапрос(ДатаНач, ДатаКон, "Н01.05",,,,,);
		БухИт.ВыбратьСубконто(СубконтоВидыПродукцииИУслуг);
		Пока БухИт.ПолучитьСубконто(СубконтоВидыПродукцииИУслуг) = 1 Цикл
			Если (БухИт.Субконто(СубконтоВидыПродукцииИУслуг).ТипНоменклатуры = Перечисление.ТипыНоменклатуры.Товар)
			или (БухИт.Субконто(СубконтоВидыПродукцииИУслуг).ТипНоменклатуры = Перечисление.ТипыНоменклатуры.ПосредническаяУслуга) Тогда
				Продолжить;
			КонецЕсли;
			
			СуммаПрямыхЗатрат = БухИт.ДО();
			
			Если СуммаПрямыхЗатрат > 0 Тогда
				ТаблицаБазыРаспределения.НоваяСтрока();
				ТаблицаБазыРаспределения.ВидНоменклатуры = БухИт.Субконто(СубконтоВидыПродукцииИУслуг);
				ТаблицаБазыРаспределения.БазаРаспределения = СуммаПрямыхЗатрат;
			КонецЕсли;
		КонецЦикла;
		
	ИначеЕсли БазаРаспределенияПрямыхРасходов = Перечисление.БазаРаспределенияПрямыхРасходов.Выручка Тогда
		ТекстБазыРаспределения = Строка(Перечисление.БазаРаспределенияПрямыхРасходов.Выручка);
		// Пропорционально выручке полученной от реализации продукции 
		БухИт.ИспользоватьПланСчетов(ОсновнойПланСчетов());
		БухИт.ИспользоватьСубконто(ВидыСубконто.Номенклатура,, 1);
		БухИт.ВыполнитьЗапрос(ДатаНач, ДатаКон, "Н06.01",,, 1,, "С");
		БухИт.ВыбратьСубконто(ВидыСубконто.Номенклатура);
		Пока БухИт.ПолучитьСубконто(ВидыСубконто.Номенклатура) = 1 Цикл
			
			СуммаВыручки = БухИт.КО();
			
			Если СуммаВыручки > 0 Тогда
				ТаблицаБазыРаспределения.НоваяСтрока();
				ТаблицаБазыРаспределения.ВидНоменклатуры = ПолучитьВидПродукции(БухИт.Субконто(ВидыСубконто.Номенклатура));
				ТаблицаБазыРаспределения.БазаРаспределения = СуммаВыручки;	
			КонецЕсли;
		КонецЦикла;
		
		ТаблицаБазыРаспределения.Свернуть("ВидНоменклатуры", "БазаРаспределения");
		
		// Для формирования печатной формы добавим в таблицу дополнительные графы
		Если ФормироватьПечатнуюФорму = 1 Тогда
			ТаблицаБазыРаспределения.НоваяКолонка("РасшифровкаБазыОСВПоСчету", "СписокЗначений");
		КонецЕсли;
		
	ИначеЕсли БазаРаспределенияПрямыхРасходов = Перечисление.БазаРаспределенияПрямыхРасходов.ПлановаяСебестоимость Тогда
		
		ТекстБазыРаспределения = Строка(Перечисление.БазаРаспределенияПрямыхРасходов.ПлановаяСебестоимость);
		// Пропорционально выпуску продукции по плановой себестоимости
		// Предполагается что до того как выполнен регламентный расчет себестоимости в бух учете
		// данные по выпуску продукции в нем отражаются по плановой себестоимости
		БухИт = СоздатьОбъект("БухгалтерскиеИтоги"); БухИт.ИспользоватьРазделительУчета(ЮрЛицо);
		БухИт.ИспользоватьПланСчетов(ОсновнойПланСчетов());
		БухИт.ИспользоватьСубконто(СубконтоВидыПродукцииИУслуг);
		БухИт.ИспользоватьСубконто(ВидыСубконто.СтоимостьВыпуска, Перечисление.СтоимостьВыпуска.ПлановаяСтоимость, 2);
		БухИт.ВыполнитьЗапрос(ДатаНач, ДатаКон, "40",,,,, "С");
		БухИт.ВыбратьСубконто(СубконтоВидыПродукцииИУслуг);
		Пока БухИт.ПолучитьСубконто(СубконтоВидыПродукцииИУслуг) = 1 Цикл
			
			СуммаВыпускаПлановая = БухИт.КО();
			
			Если СуммаВыпускаПлановая > 0 Тогда
				ТаблицаБазыРаспределения.НоваяСтрока();
				ТаблицаБазыРаспределения.ВидНоменклатуры = БухИт.Субконто(СубконтоВидыПродукцииИУслуг);
				ТаблицаБазыРаспределения.БазаРаспределения = СуммаВыпускаПлановая;
				
				// Добавим расшифровки, если формируется печатная форма
				Если ФормироватьПечатнуюФорму = 1 Тогда
					
					Расшифровка = СоздатьОбъект("СписокЗначений");
					ОсновнаяРасшифровкаОСВ.Выгрузить(Расшифровка);
					Расшифровка.Установить("Счет", СчетПоКоду("40"));
					Расшифровка.Установить("ВидСубконто1", СубконтоВидыПродукцииИУслуг);
					Расшифровка.Установить("Субконто1", БухИт.Субконто(СубконтоВидыПродукцииИУслуг));
					Расшифровка.Установить("ОтборСубконто1", 2);
					Расшифровка.Установить("ВидСубконто2", ВидыСубконто.СтоимостьВыпуска);
					Расшифровка.Установить("Субконто2", Перечисление.СтоимостьВыпуска.ПлановаяСтоимость);
					Расшифровка.Установить("ОтборСубконто2", 1);
					ТаблицаБазыРаспределения.РасшифровкаБазыОСВПоСчету = Расшифровка;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры // ПолучитьТаблицуРаспределенияПрямыхРасходовНУ()

//******************************************************************************
// РаспределениеПрямыхРасходовН01_06()
//
// Параметры:
//  Нет.
//
// Вызывается из формул элементов диалога:
//  Нет.
//
// Описание:
//  Закрытие счета Н01.06 в дебет счета Н01.05 в соответствии с методом
//  выбранным в константе "БазаРаспределенияПрямыхРасходов"
//
Процедура РаспределениеПрямыхРасходовН01_06()
	
	Если Операция.КоличествоПроводок() > 0 Тогда
		Операция.ЗаписатьПроводки();
	КонецЕсли;
	
	СчН01_05 = СчетПоКоду("Н01.05");
	СчН01_06 = СчетПоКоду("Н01.06");
	
	ТаблицаБазыРаспределения = СоздатьОбъект("ТаблицаЗначений");
	ТаблицаБазыРаспределения.НоваяКолонка("ВидНоменклатуры");
	ТаблицаБазыРаспределения.НоваяКолонка("БазаРаспределения", "Число");                          
	
	// Формирование печатной формы
	Если ФормироватьПечатнуюФорму = 1 Тогда
		НаименованиеРегламентнойОперации = "Распределение прямых расходов (Н01.06)";
		Таб.ВывестиСекцию("РегламентнаяОперацияНУ");
		ИнициализироватьРасшифровкуРаспределенияПрямыхРасходов();
		ТаблицаБазыРаспределения.НоваяКолонка("РасшифровкаБазыОСВПоСчету", "СписокЗначений");
	КонецЕсли;
	
	ТекстБазыРаспределения ="";
	ПолучитьТаблицуРаспределенияПрямыхРасходовНУ(ТаблицаБазыРаспределения, ТекстБазыРаспределения);
	
	// Для формирования печатной формы добавим в таблицу дополнительные графы
	Если ФормироватьПечатнуюФорму = 1 Тогда
		ТаблицаБазыРаспределения.НоваяКолонка("МатериальныеРасходы", "Число");
		ТаблицаБазыРаспределения.НоваяКолонка("Амортизация",         "Число");
		ТаблицаБазыРаспределения.НоваяКолонка("ОплатаТруда",         "Число");
		ТаблицаБазыРаспределения.НоваяКолонка("ЕСН",                 "Число");  
		ТаблицаБазыРаспределения.НоваяКолонка("Другие",              "Число");  
	КонецЕсли;
	
	// Расчет коэффициента распределения расходов на ЕНВД и не ЕНВД.
	КоэффициентРаспределения = КоэффициентРаспределенияПоВидамДеятельности(0, 0, ФормироватьПечатнуюФорму);
	
	// таблица для хранения распределенных прямых расходов
	ТаблицаРаспределенияСчетН01_06 = СоздатьОбъект("ТаблицаЗначений");
	ТаблицаРаспределенияСчетН01_06.НоваяКолонка("ВидНоменклатуры");
	ТаблицаРаспределенияСчетН01_06.НоваяКолонка("ГруппаВидРасхода");
	ТаблицаРаспределенияСчетН01_06.НоваяКолонка("Сумма", "Число", 15, 2);
	
	БазаРаспределения = ТаблицаБазыРаспределения.Итог("БазаРаспределения");
	
	БухИт = СоздатьОбъект("БухгалтерскиеИтоги"); БухИт.ИспользоватьРазделительУчета(ЮрЛицо);
	БухИт.ИспользоватьПланСчетов(ОсновнойПланСчетов());
	БухИт.ИспользоватьСубконто(ВидыСубконто.ГруппыВидыРасходов,, 1);
	БухИт.ВыполнитьЗапрос(ДатаНач, ДатаКон, СчН01_06,,, 1,, "С");
	Если БухИт.ВыбратьСубконто(ВидыСубконто.ГруппыВидыРасходов) = 1 Тогда
		Если БазаРаспределения > 0 Тогда // если есть база  
			
			Пока БухИт.ПолучитьСубконто(ВидыСубконто.ГруппыВидыРасходов) = 1 Цикл
				ГруппыВидРасходов = БухИт.Субконто(ВидыСубконто.ГруппыВидыРасходов);
				
				Если (ГруппыВидРасходов = Перечисление.ГруппыВидыРасходов.ОплатаТруда)
				или (ГруппыВидРасходов = Перечисление.ГруппыВидыРасходов.ЕСН) Тогда
					
					// Расходы на оплату труда и ЕСН распределять не надо т.к.:
					//  - На счет Н01.06 попадают расходы на оплату труда,
					//    которые не относятся к деятельности облагаемой ЕНВД.
					//  - ЕСН не может относиться к деятельности облагаемой ЕНВД.
					ВсегоРасходов = БухИт.ДО()-БухИт.КО();
					СуммаСписанияЕНВД = 0;
					СуммаСписания     = ВсегоРасходов;
					
				Иначе
					ВсегоРасходов = БухИт.ДО()-БухИт.КО();
					СуммаСписанияЕНВД = Окр(ВсегоРасходов*(1-КоэффициентРаспределения), 2);
					СуммаСписания     = ВсегоРасходов - СуммаСписанияЕНВД;
				КонецЕсли;
				
				НакопленнаяБаза = 0;
				Списано = 0;  
				ТаблицаБазыРаспределения.ВыбратьСтроки();
				Пока ТаблицаБазыРаспределения.ПолучитьСтроку() = 1 Цикл
					НакопленнаяБаза = НакопленнаяБаза + ТаблицаБазыРаспределения.БазаРаспределения;
					Списать = Окр(СуммаСписания * НакопленнаяБаза / БазаРаспределения, 2) - Списано;
					Списано = Списано + Списать;
					
					Если Списать > 0 Тогда
						Операция.НоваяПроводка(); Операция.РазделительУчета = ЮрЛицо;
						Операция.НомерЖурнала = "НУ";
						Операция.СодержаниеПроводки = "Распределение прямых расходов";
						Операция.Дебет.Счет = СчН01_05;
						Операция.Дебет.Субконто(ВидыСубконто.ГруппыВидыРасходов, ГруппыВидРасходов);
						Операция.Дебет.Субконто(СубконтоВидыПродукцииИУслуг,     ТаблицаБазыРаспределения.ВидНоменклатуры);
						
						Операция.Кредит.Счет = СчН01_06;
						Операция.Кредит.Субконто(ВидыСубконто.ГруппыВидыРасходов, ГруппыВидРасходов);
						Операция.Сумма = Списать;
						
						// Дополнительное заполнение таблицы для формирования печатной формы
						Если ФормироватьПечатнуюФорму = 1 Тогда
							Если ГруппыВидРасходов = Перечисление.ГруппыВидыРасходов.ОплатаТруда Тогда
								ТаблицаБазыРаспределения.ОплатаТруда = Списать;
								
							ИначеЕсли ГруппыВидРасходов = Перечисление.ГруппыВидыРасходов.ЕСН Тогда
								ТаблицаБазыРаспределения.ЕСН = Списать;
								
							ИначеЕсли ГруппыВидРасходов = Перечисление.ГруппыВидыРасходов.Амортизация Тогда
								ТаблицаБазыРаспределения.Амортизация = Списать;
								
							ИначеЕсли ГруппыВидРасходов = Перечисление.ГруппыВидыРасходов.МатериальныеРасходы Тогда
								ТаблицаБазыРаспределения.МатериальныеРасходы = Списать;  
								
							Иначе 
								ТаблицаБазыРаспределения.Другие = Списать;  
							КонецЕсли;
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;
				
				// Списание распределяемых расходов относящихся к деятельности облагаемой ЕНВД.
				Если СуммаСписанияЕНВД > 0 Тогда
					Операция.НоваяПроводка(); Операция.РазделительУчета = ЮрЛицо;
					Операция.НомерЖурнала = "НУ";
					Операция.СодержаниеПроводки = "Списание расходов (ЕНВД)";
					Операция.Кредит.Счет  = СчН01_06;
					Операция.Кредит.ГруппыВидыРасходов = ГруппыВидРасходов;
					Операция.Сумма = СуммаСписанияЕНВД;
				КонецЕсли;
				
				// Дополнительное заполнение таблицы для формирования печатной формы
				Если ФормироватьПечатнуюФорму = 1 Тогда
					Если ТаблицаРасшифровкаРегламентнойОперации.КоличествоСтрок() = 0 Тогда
						ТаблицаРасшифровкаРегламентнойОперации.НоваяСтрока();
						ТаблицаРасшифровкаРегламентнойОперации.НаименованиеБазыРаспределения = ТекстБазыРаспределения;
						
						// Добавим расшифровку распределения прямых расходов по видам номенклатуры
						Расшифровка = СоздатьОбъект("СписокЗначений");
						Расшифровка.ДобавитьЗначение("РаспределениеПрямыхРасходов", "Наименование таблицы");
						Расшифровка.ДобавитьЗначение(ТаблицаБазыРаспределения, "Таблица данных");
						Расшифровка.ДобавитьЗначение(ДатаДок, "Дата операции");
						ТаблицаРасшифровкаРегламентнойОперации.РаспределениеПрямыхРасходов = Расшифровка;
					КонецЕсли;
					
					Если ГруппыВидРасходов = Перечисление.ГруппыВидыРасходов.ОплатаТруда Тогда
						ТаблицаРасшифровкаРегламентнойОперации.ОплатаТруда      = Списано;
						ТаблицаРасшифровкаРегламентнойОперации.ОплатаТруда_ЕНВД = СуммаСписанияЕНВД;
						
					ИначеЕсли ГруппыВидРасходов = Перечисление.ГруппыВидыРасходов.ЕСН Тогда
						ТаблицаРасшифровкаРегламентнойОперации.ЕСН      = Списано;
						ТаблицаРасшифровкаРегламентнойОперации.ЕСН_ЕНВД = СуммаСписанияЕНВД;
						
					ИначеЕсли ГруппыВидРасходов = Перечисление.ГруппыВидыРасходов.Амортизация Тогда
						ТаблицаРасшифровкаРегламентнойОперации.Амортизация      = Списано;
						ТаблицаРасшифровкаРегламентнойОперации.Амортизация_ЕНВД = СуммаСписанияЕНВД;
						
					ИначеЕсли ГруппыВидРасходов = Перечисление.ГруппыВидыРасходов.МатериальныеРасходы Тогда
						ТаблицаРасшифровкаРегламентнойОперации.МатериальныеРасходы      = Списано;
						ТаблицаРасшифровкаРегламентнойОперации.МатериальныеРасходы_ЕНВД = СуммаСписанияЕНВД;
						
					Иначе 
						ТаблицаРасшифровкаРегламентнойОперации.ДругиеРасходы      = ТаблицаРасшифровкаРегламентнойОперации.ДругиеРасходы + Списано;
						ТаблицаРасшифровкаРегламентнойОперации.ДругиеРасходы_ЕНВД = ТаблицаРасшифровкаРегламентнойОперации.ДругиеРасходы_ЕНВД + СуммаСписанияЕНВД;
						
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		Иначе
			ТекстСообщения = "База распределения равна нулю. Счет Н01.06 автоматически распределить невозможно.";
			глСообщениеПроведения(ТекстСообщения, ТекущийДокумент(), -1);
		КонецЕсли;
	КонецЕсли;	
	
	// Формирование печатной формы
	Если ФормироватьПечатнуюФорму = 1 Тогда
		
		// В таблице расшифровки необходимо добавить
		ДополнительныеДанные = СоздатьОбъект("СписокЗначений");
		ДополнительныеДанные.ДобавитьЗначение(КоэффициентРаспределения, "Коэффициент");
		ДополнительныеДанные.ДобавитьЗначение(ТаблицаРасшифровкаРегламентнойОперацииДополнительно, "Расшифровка");
		
		ВыводВОтчетИнформацииОВыполненииОперации("ТаблицаРаспределяемыхПрямыхРасходов", // идентификатор отображаемой таблицы
		ТаблицаРасшифровкаРегламентнойОперации, // таблица с данными, для заполнения печатной формы
		ДополнительныеДанные, // дополнительные данные
		"Распределение прямых расходов (Н01.06)", //строка, выводимая в отчет-список выполненных операций, в случае если операция выполнена
		"По счету Н01.06 """ + СчН01_06.ПолнНаименование + """ расходов нет"); //строка, выводимая в отчет-список выполненных операций, в случае если операция не выполнена
	КонецЕсли;
	
КонецПроцедуры // РаспределениеПрямыхРасходовН01_06()

//******************************************************************************
// ПроанализироватьОстаткиНЗП(РегистрНЗП)
//
// Параметры:
//  РегистрНЗП - таблица, содержащая информацию по расчету сумм  
//               незавершенного производства по видам номенклатуры
//
// Вызывается из формул элементов диалога:
//  Нет.
//
// Описание:
//  Анализирует документы по вводу остатков незавершенного производства,
//  рассчитывает и заполняет таблицу РегистрНЗП значениями начальных и 
//  незавершенного производства за текущий период.
//  Заполняются значения колонок: "ВидНоменклатуры", "Способ", "НачСальдоНЗП",
//  "КонСальдоНЗП", "ТехноПотери"
//
Процедура ПроанализироватьОстаткиНЗП(РегистрНЗП)
	
	// анализируются наличие документов НЗП за последние два месяца
	ДатаНачЗапр = НачМесяца((ДатаНач-1));
	ДатаКонЗапр = ДатаКон;
	
	ЗапросНЗПТекПер = СоздатьОбъект("Запрос");
	ТекстЗапроса = 
	"//{{ЗАПРОС(НЗП)
	|Период с ДатаНачЗапр по ДатаКонЗапр;
	|ОбрабатыватьДокументы все;
	|Обрабатывать НеПомеченныеНаУдаление;
	|ТекущийДокумент = Документ.ПрямыеРасходыНезавершенногоПроизводства.ТекущийДокумент;
	|ДатаДок         = Документ.ПрямыеРасходыНезавершенногоПроизводства.ДатаДок;
	|Способ          = Документ.ПрямыеРасходыНезавершенногоПроизводства.СпособРасчета;
	|ВидНоменклатуры = Документ.ПрямыеРасходыНезавершенногоПроизводства.ВидНоменклатуры;
	|ВидРасхода      = Документ.ПрямыеРасходыНезавершенногоПроизводства.ВидРасхода;
	|Количество      = Документ.ПрямыеРасходыНезавершенногоПроизводства.Количество;
	|ТехноПотери     = Документ.ПрямыеРасходыНезавершенногоПроизводства.ТехПотери;
	|Сумма           = Документ.ПрямыеРасходыНезавершенногоПроизводства.Сумма;
	|Функция ВсегоСумма 	 = Сумма(Сумма);
	|Функция ВсегоКоличество = Сумма(Количество);
	|Функция ВсегоТехноПотери  = Сумма(ТехноПотери);
	|Группировка ВидНоменклатуры Без Групп;
	|Группировка Месяц;
	|Группировка ВидРасхода;
	|"//}}ЗАПРОС
	;                                                                                            
	
	// Если ошибка в запросе, то выход из процедуры
	Если ЗапросНЗПТекПер.Выполнить(ТекстЗапроса) = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Пока ЗапросНЗПТекПер.Группировка(1) = 1 Цикл
		// Расчет исходных данных для определения коэффициентов НЗП для текущего вида номенклатуры
		РегистрНЗП.НоваяСтрока();
		РегистрНЗП.ВидНоменклатуры = ЗапросНЗПТекПер.ВидНоменклатуры;
		РегистрНЗП.Способ = 		 ЗапросНЗПТекПер.Способ;   
		
		ТабВидовРасходов = СоздатьОбъект("ТаблицаЗначений");   
		ТабВидовРасходов.НоваяКолонка("ВидРасхода");
		ТабВидовРасходов.НоваяКолонка("Сумма",    "Число", 17, 2);
		ТабВидовРасходов.НоваяКолонка("СуммаНЗП", "Число", 17, 2);
		РегистрНЗП.РасшифровкаПоВидамРасходов = ТабВидовРасходов;
		
		// проверка повторно введенных данных в разных документах текущего месяца
		Счетчик = 0;
		СписокДокументов = СоздатьОбъект("СписокЗначений");
		
		Пока ЗапросНЗПТекПер.Группировка(2) = 1 Цикл
			
			Если НачМесяца(ЗапросНЗПТекПер.ДатаДок) = ДатаНачЗапр Тогда
				// это предыдущий месяц - там нужно взять информацию о начальных остатках НЗП
				Если ЗапросНЗПТекПер.Способ = 1 Тогда
					РегистрНЗП.НачСальдоНЗП = ЗапросНЗПТекПер.ВсегоКоличество;
				Иначе
					РегистрНЗП.НачСальдоНЗП = ЗапросНЗПТекПер.ВсегоСумма;
				КонецЕсли;	
			Иначе
				// это текущий месяц - отсюда берем конечный остаток НЗП данного месяца
				Если ЗапросНЗПТекПер.Способ = 1 Тогда
					РегистрНЗП.КонСальдоНЗП = ЗапросНЗПТекПер.ВсегоКоличество;
					РегистрНЗП.ТехноПотери  = ЗапросНЗПТекПер.ВсегоТехноПотери;
					
				ИначеЕсли  ЗапросНЗПТекПер.Способ = 4 Тогда  
					
					ТабВидовРасходов = СоздатьОбъект("ТаблицаЗначений");   
					ТабВидовРасходов.НоваяКолонка("ВидРасхода");
					ТабВидовРасходов.НоваяКолонка("Сумма",    "Число", 17, 2);
					ТабВидовРасходов.НоваяКолонка("СуммаНЗП", "Число", 17, 2);
					Пока ЗапросНЗПТекПер.Группировка(3) = 1 Цикл 
						ТабВидовРасходов.НоваяСтрока(); 
						ТабВидовРасходов.ВидРасхода =  ЗапросНЗПТекПер.ВидРасхода;
						ТабВидовРасходов.СуммаНЗП = ЗапросНЗПТекПер.ВсегоСумма;
						
					КонецЦикла;
					РегистрНЗП.КонСальдоНЗП = ЗапросНЗПТекПер.ВсегоСумма;
					РегистрНЗП.РасшифровкаПоВидамРасходов = ТабВидовРасходов;
					
				Иначе
					РегистрНЗП.КонСальдоНЗП = ЗапросНЗПТекПер.ВсегоСумма;
				КонецЕсли;	
				
				// Контролируем количество документов использованных для ввода остатка (должен быть один)
				Счетчик = Счетчик + 1;
				СписокДокументов.ДобавитьЗначение(ЗапросНЗПТекПер.ТекущийДокумент);
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры // ПроанализироватьОстаткиНЗП()

//******************************************************************************
// РассчитатьДополнительныеПараметрыНЗП(ТаблКоэффНЗП, ПланСебест)
//
// Параметры:
//  ТаблКоэффНЗП - таблица, содержащая информацию по расчету сумм  
//               незавершенного производства по видам номенклатуры
//  СписокВидовНоменклатуры - список видов номенклатуры по которым было движение на счете Н01.05.
//  ПланСебест - ссылка на результаты запроса для определения плановой себестоимости продукции
//
// Вызывается из формул элементов диалога:
//  Нет.
//
// Описание:
//  Рассчитываются дополнительные параметры, которые применяются при определении 
//  оценочной суммы незавершенного производства в НУ (см. ст. 319 НК РФ)
//  Заполняются значения колонок: "ПриходМатКол", "ВозвратМатКол", "ВыпРабСум", "ВыпПродСум"
//
Процедура РассчитатьДополнительныеПараметрыНЗП(ТаблКоэффНЗП, СписокВидовНоменклатуры, ПланСебест)
	
	БухИт20 = СоздатьОбъект("БухгалтерскиеИтоги"); БухИт20.ИспользоватьРазделительУчета(ЮрЛицо);
	БухИт20.ИспользоватьПланСчетов(ОсновнойПланСчетов());
	БухИт20.ИспользоватьСубконто(СубконтоВидыПродукцииИУслуг,, 1);
	БухИт20.ИспользоватьКорСубконто(ВидыСубконто.Материалы,, 1);
	БухИт20.ВыполнитьЗапрос(ДатаНач, ДатаКон, "20", "10",, 2,, "К");
	
	БухИтН06 = СоздатьОбъект("БухгалтерскиеИтоги"); БухИтН06.ИспользоватьРазделительУчета(ЮрЛицо);
	БухИтН06.ИспользоватьПланСчетов(ОсновнойПланСчетов());
	БухИтН06.ИспользоватьСубконто(ВидыСубконто.Номенклатура,, 1);
	БухИтН06.ВыполнитьЗапрос(ДатаНач, ДатаКон, "Н06.01",,, 1,, "С");
	
	КоличествоВидовНоменклатуры = СписокВидовНоменклатуры.РазмерСписка();
	
	Для СчетчикЦикла = 1 По КоличествоВидовНоменклатуры Цикл
		
		ВидНоменклатуры = СписокВидовНоменклатуры.ПолучитьЗначение(СчетчикЦикла, );
		
		Если глПолучитьСтрокуПоЗначению(ТаблКоэффНЗП, ВидНоменклатуры, "ВидНоменклатуры") = 0 Тогда
			ТаблКоэффНЗП.НоваяСтрока();
			ТаблКоэффНЗП.ВидНоменклатуры = ВидНоменклатуры;
			
			Если (ВидНоменклатуры.ТипНоменклатуры = Перечисление.ТипыНоменклатуры.Работа)
			или (ВидНоменклатуры.ТипНоменклатуры = Перечисление.ТипыНоменклатуры.Услуга) Тогда
				ТаблКоэффНЗП.Способ = 2;
				
			ИначеЕсли ПустоеЗначение(ВидНоменклатуры.ОсновнойМатериал) = 1 Тогда
				ТаблКоэффНЗП.Способ = 3;
				
			Иначе
				ТаблКоэффНЗП.Способ = 1;
			КонецЕсли;
		КонецЕсли;
		
		Если ТаблКоэффНЗП.Способ = 1 Тогда
			// первый способ расчета
			БухИт20.ВыбратьСубконто(СубконтоВидыПродукцииИУслуг);
			Если БухИт20.ПолучитьСубконто(СубконтоВидыПродукцииИУслуг, , ВидНоменклатуры) = 1 Тогда
				Если ПустоеЗначение(ВидНоменклатуры.ОсновнойМатериал) = 0 Тогда
					ОсновнойМатериал = ВидНоменклатуры.ОсновнойМатериал;
					БухИт20.ВыбратьКорСубконто(ВидыСубконто.Материалы);
					Если БухИт20.ПолучитьКорСубконто(ВидыСубконто.Материалы, , ОсновнойМатериал) = 1 Тогда
						ТаблКоэффНЗП.Приход = БухИт20.КорДО("К");
						ТаблКоэффНЗП.Возврат= БухИт20.КорКО("К");
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
			// расчет коэффициента
			// Коэффициент = КонОстатокОснМатериалаНЗП / ( НачОстатокОснМатериалаНЗП + Приход - Возврат - Технопотери )
			Если (ТаблКоэффНЗП.НачСальдоНЗП + ТаблКоэффНЗП.Приход - ТаблКоэффНЗП.Возврат - ТаблКоэффНЗП.ТехноПотери) <> 0 Тогда
				ТаблКоэффНЗП.Коэффициент = Окр(ТаблКоэффНЗП.КонСальдоНЗП/(ТаблКоэффНЗП.НачСальдоНЗП+ТаблКоэффНЗП.Приход-ТаблКоэффНЗП.Возврат-ТаблКоэффНЗП.ТехноПотери), 4);
			КонецЕсли;
			
		ИначеЕсли ТаблКоэффНЗП.Способ = 2 Тогда
			
			ТаблКоэффНЗП.ВыпРабСум = ТаблКоэффНЗП.ВыпРабСум + ТаблКоэффНЗП.КонСальдоНЗП;
			
			// второй способ расчета
			БухИтН06.ВыбратьСубконто(ВидыСубконто.Номенклатура);
			Пока БухИтН06.ПолучитьСубконто(ВидыСубконто.Номенклатура) = 1 Цикл
				Если ПолучитьВидПродукции(БухИтН06.Субконто(ВидыСубконто.Номенклатура)) = ВидНоменклатуры Тогда
					// подсчитываем сумму реализованных работ или услуг данного вида за расчетный период
					ТаблКоэффНЗП.ВыпРабСум = ТаблКоэффНЗП.ВыпРабСум + БухИтН06.КО("С");
					
				КонецЕсли;    
			КонецЦикла;
			
			// расчет коэффициента
			// Коэффициент = ОстатокНЗПвДоговорныхЦенах / ( ОстатокНЗПвДоговорныхЦенах + ОстатокНЗПвДоговорныхЦенах )
			Если (ТаблКоэффНЗП.ВыпРабСум) <> 0 Тогда
				ТаблКоэффНЗП.Коэффициент = Окр(ТаблКоэффНЗП.КонСальдоНЗП/(ТаблКоэффНЗП.ВыпРабСум), 4);
			КонецЕсли;
			
		ИначеЕсли ТаблКоэффНЗП.Способ = 3 Тогда
			// третий способ расчета
			ПланСебест.ВыбратьСубконто(ВидыСубконто.Номенклатура);
			Пока ПланСебест.ПолучитьСубконто(ВидыСубконто.Номенклатура) = 1 Цикл
				Если ПолучитьВидПродукции(ПланСебест.Субконто(ВидыСубконто.Номенклатура)) = ВидНоменклатуры Тогда
					// подсчитываем сумму реализованных работ или услуг данного вида за расчетный период
					ПлановаяСебестоимость = ПланСебест.ДО("С");
					Если ПланСебест.ПолучитьКорСубконто(ВидыСубконто.СтоимостьВыпуска, , Перечисление.СтоимостьВыпуска.ПлановаяСтоимость) = 1 Тогда
						Если ПланСебест.ДО("С") <> 0 Тогда
							ПлановаяСебестоимость = ПланСебест.КорДО("С");
						КонецЕсли;    
					КонецЕсли;
					
					ТаблКоэффНЗП.ВыпПродСум = ТаблКоэффНЗП.ВыпПродСум + ПлановаяСебестоимость;
					
				КонецЕсли;
			КонецЦикла;
			
			// расчет коэффициента
			// расчет коэффициента для третьего способа в данный момент выполнить невозможно, т.к. еще не известна
			// сумма прямых затрат текущего периода, данный расчет будет выполнен в момент определения
			// доли НЗП в общей сумме прямых расходов текущего периода
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры // РассчитатьДополнительныеПараметрыНЗП()

//******************************************************************************
// РассчитатьКоэффициентыНЗП(РегистрНЗП, ПланСебест)
//
// Параметры:
//  РегистрНЗП - таблица, содержащая информацию по расчету сумм  
//               незавершенного производства по видам номенклатуры
//  ПланСебест - результаты запроса к бухгалтерским итогам для определения себестоимости ГП и ПФ 
//
// Вызывается из формул элементов диалога:
//  Нет.
//
// Описание:
//  Анализирует документы по вводу остатков незавершенного производства,
//  рассчитывает коэффициенты незавершенного производства и записывает их в таблицу
//
Процедура РассчитатьКоэффициентыНЗП(РегистрНЗП, ПланСебест)
	
	РегистрНЗП.Очистить();
	РегистрНЗП.НоваяКолонка("ВидНоменклатуры", "Справочник");
	РегистрНЗП.НоваяКолонка("Способ",		"Число");
	РегистрНЗП.НоваяКолонка("Коэффициент", "Число");
	// Исходные данные для расчета коэффициента НЗП
	РегистрНЗП.НоваяКолонка("НачСальдоНЗП","Число", 15, 3);
	РегистрНЗП.НоваяКолонка("КонСальдоНЗП","Число", 15, 3);
	// Дополнительные исходные данные для 1-го способа по ст. 319
	РегистрНЗП.НоваяКолонка("Приход",		"Число", 15, 3);
	РегистрНЗП.НоваяКолонка("Возврат", 		"Число", 15, 3);
	РегистрНЗП.НоваяКолонка("ТехноПотери",	"Число", 15, 3);
	// Дополнительные исходные данные для 2-го способа по ст. 319
	РегистрНЗП.НоваяКолонка("ВыпРабСум", "Число", 15, 2);
	// Дополнительные исходные данные для 3-го способа по ст. 319
	РегистрНЗП.НоваяКолонка("ВыпПродСум","Число", 15, 2);
	// Дополнительные данные по прямым расходам текущего периода 
	// (будут нужны при формировании печатной формы регл. опер)
	РегистрНЗП.НоваяКолонка("НачСуммаНЗП",	"Число", 15, 3);
	РегистрНЗП.НоваяКолонка("РасшифровкаПоВидамРасходов", "ТаблицаЗначений");
	
	// Сумма прямых расходов, отнесенных на стоимость выпущенной продукции (работ, услуг)
	РегистрНЗП.НоваяКолонка("СуммаПрямыхЗатрат","Число", 15, 2);
	РегистрНЗП.НоваяКолонка("СебестоимостьПродукции", "ТаблицаЗначений");
	
	// Подготовка исходных данных для расчета коэффициентов НЗП
	// Заполнить таблицу и сформировать значения колонок: "ВидНоменклатуры","Способ","НачСальдоНЗП","КонСальдоНЗП","ТехноПотери"
	ПроанализироватьОстаткиНЗП(РегистрНЗП);
	
КонецПроцедуры // РассчитатьКоэффициентыНЗП()

//******************************************************************************
// СформироватьПечатнуюФормуОперацииРасчетаНЗП(ТаблКоэффНЗП)
//
// Параметры:
//  ТаблКоэффНЗП - таблица, содержащая полную информацию по расчету сумм  
//                 незавершенного производства по видам номенклатуры (согласно ст. 319 НК РФ)
//				   Данная таблица служит основой для формирования печатной формы по расчету НЗП
//
// Описание:
//  Формируется расшифровка печатной формы в которой отражается расчет НЗП текущего месяца
//
Процедура СформироватьПечатнуюФормуОперацииРасчетаНЗП(ТаблКоэффНЗП)
	
	ИнициализироватьРасшифровкуРасчетаНЗП(ТаблКоэффНЗП);
	ИнициализироватьСокращеннуюРасшифровкуПоНЗП();
	
	// Из таблицы ТаблКоэффНЗП информацию поместим в таблицы-расшифровки
	// распределив ее по способам расчета НЗП.
	ТаблКоэффНЗП.ВыбратьСТроки();
	Пока ТаблКоэффНЗП.ПолучитьСтроку() = 1 Цикл
		
		СпособРасчетаНЗП = ТаблКоэффНЗП.Способ;
		
		РасшифровкаСтроки  = ТаблицаРасшифровкаРегламентнойОперацииДополнительно.ПолучитьЗначение(СпособРасчетаНЗП, "Расшифровка");
		ТаблицаРасшифровки = РасшифровкаСтроки.Получить("Таблица данных");
		
		ТаблицаРасшифровки.НоваяСтрока();
		ТаблицаРасшифровки.ВидНоменклатуры = ТаблКоэффНЗП.ВидНоменклатуры;
		ТаблицаРасшифровки.НачСальдоНЗП    = ТаблКоэффНЗП.НачСуммаНЗП;
		ТаблицаРасшифровки.РасшифровкаПоВидамРасходов = ТаблКоэффНЗП.РасшифровкаПоВидамРасходов;
		ТаблицаРасшифровки.ВсегоРасходов   = ТаблицаРасшифровки.РасшифровкаПоВидамРасходов.Итог("Сумма");
		
		// Расшифровка - оборотно сальдовая ведомость по счету Н01.05 с разворотом по видам расходов
		Расшифровка = СоздатьОбъект("СписокЗначений");
		ОсновнаяРасшифровкаОСВ.Выгрузить(Расшифровка);
		Расшифровка.Установить("Счет", СчетПоКоду("Н01.05"));
		Расшифровка.Установить("ВидСубконто1", СубконтоВидыПродукцииИУслуг);
		Расшифровка.Установить("Субконто1", ТаблицаРасшифровки.ВидНоменклатуры);
		Расшифровка.Установить("ОтборСубконто1", 2);
		Расшифровка.Установить("ВидСубконто2", ВидыСубконто.ГруппыВидыРасходов);
		Расшифровка.Установить("ОтборСубконто2", 1);
		ТаблицаРасшифровки.РасшифровкаОСВПоСчету = Расшифровка;
		
		Если СпособРасчетаНЗП = 1 Тогда // ...для производства, связанного с обработкой и переработкой сырья
			ТаблицаРасшифровки.ОсновнойМатериал     = ТаблКоэффНЗП.ВидНоменклатуры.ОсновнойМатериал;
			ТаблицаРасшифровки.ИсходноеКоличесто    = ТаблКоэффНЗП.НачСальдоНЗП + ТаблКоэффНЗП.Приход - ТаблКоэффНЗП.Возврат - ТаблКоэффНЗП.ТехноПотери;
			ТаблицаРасшифровки.ОстатокНаКонецМесяца = ТаблКоэффНЗП.КонСальдоНЗП;
			ТаблицаРасшифровки.Коэффициент          = ТаблКоэффНЗП.Коэффициент;
			
		ИначеЕсли СпособРасчетаНЗП = 2 Тогда // ...для производства, связанного с выполнением работ и оказанием услуг 
			ТаблицаРасшифровки.ВыполненоЗаказов          = ТаблКоэффНЗП.ВыпРабСум;
			ТаблицаРасшифровки.ОбъемНезавершенныхЗаказов = ТаблКоэффНЗП.КонСальдоНЗП;
			ТаблицаРасшифровки.Коэффициент               = ТаблКоэффНЗП.Коэффициент;
			
		ИначеЕсли СпособРасчетаНЗП = 3 Тогда // ... для прочих налогоплательщиков 
			ТаблицаРасшифровки.ПлановаяСтоимость    = ТаблКоэффНЗП.КонСальдоНЗП + ТаблКоэффНЗП.ВыпПродСум;
			ТаблицаРасшифровки.Коэффициент          = ТаблКоэффНЗП.Коэффициент;
			ТаблицаРасшифровки.ПлановаяСтоимостьНЗП = ТаблКоэффНЗП.КонСальдоНЗП;  
			
		Иначе // произвольное задание НЗП
			ТаблицаРасшифровки.РасшифровкаПоВидамРасходов  = ТаблКоэффНЗП.РасшифровкаПоВидамРасходов;
		КонецЕсли;
		
		ТаблицаРасшифровки.СтоимостьВыпущеннойНоменклатуры = ТаблКоэффНЗП.СуммаПрямыхЗатрат;
		ТаблицаРасшифровки.КонСальдоНЗП = (ТаблКоэффНЗП.НачСуммаНЗП + ТаблицаРасшифровки.ВсегоРасходов) - ТаблицаРасшифровки.СтоимостьВыпущеннойНоменклатуры;
		
		// Формирование строки в таблице расчета стоимости выпущенной продукции (работ, услуг)
		ТаблицаРасшифровкаРегламентнойОперации.НоваяСтрока();
		ТаблицаРасшифровкаРегламентнойОперации.ВидНоменклатуры  = ТаблКоэффНЗП.ВидНоменклатуры;
		ТаблицаРасшифровкаРегламентнойОперации.ТипНоменклатуры  = ТаблКоэффНЗП.ВидНоменклатуры.ТипНоменклатуры; 
		ТаблицаРасшифровкаРегламентнойОперации.РасшифровкаПоВидамРасходов  = ТаблКоэффНЗП.РасшифровкаПоВидамРасходов; 
		ТаблицаРасшифровкаРегламентнойОперации.КонСальдоНЗП     = ТаблицаРасшифровки.КонСальдоНЗП;
		ТаблицаРасшифровкаРегламентнойОперации.СтоимостьВыпуска = ТаблицаРасшифровки.СтоимостьВыпущеннойНоменклатуры;
		
		// Структура таблицы-расшифровки расчета зависит от способа расчета НЗП, поэтому выгружаем уже готовую структуру
		РасшифровкаПрямыхРасходов = "";
		РасшифровкаСтроки.Выгрузить(РасшифровкаПрямыхРасходов);
		ТаблицаРасшифровкаРегламентнойОперации.РасшифровкаПрямыхРасходов = РасшифровкаПрямыхРасходов;
		
		ТаблицаРасшифровкиПрямыхРасходов = СоздатьОбъект("ТаблицаЗначений");
		ТаблицаРасшифровки.Выгрузить(ТаблицаРасшифровкиПрямыхРасходов, ТаблицаРасшифровки.НомерСтроки, ТаблицаРасшифровки.НомерСтроки);
		РасшифровкаПрямыхРасходов.Установить("Таблица данных", ТаблицаРасшифровкиПрямыхРасходов);
		
		// Формирование таблицы - расшифровки распределения прямых расходов по номенклатуре
		СебестоимостьПродукции = ТаблКоэффНЗП.СебестоимостьПродукции;
		Если ТипЗначенияСтр(СебестоимостьПродукции) = "ТаблицаЗначений" Тогда
			ТаблицаРасшифровкаРегламентнойОперации.РасшифровкаВыпускаПродукции = РасшифровкаРаспределенияПрямыхРасходов(ТаблицаРасшифровки.ВидНоменклатуры);
			
			РасшифровкаВыпускаПродукции = ТаблицаРасшифровкаРегламентнойОперации.РасшифровкаВыпускаПродукции.Получить("Таблица данных");
			
			СебестоимостьПродукции.ВыбратьСтроки();
			Пока СебестоимостьПродукции.ПолучитьСтроку() = 1 Цикл
				
				РасшифровкаВыпускаПродукции.НоваяСтрока();
				РасшифровкаВыпускаПродукции.Продукция         = СебестоимостьПродукции.Продукция;
				РасшифровкаВыпускаПродукции.КоличествоВыпуска = СебестоимостьПродукции.КоличествоВыпущено;
				РасшифровкаВыпускаПродукции.ПлановаяСтоимость = СебестоимостьПродукции.ПлановаяСтоимость;
				РасшифровкаВыпускаПродукции.СуммаВыпуска      = СебестоимостьПродукции.СуммаВыпуска;
				
				РасшифровкаВыпускаПродукции.Коэффициент = ?(СебестоимостьПродукции.Итог("ПлановаяСтоимость") = 0, 0, СебестоимостьПродукции.ПлановаяСтоимость/СебестоимостьПродукции.Итог("ПлановаяСтоимость"));
				
				// формирование расшифровки
				Расшифровка = СоздатьОбъект("СписокЗначений");
				ОсновнаяРасшифровкаОСВ.Выгрузить(Расшифровка);
				Расшифровка.Установить("Счет", СебестоимостьПродукции.СчетУчета);
				Расшифровка.Установить("ВидСубконто1", ВидыСубконто.Номенклатура);
				Расшифровка.Установить("Субконто1",    РасшифровкаВыпускаПродукции.Продукция);
				Расшифровка.Установить("ОтборСубконто1", 2);
				Расшифровка.Установить("ВидСубконто2", ВидыСубконто.УсловияПоступленияИВыбытия);
				Расшифровка.Установить("ОтборСубконто2", 1);
				РасшифровкаВыпускаПродукции.РасшифровкаОСВПоСчету = Расшифровка;
			КонецЦикла;
		КонецЕсли;
		
	КонецЦикла;
	
	// Удалим из таблицы строки без данных
	КоличествоСтрок = ТаблицаРасшифровкаРегламентнойОперацииДополнительно.КоличествоСтрок();
	Для СчетчикЦикла = 1 По КоличествоСтрок Цикл
		НомерСтрокиТаблицы = КоличествоСтрок - СчетчикЦикла + 1;
		
		РасшифровкаСтроки = ТаблицаРасшифровкаРегламентнойОперацииДополнительно.ПолучитьЗначение(НомерСтрокиТаблицы, "Расшифровка");
		ТаблицаРасшифровки = РасшифровкаСтроки.Получить("Таблица данных");
		
		Если ТаблицаРасшифровки.КоличествоСтрок() = 0 Тогда
			ТаблицаРасшифровкаРегламентнойОперацииДополнительно.УдалитьСтроку(НомерСтрокиТаблицы);
		КонецЕсли;
	КонецЦикла;
	
	ВыводВОтчетИнформацииОВыполненииОперации("РасчетНЗП_НУ", // идентификатор отображаемой таблицы
	ТаблицаРасшифровкаРегламентнойОперацииДополнительно, // таблица с данными, для заполнения печатной формы
	, // дополнительные данные
	"Расчет стоимости остатков незавершенного производства",  //строка, выводимая в отчет-список выполненных операций, в случае если операция выполнена
	"По счету Н01.05 ""Формирование прямых расходов на производство товаров (работ, услуг) основного производства"" прямых расходов нет"); //строка, выводимая в отчет-список выполненных операций, в случае если операция не выполнена
	
	ВыводВОтчетИнформацииОВыполненииОперации("ПрямыеРасходыНУ", // идентификатор отображаемой таблицы
	ТаблицаРасшифровкаРегламентнойОперации, // таблица с данными, для заполнения печатной формы
	, // дополнительные данные
	"Расчет стоимости выпущенной продукции (работ, услуг)",  //строка, выводимая в отчет-список выполненных операций, в случае если операция выполнена
	"Выпуска продукции в текущем месяце не было"); //строка, выводимая в отчет-список выполненных операций, в случае если операция не выполнена
	
	ВыводВОтчетИнформацииОВыполненииОперации("ТаблицаКорректировкаПродукцииНУ", // идентификатор отображаемой таблицы
	ТаблицаРасшифровкаКорректировкиТоваров, // таблица с данными, для заполнения печатной формы
	"Корректировка средневзвешенной стоимости продукции (полуфабрикатов)", // дополнительные данные
	"Корректировка средневзвешенной стоимости продукции (полуфабрикатов)", //строка, выводимая в отчет-список выполненных операций, в случае если операция выполнена
	"Стоимость продукции (полуфабрикатов) не нуждается в корректировке"); //строка, выводимая в отчет-список выполненных операций, в случае если операция не выполнена
	
	ВыводВОтчетИнформацииОВыполненииОперации("ТаблицаКорректировкаОтгруженнойНоменклатурыНУ", // идентификатор отображаемой таблицы
	ТаблицаРасшифровкаКорректировкиОтгруженныхТоваров, // таблица с данными, для заполнения печатной формы
	"Корректировка фактической стоимости продукции (полуфабрикатов), отгруженной без перехода права собственности", // дополнительные данные
	"Корректировка фактической стоимости продукции (полуфабрикатов), отгруженной без перехода права собственности", //строка, выводимая в отчет-список выполненных операций, в случае если операция выполнена
	"Стоимость продукции (полуфабрикатов), отгруженной без перехода права собственности, не нуждается в корректировке"); //строка, выводимая в отчет-список выполненных операций, в случае если операция не выполнена	
	
КонецПроцедуры // СформироватьПечатнуюФормуОперацииРасчетаНЗП()

//******************************************************************************
// СформироватьКорректирующиеПроводкиПоДвижениюГПиПФвНУ(ТаблицаПроводок, ТабРез)
//
// Параметры:
//  БухИтПрод - результаты выполнения запроса к Бухитогам по операциям движения ГП и полуфабрикатов
//  ТаблицаПроводок - таблица с рассчитанными значениями корректировок 
//  ТабРез - таблица результатов расчета сумм "передельных" списаний (ВидПродукции <- продукция или полуфабрикат) 
//
// Вызывается из формул элементов диалога:
//  Нет.
//
// Описание:
//  Формирует корректирующие проводки для отражения всех движений продукции и полуфабрикатов
//  за месяц по фактической себестоимости. Факты дальнейшего использования полуфабрикатов в
//  производстве (многопередельное производство) фиксируются в специальной таблице ТабРез
//  для использования при расчете себестоимости продукции следующих переделов
//
Процедура СформироватьКорректирующиеПроводкиПоДвижениюГПиПФвНУ(БухИтПрод, ТаблицаПроводок, ТабРез)
	
	ТаблицаПроводок.ВыбратьСтроки();
	Пока ТаблицаПроводок.ПолучитьСтроку() = 1 Цикл
		СуммаКорректировки = ТаблицаПроводок.СуммаРасчет - ТаблицаПроводок.СуммаФакт;
		Если СуммаКорректировки <> 0 Тогда
			// Нужно корректировать
			Операция.НоваяПроводка(); Операция.РазделительУчета = ЮрЛицо;
			Операция.НомерЖурнала = "ФР";
			Операция.СодержаниеПроводки = "Корректировка себест-ти продукции или полуфабр.";
			Операция.Дебет.Счет = ТаблицаПроводок.СчетД;
			Операция.Дебет.Субконто(1, ТаблицаПроводок.СубконтоД1);
			Операция.Дебет.Субконто(2, ТаблицаПроводок.СубконтоД2);
			Операция.Дебет.Субконто(3, ТаблицаПроводок.СубконтоД3);
			Операция.Кредит.Счет = ТаблицаПроводок.СчетК;
			Операция.Кредит.Субконто(1, ТаблицаПроводок.СубконтоК1);
			Операция.Кредит.Субконто(2, ТаблицаПроводок.СубконтоК2);
			Операция.Кредит.Субконто(3, ТаблицаПроводок.СубконтоК3);
			Операция.Сумма = СуммаКорректировки;
		КонецЕсли;
		
		// Формирование печатной формы
		Если ФормироватьПечатнуюФорму = 1 Тогда
			Если БухитПрод.Счет.ПринадлежитГруппе(СчетПоКоду("Н02.04")) = 1 Тогда // корректировка товаров отгруженных
				Если ТаблицаПроводок.ПриходРасход = 2 Тогда // возврат товаров, отгруженных без перехода права собственности
					ТаблицаРасшифровкаРегламентнойОперации.ВозвратСумма       = ТаблицаРасшифровкаРегламентнойОперации.ВозвратСумма -ТаблицаПроводок.СуммаФакт;
					ТаблицаРасшифровкаРегламентнойОперации.ВозвратКоличество  = ТаблицаРасшифровкаРегламентнойОперации.ВозвратКоличество -ТаблицаПроводок.Количество;
					ТаблицаРасшифровкаРегламентнойОперации.РасчетнаяСуммаВозврата    = ТаблицаРасшифровкаРегламентнойОперации.РасчетнаяСуммаВозврата - ТаблицаПроводок.СуммаРасчет;
					ТаблицаРасшифровкаРегламентнойОперации.СуммаКорректировкиВозврата= ТаблицаРасшифровкаРегламентнойОперации.СуммаКорректировкиВозврата - СуммаКорректировки;
					
				Иначе
					ТаблицаРасшифровкаРегламентнойОперации.ФактическиСписаноСумма      = ТаблицаРасшифровкаРегламентнойОперации.ФактическиСписаноСумма + ТаблицаПроводок.СуммаФакт;
					ТаблицаРасшифровкаРегламентнойОперации.ФактическиСписаноКоличество = ТаблицаРасшифровкаРегламентнойОперации.ФактическиСписаноКоличество + ТаблицаПроводок.Количество;
					ТаблицаРасшифровкаРегламентнойОперации.РасчетнаяСуммаСписания      = ТаблицаРасшифровкаРегламентнойОперации.РасчетнаяСуммаСписания + ТаблицаПроводок.СуммаРасчет;
					ТаблицаРасшифровкаРегламентнойОперации.СуммаКорректировки          = ТаблицаРасшифровкаРегламентнойОперации.СуммаКорректировки + СуммаКорректировки;
				КонецЕсли;
				
			ИначеЕсли ТаблицаПроводок.ПриходРасход = 0 Тогда // операции списания продукции (полуфабрикатов)
				ТаблицаРасшифровкаРегламентнойОперации.ФактическиСписаноСумма      = ТаблицаРасшифровкаРегламентнойОперации.ФактическиСписаноСумма + ТаблицаПроводок.СуммаФакт;
				ТаблицаРасшифровкаРегламентнойОперации.ФактическиСписаноКоличество = ТаблицаРасшифровкаРегламентнойОперации.ФактическиСписаноКоличество + ТаблицаПроводок.Количество;
				ТаблицаРасшифровкаРегламентнойОперации.РасчетнаяСуммаСписания      = ТаблицаРасшифровкаРегламентнойОперации.РасчетнаяСуммаСписания + ТаблицаПроводок.СуммаРасчет;
				ТаблицаРасшифровкаРегламентнойОперации.СуммаКорректировки          = ТаблицаРасшифровкаРегламентнойОперации.СуммаКорректировки + СуммаКорректировки;
				
				ТаблицаКорректировкиСписания = ТаблицаРасшифровкаРегламентнойОперации.РасшифровкаСуммаКорректировки.Получить("Таблица данных");
				ТаблицаКорректировкиСписания.НоваяСтрока();
				ТаблицаКорректировкиСписания.Счет = ТаблицаПроводок.СчетД;
				ТаблицаКорректировкиСписания.Субконто1 = ТаблицаПроводок.СубконтоД1;
				ТаблицаКорректировкиСписания.Субконто2 = ТаблицаПроводок.СубконтоД2;
				ТаблицаКорректировкиСписания.Субконто3 = ТаблицаПроводок.СубконтоД3;
				ТаблицаКорректировкиСписания.ФактическиСписаноСумма = ТаблицаПроводок.СуммаФакт;
				ТаблицаКорректировкиСписания.ФактическиСписаноКоличество = ТаблицаПроводок.Количество;
				ТаблицаКорректировкиСписания.СредневзвешеннаяСтоимость = ТаблицаРасшифровкаРегламентнойОперации.СредневзвешеннаяСтоимость;
				ТаблицаКорректировкиСписания.СуммаСписания = ТаблицаПроводок.СуммаРасчет;
				ТаблицаКорректировкиСписания.СуммаКорректировки = СуммаКорректировки;
				
				// формирование расшифровки
				Расшифровка = СоздатьОбъект("СписокЗначений");
				ОсновнаяРасшифровкаОПП.Выгрузить(Расшифровка);
				
				Расшифровка.Установить("ДтКт", 2);
				
				Расшифровка.Установить("Счет", ТаблицаПроводок.СчетК);
				Расшифровка.Установить("ВидСубконто1", ТаблицаПроводок.СчетК.ВидСубконто(1));
				Расшифровка.Установить("Субконто1",    ТаблицаПроводок.СубконтоК1);
				
				Расшифровка.Установить("КорСчет", ТаблицаПроводок.СчетД);
				Расшифровка.Установить("КорВидСубконто1", ТаблицаПроводок.СчетД.ВидСубконто(1));
				Расшифровка.Установить("КорСубконто1",    ТаблицаПроводок.СубконтоД1);
				Расшифровка.Установить("КорВидСубконто2", ТаблицаПроводок.СчетД.ВидСубконто(2));
				Расшифровка.Установить("КорСубконто2",    ТаблицаПроводок.СубконтоД2);
				Расшифровка.Установить("КорВидСубконто3", ТаблицаПроводок.СчетД.ВидСубконто(3));
				Расшифровка.Установить("КорСубконто3",    ТаблицаПроводок.СубконтоД3);
				ТаблицаКорректировкиСписания.РасшифровкаОтчетПоПроводкам = Расшифровка;
			КонецЕсли;
		КонецЕсли;
		
		// Выявляем операции списания полуфабрикатов в производство для использования в последующих
		// переделах
		Если ТаблицаПроводок.СчетД = СчетПоКоду("Н01.05") Тогда
			Если НайтиВТаблицеРезНУ(ТабРез, ТаблицаПроводок.СубконтоД2, ТаблицаПроводок.СубконтоК1) = 0 Тогда
				// фиксируем результат расчета суммы "передельного" списания
				ТабРез.НоваяСтрока();
				ТабРез.Объект = ТаблицаПроводок.СубконтоД2;
				ТабРез.КорОбъект = ТаблицаПроводок.СубконтоК1;
				ТабРез.ЗатратыСумма = ТаблицаПроводок.СуммаРасчет;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры // СформироватьКорректирующиеПроводкиПоДвижениюГПиПФвНУ()

//******************************************************************************
// АнализДвиженийГПиПФпоОперациямНУ(БухИтПрод, СебестоимостьПродукции, ТабРез)
//
// Параметры:
//  БухИтПрод - результаты выполнения запроса к Бухитогам по операциям движения ГП и полуфабрикатов
//  СебестоимостьПродукции - таблица рассчитанных себестоимостей для продукции одного вида
//  ТабРез - таблица результатов расчета сумм "передельных" списаний (ВидПродукции <- продукция или полуфабрикат) 
//
// Вызывается из формул элементов диалога:
//  Нет.
//
// Описание:
//  Собирает и обобщает информацию по всем движениям данной продукции или полуфабриката 
//
Процедура АнализДвиженийГПиПФпоОперациямНУ(БухИтПрод, СебестоимостьПродукции, ТабРез)            
	
	ТаблицаПроводок = СоздатьОбъект("ТаблицаЗначений");
	
	// Таблица для обобщения движения готовой продукции за месяц
	ТаблицаПроводок.Очистить();
	ТаблицаПроводок.НоваяКолонка("ПриходРасход", "Число",1);
	ТаблицаПроводок.НоваяКолонка("СчетД", "Счет");
	ТаблицаПроводок.НоваяКолонка("СубконтоД1");
	ТаблицаПроводок.НоваяКолонка("СубконтоД2");
	ТаблицаПроводок.НоваяКолонка("СубконтоД3");
	ТаблицаПроводок.НоваяКолонка("СчетК", "Счет");
	ТаблицаПроводок.НоваяКолонка("СубконтоК1");
	ТаблицаПроводок.НоваяКолонка("СубконтоК2");
	ТаблицаПроводок.НоваяКолонка("СубконтоК3");
	ТаблицаПроводок.НоваяКолонка("Количество");
	ТаблицаПроводок.НоваяКолонка("СуммаФакт");
	ТаблицаПроводок.НоваяКолонка("СуммаРасчет");
	
	// просматриваем все операций т.к. нам нужна обобщенная информация в группировке по всем субконто,
	// а не только по тем, на которых ведется и количественный и суммовой учет. Следовательно
	// мы не сможем получить всю интересующую нас информацию только из анализа корреспонденций
	БухИтПрод.ВыбратьПериоды();
	Пока БухИтПрод.ПолучитьПериод() = 1 Цикл
		
		Опер = БухИтПрод.Операция;
		ОперацияВозврата = 0;
		
		Если ((БухИтПрод.Счет = СчетПоКоду("Н02.03")) или (БухИтПрод.Счет = СчетПоКоду("Н02.07")))
		и  (Опер.Кредит.УсловияПоступленияИВыбытия = Перечисление.УсловияПоступленияИВыбытия.Возврат) Тогда
			// Возврат продукции на склад не корректируем 
			Продолжить;
			
		ИначеЕсли ((Опер.Кредит.Счет = СчетПоКоду("Н02.03")) или (Опер.Кредит.Счет = СчетПоКоду("Н02.07")))
		и (БухИтПрод.Счет.ПринадлежитГруппе(СчетПоКоду("Н02.04")) = 1) Тогда
			
			// При корректировке стоимости продукции, учитываемой на счете Н02.04, проводки
			// в дебет счета Н02.04 корректируются только в случае возврата отгруженной продукции на склад.
			Если Опер.Кредит.УсловияПоступленияИВыбытия = Перечисление.УсловияПоступленияИВыбытия.Возврат Тогда
				ОперацияВозврата = 1;
				
			Иначе
				Продолжить;	
			КонецЕсли;
			
		ИначеЕсли (Опер.Дебет.Счет = СчетПоКоду("Н02.03")) или (Опер.Дебет.Счет = СчетПоКоду("Н02.07")) Тогда
			Если ПустоеЗначение(Опер.Дебет.УсловияПоступленияИВыбытия) = 0 Тогда
				// Если операция в дебет счета учета продукции (полуфабрикатов) и это 
				// не операция выпуска продукции, то корректировать ее не надо.
				Продолжить;    
			КонецЕсли;
		КонецЕсли;
		
		ТаблицаПроводок.НоваяСтрока();
		ТаблицаПроводок.ПриходРасход = ?(ОперацияВозврата = 1, 2, БухИтПрод.ВыбранаПоДт());
		ТаблицаПроводок.СчетД = 	Опер.Дебет.Счет;
		ТаблицаПроводок.СубконтоД1= Опер.Дебет.Субконто(1);	
		ТаблицаПроводок.СубконтоД2= Опер.Дебет.Субконто(2);
		ТаблицаПроводок.СубконтоД3= Опер.Дебет.Субконто(3);
		ТаблицаПроводок.СчетК = 	Опер.Кредит.Счет;
		ТаблицаПроводок.СубконтоК1= Опер.Кредит.Субконто(1);
		ТаблицаПроводок.СубконтоК2= Опер.Кредит.Субконто(2);
		ТаблицаПроводок.СубконтоК3= Опер.Кредит.Субконто(3);
		ТаблицаПроводок.Количество= Опер.Количество;
		ТаблицаПроводок.СуммаФакт = Опер.Сумма;
		ТаблицаПроводок.СуммаРасчет= 0;
		
	КонецЦикла;
	
	// обобщаем информацию по одинаковым разрезам аналитики
	ТаблицаПроводок.Свернуть("ПриходРасход,СчетД,СубконтоД1,СубконтоД2,СубконтоД3,СчетК,СубконтоК1,СубконтоК2,СубконтоК3","Количество,СуммаФакт,СуммаРасчет");
	
	// Выполняем окончательную корректировку сумм в таблице обобщенных движений продукции и полуфабрикатов
	ТаблицаПроводок.ВыбратьСтроки();
	Если (БухИтПрод.Счет = СчетПоКоду("Н02.03"))
	или (БухИтПрод.Счет = СчетПоКоду("Н02.07")) Тогда // Продукция НА СКЛАДЕ
		ОбщееКоличествоПрихода = СебестоимостьПродукции.КоличествоВыпущено;
		ОбщаяСуммаПрихода = СебестоимостьПродукции.СуммаВыпуска;
		Себестоимость = 	СебестоимостьПродукции.СредняяСебестоимость;  
		РасчКолПриход = 0;
		РасчСумПриход = 0;
		Пока ТаблицаПроводок.ПолучитьСтроку() = 1 Цикл
			Если ТаблицаПроводок.ПриходРасход = 1 Тогда
				// Это выпуск продукции или полуфабрикатов
				Если ОбщееКоличествоПрихода <> 0 Тогда
					РасчКолПриход = РасчКолПриход + ТаблицаПроводок.Количество;
					ТаблицаПроводок.СуммаРасчет = РасчКолПриход * ОбщаяСуммаПрихода/ОбщееКоличествоПрихода - РасчСумПриход;
					РасчСумПриход = РасчСумПриход + ТаблицаПроводок.СуммаРасчет;
				КонецЕсли;
				
			Иначе
				// Это списание или выбытие или передача в производство продукции или полуфабрикатов
				// корректируем ее по фактической себестоимости
				ДолжноБытьСписано  = Окр((СебестоимостьПродукции.УчтеноСписанноеКоличество + ТаблицаПроводок.Количество) * Себестоимость, 2);
				РанееБылоСписано   = Окр(СебестоимостьПродукции.УчтеноСписанноеКоличество * Себестоимость, 2);
				ТаблицаПроводок.СуммаРасчет = ДолжноБытьСписано - РанееБылоСписано;
				СебестоимостьПродукции.УчтеноСписанноеКоличество = СебестоимостьПродукции.УчтеноСписанноеКоличество + ТаблицаПроводок.Количество;
				
				// Сумму на которую товары отгружены без перехода права
				// собственности необходимо  сохранить;
				Если ТаблицаПроводок.СчетД.ПринадлежитГруппе(СчетПоКоду("Н02.04")) = 1 Тогда
					СебестоимостьПродукции.ОтгруженоНаСумму = СебестоимостьПродукции.ОтгруженоНаСумму + ТаблицаПроводок.СуммаРасчет;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
	Иначе // Продукция ОТГРУЖЕННАЯ БЕЗ ПЕРЕХОДА ПРАВА СОБСТВЕННОСТИ
		Себестоимость = 	СебестоимостьПродукции.СредняяСебестоимостьОтгруженная;
		Пока ТаблицаПроводок.ПолучитьСтроку() = 1 Цикл
			КоэффициентВозврата = ?(ТаблицаПроводок.ПриходРасход = 2, -1, 1);
			ДолжноБытьСписано  = Окр((СебестоимостьПродукции.УчтеноОтгруженноеКоличество + ТаблицаПроводок.Количество*КоэффициентВозврата) * Себестоимость, 2);
			РанееБылоСписано   = Окр(СебестоимостьПродукции.УчтеноОтгруженноеКоличество * Себестоимость, 2);
			ТаблицаПроводок.СуммаРасчет = КоэффициентВозврата * (ДолжноБытьСписано - РанееБылоСписано);
			СебестоимостьПродукции.УчтеноОтгруженноеКоличество = СебестоимостьПродукции.УчтеноОтгруженноеКоличество + ТаблицаПроводок.Количество * КоэффициентВозврата;
		КонецЦикла;
	КонецЕсли;
	
	СформироватьКорректирующиеПроводкиПоДвижениюГПиПФвНУ(БухИтПрод, ТаблицаПроводок, ТабРез);            
	
КонецПроцедуры // АнализДвиженийГПиПФпоОперациямНУ()

//******************************************************************************
// КорректировкаСебестоимостиГПиПФвНУ(БухИтПрод, СебестоимостьПродукции, ТабРез, ВидПродукции)
//
// Параметры:
//  БухИтПрод - результаты выполнения запроса к Бухитогам по операциям движения ГП и полуфабрикатов
//  СебестоимостьПродукции - таблица рассчитанных себестоимостей для продукции одного вида
//  ТабРез - таблица результатов расчета сумм "передельных" списаний (ВидПродукции <- продукция или полуфабрикат) 
//  ВидПродукции - вид продукции, которому принадлежит корректируемая продукция (полуфабрикат)
//
// Вызывается из формул элементов диалога:
//  Нет.
//
// Описание:
//  Формирование корректирующих проводок для отражения в бух итогах операций 
//  движения продукции и полуфабрикатов по фактической рассчитанной себестоимости
//
Процедура КорректировкаСебестоимостиГПиПФвНУ(БухИтПрод, СебестоимостьПродукции, ТабРез, ВидПродукции)            
	
	Если ФормироватьПечатнуюФорму = 1 Тогда
		ТаблицаРасшифровкаРегламентнойОперации = ТаблицаРасшифровкаКорректировкиТоваров;
	КонецЕсли;
	
	БухИтПрод.ВыбратьСчета();
	Пока БухИтПрод.ПолучитьСчет() = 1 Цикл
		
		// Корректировка стоимости продукции отгруженной будет выполнена позже.
		Если БухИтПрод.Счет.ПринадлежитГруппе(СчетПоКоду("Н02.04")) = 1 Тогда
			Продолжить;
		КонецЕсли;
		
		СписокКорректируемыхСубконто = ПолучитьСписокКорректируемыхСубконтоНУ(БухИтПрод.Счет);
		КоличествоСубконто = СписокКорректируемыхСубконто.РазмерСписка();
		Представление = "";
		НомерСубконто1 = СписокКорректируемыхСубконто.ПолучитьЗначение(1, Представление);
		
		БухИтПрод.ВыбратьСубконто(НомерСубконто1);
		Пока БухИтПрод.ПолучитьСубконто(НомерСубконто1) = 1 Цикл
			Стр = "";
			Если ПолучитьВидПродукции(БухИтПрод.Субконто(1)) <> ВидПродукции Тогда
				Продолжить;
			КонецЕсли;
			
			Если СебестоимостьПродукции.НайтиЗначение(БухИтПрод.Субконто(НомерСубконто1), Стр, "Продукция") = 0 Тогда
				СебестоимостьПродукции.НоваяСтрока();
				СебестоимостьПродукции.Продукция = БухИтПрод.Субконто(НомерСубконто1);
				
			Иначе
				СебестоимостьПродукции.ПолучитьСтрокуПоНомеру(Стр);
			КонецЕсли;
			
			ПоступлениеКоличество = БухИтПрод.ДО("К");
			
			// В расчете стоимости необходимо учесть возврат продукции на склад от покупателя
			ВозвратКоличество     = 0;
			ВозвратСумма          = 0;
			БухИтПрод.ВыбратьСубконто(2,, 2);
			Пока БухИтПрод.ПолучитьСубконто(2) = 1 Цикл
				Если БухИтПрод.Субконто(2) = Перечисление.УсловияПоступленияИВыбытия.Возврат Тогда
					ВозвратСумма      = ВозвратСумма + (-БухИтПрод.КО("С"));
					ВозвратКоличество = ВозвратКоличество + (-БухИтПрод.КО("К"));
					Если БухИтПрод.ПолучитьКорСчет(, "Н02.04") = 1 Тогда // возврат отгруженной продукции не учитываем
						ВозвратСумма      = ВозвратСумма - (-БухИтПрод.КорКО("С"));
						ВозвратКоличество = ВозвратКоличество - (-БухИтПрод.КорКО("К"));
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			              
			// В расчете стоимости необходимо учесть излишки от инвентаризации
			БухИтПрод.ВыбратьСубконто(2,, 1);
			Пока БухИтПрод.ПолучитьСубконто(2) = 1 Цикл
				Если БухИтПрод.Субконто(2) = Перечисление.УсловияПоступленияИВыбытия.ИзлишкиИнвентаризации Тогда
					Если (СебестоимостьПродукции.СуммаПрочееПоступление = 0) и ( БухИтПрод.ДО("С") <> 0) Тогда
						СебестоимостьПродукции.СуммаПрочееПоступление = БухИтПрод.ДО("С");
					КонецЕсли;
				КонецЕсли;
			КонецЦикла; 

			// рассчитываем средневзвешенную себестоимость по данной продукции
			ПриходПоТекущейСебестоимости = (СебестоимостьПродукции.СуммаВыпуска + СебестоимостьПродукции.СуммаПрочееПоступление + ВозвратСумма);
			Если (БухИтПрод.СНД("К") + ПоступлениеКоличество + ВозвратКоличество) <> 0 Тогда
				СебестоимостьПродукции.СредняяСебестоимость = (БухИтПрод.СНД("С") + ПриходПоТекущейСебестоимости)/(БухИтПрод.СНД("К") + ПоступлениеКоличество + ВозвратКоличество);
			КонецЕсли;
			
			// Если необходимо сформировать печатную форму по регламентной операции.
			Если ФормироватьПечатнуюФорму = 1 Тогда
				ТаблицаРасшифровкаРегламентнойОперации.НоваяСтрока();
				ТаблицаРасшифровкаРегламентнойОперации.МПЗ                = БухИтПрод.Субконто(1);
				ТаблицаРасшифровкаРегламентнойОперации.СчетУчета          = БухИтПрод.Счет;
				ТаблицаРасшифровкаРегламентнойОперации.СуммаНаНачало      = БухИтПрод.СНД("С");
				ТаблицаРасшифровкаРегламентнойОперации.КоличествоНаНачало = БухИтПрод.СНД("К");
				
				ТаблицаРасшифровкаРегламентнойОперации.ПриходСумма        = СебестоимостьПродукции.СуммаВыпуска + СебестоимостьПродукции.СуммаПрочееПоступление;
				ТаблицаРасшифровкаРегламентнойОперации.ПриходКоличество   = ПоступлениеКоличество;
				
				ТаблицаРасшифровкаРегламентнойОперации.СредневзвешеннаяСтоимость = СебестоимостьПродукции.СредняяСебестоимость;
				ТаблицаРасшифровкаРегламентнойОперации.ВозвратСумма       = ВозвратСумма;
				ТаблицаРасшифровкаРегламентнойОперации.ВозвратКоличество  = ВозвратКоличество;
				ТаблицаРасшифровкаРегламентнойОперации.РасшифровкаСуммаКорректировки = РасшифровкаКорректировкиСписанияПоМПЗ(БухИтПрод.Субконто(1));
				
				// Расшифровка
				Расшифровка = СоздатьОбъект("СписокЗначений");
				ОсновнаяРасшифровкаОСВ.Выгрузить(Расшифровка);
				Расшифровка.Установить("Счет", БухИтПрод.Счет);
				Расшифровка.Установить("ВидСубконто1", БухИтПрод.Счет.ВидСубконто(1));
				Расшифровка.Установить("Субконто1", БухИтПрод.Субконто(1));
				Расшифровка.Установить("ОтборСубконто1", 1);
				ТаблицаРасшифровкаРегламентнойОперации.РасшифровкаОСВПоСчету1 = Расшифровка;
				
				Расшифровка = СоздатьОбъект("СписокЗначений");
				ОсновнаяРасшифровкаОСВ.Выгрузить(Расшифровка);
				Расшифровка.Установить("Счет", БухИтПрод.Счет);
				Расшифровка.Установить("ВидСубконто1", БухИтПрод.Счет.ВидСубконто(1));
				Расшифровка.Установить("Субконто1", БухИтПрод.Субконто(1));
				Расшифровка.Установить("ОтборСубконто1", 1);
				Расшифровка.Установить("ВидСубконто2", ВидыСубконто.УсловияПоступленияИВыбытия);
				Расшифровка.Установить("Субконто2", Перечисление.УсловияПоступленияИВыбытия.Возврат);
				Расшифровка.Установить("ОтборСубконто2", 2);
				ТаблицаРасшифровкаРегламентнойОперации.РасшифровкаОСВПоСчету2 = Расшифровка;
			КонецЕсли;
			
			Если КоличествоСубконто = 1 Тогда
				// одноуровневая аналитика (по количеству и сумме), переходим к анализу операций
				АнализДвиженийГПиПФпоОперациямНУ(БухИтПрод, СебестоимостьПродукции, ТабРез);
				
			Иначе
				НомерСубконто2 = СписокКорректируемыхСубконто.ПолучитьЗначение(2, Представление);
				БухИтПрод.ВыбратьСубконто(НомерСубконто2);
				Пока БухИтПрод.ПолучитьСубконто(НомерСубконто2) = 1 Цикл
					Субконто2 = БухИтПрод.Субконто(2);
					
					Если КоличествоСубконто = 2 Тогда
						// двухуровневая аналитика (по количеству и сумме), переходим к анализу операций
						АнализДвиженийГПиПФпоОперациямНУ(БухИтПрод, СебестоимостьПродукции, ТабРез);
						
					Иначе
						НомерСубконто3 = СписокКорректируемыхСубконто.ПолучитьЗначение(3, Представление);
						БухИтПрод.ВыбратьСубконто(НомерСубконто3);
						Пока БухИтПрод.ПолучитьСубконто(НомерСубконто3) = 1 Цикл
							// трехуровневая аналитика (по количеству и сумме), переходим к анализу операций
							АнализДвиженийГПиПФпоОперациямНУ(БухИтПрод, СебестоимостьПродукции, ТабРез);
							
						КонецЦикла;
					КонецЕсли;
				КонецЦикла;
				
			КонецЕсли;
			
			// Формирование печатной формы
			Если ФормироватьПечатнуюФорму = 1 Тогда
				
				// В печатной форме отражаем только те МПЗ, по которым была корректировка
				СуммаКорректировки         = ТаблицаРасшифровкаРегламентнойОперации.СуммаКорректировки;
				Если СуммаКорректировки = 0 Тогда
					ТаблицаРасшифровкаРегламентнойОперации.УдалитьСтроку();
				КонецЕсли;
			КонецЕсли;
			
		КонецЦикла;
	КонецЦикла;
	
	// Корректировку стоимости продукции (полуфабрикатов) отгруженной выполняем отдельно,
	// после того, как будет рассчитана ее стоимость на складе.
	БухИтПрод.ВыбратьСчета();
	Пока БухИтПрод.ПолучитьСчет() = 1 Цикл
		
		// Корректировка стоимости продукции на складе уже выполнена.
		Если БухИтПрод.Счет.ПринадлежитГруппе(СчетПоКоду("Н02.04")) = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Если ФормироватьПечатнуюФорму = 1 Тогда
			ТаблицаРасшифровкаРегламентнойОперации = ТаблицаРасшифровкаКорректировкиОтгруженныхТоваров;
		КонецЕсли;
		
		СписокКорректируемыхСубконто = ПолучитьСписокКорректируемыхСубконтоНУ(БухИтПрод.Счет);
		КоличествоСубконто = СписокКорректируемыхСубконто.РазмерСписка();
		Представление = "";
		НомерСубконто1 = СписокКорректируемыхСубконто.ПолучитьЗначение(1, Представление);
		
		БухИтПрод.ВыбратьСубконто(НомерСубконто1);
		Пока БухИтПрод.ПолучитьСубконто(НомерСубконто1) = 1 Цикл
			Стр = "";
			Если ПолучитьВидПродукции(БухИтПрод.Субконто(1)) <> ВидПродукции Тогда
				Продолжить;
			КонецЕсли;
			
			Если СебестоимостьПродукции.НайтиЗначение(БухИтПрод.Субконто(НомерСубконто1), Стр, "Продукция") = 0 Тогда
				СебестоимостьПродукции.НоваяСтрока();
				СебестоимостьПродукции.Продукция = БухИтПрод.Субконто(НомерСубконто1);
				
			Иначе
				СебестоимостьПродукции.ПолучитьСтрокуПоНомеру(Стр);
			КонецЕсли;
			
			ПоступлениеКоличество = 0;
			БухИтПрод.ВыбратьСубконто(2);
			Пока БухИтПрод.ПолучитьСубконто(2) = 1 Цикл
				Если БухИтПрод.Субконто(2) <> Перечисление.УсловияПоступленияИВыбытия.Возврат Тогда
					ПоступлениеКоличество = ПоступлениеКоличество + БухИтПрод.ДО("К");
				КонецЕсли;
			КонецЦикла;
			
			ОтгруженоНаСумму = СебестоимостьПродукции.ОтгруженоНаСумму;
			Если (БухИтПрод.СНД("К") + ПоступлениеКоличество) <> 0 Тогда
				СебестоимостьПродукции.СредняяСебестоимостьОтгруженная = (БухИтПрод.СНД("С") + ОтгруженоНаСумму)/(БухИтПрод.СНД("К") + ПоступлениеКоличество);
			КонецЕсли;
			
			// Если необходимо сформировать печатную форму по регламентной операции.
			Если ФормироватьПечатнуюФорму = 1 Тогда
				ТаблицаРасшифровкаРегламентнойОперации.НоваяСтрока();
				ТаблицаРасшифровкаРегламентнойОперации.МПЗ                = БухИтПрод.Субконто(1);
				ТаблицаРасшифровкаРегламентнойОперации.СуммаНаНачало      = БухИтПрод.СНД("С");
				ТаблицаРасшифровкаРегламентнойОперации.КоличествоНаНачало = БухИтПрод.СНД("К");
				
				ТаблицаРасшифровкаРегламентнойОперации.ПриходСумма        = ОтгруженоНаСумму;
				ТаблицаРасшифровкаРегламентнойОперации.ПриходКоличество   = ПоступлениеКоличество;
				
				ТаблицаРасшифровкаРегламентнойОперации.СредневзвешеннаяСтоимость = СебестоимостьПродукции.СредняяСебестоимостьОтгруженная;
				ТаблицаРасшифровкаРегламентнойОперации.РасшифровкаСуммаКорректировки = РасшифровкаКорректировкиСписанияПоМПЗ(БухИтПрод.Субконто(1));
				
				// Расшифровка
				Расшифровка = СоздатьОбъект("СписокЗначений");
				ОсновнаяРасшифровкаОСВ.Выгрузить(Расшифровка);
				Расшифровка.Установить("Счет", БухИтПрод.Счет);
				Расшифровка.Установить("ВидСубконто1", БухИтПрод.Счет.ВидСубконто(1));
				Расшифровка.Установить("Субконто1", БухИтПрод.Субконто(1));
				Расшифровка.Установить("ОтборСубконто1", 1);
				ТаблицаРасшифровкаРегламентнойОперации.РасшифровкаОСВПоСчету1 = Расшифровка;
				
				Расшифровка = СоздатьОбъект("СписокЗначений");
				ОсновнаяРасшифровкаОСВ.Выгрузить(Расшифровка);
				Расшифровка.Установить("Счет", БухИтПрод.Счет);
				Расшифровка.Установить("ВидСубконто1", БухИтПрод.Счет.ВидСубконто(1));
				Расшифровка.Установить("Субконто1", БухИтПрод.Субконто(1));
				Расшифровка.Установить("ОтборСубконто1", 1);
				Расшифровка.Установить("ВидСубконто2", ВидыСубконто.УсловияПоступленияИВыбытия);
				Расшифровка.Установить("Субконто2", Перечисление.УсловияПоступленияИВыбытия.Возврат);
				Расшифровка.Установить("ОтборСубконто2", 2);
				ТаблицаРасшифровкаРегламентнойОперации.РасшифровкаОСВПоСчету2 = Расшифровка;
			КонецЕсли;
			
			Если КоличествоСубконто = 1 Тогда
				// одноуровневая аналитика (по количеству и сумме), переходим к анализу операций
				АнализДвиженийГПиПФпоОперациямНУ(БухИтПрод, СебестоимостьПродукции, ТабРез);
				
			Иначе
				НомерСубконто2 = СписокКорректируемыхСубконто.ПолучитьЗначение(2, Представление);
				БухИтПрод.ВыбратьСубконто(НомерСубконто2);
				Пока БухИтПрод.ПолучитьСубконто(НомерСубконто2) = 1 Цикл
					Субконто2 = БухИтПрод.Субконто(2);
					
					Если КоличествоСубконто = 2 Тогда
						// двухуровневая аналитика (по количеству и сумме), переходим к анализу операций
						АнализДвиженийГПиПФпоОперациямНУ(БухИтПрод, СебестоимостьПродукции, ТабРез);
						
					Иначе
						НомерСубконто3 = СписокКорректируемыхСубконто.ПолучитьЗначение(3, Представление);
						БухИтПрод.ВыбратьСубконто(НомерСубконто3);
						Пока БухИтПрод.ПолучитьСубконто(НомерСубконто3) = 1 Цикл
							// трехуровневая аналитика (по количеству и сумме), переходим к анализу операций
							АнализДвиженийГПиПФпоОперациямНУ(БухИтПрод, СебестоимостьПродукции, ТабРез);
						КонецЦикла;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			
			// Формирование печатной формы
			Если ФормироватьПечатнуюФорму = 1 Тогда
				
				// В печатной форме отражаем только те МПЗ, по которым была корректировка
				СуммаКорректировки         = ТаблицаРасшифровкаРегламентнойОперации.СуммаКорректировки;
				СуммаКорректировкиВозврата = ТаблицаРасшифровкаРегламентнойОперации.СуммаКорректировкиВозврата;
				Если (СуммаКорректировки = 0) и (СуммаКорректировкиВозврата = 0) Тогда
					ТаблицаРасшифровкаРегламентнойОперации.УдалитьСтроку();
				КонецЕсли;
			КонецЕсли;
			
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры // КорректировкаСебестоимостиГПиПФвНУ()

//****************************************************************************** 
// АнализПрямыхРасходовНаПродукциюНУ(БухИт, ЗатратыСумма, Объект, ТаблКоэффНЗП)
//
// Параметры:
//  БухИт - ссылка на результаты запроса по прямым расходам
//  ЗатратыСумма - общая сумма прямых расходов по данному виду продукции
//  Объект - вид номенклатуры, анализируемый в данный момент
//  ТаблКоэффНЗП - таблица содержащая информацию по расчету НЗП
//  Результат - если на счет Н01.05 отнесены расходы, которые не являются материальными,
//  оплатой труда, ЕСН или амортизацией, то переменной "Результат" присваивается значение -4.
//
// Вызывается из формул элементов диалога:
//  Нет.
//
// Описание:
//
Процедура АнализПрямыхРасходовНаПродукциюНУ(БухИт, ЗатратыСумма, Объект, ТаблКоэффНЗП, Результат)
	
	// позиционируемся на нужную строку в таблице
	Стр = "";
	Если ТаблКоэффНЗП.НайтиЗначение(Объект, Стр, "ВидНоменклатуры") = 1 Тогда
		ТаблКоэффНЗП.ПолучитьСтрокуПоНомеру(Стр);
	Иначе
		ТаблКоэффНЗП.НоваяСтрока();
		ТаблКоэффНЗП.ВидНоменклатуры = Объект;
		
		Если (Объект.ТипНоменклатуры = Перечисление.ТипыНоменклатуры.Работа)
		или (Объект.ТипНоменклатуры = Перечисление.ТипыНоменклатуры.Услуга) Тогда
			ТаблКоэффНЗП.Способ = 2;
		ИначеЕсли ПустоеЗначение(Объект.ОсновнойМатериал) = 1 Тогда
			ТаблКоэффНЗП.Способ = 3;
		Иначе
			ТаблКоэффНЗП.Способ = 1;
		КонецЕсли;
		
		ТаблКоэффНЗП.Коэффициент = 0;
	КонецЕсли;
	
	ТаблКоэффНЗП.НачСуммаНЗП = БухИт.СНД("С");
	
	Если БухИт.ПолучитьСубконто(СубконтоВидыПродукцииИУслуг, , Объект) = 1 Тогда
		БухИт.ВыбратьСубконто(ВидыСубконто.ГруппыВидыРасходов); 
		
		ТабВидовРасходов = ТаблКоэффНЗП.РасшифровкаПоВидамРасходов;
		Если ПустоеЗначение(ТабВидовРасходов) = 1 Тогда
					ТабВидовРасходов = СоздатьОбъект("ТаблицаЗначений");   
					ТабВидовРасходов.НоваяКолонка("ВидРасхода");
					ТабВидовРасходов.НоваяКолонка("Сумма",    "Число", 17, 2);
					ТабВидовРасходов.НоваяКолонка("СуммаНЗП", "Число", 17, 2);
		КонецЕсли;
		Пока БухИт.ПолучитьСубконто(ВидыСубконто.ГруппыВидыРасходов) = 1 Цикл
			ПрямыеРасходы = БухИт.ДО("С");
				НомСтроки = 0;
				ТабВидовРасходов.НайтиЗначение(БухИт.Субконто(ВидыСубконто.ГруппыВидыРасходов), НомСтроки, "ВидРасхода");
                Если НомСтроки <> 0 Тогда
					ТабВидовРасходов.УстановитьЗначение(НомСтроки, "Сумма", ПрямыеРасходы);
				Иначе
					ТабВидовРасходов.НоваяСтрока();
					ТабВидовРасходов.ВидРасхода = БухИт.Субконто(ВидыСубконто.ГруппыВидыРасходов);
					ТабВидовРасходов.Сумма = ПрямыеРасходы;
					
				КонецЕсли;
				
		КонецЦикла;  
		Если БухИт.ДО("С") <> ЗатратыСумма Тогда
			// Если не все затраты были отражены в бухгалтерских итогах, значит разница - это материальные
			// затраты, связанные с расчетом себестоимости полуфабрикатов, отразить их проводками мы 
			// еще просто не успели 
			
			НомСтроки = 0; 
			ТабВидовРасходов.НайтиЗначение(Перечисление.ГруппыВидыРасходов.МатериальныеРасходы, НомСтроки, "ВидРасхода");
			Если НомСтроки <> 0 Тогда
				ПрямыеРасходы = ТабВидовРасходов.ПолучитьЗначение(НомСтроки, "Сумма");
				ТабВидовРасходов.УстановитьЗначение(НомСтроки, "Сумма", (ПрямыеРасходы + (ЗатратыСумма - БухИт.ДО("С"))));
				Иначе
					ТабВидовРасходов.НоваяСтрока();
					ТабВидовРасходов.ВидРасхода = Перечисление.ГруппыВидыРасходов.МатериальныеРасходы;
				ТабВидовРасходов.Сумма = ЗатратыСумма - БухИт.ДО("С");
			КонецЕсли;
			
		КонецЕсли;
		
		ТаблКоэффНЗП.РасшифровкаПоВидамРасходов = ТабВидовРасходов; 
		
	КонецЕсли;
	
КонецПроцедуры // АнализПрямыхРасходовНаПродукциюНУ()

//****************************************************************************** 
// СписатьЗатратыНаВыпускПродукцииНУ(БухИт, СебестоимостьПродукции, СуммаПрямыхЗатрат, Объект, ТаблКоэффНЗП)
//
// Параметры:
//  БухИт - ссылка на результаты запроса по прямым расходам
//  СебестоимостьПродукции - таблица в которой хранятся результаты расчета себестоимости по данному виду 
//							 продукции
//  СуммаПрямыхЗатрат - общая сумма прямых затрат на выпуск продукции данного вида, подлежащая распределению
//  ЗатратыСумма - стоимость продукции (полуфабрикатов), списанных на прямые расходы (пока операция не сохранена
//                 этой суммы на налоговых счетах нет)
//  Объект - вид номенклатуры, анализируемый в данный момент
//  ТаблКоэффНЗП - таблица содержащая информацию по расчету НЗП
//
// Вызывается из формул элементов диалога:
//  Нет.
//
// Описание:
//  В процедуре формируются проводки по списанию прямых затрат связанных с выпуском продукции 
//  и фактически израсходованных при выпуске продукции. 
//
Процедура СписатьЗатратыНаВыпускПродукцииНУ(БухИт, СебестоимостьПродукции, СуммаПрямыхЗатрат, ЗатратыСумма, Объект, ТаблКоэффНЗП)
	
	Если (СебестоимостьПродукции.Итог("КоличествоВыпущено") <> 0)
	или (Объект.ТипНоменклатуры = Перечисление.ТипыНоменклатуры.Работа)
	или (Объект.ТипНоменклатуры = Перечисление.ТипыНоменклатуры.Услуга) Тогда
		
		Если ТаблКоэффНЗП.Способ = 4 Тогда // способ, при котором жестко указаны расходы по каждой группе (виду) расходов
			
			ТабВидовРасходов = ТаблКоэффНЗП.РасшифровкаПоВидамРасходов; 
			ТабВидовРасходов.Свернуть("ВидРасхода", "Сумма, СуммаНЗП");
			ТабВидовРасходов.ВыбратьСтроки();
			Пока ТабВидовРасходов.ПолучитьСтроку() = 1 Цикл
				СуммаПрямыхРасходов = ТабВидовРасходов.Сумма;
				Если БухИт.ПолучитьСубконто(ВидыСубконто.ГруппыВидыРасходов,, ТабВидовРасходов.ВидРасхода) = 1 Тогда
					СуммаПрямыхРасходов = СуммаПрямыхРасходов + БухИт.СНД(); 
				КонецЕсли;
				
				Если (СуммаПрямыхРасходов - ТабВидовРасходов.СуммаНЗП) > 0 Тогда
					// Формируем проводку по списанию
					Операция.НоваяПроводка(); Операция.РазделительУчета = ЮрЛицо;
					Операция.НомерЖурнала = "ФР";
					Операция.СодержаниеПроводки = "Списание прямых затрат текущего периода";
					Операция.Кредит.Счет = БухИт.Счет;
					Операция.Кредит.Субконто(1, ТабВидовРасходов.ВидРасхода);
					Операция.Кредит.Субконто(2, БухИт.Субконто(СубконтоВидыПродукцииИУслуг));
					Операция.Сумма = СуммаПрямыхРасходов - ТабВидовРасходов.СуммаНЗП;
				Конецесли;
			КонецЦикла;
			
			
		Иначе
			
			Коэффициент = ?(ЗатратыСумма <> 0, СуммаПрямыхЗатрат/ЗатратыСумма, 0);
			ВсегоСписано = 0;
			СуммаУчтенныхЗатрат = 0;
			
			Стр = 0;
			
			БухИт.ВыбратьСубконто(ВидыСубконто.ГруппыВидыРасходов);
			Пока БухИт.ПолучитьСубконто(ВидыСубконто.ГруппыВидыРасходов) = 1 Цикл
				
				ТекущийОстатокЗатрат = БухИт.СКД("С"); 
				
				Если БухИт.Субконто(ВидыСубконто.ГруппыВидыРасходов) = Перечисление.ГруппыВидыРасходов.МатериальныеРасходы Тогда 
					
					ТабВидовРасходов = ТаблКоэффНЗП.РасшифровкаПоВидамРасходов;
					НомСтроки = 0;
					ТабВидовРасходов.НайтиЗначение(Перечисление.ГруппыВидыРасходов.МатериальныеРасходы, НомСтроки, "ВидРасхода");
						Если НомСтроки <> 0 Тогда
							ТекущийОстатокЗатрат = ТабВидовРасходов.ПолучитьЗначение(НомСтроки, "Сумма")  + БухИт.СНД("С");
						КонецЕсли;
						
				КонецЕсли;
				
				Если ТекущийОстатокЗатрат <> 0 Тогда
					
					СуммаУчтенныхЗатрат = СуммаУчтенныхЗатрат + ТекущийОстатокЗатрат;
					СуммаПроводки = Окр(Коэффициент * СуммаУчтенныхЗатрат - ВсегоСписано, 2);
					ВсегоСписано = ВсегоСписано + СуммаПроводки;
					
					// Формируем проводку по списанию
					Операция.НоваяПроводка(); Операция.РазделительУчета = ЮрЛицо;
					Операция.НомерЖурнала = "ФР";
					Операция.СодержаниеПроводки = "Списание прямых затрат текущего периода";
					Операция.Кредит.Счет = БухИт.Счет;
					Операция.Кредит.Субконто(1, БухИт.Субконто(ВидыСубконто.ГруппыВидыРасходов));
					Операция.Кредит.Субконто(2, БухИт.Субконто(СубконтоВидыПродукцииИУслуг));
					Операция.Сумма = СуммаПроводки;
					
				КонецЕсли;
				
			КонецЦикла;
		КонецЕсли;
		
	КонецЕсли;
		
		Если (Объект.ТипНоменклатуры = Перечисление.ТипыНоменклатуры.Работа)
		или (Объект.ТипНоменклатуры = Перечисление.ТипыНоменклатуры.Услуга) Тогда
			// Отражаем общую сумму прямых расходов на все работы и услуги с видом номенклатуры
			// Объект, реализованные в текущем периоде, на счете Н07.02 
			Операция.НоваяПроводка(); Операция.РазделительУчета = ЮрЛицо;
			Операция.НомерЖурнала = "ФР";
			Операция.СодержаниеПроводки = "Прямые затраты по работам и услугам";
			Операция.Дебет.Счет = СчетПоКоду("Н07.02");
			Операция.Сумма = СуммаПрямыхЗатрат;
			
		КонецЕсли;
		
	КонецПроцедуры // СписатьЗатратыНаВыпускПродукцииНУ()
	
	//****************************************************************************** 
	// РаспределитьЗатратыНаВыпускПродукцииНУ(БухИтПрод, ПланСебест, СебестоимостьПродукции, СуммаПрямыхЗатрат, ВидПродукции, ТаблКоэффНЗП)
	//
	// Параметры:
	//  БухИтПрод - ссылка на результаты запроса по движениям готовой продукции и полуфабрикатов
	//  ПланСебест - результаты запроса к бухгалтерским итогм содержащие данные по выпуску продукции в бухучете
	//  СебестоимостьПродукции - таблица в которой хранятся результаты расчета себестоимости по данному виду 
	//							 продукции
	//  СуммаПрямыхЗатрат - общая сумма прямых затрат на выпуск продукции данного вида, которая подлежит
	//						распределению по номенклатуре
	//  ВидПродукции - вид продукции выпуск которой рассчитывается
	//  ТаблКоэффНЗП - Таблица значений  - если по документу формируется печатная форма,
	//                 то в данную таблицу записывается распределение расходов по номенклатуре
	//
	// Вызывается из формул элементов диалога:
	//  Нет.
	//
	// Описание:
	//  В процедуре выполняется распределение общей суммы прямых затрат связанных с выпуском продукции 
	//  (полуфабрикатов) данного вида на всю выпущенную продукции данного вида. Распределение выполняется
	//  пропорционально сумме продукции выпущенной за месяц по плановой себестоимости
	//
	Процедура РаспределитьЗатратыНаВыпускПродукцииНУ(БухИтПрод, ПланСебест, СебестоимостьПродукции, СуммаПрямыхЗатрат, ВидПродукции, ТаблКоэффНЗП)
		
		БазаРаспределения = 0;
		
		// отбираем информацию по выпуску продукции данного вида
		БухИтПрод.ВыбратьСчета();
		Пока БухИтПрод.ПолучитьСчет() = 1 Цикл
			Если (БухИтПрод.Счет = СчетПоКоду("Н02.03"))
			или (БухИтПрод.Счет = СчетПоКоду("Н02.07")) Тогда
				// отбираем операции выпуска продукции и полуфабрикатов
				БухИтПрод.ВыбратьСубконто(1, , 1);
				Пока БухИтПрод.ПолучитьСубконто(1) = 1 Цикл
					Если ПолучитьВидПродукции(БухИтПрод.Субконто(1)) = ВидПродукции Тогда
						
						СебестоимостьПродукции.НоваяСтрока();
						СебестоимостьПродукции.Продукция = БухИтПрод.Субконто(1);
						СебестоимостьПродукции.СчетУчета = БухИтПрод.Счет;
						
						ПоступлениеКоличество = 0;
						БухИтПрод.ВыбратьСубконто(2);
						Пока БухИтПрод.ПолучитьСубконто(2) = 1 Цикл
							Если ПустоеЗначение(БухИтПрод.Субконто(2)) = 1 Тогда
								ПоступлениеКоличество = ПоступлениеКоличество + БухИтПрод.ДО("К");
								
							Иначе
								СебестоимостьПродукции.СуммаПрочееПоступление = СебестоимостьПродукции.СуммаПрочееПоступление + БухИтПрод.ДО("С");
							КонецЕсли;
						КонецЦикла;
						
						Если ПоступлениеКоличество = 0 Тогда
							Продолжить;
						КонецЕсли;
						
						СебестоимостьПродукции.КоличествоВыпущено = ПоступлениеКоличество;
						
						Если (БухИтПрод.Счет = СчетПоКоду("Н02.03")) Тогда
							СчетПланСебест = СчетПоКоду("43");
						Иначе
							СчетПланСебест = СчетПоКоду("21");
						КонецЕсли;
						
						ПланСебест.ВыбратьСчета();
						ЕстьСчет = ПланСебест.ПолучитьСчет(, СчетПланСебест);
						ЕстьСубконто = ПланСебест.ПолучитьСубконто(ВидыСубконто.Номенклатура,,БухИтПрод.Субконто(1));
						
						// В качестве базы распределения прямых расходов на выпущенную продукцию
						// используется плановая себестоимость, берем ее из бухгалтерских итогов
						Если (ЕстьСчет = 1)
						и (ЕстьСубконто = 1)
						и (ПланСебест.ДО("К") <> 0) Тогда
							ПлановаяЦена = ПланСебест.ДО("С")/ПланСебест.ДО("К");
							
							Если ПланСебест.ПолучитьКорСубконто(ВидыСубконто.СтоимостьВыпуска,,Перечисление.СтоимостьВыпуска.ПлановаяСтоимость) = 1 Тогда
								ПлановаяЦена = ПланСебест.КорДО("С")/ПланСебест.КорДО("К");
							КонецЕсли;
							
							СебестоимостьПродукции.ПлановаяСтоимость = Окр(ПлановаяЦена * СебестоимостьПродукции.КоличествоВыпущено, 2);
							
						КонецЕсли;					
						
					КонецЕсли;	
					
				КонецЦикла;
				
			КонецЕсли;
		КонецЦикла;
		
		БазаРаспределения = СебестоимостьПродукции.Итог("ПлановаяСтоимость");
		
		Если БазаРаспределения <> 0 Тогда
			// распределяем общую сумму затрат продукции данного вида по конкретным номенклатурным единицам
			// пропорционально "Выпущенное количество" * "ПлановаяСебестоимость"
			РаспределеноЗатрат = 0;
			Распределено = 0;
			
			СебестоимостьПродукции.ВыбратьСтроки();
			Пока СебестоимостьПродукции.ПолучитьСтроку() = 1 Цикл
				Распределено = Распределено + СебестоимостьПродукции.ПлановаяСтоимость;
				СебестоимостьПродукции.СуммаВыпуска = СуммаПрямыхЗатрат*Распределено/БазаРаспределения - РаспределеноЗатрат;
				РаспределеноЗатрат = РаспределеноЗатрат + СебестоимостьПродукции.СуммаВыпуска;			
			КонецЦикла;
			
			ТаблКоэффНЗП.СуммаПрямыхЗатрат = СуммаПрямыхЗатрат;
		КонецЕсли;
		
		// Если формируется печатная форма, то в таблицу ТаблКоэффНЗП записывается распределение расходов по номенклатуре
		Если ФормироватьПечатнуюФорму = 1 Тогда           
			РасшифровкаРаспределеияРасходов = СоздатьОбъект("ТаблицаЗначений");
			РасшифровкаРаспределеияРасходов.Загрузить(СебестоимостьПродукции);
			ТаблКоэффНЗП.СебестоимостьПродукции = РасшифровкаРаспределеияРасходов;
		КонецЕсли;
		
	КонецПроцедуры // РаспределитьЗатратыНаВыпускПродукцииНУ()
	
	//****************************************************************************** 
	// РассчитатьСебестоимостьПоВидуПродукцииНУ(БухИт, БухИтПрод, ПланСебест, Объект, СтекВызовов,
	//											УровеньРекурсии, Результат, ТабРез, ОбработанныеОбъекты, ТаблКоэффНЗП)
	//
	// Параметры:
	//  БухИт - результаты запроса к бухгалтерским итогам, содержащего все данные по прямым расходам на выпуск продукции
	//  БухИтПрод - результаты запроса к бухгалтерским итогм содержащие данные по движению продукции
	//  ПланСебест - результаты запроса к бухгалтерским итогм содержащие данные по выпуску продукции в бухучете
	//  Объект - вид номенклатуры (продукции) по которому выполняется в данный момент расчет себестоимости
	//  СтекВызовов - таблица хранящая историю всех вызовов процедуры (для анализа рекурсии)
	//  УровеньРекурсии - текущая глубина рекурсивного вызова
	//  Результат - результат расчета себестоимости на текущем уровне рекурсии
	//  ТабРез - таблица значений, содержащая результаты расчетов 
	//			 "передельных" списаний (продукция или полуфабрикат - ВидНоменклатуры)
	//  ОбработанныеОбъекты - список значений, хранящий ссылки на виды продукции, себестоимость по которым уже была рассчитана
	//  ТаблКоэффНЗП - таблица содержащая коэффиценты оценочные коэффициенты для определения доли незавершенного производства
	//				   в доле прямых затрат текущего месяца
	//
	// Вызывается из формул элементов диалога:
	//  Нет.
	//
	// Описание:
	//  В процедуре выполняется расчет себестоимости выпуска продукции (полуфабрикатов) за текущий месяц
	//  Выполняются корректирующие проводки с целью отражения в бухгалтерских итогах операций движения
	//  готовой продукции и полуфабрикатов по рассчитанной себестоимости
	//
	Процедура РассчитатьСебестоимостьПоВидуПродукцииНУ(БухИт, БухИтПрод, ПланСебест, Объект, СтекВызовов,
		УровеньРекурсии = 1, Результат, ТабРез, ОбработанныеОбъекты, ТаблКоэффНЗП)
		
		Если ОбработанныеОбъекты.НайтиЗначение(Объект) <> 0 Тогда
			// Для этого вида продукции уже был выполнен расчет и корректировка себестоимости
			Возврат;
			
		КонецЕсли;
		
		// подготавливаем исходные данные для расчета
		ОстатокСумма	  = 0;
		ЗатратыСумма	  = 0;
		
		ЗапросПоВидуНоменклатурыВыполнен = БухИт.ПолучитьСубконто(СубконтоВидыПродукцииИУслуг, , Объект);
		
		Если ЗапросПоВидуНоменклатурыВыполнен = 1 Тогда
			
			ОстатокСумма	  = БухИт.СНД("С");
			
			// информация по данному виду продукции есть в рассчитанных итогах
			БухИт.ВыбратьКорСчета();
			Пока (БухИт.ПолучитьКорСчет() = 1)
			и (Результат >= 0) Цикл
				
				Если (БухИт.ВыбранаПоДт() = 1)
				и  ((БухИт.КорСчет = СчетПоКоду("Н02.03")) или (БухИт.КорСчет = СчетПоКоду("Н02.07"))) Тогда
					БухИт.ВыбратьКорСубконто(1, , 1);
					// встретили ситуацию, когда на себестоимость рассчитываемого вида продукции
					// влияет себестоимость другой продукции или полуфабрикатов, т.е. имеем дело с многопередельным производством
					Пока (БухИт.ПолучитьКорСубконто(1) = 1)
					и (Результат >= 0) Цикл
						КорВидПродукции = ПолучитьВидПродукции(БухИт.КорСубконто(1));
						
						Если (СтекВызовов.НайтиЗначение(КорВидПродукции, , "Субконто") = 0)
						и (Объект <> КорВидПродукции) Тогда
							Стр = НайтиВТаблицеРезНУ(ТабРез, Объект, БухИт.КорСубконто(1));
							Если (Стр = 0) Тогда
								// Расчет предыдущего передела еще не выполнен
								УровеньРекурсии = УровеньРекурсии + 1;
								СтекВызовов.НоваяСтрока();
								СтекВызовов.Счет 	 = БухИт.Счет;
								СтекВызовов.Субконто = Объект;
								СтекВызовов.КорСчет  = БухИт.КорСчет;
								СтекВызовов.КорСубконто = БухИт.КорСубконто(1);
								
								// РЕКУРСИЯ!
								РассчитатьСебестоимостьПоВидуПродукцииНУ(БухИт, БухИтПрод, ПланСебест, КорВидПродукции, СтекВызовов,
								УровеньРекурсии, Результат, ТабРез, ОбработанныеОбъекты, ТаблКоэффНЗП);
								
								// повторная попытка спозиционироваться на результатах расчета "передельных" списаний			    
								Стр = НайтиВТаблицеРезНУ(ТабРез, Объект, БухИт.КорСубконто(1));
								
							КонецЕсли;
							
							Если (Результат >= 0)
							и (Стр <> 0) Тогда
								// при расчете себестоимости ошибки не возникло можно продолжать вести расчеты
								// результаты расчета себестоимости в данном случае помещены в таблице результатов "РезРасчетов"
								ЗатратыСумма	  	= ЗатратыСумма + ТабРез.ПолучитьЗначение(Стр, "ЗатратыСумма");
							КонецЕсли;
							
						Иначе
							// обнаружена обратная связь в цепочке взаимных списаний между видами продукции
							// разных переделов. Рассчитать себестоимость в таких условиях невозможно!
							СтекВызовов.НоваяСтрока();
							СтекВызовов.Счет 	 = БухИт.Счет;
							СтекВызовов.Субконто = Объект;
							СтекВызовов.КорСчет  = БухИт.КорСчет;
							СтекВызовов.КорСубконто = БухИт.КорСубконто(1);
							
							Результат = -3;
							
						КонецЕсли;
						
					КонецЦикла;
					
				Иначе
					// все остальные виды прямых расходов
					ЗатратыСумма	  	= ЗатратыСумма + БухИт.КорДО("С") - БухИт.КорКО("С");
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
		Если Результат >= 0 Тогда
			// продолжаем расчет - необходимо определить долю незавершенного производства для
			// данного вида продукции
			Если ЗапросПоВидуНоменклатурыВыполнен = 1 Тогда
				АнализПрямыхРасходовНаПродукциюНУ(БухИт, ЗатратыСумма, Объект, ТаблКоэффНЗП, Результат);
				
				Если Результат >= 0 Тогда
					// При выходе из процедуры таблица ТаблКоэффНЗП всегда спозиционирована на нужной строке
					Если (ТаблКоэффНЗП.Способ = 1)
					или (ТаблКоэффНЗП.Способ = 2) Тогда
						КоэффициентНЗП = ТаблКоэффНЗП.Коэффициент;
						СуммаПрямыхЗатрат = Окр((ОстатокСумма + ЗатратыСумма) * (1 - КоэффициентНЗП), 2);
						
					ИначеЕсли ТаблКоэффНЗП.Способ = 3 Тогда
						Если (ТаблКоэффНЗП.КонСальдоНЗП + ТаблКоэффНЗП.ВыпПродСум) <> 0 Тогда
							Коэффициент = (ОстатокСумма + ЗатратыСумма)/(ТаблКоэффНЗП.КонСальдоНЗП + ТаблКоэффНЗП.ВыпПродСум);
						Иначе
							Коэффициент = 0;
						КонецЕсли;
						ТаблКоэффНЗП.Коэффициент = Окр(Коэффициент, 4);
						СуммаПрямыхЗатрат = (ОстатокСумма + ЗатратыСумма) - Окр(ТаблКоэффНЗП.КонСальдоНЗП * Коэффициент, 2);
						
					Иначе		
						СуммаПрямыхЗатрат = Окр((ОстатокСумма + ЗатратыСумма) - ТаблКоэффНЗП.КонСальдоНЗП, 2);
						
					КонецЕсли;
					ТаблКоэффНЗП.СуммаПрямыхЗатрат = СуммаПрямыхЗатрат;
				КонецЕсли;
			КонецЕсли;
			
			Если Результат >= 0 Тогда
				СебестоимостьПродукции = СоздатьОбъект("ТаблицаЗначений");
				СебестоимостьПродукции.НоваяКолонка("Продукция", "Справочник");
				СебестоимостьПродукции.НоваяКолонка("КоличествоВыпущено", "Число", 15, 3);
				СебестоимостьПродукции.НоваяКолонка("ПлановаяСтоимость", "Число");
				СебестоимостьПродукции.НоваяКолонка("Себестоимость", "Число");
				СебестоимостьПродукции.НоваяКолонка("СредняяСебестоимость", "Число");
				СебестоимостьПродукции.НоваяКолонка("СуммаВыпуска", "Число", 15, 2);
				СебестоимостьПродукции.НоваяКолонка("СуммаПрочееПоступление", "Число", 15, 2);
				СебестоимостьПродукции.НоваяКолонка("УчтеноСписанноеКоличество", "Число", 15, 3);
				СебестоимостьПродукции.НоваяКолонка("СчетУчета", "Счет");
				
				// Для продукции отгруженной без перехода права собственности
				СебестоимостьПродукции.НоваяКолонка("ОтгруженоНаСумму", "Число", 15, 2);
				СебестоимостьПродукции.НоваяКолонка("УчтеноОтгруженноеКоличество", "Число", 15, 3);
				СебестоимостьПродукции.НоваяКолонка("СредняяСебестоимостьОтгруженная", "Число");
				
				Если (Объект.ТипНоменклатуры <> Перечисление.ТипыНоменклатуры.Работа)
				и (Объект.ТипНоменклатуры <> Перечисление.ТипыНоменклатуры.УслугаЕНВД)
				и (Объект.ТипНоменклатуры <> Перечисление.ТипыНоменклатуры.Услуга) Тогда
					// распределяем общую сумму прямых расходов на производство продукции данного вида
					// на весь выпуск и получаем таким образом себестоимость продукции по текущему виду
					// результат накапливаем в таблице значений СебестоимостьПродукции
					Если ЗапросПоВидуНоменклатурыВыполнен = 1 Тогда
						РаспределитьЗатратыНаВыпускПродукцииНУ(БухИтПрод, ПланСебест, СебестоимостьПродукции, СуммаПрямыхЗатрат, Объект, ТаблКоэффНЗП);
					КонецЕсли;
					
					КорректировкаСебестоимостиГПиПФвНУ(БухИтПрод, СебестоимостьПродукции, ТабРез, Объект);
					
				КонецЕсли;
				
				// Списываем затраты со счета Н01.05
				Если ЗапросПоВидуНоменклатурыВыполнен = 1 Тогда
					СписатьЗатратыНаВыпускПродукцииНУ(БухИт, СебестоимостьПродукции, СуммаПрямыхЗатрат, ЗатратыСумма + ОстатокСумма, Объект, ТаблКоэффНЗП);
				КонецЕсли;
				
				// фиксируем рассчитанный вид продукции в списке для исключения повторных расчетов
				ОбработанныеОбъекты.ДобавитьЗначение(Объект);
			КонецЕсли;
		КонецЕсли;
		
		// возврат из процедуры
		Если УровеньРекурсии > 1 Тогда
			// восстанавливаем позиционирование в результатах запроса, которое было до РЕКУРСИВНОГО ВЫЗОВА
			// повторно инициализируем выборку по данным из стека вызовов
			УровеньРекурсии = УровеньРекурсии - 1;
			
			БухИт.ПолучитьСубконто(СубконтоВидыПродукцииИУслуг, , СтекВызовов.ПолучитьЗначение(УровеньРекурсии,"Субконто"));
			БухИт.ВыбратьКорСчета(, 1);
			БухИт.ПолучитьКорСчет(, СтекВызовов.ПолучитьЗначение(УровеньРекурсии,"КорСчет"));
			БухИт.ВыбратьКорСубконто(1, , 1);
			БухИт.ПолучитьКорСубконто(1, , СтекВызовов.ПолучитьЗначение(УровеньРекурсии,"КорСубконто"));
			
			Если Результат >= 0 Тогда
				// при нормальном завершении - затираем значение в стеке вызовов
				СтекВызовов.УдалитьСтроку(УровеньРекурсии);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецПроцедуры // РассчитатьСебестоимостьПоВидуПродукцииНУ()
	
	//****************************************************************************** 
	// РасчетСебестоимостиПродукцииИПолуфабрикатовНУ()
	//
	// Параметры:
	//
	// Вызывается из формул элементов диалога:
	//  Нет.
	//
	// Описание:
	//  В процедуре выполняется расчет себестоимости продукции и полуфабрикатов для целей налогового учета
	//  и выполняется корректировка бухгалтерских итогов с целью отражения движений продукции и полуфабрикатов
	//  за месяц по рассчитанной себестоимости. Расчет ведется отдельно по видам номенклатуры
	//
	Процедура РасчетСебестоимостиПродукцииИПолуфабрикатовНУ()
		
		Если Операция.КоличествоПроводок() > 0 Тогда
			Операция.ЗаписатьПроводки();
		КонецЕсли;
		
		// Формирование печатной формы
		Если ФормироватьПечатнуюФорму = 1 Тогда
			НаименованиеРегламентнойОперации = "Расчет стоимости продукции (работ, услуг)";
			Таб.ВывестиСекцию("РегламентнаяОперацияНУ");
			ИнициализироватьРасшифровкиПоКорректировкеПродукции();
		КонецЕсли;
		
		// формируем запрос для определения плановой себестоимости продукции (по данным бух учета)
		ПланСебест = СоздатьОбъект("БухгалтерскиеИтоги"); ПланСебест.ИспользоватьРазделительУчета(ЮрЛицо);
		ПланСебест.ИспользоватьПланСчетов(ОсновнойПланСчетов());
		ПланСебест.ИспользоватьСубконто(ВидыСубконто.Номенклатура,, 1);
		ПланСебест.ИспользоватьКорСубконто(ВидыСубконто.СтоимостьВыпуска,, 1);
		ПланСебест.ВыполнитьЗапрос(ДатаНач, ДатаКон, "21,43", "40",, 2,, "СК");
		
		// выполняем запрос к бух итогам для анализа движений готовой продукции
		БухИтПрод = СоздатьОбъект("БухгалтерскиеИтоги"); БухИтПрод.ИспользоватьРазделительУчета(ЮрЛицо);
		БухИтПрод.ИспользоватьПланСчетов(ОсновнойПланСчетов());
		БухИтПрод.ИспользоватьСубконто(ВидыСубконто.Номенклатура,, 1);
		БухИтПрод.ИспользоватьСубконто(ВидыСубконто.УсловияПоступленияИВыбытия,, 1);
		БухИтПрод.ИспользоватьСубконто(ВидыСубконто.Основание,, 1);
		БухИтПрод.ВключатьСубсчета(-1, 1);
		БухИтПрод.ВыполнитьЗапрос(ДатаНач, ДатаКон, "Н02.03,Н02.07,Н02.04.2,Н02.04.3",,, 3, "Проводка","СК");
		
		// создаем таблицу для хранения результатов расчета "передельных" (полуфабрикат - вид номенклатуры)
		// сумм списания, на отдельных переделах многопередельного производства
		ТабРез = СоздатьОбъект("ТаблицаЗначений");
		ТабРез.НоваяКолонка("Объект", "Справочник");
		ТабРез.НоваяКолонка("КорОбъект", "Справочник");
		ТабРез.НоваяКолонка("ЗатратыСумма", "Число", 15, 2);
		
		// список для фиксации тех видов продукции, себестоимость по которым уже рассчитана
		ОбработанныеОбъекты = СоздатьОбъект("СписокЗначений");
		
		БухИт = СоздатьОбъект("БухгалтерскиеИтоги"); БухИт.ИспользоватьРазделительУчета(ЮрЛицо);
		БухИт.ИспользоватьПланСчетов(ОсновнойПланСчетов());
		БухИт.ИспользоватьСубконто(СубконтоВидыПродукцииИУслуг,, 1);
		БухИт.ИспользоватьСубконто(ВидыСубконто.ГруппыВидыРасходов,, 1);
		БухИт.ИспользоватьКорСубконто(,, 1);
		БухИт.ИспользоватьКорСубконто(,, 1);
		БухИт.ИспользоватьКорСубконто(,, 1);
		БухИт.ВключатьСубсчета(-1, -1);
		БухИт.ВыполнитьЗапрос(ДатаНач, ДатаКон, "Н01.05",,, 3,,"СК");
		
		СписокВидовНоменклатуры = СоздатьОбъект("СписокЗначений");
		БухИт.ВыбратьСубконто(СубконтоВидыПродукцииИУслуг);
		Пока БухИт.ПолучитьСубконто(СубконтоВидыПродукцииИУслуг) = 1 Цикл
			СписокВидовНоменклатуры.ДобавитьЗначение(БухИт.Субконто(СубконтоВидыПродукцииИУслуг));
		КонецЦикла;
		
		// расчет незавершенного производства
		ТаблКоэффНЗП = СоздатьОбъект("ТаблицаЗначений");
		РассчитатьКоэффициентыНЗП(ТаблКоэффНЗП, ПланСебест);
		
		// Заполнить дополнительные колонки таблицы, необходимые для расчета незавершенки по 1,2 и 3-му способу (ст. 319 НК РФ)	
		РассчитатьДополнительныеПараметрыНЗП(ТаблКоэффНЗП, СписокВидовНоменклатуры, ПланСебест);
		
		БухИтПрод.ВыбратьСубконто(ВидыСубконто.Номенклатура);
		Пока БухИтПрод.ПолучитьСубконто(ВидыСубконто.Номенклатура) = 1 Цикл
			СписокВидовНоменклатуры.ДобавитьЗначение(ПолучитьВидПродукции(БухИтПрод.Субконто(ВидыСубконто.Номенклатура)));
		КонецЦикла;
		
		НомерВидаНоменклатуры = 1;
		Пока НомерВидаНоменклатуры <= СписокВидовНоменклатуры.РазмерСписка() Цикл
			
			ВидНоменклатуры = СписокВидовНоменклатуры.ПолучитьЗначение(НомерВидаНоменклатуры,);
			
			// создаем специальную таблицу для хранения истории возможных рекурсивных попыток расчета
			// себестоимости на более ранних переделах
			СтекВызовов = СоздатьОбъект("ТаблицаЗначений");
			СтекВызовов.НоваяКолонка("Счет");
			СтекВызовов.НоваяКолонка("Субконто");
			СтекВызовов.НоваяКолонка("КорСчет");
			СтекВызовов.НоваяКолонка("КорСубконто");
			
			Результат = 0;
			
			РассчитатьСебестоимостьПоВидуПродукцииНУ(БухИт, БухИтПрод, ПланСебест, ВидНоменклатуры,
			СтекВызовов, 1, Результат, ТабРез, ОбработанныеОбъекты, ТаблКоэффНЗП);
			
			Если Результат = -3 Тогда
				ТекстСообщения = "Невозможно рассчитать себестоимость для вида продукции: """ + СтекВызовов.ПолучитьЗначение(1, "Субконто") + """ по причине циклического списания!";
				глСообщениеПроведения(ТекстСообщения, ТекущийДокумент(), -1);
			КонецЕсли;
			
			Если Результат = -4 Тогда
				Возврат;
				
			ИначеЕсли Результат < 0 Тогда
				СтрокаСписаний = "Последовательность списаний: ";
				Для т = 1 По СтекВызовов.КоличествоСтрок() Цикл
					СтрокаСписаний = СтрокаСписаний + ?(т <> 1,""" <= ""","""") + СтекВызовов.ПолучитьЗначение(т, "Субконто");
				КонецЦикла;
				СтрокаСписаний = СтрокаСписаний + """ <= """ + ПолучитьВидПродукции(СтекВызовов.ПолучитьЗначение(СтекВызовов.КоличествоСтрок(), "КорСубконто")) + """";
				ТекстСообщения = СтрокаСписаний;
				глСообщениеПроведения(ТекстСообщения, ТекущийДокумент(), -1);
			КонецЕсли;
			
			НомерВидаНоменклатуры = НомерВидаНоменклатуры + 1;
			
		КонецЦикла;
		
		// Формирование печатной формы
		Если ФормироватьПечатнуюФорму = 1 Тогда
			СформироватьПечатнуюФормуОперацииРасчетаНЗП(ТаблКоэффНЗП);
		КонецЕсли;
		
	КонецПроцедуры // РасчетСебестоимостиПродукцииИПолуфабрикатовНУ()
	
	//******************************************************************************
	// РаспределениеТранспортныхРасходовН01_07()
	//
	// Параметры:
	//  Нет.
	//
	// Вызывается из формул элементов диалога:
	//  Нет.
	//
	// Описание:
	//  Закрытие счета Н01.07 пропорционально текущим остаткам
	//  товаров на складе
	//
	Процедура РаспределениеТранспортныхРасходовН01_07()
		
		СчН01_07 = СчетПоКоду("Н01.07");
		
		Состояние("Учет транспортных расходов");
		
		Если Операция.КоличествоПроводок() > 0 Тогда
			Операция.ЗаписатьПроводки();
		КонецЕсли;
		
		ОстатокТовараНаНачало = 0;
		ПриобретеноТоваров    = 0;
		РеализованоТоваров = 0;
		ОстатокТовара = 0;
		ВыбылоПоЕНДВЗаМесяц = 0;
		
		БухИтРасходы = СоздатьОбъект("БухгалтерскиеИтоги"); БухИтРасходы.ИспользоватьРазделительУчета(ЮрЛицо);
		БухИтРасходы.ПериодМ(ДатаКон);
		
		БухИт = СоздатьОбъект("БухгалтерскиеИтоги"); БухИт.ИспользоватьРазделительУчета(ЮрЛицо);
		БухИт.ИспользоватьСубконто(ВидыСубконто.Номенклатура);
		Бухит.ИспользоватьСубконто(ВидыСубконто.УсловияПоступленияИВыбытия);
		БухИт.Опции(1,);
		Бухит.ВключатьСубсчета(, -1);
		БухИт.ВыполнитьЗапрос(ДатаНач, ДатаКон, "Н02.02, Н02.04.1",,, 3,,);
		БухИт.ВыбратьСубконто();
		Пока БухИт.ПолучитьСубконто() = 1 Цикл                     
			Если ПустоеЗначение(БухИт.Субконто(ВидыСубконто.Номенклатура)) = 1 Тогда
				Продолжить;
			КонецЕсли;     
			
			Если БухИт.Субконто(ВидыСубконто.Номенклатура).ТипНоменклатуры <> Перечисление.ТипыНоменклатуры.Товар Тогда
				Продолжить;
			КонецЕсли;     
			
			ОстатокТовараНаНачало = ОстатокТовараНаНачало + БухИт.СНД() - БухИт.СНК();
			ОстатокТовара         = ОстатокТовара + БухИт.СКД() - БухИт.СКК();
			
			// Определим стоимость поступивших товаров.
			Если БухИт.ПолучитьСчет(, "Н02.02") = 1 Тогда
				ПриобретеноТоваров = ПриобретеноТоваров + БухИт.ДО();
				БухИт.ПолучитьСчет(, 0);
			КонецЕсли;
			
			// Определим стоимость реализованных товаров.
			Если БухИт.ПолучитьКорСчет(, "Н07.05") = 1 Тогда
				РеализованоТоваров = РеализованоТоваров + БухИт.КорКО();
				БухИт.ПолучитьКорСчет(, 0);
			КонецЕсли;
			
			// Определим стоимость товаров, выбывших по деятельности не облагаемой налогом на прибыль.
			Если БухИт.ПолучитьСубконто(ВидыСубконто.УсловияПоступленияИВыбытия,, Перечисление.УсловияПоступленияИВыбытия.НеОблагается) = 1 Тогда
				ВыбылоПоЕНДВЗаМесяц = ВыбылоПоЕНДВЗаМесяц + БухИт.КО();
			КонецЕсли;
			
		КонецЦикла;
		
		ТранспортныеРасходы = Макс(0, БухИтРасходы.СНД(СчН01_07) + БухИтРасходы.ДО(СчН01_07));
		
		Если ОстатокТовара + РеализованоТоваров + ВыбылоПоЕНДВЗаМесяц <> 0 Тогда
			СреднийПроцент = Окр(ТранспортныеРасходы / (ОстатокТовара + РеализованоТоваров + ВыбылоПоЕНДВЗаМесяц), 8);
			
		Иначе
			СреднийПроцент = 0;
		КонецЕсли;                                                             		
		
		Если РеализованоТоваров + ВыбылоПоЕНДВЗаМесяц = 0 Тогда // реализации не было 
			ОстатокТранспортныхРасходов       = ТранспортныеРасходы;
			СуммаСписания     = 0;
			СуммаСписанияЕНВД = 0;
			
		Иначе
			Если ОстатокТовара + РеализованоТоваров + ВыбылоПоЕНДВЗаМесяц <> 0 Тогда
				СуммаСписанияТранспортныхРасходов       = Окр(ТранспортныеРасходы * (РеализованоТоваров + ВыбылоПоЕНДВЗаМесяц) / (ОстатокТовара + РеализованоТоваров + ВыбылоПоЕНДВЗаМесяц), 2);
			Иначе
				СуммаСписанияТранспортныхРасходов       = 0;
			КонецЕсли;			
			ОстатокТранспортныхРасходов = ТранспортныеРасходы - СуммаСписанияТранспортныхРасходов;
			СуммаСписания = Окр(СуммаСписанияТранспортныхРасходов * (РеализованоТоваров / (РеализованоТоваров + ВыбылоПоЕНДВЗаМесяц)), 2);
			
			
			Если СуммаСписания > 0 Тогда
				Операция.НоваяПроводка(); Операция.РазделительУчета = ЮрЛицо;
				Операция.НомерЖурнала = "НУ";
				Операция.СодержаниеПроводки = "Транспортные расходы";
				Операция.Сумма = СуммаСписания;
				Операция.Кредит.Счет = СчН01_07;
				Операция.Дебет.Счет  = СчетПоКоду("Н07.03");
			КонецЕсли;
			
			СуммаСписанияЕНВД = СуммаСписанияТранспортныхРасходов - СуммаСписания;
			Если СуммаСписанияЕНВД > 0 Тогда
				Операция.НоваяПроводка(); Операция.РазделительУчета = ЮрЛицо;
				Операция.НомерЖурнала = "НУ";
				Операция.СодержаниеПроводки = "Транспортные расходы не принимаем к НУ";
				Операция.Сумма = СуммаСписанияЕНВД;
				Операция.Кредит.Счет = СчН01_07;
			КонецЕсли;
		КонецЕсли;
		
		// Формирование печатной формы
		Если ФормироватьПечатнуюФорму = 1 Тогда
			НаименованиеРегламентнойОперации = "Учет транспортных расходов (Н01.07)";
			Таб.ВывестиСекцию("РегламентнаяОперацияНУ");
			ИнициализироватьРасшифровкуТранспортныхРасходов();
			
			Если ТранспортныеРасходы <> 0 Тогда
				ТаблицаРасшифровкаРегламентнойОперации.НоваяСтрока();
				ТаблицаРасшифровкаРегламентнойОперации.РасходовНаНачало       = БухИтРасходы.СНД(СчН01_07);
				ТаблицаРасшифровкаРегламентнойОперации.РасходовВТекущемМесяце = БухИтРасходы.ДО(СчН01_07);
				ТаблицаРасшифровкаРегламентнойОперации.ОстатокТоваровНаНачало = ОстатокТовараНаНачало;
				ТаблицаРасшифровкаРегламентнойОперации.ПриобретеноТоваров     = ПриобретеноТоваров;
				ТаблицаРасшифровкаРегламентнойОперации.РеализованоТоваров     = РеализованоТоваров;
				ТаблицаРасшифровкаРегламентнойОперации.ВыбылоПоЕНДВ           = ВыбылоПоЕНДВЗаМесяц;
				ТаблицаРасшифровкаРегламентнойОперации.ПрочееВыбытие          = ОстатокТовараНаНачало + ПриобретеноТоваров - ОстатокТовара - РеализованоТоваров - ВыбылоПоЕНДВЗаМесяц;
				ТаблицаРасшифровкаРегламентнойОперации.ОстатокТоваровНаКонец  = ОстатокТовара;
				ТаблицаРасшифровкаРегламентнойОперации.СреднийПроцент         = СреднийПроцент;
				ТаблицаРасшифровкаРегламентнойОперации.ОстатокРасходов        = ОстатокТранспортныхРасходов;
				ТаблицаРасшифровкаРегламентнойОперации.ПризнаноРасхов         = СуммаСписания;
				ТаблицаРасшифровкаРегламентнойОперации.НеПризнаноРасходов     = СуммаСписанияЕНВД;
				
				Расшифровка = СоздатьОбъект("СписокЗначений");
				ОсновнаяРасшифровкаОСВ.Выгрузить(Расшифровка);
				Расшифровка.Установить("Счет", СчН01_07);
				ТаблицаРасшифровкаРегламентнойОперации.РасшифровкаОСВПоСчетуН01_07 = Расшифровка;
				
			КонецЕсли;
			
			ВыводВОтчетИнформацииОВыполненииОперации("РасчетТранспортныхРасходов", // идентификатор отображаемой таблицы
			ТаблицаРасшифровкаРегламентнойОперации, // таблица с данными, для заполнения печатной формы
			"", // дополнительные данные
			"Учет транспортных расходов", //строка, выводимая в отчет-список выполненных операций, в случае если операция выполнена
			"По счету Н01.07  """ + СчН01_07 + """ расходов нет"); //строка, выводимая в отчет-список выполненных операций, в случае если операция не выполнена
		КонецЕсли;
		
	КонецПроцедуры // РаспределениеТранспортныхРасходовН01_07()
	
	//******************************************************************************
	// НормированиеПредставительскихРасходовН03_03()
	//
	// Параметры:
	//  Нет.
	//
	// Вызывается из формул элементов диалога:
	//  Нет.
	//
	// Описание:
	//  Нормированное списание представительских расходов со счета Н03.03 
	//  Представительские расходы, включаемые в течение отчетного периода в состав
	//  прочих расходов не должны превышать 4 процентов от расходов налогоплательщика
	//  на оплату труда (подпункт 22 пункта 1 и пункт 2 статьи 264 НК).
	//
	Процедура НормированиеПредставительскихРасходовН03_03()
		
		СчН03_03    = СчетПоКоду("Н03.03");
		
		Состояние("Учет представительских расходов");
		
		Если Операция.КоличествоПроводок() > 0 Тогда
			Операция.ЗаписатьПроводки();
		КонецЕсли;
		
		БухИт = СоздатьОбъект("БухгалтерскиеИтоги"); БухИт.ИспользоватьРазделительУчета(ЮрЛицо);
		БухИт.ПериодМНГ(ДатаКон);
		БухИтНеПрин = СоздатьОбъект("БухгалтерскиеИтоги"); БухИтНеПрин.ИспользоватьРазделительУчета(ЮрЛицо);
		БухИтНеПрин.Опции(1,1);
		БухИтНеПрин.ВключатьСубсчета(0,0);
		БухИтНеПрин.ИспользоватьСубконто(ВидыСубконто.ГруппыВидыРасходов);
		БухИтНеПрин.ВыполнитьЗапрос(НачГода(ДатаКон),ДатаКон,"Н07.04","Н14",,,2);
		
		// расходы на оплату труда за год - кредитовый оборот за год по счету Н14, 
		// минус оплата труда, относимая на расходы будущих периодов, ОБ("Н04", "Н14") 
		// минус непринимаемые расходы
		Непринимаемые = 0;
		
		БухИтНеПрин.ВыбратьСубконто();
		Пока БухИтНеПрин.ПолучитьСубконто() = 1 Цикл
			Если БухИтНеПрин.Субконто(1) = Перечисление.ГруппыВидыРасходов.НеПринимаемые Тогда
				Непринимаемые =  Непринимаемые + БухИтНеПрин.ДО();
			КонецЕсли;
		КонецЦикла;
				
		РасходыНаОплатуТруда = БухИт.КО("Н14") - БухИт.ОБ("Н04","Н14") - Непринимаемые;
		
		// добавим расходы по договорам страхования за год
		РасходыНаОплатуТруда = РасходыНаОплатуТруда + БухИт.КО("Н03.05") + БухИт.КО("Н03.06") + БухИт.КО("Н03.07");
		
		// добавим расходы на оплату труда будущих периодов, принятых в текущем
		РасходыНаОплатуТруда = РасходыНаОплатуТруда + БухИт.КО("Н04.10");
		
		// сумма всего представительских расходов подлежащих нормировке
		ВсегоПредставительскихРасходов = БухИт.ДО(СчН03_03);
		
		// сумма, которая уже отнесена в состав прочих расходов в отчетном периоде
		СуммаУжеНормированная = БухИт.КО(СчН03_03);
		
		// сумма, которую можно отнести в состав прочих расходов в отчетном периоде
		СуммаПредставительскихРасходовПоНорме = Мин(РасходыНаОплатуТруда*0.04, ВсегоПредставительскихРасходов);
		
		// сумма, подлежащая отнесению в состав прочих расходов в этом месяце
		СуммаСписания = СуммаПредставительскихРасходовПоНорме - СуммаУжеНормированная;
		
		Если СуммаСписания > 0 Тогда
			Операция.НоваяПроводка(); Операция.РазделительУчета = ЮрЛицо;
			Операция.НомерЖурнала = "НУ";
			Операция.СодержаниеПроводки = "Представительские расходы";
			Операция.Сумма = СуммаСписания;
			Операция.Дебет.Счет   = СчетПоКоду("Н07.04.1");
			Операция.Дебет.ГруппыВидыРасходов = Перечисление.ГруппыВидыРасходов.ПредставительскиеРасходы;
			Операция.Кредит.Счет  = СчН03_03;
		КонецЕсли;
		
		// Формирование печатной формы
		Если ФормироватьПечатнуюФорму = 1 Тогда
			НаименованиеРегламентнойОперации = "Учет представительских расходов (Н03.03)";
			Таб.ВывестиСекцию("РегламентнаяОперацияНУ");
			ИнициализироватьРасшифровкуПоНормировованиюПредставительскихРасходов();
			
			Если ВсегоПредставительскихРасходов <> 0 Тогда
				ТаблицаРасшифровкаРегламентнойОперации.НоваяСтрока();
				ТаблицаРасшифровкаРегламентнойОперации.ВсегоРасходов         = ВсегоПредставительскихРасходов;
				ТаблицаРасшифровкаРегламентнойОперации.РасходыНаОплатуТруда  = РасходыНаОплатуТруда;
				ТаблицаРасшифровкаРегламентнойОперации.ВПределахНорм         = СуммаПредставительскихРасходовПоНорме;
				ТаблицаРасшифровкаРегламентнойОперации.ПринятоКУчетуРанее    = СуммаУжеНормированная;
				ТаблицаРасшифровкаРегламентнойОперации.ПринятоВТекущемМесяце = СуммаСписания;
				
				Расшифровка = СоздатьОбъект("СписокЗначений");
				ОсновнаяРасшифровкаОСВ.Выгрузить(Расшифровка);
				Расшифровка.Установить("Счет", СчН03_03);
				ТаблицаРасшифровкаРегламентнойОперации.РасшифровкаОСВПоСчету = Расшифровка;
			КонецЕсли;
			
			ВыводВОтчетИнформацииОВыполненииОперации("ЗакрытиеСчетаН03_03", // идентификатор отображаемой таблицы
			ТаблицаРасшифровкаРегламентнойОперации, // таблица с данными, для заполнения печатной формы
			"Учет представительских расходов", // дополнительные данные
			"Учет представительских расходов (Н03.03)", //строка, выводимая в отчет-список выполненных операций, в случае если операция выполнена
			"По счету Н03.03 ""Представительские расходы"" расходов нет"); //строка, выводимая в отчет-список выполненных операций, в случае если операция не выполнена
		КонецЕсли;
		
	КонецПроцедуры // НормированиеПредставительскихРасходовН03_03()
	
	//******************************************************************************
	// НормированиеРасходовНаРекламуН03_04()
	//
	// Параметры:
	//  Нет.
	//
	// Вызывается из формул элементов диалога:
	//  Нет.
	//
	// Описание:
	//  Нормированное списание расходов на рекламу со счета Н03.04 
	//  Сумма, которую можно отнести на расходы по рекламе для целей налогообложения, не 
	//  должна превышать 1 процента от выручки.
	//
	Процедура НормированиеРасходовНаРекламуН03_04()
		
		СчН03_04    = СчетПоКоду("Н03.04");
		СчН07_04_01 = СчетПоКоду("Н07.04.1");
		СчН06       = СчетПоКоду("Н06");
		
		Состояние("Учет расходов на рекламу");
		
		Если Операция.КоличествоПроводок() > 0 Тогда
			Операция.ЗаписатьПроводки();
		КонецЕсли;
		
		БухИт = СоздатьОбъект("БухгалтерскиеИтоги"); БухИт.ИспользоватьРазделительУчета(ЮрЛицо);
		БухИт.ПериодМНГ(ДатаКон);
		
		// Норма - это минимальное от 1 % от выручки и расходами на рекламу подлежащих нормировке с начала года.
		Норма = Мин(БухИт.КО(СчН06)*0.01, БухИт.ДО(СчН03_04));
		
		// норма за минусом уже отнесенных расходов на рекламу с начала года 
		СуммаСписания = Норма - БухИт.КО(СчН03_04);
		
		Если СуммаСписания > 0 Тогда
			Операция.НоваяПроводка(); Операция.РазделительУчета = ЮрЛицо;
			Операция.НомерЖурнала = "НУ";
			Операция.СодержаниеПроводки = "Расходы на рекламу";
			Операция.Сумма = СуммаСписания;
			Операция.Дебет.Счет   = СчН07_04_01;
			Операция.Дебет.ГруппыВидыРасходов = Перечисление.ГруппыВидыРасходов.РасходыНаРекламу;
			Операция.Кредит.Счет  = СчН03_04;
		КонецЕсли;
		
		// Формирование печатной формы
		Если ФормироватьПечатнуюФорму = 1 Тогда
			НаименованиеРегламентнойОперации = "Учет расходов на рекламу (Н03.04)";
			Таб.ВывестиСекцию("РегламентнаяОперацияНУ");
			ИнициализироватьРасшифровкуПоНормировованиюРасходовНаРекламу();
			
			Если БухИт.ДО(СчН03_04) <> 0 Тогда
				ТаблицаРасшифровкаРегламентнойОперации.НоваяСтрока();
				ТаблицаРасшифровкаРегламентнойОперации.ВсегоРасходов         = БухИт.ДО(СчН03_04);
				ТаблицаРасшифровкаРегламентнойОперации.Выручка               = БухИт.КО(СчН06);
				ТаблицаРасшифровкаРегламентнойОперации.ВПределахНорм         = Норма;
				ТаблицаРасшифровкаРегламентнойОперации.ПринятоКУчетуРанее    = БухИт.КО(СчН03_04);
				ТаблицаРасшифровкаРегламентнойОперации.ПринятоВТекущемМесяце = СуммаСписания;
				
				Расшифровка = СоздатьОбъект("СписокЗначений");
				ОсновнаяРасшифровкаОСВ.Выгрузить(Расшифровка);
				Расшифровка.Установить("Счет", СчН03_04);
				ТаблицаРасшифровкаРегламентнойОперации.РасшифровкаОСВПоСчетуН03_04 = Расшифровка;
				
				Расшифровка = СоздатьОбъект("СписокЗначений");
				ОсновнаяРасшифровкаОСВ.Выгрузить(Расшифровка);
				Расшифровка.Установить("Счет", СчН06);
				ТаблицаРасшифровкаРегламентнойОперации.РасшифровкаОСВПоСчетуН06 = Расшифровка;
			КонецЕсли;
			
			ВыводВОтчетИнформацииОВыполненииОперации("ЗакрытиеСчетаН03_04", // идентификатор отображаемой таблицы
			ТаблицаРасшифровкаРегламентнойОперации, // таблица с данными, для заполнения печатной формы
			"Учет расходов на рекламу", // дополнительные данные
			"Учет расходов на рекламу (Н03.04)", //строка, выводимая в отчет-список выполненных операций, в случае если операция выполнена
			"По счету Н03.04 ""Расходы на рекламу"" расходов нет"); //строка, выводимая в отчет-список выполненных операций, в случае если операция не выполнена
		КонецЕсли;
		
	КонецПроцедуры // НормированиеРасходовНаРекламуН03_04()
	
	//******************************************************************************
	// ЗакрытиеСчетаН04()
	//
	Процедура ЗакрытиеСчетаН04(НаименованиеОперации, КодСчета)
		
		Счет = СчетПоКоду(КодСчета);
		
		Состояние(НаименованиеОперации +" (" + КодСчета + ")");
		
		// Формирование печатной формы
		Если ФормироватьПечатнуюФорму = 1 Тогда
			НаименованиеРегламентнойОперации = НаименованиеОперации +" (" + КодСчета + ")";
			Таб.ВывестиСекцию("РегламентнаяОперацияНУ");
			ИнициализироватьРасшифровкуПоЗакрытиюСчетаН04();
		КонецЕсли;
		
		Если КодСчета = "Н04.10" Тогда
			ПроводкиПоРБП_2(Счет);
			НименованиеТаблицы = "ЗакрытиеСчетаН04_10";
			
		ИначеЕсли КодСчета = "Н04.11" Тогда
			ПроводкиПоРБП_4(Счет);
			НименованиеТаблицы = "ЗакрытиеСчетаН04_11";
			
		Иначе
			
			ПроводкиПоРБП_1(Счет);
			Если КодСчета = "Н04.09" Тогда
				НименованиеТаблицы = "ЗакрытиеСчетаН04";
				
			Иначе
				НименованиеТаблицы = "ЗакрытиеСчетаН04Дополнительно";
			КонецЕсли;
			
		КонецЕсли;
		
		// Формирование печатной формы
		Если ФормироватьПечатнуюФорму = 1 Тогда
			
			ВыводВОтчетИнформацииОВыполненииОперации(НименованиеТаблицы, // идентификатор отображаемой таблицы
			ТаблицаРасшифровкаРегламентнойОперации, // таблица с данными, для заполнения печатной формы
			НаименованиеОперации, // дополнительные данные
			НаименованиеОперации +" (" + КодСчета + ")", //строка, выводимая в отчет-список выполненных операций, в случае если операция выполнена
			"По счету " + КодСчета + " """ +  Счет.ПолнНаименование + """ расходов нет"); //строка, выводимая в отчет-список выполненных операций, в случае если операция не выполнена
		КонецЕсли;
		
	КонецПроцедуры // ЗакрытиеСчетаН04()
	
	//******************************************************************************
	// ЗакрытиеСчетаН04ДобровольноеСтрахование()
	//
	// Описание:
	//  Списание со счетов Н04.05 и Н04.06 расходов
	//  по договорам добровольного страхования сотрудников.
	//
	Процедура ЗакрытиеСчетаН04ДобровольноеСтрахование(НаименованиеОперации, КодСубсчетаН04, КодСубсчетаН03)
		
		СубсчетН04 = СчетПоКоду(КодСубсчетаН04);
		СубсчетН03 = СчетПоКоду(КодСубсчетаН03);
		
		Состояние(НаименованиеОперации +" (" + КодСубсчетаН04 + ")");
		
		// Формирование печатной формы
		Если ФормироватьПечатнуюФорму = 1 Тогда
			НаименованиеРегламентнойОперации = НаименованиеОперации +" (" + КодСубсчетаН04 + ")";
			Таб.ВывестиСекцию("РегламентнаяОперацияНУ");
			ИнициализироватьРасшифровкуПоЗакрытиюСчетаН04();
		КонецЕсли;
		
		ПроводкиПоРБП_2(СубсчетН04, СубсчетН03);
		
		// Формирование печатной формы
		Если ФормироватьПечатнуюФорму = 1 Тогда
			
			ВыводВОтчетИнформацииОВыполненииОперации("ЗакрытиеСчетаН04ДобровольноеСтрахование", // идентификатор отображаемой таблицы
			ТаблицаРасшифровкаРегламентнойОперации, // таблица с данными, для заполнения печатной формы
			НаименованиеОперации, // дополнительные данные
			НаименованиеОперации +" (" + КодСубсчетаН04 + ")", //строка, выводимая в отчет-список выполненных операций, в случае если операция выполнена
			"По счету " + КодСубсчетаН04 + " """ +  СубсчетН04.ПолнНаименование + """ расходов нет"); //строка, выводимая в отчет-список выполненных операций, в случае если операция не выполнена
		КонецЕсли;
		
	КонецПроцедуры // ЗакрытиеСчетаН04ДобровольноеСтрахование() 
	
	//******************************************************************************
	// ЗакрытиеСчетаН04_07()
	//
	// Описание:
	//  Выполняется закрытие счета Н04.07
	//
	Процедура ЗакрытиеСчетаН04_07()
		
		Состояние("Учет расходов будущих периодов");
		
		НаименованиеОперации = "Учет фактических платежей по страхованию на оплату медицинских расходов";
		
		// Формирование печатной формы
		Если ФормироватьПечатнуюФорму = 1 Тогда
			НаименованиеРегламентнойОперации = НаименованиеОперации +" (Н04.07)";
			Таб.ВывестиСекцию("РегламентнаяОперацияНУ");
			ИнициализироватьРасшифровкуПоЗакрытиюСчетаН04_07();
		КонецЕсли;
		
		ПроводкиПоРБП_3();
		
		// Формирование печатной формы
		Если ФормироватьПечатнуюФорму = 1 Тогда
			
			ВыводВОтчетИнформацииОВыполненииОперации("ЗакрытиеСчетаН04_07", // идентификатор отображаемой таблицы
			ТаблицаРасшифровкаРегламентнойОперации, // таблица с данными, для заполнения печатной формы
			НаименованиеОперации, // дополнительные данные
			НаименованиеОперации +" (Н04.07)", //строка, выводимая в отчет-список выполненных операций, в случае если операция выполнена
			"По счету Н04.07 ""Расходы будущих периодов по договорам добровольного личного страхования, заключаемым исключительно на случай наступления смерти или утраты трудоспособности"" расходов нет"); //строка, выводимая в отчет-список выполненных операций, в случае если операция не выполнена
		КонецЕсли;
		
	КонецПроцедуры // ЗакрытиеСчетаН04_07()
	
	//******************************************************************************
	// ВыполнениеРегамОперацийПриВеденииНУОтдельнымиНалоговомиДокументами()
	//
	Процедура ВыполнениеРегамОперацийПриВеденииНУОтдельнымиНалоговомиДокументами()
		
		СчН01_05   = СчетПоКоду("Н01.05");
		СчН01_06   = СчетПоКоду("Н01.06");
		СчН01_07   = СчетПоКоду("Н01.07");
		СчН02_01   = СчетПоКоду("Н02.01");
		СчН02_02   = СчетПоКоду("Н02.02.1");
		СчН02_03   = СчетПоКоду("Н02.03");
		СчН02_04_1 = СчетПоКоду("Н02.04.1");
		СчН02_04_2 = СчетПоКоду("Н02.04.2");
		СчН03_05   = СчетПоКоду("Н03.05");
		СчН03_06   = СчетПоКоду("Н03.06");
		СчН03_07   = СчетПоКоду("Н03.07");
		СчН07_02   = СчетПоКоду("Н07.02");
		
		// Подготовка к расчету стоимости материалов, товаров, продукции.
		ТаблицаОбъектов = глСоздатьТаблицуОбъектов();
		
		ТаблицаВидовНоменклатуры = СоздатьОбъект("ТаблицаЗначений");
		ТаблицаВидовНоменклатуры.НоваяКолонка("ВидНоменклатуры");
		ТаблицаВидовНоменклатуры.НоваяКолонка("Сумма", "Число", 15, 2);
		
		ТаблицаПрямыхРасходов= СоздатьОбъект("ТаблицаЗначений");    
		ТаблицаПрямыхРасходов.НоваяКолонка("ВидНоменклатуры");
		ТаблицаПрямыхРасходов.НоваяКолонка("ГруппаВидРасхода");
		ТаблицаПрямыхРасходов.НоваяКолонка("Сумма", "Число", 15, 2);
		
		// Таблица в которой накапливаются, проводки, которые необходимо сформировать.
		ТаблицаПроводок = СоздатьОбъект("ТаблицаЗначений");
		ТаблицаПроводок.НоваяКолонка("Счет", "Счет");
		ТаблицаПроводок.НоваяКолонка("Субконто1");
		ТаблицаПроводок.НоваяКолонка("Субконто2");
		ТаблицаПроводок.НоваяКолонка("Сумма", "Число", 15, 2);
		ТаблицаПроводок.НоваяКолонка("СодержаниеПроводки", "Строка", 50);
		
		Если Операция.КоличествоПроводок() > 0 Тогда
			Операция.ЗаписатьПроводки();
		КонецЕсли;
		
		// Сначала заполним Таблицу объектов объектами, которые необходимо рассчитать (начнем с продукции)
		СтатусРасчетаПродукции = 3; // не выбрана операция "Расчет стоимости продукции" (чтобы это обстоятельство было учтено при расчете стоимости материалов и товаров)
		Если РасчетСтоимостиПродукции = 1 Тогда
			СтатусРасчетаПродукции = 1; // при расчете стоимости материалов и товаров будет известно, что производится расчет стоимости продукции
			глЗаполнитьТаблицуОперациями(ТаблицаОбъектов, "Продукция", ДатаНач, ДатаКон, 1, 0, СтатусРасчетаПродукции);
		КонецЕсли;
		
		Если РасчетСтоимостиМатериалов = 1 Тогда
			глЗаполнитьТаблицуОперациями(ТаблицаОбъектов, "Материалы", ДатаНач, ДатаКон, 0, 0, СтатусРасчетаПродукции);
		КонецЕсли;
		
		Если РасчетСтоимостиТоваров = 1 Тогда
			глЗаполнитьТаблицуОперациями(ТаблицаОбъектов, "Товары",    ДатаНач, ДатаКон, 1, 0, СтатусРасчетаПродукции);
		КонецЕсли;
		
		// Предварительно подготовим данные необходимы для расчета стоимости продукции, т.к. они могут
		// потребоваться при расчете стоимости материалов и товаров.
		Ошибка = 0;
		ТаблицаРаспределенияСчетаН01_06 = ПолучитьПустоеЗначение();
		Если СчетН01_06 = 1 Тогда
			РассчитатьСтоимостьВыпущеннойПродукции(ТаблицаОбъектов, ТаблицаВидовНоменклатуры, Ошибка);
			Если ПустоеЗначение(Ошибка) = 0 Тогда
				ТекстСообщения = Ошибка + " => Невозможно рассчитать сумму прямых расходов по счету Н01.06";
				глНеПроводить(Контекст, ТекстСообщения);
				Возврат;
			КонецЕсли;
			
		ИначеЕсли РасчетСтоимостиПродукции = 1 Тогда
			
			// Если есть прямые расходы, подлежащие распределению (Н01.06), то расчет
			// стоимости продукции будет выполнен не корректно
			Если ПустоеЗначение(ФормированиеРасходовПоСчетуН01_06(ТаблицаОбъектов)) = 0 Тогда
				ТекстСообщения = "Для расчета стоимости продукции (работ, услуг) необходимо распределить прямые расходы (Н01.06)!";
				глНеПроводить(Контекст, ТекстСообщения);
				Возврат;
			КонецЕсли;
			ЗаполнитьТаблицуПрямымиРасходами(ТаблицаВидовНоменклатуры, ПолучитьПустоеЗначение()); // группируются все прямые расходы по видам номенклатуры
			ЗаполнитьТаблицуВыпускомПродукции(ТаблицаВидовНоменклатуры); // информация о выпущенной продукции группируется по видам номенклатуры
		КонецЕсли;
		
		Если РасчетСтоимостиМатериалов = 1 Тогда
			Состояние("Расчет стоимости материалов");
			
			ТаблицаОбъектов.ВыбратьСтроки();
			Пока ТаблицаОбъектов.ПолучитьСтроку() = 1 Цикл
				Объект = ТаблицаОбъектов.Объект;
				Если Объект.Вид() <> "Материалы" Тогда
					Продолжить;
				КонецЕсли;
				
				ИтогРасчета = глРассчитатьСтоимостьОбъекта(ТаблицаОбъектов, ТаблицаВидовНоменклатуры, Объект,,, ДатаНач, ДатаКон, 1);
				Если ТипЗначенияСтр(ИтогРасчета) = "Строка" Тогда
					ТекстСообщения = ИтогРасчета;
					глНеПроводить(Контекст, ТекстСообщения);
					Возврат;
				КонецЕсли;
				
				ТаблицаОперацийПоОбъекту = ТаблицаОбъектов.ТаблицаОперацийПоОбъекту;
				СуммаСписанияЗаПериод = 0;
				ЗаполнениеТаблицыПроводок(ТаблицаОперацийПоОбъекту, ТаблицаПроводок, СуммаСписанияЗаПериод);
				
				// сумма списания по налоговому учету
				Если СуммаСписанияЗаПериод <> 0 Тогда
					Операция.НоваяПроводка(); Операция.РазделительУчета = ЮрЛицо;
					Операция.НомерЖурнала = "НУ";
					Операция.СодержаниеПроводки = "Списание материала";
					Операция.Сумма = СуммаСписанияЗаПериод;
					Операция.Кредит.Счет = СчН02_01;
					Операция.Кредит.Субконто(1,Объект);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		Если РасчетСтоимостиТоваров = 1 Тогда
			
			Состояние("Расчет стоимости товаров");
			
			ТаблицаОбъектов.ВыбратьСтроки();
			Пока ТаблицаОбъектов.ПолучитьСтроку() = 1 Цикл
				Объект = ТаблицаОбъектов.Объект;
				Если Объект.Вид() <> "Номенклатура" Тогда
					Продолжить;
					
				ИначеЕсли Объект.ТипНоменклатуры <> Перечисление.ТипыНоменклатуры.Товар Тогда
					Продолжить;
				КонецЕсли;
				ИтогРасчета = глРассчитатьСтоимостьОбъекта(ТаблицаОбъектов, ТаблицаВидовНоменклатуры, Объект,,, ДатаНач, ДатаКон, 1);
				Если ТипЗначенияСтр(ИтогРасчета) = "Строка" Тогда
					ТекстСообщения = ИтогРасчета;
					глНеПроводить(Контекст, ТекстСообщения);
					Возврат;
				КонецЕсли;
				ТаблицаОперацийПоОбъекту = ТаблицаОбъектов.ТаблицаОперацийПоОбъекту;
				ТаблицаОперацийДляТоваровОтруженных = ТаблицаОбъектов.ТаблицаОперацийДляТоваровОтруженных;
				СуммаСписанияЗаПериод = 0;
				ТоварыОтгруженныеСуммаСписанияЗаПериод = 0;
				
				ЗаполнениеТаблицыПроводок(ТаблицаОперацийПоОбъекту, ТаблицаПроводок, СуммаСписанияЗаПериод);
				
				Если ПустоеЗначение(ТаблицаОперацийДляТоваровОтруженных) = 0 Тогда
					ЗаполнениеТаблицыПроводок(ТаблицаОперацийДляТоваровОтруженных, ТаблицаПроводок, ТоварыОтгруженныеСуммаСписанияЗаПериод, Объект);
				КонецЕсли;
				
				// сумма списания товаров отгруженных
				Если ТоварыОтгруженныеСуммаСписанияЗаПериод <> 0 Тогда
					Операция.НоваяПроводка(); Операция.РазделительУчета = ЮрЛицо;
					Операция.НомерЖурнала = "НУ";
					Операция.СодержаниеПроводки = "Реализация тов.отгр.";
					Операция.Сумма = ТоварыОтгруженныеСуммаСписанияЗаПериод;
					Операция.Кредит.Счет = СчН02_04_1;
					Операция.Кредит.Субконто(1,Объект);
				КонецЕсли;
				
				// сумма списания по налоговому учету
				Если СуммаСписанияЗаПериод <> 0 Тогда
					Операция.НоваяПроводка(); Операция.РазделительУчета = ЮрЛицо;
					Операция.НомерЖурнала = "НУ";
					Операция.СодержаниеПроводки = "Списание товара";
					Операция.Сумма = СуммаСписанияЗаПериод;
					Операция.Кредит.Счет = СчН02_02;
					Операция.Кредит.Субконто(1,Объект);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		Если СчетН01_06 = 1 Тогда
			
			Состояние("Распределение прямых расходов (Н01.06)");
			
			Если ПустоеЗначение(ТаблицаРаспределенияСчетаН01_06) = 0 Тогда
				ТаблицаРаспределенияСчетаН01_06.ВыбратьСтроки();
				Пока ТаблицаРаспределенияСчетаН01_06.ПолучитьСтроку() = 1 Цикл
					ГруппаВидРасхода = ТаблицаРаспределенияСчетаН01_06.ГруппаВидРасхода;
					ВидНоменклатуры = ТаблицаРаспределенияСчетаН01_06.ВидНоменклатуры;
					
					Операция.НоваяПроводка(); Операция.РазделительУчета = ЮрЛицо;
					Операция.НомерЖурнала = "НУ";
					Операция.СодержаниеПроводки = "Распределен. счета Н01.06";
					Операция.Дебет.Счет = СчН01_05;
					Операция.Дебет.ГруппыВидыРасходов = ГруппаВидРасхода;
					Операция.Дебет.ВидыНоменклатуры   = ВидНоменклатуры;
					
					Операция.Кредит.Счет = СчН01_06;
					Операция.Кредит.ГруппыВидыРасходов = ГруппаВидРасхода;
					Операция.Сумма = ТаблицаРаспределенияСчетаН01_06.Сумма;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
		
		Если РасчетСтоимостиПродукции = 1 Тогда
			
			Состояние("Расчет стоимости продукции (работ, услуг)");
			
			ТаблицаОбъектов.ВыбратьСтроки();   	
			Пока ТаблицаОбъектов.ПолучитьСтроку() = 1 Цикл
				Объект = ТаблицаОбъектов.Объект;
				Если Объект.Вид() <> "Номенклатура" Тогда
					Продолжить;
					
				ИначеЕсли Объект.ТипНоменклатуры <> Перечисление.ТипыНоменклатуры.Продукция Тогда
					Продолжить;
				КонецЕсли;
				
				ИтогРасчета = глРассчитатьСтоимостьОбъекта(ТаблицаОбъектов, ТаблицаВидовНоменклатуры, Объект,,, ДатаНач, ДатаКон, 1);
				Если ТипЗначенияСтр(ИтогРасчета) = "Строка" Тогда
					ТекстСообщения = ИтогРасчета;
					глНеПроводить(Контекст, ТекстСообщения);
					Возврат;
				КонецЕсли;
				ТаблицаОперацийПоОбъекту = ТаблицаОбъектов.ТаблицаОперацийПоОбъекту;
				ТаблицаОперацийДляТоваровОтруженных = ТаблицаОбъектов.ТаблицаОперацийДляТоваровОтруженных;
				СуммаСписанияЗаПериод = 0;
				ТоварыОтгруженныеСуммаСписанияЗаПериод = 0;
				
				ЗаполнениеТаблицыПроводок(ТаблицаОперацийПоОбъекту, ТаблицаПроводок, СуммаСписанияЗаПериод, Объект);
				
				Если ПустоеЗначение(ТаблицаОперацийДляТоваровОтруженных) = 0 Тогда
					ЗаполнениеТаблицыПроводок(ТаблицаОперацийДляТоваровОтруженных, ТаблицаПроводок, ТоварыОтгруженныеСуммаСписанияЗаПериод, Объект);
				КонецЕсли;
				
				// сумма списания товаров отгруженных
				Если ТоварыОтгруженныеСуммаСписанияЗаПериод <> 0 Тогда
					Операция.НоваяПроводка(); Операция.РазделительУчета = ЮрЛицо;
					Операция.НомерЖурнала = "НУ";
					Операция.СодержаниеПроводки = "Реализация продукции отгруженной";
					Операция.Сумма = ТоварыОтгруженныеСуммаСписанияЗаПериод;
					Операция.Кредит.Счет = СчН02_04_2;
					Операция.Кредит.Субконто(1,Объект);
				КонецЕсли;
				
				// сумма списания по налоговому учету
				Если СуммаСписанияЗаПериод <> 0 Тогда
					Операция.НоваяПроводка(); Операция.РазделительУчета = ЮрЛицо;
					Операция.НомерЖурнала = "НУ";
					Операция.СодержаниеПроводки = "Списание продукции";
					Операция.Сумма = СуммаСписанияЗаПериод;
					Операция.Кредит.Счет = СчН02_03;
					Операция.Кредит.Субконто(1,Объект);
				КонецЕсли;
			КонецЦикла;
			
			// РАСПРЕДЕЛЕНИЕ СЧЕТА Н01.05
			ТаблицаВидовНоменклатуры.ВыбратьСтроки();
			Пока ТаблицаВидовНоменклатуры.ПолучитьСтроку() = 1 Цикл
				Если ПустоеЗначение(ТаблицаВидовНоменклатуры.НеРассчитанныеПрямыеРасходы) = 0 Тогда
					ВидНоменклатуры = ТаблицаВидовНоменклатуры.ВидНоменклатуры;
					НеРассчитанныеПрямыеРасходы = ТаблицаВидовНоменклатуры.НеРассчитанныеПрямыеРасходы;
					Если (ВидНоменклатуры.ТипНоменклатуры = Перечисление.ТипыНоменклатуры.Услуга) или
					(ВидНоменклатуры.ТипНоменклатуры = Перечисление.ТипыНоменклатуры.Работа) Тогда
						СуммаМатериальныхРасходов = 0;
						НеРассчитанныеПрямыеРасходы.ВыбратьСтроки();
						Пока НеРассчитанныеПрямыеРасходы.ПолучитьСтроку() = 1 Цикл
							Объект = НеРассчитанныеПрямыеРасходы.Объект;
							ДатаОперации = НеРассчитанныеПрямыеРасходы.ДатаОперации;
							Документ = НеРассчитанныеПрямыеРасходы.Документ;
							СтрокаДокумента = НеРассчитанныеПрямыеРасходы.СтрокаДокумента;
							СуммаМатериальныхРасходов = СуммаМатериальныхРасходов + глРассчитатьСтоимостьОбъекта(ТаблицаОбъектов, ТаблицаВидовНоменклатуры, Объект, Документ, СтрокаДокумента, ДатаНач, ДатаОперации, 1);
							Если ТипЗначенияСтр(СуммаМатериальныхРасходов) = "Строка" Тогда
								ТекстСообщения = СуммаМатериальныхРасходов + " => Невозможно рассчитать сумму прямых расходов по виду номенклатуры: " + ВидНоменклатуры;
								глНеПроводить(Контекст, ТекстСообщения);
								Возврат;
							КонецЕсли;
						КонецЦикла;
						глПолучитьСтрокуПоЗначению(ТаблицаВидовНоменклатуры, ВидНоменклатуры, "ВидНоменклатуры");
						
					Иначе
						СуммаМатериальныхРасходов = НеРассчитанныеПрямыеРасходы.Итог("Сумма");	
					КонецЕсли;
					
					Если СуммаМатериальныхРасходов <> 0 Тогда
						ТаблицаПрямыхРасходов.НоваяСтрока();
						ТаблицаПрямыхРасходов.ВидНоменклатуры  = ВидНоменклатуры;
						ТаблицаПрямыхРасходов.ГруппаВидРасхода = Перечисление.ГруппыВидыРасходов.МатериальныеРасходы;
						ТаблицаПрямыхРасходов.Сумма = СуммаМатериальныхРасходов;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			ТаблицаПрямыхРасходов.Свернуть("ВидНоменклатуры, ГруппаВидРасхода", "Сумма");
			
			ПропуститьВидНоменклатуры = "";
			РасходыПоРаботамИУслугам = 0;
			ТаблицаПрямыхРасходов.ВыбратьСтроки();
			Пока ТаблицаПрямыхРасходов.ПолучитьСтроку() = 1 Цикл
				ВидНоменклатуры = ТаблицаПрямыхРасходов.ВидНоменклатуры;
				СуммаРаспределения = ТаблицаПрямыхРасходов.Сумма;
				Если СуммаРаспределения > 0 Тогда
					Если (ВидНоменклатуры.ТипНоменклатуры = Перечисление.ТипыНоменклатуры.УслугаЕНВД) Тогда
					ИначеЕсли (ВидНоменклатуры.ТипНоменклатуры = Перечисление.ТипыНоменклатуры.Услуга) или
					(ВидНоменклатуры.ТипНоменклатуры = Перечисление.ТипыНоменклатуры.Работа) Тогда
						РасходыПоРаботамИУслугам = РасходыПоРаботамИУслугам + СуммаРаспределения;
						
					Иначе
						Если ПропуститьВидНоменклатуры  = ВидНоменклатуры Тогда
							Продолжить;
						КонецЕсли;
						
						Если глПолучитьСтрокуПоЗначению(ТаблицаВидовНоменклатуры, ВидНоменклатуры, "ВидНоменклатуры") = 1 Тогда
							Если ПустоеЗначение(ТаблицаВидовНоменклатуры.ВыпускПродукции) = 1 Тогда
								ПропуститьВидНоменклатуры = ВидНоменклатуры;
								ТекстСообщения = "Прямые расходы по виду номенклатуры "+ ВидНоменклатуры + " не распределены, т.к не было выпуска продукции с данным видом
								|номенклатуры или у выпущенной продукции не указана плановая себестоимость!";
								глСообщениеПроведения(ТекстСообщения, ТекущийДокумент(), -1);
								Продолжить;
							КонецЕсли;
							
						Иначе
							ПропуститьВидНоменклатуры = ВидНоменклатуры;
							ТекстСообщения = "Прямые расходы по виду номенклатуры "+ ВидНоменклатуры + " не распределены, т.к не было выпуска продукции с данным видом
							|номенклатуры или у выпущенной продукции не указана плановая себестоимость!";
							глСообщениеПроведения(ТекстСообщения, ТекущийДокумент(), -1);
							Продолжить;                                 
						КонецЕсли;
					КонецЕсли;
					
					Операция.НоваяПроводка(); Операция.РазделительУчета = ЮрЛицо;
					Операция.НомерЖурнала = "НУ";
					Операция.СодержаниеПроводки = "Списание расходов";
					Операция.Сумма = СуммаРаспределения;
					Операция.Кредит.Счет = СчН01_05;
					Операция.Кредит.ГруппыВидыРасходов = ТаблицаПрямыхРасходов.ГруппаВидРасхода;
					Операция.Кредит.ВидыНоменклатуры = ВидНоменклатуры;
				КонецЕсли;
			КонецЦикла;
			
			// если были прямые расходы по работам(услугам)
			Если РасходыПоРаботамИУслугам > 0 Тогда
				Операция.НоваяПроводка(); Операция.РазделительУчета = ЮрЛицо;
				Операция.НомерЖурнала = "НУ";
				Операция.СодержаниеПроводки = "Распредел. расходов";
				Операция.Дебет.Счет = СчН07_02;
				Операция.Сумма = РасходыПоРаботамИУслугам;
			КонецЕсли;
		КонецЕсли;
		
		ТаблицаПроводок.Свернуть("Счет, Субконто1, Субконто2, СодержаниеПроводки", "Сумма");
		ТаблицаПроводок.ВыбратьСтроки();
		Пока ТаблицаПроводок.ПолучитьСтроку() = 1 Цикл
			Если (ПустоеЗначение(ТаблицаПроводок.Счет) = 1) или (ТаблицаПроводок.Сумма = 0)Тогда
				Продолжить;
			КонецЕсли;
			Операция.НоваяПроводка(); Операция.РазделительУчета = ЮрЛицо;
			Операция.НомерЖурнала = "НУ";
			Операция.СодержаниеПроводки = ТаблицаПроводок.СодержаниеПроводки;
			Операция.Сумма = ТаблицаПроводок.Сумма;
			Операция.Дебет.Счет = ТаблицаПроводок.Счет;
			Операция.Дебет.Субконто(1,ТаблицаПроводок.Субконто1);
			Операция.Дебет.Субконто(2,ТаблицаПроводок.Субконто2);
		КонецЦикла;
		
		Если СчетН01_07 = 1 Тогда
			
			Состояние("Учет транспортных расходов");
			
			// Если по счетам Н02.04 и Н02.02 были движения,
			// то проводки документа следует записать.
			Если Операция.КоличествоПроводок() > 0 Тогда
				Операция.ЗаписатьПроводки();
			КонецЕсли;
			
			РеализованоТоваров = 0;
			ОстатокТовара = 0;
			
			БухИтРасходы = СоздатьОбъект("БухгалтерскиеИтоги"); БухИтРасходы.ИспользоватьРазделительУчета(ЮрЛицо);
			БухИтРасходы.ПериодМ(ДатаКон);
			
			БухИт = СоздатьОбъект("БухгалтерскиеИтоги"); БухИт.ИспользоватьРазделительУчета(ЮрЛицо);
			БухИт.ИспользоватьСубконто(ВидыСубконто.Номенклатура);
			БухИт.Опции(1,);
			БухИт.ВыполнитьЗапрос(ДатаНач, ДатаКон, "Н02.02, Н02.04",,,,,);
			БухИт.ВыбратьСубконто();
			Пока БухИт.ПолучитьСубконто() = 1 Цикл                     
				Если ПустоеЗначение(БухИт.Субконто(ВидыСубконто.Номенклатура)) = 1 Тогда
					Продолжить;
				КонецЕсли;     
				
				Если БухИт.Субконто(ВидыСубконто.Номенклатура).ТипНоменклатуры <> Перечисление.ТипыНоменклатуры.Товар Тогда
					Продолжить;
				КонецЕсли;     
				ОстатокТовара = ОстатокТовара + БухИт.СКД() - БухИт.СКК();
				РеализованоТоваров = РеализованоТоваров + БухИт.КО();
				Если БухИт.ПолучитьСчет(, "Н02.04") = 1 Тогда
					РеализованоТоваров = РеализованоТоваров - БухИт.ДО();
				КонецЕсли;	                
			КонецЦикла;
			
			ТранспортныеРасходы = БухИтРасходы.СНД(СчН01_07) + БухИтРасходы.ДО(СчН01_07);
			
			Если ОстатокТовара + РеализованоТоваров <> 0 Тогда
				СреднийПроцент = ТранспортныеРасходы / (ОстатокТовара + РеализованоТоваров);
				
			Иначе
				СреднийПроцент = 0;
			КонецЕсли;                                                             		
			СуммаСписания = СреднийПроцент * РеализованоТоваров;
			Если СуммаСписания > 0 Тогда
				Операция.НоваяПроводка(); Операция.РазделительУчета = ЮрЛицо;
				Операция.НомерЖурнала = "НУ";
				Операция.СодержаниеПроводки = "Транспортные расходы";
				Операция.Сумма = СуммаСписания;
				Операция.Кредит.Счет = СчН01_07;
				Операция.Дебет.Счет  = СчетПоКоду("Н07.03");
			КонецЕсли;
		КонецЕсли;
		
		Если СчетН03_03 = 1 Тогда
			
			// Представительские расходы, включаемые в течение отчетного периода в состав
			// прочих расходов не должны превышать 4 процентов от расходов налогоплательщика
			// на оплату труда (подпункт 22 пункта 1 и пункт 2 статьи 264 НК).
			
			Состояние("Учет представительских расходов");
			
			Если (Операция.КоличествоПроводок() > 0) Тогда
				Операция.ЗаписатьПроводки();
			КонецЕсли;
			
			БухИт = СоздатьОбъект("БухгалтерскиеИтоги"); БухИт.ИспользоватьРазделительУчета(ЮрЛицо);
			БухИт.ПериодМНГ(ДатаКон);
			
			Запрос = СоздатьОбъект("Запрос");
			ДатаНачалаЗапроса = НачГода(ДатаДок);
			ТекстЗапроса = 
			"//{{ЗАПРОС(ОплатаТруда)
			|Период с ДатаНачалаЗапроса по ДатаКон;
			|Сумма = Документ.РасходыНаОплатуТруда.Сумма;
			|ВидРасхода = Документ.РасходыНаОплатуТруда.ВидРасхода;
			|Функция СуммаОбщая = Сумма(Сумма);
			|Условие(ВидРасхода <> Перечисление.ВидыРасходов.РасходыБудущихПериодов);
			|"//}}ЗАПРОС 
			;	
			
			РасходыНаОплатуТруда = 0;
			
			// расходы на оплату труда за год из проведенных документов "Расходы на оплату труда"
			Если Запрос.Выполнить(ТекстЗапроса) = 1 Тогда
				РасходыНаОплатуТруда = Запрос.СуммаОбщая;
			КонецЕсли;                      
			
			// добавим расходы по договорам страхования за год
			РасходыНаОплатуТруда = РасходыНаОплатуТруда + БухИт.КО(СчН03_05) + БухИт.КО(СчН03_06) + БухИт.КО(СчН03_07);
			
			// добавим расходы на оплату труда будущих периодов, принятых в текущем
			РасходыНаОплатуТруда = РасходыНаОплатуТруда + БухИт.КО("Н04.10");
			
			// сумма всего представительских расходов подлежащих нормировке
			ВсегоПредставительскихРасходов = БухИт.ДО("Н03.03");
			
			// сумма, которая уже отнесена в состав прочих расходов в отчетном периоде
			СуммаУжеНормированная = БухИт.КО("Н03.03");
			
			// сумма, которую можно отнести в состав прочих расходов в отчетном периоде
			СуммаПредставительскихРасходовПоНорме = Мин(РасходыНаОплатуТруда*0.04, ВсегоПредставительскихРасходов);
			
			// сумма, подлежащая отнесению в состав прочих расходов в этом месяце
			СуммаСписания = СуммаПредставительскихРасходовПоНорме - СуммаУжеНормированная;
			
			Если СуммаСписания > 0 Тогда
				Операция.НоваяПроводка(); Операция.РазделительУчета = ЮрЛицо;
				Операция.НомерЖурнала = "НУ";
				Операция.СодержаниеПроводки = "Представительские расходы";
				Операция.Сумма = СуммаСписания;
				Операция.Дебет.Счет   = СчетПоКоду("Н07.04.1");
				Операция.Дебет.ГруппыВидыРасходов = Перечисление.ГруппыВидыРасходов.ПредставительскиеРасходы;
				Операция.Кредит.Счет  = СчетПоКоду("Н03.03");
			КонецЕсли;
		КонецЕсли;
		
		Если СчетН03_04 = 1 Тогда
			
			// Сумма, которую можно отнести на расходы по рекламе для целей налогообложения, не 
			// должна превышать 1 процента от выручки.
			
			Состояние("Учет расходов на рекламу");
			
			Если Операция.КоличествоПроводок() > 0 Тогда
				Операция.ЗаписатьПроводки();
			КонецЕсли;
			
			БухИт = СоздатьОбъект("БухгалтерскиеИтоги"); БухИт.ИспользоватьРазделительУчета(ЮрЛицо);
			БухИт.ПериодМНГ(ДатаКон);
			
			// Норма - это минимальное от 1 % от выручки и расходами на рекламу подлежащих нормировке с начала года.
			Норма = Мин(БухИт.КО("Н06")*0.01, БухИт.ДО("Н03.04"));                                         
			
			// норма за минусом уже отнесенных расходов на рекламу с начала года 
			СуммаСписания = Норма - БухИт.КО("Н03.04");
			
			Если СуммаСписания > 0 Тогда
				Операция.НоваяПроводка(); Операция.РазделительУчета = ЮрЛицо;
				Операция.НомерЖурнала = "НУ";
				Операция.СодержаниеПроводки = "Расходы на рекламу";
				Операция.Сумма = СуммаСписания;
				Операция.Дебет.Счет   = СчетПоКоду("Н07.04.1");
				Операция.Дебет.ГруппыВидыРасходов = Перечисление.ГруппыВидыРасходов.РасходыНаРекламу;
				Операция.Кредит.Счет  = СчетПоКоду("Н03.04");
			КонецЕсли;
		КонецЕсли;
		
	КонецПроцедуры // ВыполнениеРегамОперацийПриВеденииНУОтдельнымиНалоговомиДокументами()
	
	//******************************************************************************
	// РаспределениеКосвенныхРасходовПоВидамДеятельности()
	//
	// Описание:
	//  Распределение расходов, учитываемых на счете
	//  Н07.04.2 на ЕНВД и не ЕНВД.
	//  Расходы, отнесенные по результатам распределения на деятельность
	//  не облагаемую ЕНВД списываются в дебет счета Н07.04.1.
	//  Расходы, которые отнесены на деятельность облагаемую ЕНВД
	//  списываются со счета Н07.04.2 без корреспонденции.
	//
	Процедура РаспределениеКосвенныхРасходовПоВидамДеятельности()
		
		Перем НомСтр;
		
		Если Константа.ОрганизацияЯвляетсяПлательщикомЕНВД = Да Тогда
		
			Состояние("Распределение косвенных расходов (Н07.04.2)");
			
			СчН07_04_1 = СчетПоКоду("Н07.04.1");
			СчН07_04_2 = СчетПоКоду("Н07.04.2");
		
			// Формирование печатной формы
			Если ФормироватьПечатнуюФорму = 1 Тогда
				НаименованиеРегламентнойОперации = "Распределение косвенных расходов (Н07.04.2)";
				Таб.ВывестиСекцию("РегламентнаяОперацияНУ");
				ИнициализироватьРасшифровкуРаспределенияКосвенныхРасходов();
			КонецЕсли;
			
			Если (Операция.КоличествоПроводок() > 0) Тогда
				Операция.ЗаписатьПроводки();
			КонецЕсли;
			
			// Получим коэффициент распределения, применяемый для целей налогового учета:
			// 1. Определим метод распределения: помесячно или нарастающим итогом с начала года:
			Если Константа.МетодРаспределенияКосвенныхРасходовПоВидамДеятельности.Получить(ДатаКон) = Перечисление.МетодыРаспределенияКосвенныхРасходовПоВидамДеятельности.НарастающимИтогомСНачалаГода Тогда
				ТипПериода = 1;
				
			Иначе
			    ТипПериода = 0;
			КонецЕсли;
			
			// 2. Определим порядок учета прочих доходов при расчете коэффициента расппределения:
			Если Константа.БазаРаспределенияКосвенныхРасходовПоВидамДеятельности.Получить(ДатаДок) = Перечисление.БазыРаспределенияКосвенныхРасходовПоВидамДеятельности.ДоходыОтРеализацииИВнереализационные Тогда
				ПрочиеДоходы = 1;
				
			Иначе
			    ПрочиеДоходы = 0;
			КонецЕсли;
			
			// 3. Получаем значение коэффициента:
			К_налог = КоэффициентРаспределенияПоВидамДеятельности(ТипПериода, ПрочиеДоходы, ФормироватьПечатнуюФорму);
						
			БухИт = СоздатьОбъект("БухгалтерскиеИтоги"); БухИт.ИспользоватьРазделительУчета(ЮрЛицо);
			БухИт.ИспользоватьСубконто(ВидыСубконто.ГруппыВидыРасходов);
			
			Если ТипПериода = 1 Тогда
				БухИт.ВключатьСубсчета(, -1);    
			КонецЕсли;
			
			БухИт.ВыполнитьЗапрос(НачГода(ДатаКон), ДатаКон, "Н07.04.2",,,2 ,,);
			БухИт.ВыбратьСубконто(ВидыСубконто.ГруппыВидыРасходов);
			Пока БухИт.ПолучитьСубконто(ВидыСубконто.ГруппыВидыРасходов) = 1 Цикл
				
				РасходыЗаПоследнийМесяц = БухИт.ДО() - БухИт.КО();
				
				Если ТипПериода = 0 Тогда // распределение расходов за месяц
					Если РасходыЗаПоследнийМесяц > 0 Тогда
						РасходыПринимаемыеНУ   = Окр(РасходыЗаПоследнийМесяц*К_налог, 2, 1);
						РасходыНеПринимаемыеНУ = РасходыЗаПоследнийМесяц - РасходыПринимаемыеНУ;
						
						Если РасходыПринимаемыеНУ > 0  Тогда
							Операция.НоваяПроводка(); Операция.РазделительУчета = ЮрЛицо;
							Операция.НомерЖурнала = "НУ";
							Операция.СодержаниеПроводки = "Распределение косвенных расходов";
							Операция.Дебет.Счет   = СчН07_04_1;
							Операция.Дебет.ГруппыВидыРасходов = БухИт.Субконто(ВидыСубконто.ГруппыВидыРасходов);
							Операция.Кредит.Счет  = СчН07_04_2;
							Операция.Кредит.ГруппыВидыРасходов = БухИт.Субконто(ВидыСубконто.ГруппыВидыРасходов);
							Операция.Сумма = РасходыПринимаемыеНУ;
						КонецЕсли;
						
						Если РасходыНеПринимаемыеНУ > 0  Тогда
							Операция.НоваяПроводка(); Операция.РазделительУчета = ЮрЛицо;
							Операция.НомерЖурнала = "НУ";
							Операция.СодержаниеПроводки = "Распределение косвенных расходов";
							Операция.Кредит.Счет  = СчН07_04_2;
							Операция.Кредит.ГруппыВидыРасходов = БухИт.Субконто(ВидыСубконто.ГруппыВидыРасходов);
							Операция.Сумма = РасходыНеПринимаемыеНУ;
						КонецЕсли;
						
						// Формирование печатной формы
						Если ФормироватьПечатнуюФорму = 1 Тогда
							ТаблицаРасшифровкаРегламентнойОперации.НоваяСтрока();
							ТаблицаРасшифровкаРегламентнойОперации.ГруппаРасходов = БухИт.Субконто(ВидыСубконто.ГруппыВидыРасходов);
							ТаблицаРасшифровкаРегламентнойОперации.ВсегоРасходов  = РасходыЗаПоследнийМесяц;
							ТаблицаРасшифровкаРегламентнойОперации.РасходыНеЕНВД  = РасходыПринимаемыеНУ;
							ТаблицаРасшифровкаРегламентнойОперации.РасходыЕНВД    = РасходыНеПринимаемыеНУ;
							
							Расшифровка = СоздатьОбъект("СписокЗначений");
							ОсновнаяРасшифровкаОСВ.Выгрузить(Расшифровка);
							Расшифровка.Установить("Счет", СчН07_04_2);
							Расшифровка.Установить("ВидСубконто1", ВидыСубконто.ГруппыВидыРасходов);
							Расшифровка.Установить("Субконто1", БухИт.Субконто(ВидыСубконто.ГруппыВидыРасходов));
							Расшифровка.Установить("ОтборСубконто1", 1);
							ТаблицаРасшифровкаРегламентнойОперации.РасшифровкаОСВПоСчету = Расшифровка;
						КонецЕсли;
					КонецЕсли;
					
				Иначе // расходы распределяются нарастающим итогом с начала года
					
					РасходыВсего = БухИт.ДО(); // всего расходов, произведенных с начала года
					
					Если РасходыВсего > 0 Тогда
						РасходыПринимаемыеНУ   = Окр(РасходыВсего*К_налог, 2, 1);
						РасходыНеПринимаемыеНУ = РасходыВсего - РасходыПринимаемыеНУ;
					
						// Если расходы распределяются нарастающим итогом с начала года, то в проводках по закрытию счета Н07.04.2
						// должна быть указана разность сумм, полученных в текущем месяце и в предыдущем месяце.
						// Для расчета этой суммы получим результат распределения предыдущего месяца.
						РасходыВсегоПредМес = БухИт.КО(); // списано с начала года с кредита Н07.04.2 всего
						РасходыПринимаемыеПредМес = 0;
						
						Если БухИт.ПолучитьКорСчет(, СчН07_04_1) = 1 Тогда
							РасходыПринимаемыеПредМес = БухИт.КорКО(); // списано с начала года с кредита Н07.04.2 в дебет Н07.04.1
							БухИт.ПолучитьКорСчет(, "");
						КонецЕсли;
												
						РасходыНеПринимаемыеПредМес = РасходыВсегоПредМес - РасходыПринимаемыеПредМес;
						
						// Получим сумму расходов, которую надо отразить в учете в текущем месяце
						РасходыПринимаемыеТекМес = РасходыПринимаемыеНУ - РасходыПринимаемыеПредМес;
						РасходыНеПринимаемыеТекМес = РасходыНеПринимаемыеНУ - РасходыНеПринимаемыеПредМес;
						
						Если РасходыПринимаемыеТекМес <> 0 Тогда
							Операция.НоваяПроводка(); Операция.РазделительУчета = ЮрЛицо;
							Операция.НомерЖурнала = "НУ";
							Операция.СодержаниеПроводки = "Распределение косвенных расходов";
							Операция.Дебет.Счет   = СчН07_04_1;
							Операция.Дебет.ГруппыВидыРасходов = БухИт.Субконто(ВидыСубконто.ГруппыВидыРасходов);
							Операция.Кредит.Счет  = СчН07_04_2;
							Операция.Кредит.ГруппыВидыРасходов = БухИт.Субконто(ВидыСубконто.ГруппыВидыРасходов);
							Операция.Сумма = РасходыПринимаемыеТекМес;
						КонецЕсли;
						
						Если РасходыНеПринимаемыеТекМес <> 0 Тогда
							Операция.НоваяПроводка(); Операция.РазделительУчета = ЮрЛицо;
							Операция.НомерЖурнала = "НУ";
							Операция.СодержаниеПроводки = "Распределение косвенных расходов";
							Операция.Кредит.Счет  = СчН07_04_2;
							Операция.Кредит.ГруппыВидыРасходов = БухИт.Субконто(ВидыСубконто.ГруппыВидыРасходов);
							Операция.Сумма = РасходыНеПринимаемыеТекМес;
						КонецЕсли;
						
						// Формирование печатной формы
						Если ФормироватьПечатнуюФорму = 1 Тогда
							ТаблицаРасшифровкаРегламентнойОперации.НоваяСтрока();
							ТаблицаРасшифровкаРегламентнойОперации.ГруппаРасходов = БухИт.Субконто(ВидыСубконто.ГруппыВидыРасходов);
							ТаблицаРасшифровкаРегламентнойОперации.ВсегоРасходов  = РасходыВсего;
							ТаблицаРасшифровкаРегламентнойОперации.РасходыНеЕНВД  = РасходыПринимаемыеНУ;
							ТаблицаРасшифровкаРегламентнойОперации.РасходыЕНВД    = РасходыНеПринимаемыеНУ;
							
							Расшифровка = СоздатьОбъект("СписокЗначений");
							ОсновнаяРасшифровкаОСВ.Выгрузить(Расшифровка);
							Расшифровка.Установить("Счет", СчН07_04_2);
							Расшифровка.Установить("ВидСубконто1", ВидыСубконто.ГруппыВидыРасходов);
							Расшифровка.Установить("Субконто1", БухИт.Субконто(ВидыСубконто.ГруппыВидыРасходов));
							Расшифровка.Установить("ОтборСубконто1", 1);
							Расшифровка.Установить("Дата1", НачГода(ДатаНач));    
							
							ТаблицаРасшифровкаРегламентнойОперации.РасшифровкаОСВПоСчету = Расшифровка;
						КонецЕсли;
						
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			
			// Формирование печатной формы
			Если ФормироватьПечатнуюФорму = 1 Тогда
				ДополнительныеДанные = СоздатьОбъект("СписокЗначений");
				ДополнительныеДанные.ДобавитьЗначение(ТаблицаРасшифровкаРегламентнойОперацииДополнительно, "Расшифровка");
				ДополнительныеДанные.ДобавитьЗначение(К_налог, "Коэффициент");
				
				Если Константа.МетодРаспределенияКосвенныхРасходовПоВидамДеятельности.Получить(ДатаКон) = Перечисление.МетодыРаспределенияКосвенныхРасходовПоВидамДеятельности.НарастающимИтогомСНачалаГода Тогда
					НачалоПериода = НачГода(ДатаНач);
					
				Иначе
					НачалоПериода = "";
				КонецЕсли;
				
				ВыводВОтчетИнформацииОВыполненииОперации("РаспределениеКосвенныхРасходов", // идентификатор отображаемой таблицы
				ТаблицаРасшифровкаРегламентнойОперации, // таблица с данными, для заполнения печатной формы
				ДополнительныеДанные, // дополнительные данные
				"Распределение косвенных расходов (Н07.04.2)", //строка, выводимая в отчет-список выполненных операций, в случае если операция выполнена
				"По счету Н07.04.2 """ + СчН07_04_2.ПолнНаименование + """ расходов нет",
				НачалоПериода); //строка, выводимая в отчет-список выполненных операций, в случае если операция не выполнена
			КонецЕсли;
		КонецЕсли;
		
	КонецПроцедуры // РаспределениеКосвенныхРасходовПоВидамДеятельности()
	
	//******************************************************************************
	// ЗакрытиеСчетовНалоговогоУчета()
	//
	// Описание:
	//  Закрытие счетов налогового учета, выполняемой в конце года.
	//
	Процедура ЗакрытиеСчетовНалоговогоУчета()
		
		Если ДатаМесяц(ДатаДок) = 12 Тогда
			
			// В конце года необходимо закрыть
			// некоторые счета налогового учета.
			Состояние("Закрытие счетов налогового учета");
			
			Если Операция.КоличествоПроводок() > 0 Тогда
				Операция.ЗаписатьПроводки();
			КонецЕсли;
			
			// Формирование печатной формы
			Если ФормироватьПечатнуюФорму = 1 Тогда
				НаименованиеРегламентнойОперации = "Закрытие счетов налогового учета";
				Таб.ВывестиСекцию("РегламентнаяОперацияНУ");
			КонецЕсли;
			
			БухИт = СоздатьОбъект("БухгалтерскиеИтоги"); БухИт.ИспользоватьРазделительУчета(ЮрЛицо);
			БухИт.ИспользоватьСубконто();
			БухИт.ИспользоватьСубконто();
			БухИт.ИспользоватьСубконто();
			БухИт.ВключатьСубсчета(-1, 0);
			БухИт.ВыполнитьЗапрос(, ДатаКон, "Н03.03,Н03.04,Н03.05,Н03.06,Н03.07,Н06,Н07,Н08,Н09,Н14",,,,,);
			БухИт.ВыбратьСчета();
			Пока БухИт.ПолучитьСчет() = 1 Цикл
				Счет = БухИт.Счет;
				ЗакрытиеСчета(Счет, БухИт);
			КонецЦикла;
			
			// Закрытие счета Н15
			ЗакрытьСчетН15();
		КонецЕсли;
		
	КонецПроцедуры // ЗакрытиеСчетовНалоговогоУчета()
	
	//******************************************************************************
	// ПроверитьОперации()
	//
	Процедура ПроверитьОперации(СписокВыполняемыхДействий, СписокДокументов)
		
		РазмерСпискаДокументов = СписокДокументов.РазмерСписка();
		РазмерСпикаДействий    = СписокВыполняемыхДействий.РазмерСписка();
		НаименованиеОперации   = "";
		
		Для НомерДействия = 1 По РазмерСпикаДействий Цикл
			Идентификатор = СписокВыполняемыхДействий.ПолучитьЗначение(НомерДействия, НаименованиеОперации);
			
			// Если в текущем документе действие не выполняется то проверять в других документах не надо
			Если ТекущийДокумент().ПолучитьАтрибут(Идентификатор) = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			Для НомерДокумента = 1 По РазмерСпискаДокументов Цикл
				Документ = СписокДокументов.ПолучитьЗначение(НомерДокумента);
				Если Документ.ПолучитьАтрибут(Идентификатор) = 1 Тогда
					ТекстСообщения = "Регламентная операция """ + НаименованиеОперации + """ уже выполнена документом " + Документ;
					глНеПроводить(Контекст, ТекстСообщения, Документ.ТекущийДокумент());
					Возврат;
				КонецЕсли;
			КонецЦикла;
			
		КонецЦикла;
		
	КонецПроцедуры // ПроверитьОперации()
	
	//******************************************************************************
	// ПрвоверкаНаВыполнениеРегламентныхОперацийРанее()
	//
	// Описание:
	// Проверяется не выполнялись ли в этом месяце другими документами
	// "Регламентные операции по налоговому учету" отмеченные регламентные операции.
	// Если выполнялись, то необходимо об этом сообщить и документ не проводить.
	//
	Процедура ПрвоверкаНаВыполнениеРегламентныхОперацийРанее()
		
		СписокДокументов = СоздатьОбъект("СписокЗначений");
		
		// Формирование списка документов
		Док = СоздатьОбъект("Документ.РегламентныеОперацииПоНалоговомуУчету");	
		Док.УстановитьФильтр(1, 0,,,);
		Док.ВыбратьДокументы(ДатаНач, ДатаКон);
		Пока Док.ПолучитьДокумент() = 1 Цикл
			Если Док.ТекущийДокумент() <> ТекущийДокумент() Тогда
				СписокДокументов.ДобавитьЗначение(Док.ТекущийДокумент());
			КонецЕсли;
		КонецЦикла;
		
		// Если документов нет, то проверять нечего
		Если СписокДокументов.РазмерСписка() = 0 Тогда
			Возврат;
		КонецЕсли;
		
		СписокВыполняемыхДействий = СоздатьОбъект("СписокЗначений");
		СписокВыполняемыхДействий.ДобавитьЗначение("СчетН04_02", "Учет отрицательного результата от реализации амортизируемого имущества (Н04.02)");
		СписокВыполняемыхДействий.ДобавитьЗначение("СчетН04_03", "Учет расходов на НИОКР (Н04.03)");
		СписокВыполняемыхДействий.ДобавитьЗначение("СчетН04_04", "Учет расходов на освоение природных ресурсов (Н04.04)");
		СписокВыполняемыхДействий.ДобавитьЗначение("СчетН04_05", "Учет фактических платежей по долгосрочному страхованию жизни работников (Н04.05)");
		СписокВыполняемыхДействий.ДобавитьЗначение("СчетН04_06", "Учет фактических платежей по страхованию на оплату медицинских расходов (Н04.06)");
		СписокВыполняемыхДействий.ДобавитьЗначение("СчетН04_07", "Учет фактических платежей по страхованию на случай наступления смерти (Н04.07)");
		СписокВыполняемыхДействий.ДобавитьЗначение("СчетН04_08", "Учет расходов по страхованию имущества (Н04.08)");
		СписокВыполняемыхДействий.ДобавитьЗначение("СчетН04_09", "Учет прочих расходов будущих периодов (Н04.09)");
		СписокВыполняемыхДействий.ДобавитьЗначение("СчетН04_10", "Учет расходов будущих периодов на оплату труда (Н04.10)");
		СписокВыполняемыхДействий.ДобавитьЗначение("СчетН04_11", "Учет налогов и сборов с расходов на оплату труда  будущих периодов (Н04.11)");
		СписокВыполняемыхДействий.ДобавитьЗначение("СчетН03_05", "Учет расходов по долгосрочному страхованию жизни работников (Н03.05)");
		СписокВыполняемыхДействий.ДобавитьЗначение("СчетН03_06", "Учет расходов по страхованию на оплату медицинских расходов (Н03.06)");
		СписокВыполняемыхДействий.ДобавитьЗначение("СчетН03_07", "Учет расходов по страхованию на случай наступления смерти (Н03.07)");
		СписокВыполняемыхДействий.ДобавитьЗначение("СчетН01_06", "Распределение прямых расходов (Н01.06)");
		
		Если глНовыеПравилаВеденияНУ(ДатаДок) = 1 Тогда
			СписокВыполняемыхДействий.ДобавитьЗначение("РасчетСтоимостиТоваров", "Корректировка средневзвешенной стоимости номенклатуры");
		Иначе
			СписокВыполняемыхДействий.ДобавитьЗначение("РасчетСтоимостиМатериалов", "Расчет стоимости материалов");
			СписокВыполняемыхДействий.ДобавитьЗначение("РасчетСтоимостиТоваров", "Расчет стоимости товаров");
		КонецЕсли;
		
		СписокВыполняемыхДействий.ДобавитьЗначение("РасчетСтоимостиПродукции", "Расчет стоимости продукции (работ, услуг)");
		СписокВыполняемыхДействий.ДобавитьЗначение("СчетН01_07", "Учет транспортных расходов (Н01.07)");
		СписокВыполняемыхДействий.ДобавитьЗначение("СчетН03_03", "Учет представительских расходов (Н03.03)");
		СписокВыполняемыхДействий.ДобавитьЗначение("СчетН03_04", "Учет расходов на рекламу (Н03.04)");
		Если (глНовыеПравилаВеденияНУ(ДатаДок) = 1) и (Константа.ОрганизацияЯвляетсяПлательщикомЕНВД = Да) Тогда
			СписокВыполняемыхДействий.ДобавитьЗначение("РаспределениеКосвенныхРасходов", "Распределение косвенных расходов (Н07.04.2)");
		КонецЕсли;
		
		Если ДатаМесяц(ДатаДок) = 12 Тогда
			СписокВыполняемыхДействий.ДобавитьЗначение("ЗакрытиеСчетовНалоговогоУчета", "Закрытие счетов налогового учета");
		КонецЕсли;		
		
		ПроверитьОперации(СписокВыполняемыхДействий, СписокДокументов);
		
	КонецПроцедуры // ПрвоверкаНаВыполнениеРегламентныхОперацийРанее()
	
	////////////////////////////////////////////////////////////////////////////////
	// ПРЕДОПРЕДЕЛЕННЫЕ ПРОЦЕДУРЫ
	//
	
	//****************************************************************************** 
	// Предопределенная процедура
	//
	Процедура ОбработкаПроведения()
		
		ДатаНач = НачМесяца(ДатаДок);
		ДатаКон = КонМесяца(ДатаДок);
		
		// Необходимо проверить не выполнялись в этом месяце другими документами
		// "Регламентные операции по налоговому учету" отмеченные регламентные операции.
		// Если выполнялись, то необходимо об этом сообщить и документ не проводить.
		ПрвоверкаНаВыполнениеРегламентныхОперацийРанее();
		Если СтатусВозврата() = 0 Тогда
			Возврат;
		КонецЕсли;
		
		// Формирование печатной формы
		Если ФормироватьПечатнуюФорму = 1 Тогда
			Таб = СоздатьОбъект("Таблица");
			Таб.ИсходнаяТаблица("ЗакрытиеМесяца");
			НазваниеОтчета = "Отчет по регламентным операциям в налоговом учете № " + СокрЛП(НомерДок) + РазделительСтрок + "за " + СокрЛП(Нрег(Формат(ДатаДок, "Д ММММГГГГ")));
			Таб.ВывестиСекцию("СписокРегламентныхОперацийНУ");
			ФормированиеОсновныхРасшифровок();
		КонецЕсли;
		
		// Учет отрицательного результата от реализации амортизируемого имущества (Н04.02)
		Если СчетН04_02 = 1 Тогда
			ЗакрытиеСчетаН04("Учет отрицательного результата от реализации амортизируемого имущества", "Н04.02");
			Если СтатусВозврата() = 0 Тогда
				Возврат;
			КонецЕсли;
		КонецЕсли;
		
		// Учет расходов на НИОКР (Н04.03)
		Если СчетН04_03 = 1 Тогда
			ЗакрытиеСчетаН04("Учет расходов на НИОКР", "Н04.03");
			Если СтатусВозврата() = 0 Тогда
				Возврат;
			КонецЕсли;
		КонецЕсли;
		
		// Учет расходов на освоение природных ресурсов (Н04.04)
		Если СчетН04_04 = 1 Тогда
			ЗакрытиеСчетаН04("Учет расходов на освоение природных ресурсов", "Н04.04");
			Если СтатусВозврата() = 0 Тогда
				Возврат;
			КонецЕсли;
		КонецЕсли;
		
		// Учет фактических платежей по долгосрочному страхованию жизни работников (Н04.05)
		Если СчетН04_05 = 1 Тогда
			ЗакрытиеСчетаН04ДобровольноеСтрахование("Учет фактических платежей по долгосрочному страхованию жизни работников", "Н04.05", "Н03.05");
			Если СтатусВозврата() = 0 Тогда
				Возврат;
			КонецЕсли;
		КонецЕсли;
		
		// Учет фактических платежей по страхованию на оплату медицинских расходов (Н04.06)
		Если СчетН04_06 = 1 Тогда
			ЗакрытиеСчетаН04ДобровольноеСтрахование("Учет фактических платежей по страхованию на оплату медицинских расходов", "Н04.06", "Н03.06");
			Если СтатусВозврата() = 0 Тогда
				Возврат;
			КонецЕсли;
		КонецЕсли;
		
		// Учет фактических платежей по страхованию на случай наступления смерти (Н04.07)
		Если СчетН04_07 = 1 Тогда
			ЗакрытиеСчетаН04_07();
			Если СтатусВозврата() = 0 Тогда
				Возврат;
			КонецЕсли;
		КонецЕсли;
		
		// Учет расходов по страхованию имущества (Н04.08)
		Если СчетН04_08 = 1 Тогда
			ЗакрытиеСчетаН04("Учет расходов по страхованию имущества", "Н04.08");
			Если СтатусВозврата() = 0 Тогда
				Возврат;
			КонецЕсли;
		КонецЕсли;
		
		// Учет прочих расходов будущих периодов (Н04.09)
		Если СчетН04_09 = 1 Тогда
			ЗакрытиеСчетаН04("Учет прочих расходов будущих периодов", "Н04.09");
			Если СтатусВозврата() = 0 Тогда
				Возврат;
			КонецЕсли;
		КонецЕсли;
		
		// Учет расходов будущих периодов на оплату труда (Н04.10)
		Если СчетН04_10 = 1 Тогда
			ЗакрытиеСчетаН04("Учет расходов будущих периодов на оплату труда", "Н04.10");
			Если СтатусВозврата() = 0 Тогда
				Возврат;
			КонецЕсли;
		КонецЕсли;
		
		// Учет налогов и сборов с расходов на оплату труда  будущих периодов (Н04.11)
		Если СчетН04_11 = 1 Тогда
			ЗакрытиеСчетаН04("Учет налогов и сборов с расходов на оплату труда  будущих периодов", "Н04.11");
			Если СтатусВозврата() = 0 Тогда
				Возврат;
			КонецЕсли;
		КонецЕсли;
		
		// Учет расходов по долгосрочному страхованию жизни работников (Н03.05)
		Если СчетН03_05 = 1 Тогда
			ПроводкиПоСтрахованию("Н03.05", 0.12, "Учет расходов по долгосрочному страхованию жизни работников");
			Если СтатусВозврата() = 0 Тогда
				Возврат;
			КонецЕсли;
		КонецЕсли;
		
		// Учет расходов по страхованию на оплату медицинских расходов (Н03.06)
		Если СчетН03_06 = 1 Тогда
			Если ДатаДок >= '01.01.2009' Тогда
				ПроводкиПоСтрахованию("Н03.06", 0.06, "Учет расходов по страхованию на оплату медицинских расходов");
			Иначе
				ПроводкиПоСтрахованию("Н03.06", 0.03, "Учет расходов по страхованию на оплату медицинских расходов");
			КонецЕсли;
			Если СтатусВозврата() = 0 Тогда
				Возврат;
			КонецЕсли;
		КонецЕсли;
		
		// Учет расходов по страхованию на случай наступления смерти (Н03.07)
		Если СчетН03_07 = 1 Тогда
			ПроводкиПоСтрахованию("Н03.07", 0, "Учет расходов по страхованию на случай наступления смерти");
			Если СтатусВозврата() = 0 Тогда
				Возврат;
			КонецЕсли;
		КонецЕсли;
		
		
		// Формирование с учетом новых правил налогового учета,
		// действующих начиная с редакции 4.4
		Если глНовыеПравилаВеденияНУ(ДатаДок) = 1 Тогда
			
			// Корректировка средневзвешенной стоимости номенклатуры
			Если (РасчетСтоимостиТоваров = 1) Тогда
				КорректировкаСуммСписанияНоменклатурыНУ();
				Если СтатусВозврата() = 0 Тогда
					Возврат;
				КонецЕсли;
			КонецЕсли;
			
			// Распределение прямых расходов (Н01.06)
			Если СчетН01_06 = 1 Тогда
				РаспределениеПрямыхРасходовН01_06();
				Если СтатусВозврата() = 0 Тогда
					Возврат;
				КонецЕсли;
			КонецЕсли;
			
			// Расчет стоимости продукции (работ, услуг)
			Если РасчетСтоимостиПродукции = 1 Тогда
				РасчетСебестоимостиПродукцииИПолуфабрикатовНУ();
				Если СтатусВозврата() = 0 Тогда
					Возврат;
				КонецЕсли;
			КонецЕсли;
			
			// Учет транспортных расходов (Н01.07)
			Если СчетН01_07 = 1 Тогда
				РаспределениеТранспортныхРасходовН01_07();
				Если СтатусВозврата() = 0 Тогда
					Возврат;
				КонецЕсли;
			КонецЕсли;
			
			// Учет представительских расходов (Н03.03)
			Если СчетН03_03 = 1 Тогда
				НормированиеПредставительскихРасходовН03_03();
				Если СтатусВозврата() = 0 Тогда
					Возврат;
				КонецЕсли;
			КонецЕсли;
			
			// Учет расходов на рекламу (Н03.04)
			Если СчетН03_04 = 1 Тогда
				НормированиеРасходовНаРекламуН03_04();
				Если СтатусВозврата() = 0 Тогда
					Возврат;
				КонецЕсли;
			КонецЕсли;
			
			// Распределение косвенных расходов (Н07.04.2)
			Если РаспределениеКосвенныхРасходов = 1 Тогда
				РаспределениеКосвенныхРасходовПоВидамДеятельности();
				Если СтатусВозврата() = 0 Тогда
					Возврат;
				КонецЕсли;
			КонецЕсли;
			
		Иначе // Формирование с учетом правил налогового учета, действовавших до редакции 4.4
			ВыполнениеРегамОперацийПриВеденииНУОтдельнымиНалоговомиДокументами();
		КонецЕсли;
		
		// Закрытие счетов налогового учета
		Если ЗакрытиеСчетовНалоговогоУчета = 1 Тогда
			ЗакрытиеСчетовНалоговогоУчета();
			Если СтатусВозврата() = 0 Тогда
				Возврат;
			КонецЕсли;
		КонецЕсли;
		
		Операция.Записать();
		
		// Формирование печатной формы
		Если ФормироватьПечатнуюФорму = 1 Тогда
			Таб.Опции(0, 0, 0, 0, "Печать регламентные операции по налоговому учету", "Окно регламентные операции по налоговому учету");
			Таб.ОбластьПечати(,,, 20);
			Таб.ТолькоПросмотр(1);
			Таб.Показать("Отчет по регламентным операциям в налоговом учете № " + СокрЛП(НомерДок) + " за " + СокрЛП(Нрег(Формат(ДатаДок, "Д ММММГГГГ"))), "");
		КонецЕсли;
		
		ТекстСообщения = "Документ проведен.";
		глСообщениеПроведения(ТекстСообщения, ТекущийДокумент(), 0);
		глПриПроведении(Контекст);
		
	КонецПроцедуры
	
	СубконтоВидыПродукцииИУслуг = ВидыСубконто.ВидыНоменклатуры;