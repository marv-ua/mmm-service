
Перем ЗапросПоОстаткамНезавершенногоПроизводства;
Перем ДатаНач, ДатаКон;
Перем СтатьяРБП;
Перем НалогооблагаемыеВременныеРазницы, ВычитаемыеВременныеРазницы;
Перем СебестоимостьПродукции, ВыполнятьДвиженияПоСчетуНПР, НПР; 
Перем СубконтоВидовПродукцииИУслуг;
Перем ТаблицаРасшифровкаРегламентнойОперации, ТаблицаРасшифровкаРегламентнойОперацииДополнительно;
Перем Таб;
Перем БухИтЗаМесяц; 
Перем БухИтЗаГод;
Перем ОсновнаяРасшифровкаОСВ, ОсновнаяРасшифровкаАСПС, ОсновнаяРасшифровкаОПП;
Перем СтавкаНалогаНаПрибыль;
Перем СписокСчетов; 

//************
Функция РаспределитьВзносыПоНачислениям(Сумма, Таб, СтавкаТарифа, СтавкаТарифаИнвалид, Инвалид, ИмяШкалыВзносов) Далее
Процедура СформироватьПроводкуСВЗ(Налог, Сотрудник, Сумма, СуммаЕНВД) Далее

//******************************************************************************
// ФормированиеОсновныхРасшифровок()
//
// Параметры:
//  Нет.
//
// Вызывается из формул элементов диалога:
//  Нет.
//
// Описание:
//  Здесь описывается процедура.
//
Процедура ФормированиеОсновныхРасшифровок()
	
	ОсновнаяРасшифровкаОСВ = СоздатьОбъект("СписокЗначений");
	ОсновнаяРасшифровкаОСВ.Установить("Отчет", "ОборотноСальдоваяВедомостьПоСчету");
	ОсновнаяРасшифровкаОСВ.Установить("Обновить", 0);
	ОсновнаяРасшифровкаОСВ.Установить("ДанныеПоСубсчетам", 0);
	ОсновнаяРасшифровкаОСВ.Установить("Дата1", НачМесяца(ДатаДок));
	ОсновнаяРасшифровкаОСВ.Установить("Дата2", КонМесяца(ДатаДок));
	ОсновнаяРасшифровкаОСВ.Установить("ОтборСубконто1", 3);
	ОсновнаяРасшифровкаОСВ.Установить("ОтборСубконто2", 3);
	ОсновнаяРасшифровкаОСВ.Установить("ОтборСубконто3", 3);
	
	ОсновнаяРасшифровкаАСПС= СоздатьОбъект("СписокЗначений");
	ОсновнаяРасшифровкаАСПС.Установить("Отчет", "АнализСчетаПоСубконто");
	ОсновнаяРасшифровкаАСПС.Установить("Обновить", 0);
	ОсновнаяРасшифровкаАСПС.Установить("Дата1", НачМесяца(ДатаДок));
	ОсновнаяРасшифровкаАСПС.Установить("Дата2", КонМесяца(ДатаДок));
	ОсновнаяРасшифровкаАСПС.Установить("Валюта", "");
	ОсновнаяРасшифровкаАСПС.Установить("ПоВалюте", 0);
	ОсновнаяРасшифровкаАСПС.Установить("ОтборСубконто1", 3);
	ОсновнаяРасшифровкаАСПС.Установить("ОтборСубконто2", 3);
	ОсновнаяРасшифровкаАСПС.Установить("ОтборСубконто3", 3);
	
	ОсновнаяРасшифровкаОПП = СоздатьОбъект("СписокЗначений");
	ОсновнаяРасшифровкаОПП.Установить("Отчет", "ОтчетПоПроводкам");
	ОсновнаяРасшифровкаОПП.Установить("Дата1", НачМесяца(ДатаДок));
	ОсновнаяРасшифровкаОПП.Установить("Дата2", КонМесяца(ДатаДок));
	
КонецПроцедуры // ФормированиеОсновныхРасшифровок()

//******************************************************************************
// ИнициализироватьРасшифровкуПоКорректировкеМПЗ()
//
// Параметры:
//  Нет.
//
// Вызывается из формул элементов диалога:
//  Нет.
//
// Описание:
//  Здесь описывается процедура.
//
Процедура ИнициализироватьРасшифровкуПоКорректировкеМПЗ()
	                                                   
	ТаблицаРасшифровкаРегламентнойОперации = СоздатьОбъект("ТаблицаЗначений");
	ТаблицаРасшифровкаРегламентнойОперации.НоваяКолонка("МПЗ", "Справочник.Материал");
	ТаблицаРасшифровкаРегламентнойОперации.НоваяКолонка("СчетУчета", "Счет");
	ТаблицаРасшифровкаРегламентнойОперации.НоваяКолонка("СуммаНаНачало", "Число");
	ТаблицаРасшифровкаРегламентнойОперации.НоваяКолонка("КоличествоНаНачало", "Число");
	ТаблицаРасшифровкаРегламентнойОперации.НоваяКолонка("ПриходСумма", "Число");
	ТаблицаРасшифровкаРегламентнойОперации.НоваяКолонка("ПриходКоличество", "Число");
	ТаблицаРасшифровкаРегламентнойОперации.НоваяКолонка("ВозвратПоставщикуСумма", "Число");
	ТаблицаРасшифровкаРегламентнойОперации.НоваяКолонка("ВозвратПоставщикуКоличество", "Число");
	ТаблицаРасшифровкаРегламентнойОперации.НоваяКолонка("ВозвратОтПокупателяСумма", "Число");
	ТаблицаРасшифровкаРегламентнойОперации.НоваяКолонка("ВозвратОтПокупателяКоличество", "Число");
	ТаблицаРасшифровкаРегламентнойОперации.НоваяКолонка("СредневзвешеннаяСтоимость", "Число");
	ТаблицаРасшифровкаРегламентнойОперации.НоваяКолонка("ФактическиСписаноСумма", "Число");
	ТаблицаРасшифровкаРегламентнойОперации.НоваяКолонка("ФактическиСписаноКоличество", "Число");
	ТаблицаРасшифровкаРегламентнойОперации.НоваяКолонка("РасчетнаяСуммаСписания", "Число");
	ТаблицаРасшифровкаРегламентнойОперации.НоваяКолонка("СуммаКорректировки", "Число");
	
	// колонки для расшифровки
	ТаблицаРасшифровкаРегламентнойОперации.НоваяКолонка("РасшифровкаОборотноСальдоваяВедомостьПоСчету", "СписокЗначений");
	ТаблицаРасшифровкаРегламентнойОперации.НоваяКолонка("РасшифровкаАнализСчетаПоСубконто", "СписокЗначений");
	ТаблицаРасшифровкаРегламентнойОперации.НоваяКолонка("РасшифровкаСуммаКорректировки", "СписокЗначений");
	
КонецПроцедуры // ИнициализироватьРасшифровкуПоКорректировкеМПЗ()

//******************************************************************************
// РасшифровкаКорректировкиСписанияПоМПЗ(МПЗ)
//
// Параметры:
//  Нет.
//
// Возвращаемое значение:
//  Здесь описывается возвращаемое значение.
//
// Вызывается из формул элементов диалога:
//  Нет.
//
// Описание:
//  Здесь описывается функция.
//
Функция РасшифровкаКорректировкиСписанияПоМПЗ(МПЗ)
	
	ТаблицаКорректировки = СоздатьОбъект("ТаблицаЗначений"	);
	
	ТаблицаКорректировки.НоваяКолонка("Счет", "Счет");
	ТаблицаКорректировки.НоваяКолонка("Субконто1");
	ТаблицаКорректировки.НоваяКолонка("Субконто2");
	ТаблицаКорректировки.НоваяКолонка("Субконто3");
	ТаблицаКорректировки.НоваяКолонка("ФактическиСписаноСумма",  "Число");
	ТаблицаКорректировки.НоваяКолонка("ФактическиСписаноКоличество",  "Число");
	ТаблицаКорректировки.НоваяКолонка("СредневзвешеннаяСтоимость",  "Число");
	ТаблицаКорректировки.НоваяКолонка("СуммаСписания",  "Число");
	ТаблицаКорректировки.НоваяКолонка("СуммаКорректировки",  "Число");
	
	// расшифровка
	ТаблицаКорректировки.НоваяКолонка("РасшифровкаОтчетПоПроводкам", "СписокЗначений");
	
	Расшифровка = СоздатьОбъект("СписокЗначений");
	Расшифровка.ДобавитьЗначение("ТаблицаРасшифровкаКорректировкиПоМатериалу", "Наименование таблицы");
	Расшифровка.ДобавитьЗначение(ТаблицаКорректировки, "Таблица данных");
	Расшифровка.ДобавитьЗначение(ДатаДок, "Дата операции");
	Расшифровка.ДобавитьЗначение(МПЗ, "Дополнительные данные");
	
	Возврат Расшифровка;
	
КонецФункции // РасшифровкаКорректировкиСписанияПоМПЗ()

//******************************************************************************
// ИнициализироватьРасшифровкуПоКорректировкеГПиПФ()
//
// Параметры:
//  Нет.
//
// Вызывается из формул элементов диалога:
//  Нет.
//
// Описание:
//  Здесь описывается процедура.
//
Процедура ИнициализироватьРасшифровкуПоКорректировкеГПиПФ()
	
	ТаблицаРасшифровкаРегламентнойОперацииДополнительно = СоздатьОбъект("ТаблицаЗначений");
	ТаблицаРасшифровкаРегламентнойОперацииДополнительно.НоваяКолонка("МПЗ", "Справочник.Номенклатура");
	ТаблицаРасшифровкаРегламентнойОперацииДополнительно.НоваяКолонка("СчетУчета", "Счет");
	ТаблицаРасшифровкаРегламентнойОперацииДополнительно.НоваяКолонка("СуммаНаНачало", "Число");
	ТаблицаРасшифровкаРегламентнойОперацииДополнительно.НоваяКолонка("КоличествоНаНачало", "Число");
	ТаблицаРасшифровкаРегламентнойОперацииДополнительно.НоваяКолонка("ВыпускСумма", "Число");
	ТаблицаРасшифровкаРегламентнойОперацииДополнительно.НоваяКолонка("ВыпускКоличество", "Число");
	ТаблицаРасшифровкаРегламентнойОперацииДополнительно.НоваяКолонка("ПрочееПоступлениеСумма", "Число");
	ТаблицаРасшифровкаРегламентнойОперацииДополнительно.НоваяКолонка("ПрочееПоступлениеКоличество", "Число");
	ТаблицаРасшифровкаРегламентнойОперацииДополнительно.НоваяКолонка("ВозвратОтПокупателяСумма", "Число");
	ТаблицаРасшифровкаРегламентнойОперацииДополнительно.НоваяКолонка("ВозвратОтПокупателяКоличество", "Число");
	ТаблицаРасшифровкаРегламентнойОперацииДополнительно.НоваяКолонка("СредневзвешеннаяСтоимость", "Число");
	ТаблицаРасшифровкаРегламентнойОперацииДополнительно.НоваяКолонка("ФактическиСписаноСумма", "Число");
	ТаблицаРасшифровкаРегламентнойОперацииДополнительно.НоваяКолонка("ФактическиСписаноКоличество", "Число");
	ТаблицаРасшифровкаРегламентнойОперацииДополнительно.НоваяКолонка("РасчетнаяСуммаСписания", "Число");
	ТаблицаРасшифровкаРегламентнойОперацииДополнительно.НоваяКолонка("СуммаКорректировки", "Число");
	
	// колонки для расшифровки
	ТаблицаРасшифровкаРегламентнойОперацииДополнительно.НоваяКолонка("РасшифровкаОборотноСальдоваяВедомостьПоСчету", "СписокЗначений");
	ТаблицаРасшифровкаРегламентнойОперацииДополнительно.НоваяКолонка("РасшифровкаАнализСчетаПоСубконто", "СписокЗначений");
	ТаблицаРасшифровкаРегламентнойОперацииДополнительно.НоваяКолонка("РасшифровкаСуммаКорректировки", "СписокЗначений");
	
КонецПроцедуры // ИнициализироватьРасшифровкуПоКорректировкеГПиПФ()

//******************************************************************************
// ИнициализироватьРасшифровкуПоКорректировкеСтоимостиСпецМатериалов()
//
// Параметры:
//  Нет.
//
// Вызывается из формул элементов диалога:
//  Нет.
//
// Описание:
//  Здесь описывается процедура.
//
Процедура ИнициализироватьРасшифровкуПоКорректировкеСтоимостиСпецМатериалов()
	
	ТаблицаРасшифровкаРегламентнойОперации = СоздатьОбъект("ТаблицаЗначений");
	ТаблицаРасшифровкаРегламентнойОперации.НоваяКолонка("МПЗ", "Справочник.Материал");
	ТаблицаРасшифровкаРегламентнойОперации.НоваяКолонка("НазначениеИспользования", "Справочник.НазначенияИспользования");
	ТаблицаРасшифровкаРегламентнойОперации.НоваяКолонка("Счет", "Счет");
	ТаблицаРасшифровкаРегламентнойОперации.НоваяКолонка("Субконто1");
	ТаблицаРасшифровкаРегламентнойОперации.НоваяКолонка("Субконто2");
	ТаблицаРасшифровкаРегламентнойОперации.НоваяКолонка("Субконто3");
	ТаблицаРасшифровкаРегламентнойОперации.НоваяКолонка("Стоимость", "Число");
	ТаблицаРасшифровкаРегламентнойОперации.НоваяКолонка("СписаннаяСтоиомсть", "Число");
	ТаблицаРасшифровкаРегламентнойОперации.НоваяКолонка("СуммаКорректировки", "Число");
	
	// колонки для расшифровки
	ТаблицаРасшифровкаРегламентнойОперации.НоваяКолонка("РасшифровкаОборотноСальдоваяВедомостьПоСчету", "СписокЗначений");
	
КонецПроцедуры // ИнициализироватьРасшифровкуПоКорректировкеСтоимостиСпецМатериалов()

//******************************************************************************
// ИнициализироватьРасшифровкуПоКорректировкеТоваровОтгруженных()
//
// Параметры:
//  Нет.
//
// Вызывается из формул элементов диалога:
//  Нет.
//
// Описание:
//  Здесь описывается процедура.
//
Процедура ИнициализироватьРасшифровкуПоКорректировкеТоваровОтгруженных()
	
	Если ФормироватьПечатнуюФорму = 1 Тогда
		ТаблицаРасшифровкаРегламентнойОперации = СоздатьОбъект("ТаблицаЗначений");
		ТаблицаРасшифровкаРегламентнойОперации.НоваяКолонка("МПЗ", "Справочник.Материал");
		ТаблицаРасшифровкаРегламентнойОперации.НоваяКолонка("Контрагент", "Справочник.Контрагенты");
		ТаблицаРасшифровкаРегламентнойОперации.НоваяКолонка("Договор", "Справочник.Договоры");
		ТаблицаРасшифровкаРегламентнойОперации.НоваяКолонка("СуммаНаНачало", "Число");
		ТаблицаРасшифровкаРегламентнойОперации.НоваяКолонка("КоличествоНаНачало", "Число");
		ТаблицаРасшифровкаРегламентнойОперации.НоваяКолонка("ПриходСумма", "Число");
		ТаблицаРасшифровкаРегламентнойОперации.НоваяКолонка("ПриходКоличество", "Число");
		ТаблицаРасшифровкаРегламентнойОперации.НоваяКолонка("СредневзвешеннаяСтоимость", "Число");
		ТаблицаРасшифровкаРегламентнойОперации.НоваяКолонка("ФактическиСписаноСумма", "Число");
		ТаблицаРасшифровкаРегламентнойОперации.НоваяКолонка("ФактическиСписаноКоличество", "Число");
		ТаблицаРасшифровкаРегламентнойОперации.НоваяКолонка("РасчетнаяСуммаСписания", "Число");
		ТаблицаРасшифровкаРегламентнойОперации.НоваяКолонка("СуммаКорректировки", "Число");
		ТаблицаРасшифровкаРегламентнойОперации.НоваяКолонка("ВозвратНаСкладСумма", "Число");
		ТаблицаРасшифровкаРегламентнойОперации.НоваяКолонка("ВозвратНаСкладКоличество", "Число");
		ТаблицаРасшифровкаРегламентнойОперации.НоваяКолонка("РасчетнаяСуммаВозврата", "Число");
		ТаблицаРасшифровкаРегламентнойОперации.НоваяКолонка("СуммаКорректировкиВозврата", "Число");
		
		// колонки для расшифровки
		ТаблицаРасшифровкаРегламентнойОперации.НоваяКолонка("РасшифровкаОборотноСальдоваяВедомостьПоСчету", "СписокЗначений");
		ТаблицаРасшифровкаРегламентнойОперации.НоваяКолонка("РасшифровкаАнализСчетаПоСубконто", "СписокЗначений");
	КонецЕсли;
	
КонецПроцедуры // ИнициализироватьРасшифровкуПоКорректировкеТоваровОтгруженных()

//******************************************************************************
// ИнициализироватьРасшифровкуПоРасчетуТорговойНаценки()
//
// Параметры:
//  Нет.
//
// Вызывается из формул элементов диалога:
//  Нет.
//
// Описание:
//  Здесь описывается процедура.
//
Процедура ИнициализироватьРасшифровкуПоРасчетуТорговойНаценки()
	
	ТаблицаРасшифровкаРегламентнойОперации = СоздатьОбъект("ТаблицаЗначений");
	ТаблицаРасшифровкаРегламентнойОперации.НоваяКолонка("МестоХранения", "Справочник.МестаХранения");
	ТаблицаРасшифровкаРегламентнойОперации.НоваяКолонка("СтоимостьТоваров", "Число");
	ТаблицаРасшифровкаРегламентнойОперации.НоваяКолонка("СтоимостьПродаж", "Число");
	ТаблицаРасшифровкаРегламентнойОперации.НоваяКолонка("СуммаТорговойНаценки", "Число");
	ТаблицаРасшифровкаРегламентнойОперации.НоваяКолонка("СреднийПроцент", "Число");
	ТаблицаРасшифровкаРегламентнойОперации.НоваяКолонка("СуммаНаценкиРеализовано", "Число");
	
	// колонки для расшифровки
	ТаблицаРасшифровкаРегламентнойОперации.НоваяКолонка("РасшифровкаОборотноСальдоваяВедомостьПоСчету",  "СписокЗначений");
	ТаблицаРасшифровкаРегламентнойОперации.НоваяКолонка("РасшифровкаАнализСчетаПоСубконто",  "СписокЗначений");
	ТаблицаРасшифровкаРегламентнойОперации.НоваяКолонка("РасшифровкаРаспределенияТорговойНаценки", "СписокЗначений");
	
КонецПроцедуры // ИнициализироватьРасшифровкуПоРасчетуТорговойНаценки()

//******************************************************************************
// РасшифровкаРаспределенияТорговойНаценки()
//
// Параметры:
//  Нет.
//
// Возвращаемое значение:
//  Здесь описывается возвращаемое значение.
//
// Вызывается из формул элементов диалога:
//  Нет.
//
// Описание:
//  Здесь описывается функция.
//
Функция РасшифровкаРаспределенияТорговойНаценки()
	
	ТаблицаРаспределения = СоздатьОбъект("ТаблицаЗначений");
	
	ТаблицаРаспределения.НоваяКолонка("ВидНоменклатуры", "Справочник.ВидыНоменклатуры");
	ТаблицаРаспределения.НоваяКолонка("СтоимостьРеализованныхТоваров", "Число");
	ТаблицаРаспределения.НоваяКолонка("СреднийПроцент", "Число");
	ТаблицаРаспределения.НоваяКолонка("СуммаТорговойНаценки", "Число");
	
	// расшифровка
	ТаблицаРаспределения.НоваяКолонка("РасшифровкаОтчетПоПроводкам", "СписокЗначений");
	
	Расшифровка = СоздатьОбъект("СписокЗначений");
	Расшифровка.ДобавитьЗначение("ТаблицаРасшифровкаРаспределенияТорговойНаценки", "Наименование таблицы");
	Расшифровка.ДобавитьЗначение(ТаблицаРаспределения, "Таблица данных");
	Расшифровка.ДобавитьЗначение(ДатаДок, "Дата операции");
	
	Возврат Расшифровка;
	
КонецФункции // РасшифровкаРаспределенияТорговойНаценки()

//******************************************************************************
// ИнициализироватьРасшифровкуЗакрытиюСчета16()
//
// Параметры:
//  Нет.
//
// Вызывается из формул элементов диалога:
//  Нет.
//
// Описание:
//  Здесь описывается процедура.
//
Процедура ИнициализироватьРасшифровкуЗакрытиюСчета16()
	
	ТаблицаРасшифровкаРегламентнойОперации = СоздатьОбъект("ТаблицаЗначений");
	ТаблицаРасшифровкаРегламентнойОперации.НоваяКолонка("СальдоНаКонец", "Число");
	ТаблицаРасшифровкаРегламентнойОперации.НоваяКолонка("СтоимостьМПЗНаКонец", "Число");
	ТаблицаРасшифровкаРегламентнойОперации.НоваяКолонка("СтоимостьСписанныхМПЗ", "Число");
	ТаблицаРасшифровкаРегламентнойОперации.НоваяКолонка("Коэффициент", "Число");
	ТаблицаРасшифровкаРегламентнойОперации.НоваяКолонка("СуммаСписания", "Число");
	
	// колонки для расшифровки
	ТаблицаРасшифровкаРегламентнойОперации.НоваяКолонка("РасшифровкаОборотноСальдоваяВедомостьПоСчету16",  "СписокЗначений");
	ТаблицаРасшифровкаРегламентнойОперации.НоваяКолонка("РасшифровкаОборотноСальдоваяВедомостьПоСчету",  "СписокЗначений");
	ТаблицаРасшифровкаРегламентнойОперации.НоваяКолонка("РасшифровкаЗакрытияСчета16", "СписокЗначений");
	
КонецПроцедуры // ИнициализироватьРасшифровкуЗакрытиюСчета16()

//******************************************************************************
// РасшифровкаЗакрытияСчета16(Счет)
//
// Параметры:
//  Нет.
//
// Возвращаемое значение:
//  Здесь описывается возвращаемое значение.
//
// Вызывается из формул элементов диалога:
//  Нет.
//
// Описание:
//  Здесь описывается функция.
//
Функция РасшифровкаЗакрытияСчета16(Счет)
	
	ТаблицаРаспределения = СоздатьОбъект("ТаблицаЗначений");
	    
	ТаблицаРаспределения.НоваяКолонка("СтоимостьСписанныхМПЗ", "Число");
	ТаблицаРаспределения.НоваяКолонка("Коэффициент", "Число");
	ТаблицаРаспределения.НоваяКолонка("СуммаСписания", "Число");    
		
	Если Счет.Код = "16.1" Тогда
		ТаблицаРаспределения.НоваяКолонка("Счет", "Счет");
		ТаблицаРаспределения.НоваяКолонка("Субконто1");
		ТаблицаРаспределения.НоваяКолонка("Субконто2");
		ТаблицаРаспределения.НоваяКолонка("Субконто3");
		
		// расшифровка
		ТаблицаРаспределения.НоваяКолонка("РасшифровкаОтчетПоПроводкам", "СписокЗначений");
		НименованиеТаблицыРасшифровки = "ТаблицаРасшифровкЗакрытияСчета16_1";
		
	Иначе // 16.2
		
		ТаблицаРаспределения.НоваяКолонка("ВидНоменклатуры");
		
		// расшифровка
		ТаблицаРаспределения.НоваяКолонка("РасшифровкаОборотноСальдоваяВедомостьПоСчету", "СписокЗначений");
		НименованиеТаблицыРасшифровки = "ТаблицаРасшифровкЗакрытияСчета16_2";
	КонецЕсли;
	
	Расшифровка = СоздатьОбъект("СписокЗначений");
	Расшифровка.ДобавитьЗначение(НименованиеТаблицыРасшифровки, "Наименование таблицы");
	Расшифровка.ДобавитьЗначение(ТаблицаРаспределения, "Таблица данных");
	Расшифровка.ДобавитьЗначение(ДатаДок, "Дата операции");
	
	Возврат Расшифровка;
	
КонецФункции // РасшифровкаЗакрытияСчета16()

//******************************************************************************
// ИнициализироватьРасшифровкуПоЗакрытиюСчета97()
//
// Параметры:
//  Нет.
//
// Вызывается из формул элементов диалога:
//  Нет.
//
// Описание:
//  Здесь описывается процедура.
//
Процедура ИнициализироватьРасшифровкуПоЗакрытиюСчета97()
	
	ТаблицаРасшифровкаРегламентнойОперации = СоздатьОбъект("ТаблицаЗначений");
	ТаблицаРасшифровкаРегламентнойОперации.НоваяКолонка("СтатьяРБП", "Справочник.РасходыБудущихПериодов");
	ТаблицаРасшифровкаРегламентнойОперации.НоваяКолонка("Счет", "Счет");
	ТаблицаРасшифровкаРегламентнойОперации.НоваяКолонка("Субконто1");
	ТаблицаРасшифровкаРегламентнойОперации.НоваяКолонка("Субконто2");
	ТаблицаРасшифровкаРегламентнойОперации.НоваяКолонка("Субконто3");
	ТаблицаРасшифровкаРегламентнойОперации.НоваяКолонка("ДатаНачала", "Дата");
	ТаблицаРасшифровкаРегламентнойОперации.НоваяКолонка("ДатаОкончания", "Дата");
	ТаблицаРасшифровкаРегламентнойОперации.НоваяКолонка("ОбщаяСуммаРасходов", "Число");
	ТаблицаРасшифровкаРегламентнойОперации.НоваяКолонка("ОстатокНаКонец", "Число");
	ТаблицаРасшифровкаРегламентнойОперации.НоваяКолонка("СуммаСписания", "Число");
	
	// колонки для расшифровки
	ТаблицаРасшифровкаРегламентнойОперации.НоваяКолонка("РасшифровкаОборотноСальдоваяВедомостьПоСчету",  "СписокЗначений");
	
	ТаблицаРасшифровкаРегламентнойОперацииДополнительно = СоздатьОбъект("ТаблицаЗначений");
	ТаблицаРасшифровкаРегламентнойОперацииДополнительно.Загрузить(ТаблицаРасшифровкаРегламентнойОперации);
	ТаблицаРасшифровкаРегламентнойОперацииДополнительно.НоваяКолонка("ЕСН_ФБ", "Число");
	ТаблицаРасшифровкаРегламентнойОперацииДополнительно.НоваяКолонка("ФСС", "Число");
	ТаблицаРасшифровкаРегламентнойОперацииДополнительно.НоваяКолонка("ФФОМС", "Число");
	ТаблицаРасшифровкаРегламентнойОперацииДополнительно.НоваяКолонка("ТФОМС", "Число");
	ТаблицаРасшифровкаРегламентнойОперацииДополнительно.НоваяКолонка("ВсегоЕСН", "Число");
	ТаблицаРасшифровкаРегламентнойОперацииДополнительно.НоваяКолонка("СуммаСписанияЕСН", "Число");
	ТаблицаРасшифровкаРегламентнойОперацииДополнительно.НоваяКолонка("ПФР_страх", "Число");
	ТаблицаРасшифровкаРегламентнойОперацииДополнительно.НоваяКолонка("ПФР_нак", "Число");
	ТаблицаРасшифровкаРегламентнойОперацииДополнительно.НоваяКолонка("ФСС_НС", "Число");
	ТаблицаРасшифровкаРегламентнойОперацииДополнительно.НоваяКолонка("ВсегоПрочихОтчислений", "Число");
	ТаблицаРасшифровкаРегламентнойОперацииДополнительно.НоваяКолонка("СуммаСписанияПрочая", "Число");
		
КонецПроцедуры // ИнициализироватьРасшифровкуПоЗакрытиюСчета97()

//******************************************************************************
// РасшифровкаПоОтдельнымСтатьямЗатрат()
//
// Параметры:
//  Нет.
//
// Возвращаемое значение:
//  Здесь описывается возвращаемое значение.
//
// Вызывается из формул элементов диалога:
//  Нет.
//
// Описание:
//  Здесь описывается функция.
//
Функция РасшифровкаПоОтдельнымСтатьямЗатрат()
	
	ТаблицаРасходов = СоздатьОбъект("ТаблицаЗначений");
	ТаблицаРасходов.НоваяКолонка("СтатьяЗатрат", "Справочник.СтатьиЗатратНаПроизводство");
	ТаблицаРасходов.НоваяКолонка("СуммаРасходов", "Число");
	
	// колонки для расшифровки
	ТаблицаРасходов.НоваяКолонка("РасшифровкаОборотноСальдоваяВедомостьПоСчету",  "СписокЗначений");
	
	Расшифровка = СоздатьОбъект("СписокЗначений");
	Расшифровка.ДобавитьЗначение("ТаблицаРасшифровкаПоОтдельнымСтатьямРасхдов", "Наименование таблицы");
	Расшифровка.ДобавитьЗначение(ТаблицаРасходов, "Таблица данных");
	Расшифровка.ДобавитьЗначение(ДатаДок, "Дата операции");
	
	Возврат Расшифровка;
	
КонецФункции // РасшифровкаПоОтдельнымСтатьямЗатрат()

//******************************************************************************
// РасшифровкаПоВидамНоменклатуры()
//
// Параметры:
//  Нет.
//
// Возвращаемое значение:
//  Здесь описывается возвращаемое значение.
//
// Вызывается из формул элементов диалога:
//  Нет.
//
// Описание:
//  Здесь описывается функция.
//
Функция РасшифровкаПоВидамНоменклатуры()
	
	ТаблицаРасходов = СоздатьОбъект("ТаблицаЗначений");
	ТаблицаРасходов.НоваяКолонка("ВидНоменклатуры", "Справочник.ВидыНоменклатуры");
	ТаблицаРасходов.НоваяКолонка("СуммаБазаРаспределения", "Число");
	ТаблицаРасходов.НоваяКолонка("Коэффициент", "Число");
	ТаблицаРасходов.НоваяКолонка("СуммаСписания", "Число");
	
	Расшифровка = СоздатьОбъект("СписокЗначений");
	Расшифровка.ДобавитьЗначение("ТаблицаРасшифровкаПоОтдельнымСтатьямРасхдов", "Наименование таблицы");
	Расшифровка.ДобавитьЗначение(ТаблицаРасходов, "Таблица данных");
	Расшифровка.ДобавитьЗначение(ДатаДок, "Дата операции");
	
	Возврат Расшифровка;
	
КонецФункции // РасшифровкаПоВидамНоменклатуры()

//******************************************************************************
// ИнициализироватьРасшифровкуПоЗакрытиюСчета25()
//
// Параметры:
//  Нет.
//
// Вызывается из формул элементов диалога:
//  Нет.
//
// Описание:
//  Здесь описывается процедура.
//
Процедура ИнициализироватьРасшифровкуПоЗакрытиюСчета25()
	
	ТаблицаРасшифровкаРегламентнойОперации = СоздатьОбъект("ТаблицаЗначений");
	ТаблицаРасшифровкаРегламентнойОперации.НоваяКолонка("Подразделение", "Справочник.Подразделения");
	ТаблицаРасшифровкаРегламентнойОперации.НоваяКолонка("СуммаРасходов", "Число");
	ТаблицаРасшифровкаРегламентнойОперации.НоваяКолонка("БазаРаспределения", "Число");
	ТаблицаРасшифровкаРегламентнойОперации.НоваяКолонка("СуммаСписания", "Число");
	
	// колонки для расшифровки
	ТаблицаРасшифровкаРегламентнойОперации.НоваяКолонка("РасшифровкаБазаРаспределения", "СписокЗначений");
	ТаблицаРасшифровкаРегламентнойОперации.НоваяКолонка("РасшифровкаОборотноСальдоваяВедомостьПоСчету", "СписокЗначений");
	
КонецПроцедуры // ИнициализироватьРасшифровкуПоЗакрытиюСчета25()

//******************************************************************************
// РасшифровкаБазаРаспредленияПоВыручке()
//
// Параметры:
//  Нет.
//
// Возвращаемое значение:
//  Здесь описывается возвращаемое значение.
//
// Вызывается из формул элементов диалога:
//  Нет.
//
// Описание:
//  Здесь описывается функция.
//
Функция РасшифровкаБазаРаспредленияПоВыручке(БухИт, ВсегоСумма)
	
	Сч90_1 = СчетПоКоду("90.1");
	Сч90_3 = СчетПоКоду("90.3");
	Сч90_4 = СчетПоКоду("90.4");
	Сч90_5 = СчетПоКоду("90.5");
	Сч90_6 = СчетПоКоду("90.6");
	
	БазаРаспределения = СоздатьОбъект("ТаблицаЗначений");
	БазаРаспределения.НоваяКолонка("ВидНоменклатуры", "Справочник.ВидыНоменклатуры");
	БазаРаспределения.НоваяКолонка("Выручка", "Число");
	БазаРаспределения.НоваяКолонка("НДС", "Число");
	БазаРаспределения.НоваяКолонка("Акцизы", "Число");
	БазаРаспределения.НоваяКолонка("ЭкспортныеПошлины", "Число");
	БазаРаспределения.НоваяКолонка("НП", "Число");
	БазаРаспределения.НоваяКолонка("ВсегоСумма", "Число");
	
	// колонки для расшифровки
	БазаРаспределения.НоваяКолонка("РасшифровкаОборотноСальдоваяВедомостьПоСчету90_1", "СписокЗначений");
	БазаРаспределения.НоваяКолонка("РасшифровкаОборотноСальдоваяВедомостьПоСчету90_3", "СписокЗначений");
	БазаРаспределения.НоваяКолонка("РасшифровкаОборотноСальдоваяВедомостьПоСчету90_4", "СписокЗначений");
	БазаРаспределения.НоваяКолонка("РасшифровкаОборотноСальдоваяВедомостьПоСчету90_5", "СписокЗначений");
	БазаРаспределения.НоваяКолонка("РасшифровкаОборотноСальдоваяВедомостьПоСчету90_6", "СписокЗначений");
	
	БазаРаспределения.НоваяСтрока();
	БазаРаспределения.ВидНоменклатуры = БухИт.Субконто(ВидыСубконто.ВидыНоменклатуры);
	
	Если БухИт.ПолучитьСчет(, Сч90_1) = 1 Тогда
		БазаРаспределения.Выручка = БухИт.КО();
	КонецЕсли;
	
	Если БухИт.ПолучитьСчет(, Сч90_3) = 1 Тогда
	    БазаРаспределения.НДС = БухИт.ДО();
	КонецЕсли;
	
	Если БухИт.ПолучитьСчет(, Сч90_4) = 1 Тогда
	    БазаРаспределения.Акцизы = БухИт.ДО();
	КонецЕсли;
	
	Если БухИт.ПолучитьСчет(, Сч90_5) = 1 Тогда
	    БазаРаспределения.ЭкспортныеПошлины = БухИт.ДО();
	КонецЕсли;
	
	Если БухИт.ПолучитьСчет(, Сч90_6) = 1 Тогда
	    БазаРаспределения.НП = БухИт.ДО();
	КонецЕсли;
	
	БазаРаспределения.ВсегоСумма = ВсегоСумма;
	
	Расшифровка = СоздатьОбъект("СписокЗначений");
	ОсновнаяРасшифровкаОСВ.Выгрузить(Расшифровка);
	Расшифровка.Установить("Счет", Сч90_1);
	Расшифровка.Установить("ВидСубконто1", ВидыСубконто.ВидыНоменклатуры);
	Расшифровка.Установить("Субконто1", БухИт.Субконто(ВидыСубконто.ВидыНоменклатуры));
	Расшифровка.Установить("ОтборСубконто1", 1);
	БазаРаспределения.РасшифровкаОборотноСальдоваяВедомостьПоСчету90_1 = Расшифровка;
	
	Расшифровка = СоздатьОбъект("СписокЗначений");
	ОсновнаяРасшифровкаОСВ.Выгрузить(Расшифровка);
	Расшифровка.Установить("Счет", Сч90_3);
	Расшифровка.Установить("ВидСубконто1", ВидыСубконто.ВидыНоменклатуры);
	Расшифровка.Установить("Субконто1", БухИт.Субконто(ВидыСубконто.ВидыНоменклатуры));
	Расшифровка.Установить("ОтборСубконто1", 1);
	БазаРаспределения.РасшифровкаОборотноСальдоваяВедомостьПоСчету90_3 = Расшифровка;
	
	Расшифровка = СоздатьОбъект("СписокЗначений");
	ОсновнаяРасшифровкаОСВ.Выгрузить(Расшифровка);
	Расшифровка.Установить("Счет", Сч90_4);
	Расшифровка.Установить("ВидСубконто1", ВидыСубконто.ВидыНоменклатуры);
	Расшифровка.Установить("Субконто1", БухИт.Субконто(ВидыСубконто.ВидыНоменклатуры));
	Расшифровка.Установить("ОтборСубконто1", 1);
	БазаРаспределения.РасшифровкаОборотноСальдоваяВедомостьПоСчету90_4 = Расшифровка;
	
	Расшифровка = СоздатьОбъект("СписокЗначений");
	ОсновнаяРасшифровкаОСВ.Выгрузить(Расшифровка);
	Расшифровка.Установить("Счет", Сч90_5);
	Расшифровка.Установить("ВидСубконто1", ВидыСубконто.ВидыНоменклатуры);
	Расшифровка.Установить("Субконто1", БухИт.Субконто(ВидыСубконто.ВидыНоменклатуры));
	Расшифровка.Установить("ОтборСубконто1", 1);
	БазаРаспределения.РасшифровкаОборотноСальдоваяВедомостьПоСчету90_5 = Расшифровка;
	
	Расшифровка = СоздатьОбъект("СписокЗначений");
	ОсновнаяРасшифровкаОСВ.Выгрузить(Расшифровка);
	Расшифровка.Установить("Счет", Сч90_6);
	Расшифровка.Установить("ВидСубконто1", ВидыСубконто.ВидыНоменклатуры);
	Расшифровка.Установить("Субконто1", БухИт.Субконто(ВидыСубконто.ВидыНоменклатуры));
	Расшифровка.Установить("ОтборСубконто1", 1);
	БазаРаспределения.РасшифровкаОборотноСальдоваяВедомостьПоСчету90_6 = Расшифровка;
	
	Расшифровка = СоздатьОбъект("СписокЗначений");
	Расшифровка.ДобавитьЗначение("ТаблицаРасшифровкаБазаРаспредленияПоВыручке", "Наименование таблицы");
	Расшифровка.ДобавитьЗначение(БазаРаспределения, "Таблица данных");
	Расшифровка.ДобавитьЗначение(ДатаДок, "Дата операции");
	Расшифровка.ДобавитьЗначение(БухИт.Субконто(ВидыСубконто.ВидыНоменклатуры), "Дополнительные данные");
	
	Возврат Расшифровка;
	
КонецФункции // РасшифровкаБазаРаспредленияПоВыручке()

//******************************************************************************
// ИнициализироватьРасшифровкуПоНЗП()
//
// Параметры:
//  Нет.
//
// Вызывается из формул элементов диалога:
//  Нет.
//
// Описание:
//  Здесь описывается процедура.
//
Процедура ИнициализироватьРасшифровкуПоНЗП()
	
	ТаблицаРасшифровкаРегламентнойОперации = СоздатьОбъект("ТаблицаЗначений");
	ТаблицаРасшифровкаРегламентнойОперации.НоваяКолонка("ВидНоменклатуры", "Справочник.ВидыНоменклатуры");
	ТаблицаРасшифровкаРегламентнойОперации.НоваяКолонка("ТипНоменклатуры", "Перечисление");
	ТаблицаРасшифровкаРегламентнойОперации.НоваяКолонка("НЗПнаНачало", "Число");
	ТаблицаРасшифровкаРегламентнойОперации.НоваяКолонка("СуммаРасходовЗаМесяц", "Число");
	ТаблицаРасшифровкаРегламентнойОперации.НоваяКолонка("СуммаРасходовКРаспределению", "Число");
	ТаблицаРасшифровкаРегламентнойОперации.НоваяКолонка("НЗПнаКонец", "Число");
	ТаблицаРасшифровкаРегламентнойОперации.НоваяКолонка("СтоимостьВыпуска", "Число");
	
	// колонки для расшифровки
	ТаблицаРасшифровкаРегламентнойОперации.НоваяКолонка("РасшифровкаПрямыхРасходов", "СписокЗначений");
	ТаблицаРасшифровкаРегламентнойОперации.НоваяКолонка("РасшифровкаВыпускаПродукции", "СписокЗначений");
	
КонецПроцедуры // ИнициализироватьРасшифровкуПоНЗП()

//******************************************************************************
// РасшифровкаПрямыхРасходовПоСтатьям()
//
// Параметры:
//  Нет.
//
// Возвращаемое значение:
//  Здесь описывается возвращаемое значение.
//
// Вызывается из формул элементов диалога:
//  Нет.
//
// Описание:
//  Здесь описывается функция.
//
Функция РасшифровкаПрямыхРасходовПоСтатьям(ВидНоменклатуры)
	
	ТаблицаРасходов = СоздатьОбъект("ТаблицаЗначений");
	ТаблицаРасходов.НоваяКолонка("СтатьяЗатрат", "Справочник.СтатьиЗатратНаПроизводство");
	ТаблицаРасходов.НоваяКолонка("Подразделение", "Справочник.Подразделения");
	ТаблицаРасходов.НоваяКолонка("НЗПнаНачало", "Число");
	ТаблицаРасходов.НоваяКолонка("СуммаРасходовЗаМесяц", "Число");
	ТаблицаРасходов.НоваяКолонка("СуммаРасходовКРаспределению", "Число");
	ТаблицаРасходов.НоваяКолонка("НЗПнаКонец", "Число");
	ТаблицаРасходов.НоваяКолонка("СтоимостьВыпуска", "Число");
	
	// колонки для расшифровки
	ТаблицаРасходов.НоваяКолонка("ДокументНЗП", "Документ.НезавершенноеПроизводство");
	ТаблицаРасходов.НоваяКолонка("РасшифровкаОборотноСальдоваяВедомостьПоСчету", "СписокЗначений");
	
	Расшифровка = СоздатьОбъект("СписокЗначений");
	Расшифровка.ДобавитьЗначение("ТаблицаРасшифровкаПрямыхРасходов", "Наименование таблицы");
	Расшифровка.ДобавитьЗначение(ТаблицаРасходов, "Таблица данных");
	Расшифровка.ДобавитьЗначение(ДатаДок, "Дата операции");
	Расшифровка.ДобавитьЗначение(ВидНоменклатуры, "Дополнительные данные");
	
	Возврат Расшифровка;
	
КонецФункции // РасшифровкаПрямыхРасходовПоСтатьям()

//******************************************************************************
// РасшифровкаРаспределенияПрямыхРасходов()
//
// Параметры:
//  Нет.
//
// Возвращаемое значение:
//  Здесь описывается возвращаемое значение.
//
// Вызывается из формул элементов диалога:
//  Нет.
//
// Описание:
//  Здесь описывается функция.
//
Функция РасшифровкаРаспределенияПрямыхРасходов(ВидНоменклатуры)
	
	ТаблицаВыпуска = СоздатьОбъект("ТаблицаЗначений");
	ТаблицаВыпуска.НоваяКолонка("Продукция", "Справочник.Номенклатура");
	ТаблицаВыпуска.НоваяКолонка("КоличествоВыпуска", "Число");
	ТаблицаВыпуска.НоваяКолонка("ПлановаяСтоимость", "Число");
	ТаблицаВыпуска.НоваяКолонка("Коэффициент", "Число");
	ТаблицаВыпуска.НоваяКолонка("СуммаВыпуска", "Число");
	
	// колонки для расшифровки
	ТаблицаВыпуска.НоваяКолонка("РасшифровкаОтчетПоПроводкам", "СписокЗначений");
	
	Расшифровка = СоздатьОбъект("СписокЗначений");
	Расшифровка.ДобавитьЗначение("ТаблицаРаспределенияПрямыхРасходов", "Наименование таблицы");
	Расшифровка.ДобавитьЗначение(ТаблицаВыпуска, "Таблица данных");
	Расшифровка.ДобавитьЗначение(ДатаДок, "Дата операции");
	Расшифровка.ДобавитьЗначение(ВидНоменклатуры, "Дополнительные данные");
	
	Возврат Расшифровка;
	
КонецФункции // РасшифровкаРаспределенияПрямыхРасходов()

//******************************************************************************
// ИнициализироватьРасшифровкуПоЗакрытиюСчета44()
//
// Параметры:
//  Нет.
//
// Вызывается из формул элементов диалога:
//  Нет.
//
// Описание:
//  Здесь описывается процедура.
//
Процедура ИнициализироватьРасшифровкуПоЗакрытиюСчета44()
	
	ТаблицаРасшифровкаРегламентнойОперации = СоздатьОбъект("ТаблицаЗначений");
	ТаблицаРасшифровкаРегламентнойОперации.НоваяКолонка("СтатьяИздержек", "Справочник");
	ТаблицаРасшифровкаРегламентнойОперации.НоваяКолонка("СуммаРасходовВсего", "Число");
	ТаблицаРасшифровкаРегламентнойОперации.НоваяКолонка("БазаРаспределения", "Число");
	ТаблицаРасшифровкаРегламентнойОперации.НоваяКолонка("СуммаКСписанию", "Число");
	ТаблицаРасшифровкаРегламентнойОперации.НоваяКолонка("СуммаСписания", "Число");
	                                                                              
	// колонки для расшифровки
	ТаблицаРасшифровкаРегламентнойОперации.НоваяКолонка("РасшифровкаОборотноСальдоваяВедомостьПоСчету", "СписокЗначений");
	ТаблицаРасшифровкаРегламентнойОперации.НоваяКолонка("РасшифровкаРаспределенияРасходов", "СписокЗначений");
	
КонецПроцедуры // ИнициализироватьРасшифровкуПоЗакрытиюСчета44()

//******************************************************************************
// РасшифровкаРаспределенияРасходов()
//
// Параметры:
//  Нет.
//
// Возвращаемое значение:
//  Здесь описывается возвращаемое значение.
//
// Вызывается из формул элементов диалога:
//  Нет.
//
// Описание:
//  Здесь описывается функция.
//
Функция РасшифровкаРаспределенияРасхдодовСчет44(СтатьяИздержек, ДополнительныеГрафы = 0)
	
	ТаблицаРаспределения = СоздатьОбъект("ТаблицаЗначений");
	ТаблицаРаспределения.НоваяКолонка("ВидНоменклатуры", "Справочник.ВидыНоменклатуры");
	ТаблицаРаспределения.НоваяКолонка("ВсегоРасходов", "Число");
	ТаблицаРаспределения.НоваяКолонка("БазаРаспределения", "Число");
	ТаблицаРаспределения.НоваяКолонка("Коэффициент", "Число");
	ТаблицаРаспределения.НоваяКолонка("СуммаРасходов", "Число");
	
	Расшифровка = СоздатьОбъект("СписокЗначений");
	Расшифровка.ДобавитьЗначение("ТаблицаРасшифровкаРаспределенияРасхдодовСчет44", "Наименование таблицы");
	Расшифровка.ДобавитьЗначение(ТаблицаРаспределения, "Таблица данных");
	Расшифровка.ДобавитьЗначение(ДатаДок, "Дата операции");
	Расшифровка.ДобавитьЗначение(СтатьяИздержек, "Дополнительные данные");
	
	Если ДополнительныеГрафы = 1 Тогда
	    ТаблицаРаспределения.НоваяКолонка("БазаРаспределенияЕНВД", "Число");
		ТаблицаРаспределения.НоваяКолонка("СуммаРасходовЕНВД", "Число");
		
		Расшифровка.Установить( "Наименование таблицы", "ТаблицаРасшифровкаРаспределенияИздержекОбращения44_1_3");
	КонецЕсли;
	
	Возврат Расшифровка;
	
КонецФункции // РасшифровкаРаспределенияРасходов()

//******************************************************************************
// РасшифровкаНалоговойБазы()
//
Функция РасшифровкаНалоговойБазы()
	
	ТаблицаРасшифровка = СоздатьОбъект("ТаблицаЗначений");
	ТаблицаРасшифровка.НоваяКолонка("Счет", "Строка");
	ТаблицаРасшифровка.НоваяКолонка("Доход", "Число");
	ТаблицаРасшифровка.НоваяКолонка("Расход", "Число");
	
	// колонки для расшифровки
	ТаблицаРасшифровка.НоваяКолонка("РасшифровкаОборотноСальдоваяВедомостьПоСчету", "СписокЗначений");
	
	Расшифровка = СоздатьОбъект("СписокЗначений");
	Расшифровка.ДобавитьЗначение("ТаблицаРасшифровкаНалоговойБазы", "Наименование таблицы");
	Расшифровка.ДобавитьЗначение(ТаблицаРасшифровка, "Таблица данных");
	Расшифровка.ДобавитьЗначение(ДатаДок, "Дата операции");
	
	Возврат Расшифровка;
	
КонецФункции // РасшифровкаНалоговойБазы()

//******************************************************************************
// РасшифровкаУбытковПрошлыхПериодов()
//
Функция РасшифровкаУбытковПрошлыхПериодов()
	
	ТаблицаРасшифровка = СоздатьОбъект("ТаблицаЗначений");
	ТаблицаРасшифровка.НоваяКолонка("БазаНУ", "Число");
	ТаблицаРасшифровка.НоваяКолонка("КорректировкаБазы", "Число");
	ТаблицаРасшифровка.НоваяКолонка("УбытокТекущегоПериода", "Число");
	ТаблицаРасшифровка.НоваяКолонка("УбыткиПрошлыхЛетВсего", "Число");
	ТаблицаРасшифровка.НоваяКолонка("УбыткиПрошлыхЛетПостоянныеРазницы", "Число");
	ТаблицаРасшифровка.НоваяКолонка("УбыткиПрошлыхЛетКорректировка", "Число");
	ТаблицаРасшифровка.НоваяКолонка("УбыткиПрошлыхЛетВременныеРазницы", "Число");
	ТаблицаРасшифровка.НоваяКолонка("УбытокУменьшающийНБВсего", "Число");
	ТаблицаРасшифровка.НоваяКолонка("УбытокУменьшающийНБПостоянныеРазницы", "Число");
	ТаблицаРасшифровка.НоваяКолонка("УбытокУменьшающийНБВременныеРазницы", "Число");
	ТаблицаРасшифровка.НоваяКолонка("ВсегоНеперенесенногоУбытка", "Число");
	
	ТаблицаРасшифровка.НоваяКолонка("РассчитанныйОНА", "Число");
	ТаблицаРасшифровка.НоваяКолонка("ОтраженныйОНА", "Число");
	ТаблицаРасшифровка.НоваяКолонка("ПодлежитПризнаниюОНА", "Число");
	ТаблицаРасшифровка.НоваяКолонка("ПодлежитПогашениюОНА", "Число");
	                                                                 
	// колонки для расшифровки
	ТаблицаРасшифровка.НоваяКолонка("РасшифровкаНалоговойБазы", "СписокЗначений");
	
	Расшифровка = СоздатьОбъект("СписокЗначений");
	Расшифровка.ДобавитьЗначение("ТаблицаРасшифровкаУбытковПрошлыхПериодов", "Наименование таблицы");
	Расшифровка.ДобавитьЗначение(ТаблицаРасшифровка, "Таблица данных");
	Расшифровка.ДобавитьЗначение(ДатаДок, "Дата операции");
	
	Возврат Расшифровка;
	
КонецФункции // РасшифровкаУбытковПрошлыхПериодов()

//******************************************************************************
// РасшифровкаВременныхРазниц()
//
// Параметры:
//  Нет.
//
// Возвращаемое значение:
//  Здесь описывается возвращаемое значение.
//
// Вызывается из формул элементов диалога:
//  Нет.
//
// Описание:
//  Здесь описывается функция.
//
Функция РасшифровкаВременныхРазниц(ВидАктивовОбязательств)
	
	ТаблицаРасшифровка = СоздатьОбъект("ТаблицаЗначений");
	ТаблицаРасшифровка.НоваяКолонка("Объект");
	ТаблицаРасшифровка.НоваяКолонка("ОценкаБУнаНачало", "Число");
	ТаблицаРасшифровка.НоваяКолонка("ОценкаБУнаКонец", "Число");
	ТаблицаРасшифровка.НоваяКолонка("ОценкаНУнаНачало", "Число");
	ТаблицаРасшифровка.НоваяКолонка("ОценкаНУнаКонец", "Число");
	ТаблицаРасшифровка.НоваяКолонка("РазницаВсего", "Число");
	ТаблицаРасшифровка.НоваяКолонка("ПостоянныеРазницы", "Число");
	ТаблицаРасшифровка.НоваяКолонка("КорректировкаВременныхРазниц", "Число");
	ТаблицаРасшифровка.НоваяКолонка("ВычитаемыеРазницыНаНачало", "Число");
	ТаблицаРасшифровка.НоваяКолонка("ВычитаемыеРазницыВозникло", "Число");
	ТаблицаРасшифровка.НоваяКолонка("ВычитаемыеРазницыКПогашению", "Число");
	ТаблицаРасшифровка.НоваяКолонка("НалогооблагаемыеРазницыНаНачало", "Число");
	ТаблицаРасшифровка.НоваяКолонка("НалогооблагаемыеРазницыВозникло", "Число");
	ТаблицаРасшифровка.НоваяКолонка("НалогооблагаемыеРазницыКПогашению", "Число");
	
	Расшифровка = СоздатьОбъект("СписокЗначений");
	Расшифровка.ДобавитьЗначение("ТаблицаРасшифровкаВременныхРазниц", "Наименование таблицы");
	Расшифровка.ДобавитьЗначение(ТаблицаРасшифровка, "Таблица данных");
	Расшифровка.ДобавитьЗначение(ДатаДок, "Дата операции");
	Расшифровка.ДобавитьЗначение(ВидАктивовОбязательств, "Дополнительные данные");
	
	Возврат Расшифровка;
	
КонецФункции // РасшифровкаВременныхРазниц()

//******************************************************************************
// ТаблицаПостоянныхРазниц()
//
// Параметры:
//  Нет.
//
// Возвращаемое значение:
//  Здесь описывается возвращаемое значение.
//
// Вызывается из формул элементов диалога:
//  Нет.
//
// Описание:
//  Здесь описывается функция.
//
Функция РасшифровкаПостоянныхРазниц(ВидРазниц)
	
	ТаблицаПостоянныхРазниц = СоздатьОбъект("ТаблицаЗначений");
	ТаблицаПостоянныхРазниц.НоваяКолонка("Наименование");
	ТаблицаПостоянныхРазниц.НоваяКолонка("НаНачало", "Число");
	ТаблицаПостоянныхРазниц.НоваяКолонка("Возникло", "Число");
	ТаблицаПостоянныхРазниц.НоваяКолонка("Списано", "Число");
	ТаблицаПостоянныхРазниц.НоваяКолонка("Перенесено", "Число");
	ТаблицаПостоянныхРазниц.НоваяКолонка("СписаноЕНВД", "Число");
	ТаблицаПостоянныхРазниц.НоваяКолонка("ПостоянныеРазницы", "Число");
	
	Расшифровка = СоздатьОбъект("СписокЗначений");
	Расшифровка.ДобавитьЗначение("ТаблицаРасшифровкаПостоянныхРазниц", "Наименование таблицы");
	Расшифровка.ДобавитьЗначение(ТаблицаПостоянныхРазниц, "Таблица данных");
	Расшифровка.ДобавитьЗначение(ДатаДок, "Дата операции");
	Расшифровка.ДобавитьЗначение(ВидРазниц, "Дополнительные данные");
	
	Возврат Расшифровка;
	
КонецФункции // ТаблицаПостоянныхРазниц()

//******************************************************************************
// ИнициализироватьРасшифровкуРасчетаНалогаНаПрибыль()
//
// Параметры:
//  Нет.
//
// Вызывается из формул элементов диалога:
//  Нет.
//
// Описание:
//  Здесь описывается процедура.
//
Процедура ИнициализироватьРасшифровкуРасчетаНалогаНаПрибыль()
	
	ТаблицаРасшифровкаРегламентнойОперации = СоздатьОбъект("ТаблицаЗначений");
	ТаблицаРасшифровкаРегламентнойОперации.НоваяКолонка("СуммаПрибылиУбыткаВсего", "Число");
	ТаблицаРасшифровкаРегламентнойОперации.НоваяКолонка("СуммаПрибылиУбыткаЕНВД", "Число");
	ТаблицаРасшифровкаРегламентнойОперации.НоваяКолонка("СуммаПрибылиУбытка", "Число");
	ТаблицаРасшифровкаРегламентнойОперации.НоваяКолонка("Ставка", "Число");
	ТаблицаРасшифровкаРегламентнойОперации.НоваяКолонка("УсловныйРасходДоход", "Число");
	ТаблицаРасшифровкаРегламентнойОперации.НоваяКолонка("ОтраженныйУсловныйРасход", "Число");
	ТаблицаРасшифровкаРегламентнойОперации.НоваяКолонка("ОтраженныйУсловныйДоход", "Число");
	ТаблицаРасшифровкаРегламентнойОперации.НоваяКолонка("ПодлежитОтражениюУсловныйРасход", "Число");
	ТаблицаРасшифровкаРегламентнойОперации.НоваяКолонка("ПодлежитОтражениюУсловныйДоход", "Число");	
	
КонецПроцедуры // ИнициализироватьРасшифровкуРасчетаНалогаНаПрибыль()

//******************************************************************************
// МожноВыбиратьСтатьюОтчислений(СчетЗатрат)
//
Функция МожноВыбиратьСтатьюОтчислений(СчетЗатрат)
	
	Если СчетЗатрат.Выбран() = 1 Тогда
		Для А = 1 По 3 Цикл
			Если (СчетЗатрат.ВидСубконто(А) = ВидыСубконто.СтатьиЗатратНаПроизводство) или
				 (СчетЗатрат.ВидСубконто(А) = ВидыСубконто.СтатьиЗатратОбслуживающихПроизводств) или
				 (СчетЗатрат.ВидСубконто(А) = ВидыСубконто.СтатьиОбщепроизводственныхЗатрат) или
				 (СчетЗатрат.ВидСубконто(А) = ВидыСубконто.СтатьиОбщехозяйственныхЗатрат) или
				 (СчетЗатрат.ВидСубконто(А) = ВидыСубконто.СтатьиИздержекОбращения) или
				 (СчетЗатрат.ВидСубконто(А) = ВидыСубконто.СтатьиКоммерческихРасходов) или
				 (СчетЗатрат.ВидСубконто(А) = ВидыСубконто.СтатьиРасходовНаПродажу) Тогда
				Возврат А;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат 0;
	
КонецФункции // МожноВыбиратьСтатьюОтчислений()  

//****************************************************************************** 
// КоэффициентРаспределенияПоВидамДеятельности()
//
// Параметры:
//  Нет.
//
// Возвращаемое значение:
//  К - Число - коэффициент распределения.
//
// Вызывается из формул элементов диалога:
//  Нет.
//
// Описание:
//  Определяется коэффициент доходов от деятельности не облагаемой ЕНВД в общем объеме доходов.
//
Функция КоэффициентРаспределенияПоВидамДеятельности()
	
	Сч90_1_1 = СчетПоКоду("90.1.1");
	Сч90_1_2 = СчетПоКоду("90.1.2");
	Сч90_3   = СчетПоКоду("90.3");
	Сч90_4   = СчетПоКоду("90.4");
	Сч90_5   = СчетПоКоду("90.5");
	Сч90_6   = СчетПоКоду("90.6");
	
	БухИт90 = СоздатьОбъект("БухгалтерскиеИтоги"); БухИт90.ИспользоватьРазделительУчета(ЮрЛицо);
	БухИт90.ПериодМ(ДатаДок);
	
	ВыручкаНеЕНВД     = БухИт90.КО(Сч90_1_1);
	Налоги            = БухИт90.ДО(Сч90_3) + БухИт90.ДО(Сч90_4) + БухИт90.ДО(Сч90_5) + БухИт90.ДО(Сч90_6);
	ВыручкаБезНалогов = ВыручкаНеЕНВД - Налоги;
	
	ВыручкаЕНВД    = БухИт90.КО(Сч90_1_2);
				
	ПрибыльОбщая = ВыручкаБезНалогов + ВыручкаЕНВД;
	Если ПрибыльОбщая = 0 Тогда
		К = 1;
		
	Иначе
		К = ВыручкаБезНалогов/ПрибыльОбщая ;
	КонецЕсли;
	
	
	Возврат ?(К=0,1,К);
	
КонецФункции // КоэффициентРаспределенияПоВидамДеятельности()
//******************************************************************************
// СуммаСписанияРасходовБудущихПериодовЗаМесяц(СтатьяРасходовБудущихПериодов, Сумма)
//
// Параметры:
//  СтатьяРасходовБудущихПериодов - Справочник.РасходыБудущихПериодов;
//  Сумма     - Число. Первоначальная сумма расхода будущих периодов.
//
// Возвращаемое значение:
//  Число: Сумма расхода, которую следует признать в текущем месяце.
//
// Описание:
//  Рассчитывает сумму расхода, которую следует признать в текущем месяце.
//
Функция СуммаСписанияРасходовБудущихПериодовЗаМесяц(СтатьяРасходовБудущихПериодов, Сумма, ПоСправочнику = 0)
	                                                    

	Если Сумма = 0 Тогда
	    Возврат 0;
	КонецЕсли;  
	
	Если ПоСправочнику = 0 Тогда
		ДатаНачалаСписания = ?(СтатьяРасходовБудущихПериодов.ДатаНачалаСписания > ДатаНач, СтатьяРасходовБудущихПериодов.ДатаНачалаСписания, ДатаНач);
	Иначе
		ДатаНачалаСписания = СтатьяРасходовБудущихПериодов.ДатаНачалаСписания;
	КонецЕсли;

	Если ПустоеЗначение(ДатаНачалаСписания) = 1 Тогда
	    Возврат 0;
		
	ИначеЕсли ДатаНачалаСписания > ДатаКон Тогда
	    Возврат 0;
	КонецЕсли;
    
	ДатаОкончанияСписания = СтатьяРасходовБудущихПериодов.ДатаОкончанияСписания;
	Если ПустоеЗначение(ДатаОкончанияСписания) = 1 Тогда
	    Возврат 0;
		
	ИначеЕсли ДатаОкончанияСписания < ДатаНач Тогда
	    Возврат 0;
		
	ИначеЕсли ДатаОкончанияСписания < ДатаНачалаСписания Тогда
		
	    Возврат 0;
	КонецЕсли;
	
	Если СтатьяРасходовБудущихПериодов.СпособПризнанияРасходов = Перечисление.СпособыПризнанияРасходов.ПоКалендарнымДням Тогда 
		КоличествоДней = ДатаОкончанияСписания - ДатаНачалаСписания + 1;
		ЦенаДня = Сумма / КоличествоДней;		
		Если КонМесяца(ДатаОкончанияСписания) = КонМесяца(ДатаНачалаСписания) Тогда 
			КоличествоДнейТекущегоМесяца = ДатаЧисло(КонМесяца(ДатаДок)); 
			СуммаСписанияЗаМесяц = Сумма;
		Иначе
			КоличествоДнейТекущегоМесяца = КонМесяца(ДатаНачалаСписания) - ДатаНачалаСписания + 1;
			СуммаСписанияЗаМесяц = ЦенаДня * КоличествоДнейТекущегоМесяца;
		КонецЕсли;
		
	ИначеЕсли СтатьяРасходовБудущихПериодов.СпособПризнанияРасходов = Перечисление.СпособыПризнанияРасходов.ВОсобомПорядке Тогда 
		СуммаСписанияЗаМесяц = 0;
	Иначе
		
		ДоляПоследнегоМесяца = ДатаЧисло(ДатаОкончанияСписания) / ДатаЧисло(КонМесяца(ДатаОкончанияСписания));
		Если КонМесяца(ДатаНачалаСписания) = КонМесяца(ДатаОкончанияСписания) Тогда
			ДоляТекущегоМесяца = ДоляПоследнегоМесяца;
			КоличествоМесяцев  = ДоляПоследнегоМесяца;
		Иначе
			ДоляТекущегоМесяца   = (КонМесяца(ДатаНачалаСписания) - ДатаНачалаСписания + 1) / ДатаЧисло(КонМесяца(ДатаНачалаСписания));
			КоличествоМесяцевСеридины = 0;
			ТекДата = ДобавитьМесяц(КонМесяца(ДатаНачалаСписания), 1);
			Пока КонМесяца(ДатаОкончанияСписания) >= ТекДата Цикл
				КоличествоМесяцевСеридины = КоличествоМесяцевСеридины + 1;
				ТекДата               = ДобавитьМесяц(ТекДата, 1);
			КонецЦикла;
			КоличествоМесяцев = КоличествоМесяцевСеридины - 1 + ДоляПоследнегоМесяца + ДоляТекущегоМесяца;
		КонецЕсли;
		
		СуммаСписанияЗаМесяц = ?(КоличествоМесяцев = 0, 0, Сумма * ДоляТекущегоМесяца / КоличествоМесяцев);
		
	КонецЕсли;
	
	Если Сумма > 0 Тогда
		Возврат Мин(СуммаСписанияЗаМесяц, Сумма);
	Иначе
		Возврат Макс(СуммаСписанияЗаМесяц, Сумма);
	КонецЕсли;
	
КонецФункции // СуммаСписанияРасходовБудущихПериодовЗаМесяц()

//******************************************************************************
// СформироватьПроводку(Налог, Сотрудник, Таб, Сумма)
//
// Параметры:
//  Налог - Строка. Код налога по справочнику "Налоги и отчисления".
//  Сотрудник - Справочник.Сотрудники.
//  Таб   - ТаблицаЗначений. Таблица начислений по сотруднику с выбранной строкой.
//  Сумма - Число. Сумма проводки.
//
// Описание:
//  Процедура формирует проводку по ЕСН.
//
Процедура СформироватьПроводку(Налог, Сотрудник, Таб, Сумма)
	
	Если Сумма = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если Таб.Счет = СчетПоКоду("97") Тогда
		Если СтатьяРБП.НайтиЭлемент(Таб.Субконто1) = 1 Тогда
			СтатьяРБП.УстановитьАтрибут("Сумма" + СокрЛП(Налог), Сумма);
			Если СтатьяРБП.Сумма <> 0 Тогда
			    СтатьяРБП.УстановитьАтрибут("Ставка" + СокрЛП(Налог), Сумма/СтатьяРБП.Сумма*100);
			КонецЕсли;
			СтатьяРБП.Записать();
		КонецЕсли;
	КонецЕсли;
	
	СчетДебет = Таб.Счет;
	
	Операция.НоваяПроводка(); Операция.РазделительУчета = ЮрЛицо;
	Операция.ПервичныйДокумент  = глПредставлениеПервичногоДокумента(Контекст);
	Операция.Дебет.Счет = СчетДебет;
	Операция.Дебет.Субконто(1, Таб.Субконто1);
	Операция.Дебет.Субконто(2, Таб.Субконто2);
	Операция.Дебет.Субконто(3, Таб.Субконто3);
	Операция.НомерЖурнала = "ЗП"; 
	
	ЕСН_Взнос = ?(ДатаДок < '01.01.2010', "ЕСН", "взнос");
	                       
	Если Налог = "ФСС" Тогда
		Операция.Кредит.Счет = СчетПоКоду("69.1");
		Операция.Кредит.Сотрудники = Сотрудник;
		Операция.Кредит.ВидыПлатежейВФонды = Перечисление.ВидыПлатежейВФонды.Взносы;
		Операция.СодержаниеПроводки = "Начислен " + ЕСН_Взнос + " в ч. ФСС";
		
	ИначеЕсли Налог = "ЕСН_ФБ" Тогда
		Операция.Кредит.Счет = СчетПоКоду("69.2.1");
		Операция.Кредит.Сотрудники = Сотрудник;
		Операция.Кредит.ВидыПлатежейВБюджет = Перечисление.ВидыПлатежейВБюджет.Налог;
		Операция.СодержаниеПроводки = "Начислен ЕСН в ч. ФБ";
		
	ИначеЕсли Налог = "ПФР_страх" Тогда
		Операция.Кредит.Счет = СчетПоКоду("69.2.2");
		Операция.Кредит.Сотрудники = Сотрудник;
		Операция.Кредит.ВидыПлатежейВБюджет = Перечисление.ВидыПлатежейВБюджет.Налог;
		Операция.СодержаниеПроводки = "Начислен взнос в ПФР";
		
	ИначеЕсли Налог = "ПФР_нак" Тогда
		Операция.Кредит.Счет = СчетПоКоду("69.2.3");
		Операция.Кредит.Сотрудники = Сотрудник;
		Операция.Кредит.ВидыПлатежейВБюджет = Перечисление.ВидыПлатежейВБюджет.Налог;
		Операция.СодержаниеПроводки = "Начислен взнос в ПФР";
		
	ИначеЕсли Налог = "ФФОМС" Тогда
		Операция.Кредит.Счет = СчетПоКоду("69.3.1");
		Операция.Кредит.Сотрудники = Сотрудник;
		Операция.Кредит.ВидыПлатежейВБюджет = Перечисление.ВидыПлатежейВБюджет.Налог;
		Операция.СодержаниеПроводки = "Начислен " + ЕСН_Взнос + " в ч. ФФОМС";
		
	ИначеЕсли Налог = "ТФОМС" Тогда
		Операция.Кредит.Счет = СчетПоКоду("69.3.2");
		Операция.Кредит.Сотрудники = Сотрудник;
		Операция.Кредит.ВидыПлатежейВБюджет = Перечисление.ВидыПлатежейВБюджет.Налог;
		Операция.СодержаниеПроводки = "Начислен " + ЕСН_Взнос + " в ч. ТФОМС";
		
	ИначеЕсли Налог = "ФСС_НС" Тогда
		Налог = глПолучитьНалог(Налог);
		Операция.Кредит.Счет = Налог.Счет;
		Операция.Кредит.Субконто(1, Налог.Субконто1);
		Операция.Кредит.Субконто(2, Налог.Субконто2);
		Операция.Кредит.Субконто(3, Налог.Субконто3);
		Операция.СодержаниеПроводки = "Начислен ФСС от НС и ПЗ";
	КонецЕсли;
	                                         
	Операция.Сумма = Сумма;
				
КонецПроцедуры // СформироватьПроводку()

//******************************************************************************
// ПолучитьСубконто91(ОблагаетсяЕНВД = 0)
//
// Параметры:
//  ОблагаетсяЕНВД - Число. 1 - если расходы относятся к деятельности, облагаемой ЕНВД.
//
// Возвращаемое значение:
//  Справочник.ПрочиеДоходыИРасходы - Предопределенный элемент для учета
// исчисленной суммы сбора на образование.
//
// Описание:
//  Находит и (в случае необходимости создает) предопределенный элемент 
// справочника "Прочие доходы и расходы" для учета исчисленной суммы с бора на 
// образование на счете 91 "Прочие доходы и расходы".
//
Функция ПолучитьСубконто91(ОблагаетсяЕНВД = 0)
	
	Если ОблагаетсяЕНВД = 1 Тогда
	    ВидПрочихДоходовИРасходов = Перечисление.ВидыПрочихДоходовИРасходов.НеПринимаемыеДляЦелейНалогообложения;
		НаименованиеСтатьи = "Сбор на образование (ЕНВД)";
		
	Иначе
		ВидПрочихДоходовИРасходов = Перечисление.ВидыПрочихДоходовИРасходов.ПрочиеОперационныеДоходыРасходы;
		НаименованиеСтатьи = "Сбор на образование";
	КонецЕсли;
	
	Спр = СоздатьОбъект("Справочник.ПрочиеДоходыИРасходы");
	Спр.ВыбратьЭлементыПоРеквизиту("ВидПрочихДоходовИРасходов", ВидПрочихДоходовИРасходов,,);
	СтатьяРасхода = "";
	Пока (Спр.ПолучитьЭлемент() = 1) и (ПустоеЗначение(СтатьяРасхода) = 1) Цикл
		Если Спр.Наименование = НаименованиеСтатьи Тогда
		    СтатьяРасхода = Спр.ТекущийЭлемент();
		КонецЕсли;
	КонецЦикла;

	Если ПустоеЗначение(СтатьяРасхода) = 1 Тогда
		Спр.Новый();
		Спр.Наименование = НаименованиеСтатьи;
		Спр.ВидПрочихДоходовИРасходов = ВидПрочихДоходовИРасходов;
		Спр.Записать();
		Возврат Спр.ТекущийЭлемент();
		
	Иначе
		Возврат СтатьяРасхода;
	КонецЕсли;	
	
КонецФункции // ПолучитьСубконто91()

//******************************************************************************
// ОтобратьСтрокиТаблицы(Таб, СписокКолонок)
//
// Параметры:
//  Таб           - ТаблицаЗначений. Обрабатываемая таблица.
//  СписокКолонок - СписокЗначений. Идентификаторы колонок таблицы и значения, 
//                  которые следует отбирать. Значения передаются, как значения 
//                  списка, идентификаторы, как их представления.
//
// Возвращаемое значение:
//  Таблица значений.
//
// Описание:
//  Функция выделяет из таблицы значений строки, содержащие 
// определенные значения в определенных колонках и формирует 
// из них отдельную таблицу значений.
//
Функция ОтобратьСтрокиТаблицы(Таб, СписокКолонок)
	
	// Создадим отдельную таблицу для обработки данных.
	Т = СоздатьОбъект("ТаблицаЗначений");
	Таб.Выгрузить(Т);
	Результат = СоздатьОбъект("ТаблицаЗначений");
	
	Если Т.КоличествоСтрок() = 0 Тогда
		Возврат Т;
	КонецЕсли;
	
	Если СписокКолонок.РазмерСписка() = 0 Тогда
		Возврат Т;
	КонецЕсли;
	
	// Отсортируем полученную таблицу по переданным в функцию колонкам
	ИменаКолонок = "";
	ИмяКолонки = "";
	Для а = 1 по СписокКолонок.РазмерСписка() Цикл
		СписокКолонок.ПолучитьЗначение(а, ИмяКолонки);
		ИменаКолонок = ИменаКолонок + ?(ИменаКолонок="","",",") + ИмяКолонки;
	КонецЦикла;
	Т.Сортировать(ИменаКолонок);
	
	// Определим начальную и конечную строки таблицы, в которых есть указанные
	// значения.
	НачСтрока = 0;
	КонСтрока = 0;
	
	// Пропустим первые ненужные строки таблицы.
	НачСтрокаПоиска = 0;
	ИмяПервойКолонки = "";
	Если Т.НайтиЗначение(СписокКолонок.ПолучитьЗначение(1, ИмяПервойКолонки),
						 НачСтрокаПоиска, ИмяПервойКолонки) = 0 Тогда

		Т.УдалитьСтроки();
		Возврат Т;
	КонецЕсли;
	
	Для а = НачСтрокаПоиска по Т.КоличествоСтрок() Цикл
		СтрокаУдовлетворяетУсловиям = 1;
		Для б = 1 по СписокКолонок.РазмерСписка() Цикл
			ИмяКолонки = "";
			ЗначениеЯчейки = СписокКолонок.ПолучитьЗначение(б, ИмяКолонки);
			Если (Т.ПолучитьЗначение(а, ИмяКолонки) <> ЗначениеЯчейки) Тогда
				СтрокаУдовлетворяетУсловиям = 0;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		Если СтрокаУдовлетворяетУсловиям = 1 Тогда
			Если НачСтрока = 0 Тогда // начальная строка пока не найдена
				НачСтрока = а;
			КонецЕсли;
		Иначе
			Если НачСтрока > 0 Тогда // начальная строка уже была найдена
				КонСтрока = а - 1;
				Прервать;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Если НачСтрока = 0 Тогда // ни одной строки не найдено
		Т.УдалитьСтроки();
		Возврат Т;
	КонецЕсли;
	
	Если КонСтрока = 0 Тогда // последняя строка таблицы удовлетворяла условиям
		КонСтрока = Т.КоличествоСтрок();
	КонецЕсли;
	
	Результат = СоздатьОбъект("ТаблицаЗначений");
	Т.Выгрузить(Результат, НачСтрока, КонСтрока);
	Возврат Результат;
	
КонецФункции // ОтобратьСтрокиТаблицы()

//******************************************************************************
// ДобавитьСтрокуВТаблицу(Т, Опер, Сумма, ЕНВД)
//
// Параметры:
//  Т     - ТаблицаЗначений. Таблица, в которую следует добавить строку.
//  Опер  - Проводка. Проводка, по данным которой формируется строку таблицы.
//  Сумма - Число. Сумма начисления, заносимая в строку таблицы.
//  ЕНВД  - Число. Начисление относится к виду деятельности, облагаемому ЕНВД.
//
// Описание:
//  Процедура выбирает реквизиты операции и заносит их в таблицу начислений.
//
Процедура ДобавитьСтрокуВТаблицу(Т, Опер, Сумма, ЕНВД)
	
	Если Сумма = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если ПустоеЗначение(Опер.Дебет.Счет) = 1 Тогда
		ТекстСообщения = "Не выбран счет отнесения затрат для сотрудника " + Опер.Кредит.Сотрудники;
		глНеПроводить(Контекст, ТекстСообщения, Опер.Кредит.Сотрудники.ТекущийЭлемент());
		Возврат;
	КонецЕсли;
	
	Т.НоваяСтрока();
	Т.Сотрудник = Опер.Кредит.Сотрудники;
	Т.ВидНачисления = Опер.Кредит.ВидыНачисленийВыплат;
	Т.Счет = Опер.Дебет.Счет;
	Т.Субконто1 = Опер.Дебет.Субконто(1);
	Т.Субконто2 = Опер.Дебет.Субконто(2);
	Т.Субконто3 = Опер.Дебет.Субконто(3);
	Т.ЕНВД = ЕНВД;
	НомСтроки = Т.НомерСтроки;
	
	Если ПустоеЗначение(Т.ВидНачисления) = 0 Тогда
	    Т.ЕСН_ФБ = Т.ВидНачисления.ЕСН_ФБ;
		Т.ФСС = Т.ВидНачисления.ЕСН_ФСС;
		Т.ФОМС = Т.ВидНачисления.ЕСН_ФОМС;
		Т.ПФР = Т.ВидНачисления.ПФР;
		Т.ФСС_НС = Т.ВидНачисления.ФСС_НС;
		Т.СО = Т.ВидНачисления.СО;
		
	ИначеЕсли (Опер.Дебет.Счет <> СчетПоКоду("69.1")) и
			  (Опер.Дебет.Счет <> СчетПоКоду("69.11")) и
			  (Опер.Дебет.Счет.ПринадлежитГруппе(СчетПоКоду("84")) = 0) Тогда
        	
		Т.ПФР = 1;
		Т.ФСС_НС = 1;
		Т.СО = 1;
		
		НеПринимаемые = 0;
		
		Если (Опер.Дебет.Счет = СчетПоКоду("20"))
			  или (Опер.Дебет.Счет = СчетПоКоду("28")) Тогда
			Если Опер.Дебет.Субконто(2).ВидРасходовДляНалоговогоУчета = Перечисление.ГруппыВидыРасходов.НеПринимаемые Тогда
			    НеПринимаемые = 1;
			КонецЕсли;
		
		ИначеЕсли (Опер.Дебет.Счет = СчетПоКоду("25"))
		      или (Опер.Дебет.Счет = СчетПоКоду("26"))
			  или (Опер.Дебет.Счет = СчетПоКоду("29")) 
			  или (Опер.Дебет.Счет.ПринадлежитГруппе(СчетПоКоду("44")) = 1) Тогда
			Если Опер.Дебет.Субконто(1).ВидРасходовДляНалоговогоУчета = Перечисление.ГруппыВидыРасходов.НеПринимаемые Тогда
			    НеПринимаемые = 1;
			КонецЕсли;
			
		ИначеЕсли Опер.Дебет.Счет.ПринадлежитГруппе(СчетПоКоду("91")) = 1 Тогда
			Если Опер.Дебет.ПрочиеДоходыИРасходы.ВидПрочихДоходовИРасходов = Перечисление.ВидыПрочихДоходовИРасходов.НеПринимаемыеДляЦелейНалогообложения Тогда
			    НеПринимаемые = 1;
			КонецЕсли;
			
		ИначеЕсли Опер.Дебет.Счет.ПринадлежитГруппе(СчетПоКоду("99.1")) = 1 Тогда
			Если Опер.Дебет.ПрибылиИУбытки = Перечисление.ПрибылиИУбытки.НеПринимаемыеДляЦелейНалогообложения Тогда
			    НеПринимаемые = 1;
			КонецЕсли;
		КонецЕсли;
		
		Если НеПринимаемые = 0 Тогда
		    Т.ЕСН_ФБ = 1;
			Т.ФСС = 1;
			Т.ФОМС = 1;
		КонецЕсли;
	КонецЕсли;
	
    Если Т.Счет = СчетПоКоду("44.1.3") Тогда
        Если ЕНВД = 1 Тогда
			Т.Счет = СчетПоКоду("44.1.2");
			
		Иначе
			Т.Счет = СчетПоКоду("44.1.1");
		КонецЕсли;
    КонецЕсли;
	
	Для а = 1 по 3 Цикл
		НомСубконто = "Субконто" + а;
		Субконто = Т.ПолучитьЗначение(НомСтроки, НомСубконто);
		Если ТипЗначенияСтр(Субконто) = "Справочник" Тогда
			Если (Субконто.Вид() = "СтатьиЗатратНаПроизводство") или
				 (Субконто.Вид() = "СтатьиЗатратОбслуживающихПроизводств") или
				 (Субконто.Вид() = "СтатьиОбщепроизводственныхЗатрат") или
				 (Субконто.Вид() = "СтатьиОбщехозяйственныхЗатрат") или
				 (Субконто.Вид() = "СтатьиИздержекОбращения") или
				 (Субконто.Вид() = "СтатьиКоммерческихРасходов") или
				 (Субконто.Вид() = "СтатьиРасходовНаПродажу") Тогда
				
				Т.НомерСубконто = НомСубконто;
				Если Т.Сотрудник.СчетЗатрат.Получить(КонМесяца(ДатаДок)).ВидСубконто(а).Идентификатор() = Субконто.Вид() Тогда
					СтатьяОтчисленийНаСоцНужды = Т.Сотрудник.СтатьяОтчисленийНаСоцНужды.Получить(КонМесяца(ДатаДок));
					Если ПустоеЗначение(СтатьяОтчисленийНаСоцНужды) = 0 Тогда
						Т.УстановитьЗначение(НомСтроки, НомСубконто, СтатьяОтчисленийНаСоцНужды);    
					КонецЕсли;
					Т.СтатьяПрочихОтчислений = Т.Сотрудник.СтатьяПрочихОтчисленийНаСоцНужды.Получить(КонМесяца(ДатаДок));
				КонецЕсли;
				
				Если Опер.Документ.Вид() = "НачислениеЗП" Тогда
					Если Опер.Документ.ИспользоватьСчетДокумента = 1 Тогда
						СтатьяОтчисленийНаСоцНужды = Опер.Документ.СтатьяОтчисленийНаСоцНужды;
						Если ПустоеЗначение(СтатьяОтчисленийНаСоцНужды) = 0 Тогда
							Т.УстановитьЗначение(НомСтроки, НомСубконто, СтатьяОтчисленийНаСоцНужды);    
						КонецЕсли;
						Т.СтатьяПрочихОтчислений = Опер.Документ.СтатьяПрочихОтчисленийНаСоцНужды;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
		
	Если ПустоеЗначение(Т.НомерСубконто) = 0 Тогда
		
			Если ПустоеЗначение(Т.ПолучитьЗначение(НомСтроки, Т.НомерСубконто)) = 1 Тогда
				СтатьиЗатрат = СоздатьОбъект("Справочник."+Т.ПолучитьЗначение(НомСтроки, Т.НомерСубконто).Вид());
				Если ДатаГод(ДатаДок) < 2010 Тогда
					НаименованиеСтатьиЗатрат = "ЕСН";
				Иначе
					НаименованиеСтатьиЗатрат = "Страховые взносы";
				КонецЕсли;
				СтатьиЗатрат.НайтиПоНаименованию(НаименованиеСтатьиЗатрат, 0, 1);
				Если СтатьиЗатрат.ВидРасходовДляНалоговогоУчета <> Перечисление.ГруппыВидыРасходов.ЕСН Тогда
					СтатьиЗатрат.Новый();
					СтатьиЗатрат.Наименование = НаименованиеСтатьиЗатрат;
					СтатьиЗатрат.ВидРасходовДляНалоговогоУчета = Перечисление.ГруппыВидыРасходов.ЕСН;
					СтатьиЗатрат.Записать();
				КонецЕсли;			
			Т.УстановитьЗначение(НомСтроки, Т.НомерСубконто, СтатьиЗатрат.ТекущийЭлемент());
			
		КонецЕсли;
				
		Если ПустоеЗначение(Т.ПолучитьЗначение(НомСтроки, "СтатьяПрочихОтчислений")) = 1 Тогда
			СтатьиЗатрат = СоздатьОбъект("Справочник."+Т.ПолучитьЗначение(НомСтроки, Т.НомерСубконто).Вид());
			СтатьиЗатрат.НайтиПоНаименованию("Налоги и сборы", 0, 1);
			Если СтатьиЗатрат.ВидРасходовДляНалоговогоУчета <> Перечисление.ГруппыВидыРасходов.НалогиИСборы Тогда
			    СтатьиЗатрат.Новый();
				СтатьиЗатрат.Наименование = "Налоги и сборы";
				СтатьиЗатрат.ВидРасходовДляНалоговогоУчета = Перечисление.ГруппыВидыРасходов.НалогиИСборы;
				СтатьиЗатрат.Записать();
			КонецЕсли;
			Т.СтатьяПрочихОтчислений = СтатьиЗатрат.ТекущийЭлемент();
		КонецЕсли;
	КонецЕсли;
	
	ТекХарактерРаботы = Опер.Кредит.Сотрудники.ХарактерРаботы.Получить(Опер.ДатаОперации);
	Если ТекХарактерРаботы = Перечисление.ХарактерРаботы.ТрудовыеОтношенияПрекращены Тогда
	    ХарактерРаботы = СоздатьОбъект("Периодический");
		ХарактерРаботы.ИспользоватьОбъект("ХарактерРаботы", Опер.Кредит.Сотрудники);
		ХарактерРаботы.ОбратныйПорядок();
		ХарактерРаботы.ВыбратьЗначения(, Опер.ДатаОперации);
		Пока ХарактерРаботы.ПолучитьЗначение() = 1 Цикл
		    ТекХарактерРаботы = ХарактерРаботы.Значение;
			Если ТекХарактерРаботы <> Перечисление.ХарактерРаботы.ТрудовыеОтношенияПрекращены Тогда
			    Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Т.Сумма = Сумма;
		
КонецПроцедуры // ДобавитьСтрокуВТаблицу()

//******************************************************************************
// СчетаЗатратПриНачисленииЕСН(БухИт, Счет, Субконто1, Субконто2, Субконто3)
//
// Параметры:
//  БухИт      - Бухгалтерские итоги;
//  Счет       - Счет учета расчетов по страхованию;
//  Субконто   - Значение субконто (только справочники или перечисления).
//
// Возвращаемое значение:
//  Таблица значений;
//
// Описание:
//  Формирует таблицу счетов отнесения затрат по уплате страховых взносов в ПФР
// или единого социального налога.
//
Функция СчетаЗатратПриНачисленииЕСН(БухИт, Счет, Субконто1="", Субконто2="", Субконто3="")
	
	Перем Сотрудник;
	
	ТаблицаСчетов = СоздатьОбъект("ТаблицаЗначений");
	ТаблицаСчетов.НоваяКолонка("Сотрудник");
	ТаблицаСчетов.НоваяКолонка("Счет");
	ТаблицаСчетов.НоваяКолонка("Субконто1");
	ТаблицаСчетов.НоваяКолонка("Субконто2");
	ТаблицаСчетов.НоваяКолонка("Субконто3");
	ТаблицаСчетов.НоваяКолонка("Сумма");

	Если БухИт.ПолучитьСчет(, Счет) = 0 Тогда
		Возврат ТаблицаСчетов;
		
	ИначеЕсли ПустоеЗначение(Субконто1) = 0 Тогда
		Если Субконто1.Вид() = "Сотрудники" Тогда
		    Сотрудник = Субконто1;
		КонецЕсли;
		
		Если БухИт.ПолучитьСубконто(1,, Субконто1) = 0 Тогда
			Возврат ТаблицаСчетов;
		
		ИначеЕсли ПустоеЗначение(Субконто2) = 0 Тогда
			Если Субконто2.Вид() = "Сотрудники" Тогда
			    Сотрудник = Субконто2;
			КонецЕсли;
			
			Если БухИт.ПолучитьСубконто(2,, Субконто2) = 0 Тогда
				Возврат ТаблицаСчетов;
				
			ИначеЕсли ПустоеЗначение(Субконто3) = 0 Тогда
				Если Субконто3.Вид() = "Сотрудники" Тогда
				    Сотрудник = Субконто3;
				КонецЕсли;
				
				Если БухИт.ПолучитьСубконто(3,, Субконто3) = 0 Тогда
					Возврат ТаблицаСчетов;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	БухИт.ВыбратьКорСчета();
	Пока БухИт.ПолучитьКорСчет() = 1 Цикл
		Если БухИт.КорСчет.ПринадлежитГруппе(СчетПоКоду("69")) = 1 Тогда
		    Продолжить;
			
		ИначеЕсли БухИт.КорСчет = СчетПоКоду("51") Тогда
			Продолжить;
		КонецЕсли;
		
		ТаблицаСчетов.НоваяСтрока();
		ВводСтрокиЗакончен = 0;
		
		ТаблицаСчетов.Сотрудник = Сотрудник;
		ТаблицаСчетов.Счет = БухИт.КорСчет;
		
		БухИт.ВыбратьКорСубконто(1);
		Пока БухИт.ПолучитьКорСубконто(1) = 1 Цикл
			Если ВводСтрокиЗакончен = 1 Тогда
			    ТаблицаСчетов.НоваяСтрока();
				ВводСтрокиЗакончен = 0;
			КонецЕсли;
			
			ТаблицаСчетов.Сотрудник = Сотрудник;
			ТаблицаСчетов.Счет = БухИт.КорСчет;
			ТаблицаСчетов.Субконто1 = БухИт.КорСубконто(1);
			
			БухИт.ВыбратьКорСубконто(2);
			Пока БухИт.ПолучитьКорСубконто(2) = 1 Цикл
				Если ВводСтрокиЗакончен = 1 Тогда
				    ТаблицаСчетов.НоваяСтрока();
					ВводСтрокиЗакончен = 0;
				КонецЕсли;
				
				ТаблицаСчетов.Сотрудник = Сотрудник;
				ТаблицаСчетов.Счет = БухИт.КорСчет;
				ТаблицаСчетов.Субконто1 = БухИт.КорСубконто(1);
				ТаблицаСчетов.Субконто2 = БухИт.КорСубконто(2);
				
				БухИт.ВыбратьКорСубконто(3);
				Пока БухИт.ПолучитьКорСубконто(3) = 1 Цикл
					Если ВводСтрокиЗакончен = 1 Тогда
					    ТаблицаСчетов.НоваяСтрока();
						ВводСтрокиЗакончен = 0;
					КонецЕсли;
					
					ТаблицаСчетов.Сотрудник = Сотрудник;
					ТаблицаСчетов.Счет = БухИт.КорСчет;
					ТаблицаСчетов.Субконто1 = БухИт.КорСубконто(1);
					ТаблицаСчетов.Субконто2 = БухИт.КорСубконто(2);
					ТаблицаСчетов.Субконто3 = БухИт.КорСубконто(3);
					ТаблицаСчетов.Сумма = БухИт.КорКО();
					Если ТаблицаСчетов.Сумма < 0 Тогда
					    ТаблицаСчетов.УдалитьСтроку();
					КонецЕсли;
					ВводСтрокиЗакончен = 1;
				КонецЦикла;
				
				Если ВводСтрокиЗакончен = 0 Тогда
				    ТаблицаСчетов.Сумма = БухИт.КорКО();
					ВводСтрокиЗакончен = 1;
				КонецЕсли;
			КонецЦикла;
			
			Если ВводСтрокиЗакончен = 0 Тогда
			    ТаблицаСчетов.Сумма = БухИт.КорКО();
				ВводСтрокиЗакончен = 1;
			КонецЕсли;
		КонецЦикла;
		
		Если ВводСтрокиЗакончен = 0 Тогда
		    ТаблицаСчетов.Сумма = БухИт.КорКО();
			ВводСтрокиЗакончен = 1;
		КонецЕсли;
	КонецЦикла;
	
	НомСтроки = 1;
	Пока НомСтроки <= ТаблицаСчетов.КоличествоСтрок() Цикл
		Если ТаблицаСчетов.ПолучитьЗначение(НомСтроки, "Сумма") = 0 Тогда
			ТаблицаСчетов.УдалитьСтроку(НомСтроки);
			
		Иначе
			НомСтроки = НомСтроки + 1;
		КонецЕсли;
	КонецЦикла;
	ТаблицаСчетов.Свернуть("Сотрудник,Счет,Субконто1,Субконто2,Субконто3", "Сумма");
	
	Возврат ТаблицаСчетов;
				
КонецФункции // СчетаЗатратПриНачисленииЕСН()

//******************************************************************************
// ПроверитьБазуРаспределенияЕСН(Сотрудник, СуммаНалога, ТабНачислений, КолНачислений, ЭтоЕСН)
//
// Параметры:
//  Сотрудник - Справочник.Сотрудники.
//  СуммаНалога - Число. Сумма налога, которую следует принять к учету в текущем месяце.
//  ТабНачислений - ТаблицаЗначений. Таблица начислений, облагаемых данным налогом.
//  КолНачислений - Число. Количество начислений нужно для ФСС от НС, так
//                         как таблица для этого налога не очищается при выборке 
//                         очередного сотрудника.
//  ЭтоЕСН - Число. 1 - если это ЕСН. 
//
// Описание:
//  Добавляет в таблицу счетов затрат (таблицу начислений) счет затрат из
// справочника "Сотрудники". Счет затрат добавляется только в том случае, если 
// сумма налога не нулевая, а в таблице начислений нет ни одной строки.
//
Процедура ПроверитьБазуРаспределенияЕСН(Сотрудник, СуммаНалога, ТабНачислений, КолНачислений, ЭтоЕСН)
	
	Если СтатусВозврата() = 0 Тогда
	    Возврат;
	КонецЕсли;
	                                                                         
	Если (СуммаНалога <> 0) и (КолНачислений = 0) Тогда
		
		Если (ПустоеЗначение(Сотрудник.СчетЗатрат.Получить(ДатаКон)) = 1)
		 или (Сотрудник.СчетЗатрат.Получить(ДатаКон).Забалансовый = 1) Тогда
		    ТекстСообщения = "В форме сотрудника "+ Сотрудник + " на закладке ""Начисление з/пл"" не указан или указан неверно счет отнесения затрат по начисленной з/пл";
			глНеПроводить(Контекст, ТекстСообщения, Сотрудник.ТекущийЭлемент());
			Возврат;
		КонецЕсли;
		
	    ТабНачислений.НоваяСтрока();
		ТабНачислений.Счет = Сотрудник.СчетЗатрат.Получить(ДатаКон);
		ТабНачислений.Субконто1 = Сотрудник.Субконто1.Получить(ДатаКон);
		ТабНачислений.Субконто2 = Сотрудник.Субконто2.Получить(ДатаКон);;
		ТабНачислений.Субконто3 = Сотрудник.Субконто3.Получить(ДатаКон);
		ТабНачислений.Сумма = СуммаНалога;
		
		НомерСубконто = МожноВыбиратьСтатьюОтчислений(ТабНачислений.Счет);
		Если НомерСубконто > 0 Тогда
			Если ЭтоЕСН = 1 Тогда
			    СтатьяЗатрат = Сотрудник.СтатьяОтчисленийНаСоцНужды.Получить(ДатаКон);
				
			Иначе
				СтатьяЗатрат = Сотрудник.СтатьяПрочихОтчисленийНаСоцНужды.Получить(ДатаКон);
			КонецЕсли;
			ТабНачислений.УстановитьЗначение(ТабНачислений.НомерСтроки, "Субконто" + НомерСубконто, СтатьяЗатрат);
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры // ПроверитьБазуРаспределенияЕСН()

//******************************************************************************
// ПолучитьСписокКорректируемыхСубконто()
//
// Параметры:
//  Нет.
//
// Возвращаемое значение:
//  Здесь описывается возвращаемое значение.
//
// Вызывается из формул элементов диалога:
//  Нет.
//
// Описание:
//  Анализирует переданный в параметре счет и составляет для него список
//  номеров субконто, проводки по которым должны быть скорректированы.
//
Функция ПолучитьСписокКорректируемыхСубконто(Счет)
	    
	Список = СоздатьОбъект("СписокЗначений");
	
	Если ПустоеЗначение(Счет) = 0  Тогда
		КоличествоСубконто = Счет.КоличествоСубконто();
		Для НомерСубконто = 1 По КоличествоСубконто Цикл
			Если (ПустоеЗначение(Счет.ВидСубконто(НомерСубконто)) = 0)
			   и (Счет.УчетПоСумме(НомерСубконто) = 1) Тогда        
				Список.ДобавитьЗначение(НомерСубконто);
			КонецЕсли;	
		КонецЦикла;
	КонецЕсли;
	
	Возврат Список;
	
КонецФункции // ПолучитьСписокКорректируемыхСубконто()

//******************************************************************************
// РасчетПостоянныхРазницДляСпецодеждыСпецоснастки(БухИт, СписокПараметров);
//
// Параметры:
//  Нет.
//
// Вызывается из формул элементов диалога:
//  Нет.
//
// Описание:
//  Здесь описывается процедура.
//
Процедура РасчетПостоянныхРазницДляСпецодеждыСпецоснастки(БухИт, СписокПараметров)
	                  
	СуммаНПР = НПР.СКД("НПР.10.2",,, БухИт.Субконто(1), БухИт.Субконто(2));
	СтоимостьМатериалов = БухИт.СНД("С") + БухИт.ДО("С");
	
	Коэффициент = ?(СтоимостьМатериалов = 0, 0, СуммаНПР / СтоимостьМатериалов);
	
	СписокПараметров.Установить("Всего стоимость" , СтоимостьМатериалов);
	СписокПараметров.Установить("Учтена стоимость", 0);
	СписокПараметров.Установить("Коэффициент", Коэффициент);
	
КонецПроцедуры // РасчетПостоянныхРазницДляСпецодеждыСпецоснастки()

//******************************************************************************
// СформироватьКорректирующиеПроводкиПоНПР()
//
// Параметры:
//  Нет.
//
// Вызывается из формул элементов диалога:
//  Нет.
//
// Описание:
//  Здесь описывается процедура.
//
Процедура СформироватьКорректирующиеПроводкиПоНПР(БухИт, СписокПараметров)
	
	СписанаСтоимость = БухИт.КорКО();
	УчтеннаяСтоимость = СписокПараметров.Получить("Учтена стоимость") + СписанаСтоимость;
	ДолжноБытьСписаноВсего = Окр(УчтеннаяСтоимость * СписокПараметров.Получить("Коэффициент"), 2);
	СписатьПостоянныхРазниц = ДолжнобытьСписаноВсего - Окр((УчтеннаяСтоимость - СписанаСтоимость) * СписокПараметров.Получить("Коэффициент"), 2);
	СписокПараметров.Установить("Учтена стоимость", УчтеннаяСтоимость);
	
	Если СписатьПостоянныхРазниц <> 0 Тогда
		
		СчетНПР = глПолучитьСчетДебетаНПР(БухИт.КорСчет, БухИт.КорСубконто(1));
	
		Операция.НоваяПроводка(); Операция.РазделительУчета = ЮрЛицо;
		Операция.НомерЖурнала = "ПР";
		Операция.СодержаниеПроводки = "Списание постоянных разниц";
		Если ПустоеЗначение(СчетНПР) = 0 Тогда
			Операция.Дебет.Счет = СчетНПР;
			Для т = 1 По БухИт.КорСчет.КоличествоСубконто() Цикл
				Операция.Дебет.Субконто(БухИт.КорСчет.ВидСубконто(т), БухИт.КорСубконто(т));
			КонецЦикла;
		КонецЕсли;
		Операция.Кредит.Счет = СчетПоКоду("НПР.10.2");
		Операция.Кредит.Субконто(БухИт.Счет.ВидСубконто(1), БухИт.Субконто(1));
		Операция.Кредит.Субконто(БухИт.Счет.ВидСубконто(2), БухИт.Субконто(2));
		
		Операция.Сумма = СписатьПостоянныхРазниц;
	КонецЕсли;
	
КонецПроцедуры // СформироватьКорректирующиеПроводкиПоНПР()

//******************************************************************************
// КорректировкаСчета10_11()
//
// Параметры:
//  Нет.
//
// Вызывается из формул элементов диалога:
//  Нет.
//
// Описание:
//  Здесь описывается процедура.
//
Процедура КорректировкаСчета10_11(БухИт)
	                
	// Если выполняется корректировка стоимости материалов
	// до средневзвешенной, то может быть скорректирована (при корректировке счета 10.10)
	// стоимость введенных в эксплуатацию материалов, стоимость
	// которых погашается в момент ввода в эксплуатацию. По этому необходимо
	// погасить и корректировку.
	РазницаСумма = БухИт.ДО() - БухИт.КО();
	Если РазницаСумма <> 0 Тогда
		НазначениеИспользования = БухИт.Субконто(ВидыСубконто.НазначенияИспользования);
		Если НазначениеИспользования.СпособПогашенияСтоимости 
		   = Перечисление.СпособПогашенияСтоимости.ПогашатьСтоимостьВМоментПередачиВПроизводство Тогда
		   	
		   	Если ПустоеЗначение(НазначениеИспользования.СчетЗатрат) = 0 Тогда
			   	Операция.НоваяПроводка(); Операция.РазделительУчета = ЮрЛицо;
				Операция.НомерЖурнала = "ФР";
				Операция.СодержаниеПроводки = "Корректир. средней ст-ти";
				Операция.ПервичныйДокумент  = глПредставлениеПервичногоДокумента(Контекст);
				Операция.Дебет.Счет = НазначениеИспользования.СчетЗатрат;
				Операция.Дебет.Субконто(1, НазначениеИспользования.Субконто1);
				Операция.Дебет.Субконто(2, НазначениеИспользования.Субконто2);
				Операция.Дебет.Субконто(3, НазначениеИспользования.Субконто3);
				Операция.Кредит.Счет = БухИт.Счет;
				Операция.Кредит.Субконто(1, БухИт.Субконто(1));
				Операция.Кредит.Субконто(2, БухИт.Субконто(2));
				Операция.Кредит.Субконто(3, БухИт.Субконто(3));
				Операция.Сумма = РазницаСумма;
				
				// Формирование печатной формы
				Если ФормироватьПечатнуюФорму = 1 Тогда
					ТаблицаРасшифровкаРегламентнойОперации.НоваяСтрока();
					ТаблицаРасшифровкаРегламентнойОперации.МПЗ = БухИт.Субконто(ВидыСубконто.Материалы);
					ТаблицаРасшифровкаРегламентнойОперации.НазначениеИспользования = НазначениеИспользования;
					ТаблицаРасшифровкаРегламентнойОперации.Счет = НазначениеИспользования.СчетЗатрат;
					ТаблицаРасшифровкаРегламентнойОперации.Субконто1 = НазначениеИспользования.Субконто1;
					ТаблицаРасшифровкаРегламентнойОперации.Субконто2 = НазначениеИспользования.Субконто2;
					ТаблицаРасшифровкаРегламентнойОперации.Субконто3 = НазначениеИспользования.Субконто3;
					ТаблицаРасшифровкаРегламентнойОперации.Стоимость = БухИт.ДО();
					ТаблицаРасшифровкаРегламентнойОперации.СписаннаяСтоиомсть = БухИт.КО();
					ТаблицаРасшифровкаРегламентнойОперации.СуммаКорректировки = РазницаСумма;
					
					Расшифровка = СоздатьОбъект("СписокЗначений");
					ОсновнаяРасшифровкаОСВ.Выгрузить(Расшифровка);
					Расшифровка.Установить("Счет", БухИт.Счет);
					Расшифровка.Установить("ВидСубконто1", БухИт.Счет.ВидСубконто(1));
					Расшифровка.Установить("Субконто1", БухИт.Субконто(1));
					Расшифровка.Установить("ОтборСубконто1", 1);
					Расшифровка.Установить("ВидСубконто2", БухИт.Счет.ВидСубконто(2));
					Расшифровка.Установить("Субконто2", БухИт.Субконто(2));	
					Расшифровка.Установить("ОтборСубконто2", 2);
					Расшифровка.Установить("ВидСубконто3", БухИт.Счет.ВидСубконто(3));
					Расшифровка.Установить("Субконто3", БухИт.Субконто(3));	
					Расшифровка.Установить("ОтборСубконто3", 2);
					
					ТаблицаРасшифровкаРегламентнойОперации.РасшифровкаОборотноСальдоваяВедомостьПоСчету = Расшифровка;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;   	
	КонецЕсли;
	
КонецПроцедуры // КорректировкаСчета10_11()

//******************************************************************************
// КорректировкаСчетаНПР10_1()
//
// Параметры:
//  Нет.
//
// Вызывается из формул элементов диалога:
//  Нет.
//
// Описание:
//  Здесь описывается процедура.
//
Процедура КорректировкаСчетаНПР10_1(БухИт, СписокПараметров)
	
	// Постоянных разниц нет.
	Если СписокПараметров.Получить("Коэффициент") = 0 Тогда
	    Возврат;
	КонецЕсли;
	
	БухИт.ВыбратьКорСчета(, 2);
	Пока БухИт.ПолучитьКорСчет() = 1 Цикл
	
		КоррСчет = БухИт.КорСчет;
		СписокКорректируемыхСубконто = ПолучитьСписокКорректируемыхСубконто(КоррСчет);
		КоличествоСубконто = СписокКорректируемыхСубконто.РазмерСписка();
		Если КоличествоСубконто = 0 Тогда
			СформироватьКорректирующиеПроводкиПоНПР(БухИт, СписокПараметров);
			
		Иначе
			Стр = "";
			НомерСубконто1 = СписокКорректируемыхСубконто.ПолучитьЗначение(1, Стр);
			БухИт.ВыбратьКорСубконто(НомерСубконто1);
			Пока БухИт.ПолучитьКорСубконто(НомерСубконто1) = 1 Цикл
				Если КоличествоСубконто = 1 Тогда
					СформироватьКорректирующиеПроводкиПоНПР(БухИт, СписокПараметров);
					
				Иначе
					НомерСубконто2 = СписокКорректируемыхСубконто.ПолучитьЗначение(2, Стр);
					БухИт.ВыбратьКорСубконто(НомерСубконто2);
					Пока БухИт.ПолучитьКорСубконто(НомерСубконто2) = 1 Цикл
						
						Если КоличествоСубконто = 2 Тогда
							СформироватьКорректирующиеПроводкиПоНПР(БухИт, СписокПараметров);
							
						Иначе
							НомерСубконто3 = СписокКорректируемыхСубконто.ПолучитьЗначение(3, Стр);
							БухИт.ВыбратьКорСубконто(НомерСубконто3);
							Пока БухИт.ПолучитьКорСубконто(НомерСубконто3) = 1 Цикл
								СформироватьКорректирующиеПроводкиПоНПР(БухИт, СписокПараметров);
							КонецЦикла;
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры // КорректировкаСчетаНПР10_1()

//******************************************************************************
// РасчетПостоянныхРазниц(СписокПараметров);
//
// Параметры:
//  Нет.
//
// Вызывается из формул элементов диалога:
//  Нет.
//
// Описание:
//  Здесь описывается процедура.
//
Процедура РасчетПостоянныхРазниц(БухИт, СписокПараметров)
	
	Если БухИт.Счет.Код = "45" Тогда
		СуммаНПР = НПР.СКД("НПР." + БухИт.Счет.Родитель(1),,, БухИт.Субконто(1), БухИт.Субконто(2), БухИт.Субконто(3));
		
	ИначеЕсли БухИт.Счет.Родитель(1) = СчетПоКоду("10") Тогда
		СуммаНПР = НПР.СКД("НПР.10.1",,, БухИт.Субконто(1));
		
	Иначе
		СуммаНПР = НПР.СКД("НПР." + БухИт.Счет.Родитель(1),,, БухИт.Субконто(1));
	КонецЕсли;
	
	
	ОстатокКоличество = БухИт.СНД("К");
	ПоступилоКоличество = 0;
	
	// При расчете учитываем сторнирующие проводки по кредиту счета учета объекта
	БухИт.ВыбратьПериоды(, 2);
	Пока БухИт.ПолучитьПериод() = 1 Цикл
		БухИт.ВыбратьКорСчета();
		Пока БухИт.ПолучитьКорСчет() = 1 Цикл
			Если БухИт.Счет <> БухИт.КорСчет Тогда
				Если БухИт.КорКО("К") < 0 Тогда // возврат отгрузки
					ПоступилоКоличество = ПоступилоКоличество + (-БухИт.КорКО("К"));
					
				ИначеЕсли БухИт.Операция.Дебет.Счет.Код = "76.2" Тогда // возврат поставщику
					ПоступилоКоличество = ПоступилоКоличество - БухИт.КорКО("К");
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	БухИт.ВыбратьПериоды(, 1);
	Пока БухИт.ПолучитьПериод() = 1 Цикл
		БухИт.ВыбратьКорСчета();
		Пока БухИт.ПолучитьКорСчет() = 1 Цикл
			Если БухИт.Счет <> БухИт.КорСчет Тогда
				Если БухИт.КорДО("К") > 0 Тогда // поступление
					ПоступилоКоличество = ПоступилоКоличество + БухИт.КорДО("К"); 
					
				Иначе // возврат поступления
					ПоступилоКоличество = ПоступилоКоличество - (-БухИт.КорДО("К"));
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
    
	Если ОстатокКоличество + ПоступилоКоличество = 0 Тогда
	    СредняяСтоимость = 0;
		
	Иначе
		СредняяСтоимость = СуммаНПР / (ОстатокКоличество + ПоступилоКоличество);
	КонецЕсли;
	
	СписокПараметров.Установить("Всего количество ПР" , ОстатокКоличество + ПоступилоКоличество);
	СписокПараметров.Установить("Учтено количество ПР", 0);
	СписокПараметров.Установить("Средняя стоимость ПР", СредняяСтоимость);
	
КонецПроцедуры // РасчетПостоянныхРазниц()

//******************************************************************************
// КорректировкаТорговойНаценки()
//
// Параметры:
//  Нет.
//
// Вызывается из формул элементов диалога:
//  Нет.
//
// Описание:
//  Здесь описывается процедура.
//
Процедура КорректировкаТорговойНаценки(Номенклатура, МестоХранения, СуммаКорректировки)
	
	Если СуммаКорректировки <> 0 Тогда
		Операция.НоваяПроводка(); Операция.РазделительУчета = ЮрЛицо;
		Операция.НомерЖурнала = "ФР";
		Операция.СодержаниеПроводки = "Корректировка наценки";
		Операция.ПервичныйДокумент  = глПредставлениеПервичногоДокумента(Контекст);
		Операция.Дебет.Счет = СчетПоКоду("41.2");
		Операция.Дебет.Номенклатура  = Номенклатура;
		Операция.Дебет.МестаХранения = МестоХранения;
		Операция.Кредит.Счет = СчетПокоду("42");
		Операция.Кредит.МестаХранения = МестоХранения;
		Операция.Сумма = - СуммаКорректировки;
	КонецЕсли;
	
КонецПроцедуры // КорректировкаТорговойНаценки()

//******************************************************************************
// КооректировкаСчетаМЦ()
//
// Параметры:
//  Нет.
//
// Вызывается из формул элементов диалога:
//  Нет.
//
// Описание:
//  Здесь описывается процедура.
//
Процедура КооректировкаСчетаМЦ(БухИт, Сумма)
	
	Если БухИт.КорСчет.Код = "10.11.1" Тогда // спецодежда
		СчМЦ = СчетПоКоду("МЦ.02");
	Иначе
		СчМЦ = СчетПоКоду("МЦ.03");
	КонецЕсли;
	
	Операция.НоваяПроводка(); Операция.РазделительУчета = ЮрЛицо;
	Операция.НомерЖурнала = "ФР";
	Операция.СодержаниеПроводки = "Корректировка стоимости материалов";
	Операция.ПервичныйДокумент  = глПредставлениеПервичногоДокумента(Контекст);
	Операция.Дебет.Счет = СчМЦ;
	Операция.Дебет.Субконто(1, БухИт.КорСубконто(1));
	Операция.Дебет.Субконто(2, БухИт.КорСубконто(2));
	Операция.Дебет.Субконто(3, БухИт.КорСубконто(3));
	Операция.Сумма = Сумма;
	
КонецПроцедуры // КооректировкаСчетаМЦ()

//******************************************************************************
// СформироватьКорректирующиеПроводки(БухИт, СписокПараметров)
//
// Параметры:
//  БухИт - бухгалтерские итоги.
//  СписокПараметров - список значений - список с данными для расчета
//   средневзвешенная стоимость списания МПЗ и постоянным разницам, относящимся к списанным МПЗ
//  КорректироватьВозврат - 1 - необходимо откорректировать операцию возврата товара отгруженного на склад
//
// Вызывается из формул элементов диалога:
//  Нет.
//
// Описание:
//  Формирует корректирующие проводки и сохраняет реквизиты проводки, если корректировка не нужна.
//
Процедура СформироватьКорректирующиеПроводки(БухИт, СписокПараметров, КорректироватьВозврат, Продукция)
	
	Если КорректироватьВозврат = 0 Тогда // корректировка не возврата
		СписаноКоличество = БухИт.КорКО("К");
		СписаноСумма = БухИт.КорКО("С");
		
		Если (СписаноКоличество<>0) или (СписаноСумма<>0)  Тогда
			
			//  При корректировке необходимо не учитывать сторнирующие записи
			БухИт.ВыбратьПериоды(, 2);
			Пока БухИт.ПолучитьПериод() = 1 Цикл
				Если БухИт.КО() < 0 Тогда
					СписаноСумма = СписаноСумма - БухИт.КО("С");
					СписаноКоличество = СписаноКоличество - БухИт.КО("К");
				КонецЕсли;
			КонецЦикла;
			
			
			УчтенноеКоличество = СписокПараметров.Получить("Учтено количество") + СписаноКоличество;
			ДолжноБытьСписаноВсего = Окр(УчтенноеКоличество * СписокПараметров.Получить("Средняя стоимость"), 2);
			ДолжноБытьСписано      = ДолжнобытьСписаноВсего - Окр((УчтенноеКоличество - СписаноКоличество) * СписокПараметров.Получить("Средняя стоимость"), 2);
			СписокПараметров.Установить("Учтено количество", УчтенноеКоличество);
			
			Если (БухИт.Счет.ПринадлежитГруппе(СчетПокоду("10")) = 1)
			и (Константа.МетодРасчетаСебестоимостиМатериалов.Получить(ДатаДок) = Перечисление.МетодыРасчетаСебестоимости.ПоСреднему) Тогда
				
			//ИначеЕсли (БухИт.Счет.Код = "10.7") Тогда // движение из переработки корректировать не надо
				
			ИначеЕсли ((БухИт.Счет.ПринадлежитГруппе(СчетПокоду("41")) = 1) или (БухИт.Счет.Код = "45"))
			и (Продукция <> 1) // не продукция
			и (Константа.МетодРасчетаСебестоимостиТоваров.Получить(ДатаДок) = Перечисление.МетодыРасчетаСебестоимости.ПоСреднему) Тогда
			Иначе
				
				СуммаКорректировки = ДолжноБытьСписано - СписаноСумма;
				
				Если СуммаКорректировки <> 0 Тогда
					
					Если БухИт.КорСчет = СчетПоКоду("41.2") Тогда
						КорректировкаТорговойНаценки(БухИт.КорСубконто(1), БухИт.КорСубконто(2), СуммаКорректировки);
					КонецЕсли;
					
					Операция.НоваяПроводка(); Операция.РазделительУчета = ЮрЛицо;
					Операция.НомерЖурнала = "ФР";
					Операция.СодержаниеПроводки = "Корректир. средней ст-ти";
					Операция.ПервичныйДокумент  = глПредставлениеПервичногоДокумента(Контекст);
					Операция.Дебет.Счет = БухИт.КорСчет;
					Операция.Дебет.Субконто(1, БухИт.КорСубконто(1));
					Операция.Дебет.Субконто(2, БухИт.КорСубконто(2));
					Операция.Дебет.Субконто(3, БухИт.КорСубконто(3));
					Операция.Кредит.Счет = БухИт.Счет;
					Операция.Кредит.Субконто(1, БухИт.Субконто(1));
					Если БухИт.Счет = СчетПоКоду("41.2") Тогда
						Операция.Кредит.Субконто(2, БухИт.Субконто(2));
						
					ИначеЕсли (БухИт.Счет = СчетПоКоду("45"))
					или (БухИт.Счет = СчетПоКоду("10.7")) Тогда
						Операция.Кредит.Субконто(2, БухИт.Субконто(2));
						Операция.Кредит.Субконто(3, БухИт.Субконто(3));
					КонецЕсли;
					Операция.Сумма = СуммаКорректировки;
					
					// Если корректировка в дебет счета 10.11, то необходимо скорректировать
					// первоначальную стоимость на счете МЦ.
					Если (БухИт.КорСчет.Код = "10.11.1") 
					или (БухИт.КорСчет.Код = "10.11.2") Тогда
						КооректировкаСчетаМЦ(БухИт, СуммаКорректировки);
					КонецЕсли;
				КонецЕсли;
				
				// Формирование печатной формы
				Если ФормироватьПечатнуюФорму = 1 Тогда
					ТаблицаРасшифровкаРегламентнойОперации.ФактическиСписаноСумма      = ТаблицаРасшифровкаРегламентнойОперации.ФактическиСписаноСумма + СписаноСумма;
					ТаблицаРасшифровкаРегламентнойОперации.ФактическиСписаноКоличество = ТаблицаРасшифровкаРегламентнойОперации.ФактическиСписаноКоличество + СписаноКоличество;
					ТаблицаРасшифровкаРегламентнойОперации.РасчетнаяСуммаСписания      = ТаблицаРасшифровкаРегламентнойОперации.РасчетнаяСуммаСписания + ДолжноБытьСписано;
					ТаблицаРасшифровкаРегламентнойОперации.СуммаКорректировки          = ТаблицаРасшифровкаРегламентнойОперации.СуммаКорректировки + СуммаКорректировки;
					
					Если БухИт.Счет.Код <> "45" Тогда
						ТаблицаКорректировкиСписания = ТаблицаРасшифровкаРегламентнойОперации.РасшифровкаСуммаКорректировки.Получить("Таблица данных");
						ТаблицаКорректировкиСписания.НоваяСтрока();
						ТаблицаКорректировкиСписания.Счет = БухИт.КорСчет;
						ТаблицаКорректировкиСписания.Субконто1 = БухИт.КорСубконто(1);
						ТаблицаКорректировкиСписания.Субконто2 = БухИт.КорСубконто(2);
						ТаблицаКорректировкиСписания.Субконто3 = БухИт.КорСубконто(3);
						ТаблицаКорректировкиСписания.ФактическиСписаноСумма = СписаноСумма;
						ТаблицаКорректировкиСписания.ФактическиСписаноКоличество = СписаноКоличество;
						ТаблицаКорректировкиСписания.СредневзвешеннаяСтоимость = ТаблицаРасшифровкаРегламентнойОперации.СредневзвешеннаяСтоимость;
						ТаблицаКорректировкиСписания.СуммаСписания = ДолжноБытьСписано;
						ТаблицаКорректировкиСписания.СуммаКорректировки = СуммаКорректировки;
						
						// формирование расшифровки
						Расшифровка = СоздатьОбъект("СписокЗначений");
						ОсновнаяРасшифровкаОПП.Выгрузить(Расшифровка);
						
						Расшифровка.Установить("ДтКт", 2);
						
						Расшифровка.Установить("Счет", БухИт.Счет);
						Расшифровка.Установить("ВидСубконто1", БухИт.Счет.ВидСубконто(1));
						Расшифровка.Установить("Субконто1",    БухИт.Субконто(1));
						Если БухИт.Счет = СчетПоКоду("41.2") Тогда
							Расшифровка.Установить("ВидСубконто2", БухИт.Счет.ВидСубконто(2));
							Расшифровка.Установить("Субконто2",    БухИт.Субконто(2));
						КонецЕсли;
						
						Расшифровка.Установить("КорСчет", БухИт.КорСчет);
						Расшифровка.Установить("КорВидСубконто1", БухИт.КорСчет.ВидСубконто(1));
						Расшифровка.Установить("КорСубконто1",    БухИт.КорСубконто(1));
						Расшифровка.Установить("КорВидСубконто2", БухИт.КорСчет.ВидСубконто(2));
						Расшифровка.Установить("КорСубконто2",    БухИт.КорСубконто(2));
						Расшифровка.Установить("КорВидСубконто3", БухИт.КорСчет.ВидСубконто(3));
						Расшифровка.Установить("КорСубконто3",    БухИт.КорСубконто(3));
						ТаблицаКорректировкиСписания.РасшифровкаОтчетПоПроводкам = Расшифровка;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
			// Отразить постоянные разницы
			Если ВыполнятьДвиженияПоСчетуНПР = Да Тогда
				
				// Движение постоянных разницы не отражаем при перемещении
				// внутри счета (по субсчетам) за исключением ввода в эксплуатацию
				// спецодежды (спецоснастки), которое отражается проводкой Дт 10.11 Кт 10.10.
				// При передаче материала из переработки, необходимо так же
				// произвести движение постоянных разниц.
				Если (БухИт.Счет.Родитель(1) <> БухИт.КорСчет.Родитель(1)) 
				или (БухИт.КорСчет.ПринадлежитГруппе(СчетПоКоду("10.11")) = 1)
				или ((БухИт.Счет.Код = "10.7") и (БухИт.Субконто(1) <> БухИт.КорСубконто(1))) Тогда
					
					УчтенноеКоличество = СписокПараметров.Получить("Учтено количество ПР") + СписаноКоличество;
					ДолжноБытьСписаноВсего = Окр(УчтенноеКоличество * СписокПараметров.Получить("Средняя стоимость ПР"), 2);
					СписатьПостоянныхРазниц = ДолжнобытьСписаноВсего - Окр((УчтенноеКоличество - СписаноКоличество) * СписокПараметров.Получить("Средняя стоимость ПР"), 2);
					СписокПараметров.Установить("Учтено количество ПР", УчтенноеКоличество);
					
					Если СписатьПостоянныхРазниц <> 0 Тогда
						
						СчетНПР = глПолучитьСчетДебетаНПР(БухИт.КорСчет, БухИт.КорСубконто(1));
						
						Операция.НоваяПроводка(); Операция.РазделительУчета = ЮрЛицо;
						Операция.НомерЖурнала = "ПР";
						Операция.СодержаниеПроводки = "Списание МПЗ";
						Если ПустоеЗначение(СчетНПР) = 0 Тогда
							Операция.Дебет.Счет = СчетНПР;
							Для т = 1 По БухИт.КорСчет.КоличествоСубконто() Цикл
								Операция.Дебет.Субконто(БухИт.КорСчет.ВидСубконто(т), БухИт.КорСубконто(т));
							КонецЦикла;
						КонецЕсли;
						
						Если БухИт.Счет.Родитель(1) = СчетПоКоду("10") Тогда
							Операция.Кредит.Счет = СчетПоКоду("НПР.10.1");
						Иначе
							Операция.Кредит.Счет = СчетПоКоду("НПР."+ БухИт.Счет.Родитель(1).Код);
						КонецЕсли;
						
						Операция.Кредит.Субконто(БухИт.Счет.ВидСубконто(1), БухИт.Субконто(1));
						Если БухИт.Счет = СчетПоКоду("45") Тогда
							Операция.Кредит.Субконто(БухИт.Счет.ВидСубконто(2), БухИт.Субконто(2));
							Операция.Кредит.Субконто(БухИт.Счет.ВидСубконто(3), БухИт.Субконто(3));
						КонецЕсли;
						
						Операция.Сумма = СписатьПостоянныхРазниц;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли; 
		КонецЕсли;
		
	Иначе // корректировать возврат отгруженных товаров
		
		СписаноСумма = 0;
		СписаноКоличество = 0;
		//  При корректировке необходимо не учитывать сторнирующие записи
		БухИт.ВыбратьПериоды(, 1);
		Пока БухИт.ПолучитьПериод() = 1 Цикл
		    Если БухИт.ДО("К") < 0 Тогда
				СписаноСумма = СписаноСумма - БухИт.ДО("С");
				СписаноКоличество = СписаноКоличество - БухИт.ДО("К");
			КонецЕсли;
		КонецЦикла;
		
		// Отразить постоянные разницы
		Если ВыполнятьДвиженияПоСчетуНПР = Да Тогда
			
		    УчтенноеКоличество = СписокПараметров.Получить("Учтено количество ПР") + СписаноКоличество;
			ДолжноБытьСписаноВсего = Окр(УчтенноеКоличество * СписокПараметров.Получить("Средняя стоимость ПР"), 2);
			СписатьПостоянныхРазниц = ДолжнобытьСписаноВсего - Окр((УчтенноеКоличество - СписаноКоличество) * СписокПараметров.Получить("Средняя стоимость ПР"), 2);
			СписокПараметров.Установить("Учтено количество ПР", УчтенноеКоличество);
			
			Если СписатьПостоянныхРазниц <> 0 Тогда
				
				СчетНПР = глПолучитьСчетДебетаНПР(БухИт.КорСчет, БухИт.КорСубконто(1));
			
				Операция.НоваяПроводка(); Операция.РазделительУчета = ЮрЛицо;
				Операция.НомерЖурнала = "ПР";
				Операция.СодержаниеПроводки = "Списание МПЗ";
				Если ПустоеЗначение(СчетНПР) = 0 Тогда
					Операция.Кредит.Счет = СчетНПР;
					Для т = 1 По БухИт.КорСчет.КоличествоСубконто() Цикл
						Операция.Кредит.Субконто(БухИт.КорСчет.ВидСубконто(т), БухИт.КорСубконто(т));
					КонецЦикла;
				КонецЕсли;
				Операция.Дебет.Счет = СчетПоКоду("НПР."+ БухИт.Счет.Родитель(1).Код);
				Операция.Дебет.Субконто(БухИт.Счет.ВидСубконто(1), БухИт.Субконто(1));
				Операция.Дебет.Субконто(БухИт.Счет.ВидСубконто(2), БухИт.Субконто(2));
				Операция.Дебет.Субконто(БухИт.Счет.ВидСубконто(3), БухИт.Субконто(3));
				Операция.Сумма = -СписатьПостоянныхРазниц;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // СформироватьКорректирующиеПроводки()

//******************************************************************************
// РассчитатьСреднююСтоимостьОбъекта(БухИт, УчетПоПродажнымЦенам, СписокПараметров)
//
// Параметры:
//  Нет.
//
// Вызывается из формул элементов диалога:
//  Нет.
//
// Описание:
//  Здесь описывается процедура.
//
Процедура РассчитатьСреднююСтоимостьОбъекта(БухИт, УчетПоПродажнымЦенам, СписокПараметров, Продукция)
	
	Если (БухИт.Счет.ПринадлежитГруппе(СчетПокоду("10")) = 1)
	   и (Константа.МетодРасчетаСебестоимостиМатериалов.Получить(ДатаДок) = Перечисление.МетодыРасчетаСебестоимости.ПоСреднему) Тогда
		ОстатокКоличество   = 0;
		ПоступилоКоличество = 0;
		СредняяСтоимость    = 0;
		
	ИначеЕсли (БухИт.Счет.ПринадлежитГруппе(СчетПокоду("41")) = 1)
	        и (Константа.МетодРасчетаСебестоимостиТоваров.Получить(ДатаДок) = Перечисление.МетодыРасчетаСебестоимости.ПоСреднему) Тогда
		ОстатокКоличество   = 0;
		ПоступилоКоличество = 0;
		СредняяСтоимость    = 0;
		
	ИначеЕсли (БухИт.Счет.Код = "45")
			и (Продукция <> 1) // не продукция
	        и (Константа.МетодРасчетаСебестоимостиТоваров.Получить(ДатаДок) = Перечисление.МетодыРасчетаСебестоимости.ПоСреднему) Тогда
		ОстатокКоличество   = 0;
		ПоступилоКоличество = 0;
		СредняяСтоимость    = 0;
		
	Иначе
		ОстатокСумма        = БухИт.СНД("С");
		ОстатокКоличество   = БухИт.СНД("К");
		ПоступилоСумма      = 0;
		ПоступилоКоличество = 0;
		ВозвратСумма      = 0;
		ВозвратКоличество = 0;
		ВозвратПоставщикуСумма      = 0;
		ВозвратПоставщикуКоличество = 0;
		РозницаСумма      = 0;
		РозницаКоличество = 0;
		
		// При расчете средней стоимости учитываем сторнирующие проводки
		// по кредиту счета учета объекта, т.к. это возвраты от покупателя.
		// Возврат товаров поставщику отражается по кредиту счета учета МПЗ
		// в корреспонденции со счетом 76.2, по этому эти проводки необходимо
		// учесть при расчете средней.
		БухИт.ВыбратьПериоды(, 2);
		Пока БухИт.ПолучитьПериод() = 1 Цикл
			БухИт.ВыбратьКорСчета();
			Пока БухИт.ПолучитьКорСчет() = 1 Цикл
				Если БухИт.Счет <> БухИт.КорСчет Тогда
					Если БухИт.КорКО("К") < 0 Тогда // возврат отгрузки
						ВозвратСумма      = ВозвратСумма + БухИт.КорКО("С");
						ВозвратКоличество = ВозвратКоличество + БухИт.КорКО("К");
						
					ИначеЕсли БухИт.Операция.Дебет.Счет.Код = "76.2" Тогда // возврат поставщику
						ВозвратПоставщикуСумма      = ВозвратПоставщикуСумма + БухИт.КорКО("С");
						ВозвратПоставщикуКоличество = ВозвратПоставщикуКоличество + БухИт.КорКО("К");
						
					ИначеЕсли (БухИт.Операция.Кредит.Счет.Код = "41.1") И (БухИт.Операция.Дебет.Счет.Код = "41.2") Тогда // передача в розницу не корректируется
						РозницаСумма      = РозницаСумма + БухИт.КорКО("С");
						РозницаКоличество = РозницаКоличество + БухИт.КорКО("К");
						
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;

		БухИт.ВыбратьПериоды(, 1);
		Пока БухИт.ПолучитьПериод() = 1 Цикл
			БухИт.ВыбратьКорСчета();
			Пока БухИт.ПолучитьКорСчет() = 1 Цикл
				Если БухИт.Счет <> БухИт.КорСчет Тогда
					Если БухИт.КорДО("К") > 0 Тогда // поступление
						ПоступилоСумма = ПоступилоСумма + БухИт.КорДО("С");
						ПоступилоКоличество = ПоступилоКоличество + БухИт.КорДО("К");
						
					Иначе // возврат поставщику
						ВозвратПоставщикуСумма      = ВозвратПоставщикуСумма + (-БухИт.КорДО("С"));
						ВозвратПоставщикуКоличество = ВозвратПоставщикуКоличество + (-БухИт.КорДО("К"));
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
		
		Количество = ОстатокКоличество + ПоступилоКоличество - ВозвратКоличество - ВозвратПоставщикуКоличество - РозницаКоличество;
		Сумма      = ОстатокСумма + ПоступилоСумма - ВозвратСумма - ВозвратПоставщикуСумма - РозницаСумма;
		
		Если Количество = 0 Тогда
		    СредняяСтоимость = 0;
			
		Иначе
			СредняяСтоимость = Сумма / Количество;
		КонецЕсли;
		
		// Если необходимо сформировать печатную форму по регламентной операции.
		Если ФормироватьПечатнуюФорму = 1 Тогда
		    ТаблицаРасшифровкаРегламентнойОперации.НоваяСтрока();
			ТаблицаРасшифровкаРегламентнойОперации.СуммаНаНачало      = ОстатокСумма;
			ТаблицаРасшифровкаРегламентнойОперации.КоличествоНаНачало = ОстатокКоличество;
			ТаблицаРасшифровкаРегламентнойОперации.ПриходСумма        = ПоступилоСумма;
			ТаблицаРасшифровкаРегламентнойОперации.ПриходКоличество   = ПоступилоКоличество;
			ТаблицаРасшифровкаРегламентнойОперации.СредневзвешеннаяСтоимость = СредняяСтоимость;
			
			Если БухИт.Счет.Код = "45" Тогда
				ТаблицаРасшифровкаРегламентнойОперации.МПЗ = БухИт.Субконто(ВидыСубконто.Номенклатура);
				ТаблицаРасшифровкаРегламентнойОперации.Контрагент = БухИт.Субконто(ВидыСубконто.Контрагенты);
				ТаблицаРасшифровкаРегламентнойОперации.Договор = БухИт.Субконто(ВидыСубконто.Договоры);
				
			Иначе
				ТаблицаРасшифровкаРегламентнойОперации.МПЗ = БухИт.Субконто(1);
				ТаблицаРасшифровкаРегламентнойОперации.СчетУчета = БухИт.Счет;
				ТаблицаРасшифровкаРегламентнойОперации.ВозвратПоставщикуСумма = -ВозвратПоставщикуСумма;
				ТаблицаРасшифровкаРегламентнойОперации.ВозвратПоставщикуКоличество = -ВозвратПоставщикуКоличество;
				ТаблицаРасшифровкаРегламентнойОперации.ВозвратОтПокупателяСумма = -ВозвратСумма;
				ТаблицаРасшифровкаРегламентнойОперации.ВозвратОтПокупателяКоличество = -ВозвратКоличество;
				ТаблицаРасшифровкаРегламентнойОперации.РасшифровкаСуммаКорректировки = РасшифровкаКорректировкиСписанияПоМПЗ(БухИт.Субконто(1));
			КонецЕсли;
			
			// Расшифровка
			Расшифровка = СоздатьОбъект("СписокЗначений");
			ОсновнаяРасшифровкаОСВ.Выгрузить(Расшифровка);
			Расшифровка.Установить("Счет", БухИт.Счет);
			Расшифровка.Установить("ВидСубконто1", БухИт.Счет.ВидСубконто(1));
			Расшифровка.Установить("Субконто1", БухИт.Субконто(1));
			Расшифровка.Установить("ОтборСубконто1", 1);
			
			Если БухИт.Счет.Код = "45" Тогда
				Расшифровка.Установить("ВидСубконто2", БухИт.Счет.ВидСубконто(2));
				Расшифровка.Установить("Субконто2", БухИт.Субконто(2));	
				Расшифровка.Установить("ОтборСубконто2", 2);
				Расшифровка.Установить("ВидСубконто3", БухИт.Счет.ВидСубконто(3));
				Расшифровка.Установить("Субконто3", БухИт.Субконто(3));	
				Расшифровка.Установить("ОтборСубконто3", 2);
			КонецЕсли;
			
			ТаблицаРасшифровкаРегламентнойОперации.РасшифровкаОборотноСальдоваяВедомостьПоСчету = Расшифровка;
			                                
			Если БухИт.Счет.Код <> "45" Тогда
				Расшифровка = СоздатьОбъект("СписокЗначений");
				ОсновнаяРасшифровкаАСПС.Выгрузить(Расшифровка);
				Расшифровка.Установить("Счет", БухИт.Счет);
				Расшифровка.Установить("ВидСубконто1", БухИт.Счет.ВидСубконто(1));
				Расшифровка.Установить("Субконто1", БухИт.Субконто(1));
				Расшифровка.Установить("ОтборСубконто1", 1);
				ТаблицаРасшифровкаРегламентнойОперации.РасшифровкаАнализСчетаПоСубконто = Расшифровка;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	СписокПараметров.Установить("Средняя стоимость", СредняяСтоимость);
	СписокПараметров.Установить("Всего количество" , Количество);
	СписокПараметров.Установить("Учтено количество", 0);
	
КонецПроцедуры // РассчитатьСреднююСтоимостьОбъекта()

//******************************************************************************
// Корректировка()
//
// Параметры:
//  Нет.
//
// Вызывается из формул элементов диалога:
//  Нет.
//
// Описание:
//  Здесь описывается процедура.
//
Процедура Корректировка(БухИт, УчетПоПродажнымЦенам, СписокПараметров, Продукция)
	
	Сч41_2 = СчетПоКоду("41.2");
	Сч41 = СчетПоКоду("41");
	Сч19 = СчетПоКоду("19");
	
	// Формируем цикл, т.к. для корректировки возвратов товаров
	// отгруженных необходимо дополнительно еще выбирать кор. счета по кредиту
	Если БухИт.Счет.Код = "45" Тогда
		НачалоЦикла = 1;
	Иначе
		НачалоЦикла = 2;
	КонецЕсли;
	
	Для ФлагДК = НачалоЦикла По 2 Цикл
		
		Если ФлагДК = 1 Тогда
		    КорректироватьВозврат = 1;
		Иначе
			КорректироватьВозврат = 0;
		КонецЕсли;
		
		БухИт.ВыбратьКорСчета(, ФлагДК);
		Пока БухИт.ПолучитьКорСчет() = 1 Цикл
			
			// Если движение внутри счета или передача в розничную торговлю, то не корректировать
			Если БухИт.КорСчет = БухИт.Счет Тогда
				
				// Если возврат из переработки, то необходимо отразить движение постоянных разниц
				Если БухИт.Счет.Код <> "10.7" Тогда
					Продолжить;    
				КонецЕсли;
				
			 // передача в розницу из опта не корректируется
			ИначеЕсли (БухИт.КорСчет = Сч41_2) и (УчетПоПродажнымЦенам = 0) Тогда
			    Продолжить; 
				
			ИначеЕсли (БухИт.КорСчет = Сч41_2) и (БухИт.Счет.ПринадлежитГруппе(Сч41) = 1) Тогда
			    Продолжить;

				
			// передача в опт из розницы не корректируется
			ИначеЕсли (БухИт.Счет = Сч41_2) и (БухИт.КорСчет.ПринадлежитГруппе(Сч41) = 1) Тогда
			    Продолжить; 
				
			ИначеЕсли (БухИт.Счет = Сч41_2) и (БухИт.КорСчет.ПринадлежитГруппе(Сч19) = 1) Тогда
			    Продолжить; 
				
			ИначеЕсли БухИт.КорСчет.Код = "76.2" Тогда // возврат поставщику не корректируется
				Продолжить;
			КонецЕсли;
	        
			КоррСчет = БухИт.КорСчет;
			СписокКорректируемыхСубконто = ПолучитьСписокКорректируемыхСубконто(КоррСчет);
			КоличествоСубконто = СписокКорректируемыхСубконто.РазмерСписка();
			Если КоличествоСубконто = 0 Тогда
				СформироватьКорректирующиеПроводки(БухИт, СписокПараметров, КорректироватьВозврат, Продукция);
				
			Иначе
				Стр = "";
				НомерСубконто1 = СписокКорректируемыхСубконто.ПолучитьЗначение(1, Стр);
				БухИт.ВыбратьКорСубконто(НомерСубконто1);
				Пока БухИт.ПолучитьКорСубконто(НомерСубконто1) = 1 Цикл
					Если КоличествоСубконто = 1 Тогда
						СформироватьКорректирующиеПроводки(БухИт, СписокПараметров, КорректироватьВозврат, Продукция);
						
					Иначе
						НомерСубконто2 = СписокКорректируемыхСубконто.ПолучитьЗначение(2, Стр);
						БухИт.ВыбратьКорСубконто(НомерСубконто2);
						Пока БухИт.ПолучитьКорСубконто(НомерСубконто2) = 1 Цикл
							
							Если КоличествоСубконто = 2 Тогда
								СформироватьКорректирующиеПроводки(БухИт, СписокПараметров, КорректироватьВозврат, Продукция);
								
							Иначе
								НомерСубконто3 = СписокКорректируемыхСубконто.ПолучитьЗначение(3, Стр);
								БухИт.ВыбратьКорСубконто(НомерСубконто3);
								Пока БухИт.ПолучитьКорСубконто(НомерСубконто3) = 1 Цикл
									СформироватьКорректирующиеПроводки(БухИт, СписокПараметров, КорректироватьВозврат, Продукция);
								КонецЦикла;
							КонецЕсли;
						КонецЦикла;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры // Корректировка()

//******************************************************************************
// КорректировкаСреднейСтоимости()
//
// Параметры:
//  Нет.
//
// Вызывается из формул элементов диалога:
//  Нет.
//
// Описание:
//  Здесь описывается процедура.
//
Процедура КорректировкаСреднейСтоимости(БухИт, УчетПоПродажнымЦенам = 0, СписокПараметров, Продукция = 0)
	
	РассчитатьСреднююСтоимостьОбъекта(БухИт, УчетПоПродажнымЦенам, СписокПараметров, Продукция);
	
	// Если корректируем счет 41.2, то в разрезе мест хранения
	Если БухИт.Счет = СчетПоКоду("41.2") Тогда
	    БухИт.ВыбратьСубконто(ВидыСубконто.МестаХранения);
		Пока БухИт.ПолучитьСубконто(ВидыСубконто.МестаХранения) = 1 Цикл
			Корректировка(БухИт, УчетПоПродажнымЦенам, СписокПараметров, Продукция);
		КонецЦикла;                                
		
	Иначе
		Корректировка(БухИт, УчетПоПродажнымЦенам, СписокПараметров, Продукция);
	КонецЕсли;
	
	// Формирование печатной формы
	Если ФормироватьПечатнуюФорму = 1 Тогда
		
		Если (БухИт.Счет.ПринадлежитГруппе(СчетПокоду("10")) = 1)
	      и (Константа.МетодРасчетаСебестоимостиМатериалов.Получить(ДатаДок) = Перечисление.МетодыРасчетаСебестоимости.ПоСреднему) Тогда
		
		ИначеЕсли (БухИт.Счет.ПринадлежитГруппе(СчетПокоду("41")) = 1)
	           и (Константа.МетодРасчетаСебестоимостиТоваров.Получить(ДатаДок) = Перечисление.МетодыРасчетаСебестоимости.ПоСреднему) Тогда
			   	
		ИначеЕсли (БухИт.Счет.Код = "45")
			и (Продукция <> 1) // не продукция
	        и (Константа.МетодРасчетаСебестоимостиТоваров.Получить(ДатаДок) = Перечисление.МетодыРасчетаСебестоимости.ПоСреднему) Тогда	   	
				
		Иначе
		
			Если БухИт.Счет = СчетПоКоду("45") Тогда
				
				// В печатной форме отражаем только те МПЗ, по которым была корректировка
				СуммаКорректировки         = ТаблицаРасшифровкаРегламентнойОперации.СуммаКорректировки;
				СуммаКорректировкиВозврата = ТаблицаРасшифровкаРегламентнойОперации.СуммаКорректировкиВозврата;
				Если (СуммаКорректировки = 0) и (СуммаКорректировкиВозврата = 0) Тогда
					ТаблицаРасшифровкаРегламентнойОперации.УдалитьСтроку();
				КонецЕсли;
				
			Иначе
				
				// В печатной форме отражаем только те МПЗ, по которым была корректировка
				СуммаКорректировки         = ТаблицаРасшифровкаРегламентнойОперации.СуммаКорректировки;
				Если СуммаКорректировки = 0 Тогда
					ТаблицаРасшифровкаРегламентнойОперации.УдалитьСтроку();
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // КорректировкаСреднейСтоимости()

//******************************************************************************
// ПолучитьВидПродукции(Номенклатура)
//
// Параметры:
//  Номенклатура - элемент справочника Номенклатура, для которого нужно определить
//                 вид продукции
//
// Вызывается из формул элементов диалога:
//  Нет.
//
// Описание:
//  Возвращает вид продукции для указанного объекта номенклатуры
//
Функция ПолучитьВидПродукции(Номенклатура)

	Возврат Номенклатура.ВидНоменклатуры;
	
КонецФункции // ПолучитьВидПродукции()

//******************************************************************************
// ПроанализироватьОстаткиНЗП(ЗапросНЗП)
//
// Параметры:
//  ЗапросНЗП -  ссылка на результаты выполнения запроса, для расчета суммы НЗП текущего периода  
//
// Вызывается из формул элементов диалога:
//  Нет.
//
// Описание:
//  Анализирует документы по вводу остатков незавершенного производства,
//
Процедура ПроанализироватьОстаткиНЗП(ЗапросНЗП)

	// анализируются наличие документов НЗП за последний месяц
	ДатаНачЗапр = НачМесяца(ДатаДок);
	ДатаКонЗапр = КонМесяца(ДатаДок);

	ЗапросНЗП = СоздатьОбъект("Запрос");
	ТекстЗапроса = 
	"//{{ЗАПРОС(НЗП)
	|Период с ДатаНачЗапр по ДатаКонЗапр;
	|ОбрабатыватьДокументы все;
	|Обрабатывать НеПомеченныеНаУдаление;
	|ТекущийДокумент = Документ.НезавершенноеПроизводство.ТекущийДокумент;
	|ДатаДок = 		   Документ.НезавершенноеПроизводство.ДатаДок;
	|ВидНоменклатуры = Документ.НезавершенноеПроизводство.ВидНоменклатуры;
	|СтатьяЗатрат    = Документ.НезавершенноеПроизводство.СтатьяЗатратНаПроизводство;
	|Подразделение   = Документ.НезавершенноеПроизводство.Подразделение;
	|Сумма =		   Документ.НезавершенноеПроизводство.Остаток;
	|Функция СуммаНЗП= Сумма(Сумма);
	|Группировка ВидНоменклатуры;
	|Группировка СтатьяЗатрат;
	|Группировка Подразделение;
	|"//}}ЗАПРОС
	;                                                                                            

	// Если ошибка в запросе, то выход из процедуры
	Если ЗапросНЗП.Выполнить(ТекстЗапроса) = 0 Тогда
		Возврат;
	КонецЕсли;

КонецПроцедуры // ПроанализироватьОстаткиНЗП()

//******************************************************************************
// НайтиВТаблицеРезБУ(ТабРез, Объект, СтатьяЗатрат, Подразделение, КорОбъект)
//
// Параметры:
//  ТабРез - таблица "перекрестных" списаний вида "Номенклатура" - "Номенклатура" для "передельных" списаний
//           вида "ВидПродукции" - "Полуфабрикат"
//  Объект - объект вид номенклатуры , на который происходит списание
//  СтатьяЗатрат - статья расходов на производство
//  Подразделение - подразделение в которое происходит списание
//  КорОбъект - объект номенклатуры (полуфабрикат или продукция), который списывается
//
// Возвращаемое значение:
//  Номер строки таблицы - если найдено перекрестное списание
//  0 - если такое перекрестное списание еще не рассчитывалось
//
// Вызывается из формул элементов диалога:
//  Нет.
//
// Описание:
//  Выполняет поиск в таблице значений, содержащей результаты расчета перекрестных (передельных) списаний
//  вида "Вид продукции" - "Полуфабрикат", по строке заданной параметрами "Объект" и "КорОбъект"
//
Функция НайтиВТаблицеРезБУ(ТабРез, Объект, СтатьяЗатрат, Подразделение, КорОбъект)
    
	Если ПустоеЗначение(СтатьяЗатрат) = 1 Тогда
		пСтатьяЗатрат = "пусто";
	Иначе
		пСтатьяЗатрат = СтатьяЗатрат;
	КонецЕсли;

	Если ПустоеЗначение(Подразделение) = 1 Тогда
		пПодразделение = "пусто";
	Иначе
		пПодразделение = Подразделение;
	КонецЕсли;
	
	Рез = 0;
	
	ТабРез.ВыбратьСтроки();
	Пока (ТабРез.ПолучитьСтроку() = 1)
	   и (Рез = 0) Цикл
		Если (ТабРез.Объект = Объект)
		   и (ТабРез.КорОбъект = КорОбъект)
		   и (ТабРез.СтатьяЗатрат = пСтатьяЗатрат)
		   и (ТабРез.Подразделение = пПодразделение) Тогда
			Рез = ТабРез.НомерСтроки;
			
		КонецЕсли;    
	КонецЦикла;
	
	Возврат Рез;
	
КонецФункции // НайтиВТаблицеРезБУ()

//******************************************************************************
// СформироватьКорректирующиеПроводкиПоДвижениюГПиПФвБУ(БухИтПрод, СебестоимостьПродукции, ТабРез)
//
// Параметры:
//  БухИтПрод - результаты выполнения запроса к Бухитогам по операциям движения ГП и полуфабрикатов
//  СебестоимостьПродукции - таблица рассчитанных себестоимостей для продукции одного вида
//  ТабРез - таблица результатов расчета сумм "передельных" списаний (ВидПродукции <- продукция или полуфабрикат) 
//
// Вызывается из формул элементов диалога:
//  Нет.
//
// Описание:
//  Формирует корректирующие проводки для отражения всех движений продукции и полуфабрикатов
//  за месяц по фактической себестоимости. Факты дальнейшего использования полуфабрикатов в
//  производстве (многопередельное производство) фиксируются в специальной таблице ТабРез
//  для использования при расчете себестоимости продукции следующих переделов
//
Процедура СформироватьКорректирующиеПроводкиПоДвижениюГПиПФвБУ(БухИтПрод, СебестоимостьПродукции, ТабРез)
	
	Если (БухИтПрод.КорСчет = СчетПоКоду("40"))
	   и (БухИтПрод.КорДО("К") <> 0) Тогда
		// это выпуск продукции в текущем расчетном периоде
		// корректируем его по себестоимости выпуска продукции в расчетном периоде
		СтоимостьЕдиницы = 0;
		Если СебестоимостьПродукции.КоличествоВыпуска <> 0 Тогда
			СтоимостьЕдиницы   = СебестоимостьПродукции.СуммаВыпуска/СебестоимостьПродукции.КоличествоВыпуска; // средняя цена выпуска    
		КонецЕсли;
		ДолжноБытьСписано  = Окр(СтоимостьЕдиницы * (СебестоимостьПродукции.УчтенноеКоличество + БухИтПрод.КорДО("К")), 2);
		РанееБылоСписано   = Окр(СтоимостьЕдиницы * (СебестоимостьПродукции.УчтенноеКоличество), 2);
		СтоимостьВыпуска   = ДолжноБытьСписано - РанееБылоСписано;
		СуммаКорректировки = СтоимостьВыпуска - БухИтПрод.КорДО("С");
		
		СебестоимостьПродукции.УчтенноеКоличество = СебестоимостьПродукции.УчтенноеКоличество + БухИтПрод.КорДО("К");

		Если СуммаКорректировки <> 0 Тогда
			// Формируем проводку по списанию затрат на реализацию работ или оказание услуг
			Операция.НоваяПроводка(); Операция.РазделительУчета = ЮрЛицо;
			Операция.НомерЖурнала = "ФР";
			Операция.СодержаниеПроводки = "Корректировка выпуска продукции";
			Операция.ПервичныйДокумент  = глПредставлениеПервичногоДокумента(Контекст);
			Операция.Дебет.Счет = БухИтПрод.Счет;
			Для т = 1 По БухИтПрод.Счет.КоличествоСубконто() Цикл
				Операция.Дебет.Субконто(т, БухИтПрод.Субконто(т));
			КонецЦикла;

			Операция.Кредит.Счет = БухИтПрод.КорСчет;
			Операция.Кредит.Субконто(1, БухИтПрод.КорСубконто(1));
			Операция.Кредит.Субконто(2, Перечисление.СтоимостьВыпуска.Отклонения);
			Операция.Сумма = СуммаКорректировки;

		КонецЕсли;
		
		// Отнесение постоянных разниц на выпущенную продукцию
		ДолжноБытьСписаноНПР = 0;
		Если СебестоимостьПродукции.СуммаВыпуска <> 0 Тогда
			ДолжноБытьСписаноНПР = Окр(СебестоимостьПродукции.СуммаНПР * (ДолжноБытьСписано / СебестоимостьПродукции.СуммаВыпуска), 2);
		КонецЕсли;
		ДолжноБытьСписаноНПР = Мин(ДолжноБытьСписаноНПР, СебестоимостьПродукции.СуммаНПР);
		СуммаНПР             = ДолжноБытьСписаноНПР - СебестоимостьПродукции.УчтеннаяСуммаНПРВыпуска;
		
		СебестоимостьПродукции.УчтеннаяСуммаНПРВыпуска = СебестоимостьПродукции.УчтеннаяСуммаНПРВыпуска + СуммаНПР;
		
		Если СуммаНПР <> 0 Тогда
		    Операция.НоваяПроводка(); Операция.РазделительУчета = ЮрЛицо;
			Операция.НомерЖурнала = "ПР";
			Операция.СодержаниеПроводки = "Отнесение на выпущенную продукцию";
			Операция.Дебет.Счет = СчетПоКоду("НПР."+ БухИтПрод.Счет.Код);
			Для т = 1 По БухИтПрод.Счет.КоличествоСубконто() Цикл
				Операция.Дебет.Субконто(т, БухИтПрод.Субконто(т));
			КонецЦикла;
			Операция.Сумма = СуммаНПР;
		КонецЕсли;
	
	Иначе
		// Все прочие списания полуфабрикатов или продукции в течение месяца подлежат
		// корректировке по фактической средневзвешенной себестоимости на конец расчетного периода
		
		// Сторнирующие проводки не надо корректировать.
		ВсегоСписаноСумма      = БухИтПрод.КорКО("С");
		ВсегоСписаноКоличество = БухИтПрод.КорКО("К");
		ВозвратКоличество = 0;
		БухИтПрод.ВыбратьПериоды(, 2);
		Пока БухИтПрод.ПолучитьПериод() = 1 Цикл
		    Если БухИтПрод.КорКО("К") < 0 Тогда
				ВсегоСписаноСумма      = ВсегоСписаноСумма + (-БухИтПрод.КорКО("С"));
				ВсегоСписаноКоличество = ВсегоСписаноКоличество + (-БухИтПрод.КорКО("К"));
			КонецЕсли;
		КонецЦикла;
		
		Если ВсегоСписаноКоличество <> 0 Тогда
		
			// Складское перемещение корректировать не надо, т.к.
			// по складам не ведется суммовой учет.
			Если (БухИтПрод.Счет = БухИтПрод.КорСчет)
			   и (БухИтПрод.Субконто(1) = БухИтПрод.КорСубконто(1)) Тогда
			    Возврат;
			КонецЕсли;
	            
			ДолжноБытьСписано  = Окр((СебестоимостьПродукции.УчтеноСписанноеКоличество + ВсегоСписаноКоличество) * СебестоимостьПродукции.ФактическаяСредняяСебестоимость, 2);
			РанееБылоСписано   = Окр(СебестоимостьПродукции.УчтеноСписанноеКоличество * СебестоимостьПродукции.ФактическаяСредняяСебестоимость, 2);
			СуммаСписания      = ДолжноБытьСписано - РанееБылоСписано;
			СуммаКорректировки = СуммаСписания - ВсегоСписаноСумма;
			
			СебестоимостьПродукции.УчтеноСписанноеКоличество = СебестоимостьПродукции.УчтеноСписанноеКоличество + ВсегоСписаноКоличество;
			
			// Расчет постоянных разниц к списанию
			ДолжноБытьСписаноНПР = 0;
			Если СебестоимостьПродукции.ВсегоСумма <> 0 Тогда
				ДолжноБытьСписаноНПР = Окр(СебестоимостьПродукции.ВсегоНПР * (ДолжноБытьСписано / СебестоимостьПродукции.ВсегоСумма), 2);
			КонецЕсли;
			ДолжноБытьСписаноНПР = Мин(ДолжноБытьСписаноНПР, СебестоимостьПродукции.ВсегоНПР);
			СуммаНПР             = ДолжноБытьСписаноНПР - СебестоимостьПродукции.УчтеннаяСуммаНПРСписания;    
			
			
			СебестоимостьПродукции.УчтеннаяСуммаНПРСписания = СебестоимостьПродукции.УчтеннаяСуммаНПРСписания + СуммаНПР;
			                                                
			Если СуммаКорректировки <> 0 Тогда
				// Формируем проводку по списанию затрат на реализацию работ или оказание услуг
				Операция.НоваяПроводка(); Операция.РазделительУчета = ЮрЛицо;
				Операция.НомерЖурнала = "ФР";
				Операция.СодержаниеПроводки = "Корректировка себестоимости продукции";
				Операция.ПервичныйДокумент  = глПредставлениеПервичногоДокумента(Контекст);
				Операция.Дебет.Счет = БухИтПрод.КорСчет;
				Для т = 1 По БухИтПрод.КорСчет.КоличествоСубконто() Цикл
					Операция.Дебет.Субконто(т, БухИтПрод.КорСубконто(т));
				КонецЦикла;
				Операция.Кредит.Счет = БухИтПрод.Счет;
				Для т = 1 По БухИтПрод.Счет.КоличествоСубконто() Цикл
					Операция.Кредит.Субконто(т, БухИтПрод.Субконто(т));
				КонецЦикла;
				Операция.Сумма = СуммаКорректировки;
	
			КонецЕсли;
		
			Если БухИтПрод.КорСчет = СчетПоКоду("20") Тогда
			   	// Выявляем операции списания полуфабрикатов в производство для использования в последующих
			   	// переделах
				Стр = НайтиВТаблицеРезБУ(ТабРез, БухИтПрод.КорСубконто(1), БухИтПрод.КорСубконто(2), БухИтПрод.КорСубконто(3), БухИтПрод.Субконто(1));
		 	  	Если Стр = 0 Тогда
				   	// фиксируем результат расчета суммы "передельного" списания
					ТабРез.НоваяСтрока();
					ТабРез.Объект = БухИтПрод.КорСубконто(1);
					Если ПустоеЗначение(БухИтПрод.КорСубконто(2)) = 1 Тогда
						ТабРез.СтатьяЗатрат = "пусто";
					Иначе
						ТабРез.СтатьяЗатрат = БухИтПрод.КорСубконто(2);
					КонецЕсли;
					
					Если ПустоеЗначение(БухИтПрод.КорСубконто(3)) = 1 Тогда
						ТабРез.Подразделение = "пусто";
					Иначе
						ТабРез.Подразделение = БухИтПрод.КорСубконто(3);
					КонецЕсли;
	
					ТабРез.КорОбъект = БухИтПрод.Субконто(1);
					ТабРез.ЗатратыСумма = СуммаСписания;
					
				Иначе
					// накапливаем результат расчета сумм передельных списаний
					ТабРез.ПолучитьСтрокуПоНомеру(Стр);
					ТабРез.ЗатратыСумма = ТабРез.ЗатратыСумма + СуммаСписания;
					
				КонецЕсли;
			КонецЕсли;
			
			// Формирование печатной формы
			Если ФормироватьПечатнуюФорму = 1 Тогда
				ТаблицаРасшифровкаРегламентнойОперацииДополнительно.ФактическиСписаноСумма      = ТаблицаРасшифровкаРегламентнойОперацииДополнительно.ФактическиСписаноСумма + ВсегоСписаноСумма;
				ТаблицаРасшифровкаРегламентнойОперацииДополнительно.ФактическиСписаноКоличество = ТаблицаРасшифровкаРегламентнойОперацииДополнительно.ФактическиСписаноКоличество + ВсегоСписаноКоличество;
				ТаблицаРасшифровкаРегламентнойОперацииДополнительно.РасчетнаяСуммаСписания      = ТаблицаРасшифровкаРегламентнойОперацииДополнительно.РасчетнаяСуммаСписания + СуммаСписания;
				ТаблицаРасшифровкаРегламентнойОперацииДополнительно.СуммаКорректировки          = ТаблицаРасшифровкаРегламентнойОперацииДополнительно.СуммаКорректировки + СуммаКорректировки;
				
				ТаблицаКорректировкиСписания = ТаблицаРасшифровкаРегламентнойОперацииДополнительно.РасшифровкаСуммаКорректировки.Получить("Таблица данных");
				ТаблицаКорректировкиСписания.НоваяСтрока();
				ТаблицаКорректировкиСписания.Счет = БухИтПрод.КорСчет;
				ТаблицаКорректировкиСписания.Субконто1 = БухИтПрод.КорСубконто(1);
				ТаблицаКорректировкиСписания.Субконто2 = БухИтПрод.КорСубконто(2);
				ТаблицаКорректировкиСписания.Субконто3 = БухИтПрод.КорСубконто(3);
				ТаблицаКорректировкиСписания.ФактическиСписаноСумма = ВсегоСписаноСумма;
				ТаблицаКорректировкиСписания.ФактическиСписаноКоличество = ВсегоСписаноКоличество;
				ТаблицаКорректировкиСписания.СредневзвешеннаяСтоимость = ТаблицаРасшифровкаРегламентнойОперацииДополнительно.СредневзвешеннаяСтоимость;
				ТаблицаКорректировкиСписания.СуммаСписания = СуммаСписания;
				ТаблицаКорректировкиСписания.СуммаКорректировки = СуммаКорректировки;
				
				// формирование расшифровки
				Расшифровка = СоздатьОбъект("СписокЗначений");
				ОсновнаяРасшифровкаОПП.Выгрузить(Расшифровка);
				
				Расшифровка.Установить("ДтКт", 2);
				
				Расшифровка.Установить("Счет", БухИтПрод.Счет);
				Расшифровка.Установить("ВидСубконто1", БухИтПрод.Счет.ВидСубконто(1));
				Расшифровка.Установить("Субконто1",    БухИтПрод.Субконто(1));
				Расшифровка.Установить("КорСчет", БухИтПрод.КорСчет);
				Расшифровка.Установить("КорВидСубконто1", БухИтПрод.КорСчет.ВидСубконто(1));
				Расшифровка.Установить("КорСубконто1",    БухИтПрод.КорСубконто(1));
				Расшифровка.Установить("КорВидСубконто2", БухИтПрод.КорСчет.ВидСубконто(2));
				Расшифровка.Установить("КорСубконто2",    БухИтПрод.КорСубконто(2));
				Расшифровка.Установить("КорВидСубконто3", БухИтПрод.КорСчет.ВидСубконто(3));
				Расшифровка.Установить("КорСубконто3",    БухИтПрод.КорСубконто(3));
				ТаблицаКорректировкиСписания.РасшифровкаОтчетПоПроводкам = Расшифровка;
			КонецЕсли;
			
			//Списание постоянных разниц со счетов НПР.21, НПР.43, НПР.45
			Если СуммаНПР <> 0 Тогда
				
				СчетНПР = глПолучитьСчетДебетаНПР(БухИтПрод.КорСчет, БухИтПрод.КорСубконто(1));
				
				Операция.НоваяПроводка(); Операция.РазделительУчета = ЮрЛицо;
				Операция.НомерЖурнала = "ПР";
				Операция.СодержаниеПроводки = "Списание с продукции (полуфабрикатов)";
				Если ПустоеЗначение(СчетНПР) = 0 Тогда
					Операция.Дебет.Счет = СчетНПР;
					Для т = 1 По БухИтПрод.КорСчет.КоличествоСубконто() Цикл
						Операция.Дебет.Субконто(БухИтПрод.КорСчет.ВидСубконто(т), БухИтПрод.КорСубконто(т));
					КонецЦикла;
				КонецЕсли;
				Операция.Кредит.Счет = СчетПоКоду("НПР."+ БухИтПрод.Счет.Код);
				Для т = 1 По БухИтПрод.Счет.КоличествоСубконто() Цикл
					Операция.Кредит.Субконто(БухИтПрод.Счет.ВидСубконто(т), БухИтПрод.Субконто(т));
				КонецЦикла;
				Операция.Сумма = СуммаНПР;
			КонецЕсли;
			
		ИначеЕсли (БухИтПрод.Счет.Код = "45")
		        и ((БухИтПрод.КорСчет.Код = "21") или (БухИтПрод.КорСчет.Код = "43")) Тогда // возможен возврат отгруженной продукции на склад
		
			// Сторнирующие проводки не надо корректировать.
			ВсегоВозвратСумма      = 0;
			ВсегоВозвратКоличество = 0;
			БухИтПрод.ВыбратьПериоды(, 1);
			Пока БухИтПрод.ПолучитьПериод() = 1 Цикл
			    Если БухИтПрод.КорДО("К") < 0 Тогда
					ВсегоВозвратСумма      = ВсегоВозвратСумма + (-БухИтПрод.КорДО("С"));
					ВсегоВозвратКоличество = ВсеговозвратКоличество + (-БухИтПрод.КорДО("К"));
				КонецЕсли;
			КонецЦикла;
			
			Если ВсегоВозвратКоличество = 0 Тогда
			    Возврат;
			КонецЕсли;
			
			ДолжноБытьСписано  = Окр((СебестоимостьПродукции.УчтеноСписанноеКоличество + ВсегоВозвратКоличество) * СебестоимостьПродукции.ФактическаяСредняяСебестоимость, 2);
			РанееБылоСписано   = Окр(СебестоимостьПродукции.УчтеноСписанноеКоличество * СебестоимостьПродукции.ФактическаяСредняяСебестоимость, 2);
			СуммаСписания      = ДолжноБытьСписано - РанееБылоСписано;
			СуммаКорректировки = СуммаСписания - ВсегоВозвратСумма;
			
			СебестоимостьПродукции.УчтеноСписанноеКоличество = СебестоимостьПродукции.УчтеноСписанноеКоличество + ВсегоВозвратКоличество;
			
			// Расчет постоянных разниц к списанию
			ДолжноБытьСписаноНПР = 0;
			Если СебестоимостьПродукции.ВсегоСумма <> 0 Тогда
				ДолжноБытьСписаноНПР = Окр(СебестоимостьПродукции.ВсегоНПР * (ДолжноБытьСписано / СебестоимостьПродукции.ВсегоСумма), 2);
			КонецЕсли;
			ДолжноБытьСписаноНПР = Мин(ДолжноБытьСписаноНПР, СебестоимостьПродукции.ВсегоНПР);
			СуммаНПР             = ДолжноБытьСписаноНПР - СебестоимостьПродукции.УчтеннаяСуммаНПРСписания;    
			
			
			СебестоимостьПродукции.УчтеннаяСуммаНПРСписания = СебестоимостьПродукции.УчтеннаяСуммаНПРСписания + СуммаНПР;
			                                                
			Если СуммаКорректировки <> 0 Тогда
				// Формируем проводку по списанию затрат на реализацию работ или оказание услуг
				Операция.НоваяПроводка(); Операция.РазделительУчета = ЮрЛицо;
				Операция.НомерЖурнала = "ФР";
				Операция.СодержаниеПроводки = "Корректировка себестоимости продукции";
				Операция.ПервичныйДокумент  = глПредставлениеПервичногоДокумента(Контекст);
				Операция.Дебет.Счет = БухИтПрод.Счет;
				Для т = 1 По БухИтПрод.Счет.КоличествоСубконто() Цикл
					Операция.Дебет.Субконто(т, БухИтПрод.Субконто(т));
				КонецЦикла;
				Операция.Кредит.Счет = БухИтПрод.КорСчет;
				Для т = 1 По БухИтПрод.КорСчет.КоличествоСубконто() Цикл
					Операция.Кредит.Субконто(т, БухИтПрод.КорСубконто(т));
				КонецЦикла;
				Операция.Сумма = -СуммаКорректировки;
			КонецЕсли;
			
			//Списание постоянных разниц со счета НПР.45
			Если СуммаНПР <> 0 Тогда
				СчетНПР = глПолучитьСчетДебетаНПР(БухИтПрод.КорСчет, БухИтПрод.КорСубконто(1));
				Операция.НоваяПроводка(); Операция.РазделительУчета = ЮрЛицо;
				Операция.НомерЖурнала = "ПР";
				Операция.СодержаниеПроводки = "Списание с продукции (полуфабрикатов)";
				Если ПустоеЗначение(СчетНПР) = 0 Тогда
					Операция.Кредит.Счет = СчетНПР;
					Для т = 1 По БухИтПрод.КорСчет.КоличествоСубконто() Цикл
						Операция.Кредит.Субконто(БухИтПрод.КорСчет.ВидСубконто(т), БухИтПрод.КорСубконто(т));
					КонецЦикла;
				КонецЕсли;
				Операция.Дебет.Счет = СчетПоКоду("НПР."+ БухИтПрод.Счет.Код);
				Для т = 1 По БухИтПрод.Счет.КоличествоСубконто() Цикл
					Операция.Дебет.Субконто(БухИтПрод.Счет.ВидСубконто(т), БухИтПрод.Субконто(т));
				КонецЦикла;
				Операция.Сумма = -СуммаНПР;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если Операция.КоличествоПроводок() > 0 Тогда
		Операция.ЗаписатьПроводки();
	КонецЕсли;
	
КонецПроцедуры // СформироватьКорректирующиеПроводкиПоДвижениюГПиПФвБУ()

//******************************************************************************
// АнализДвиженийГПиПФпоКорреспонденциямБУ(БухИтПрод, СебестоимостьПродукции, ТабРез)
//
// Параметры:
//  БухИтПрод - результаты выполнения запроса к Бухитогам по операциям движения ГП и полуфабрикатов
//  СебестоимостьПродукции - таблица рассчитанных себестоимостей для продукции одного вида
//  ТабРез - таблица результатов расчета сумм "передельных" списаний (ВидПродукции <- продукция или полуфабрикат) 
//
// Вызывается из формул элементов диалога:
//  Нет.
//
// Описание:
//  Собирает и обобщает информацию по всем движениям данной продукции или полуфабриката
//  После этого рассчитывает суммы корректирующих проводок для текущего периода
//
Процедура АнализДвиженийГПиПФпоКорреспонденциямБУ(БухИтПрод, СебестоимостьПродукции, ТабРез)            
	
	БухИтПрод.ВыбратьКорСчета();
	Пока БухИтПрод.ПолучитьКорСчет() = 1 Цикл
		СписокКорректируемыхСубконто = ПолучитьСписокКорректируемыхСубконто(БухИтПрод.КорСчет);
		КоличествоСубконто = СписокКорректируемыхСубконто.РазмерСписка();

		Если КоличествоСубконто = 0 Тогда
			СформироватьКорректирующиеПроводкиПоДвижениюГПиПФвБУ(БухИтПрод, СебестоимостьПродукции, ТабРез);

		Иначе
			Стр = "";
			НомерСубконто1 = СписокКорректируемыхСубконто.ПолучитьЗначение(1, Стр);
			БухИтПрод.ВыбратьКорСубконто(НомерСубконто1);
			Пока БухИтПрод.ПолучитьКорСубконто(НомерСубконто1) = 1 Цикл
				Если КоличествоСубконто = 1 Тогда
					СформироватьКорректирующиеПроводкиПоДвижениюГПиПФвБУ(БухИтПрод, СебестоимостьПродукции, ТабРез);
					
				Иначе
					НомерСубконто2 = СписокКорректируемыхСубконто.ПолучитьЗначение(2, Стр);
					БухИтПрод.ВыбратьКорСубконто(НомерСубконто2);
					Пока БухИтПрод.ПолучитьКорСубконто(НомерСубконто2) = 1 Цикл
						Если КоличествоСубконто = 2 Тогда
							СуммаКорректировки = 0;
							СформироватьКорректирующиеПроводкиПоДвижениюГПиПФвБУ(БухИтПрод, СебестоимостьПродукции, ТабРез);
							
						Иначе
							НомерСубконто3 = СписокКорректируемыхСубконто.ПолучитьЗначение(3, Стр);
							БухИтПрод.ВыбратьКорСубконто(НомерСубконто3);
							Пока БухИтПрод.ПолучитьКорСубконто(НомерСубконто3) = 1 Цикл
								СформироватьКорректирующиеПроводкиПоДвижениюГПиПФвБУ(БухИтПрод, СебестоимостьПродукции, ТабРез);

							КонецЦикла;
						КонецЕсли;
					КонецЦикла;
					
				КонецЕсли;
				
			КонецЦикла;
		
		КонецЕсли;

	КонецЦикла;

КонецПроцедуры // АнализДвиженийГПиПФпоКорреспонденциямБУ()

//******************************************************************************
// КорректировкаСебестоимостиГПиПФвБУ(БухИтПрод, СебестоимостьПродукции, ТабРез, ВидПродукции)
//
// Параметры:
//  БухИтПрод - результаты выполнения запроса к БухИтогам по операциям движения ГП и полуфабрикатов
//  СебестоимостьПродукции - таблица рассчитанных себестоимостей для продукции одного вида
//  ТабРез - таблица результатов расчета сумм "передельных" списаний (ВидПродукции <- продукция или полуфабрикат) 
//  ВидПродукции - вид продукции, которому принадлежит корректируемая продукция (полуфабрикат)
//
// Вызывается из формул элементов диалога:
//  Нет.
//
// Описание:
//  Формирование корректирующих проводок для отражения в бух итогах операций 
//  движения продукции и полуфабрикатов по фактической рассчитанной себестоимости
//
Процедура КорректировкаСебестоимостиГПиПФвБУ(БухИтПрод, СебестоимостьПродукции, ТабРез, ВидПродукции)            
    
	// корректировка себестоимости продукции и полуфабрикатов	
	БухИтПрод.ВыбратьСчета();
	Пока БухИтПрод.ПолучитьСчет() = 1 Цикл
		БухИтПрод.ВыбратьСубконто(ВидыСубконто.Номенклатура);
		Пока БухИтПрод.ПолучитьСубконто(ВидыСубконто.Номенклатура) = 1 Цикл
			Стр = "";
			
			Если ПолучитьВидПродукции(БухИтПрод.Субконто(ВидыСубконто.Номенклатура)) <> ВидПродукции Тогда
				Продолжить;
			КонецЕсли;
			
			Если СебестоимостьПродукции.НайтиЗначение(БухИтПрод.Субконто(ВидыСубконто.Номенклатура), Стр, "Продукция") = 0 Тогда
				СебестоимостьПродукции.НоваяСтрока();
				СебестоимостьПродукции.Продукция = БухИтПрод.Субконто(ВидыСубконто.Номенклатура);
				
			Иначе
				СебестоимостьПродукции.ПолучитьСтрокуПоНомеру(Стр);
			КонецЕсли;
			
			// При расчете средневзвешенной стоимости необходимо учесть
			// в стоимости стоимость возращенной на склад продукции. 
			ВозвратСумма      = 0;
			ВозвратКоличество = 0;
			БухИтПрод.ВыбратьПериоды(, 2);
			Пока БухИтПрод.ПолучитьПериод() = 1 Цикл
			    Если БухИтПрод.КО() < 0 Тогда
					ВозвратСумма      = ВозвратСумма + (-БухИтПрод.КО("С"));
					ВозвратКоличество = ВозвратКоличество + (-БухИтПрод.КО("К"));
				КонецЕсли;
			КонецЦикла;
			
			// Рассчитаем фактическую стоимость продукции 
			СебестоимостьПродукции.ВсегоСумма = СебестоимостьПродукции.СуммаВыпуска
											  + СебестоимостьПродукции.СуммаПрочееПоступление
											  + БухИтПрод.СНД("С")
											  + ВозвратСумма;
			Количество = БухИтПрод.СНД("К")
			           + СебестоимостьПродукции.КоличествоВыпуска
					   + СебестоимостьПродукции.КоличествоПрочееПоступление
					   + ВозвратКоличество;
			Если (Количество) <> 0 Тогда
				ФактСебест = СебестоимостьПродукции.ВсегоСумма/Количество;
			Иначе
				ФактСебест = 0;			
			КонецЕсли;
			СебестоимостьПродукции.ФактическаяСредняяСебестоимость = ФактСебест;
			
			// Формирование печатной формы
			Если ФормироватьПечатнуюФорму = 1 Тогда
				
				ТаблицаРасшифровкаРегламентнойОперацииДополнительно.НоваяСтрока();
				ТаблицаРасшифровкаРегламентнойОперацииДополнительно.МПЗ = БухИтПрод.Субконто(ВидыСубконто.Номенклатура);
				ТаблицаРасшифровкаРегламентнойОперацииДополнительно.СчетУчета = БухИтПрод.Счет;
				
				ТаблицаРасшифровкаРегламентнойОперацииДополнительно.СуммаНаНачало      = БухИтПрод.СНД("С");
				ТаблицаРасшифровкаРегламентнойОперацииДополнительно.КоличествоНаНачало = БухИтПрод.СНД("К");
				ТаблицаРасшифровкаРегламентнойОперацииДополнительно.ВыпускСумма        = СебестоимостьПродукции.СуммаВыпуска;
				ТаблицаРасшифровкаРегламентнойОперацииДополнительно.ВыпускКоличество   = СебестоимостьПродукции.КоличествоВыпуска;
				ТаблицаРасшифровкаРегламентнойОперацииДополнительно.ПрочееПоступлениеСумма        = СебестоимостьПродукции.СуммаПрочееПоступление;
				ТаблицаРасшифровкаРегламентнойОперацииДополнительно.ПрочееПоступлениеКоличество   = СебестоимостьПродукции.КоличествоПрочееПоступление;
				ТаблицаРасшифровкаРегламентнойОперацииДополнительно.СредневзвешеннаяСтоимость     = ФактСебест;
				ТаблицаРасшифровкаРегламентнойОперацииДополнительно.ВозвратОтПокупателяСумма      = ВозвратСумма;
				ТаблицаРасшифровкаРегламентнойОперацииДополнительно.ВозвратОтПокупателяКоличество = ВозвратКоличество;
				ТаблицаРасшифровкаРегламентнойОперацииДополнительно.РасшифровкаСуммаКорректировки = РасшифровкаКорректировкиСписанияПоМПЗ(БухИтПрод.Субконто(ВидыСубконто.Номенклатура));
				
				// Расшифровка
				Расшифровка = СоздатьОбъект("СписокЗначений");
				ОсновнаяРасшифровкаОСВ.Выгрузить(Расшифровка);
				Расшифровка.Установить("Счет", БухИтПрод.Счет);
				Расшифровка.Установить("ВидСубконто1", ВидыСубконто.Номенклатура);
				Расшифровка.Установить("Субконто1", БухИтПрод.Субконто(ВидыСубконто.Номенклатура));
				Расшифровка.Установить("ОтборСубконто1", 1);
				ТаблицаРасшифровкаРегламентнойОперацииДополнительно.РасшифровкаОборотноСальдоваяВедомостьПоСчету = Расшифровка;
				                                
				Расшифровка = СоздатьОбъект("СписокЗначений");
				ОсновнаяРасшифровкаАСПС.Выгрузить(Расшифровка);
				Расшифровка.Установить("Счет", БухИтПрод.Счет);
				Расшифровка.Установить("ВидСубконто1", ВидыСубконто.Номенклатура);
				Расшифровка.Установить("Субконто1", БухИтПрод.Субконто(ВидыСубконто.Номенклатура));
				Расшифровка.Установить("ОтборСубконто1", 1);
				ТаблицаРасшифровкаРегламентнойОперацииДополнительно.РасшифровкаАнализСчетаПоСубконто = Расшифровка;
			КонецЕсли;
			
			Если ВыполнятьДвиженияПоСчетуНПР = Да Тогда
				СебестоимостьПродукции.ВсегоНПР = СебестоимостьПродукции.СуммаНПР + НПР.СКД("НПР." + БухИтПрод.Счет.Код,,, БухИтПрод.Субконто(ВидыСубконто.Номенклатура));
			КонецЕсли;
			
			БухИтПрод.ВыбратьСубконто(ВидыСубконто.МестаХранения);
			Пока БухИтПрод.ПолучитьСубконто(ВидыСубконто.МестаХранения) = 1 Цикл
				АнализДвиженийГПиПФпоКорреспонденциямБУ(БухИтПрод, СебестоимостьПродукции, ТабРез);
			КонецЦикла;
			
		// Формирование печатной формы
		Если ФормироватьПечатнуюФорму = 1 Тогда
			
			// Если по продукции (полуфабрикату) корректировки нет, то не будем объект отражать в печатной форме.
			СуммаКорректировки = ТаблицаРасшифровкаРегламентнойОперацииДополнительно.СуммаКорректировки;
			Если СуммаКорректировки = 0 Тогда
				ТаблицаРасшифровкаРегламентнойОперацииДополнительно.УдалитьСтроку();
			КонецЕсли;
		КонецЕсли;
			
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры // КорректировкаСебестоимостиГПиПФвБУ()

//****************************************************************************** 
// СписатьЗатратыНаВыпускПродукцииБУ(БухИт, ЗатратыСумма, СуммаНПР, ЗапросНЗП, ФактическиеЗатраты, Объект)
//
// Параметры:
//  БухИт - ссылка на результаты запроса по прямым расходам
//  ЗатратыСумма - сумма затрат текущего периода по отдельной статье расходов и подразделению
//  СуммаНПР - сумма постоянных разниц которые отнесены на вид номенклатуры, 
//    путем списания продукции (полуфабрикатов) в производство.
//  ЗапросНЗП - результаты запроса к документам "Незавершенное производство"
//  ФактическиеЗатраты - переменная для подсчета общей суммы затрат по текущему виду продукции
//  ВсегоСписаноНПРпоВидуНоменклатуры - общая сумма постоянных разниц по виду номенклатуры,
//    которую необходимо списать 
//  Объект - вид номенклатуры, анализируемый в данный момент
//
// Вызывается из формул элементов диалога:
//  Нет.
//
// Описание:
//  В процедуре формируются проводки по списанию затрат связанных с выпуском продукции 
//
Процедура СписатьЗатратыНаВыпускПродукцииБУ(БухИт, ЗатратыСумма, СуммаНПР, ЗапросНЗП, ФактическиеЗатраты, ВсегоСписаноНПРпоВидуНоменклатуры, Объект)
	
	СуммаНЗП = 0;
	ДокументНЗП = ""; // для расшифровки печатной формы
	
	Если ЗапросНЗП.Получить(БухИт.Субконто(1), БухИт.Субконто(2), БухИт.Субконто(3)) = 1 Тогда
		СуммаНЗП    = ЗапросНЗП.СуммаНЗП;
		ДокументНЗП = ЗапросНЗП.ТекущийДокумент;
	КонецЕсли;
	СуммаСписания = (БухИт.СНД() + ЗатратыСумма) - СуммаНЗП;
	
	ФактическиеЗатраты = ФактическиеЗатраты + СуммаСписания;
	        
	// Рассчитывается сумма постоянных разниц относящаяся к выпущенной продукции (работам, услугам) 
	СуммаСписанияПостоянныхРазниц = 0;
	Если ВыполнятьДвиженияПоСчетуНПР = Да Тогда
		Если (БухИт.СНД() + ЗатратыСумма) > 0 Тогда
			ВсегоНПР = СуммаНПР + НПР.СКД("НПР.20",,, БухИт.Субконто(СубконтоВидовПродукцииИУслуг), БухИт.Субконто(ВидыСубконто.СтатьиЗатратНаПроизводство), БухИт.Субконто(ВидыСубконто.Подразделения));
		    Коэф = СуммаСписания / (БухИт.СНД() + ЗатратыСумма);
			СуммаСписанияПостоянныхРазниц = ВсегоНПР * Коэф; // сумма, которую необходимо списать со счета НЗП.20
			
			// Отразим на счете НПР.20 не отраженные постоянные разницы.
			Если БухИт.Субконто(ВидыСубконто.СтатьиЗатратНаПроизводство).ВидРасходовДляНалоговогоУчета = Перечисление.ГруппыВидыРасходов.НеПринимаемые Тогда
				НеОтраженоНаСчетеНПР = (БухИт.СНД() + ЗатратыСумма) - ВсегоНПР;
			    Если НеОтраженоНаСчетеНПР > 0 Тогда
				    Операция.НоваяПроводка(); Операция.РазделительУчета = ЮрЛицо;
					Операция.НомерЖурнала = "ПР";
					Операция.СодержаниеПроводки = "Не принимаемые расходы";
					Операция.Дебет.Счет = СчетПоКоду("НПР.20");
					Операция.Дебет.Субконто(СубконтоВидовПродукцииИУслуг,			 БухИт.Субконто(СубконтоВидовПродукцииИУслуг));
					Операция.Дебет.Субконто(ВидыСубконто.СтатьиЗатратНаПроизводство, БухИт.Субконто(ВидыСубконто.СтатьиЗатратНаПроизводство));
					Операция.Дебет.Субконто(ВидыСубконто.Подразделения, 			 БухИт.Субконто(ВидыСубконто.Подразделения));
					Операция.Сумма = НеОтраженоНаСчетеНПР;
				КонецЕсли;
				СуммаСписанияПостоянныхРазниц = СуммаСписания;
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
	ВсегоСписаноНПРпоВидуНоменклатуры = ВсегоСписаноНПРпоВидуНоменклатуры + СуммаСписанияПостоянныхРазниц;
	
	Если СуммаСписания > 0 Тогда
		
		// Затраты на производство продукции списываем на счет 40.
		Если (Объект.ТипНоменклатуры = Перечисление.ТипыНоменклатуры.Продукция) 
		 или (Объект.ТипНоменклатуры = Перечисление.ТипыНоменклатуры.Полуфабрикат) Тогда
			Операция.НоваяПроводка(); Операция.РазделительУчета = ЮрЛицо;
			Операция.НомерЖурнала = "ФР";
			Операция.СодержаниеПроводки = "Списание счета 20";
			Операция.ПервичныйДокумент  = глПредставлениеПервичногоДокумента(Контекст);
			Операция.Дебет.Счет = СчетПоКоду("40");
			Операция.Дебет.Субконто(СубконтоВидовПродукцииИУслуг, БухИт.Субконто(СубконтоВидовПродукцииИУслуг));
			Операция.Кредит.Счет = БухИт.Счет;
			Операция.Кредит.Субконто(СубконтоВидовПродукцииИУслуг, 			  БухИт.Субконто(СубконтоВидовПродукцииИУслуг));
			Операция.Кредит.Субконто(ВидыСубконто.СтатьиЗатратНаПроизводство, БухИт.Субконто(ВидыСубконто.СтатьиЗатратНаПроизводство));
			Операция.Кредит.Субконто(ВидыСубконто.Подразделения,			  БухИт.Субконто(ВидыСубконто.Подразделения));
			Операция.Сумма = СуммаСписания;
			     
			// Проводки по постоянным разницам.
			Если СуммаСписанияПостоянныхРазниц <> 0 Тогда
			    Операция.НоваяПроводка(); Операция.РазделительУчета = ЮрЛицо;
				Операция.НомерЖурнала = "ПР";
				Операция.СодержаниеПроводки = "Списание на продукцию (полуфабрикаты)";
				Операция.ПервичныйДокумент  = глПредставлениеПервичногоДокумента(Контекст);
				Операция.Кредит.Счет = СчетПоКоду("НПР.20");
				Операция.Кредит.Субконто(СубконтоВидовПродукцииИУслуг, 			  БухИт.Субконто(СубконтоВидовПродукцииИУслуг));
				Операция.Кредит.Субконто(ВидыСубконто.СтатьиЗатратНаПроизводство, БухИт.Субконто(ВидыСубконто.СтатьиЗатратНаПроизводство));
				Операция.Кредит.Субконто(ВидыСубконто.Подразделения,			  БухИт.Субконто(ВидыСубконто.Подразделения));
				Операция.Сумма = СуммаСписанияПостоянныхРазниц;
			КонецЕсли;
			
		// Затраты по работам и услугам списываем на счет 90.
		ИначеЕсли (Объект.ТипНоменклатуры = Перечисление.ТипыНоменклатуры.Услуга)
			  или (Объект.ТипНоменклатуры = Перечисление.ТипыНоменклатуры.УслугаЕНВД)
			  или (Объект.ТипНоменклатуры = Перечисление.ТипыНоменклатуры.Работа) Тогда
			
		  	Если Объект.ТипНоменклатуры = Перечисление.ТипыНоменклатуры.УслугаЕНВД Тогда
		  	    СуммаСписанияЕНВД = СуммаСписания;
		  		
		  	Иначе
				// Определим части выручки от реализации работ и услуг, облагаемые и не облагаемые ЕНВД.
				БухИт90 = СоздатьОбъект("БухгалтерскиеИтоги"); БухИт90.ИспользоватьРазделительУчета(ЮрЛицо);
				БухИт90.ПериодМ(ДатаДок);
				Выручка = БухИт90.КО(СчетПоКоду("90.1.1"), , , Объект)
						  - БухИт90.ДО(СчетПоКоду("90.3"), , , Объект)
						  - БухИт90.ДО(СчетПоКоду("90.4"), , , Объект)
						  - БухИт90.ДО(СчетПоКоду("90.5"), , , Объект)
						  - БухИт90.ДО(СчетПоКоду("90.6"), , , Объект);
				ВыручкаЕНВД =   БухИт90.КО(СчетПоКоду("90.1.2"), , , Объект);
	
				Если (Выручка + ВыручкаЕНВД) <> 0 Тогда
				    СуммаСписанияЕНВД = СуммаСписания * ВыручкаЕНВД / (Выручка + ВыручкаЕНВД);
				Иначе
					СуммаСписанияЕНВД = 0;
				КонецЕсли;
			КонецЕсли;
			СуммаСписания = СуммаСписания - СуммаСписанияЕНВД;
			
			Если СуммаСписания <> 0 Тогда
			    Операция.НоваяПроводка(); Операция.РазделительУчета = ЮрЛицо;
				Операция.НомерЖурнала = "ФР";
				Операция.СодержаниеПроводки = "Списание счета 20";
				Операция.ПервичныйДокумент  = глПредставлениеПервичногоДокумента(Контекст);
				Операция.Дебет.Счет = СчетПоКоду("90.2.1");
				Операция.Дебет.ВидыНоменклатуры = БухИт.Субконто(ВидыСубконто.ВидыНоменклатуры);
				Операция.Кредит.Счет = БухИт.Счет;
				Операция.Кредит.Субконто(СубконтоВидовПродукцииИУслуг, 			  БухИт.Субконто(СубконтоВидовПродукцииИУслуг));
				Операция.Кредит.Субконто(ВидыСубконто.СтатьиЗатратНаПроизводство, БухИт.Субконто(ВидыСубконто.СтатьиЗатратНаПроизводство));
				Операция.Кредит.Субконто(ВидыСубконто.Подразделения,			  БухИт.Субконто(ВидыСубконто.Подразделения));
				Операция.Сумма = СуммаСписания;
			КонецЕсли;
			
			Если СуммаСписанияЕНВД <> 0 Тогда
			    Операция.НоваяПроводка(); Операция.РазделительУчета = ЮрЛицо;
				Операция.НомерЖурнала = "ФР";
				Операция.СодержаниеПроводки = "Списание счета 20";
				Операция.ПервичныйДокумент  = глПредставлениеПервичногоДокумента(Контекст);
				Операция.Дебет.Счет = СчетПоКоду("90.2.2");
				Операция.Дебет.ВидыНоменклатуры = БухИт.Субконто(ВидыСубконто.ВидыНоменклатуры);
				Операция.Кредит.Счет = БухИт.Счет;
				Операция.Кредит.Субконто(СубконтоВидовПродукцииИУслуг, 			  БухИт.Субконто(СубконтоВидовПродукцииИУслуг));
				Операция.Кредит.Субконто(ВидыСубконто.СтатьиЗатратНаПроизводство, БухИт.Субконто(ВидыСубконто.СтатьиЗатратНаПроизводство));
				Операция.Кредит.Субконто(ВидыСубконто.Подразделения,			  БухИт.Субконто(ВидыСубконто.Подразделения));
				Операция.Сумма = СуммаСписанияЕНВД;
			КонецЕсли;
			
			// Разделим сумму ПР на относящиеся к ЕНВД и не относящиеся к ЕНВД
			СуммаСписанияПостоянныхРазниц_ЕНВД = СуммаСписанияПостоянныхРазниц*(СуммаСписанияЕНВД / (СуммаСписания + СуммаСписанияЕНВД));
			СуммаСписанияПостоянныхРазниц      = СуммаСписанияПостоянныхРазниц - СуммаСписанияПостоянныхРазниц_ЕНВД;
			
			// Проводки по постоянным разницам.
			Если СуммаСписанияПостоянныхРазниц <> 0 Тогда
			    Операция.НоваяПроводка(); Операция.РазделительУчета = ЮрЛицо;
				Операция.НомерЖурнала = "ПР";
				Операция.СодержаниеПроводки = "Списание НПР относящихся к текущему периоду";
				Операция.ПервичныйДокумент  = глПредставлениеПервичногоДокумента(Контекст);
				Операция.Дебет.Счет  = СчетПоКоду("НПР.99");
				Операция.Кредит.Счет = СчетПоКоду("НПР.20");
				Операция.Кредит.Субконто(СубконтоВидовПродукцииИУслуг, 			  БухИт.Субконто(СубконтоВидовПродукцииИУслуг));
				Операция.Кредит.Субконто(ВидыСубконто.СтатьиЗатратНаПроизводство, БухИт.Субконто(ВидыСубконто.СтатьиЗатратНаПроизводство));
				Операция.Кредит.Субконто(ВидыСубконто.Подразделения,			  БухИт.Субконто(ВидыСубконто.Подразделения));
				Операция.Сумма = СуммаСписанияПостоянныхРазниц;
			КонецЕсли;
			
			// Проводки по постоянным разницам.
			Если СуммаСписанияПостоянныхРазниц_ЕНВД <> 0 Тогда
			    Операция.НоваяПроводка(); Операция.РазделительУчета = ЮрЛицо;
				Операция.НомерЖурнала = "ПР";
				Операция.СодержаниеПроводки = "Списание НПР на продукцию (полуфабрикаты)";
				Операция.ПервичныйДокумент  = глПредставлениеПервичногоДокумента(Контекст);
				Операция.Кредит.Счет = СчетПоКоду("НПР.20");
				Операция.Кредит.Субконто(СубконтоВидовПродукцииИУслуг, 			  БухИт.Субконто(СубконтоВидовПродукцииИУслуг));
				Операция.Кредит.Субконто(ВидыСубконто.СтатьиЗатратНаПроизводство, БухИт.Субконто(ВидыСубконто.СтатьиЗатратНаПроизводство));
				Операция.Кредит.Субконто(ВидыСубконто.Подразделения,			  БухИт.Субконто(ВидыСубконто.Подразделения));
				Операция.Сумма = СуммаСписанияПостоянныхРазниц_ЕНВД;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	// Формирование печатной формы
	Если ФормироватьПечатнуюФорму = 1 Тогда
		
		Если глПолучитьСтрокуПоЗначению(ТаблицаРасшифровкаРегламентнойОперации, Объект, "ВидНоменклатуры") = 0 Тогда
			ТаблицаРасшифровкаРегламентнойОперации.НоваяСтрока();
			ТаблицаРасшифровкаРегламентнойОперации.ВидНоменклатуры = Объект;
			ТаблицаРасшифровкаРегламентнойОперации.ТипНоменклатуры = Объект.ТипНоменклатуры;
			ТаблицаРасшифровкаРегламентнойОперации.РасшифровкаПрямыхРасходов   = РасшифровкаПрямыхРасходовПоСтатьям(Объект);
		КонецЕсли;
		
		РасшифровкаПрямыхРасходов = ТаблицаРасшифровкаРегламентнойОперации.РасшифровкаПрямыхРасходов.Получить("Таблица данных");
		
		РасшифровкаПрямыхРасходов.НоваяСтрока();
		РасшифровкаПрямыхРасходов.СтатьяЗатрат                = БухИт.Субконто(ВидыСубконто.СтатьиЗатратНаПроизводство);
		РасшифровкаПрямыхРасходов.Подразделение               = БухИт.Субконто(ВидыСубконто.Подразделения);
		РасшифровкаПрямыхРасходов.НЗПнаНачало                 = БухИт.СНД();
		РасшифровкаПрямыхРасходов.СуммаРасходовЗаМесяц        = ЗатратыСумма;
		РасшифровкаПрямыхРасходов.СуммаРасходовКРаспределению = БухИт.СНД() + ЗатратыСумма;
		РасшифровкаПрямыхРасходов.НЗПнаКонец                  = СуммаНЗП;
		РасшифровкаПрямыхРасходов.СтоимостьВыпуска            = СуммаСписания;
		РасшифровкаПрямыхРасходов.ДокументНЗП                 = ДокументНЗП;
		
		Расшифровка = СоздатьОбъект("СписокЗначений");
		ОсновнаяРасшифровкаОСВ.Выгрузить(Расшифровка);
		Расшифровка.Установить("Счет", БухИт.Счет);
		Расшифровка.Установить("ВидСубконто1", ВидыСубконто.ВидыНоменклатуры);
		Расшифровка.Установить("Субконто1", БухИт.Субконто(ВидыСубконто.ВидыНоменклатуры));
		Расшифровка.Установить("ОтборСубконто1", 1);
		Расшифровка.Установить("ВидСубконто2", ВидыСубконто.СтатьиЗатратНаПроизводство);
		Расшифровка.Установить("Субконто2", БухИт.Субконто(ВидыСубконто.СтатьиЗатратНаПроизводство));
		Расшифровка.Установить("ОтборСубконто2", 2);
		Расшифровка.Установить("ВидСубконто3", ВидыСубконто.Подразделения);
		Расшифровка.Установить("Субконто3", БухИт.Субконто(ВидыСубконто.Подразделения));
		Расшифровка.Установить("ОтборСубконто3", 2);
		РасшифровкаПрямыхРасходов.РасшифровкаОборотноСальдоваяВедомостьПоСчету = Расшифровка;
	КонецЕсли;

КонецПроцедуры // СписатьЗатратыНаВыпускПродукцииБУ()
	
//****************************************************************************** 
// РаспределитьЗатратыНаВыпускПродукцииБУ(БухИтПрод, СебестоимостьПродукции, СуммаПрямыхЗатрат, ВидПродукции)
//
// Параметры:
//  БухИтПрод - ссылка на результаты запроса по движениям готовой продукции и полуфабрикатов
//  СебестоимостьПродукции - таблица в которой хранятся результаты расчета себестоимости по данному виду 
//							 продукции
//  СуммаПрямыхЗатрат - общая сумма прямых затрат на выпуск продукции данного вида, которая подлежит
//						распределению по номенклатуре
//  ВсегоСписаноНПРпоВидуНоменклатуры - общая сумма постоянных разниц по виду номенклатуры,
//                                      которую необходимо распределить по выпущенной продукции
//  ВидПродукции - вид продукции, выпуск которой рассчитывается
//
// Вызывается из формул элементов диалога:
//  Нет.
//
// Описание:
//  В процедуре выполняется распределение общей суммы прямых затрат связанных с выпуском продукции 
//  (полуфабрикатов) данного вида на всю выпущенную продукцию данного вида. Распределение выполняется
//  пропорционально выпуску продукции за месяц по плановой себестоимости, затем происходит 
//  расчет фактической средневзвешенной себестоимости и себестоимости выпуска продукции в текущем периоде.
//
Процедура РаспределитьЗатратыНаВыпускПродукцииБУ(БухИтПрод, СебестоимостьПродукции, СуммаПрямыхЗатрат, ВсегоСписаноНПРпоВидуНоменклатуры, ВидПродукции)

	Сч40 = СчетПоКоду("40");
	БазаРаспределения = 0;
	
	// отбираем информацию по выпуску продукции данного вида
	БухИтПрод.ВыбратьСчета();
	Пока БухИтПрод.ПолучитьСчет() = 1 Цикл
		// отбираем операции выпуска продукции и полуфабрикатов
		БухИтПрод.ВыбратьСубконто(1, , 1);
		Пока БухИтПрод.ПолучитьСубконто(1) = 1 Цикл
			Если (ПолучитьВидПродукции(БухИтПрод.Субконто(1)) = ВидПродукции)
			   и (БухИтПрод.ДО("К") <> 0) Тогда
				// отфильтровываем только продукцию заданного вида
				СебестоимостьПродукции.НоваяСтрока();
				СебестоимостьПродукции.Продукция = БухИтПрод.Субконто(1);

				// анализируем выпуск продукции в текущем периоде
				БухИтПрод.ВыбратьКорСчета();
				Пока БухИтПрод.ПолучитьКорСчет() = 1 Цикл
					Если БухИтПрод.КорСчет = Сч40 Тогда
						БухИтПрод.ПолучитьКорСубконто(1, , ВидПродукции);
						БухИтПрод.ПолучитьКорСубконто(2, , Перечисление.СтоимостьВыпуска.ПлановаяСтоимость);
		
						СебестоимостьПродукции.КоличествоВыпуска = БухИтПрод.КорДО("К");
						СебестоимостьПродукции.ПлановаяСтоимость = БухИтПрод.КорДО("С");
						
					ИначеЕсли БухИтПрод.КорСчет <> БухИтПрод.Счет Тогда // внутреннее перемещение по складам не учитываем
						СебестоимостьПродукции.КоличествоПрочееПоступление = СебестоимостьПродукции.КоличествоПрочееПоступление + БухИтПрод.КорДО("К");
						СебестоимостьПродукции.СуммаПрочееПоступление      = СебестоимостьПродукции.СуммаПрочееПоступление + БухИтПрод.КорДО("С");
					КонецЕсли;
				КонецЦикла;

			КонецЕсли;	

		КонецЦикла;

	КонецЦикла;

	БазаРаспределения = СебестоимостьПродукции.Итог("ПлановаяСтоимость");

	Если БазаРаспределения <> 0 Тогда
		// распределяем общую сумму затрат продукции данного вида по конкретным номенклатурным единицам
		// пропорционально "Выпущенное количество" * "ПлановаяСебестоимость"
		Распределено = 0;
		РаспределеноЗатрат = 0;
		РаспределеноНПР    = 0;
		
		СебестоимостьПродукции.ВыбратьСтроки();
		Пока СебестоимостьПродукции.ПолучитьСтроку() = 1 Цикл
			Распределено = Распределено + СебестоимостьПродукции.ПлановаяСтоимость;
			СебестоимостьПродукции.СуммаВыпуска = Окр(СуммаПрямыхЗатрат*Распределено/БазаРаспределения, 2) - РаспределеноЗатрат;
			РаспределеноЗатрат = РаспределеноЗатрат + СебестоимостьПродукции.СуммаВыпуска;
            
			// Распределение постоянных разниц
			СебестоимостьПродукции.СуммаНПР = ВсегоСписаноНПРпоВидуНоменклатуры*Распределено/БазаРаспределения - РаспределеноНПР;
			РаспределеноНПР = РаспределеноНПР + СебестоимостьПродукции.СуммаНПР;
		КонецЦикла;
	КонецЕсли;
	
	// Формирование печатной формы
	Если ФормироватьПечатнуюФорму = 1 Тогда
		
		// Если были расходы по выпуску продукции, то отразим в печатной форме распределение расходов
		Если СуммаПрямыхЗатрат > 0 Тогда
			Если глПолучитьСтрокуПоЗначению(ТаблицаРасшифровкаРегламентнойОперации, ВидПродукции, "ВидНоменклатуры") = 1 Тогда
				ТаблицаРасшифровкаРегламентнойОперации.РасшифровкаВыпускаПродукции = РасшифровкаРаспределенияПрямыхРасходов(ВидПродукции);
				                                      
				РасшифровкаВыпускаПродукции = ТаблицаРасшифровкаРегламентнойОперации.РасшифровкаВыпускаПродукции.Получить("Таблица данных");
				
				СебестоимостьПродукции.ВыбратьСтроки();
				Пока СебестоимостьПродукции.ПолучитьСтроку() = 1 Цикл
					
					РасшифровкаВыпускаПродукции.НоваяСтрока();
					РасшифровкаВыпускаПродукции.Продукция         = СебестоимостьПродукции.Продукция;
					РасшифровкаВыпускаПродукции.КоличествоВыпуска = СебестоимостьПродукции.КоличествоВыпуска;
					РасшифровкаВыпускаПродукции.ПлановаяСтоимость = СебестоимостьПродукции.ПлановаяСтоимость;
					РасшифровкаВыпускаПродукции.СуммаВыпуска      = СебестоимостьПродукции.СуммаВыпуска;
					
				    РасшифровкаВыпускаПродукции.Коэффициент = ?(БазаРаспределения = 0, 0, РасшифровкаВыпускаПродукции.ПлановаяСтоимость/БазаРаспределения);
					
					// формирование расшифровки
					Расшифровка = СоздатьОбъект("СписокЗначений");
					ОсновнаяРасшифровкаОПП.Выгрузить(Расшифровка);
					
					Расшифровка.Установить("ДтКт", 2);
					
					Расшифровка.Установить("Счет", Сч40);
					Расшифровка.Установить("ВидСубконто1", ВидыСубконто.ВидыНоменклатуры);
					Расшифровка.Установить("Субконто1",    ВидПродукции);
					Расшифровка.Установить("ВидСубконто2", ВидыСубконто.СтоимостьВыпуска);
					Расшифровка.Установить("Субконто2",    Перечисление.СтоимостьВыпуска.ПлановаяСтоимость);
					                           
					//Расшифровка.Установить("КорСчет", БухИт.КорСчет);
					Расшифровка.Установить("КорВидСубконто1", ВидыСубконто.Номенклатура);
					Расшифровка.Установить("КорСубконто1", РасшифровкаВыпускаПродукции.Продукция);
					РасшифровкаВыпускаПродукции.РасшифровкаОтчетПоПроводкам = Расшифровка;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // РаспределитьЗатратыНаВыпускПродукцииБУ()

//****************************************************************************** 
// РассчитатьСебестоимостьПоВидуПродукцииБУ(БухИт, БухИтПрод, Объект, СтекВызовов,
//											УровеньРекурсии, Результат, ТабРез, ОбработанныеОбъекты, ЗапросНЗП)
//
// Параметры:
//  БухИт - результаты запроса к бухгалтерским итогам, содержащего все данные по прямым расходам на выпуск продукции
//  БухИтПрод - результаты запроса к бухгалтерским итогм содержащие данные по движению продукции
//  Объект - вид номенклатуры (продукции) по которому выполняется в данный момент расчет себестоимости
//  СтекВызовов - таблица хранящая историю всех вызовов процедуры (для анализа рекурсии)
//  УровеньРекурсии - текущая глубина рекурсивного вызова
//  Результат - результат расчета себестоимости на текущем уровне рекурсии
//  ТабРез - таблица значений, содержащая результаты расчетов 
//			 "передельных" списаний (продукция или полуфабрикат -> ВидНоменклатуры)
//  ОбработанныеОбъекты - список значений, хранящий ссылки на виды продукции, себестоимость по которым уже была расчитана
//  ЗапросНЗП - результаты запроса к документам НЗП
//
// Вызывается из формул элементов диалога:
//  Нет.
//
// Описание:
//  В процедуре выполняется расчет себестоимости выпуска продукции (полуфабрикатов) за текущий месяц
//  Выполняются корректирующие проводки с целью отражения в бухгалтерских итогах операций движения
//  готовой продукции и полуфабрикатов по рассчитанной фактической себестоимости
//
Процедура РассчитатьСебестоимостьПоВидуПродукцииБУ(БухИт, БухИтПрод, Объект, СтекВызовов,
												   УровеньРекурсии = 1, Результат, ТабРез, ОбработанныеОбъекты, ЗапросНЗП)

	Если ОбработанныеОбъекты.НайтиЗначение(Объект) <> 0 Тогда
		// Для этого вида продукции уже был выполнен расчет и корректировка себестоимости
		Возврат;
		
	КонецЕсли;

	// подготавливаем исходные данные для расчета
	ФактическиеЗатраты                 = 0;
	ВсегоСписаноНПРпоВидуНоменклатуры  = 0;

	Если БухИт.ПолучитьСубконто(СубконтоВидовПродукцииИУслуг, , Объект) = 1 Тогда
        
		// информация по данному виду продукции есть в рассчитанных итогах
		БухИт.ВыбратьСубконто(ВидыСубконто.СтатьиЗатратНаПроизводство);
		Пока (БухИт.ПолучитьСубконто(ВидыСубконто.СтатьиЗатратНаПроизводство) = 1)
		   и (Результат >= 0) Цикл
			БухИт.ВыбратьСубконто(ВидыСубконто.Подразделения);
			Пока (БухИт.ПолучитьСубконто(ВидыСубконто.Подразделения) = 1) 
			   и (Результат >= 0) Цикл
				
			   	ЗатратыСумма = 0;
			   	СуммаНПР     = 0;
			   	
			   	БухИт.ВыбратьКорСчета();
				Пока (БухИт.ПолучитьКорСчет() = 1)
				   и (Результат >= 0) Цикл
				   	
				   	Если (БухИт.ВыбранаПоДт() = 1)
				   	   и ((БухИт.КорСчет = СчетПоКоду("43"))
				   	  или (БухИт.КорСчет = СчетПоКоду("21"))) Тогда
						БухИт.ВыбратьКорСубконто(1, , 1);
					 	// встретили ситуацию, когда на себестоимость рассчитываемого вида продукции
						// влияет себестоимость другой продукции или полуфабрикатов, т.е. имеем дело с многопередельным производством
						Пока (БухИт.ПолучитьКорСубконто(1) = 1)
						   и (Результат >= 0) Цикл
							КорВидПродукции = ПолучитьВидПродукции(БухИт.КорСубконто(1));
						   	
							Если (СтекВызовов.НайтиЗначение(КорВидПродукции, , "Субконто1") = 0)
							   и (Объект <> КорВидПродукции) 
							   и (ТипЗначенияСтр(КорВидПродукции) = "Справочник") Тогда
								Стр = НайтиВТаблицеРезБУ(ТабРез, Объект, БухИт.Субконто(2), БухИт.Субконто(3), БухИт.КорСубконто(1));
								Если (Стр = 0) Тогда
									// Расчет предыдущего передела еще не выполнен
									УровеньРекурсии = УровеньРекурсии + 1;
									СтекВызовов.НоваяСтрока();
									СтекВызовов.Счет 	 = БухИт.Счет;
									СтекВызовов.Субконто1 = Объект;
									СтекВызовов.Субконто2= БухИт.Субконто(2);
									СтекВызовов.Субконто3= БухИт.Субконто(3);
									СтекВызовов.КорСчет  = БухИт.КорСчет;
									СтекВызовов.КорСубконто = БухИт.КорСубконто(1);
		
									// РЕКУРСИЯ!
									РассчитатьСебестоимостьПоВидуПродукцииБУ(БухИт, БухИтПрод,  КорВидПродукции, СтекВызовов,
																			 УровеньРекурсии, Результат, ТабРез, ОбработанныеОбъекты, ЗапросНЗП);
		
									// повторная попытка спозиционироваться на результатах расчета "передельных" списаний			    
									Стр = НайтиВТаблицеРезБУ(ТабРез, Объект, БухИт.Субконто(2), БухИт.Субконто(3), БухИт.КорСубконто(1));
									
								КонецЕсли;
		
								Если (Результат >= 0)
								   и (Стр <> 0) Тогда
									// при расчете себестоимости ошибки не возникло можно продолжать вести расчеты
									// результаты расчета себестоимости в данном случае помещены в таблице результатов "РезРасчетов"
									ЗатратыСумма = ЗатратыСумма + ТабРез.ПолучитьЗначение(Стр, "ЗатратыСумма");
									СуммаНПР     = СуммаНПР     + ТабРез.ПолучитьЗначение(Стр, "СуммаНПР");
								КонецЕсли;
		
							Иначе
								// обнаружена обратная связь в цепочке взаимных списаний между видами продукции
								// разных переделов. Рассчитать себестоимость в таких условиях невозможно!
								СтекВызовов.НоваяСтрока();
								СтекВызовов.Счет 	  = БухИт.Счет;
								СтекВызовов.Субконто1 = Объект;
								СтекВызовов.КорСчет   = БухИт.КорСчет;
								СтекВызовов.КорСубконто = БухИт.КорСубконто(1);
		
								Результат = -3;
								
							КонецЕсли;
		
						КонецЦикла;
		
					Иначе
						// все остальные виды прямых расходов
						ЗатратыСумма = ЗатратыСумма + БухИт.КорДО("С") - БухИт.КорКО("С");
		
					КонецЕсли;
		
				КонецЦикла;
				
				Если (Результат >= 0) Тогда
					// Списываем фактические затраты текущего месяца со счета 20
					СписатьЗатратыНаВыпускПродукцииБУ(БухИт, ЗатратыСумма, СуммаНПР, ЗапросНЗП, ФактическиеЗатраты, ВсегоСписаноНПРпоВидуНоменклатуры, Объект);
				КонецЕсли;

			КонецЦикла;
		КонецЦикла;

	КонецЕсли;
	
	// Формирование печатной формы
	Если ФормироватьПечатнуюФорму = 1 Тогда
		
		// В печатную форму по прямым расходам запишем итоговые суммы по видам номенклатуры
		Если глПолучитьСтрокуПоЗначению(ТаблицаРасшифровкаРегламентнойОперации, Объект, "ВидНоменклатуры") = 1 Тогда
			РасшифровкаПрямыхРасходов = ТаблицаРасшифровкаРегламентнойОперации.РасшифровкаПрямыхРасходов.Получить("Таблица данных");
			
			ТаблицаРасшифровкаРегламентнойОперации.НЗПнаНачало                 = РасшифровкаПрямыхРасходов.Итог("НЗПнаНачало");
			ТаблицаРасшифровкаРегламентнойОперации.СуммаРасходовЗаМесяц        = РасшифровкаПрямыхРасходов.Итог("СуммаРасходовЗаМесяц");
			ТаблицаРасшифровкаРегламентнойОперации.СуммаРасходовКРаспределению = РасшифровкаПрямыхРасходов.Итог("СуммаРасходовКРаспределению");
			ТаблицаРасшифровкаРегламентнойОперации.НЗПнаКонец                  = РасшифровкаПрямыхРасходов.Итог("НЗПнаКонец");
			ТаблицаРасшифровкаРегламентнойОперации.СтоимостьВыпуска            = РасшифровкаПрямыхРасходов.Итог("СтоимостьВыпуска");
		КонецЕсли;
		
	КонецЕсли;
	
	Если Результат >= 0 Тогда

		Если (Объект.ТипНоменклатуры = Перечисление.ТипыНоменклатуры.Продукция) 
		 или (Объект.ТипНоменклатуры = Перечисление.ТипыНоменклатуры.Полуфабрикат) Тогда
			// распределяем общую сумму прямых расходов на производство продукции данного вида
			// на весь выпуск и получаем таким образом себестоимость продукции по текущему виду номенклатуры
			// результат накапливаем в таблице значений СебестоимостьПродукции
			СебестоимостьПродукции.УдалитьСтроки();
			
			РаспределитьЗатратыНаВыпускПродукцииБУ(БухИтПрод, СебестоимостьПродукции, ФактическиеЗатраты, ВсегоСписаноНПРпоВидуНоменклатуры, Объект);
			
			КорректировкаСебестоимостиГПиПФвБУ(БухИтПрод, СебестоимостьПродукции, ТабРез, Объект);

		КонецЕсли;
		
		// фиксируем рассчитанный вид продукции в списке для исключения повторных расчетов
		ОбработанныеОбъекты.ДобавитьЗначение(Объект);

	КонецЕсли;
	
	// возврат из процедуры
	Если УровеньРекурсии > 1 Тогда
		// восстанавливаем позиционирование в результатах запроса, которое было до РЕКУРСИВНОГО ВЫЗОВА
		// повторно инициализируем выборку по данным из стека вызовов
		УровеньРекурсии = УровеньРекурсии - 1;

		БухИт.ПолучитьСчет(, СтекВызовов.ПолучитьЗначение(УровеньРекурсии,"Счет"));
		БухИт.ПолучитьСубконто(1, , СтекВызовов.ПолучитьЗначение(УровеньРекурсии,"Субконто1"));
		БухИт.ПолучитьСубконто(2, , СтекВызовов.ПолучитьЗначение(УровеньРекурсии,"Субконто2"));
		БухИт.ПолучитьСубконто(3, , СтекВызовов.ПолучитьЗначение(УровеньРекурсии,"Субконто3"));
		БухИт.ВыбратьКорСчета(, 1);
		БухИт.ПолучитьКорСчет(, СтекВызовов.ПолучитьЗначение(УровеньРекурсии,"КорСчет"));
		БухИт.ПолучитьКорСубконто(1, , СтекВызовов.ПолучитьЗначение(УровеньРекурсии,"КорСубконто"));

		Если Результат >= 0 Тогда
			// при нормальном завершении - затираем значение в стеке вызовов
			СтекВызовов.УдалитьСтроку(УровеньРекурсии);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // РассчитатьСебестоимостьПоВидуПродукцииБУ()

//****************************************************************************** 
// РасчетСебестоимостиПродукцииИПолуфабрикатовБУ()
//
// Параметры:
//
// Вызывается из формул элементов диалога:
//  Нет.
//
// Описание:
//  В процедуре выполняется расчет себестоимости продукции и полуфабрикатов для целей налогового учета
//  и выполняется корректировка бухгалтерских итогов с целью отражения движений продукции и полуфабрикатов
//  за месяц по рассчитанной себестоимости. Расчет ведется отдельно по видам номенклатуры
//
Процедура РасчетСебестоимостиПродукцииИПолуфабрикатовБУ()
	
	//Если ранее на счет 20 были списаны общепроизводственные или общехозяйственные
	//расходы, запишем проводки, чтобы учесть эти суммы при закрытии счета 20
	Если Операция.КоличествоПроводок() > 0 Тогда
		Операция.ЗаписатьПроводки();
	КонецЕсли;
	
	// Формирование печатной формы
	Если ФормироватьПечатнуюФорму = 1 Тогда
		НаименованиеРегламентнойОперации = "Расчет и корректировка себестоимости ГП и ПФ";
		Таб.ВывестиСекцию("РегламентнаяОперация");
		ИнициализироватьРасшифровкуПоНЗП();
		ИнициализироватьРасшифровкуПоКорректировкеГПиПФ();    
	КонецЕсли;
    
	// определяем остатки НЗП в БУ в текущем месяце
	ЗапросНЗП = "";
	ПроанализироватьОстаткиНЗП(ЗапросНЗП);	

	// создаем таблицу для хранения результатов расчета "передельных" (полуфабрикат - вид номенклатуры)
	// сумм списания, на отдельных переделах многопередельного производства
	ТабРез = СоздатьОбъект("ТаблицаЗначений");
	// Вид номенклатуры
	ТабРез.НоваяКолонка("Объект", "Справочник");
	ТабРез.НоваяКолонка("СтатьяЗатрат");
	ТабРез.НоваяКолонка("Подразделение");
	// полуфабрикат
	ТабРез.НоваяКолонка("КорОбъект", "Справочник");
	ТабРез.НоваяКолонка("ЗатратыСумма", "Число", 15, 2);
	// учет постоянных разниц
	ТабРез.НоваяКолонка("СуммаНПР", "Число", 15, 2);

	// список для фиксации тех видов продукции, себестоимость по которым уже рассчитана
	ОбработанныеОбъекты = СоздатьОбъект("СписокЗначений");

	// выполняем запрос к бух итогам для анализа движений готовой продукции и полуфабрикатов
	БухИтПрод = СоздатьОбъект("БухгалтерскиеИтоги"); БухИтПрод.ИспользоватьРазделительУчета(ЮрЛицо);
	БухИтПрод.ИспользоватьПланСчетов(ОсновнойПланСчетов());
	БухИтПрод.ИспользоватьСубконто(ВидыСубконто.Номенклатура, , 1);
	БухИтПрод.ИспользоватьСубконто(ВидыСубконто.МестаХранения, , 1);
	БухИтПрод.ИспользоватьКорСубконто(, , 1);
	БухИтПрод.ИспользоватьКорСубконто(, , 1);
	БухИтПрод.ИспользоватьКорСубконто(, , 1);
	БухИтПрод.ВключатьСубсчета(-1, -1);
	БухИтПрод.ВыполнитьЗапрос(ДатаНач, ДатаКон, "43,21",,, 3, "Операция","СК");

	БухИт = СоздатьОбъект("БухгалтерскиеИтоги"); БухИт.ИспользоватьРазделительУчета(ЮрЛицо);
	БухИт.ИспользоватьПланСчетов(ОсновнойПланСчетов());
	БухИт.ИспользоватьСубконто(СубконтоВидовПродукцииИУслуг,, 1);
	БухИт.ИспользоватьСубконто(ВидыСубконто.СтатьиЗатратНаПроизводство,, 1);
	БухИт.ИспользоватьСубконто(ВидыСубконто.Подразделения,, 1);
	БухИт.ИспользоватьКорСубконто(,, 1);
	БухИт.ИспользоватьКорСубконто(,, 1);
	БухИт.ИспользоватьКорСубконто(,, 1);
	БухИт.ВключатьСубсчета(-1, -1);
	БухИт.ВыполнитьЗапрос(ДатаНач, ДатаКон, "20",,, 3,,"СК");
	
	СебестоимостьПродукции = СоздатьОбъект("ТаблицаЗначений");
	СебестоимостьПродукции.НоваяКолонка("Продукция", "Справочник");
	СебестоимостьПродукции.НоваяКолонка("КоличествоВыпуска", "Число", 15, 3);
	СебестоимостьПродукции.НоваяКолонка("КоличествоПрочееПоступление", "Число", 15, 3);
	СебестоимостьПродукции.НоваяКолонка("УчтенноеКоличество", "Число", 15, 3);
	СебестоимостьПродукции.НоваяКолонка("ПлановаяСтоимость", "Число", 15, 2);
	СебестоимостьПродукции.НоваяКолонка("СуммаВыпуска", "Число", 15, 2);
	СебестоимостьПродукции.НоваяКолонка("СуммаПрочееПоступление", "Число", 15, 2);
	СебестоимостьПродукции.НоваяКолонка("ФактическаяСредняяСебестоимость", "Число");
	СебестоимостьПродукции.НоваяКолонка("ВсегоСумма", "Число", 15, 2);
	СебестоимостьПродукции.НоваяКолонка("УчтеноСписанноеКоличество", "Число");
	СебестоимостьПродукции.НоваяКолонка("СуммаНПР", "Число", 15, 2);
	СебестоимостьПродукции.НоваяКолонка("ВсегоНПР", "Число", 15, 2);
	СебестоимостьПродукции.НоваяКолонка("УчтеннаяСуммаНПРВыпуска", "Число", 15, 2);
	СебестоимостьПродукции.НоваяКолонка("УчтеннаяСуммаНПРСписания", "Число", 15, 2);
	
	СписокОтбираемыхВидовПродукции = СоздатьОбъект("СписокЗначений");
	СписокОтбираемыхВидовПродукции.ДобавитьЗначение(Перечисление.ТипыНоменклатуры.Продукция);
	СписокОтбираемыхВидовПродукции.ДобавитьЗначение(Перечисление.ТипыНоменклатуры.Полуфабрикат);
	СписокОтбираемыхВидовПродукции.ДобавитьЗначение(Перечисление.ТипыНоменклатуры.Услуга);
	СписокОтбираемыхВидовПродукции.ДобавитьЗначение(Перечисление.ТипыНоменклатуры.Работа);
	СписокОтбираемыхВидовПродукции.ДобавитьЗначение(Перечисление.ТипыНоменклатуры.УслугаЕНВД);
	
	// Создадим список видов номенклатуры, по которым было движение продукции.
	СписокВидовНоменклатуры = СоздатьОбъект("СписокЗначений");
	БухИтПрод.ВыбратьСубконто(ВидыСубконто.Номенклатура);
	Пока БухИтПрод.ПолучитьСубконто(ВидыСубконто.Номенклатура) = 1 Цикл
		СписокВидовНоменклатуры.ДобавитьЗначение(ПолучитьВидПродукции(БухИтПрод.Субконто(ВидыСубконто.Номенклатура)));
	КонецЦикла;
	
	БухИт.ВыбратьСубконто(СубконтоВидовПродукцииИУслуг);
	Пока БухИт.ПолучитьСубконто(СубконтоВидовПродукцииИУслуг) = 1 Цикл
		ВидПродукции = БухИт.Субконто(СубконтоВидовПродукцииИУслуг);
		Если СписокОтбираемыхВидовПродукции.НайтиЗначение(ВидПродукции.ТипНоменклатуры) <> 0  Тогда
			СписокВидовНоменклатуры.ДобавитьЗначение(ВидПродукции);    
		КонецЕсли;
	КонецЦикла;
         
	НомерВидаНоменклатуры = 1;
	Пока НомерВидаНоменклатуры <= СписокВидовНоменклатуры.РазмерСписка() Цикл
		
		ВидНоменклатуры = СписокВидовНоменклатуры.ПолучитьЗначение(НомерВидаНоменклатуры,);

		// создаем специальную таблицу для хранения истории возможных рекурсивных попыток расчета
		// себестоимости на более ранних переделах
		СтекВызовов = СоздатьОбъект("ТаблицаЗначений");
		СтекВызовов.НоваяКолонка("Счет");
		СтекВызовов.НоваяКолонка("Субконто1");
		СтекВызовов.НоваяКолонка("Субконто2");
		СтекВызовов.НоваяКолонка("Субконто3");
		СтекВызовов.НоваяКолонка("КорСчет");
		СтекВызовов.НоваяКолонка("КорСубконто");
		
		Результат = 0;

		РассчитатьСебестоимостьПоВидуПродукцииБУ(БухИт, БухИтПрод, ВидНоменклатуры,
												 СтекВызовов, 1, Результат, ТабРез, ОбработанныеОбъекты, ЗапросНЗП);
		
		Если Результат = -3 Тогда
			ТекстСообщения = "Невозможно рассчитать себестоимость для вида продукции: """ + СтекВызовов.ПолучитьЗначение(1, "Субконто1") + """ по причине циклического списания!";
			глСообщениеПроведения(ТекстСообщения, ТекущийДокумент(), -1);
		КонецЕсли;
		
		Если Результат < 0 Тогда
			СтрокаСписаний = "Последовательность списаний: ";
			Для т = 1 По СтекВызовов.КоличествоСтрок() Цикл
				СтрокаСписаний = СтрокаСписаний + ?(т <> 1,""" <= ""","""") + СтекВызовов.ПолучитьЗначение(т, "Субконто1");
			КонецЦикла;
			СтрокаСписаний = СтрокаСписаний + """ <= """ + ПолучитьВидПродукции(СтекВызовов.ПолучитьЗначение(СтекВызовов.КоличествоСтрок(), "КорСубконто")) + """";
			глСообщениеПроведения(СтрокаСписаний, ТекущийДокумент(), -1);
		КонецЕсли;
		
		НомерВидаНоменклатуры = НомерВидаНоменклатуры + 1;
			
	КонецЦикла;
	
	// Формирование печатной формы
	Если ФормироватьПечатнуюФорму = 1 Тогда
		
		// Расчет стоимости выпущенной продукции (полуфабрикатов)
		Если ТаблицаРасшифровкаРегламентнойОперации.КоличествоСтрок() > 0 Тогда
			Расшифровка = СоздатьОбъект("СписокЗначений");
			Расшифровка.ДобавитьЗначение("ПрямыеРасходы", "Наименование таблицы");
			Расшифровка.ДобавитьЗначение(ТаблицаРасшифровкаРегламентнойОперации, "Таблица данных");
			Расшифровка.ДобавитьЗначение(ДатаДок, "Дата операции");
			
			НаименованиеРегламентнойПодоперации = "Расчет стоимости выпущенной продукции (полуфабрикатов)";
			Таб.ВывестиСекцию("ПодоперацияВыполнена");
			
		Иначе
			НаименованиеРегламентнойПодоперации = "Прямых расходов в текущем месяце нет";
			Таб.ВывестиСекцию("ПодоперацияНеВыполнена");    
		КонецЕсли;
		
		// Корректировка стоимости
		Если ТаблицаРасшифровкаРегламентнойОперацииДополнительно.КоличествоСтрок() > 0 Тогда
			Расшифровка = СоздатьОбъект("СписокЗначений");
			Расшифровка.ДобавитьЗначение("ТаблицаКорректировкаСредневзвешеннойСтоимостиГПиПФ", "Наименование таблицы");
			Расшифровка.ДобавитьЗначение(ТаблицаРасшифровкаРегламентнойОперацииДополнительно, "Таблица данных");
			Расшифровка.ДобавитьЗначение(ДатаДок, "Дата операции");
			
			НаименованиеРегламентнойПодоперации = "Корректировка фактической стоимости продукции и полуфабрикатов";
			Таб.ВывестиСекцию("ПодоперацияВыполнена");
			
		Иначе
			НаименованиеРегламентнойПодоперации = "Стоимость продукции и полуфабрикатов, находящихся на складе, не нуждается в корректировке";
			Таб.ВывестиСекцию("ПодоперацияНеВыполнена");	
		КонецЕсли;
		
		ИнициализироватьРасшифровкуПоКорректировкеТоваровОтгруженных();
	КонецЕсли;
	
	Если Операция.КоличествоПроводок() > 0 Тогда
		Операция.ЗаписатьПроводки();
	КонецЕсли;
	
	// Корректировка стоимости продукции (полуфабрикатов), отгруженной без перехода права собственности
	СписокПараметров = СоздатьОбъект("СписокЗначений");
	
	БухИт45 = СоздатьОбъект("БухгалтерскиеИтоги"); БухИт45.ИспользоватьРазделительУчета(ЮрЛицо);
	БухИт45.ИспользоватьСубконто(ВидыСубконто.Контрагенты);
	БухИт45.ИспользоватьСубконто(ВидыСубконто.Договоры);
	БухИт45.ИспользоватьСубконто(ВидыСубконто.Номенклатура);
	БухИт45.ИспользоватьКорСубконто();  
	БухИт45.ИспользоватьКорСубконто();
	БухИт45.ИспользоватьКорСубконто();
	БухИт45.ВключатьСубсчета(, -1);
	БухИт45.ВыполнитьЗапрос(ДатаНач, ДатаКон, "45",,, 3, "Операция",);
	БухИт45.ВыбратьСубконто(ВидыСубконто.Контрагенты);
	Пока БухИт45.ПолучитьСубконто(ВидыСубконто.Контрагенты) = 1 Цикл
		БухИт45.ВыбратьСубконто(ВидыСубконто.Договоры);
		Пока БухИт45.ПолучитьСубконто(ВидыСубконто.Договоры) = 1 Цикл                                                          
			БухИт45.ВыбратьСубконто(ВидыСубконто.Номенклатура);
			Пока БухИт45.ПолучитьСубконто(ВидыСубконто.Номенклатура) = 1 Цикл
				
				Если (БухИт45.Субконто(ВидыСубконто.Номенклатура).ТипНоменклатуры = Перечисление.ТипыНоменклатуры.Продукция)
				 или (БухИт45.Субконто(ВидыСубконто.Номенклатура).ТипНоменклатуры = Перечисление.ТипыНоменклатуры.Полуфабрикат) Тогда
					РасчетПостоянныхРазниц(БухИт45, СписокПараметров);
					КорректировкаСреднейСтоимости(БухИт45,, СписокПараметров, 1);
				КонецЕсли;
				
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	
	// Формирование печатной формы
	Если ФормироватьПечатнуюФорму = 1 Тогда
		Если ТаблицаРасшифровкаРегламентнойОперации.КоличествоСтрок() > 0 Тогда
			Расшифровка = СоздатьОбъект("СписокЗначений");
			Расшифровка.ДобавитьЗначение("ТаблицаКорректировкаТоваровОтгруженных", "Наименование таблицы");
			Расшифровка.ДобавитьЗначение(ТаблицаРасшифровкаРегламентнойОперации, "Таблица данных");
			Расшифровка.ДобавитьЗначение(ДатаДок, "Дата операции");
			
			НаименованиеРегламентнойПодоперации = "Корректировка фактической стоимости продукции, отгруженной без перехода права собственности";
			Таб.ВывестиСекцию("ПодоперацияВыполнена");
		Иначе
			НаименованиеРегламентнойПодоперации = "Стоимость продукции (полуфабрикатов), отгруженных без перехода права собственности, не нуждается в корректировке";
			Таб.ВывестиСекцию("ПодоперацияНеВыполнена");	
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры // РасчетСебестоимостиПродукцииИПолуфабрикатовБУ()

//******************************************************************************
Функция СтатьяЗатратНаПроизводство(НаименованиеСтатьи)
	СпрСтатейЗатрат = СоздатьОбъект("Справочник.СтатьиЗатратНаПроизводство");
	Если СпрСтатейЗатрат.НайтиПоНаименованию(НаименованиеСтатьи, 0, 1) = 0 Тогда
	    СпрСтатейЗатрат.Новый();
		СпрСтатейЗатрат.Наименование = НаименованиеСтатьи;
	    СпрСтатейЗатрат.Записать();
	КонецЕсли;
	
	Возврат СпрСтатейЗатрат.ТекущийЭлемент();
КонецФункции //СтатьяЗатратНаПроизводство

//******************************************************************************
Функция ОстатокНезавершенногоПроизводства(ВидНоменклатуры, СтатьяЗатрат, Подразделение)
	Если ЗапросПоОстаткамНезавершенногоПроизводства.Получить(ВидНоменклатуры, СтатьяЗатрат, Подразделение) = 1 Тогда
		Возврат ЗапросПоОстаткамНезавершенногоПроизводства.Остаток;
	Иначе
		Возврат 0;
	КонецЕсли;
КонецФункции

//******************************************************************************
// ОтразитьНепринимаемыеРасходыПоСчетуНПР(БухИт,  СчетНПР, Субк)
//
// Параметры:
//  Нет.
//
// Вызывается из формул элементов диалога:
//  Нет.
//
// Описание:
//  Здесь описывается процедура.
//
Процедура ОтразитьНепринимаемыеРасходыПоСчетуНПР(БухИт,  СчетНПР, СтатьяЗатрат, Субк[], ВсегоПостоянныхРазниц)
	
	СуммаПостоянныхРазниц = НПР.ДО(СчетНПР,,, Субк[1], Субк[2], Субк[3])
	                      - НПР.КО(СчетНПР,,, Субк[1], Субк[2], Субк[3]);
					  
	// Отразим на счете НПР еще не отраженные расходы с видом расходов - не принимаемые к НУ.
	Если СтатьяЗатрат.ВидРасходовДляНалоговогоУчета = Перечисление.ГруппыВидыРасходов.НеПринимаемые Тогда
	    НепринимаемыеРасходы = БухИт.ДО() - БухИт.КО();
		НеОтраженоНаСчетеНПР = НепринимаемыеРасходы - СуммаПостоянныхРазниц;
		Если НеОтраженоНаСчетеНПР > 0 Тогда
		    Операция.НоваяПроводка(); Операция.РазделительУчета = ЮрЛицо;
			Операция.НомерЖурнала = "ПР";
			Операция.СодержаниеПроводки = "Не принимаемые расходы";
			Если ПустоеЗначение(СчетНПР) = 0 Тогда
				Операция.Дебет.Счет = СчетНПР;
			КонецЕсли;
			Операция.Дебет.Субконто(1, Субк[1]);
			Операция.Дебет.Субконто(2, Субк[2]);
			Операция.Дебет.Субконто(3, Субк[3]);
			Операция.Сумма = НеОтраженоНаСчетеНПР;
		КонецЕсли;
		ВсегоПостоянныхРазниц = ВсегоПостоянныхРазниц + НепринимаемыеРасходы;
		
	Иначе
		ВсегоПостоянныхРазниц = ВсегоПостоянныхРазниц + СуммаПостоянныхРазниц;
	КонецЕсли;
	
КонецПроцедуры // ОтразитьНепринимаемыеРасходыПоСчетуНПР()

//******************************************************************************
// СуммаПостоянныхРазниц()
//
// Параметры:
//  Нет.
//
// Возвращаемое значение:
//  Здесь описывается возвращаемое значение.
//
// Вызывается из формул элементов диалога:
//  Нет.
//
// Описание:
//  Здесь описывается функция.
//
Функция СуммаПостоянныхРазниц(БухИт, Субконто1 = "", Субконто2 = "", Субконто3 = "",
	                          УчитыватьОстаткиНаНачалоМесяца = 0)
	
	Перем Субк[3];
	
	Субк[1] = Субконто1; 
	Субк[2] = Субконто2; 
	Субк[3] = Субконто3;
	
	ВсегоПостоянныхРазниц = 0;
	
	Если ВыполнятьДвиженияПоСчетуНПР = Да Тогда
		
		СчетНПР = СчетПоКоду("НПР." + БухИт.Счет);
		
		// Определим ведется ли на счете учет аналитический учет по статьям расходов,
		// если ведется, то необходимо проконтролировать, чтобы были отражены
		// постоянные разницы по статьям расходов, не принимаемым к налоговому учету.
		// Если в процедуру не было передано конкретное значение статьи затрат,
		// то контролируются (перебираются) все статьи.
		НомерСубконто = МожноВыбиратьСтатьюОтчислений(БухИт.Счет);
		ПроанализироватьВсеСтатьиЗатрат = 0;
		Если НомерСубконто = 0 Тогда
		ИначеЕсли Субк[НомерСубконто] = "" Тогда
		    ПроанализироватьВсеСтатьиЗатрат = 1;
		КонецЕсли;
		
		Субк[1] = ?(Субконто1 <> "", Субконто1, ПолучитьПустоеЗначение()); 
		Субк[2] = ?(Субконто2 <> "", Субконто2, ПолучитьПустоеЗначение()); 
		Субк[3] = ?(Субконто3 <> "", Субконто3, ПолучитьПустоеЗначение()); 
		
		Если БухИт.Счет = СчетПоКоду("44.1.2") Тогда
			Если (НПР.ДО(СчетНПР,,, Субк[1], Субк[2], Субк[3]) - НПР.КО(СчетНПР,,, Субк[1], Субк[2], Субк[3])) <= 0 Тогда
				Возврат 0;
			КонецЕсли;
		КонецЕсли;
		
		// Если при расчете постоянных разниц необходимо
		// учесть остатки на начало месяца, то ...
		Если УчитыватьОстаткиНаНачалоМесяца = 1 Тогда
	    	ВсегоПостоянныхРазниц = ВсегоПостоянныхРазниц
			                      + НПР.СНД(СчетНПР,,, Субк[1], Субк[2], Субк[3]);
		КонецЕсли;
		
		// Если на счете учет статей затрат не предусмотрен, то..
		Если НомерСубконто = 0  Тогда
			ВсегоПостоянныхРазниц = ВсегоПостоянныхРазниц
								  + НПР.ДО(СчетНПР,,, Субк[1], Субк[2], Субк[3])
	                              - НПР.КО(СчетНПР,,, Субк[1], Субк[2], Субк[3]);
		Иначе
			ВидСубконто = БухИт.Счет.ВидСубконто(НомерСубконто);
			
			Если ПроанализироватьВсеСтатьиЗатрат = 1 Тогда
			    БухИт.ВыбратьСубконто(ВидСубконто);
				Пока БухИт.ПолучитьСубконто(ВидСубконто) = 1 Цикл
					СтатьяЗатрат = БухИт.Субконто(ВидСубконто);
					Субк[НомерСубконто] = СтатьяЗатрат;
					
					ОтразитьНепринимаемыеРасходыПоСчетуНПР(БухИт, СчетНПР, СтатьяЗатрат, Субк, ВсегоПостоянныхРазниц);
				КонецЦикла;
				
			Иначе
				СтатьяЗатрат = БухИт.Субконто(ВидСубконто);
				ОтразитьНепринимаемыеРасходыПоСчетуНПР(БухИт, СчетНПР, СтатьяЗатрат, Субк, ВсегоПостоянныхРазниц);	
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ВсегоПостоянныхРазниц;
	
КонецФункции // СуммаПостоянныхРазниц()

//******************************************************************************
// СформироватьПроводкиПоСписанию09_77()
//
// Параметры:
//  Нет.
//
// Вызывается из формул элементов диалога:
//  Нет.
//
// Описание:
//  Здесь описывается процедура.
//
Процедура СформироватьПроводкиПоСписанию09_77(СуммаНалогаКДоначислению, КоррСчет, Субконто = "", ПоДебету = 1, СодержаниеПроводки)
	
	Сч99 = СчетПоКоду("99.1"); 
	Субконто99 = Перечисление.ПрибылиИУбытки.ПрибыльУбытокПоСпецРежимам;
	
	СуммаНалогаКДоначислению = Окр(СуммаНалогаКДоначислению, Метаданные.ТочностьСуммыПроводки);
	
	Если СуммаНалогаКДоначислению = 0 Тогда
	    Возврат;
	КонецЕсли;
	
	Если ПоДебету = 1 Тогда
		Операция.НоваяПроводка(); Операция.РазделительУчета = ЮрЛицо;
		Операция.НомерЖурнала = "ФР";
		Операция.СодержаниеПроводки = СодержаниеПроводки;
		Операция.ПервичныйДокумент  = глПредставлениеПервичногоДокумента(Контекст);
		Операция.Дебет.Счет  = КоррСчет;
		Операция.Дебет.Субконто(1, Субконто);
		Операция.Кредит.Счет = Сч99; 
		Операция.Кредит.Субконто(1, Субконто99);
		Операция.Сумма = СуммаНалогаКДоначислению;
		
	ИначеЕсли ПоДебету = 0 Тогда
		Операция.НоваяПроводка(); Операция.РазделительУчета = ЮрЛицо;
		Операция.НомерЖурнала = "ФР";
		Операция.СодержаниеПроводки = СодержаниеПроводки;
		Операция.ПервичныйДокумент  = глПредставлениеПервичногоДокумента(Контекст);
		Операция.Дебет.Счет  = Сч99;
		Операция.Дебет.Субконто(1, Субконто99);
		Операция.Кредит.Счет = КоррСчет;
		Операция.Кредит.Субконто(1, Субконто);
		Операция.Сумма = СуммаНалогаКДоначислению;
	КонецЕсли;
	
КонецПроцедуры // СформироватьПроводкиПоСписанию09_77()

//******************************************************************************
// СформироватьПроводкиПоНалогуНаПрибыль()
//
// Параметры:
//  Нет.
//
// Вызывается из формул элементов диалога:
//  Нет.
//
// Описание:
//  Здесь описывается процедура.
//
Процедура СформироватьПроводкиПоНалогуНаПрибыль(СуммаНалогаКДоначислению, КоррСчет, Субконто = "", ПоДебету = 1, СодержаниеПроводки)
	
	Сч68_4_2 = СчетПоКоду("68.4.2");
	
	СуммаНалогаКДоначислению = Окр(СуммаНалогаКДоначислению, Метаданные.ТочностьСуммыПроводки);
	
	Если СуммаНалогаКДоначислению = 0 Тогда
	    Возврат;
	КонецЕсли;
	
	Если ПоДебету = 1 Тогда
		Операция.НоваяПроводка(); Операция.РазделительУчета = ЮрЛицо;
	    Операция.НомерЖурнала = "ФР";
		Операция.СодержаниеПроводки = СодержаниеПроводки;
		Операция.ПервичныйДокумент  = глПредставлениеПервичногоДокумента(Контекст);
		Операция.Дебет.Счет  = КоррСчет;
		Операция.Дебет.Субконто(1, Субконто);
		Операция.Кредит.Счет = Сч68_4_2;
		Операция.Сумма = СуммаНалогаКДоначислению;
		
	ИначеЕсли ПоДебету = 0 Тогда
		Операция.НоваяПроводка(); Операция.РазделительУчета = ЮрЛицо;
		Операция.НомерЖурнала = "ФР";
		Операция.СодержаниеПроводки = СодержаниеПроводки;
		Операция.ПервичныйДокумент  = глПредставлениеПервичногоДокумента(Контекст);
		Операция.Дебет.Счет  = Сч68_4_2;
		Операция.Кредит.Счет = КоррСчет;
		Операция.Кредит.Субконто(1, Субконто);
		Операция.Сумма = СуммаНалогаКДоначислению;
	КонецЕсли;
	
КонецПроцедуры // СформироватьПроводкиПоНалогуНаПрибыль()

//******************************************************************************
// КорректировкаСреднейСтоимостиМатериалов()
//
// Параметры:
//  Нет.
//
// Вызывается из формул элементов диалога:
//  Нет.
//
// Описание:
//  Здесь описывается процедура.
//
Процедура КорректировкаСреднейСтоимостиМатериалов()
	
	Сч10    = СчетПоКоду("10");
	Сч10_11 = СчетПоКоду("10.11");
	                        
	// Формирование печатной формы
	Если ФормироватьПечатнуюФорму = 1 Тогда
		НаименованиеРегламентнойОперации = "Расчет (корректировка) фактической стоимости материалов";
		Таб.ВывестиСекцию("РегламентнаяОперация");
	КонецЕсли;
	
	Если (ВыполнятьДвиженияПоСчетуНПР = Да)
	 или (Константа.МетодРасчетаСебестоимостиМатериалов.Получить(ДатаДок) = Перечисление.МетодыРасчетаСебестоимости.ПоСредневзвешеннойСтоимости) Тогда
		
		// Формирование печатной формы
		Если ФормироватьПечатнуюФорму = 1 Тогда
			Если Константа.МетодРасчетаСебестоимостиМатериалов.Получить(ДатаДок) = Перечисление.МетодыРасчетаСебестоимости.ПоСредневзвешеннойСтоимости Тогда
				ИнициализироватьРасшифровкуПоКорректировкеМПЗ();    
			КонецЕсли;
		КонецЕсли;
	   	
	   	СписокПараметров = СоздатьОбъект("СписокЗначений");
	   	
		РеквизитыПроводки = СоздатьОбъект("СписокЗначений");
		БухИт10 = СоздатьОбъект("БухгалтерскиеИтоги"); БухИт10.ИспользоватьРазделительУчета(ЮрЛицо);
		БухИт10.ИспользоватьСубконто(ВидыСубконто.Материалы);
		БухИт10.ИспользоватьКорСубконто();
		БухИт10.ИспользоватьКорСубконто();
		БухИт10.ИспользоватьКорСубконто();
		БухИт10.ВключатьСубсчета(-1, -1);
		БухИт10.ВыполнитьЗапрос(ДатаНач, ДатаКон, "10.1,10.2,10.3,10.4,10.5,10.6,10.7,10.8,10.9,10.10",,, 3, "Операция",);
		
		БухИт10.ВыбратьСубконто();
		Пока БухИт10.ПолучитьСубконто() = 1 Цикл
			                
			РасчетПостоянныхРазниц(БухИт10, СписокПараметров);
			
			БухИт10.ВыбратьСчета();
			Пока БухИт10.ПолучитьСчет() = 1 Цикл
				Если (БухИт10.Счет.ПринадлежитГруппе(Сч10_11) = 1)
				или (БухИт10.Счет=СчетПоКоду("10.7")) Тогда
				    Продолжить;
				КонецЕсли;
			
				Если БухИт10.СКД("К") < 0 Тогда
					ТекстСообщения = "" + БухИт10.Субконто() + ": На конец месяца количество отрицательное. Расчет (корректировка) фактической стоимости материалов не может быть выполнена.";
					глНеПроводить(Контекст, ТекстСообщения);
					Возврат;              	
				КонецЕсли;
				
				КорректировкаСреднейСтоимости(БухИт10,, СписокПараметров);
			КонецЦикла;
			
			Операция.ЗаписатьПроводки();
		КонецЦикла;
			
			БухИт107 = СоздатьОбъект("БухгалтерскиеИтоги"); БухИт107.ИспользоватьРазделительУчета(ЮрЛицо);
			БухИт107.ИспользоватьСубконто(ВидыСубконто.Материалы);
			БухИт107.ИспользоватьСубконто(ВидыСубконто.Контрагенты);
			БухИт107.ИспользоватьСубконто(ВидыСубконто.Договоры);
			БухИт107.ИспользоватьКорСубконто();
			БухИт107.ИспользоватьКорСубконто();
			БухИт107.ИспользоватьКорСубконто();
			БухИт107.ВключатьСубсчета(-1, -1);
			БухИт107.ВыполнитьЗапрос(ДатаНач, ДатаКон, "10.7",,, 3, "Операция",);
			
			РасчетПостоянныхРазниц(БухИт107, СписокПараметров);
			БухИт107.ВыбратьСубконто(1);
			Пока БухИт107.ПолучитьСубконто(1) = 1 Цикл
				БухИт107.ВыбратьСубконто(2);
				Пока БухИт107.ПолучитьСубконто(2) = 1 Цикл
					БухИт107.ВыбратьСубконто(3);
					Пока БухИт107.ПолучитьСубконто(3) = 1 Цикл
						Если БухИт107.СКД("К") < 0 Тогда
							ТекстСообщения = "" + БухИт107.Субконто() + ": На конец месяца количество отрицательное. Расчет (корректировка) фактической стоимости материалов не может быть выполнена.";
							глНеПроводить(Контекст, ТекстСообщения);
							Возврат;              	
						КонецЕсли;
						КорректировкаСреднейСтоимости(БухИт107,, СписокПараметров);
					КонецЦикла;
				КонецЦикла;
				
				Операция.ЗаписатьПроводки();
			КонецЦикла;

		// Формирование печатной формы
		Если ФормироватьПечатнуюФорму = 1 Тогда
			Если Константа.МетодРасчетаСебестоимостиМатериалов.Получить(ДатаДок) = Перечисление.МетодыРасчетаСебестоимости.ПоСредневзвешеннойСтоимости Тогда
				Если ТаблицаРасшифровкаРегламентнойОперации.КоличествоСтрок() > 0 Тогда
					Расшифровка = СоздатьОбъект("СписокЗначений");
					Расшифровка.ДобавитьЗначение("ТаблицаКорректировкаСредневзвешеннойСтоимостиМатериалов", "Наименование таблицы");
					Расшифровка.ДобавитьЗначение(ТаблицаРасшифровкаРегламентнойОперации, "Таблица данных");
					Расшифровка.ДобавитьЗначение(ДатаДок, "Дата операции");
					
					НаименованиеРегламентнойПодоперации = "Корректировка фактической стоимости материалов";
					Таб.ВывестиСекцию("ПодоперацияВыполнена");
					
				Иначе
					НаименованиеРегламентнойПодоперации = "Стоимость материалов не нуждается в корректировке";
					Таб.ВывестиСекцию("ПодоперацияНеВыполнена");	
				КонецЕсли;
			Иначе
				
				НаименованиеРегламентнойПодоперации = "В соответствии с учетной политикой применяется скользящая оценка стоимости материалов, которая не требует корректировки фактической стоимости";
				Таб.ВывестиСекцию("ПодоперацияНеВыполнена");
			КонецЕсли;
		КонецЕсли;
		
		// Корректировка счета 10.11
		Если Константа.МетодРасчетаСебестоимостиМатериалов.Получить(ДатаДок) = Перечисление.МетодыРасчетаСебестоимости.ПоСредневзвешеннойСтоимости Тогда
			
			// Формирование печатной формы
			Если ФормироватьПечатнуюФорму = 1 Тогда
				ИнициализироватьРасшифровкуПоКорректировкеСтоимостиСпецМатериалов();
			КонецЕсли;
			
			БухИт10_11 = СоздатьОбъект("БухгалтерскиеИтоги"); БухИт10_11.ИспользоватьРазделительУчета(ЮрЛицо);
			БухИт10_11.ИспользоватьСубконто(ВидыСубконто.Материалы);
			БухИт10_11.ИспользоватьСубконто(ВидыСубконто.НазначенияИспользования);
			БухИт10_11.ИспользоватьСубконто();
			БухИт10_11.ИспользоватьКорСубконто();  
			БухИт10_11.ИспользоватьКорСубконто();
			БухИт10_11.ИспользоватьКорСубконто();
			БухИт10_11.ВключатьСубсчета(-1, -1);
			БухИт10_11.ВыполнитьЗапрос(ДатаНач, ДатаКон, Сч10_11,,, 3, "Операция",);
			
			БухИт10_11.ВыбратьСчета();
			Пока БухИт10_11.ПолучитьСчет() = 1 Цикл
				БухИт10_11.ВыбратьСубконто(ВидыСубконто.Материалы);
				Пока БухИт10_11.ПолучитьСубконто(ВидыСубконто.Материалы) = 1 Цикл
					БухИт10_11.ВыбратьСубконто(ВидыСубконто.НазначенияИспользования);
					Пока БухИт10_11.ПолучитьСубконто(ВидыСубконто.НазначенияИспользования) = 1 Цикл
						БухИт10_11.ВыбратьСубконто(3);
						Пока БухИт10_11.ПолучитьСубконто(3) = 1 Цикл
							КорректировкаСчета10_11(БухИт10_11);
						КонецЦикла;
					КонецЦикла;
				КонецЦикла;
				Операция.ЗаписатьПроводки();
			КонецЦикла;
			
			// Формирование печатной формы
			Если ФормироватьПечатнуюФорму = 1 Тогда
				Если ТаблицаРасшифровкаРегламентнойОперации.КоличествоСтрок() > 0 Тогда
					Расшифровка = СоздатьОбъект("СписокЗначений");
					Расшифровка.ДобавитьЗначение("ТаблицаКорректировкаСтоимостиСпецМатериалов", "Наименование таблицы");
					Расшифровка.ДобавитьЗначение(ТаблицаРасшифровкаРегламентнойОперации, "Таблица данных");
					Расшифровка.ДобавитьЗначение(ДатаДок, "Дата операции");
					
					НаименованиеРегламентнойПодоперации = "Корректировка стоимости переданной в эксплуатацию спецодежды (спецоснастки), стоимость которой погашается при передаче в производство";
					Таб.ВывестиСекцию("ПодоперацияВыполнена");    
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		// Корректировка постоянных разниц на счете НПР.10.1
		Если ВыполнятьДвиженияПоСчетуНПР = Да Тогда
			БухИт10_11 = СоздатьОбъект("БухгалтерскиеИтоги"); БухИт10_11.ИспользоватьРазделительУчета(ЮрЛицо);
			БухИт10_11.ИспользоватьСубконто(ВидыСубконто.Материалы);
			БухИт10_11.ИспользоватьСубконто(ВидыСубконто.НазначенияИспользования);
			БухИт10_11.ИспользоватьКорСубконто();  
			БухИт10_11.ИспользоватьКорСубконто();
			БухИт10_11.ИспользоватьКорСубконто();
			БухИт10_11.ВключатьСубсчета(-1, -1);
			БухИт10_11.ВыполнитьЗапрос(ДатаНач, ДатаКон, Сч10_11,,, 3, "Операция",);
			
			БухИт10_11.ВыбратьСчета(, 2);
			Пока БухИт10_11.ПолучитьСчет() = 1 Цикл
				БухИт10_11.ВыбратьСубконто(ВидыСубконто.Материалы,, 2);
				Пока БухИт10_11.ПолучитьСубконто(ВидыСубконто.Материалы) = 1 Цикл
					БухИт10_11.ВыбратьСубконто(ВидыСубконто.НазначенияИспользования,, 2);
					Пока БухИт10_11.ПолучитьСубконто(ВидыСубконто.НазначенияИспользования) = 1 Цикл
						РасчетПостоянныхРазницДляСпецодеждыСпецоснастки(БухИт10_11, СписокПараметров);
						КорректировкаСчетаНПР10_1(БухИт10_11, СписокПараметров);
					КонецЦикла;
				КонецЦикла;
				Операция.ЗаписатьПроводки();
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // КорректировкаСреднейСтоимостиМатериалов()

//******************************************************************************
// КорректировкаСреднейСтоимостиТоваров()
//
// Параметры:
//  Нет.
//
// Вызывается из формул элементов диалога:
//  Нет.
//
// Описание:
//  Здесь описывается процедура.
//
Процедура КорректировкаСреднейСтоимостиТоваров()
	
	Сч41_1 = СчетПоКоду("41.1");
	Сч41_2 = СчетПоКоду("41.2");
	Сч41_3 = СчетПоКоду("41.3");
	Сч41_4 = СчетПоКоду("41.4");
	Сч45 = СчетПоКоду("45");
	
	// Формирование печатной формы
	Если ФормироватьПечатнуюФорму = 1 Тогда
		НаименованиеРегламентнойОперации = "Расчет (корректировка) фактической стоимости товаров";
		Таб.ВывестиСекцию("РегламентнаяОперация");
	КонецЕсли;
	
	Если (ВыполнятьДвиженияПоСчетуНПР = Да)
	 или (Константа.МетодРасчетаСебестоимостиТоваров.Получить(ДатаДок) = Перечисление.МетодыРасчетаСебестоимости.ПоСредневзвешеннойСтоимости) Тогда
		
	 	// Формирование печатной формы
		Если ФормироватьПечатнуюФорму = 1 Тогда
			Если Константа.МетодРасчетаСебестоимостиТоваров.Получить(ДатаДок) = Перечисление.МетодыРасчетаСебестоимости.ПоСредневзвешеннойСтоимости Тогда
				ИнициализироватьРасшифровкуПоКорректировкеМПЗ();    
			КонецЕсли;
		КонецЕсли;
	 	
		СписокПараметров = СоздатьОбъект("СписокЗначений");
		
		// Определим учет товаров по счету 41.2 ведется по продажным или покупным ценам.
		Если (БухИтЗаМесяц.КО("42") <> 0) или (БухИтЗаМесяц.СКД("42") <> 0) Тогда
			УчетПоПродажнымЦенам = 1;
			
		Иначе
			УчетПоПродажнымЦенам = 0;
		КонецЕсли;
		
		РеквизитыПроводки = СоздатьОбъект("СписокЗначений");
		СписокСчетовУчетаТоваров = СоздатьОбъект("СписокЗначений");
		СписокСчетовУчетаТоваров.ДобавитьЗначение(Сч41_1);
		СписокСчетовУчетаТоваров.ДобавитьЗначение(Сч41_3);
		СписокСчетовУчетаТоваров.ДобавитьЗначение(Сч41_4);
		
		// Если по счету 41.2 ведется учет по продажным ценам, то счет 41.2 не корректируется
		Если УчетПоПродажнымЦенам = 0 Тогда
		    СписокСчетовУчетаТоваров.ДобавитьЗначение(Сч41_2);
		КонецЕсли;                                          
		
		СчетчикЦикла = 0;
		Для СчетчикЦикла = 1 По СписокСчетовУчетаТоваров.РазмерСписка() Цикл
			БухИт41 = СоздатьОбъект("БухгалтерскиеИтоги"); БухИт41.ИспользоватьРазделительУчета(ЮрЛицо);
			БухИт41.ИспользоватьСубконто(ВидыСубконто.Номенклатура);
			Если СписокСчетовУчетаТоваров.ПолучитьЗначение(СчетчикЦикла) = Сч41_2 Тогда
				БухИт41.ИспользоватьСубконто(ВидыСубконто.МестаХранения);
			КонецЕсли;
			БухИт41.ИспользоватьКорСубконто();
			БухИт41.ИспользоватьКорСубконто();
			БухИт41.ИспользоватьКорСубконто();
			БухИт41.ВключатьСубсчета(-1, -1);
			БухИт41.ВыполнитьЗапрос(ДатаНач, ДатаКон, СписокСчетовУчетаТоваров.ПолучитьЗначение(СчетчикЦикла),,, 3, "Операция",);
			БухИт41.ВыбратьСубконто(ВидыСубконто.Номенклатура);
			Пока БухИт41.ПолучитьСубконто(ВидыСубконто.Номенклатура) = 1 Цикл
				
				РасчетПостоянныхРазниц(БухИт41, СписокПараметров);
				
				Если БухИт41.СКД("К") < 0 Тогда
					ТекстСообщения = "" + БухИт41.Субконто() + ": На конец месяца количество отрицательное. Расчет (корректировка) фактической стоимости товаров не может быть выполнена.";
					глНеПроводить(Контекст, ТекстСообщения);
					Возврат;
				КонецЕсли;
				
				КорректировкаСреднейСтоимости(БухИт41, УчетПоПродажнымЦенам, СписокПараметров);
				
			КонецЦикла;
			Операция.ЗаписатьПроводки();
		КонецЦикла;
		
		// Формирование печатной формы
		Если ФормироватьПечатнуюФорму = 1 Тогда
			Если Константа.МетодРасчетаСебестоимостиТоваров.Получить(ДатаДок) = Перечисление.МетодыРасчетаСебестоимости.ПоСредневзвешеннойСтоимости Тогда
				Если ТаблицаРасшифровкаРегламентнойОперации.КоличествоСтрок() > 0 Тогда
					Расшифровка = СоздатьОбъект("СписокЗначений");
					Расшифровка.ДобавитьЗначение("ТаблицаКорректировкаСредневзвешеннойСтоимостиТоваров", "Наименование таблицы");
					Расшифровка.ДобавитьЗначение(ТаблицаРасшифровкаРегламентнойОперации, "Таблица данных");
					Расшифровка.ДобавитьЗначение(ДатаДок, "Дата операции");
					
					НаименованиеРегламентнойПодоперации = "Корректировка фактической стоимости товаров";
					Таб.ВывестиСекцию("ПодоперацияВыполнена");
					
				Иначе
					НаименованиеРегламентнойПодоперации = "Стоимость товаров, находящихся на складе, не нуждается в корректировке";
					Таб.ВывестиСекцию("ПодоперацияНеВыполнена");	
				КонецЕсли;
				
			Иначе
				НаименованиеРегламентнойПодоперации = "В соответствии с учетной политикой применяется скользящая оценка стоимости товаров, которая не требует корректировки фактической стоимости";
				Таб.ВывестиСекцию("ПодоперацияНеВыполнена");
			КонецЕсли;
		КонецЕсли;
        
		// Формирование печатной формы
		Если ФормироватьПечатнуюФорму = 1 Тогда
			Если Константа.МетодРасчетаСебестоимостиТоваров.Получить(ДатаДок) = Перечисление.МетодыРасчетаСебестоимости.ПоСредневзвешеннойСтоимости Тогда
				ИнициализироватьРасшифровкуПоКорректировкеТоваровОтгруженных();
			КонецЕсли;
		КонецЕсли;
		
		БухИт45 = СоздатьОбъект("БухгалтерскиеИтоги"); БухИт45.ИспользоватьРазделительУчета(ЮрЛицо);
		БухИт45.ИспользоватьСубконто(ВидыСубконто.Контрагенты);
		БухИт45.ИспользоватьСубконто(ВидыСубконто.Договоры);
		БухИт45.ИспользоватьСубконто(ВидыСубконто.Номенклатура);
		БухИт45.ИспользоватьКорСубконто();  
		БухИт45.ИспользоватьКорСубконто();
		БухИт45.ИспользоватьКорСубконто();
		БухИт45.ВключатьСубсчета(, -1);
		БухИт45.ВыполнитьЗапрос(ДатаНач, ДатаКон, Сч45,,, 3, "Операция",);
		БухИт45.ВыбратьСубконто(ВидыСубконто.Контрагенты);
		Пока БухИт45.ПолучитьСубконто(ВидыСубконто.Контрагенты) = 1 Цикл
			БухИт45.ВыбратьСубконто(ВидыСубконто.Договоры);
			Пока БухИт45.ПолучитьСубконто(ВидыСубконто.Договоры) = 1 Цикл                                                          
				БухИт45.ВыбратьСубконто(ВидыСубконто.Номенклатура);
				Пока БухИт45.ПолучитьСубконто(ВидыСубконто.Номенклатура) = 1 Цикл
					
					Если (БухИт45.Субконто(ВидыСубконто.Номенклатура).ТипНоменклатуры = Перечисление.ТипыНоменклатуры.Товар)
					 или (Константа.СпособУчетаГПиПФ.Получить(ДатаДок) = Перечисление.СпособыУчетаГПиПФ.ПоПлановойСтоимости) Тогда
						РасчетПостоянныхРазниц(БухИт45, СписокПараметров);
						КорректировкаСреднейСтоимости(БухИт45,, СписокПараметров);    
					КонецЕсли;
					
				КонецЦикла;
			КонецЦикла;
		КонецЦикла;
		
		// Формирование печатной формы
		Если ФормироватьПечатнуюФорму = 1 Тогда
			Если Константа.МетодРасчетаСебестоимостиТоваров.Получить(ДатаДок) = Перечисление.МетодыРасчетаСебестоимости.ПоСредневзвешеннойСтоимости Тогда
				Если ТаблицаРасшифровкаРегламентнойОперации.КоличествоСтрок() > 0 Тогда
					Расшифровка = СоздатьОбъект("СписокЗначений");
					Расшифровка.ДобавитьЗначение("ТаблицаКорректировкаТоваровОтгруженных", "Наименование таблицы");
					Расшифровка.ДобавитьЗначение(ТаблицаРасшифровкаРегламентнойОперации, "Таблица данных");
					Расшифровка.ДобавитьЗначение(ДатаДок, "Дата операции");
					
					НаименованиеРегламентнойПодоперации = "Корректировка фактической стоимости товаров отгруженных без перехода права собственности";
					Таб.ВывестиСекцию("ПодоперацияВыполнена");
					
				Иначе
					НаименованиеРегламентнойПодоперации = "Стоимость товаров, отгруженных без перехода права собственности, не нуждается в корректировке";
					Таб.ВывестиСекцию("ПодоперацияНеВыполнена");	
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // КорректировкаСреднейСтоимостиТоваров()

//******************************************************************************
// РасчетТорговойНаценки()
//
// Параметры:
//  Нет.
//
// Вызывается из формул элементов диалога:
//  Нет.
//
// Описание:
//  Здесь описывается процедура.
//
Процедура РасчетТорговойНаценки()
	
	Сч41_2 = СчетПоКоду("41.2");
	Сч42 = СчетПоКоду("42");
	Сч90_2 = СчетПоКоду("90.2");
	Сч90_2_1 = СчетПоКоду("90.2.1");
	Сч90_2_2 = СчетПоКоду("90.2.2");
	
	// Формирование печатной формы
	Если ФормироватьПечатнуюФорму = 1 Тогда
		НаименованиеРегламентнойОперации = "Расчет торговой наценки по проданным товарам";
		Таб.ВывестиСекцию("РегламентнаяОперация");
		ИнициализироватьРасшифровкуПоРасчетуТорговойНаценки();
	КонецЕсли;
	
	// Если нет наценки, то не выполняем данную регламентную операцию.
	Если БухИтЗаМесяц.СКК("42") <> 0 Тогда
		
		БухИт42 = СоздатьОбъект("БухгалтерскиеИтоги"); БухИт42.ИспользоватьРазделительУчета(ЮрЛицо);
		БухИт42.ИспользоватьСубконто(ВидыСубконто.МестаХранения);
		БухИт42.ВыполнитьЗапрос(ДатаНач, ДатаКон, Сч42,,,,,);
		
		БухИт41_2 = СоздатьОбъект("БухгалтерскиеИтоги"); БухИт41_2.ИспользоватьРазделительУчета(ЮрЛицо);
		БухИт41_2.ИспользоватьСубконто(ВидыСубконто.МестаХранения);
		БухИт41_2.ИспользоватьСубконто(ВидыСубконто.Номенклатура);
		БухИт41_2.ИспользоватьКорСубконто();
		БухИт41_2.ВключатьСубсчета(, 1);
		БухИт41_2.ВыполнитьЗапрос(ДатаНач, ДатаКон, Сч41_2,,,3 ,,"С");
		БухИт41_2.ВыбратьСубконто(ВидыСубконто.МестаХранения);
		Пока БухИт41_2.ПолучитьСубконто(ВидыСубконто.МестаХранения) = 1 Цикл
			МестоХранения = БухИт41_2.Субконто(ВидыСубконто.МестаХранения);                         
			
			// Если по данному месту хранения нет наценки, то продолжим
			Если БухИт42.ПолучитьСубконто(ВидыСубконто.МестаХранения,, МестоХранения) = 0 Тогда 
				Продолжить;
			КонецЕсли;
			
			СуммаТорговойНаценки = БухИт42.СНК() + БухИт42.КО() - БухИт42.ДО();
			ОстатокТоваров = Макс(БухИт41_2.СКД(), 0);
			
			// Формирование печатной формы
			Если ФормироватьПечатнуюФорму = 1 Тогда
				ТаблицаРасшифровкаРегламентнойОперации.НоваяСтрока();
				ТаблицаРасшифровкаРегламентнойОперации.МестоХранения = МестоХранения;
				ТаблицаРасшифровкаРегламентнойОперации.СуммаТорговойНаценки = СуммаТорговойНаценки;
				ТаблицаРасшифровкаРегламентнойОперации.СтоимостьТоваров = ОстатокТоваров;
				
				Расшифровка = СоздатьОбъект("СписокЗначений");
				ОсновнаяРасшифровкаАСПС.Выгрузить(Расшифровка);
				Расшифровка.Установить("Счет", Сч41_2);
				Расшифровка.Установить("ВидСубконто1", ВидыСубконто.МестаХранения);
				Расшифровка.Установить("Субконто1", МестоХранения);
				Расшифровка.Установить("ОтборСубконто1", 1);
				ТаблицаРасшифровкаРегламентнойОперации.РасшифровкаАнализСчетаПоСубконто = Расшифровка;
				
				Расшифровка = СоздатьОбъект("СписокЗначений");
				ОсновнаяРасшифровкаОСВ.Выгрузить(Расшифровка);
				Расшифровка.Установить("Счет", Сч42);
				Расшифровка.Установить("ВидСубконто1", ВидыСубконто.МестаХранения);
				Расшифровка.Установить("Субконто1", МестоХранения);
				Расшифровка.Установить("ОтборСубконто1", 1);
				ТаблицаРасшифровкаРегламентнойОперации.РасшифровкаОборотноСальдоваяВедомостьПоСчету = Расшифровка;
			КонецЕсли;
			
			ОбщаяСтоимостьПродаж = 0;
			Если БухИт41_2.ПолучитьКорСчет(, Сч90_2) = 1 Тогда
				ОбщаяСтоимостьПродаж = БухИт41_2.КорКО();
				
			Иначе // не было продаж => наценку вычислять не надо
				Продолжить;
			КонецЕсли;
			     
			// Расчет наценки относящейся к реализованным товарам по данному складу.
			Если ОстатокТоваров + ОбщаяСтоимостьПродаж  = 0 Тогда
				Продолжить;
			КонецЕсли;
			СреднийПроцентНаценки = СуммаТорговойНаценки / (ОстатокТоваров + ОбщаяСтоимостьПродаж);
			ОбщаяСуммаТорговойНаценкиНаРеализованныйТовар = СуммаТорговойНаценки - ОстатокТоваров * СреднийПроцентНаценки;
			
			// Формирование печатной формы
			Если ФормироватьПечатнуюФорму = 1 Тогда
				ТаблицаРасшифровкаРегламентнойОперации.СтоимостьПродаж = ОбщаяСтоимостьПродаж;
				ТаблицаРасшифровкаРегламентнойОперации.СреднийПроцент  = СреднийПроцентНаценки;
				ТаблицаРасшифровкаРегламентнойОперации.СуммаНаценкиРеализовано = ОбщаяСуммаТорговойНаценкиНаРеализованныйТовар;
				ТаблицаРасшифровкаРегламентнойОперации.РасшифровкаРаспределенияТорговойНаценки = РасшифровкаРаспределенияТорговойНаценки();
			КонецЕсли;
			
			// Распределим наценку по видам номенклатуры пропорционально продажной стоимости
			// реализованных товаров, сгруппированных по видам номенклатуры.
			Если ОбщаяСуммаТорговойНаценкиНаРеализованныйТовар <> 0 Тогда
				УчтеннаяСуммаНаценки = 0;
				УчтеннаяСтоимостьПродаж = 0;
				
				// Формирование печатной формы
				Если ФормироватьПечатнуюФорму = 1 Тогда
					
					// формирование расшифровки
					Расшифровка = СоздатьОбъект("СписокЗначений");
					ОсновнаяРасшифровкаОПП.Выгрузить(Расшифровка);
					Расшифровка.Установить("ДтКт", 2);
					Расшифровка.Установить("Счет", Сч41_2);
					Расшифровка.Установить("КорВидСубконто1", ВидыСубконто.ВидыНоменклатуры);
				КонецЕсли;
			    
				Если БухИт41_2.ПолучитьКорСчет(, Сч90_2_1) = 1 Тогда
					БухИт41_2.ВыбратьКорСубконто(1);
					Пока БухИт41_2.ПолучитьКорСубконто(1) = 1 Цикл
						СтоимостьПродаж = БухИт41_2.КорКО();
						УчтеннаяСтоимостьПродаж = УчтеннаяСтоимостьПродаж + СтоимостьПродаж;
						СуммаНаценкиДолжнаБыть = Окр(ОбщаяСуммаТорговойНаценкиНаРеализованныйТовар * УчтеннаяСтоимостьПродаж / ОбщаяСтоимостьПродаж, 2);
						СуммаНаценки = СуммаНаценкиДолжнаБыть - УчтеннаяСуммаНаценки;
						УчтеннаяСуммаНаценки = СуммаНаценкиДолжнаБыть;
						Если СуммаНаценки <> 0 Тогда
							Операция.НоваяПроводка(); Операция.РазделительУчета = ЮрЛицо;
							Операция.НомерЖурнала = "ФР";
							Операция.СодержаниеПроводки = "Торговая наценка по проданным товарам";
							Операция.ПервичныйДокумент  = глПредставлениеПервичногоДокумента(Контекст);
							Операция.Дебет.Счет = Сч90_2_1;
							Операция.Дебет.ВидыНоменклатуры = БухИт41_2.КорСубконто(1);
							Операция.Кредит.Счет = Сч42;
							Операция.Кредит.МестаХранения  = МестоХранения;
							Операция.Сумма = -СуммаНаценки;
							
							// Формирование печатной формы
							Если ФормироватьПечатнуюФорму = 1 Тогда
								РаспределенияТорговойНаценки = ТаблицаРасшифровкаРегламентнойОперации.РасшифровкаРаспределенияТорговойНаценки.Получить("Таблица данных");
								РаспределенияТорговойНаценки.НоваяСтрока();
								РаспределенияТорговойНаценки.ВидНоменклатуры = БухИт41_2.КорСубконто(1);
								РаспределенияТорговойНаценки.СтоимостьРеализованныхТоваров = СтоимостьПродаж;
								РаспределенияТорговойНаценки.СреднийПроцент = ТаблицаРасшифровкаРегламентнойОперации.СреднийПроцент;
								РаспределенияТорговойНаценки.СуммаТорговойНаценки = СуммаНаценки;
								
								РасшифровкаОтчетПоПроводкам = СоздатьОбъект("СписокЗначений");
								Расшифровка.Выгрузить(РасшифровкаОтчетПоПроводкам);
								РасшифровкаОтчетПоПроводкам.Установить("КорСчет", Сч90_2_1);
								РасшифровкаОтчетПоПроводкам.Установить("КорСубконто1", БухИт41_2.КорСубконто(1));
								РаспределенияТорговойНаценки.РасшифровкаОтчетПоПроводкам = РасшифровкаОтчетПоПроводкам;
							КонецЕсли;
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
					
				Если БухИт41_2.ПолучитьКорСчет(, Сч90_2_2) = 1 Тогда
					БухИт41_2.ВыбратьКорСубконто(1);
					Пока БухИт41_2.ПолучитьКорСубконто(1) = 1 Цикл
						СтоимостьПродаж = БухИт41_2.КорКО();
						УчтеннаяСтоимостьПродаж = УчтеннаяСтоимостьПродаж + СтоимостьПродаж;
						СуммаНаценкиДолжнаБыть = Окр(ОбщаяСуммаТорговойНаценкиНаРеализованныйТовар * УчтеннаяСтоимостьПродаж / ОбщаяСтоимостьПродаж, 2);
						СуммаНаценки = СуммаНаценкиДолжнаБыть - УчтеннаяСуммаНаценки;
						УчтеннаяСуммаНаценки = СуммаНаценкиДолжнаБыть;
						Если СуммаНаценки <> 0 Тогда
							Операция.НоваяПроводка(); Операция.РазделительУчета = ЮрЛицо;
							Операция.НомерЖурнала = "ФР";
							Операция.СодержаниеПроводки = "Торговая наценка по проданным товарам";
							Операция.ПервичныйДокумент  = глПредставлениеПервичногоДокумента(Контекст);
							Операция.Дебет.Счет = Сч90_2_2;
							Операция.Дебет.ВидыНоменклатуры = БухИт41_2.КорСубконто(1);
							Операция.Кредит.Счет = Сч42;
							Операция.Кредит.МестаХранения  = МестоХранения;
							Операция.Сумма = -СуммаНаценки;
							
							// Формирование печатной формы
							Если ФормироватьПечатнуюФорму = 1 Тогда
								РаспределенияТорговойНаценки = ТаблицаРасшифровкаРегламентнойОперации.РасшифровкаРаспределенияТорговойНаценки.Получить("Таблица данных");
								РаспределенияТорговойНаценки.НоваяСтрока();
								РаспределенияТорговойНаценки.ВидНоменклатуры = БухИт41_2.КорСубконто(1);
								РаспределенияТорговойНаценки.СтоимостьРеализованныхТоваров = СтоимостьПродаж;
								РаспределенияТорговойНаценки.СреднийПроцент = ТаблицаРасшифровкаРегламентнойОперации.СреднийПроцент;
								РаспределенияТорговойНаценки.СуммаТорговойНаценки = СуммаНаценки;
								
								РасшифровкаОтчетПоПроводкам = СоздатьОбъект("СписокЗначений");
								Расшифровка.Выгрузить(РасшифровкаОтчетПоПроводкам);
								РасшифровкаОтчетПоПроводкам.Установить("КорСчет", Сч90_2_2);
								РасшифровкаОтчетПоПроводкам.Установить("КорСубконто1", БухИт41_2.КорСубконто(1));
								РаспределенияТорговойНаценки.РасшифровкаОтчетПоПроводкам = РасшифровкаОтчетПоПроводкам;
							КонецЕсли;
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		Операция.ЗаписатьПроводки();
		
		// Формирование печатной формы
		Если ФормироватьПечатнуюФорму = 1 Тогда
			Расшифровка = СоздатьОбъект("СписокЗначений");
			Расшифровка.ДобавитьЗначение("ТаблицаРасчетТорговойНаценки", "Наименование таблицы");
			Расшифровка.ДобавитьЗначение(ТаблицаРасшифровкаРегламентнойОперации, "Таблица данных");
			Расшифровка.ДобавитьЗначение(ДатаДок, "Дата операции");
			
			НаименованиеРегламентнойПодоперации = "Расчет торговой наценки";
			Таб.ВывестиСекцию("ПодоперацияВыполнена");
		КонецЕсли;
		
	Иначе 
		// Формирование печатной формы
		Если ФормироватьПечатнуюФорму = 1 Тогда
			НаименованиеРегламентнойПодоперации = "На счете 42 ""Торговая наценка"" торговой наценки нет";
			Таб.ВывестиСекцию("ПодоперацияНеВыполнена");
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // РасчетТорговойНаценки()

//******************************************************************************
// СписаниеСчета16_1()
//
// Параметры:
//  Нет.
//
// Вызывается из формул элементов диалога:
//  Нет.
//
// Описание:
//  Здесь описывается процедура.
//
Процедура СписаниеСчета16_1(БухИт, Коэффициент, ВсегоСуммаСписания)
	
	Сч10   = СчетПоКоду("10");
	Сч16_1 = СчетПоКоду("16.1");
	
	СуммаСписанныхМатериалов = БухИт.ДО();
	СуммаСписания = Окр(СуммаСписанныхМатериалов * Коэффициент, 2);
	ВсегоСуммаСписания = ВсегоСуммаСписания + СуммаСписания;
	                 
	Если СуммаСписания <> 0 Тогда
		Операция.НоваяПроводка(); Операция.РазделительУчета = ЮрЛицо;
		Операция.НомерЖурнала = "ФР";
		Операция.СодержаниеПроводки = "Списание счета 16.1";
		Операция.ПервичныйДокумент  = глПредставлениеПервичногоДокумента(Контекст);
		Операция.Дебет.Счет = БухИт.Счет;
		Операция.Дебет.Субконто(1, БухИт.Субконто(1));
		Операция.Дебет.Субконто(2, БухИт.Субконто(2));
		Операция.Дебет.Субконто(3, БухИт.Субконто(3));
		Операция.Кредит.Счет = Сч16_1;
		Операция.Сумма = СуммаСписания;
		
		// Формирование печатной формы
		Если ФормироватьПечатнуюФорму = 1 Тогда
			РасшифровкаЗакрытияСчета16_1 = ТаблицаРасшифровкаРегламентнойОперации.РасшифровкаЗакрытияСчета16.Получить("Таблица данных");
			РасшифровкаЗакрытияСчета16_1.НоваяСтрока();
			РасшифровкаЗакрытияСчета16_1.Счет = БухИт.Счет;
			РасшифровкаЗакрытияСчета16_1.Субконто1 = БухИт.Субконто(1);
			РасшифровкаЗакрытияСчета16_1.Субконто2 = БухИт.Субконто(2);
			РасшифровкаЗакрытияСчета16_1.Субконто3 = БухИт.Субконто(3);
			РасшифровкаЗакрытияСчета16_1.СтоимостьСписанныхМПЗ = СуммаСписанныхМатериалов;
			РасшифровкаЗакрытияСчета16_1.Коэффициент = Коэффициент;
			РасшифровкаЗакрытияСчета16_1.СуммаСписания = СуммаСписания;
			
			// формирование расшифровки
			Расшифровка = СоздатьОбъект("СписокЗначений");
			ОсновнаяРасшифровкаОПП.Выгрузить(Расшифровка);
			
			Расшифровка.Установить("ДтКт", 2);
			
			Расшифровка.Установить("Счет", Сч10);
			
			Расшифровка.Установить("КорСчет", БухИт.Счет);
			Расшифровка.Установить("КорВидСубконто1", БухИт.Счет.ВидСубконто(1));
			Расшифровка.Установить("КорСубконто1",    БухИт.Субконто(1));
			Расшифровка.Установить("КорВидСубконто2", БухИт.Счет.ВидСубконто(2));
			Расшифровка.Установить("КорСубконто2",    БухИт.Субконто(2));
			Расшифровка.Установить("КорВидСубконто3", БухИт.Счет.ВидСубконто(3));
			Расшифровка.Установить("КорСубконто3",    БухИт.Субконто(3));
			РасшифровкаЗакрытияСчета16_1.РасшифровкаОтчетПоПроводкам = Расшифровка;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // СписаниеСчета16_1()

//******************************************************************************
// Проц ЗакрытиеСчета16()
//
// Параметры:
//  Нет.
//
// Вызывается из формул элементов диалога:
//  Нет.
//
// Описание:
//  Здесь описывается процедура.
//
Процедура ЗакрытиеСчета16()
    
	Сч16_1 = СчетПоКоду("16.1");
	Сч16_2 = СчетПоКоду("16.2");
	Сч10   = СчетПоКоду("10");
	Сч41   = СчетПоКоду("41");
	Сч90_2 = СчетПоКоду("90.2");
	
	ОтклонениеВСтоимостиМатериалов = БухИтЗаМесяц.СКД(Сч16_1) - БухИтЗаМесяц.СКК(Сч16_1);
	
	ОстатокМатериалов = БухИтЗаМесяц.СКД(Сч10);
	СуммаПереданныхМатериалов = БухИтЗаМесяц.КО(Сч10) - БухИтЗаМесяц.ОБ(Сч10, Сч10);
	Если ОстатокМатериалов + СуммаПереданныхМатериалов <> 0 Тогда
		КоэффициентСписания = ОтклонениеВСтоимостиМатериалов/(ОстатокМатериалов + СуммаПереданныхМатериалов);
	Иначе
		КоэффициентСписания = 0;
	КонецЕсли;
	
	СуммаСписания = КоэффициентСписания * СуммаПереданныхМатериалов;
	
	// Формирование печатной формы
	Если ФормироватьПечатнуюФорму = 1 Тогда
		НаименованиеРегламентнойОперации = "Закрытие счета 16 ""Отклонение в стоимости МЦ""";
		Таб.ВывестиСекцию("РегламентнаяОперация");
		
		ИнициализироватьРасшифровкуЗакрытиюСчета16();
		
		Если СуммаСписания <> 0 Тогда
			ТаблицаРасшифровкаРегламентнойОперации.НоваяСтрока();
			ТаблицаРасшифровкаРегламентнойОперации.СальдоНаКонец         = ОтклонениеВСтоимостиМатериалов;
			ТаблицаРасшифровкаРегламентнойОперации.СтоимостьМПЗНаКонец   = ОстатокМатериалов;
			ТаблицаРасшифровкаРегламентнойОперации.СтоимостьСписанныхМПЗ = СуммаПереданныхМатериалов;
			ТаблицаРасшифровкаРегламентнойОперации.Коэффициент           = КоэффициентСписания;
			
			// Формирование расшифровок
			РасшифровкаОборотноСальдоваяВедомостьПоСчету16 = СоздатьОбъект("СписокЗначений");
			ОсновнаяРасшифровкаОСВ.Выгрузить(РасшифровкаОборотноСальдоваяВедомостьПоСчету16);
			РасшифровкаОборотноСальдоваяВедомостьПоСчету16.Установить("Счет", Сч16_1);
			ТаблицаРасшифровкаРегламентнойОперации.РасшифровкаОборотноСальдоваяВедомостьПоСчету16 = РасшифровкаОборотноСальдоваяВедомостьПоСчету16;
			
			РасшифровкаОборотноСальдоваяВедомостьПоСчету = СоздатьОбъект("СписокЗначений");
			ОсновнаяРасшифровкаОСВ.Выгрузить(РасшифровкаОборотноСальдоваяВедомостьПоСчету);
			РасшифровкаОборотноСальдоваяВедомостьПоСчету.Установить("Счет", Сч10);
			ТаблицаРасшифровкаРегламентнойОперации.РасшифровкаОборотноСальдоваяВедомостьПоСчету = РасшифровкаОборотноСальдоваяВедомостьПоСчету;
			
			ТаблицаРасшифровкаРегламентнойОперации.РасшифровкаЗакрытияСчета16 = РасшифровкаЗакрытияСчета16(Сч16_1);
		КонецЕсли;
	КонецЕсли;
	    
	ВсегоСуммаСписания = 0;
	
	Если СуммаСписания <> 0 Тогда
		
		Коэффициент = СуммаСписания / СуммаПереданныхМатериалов;
		
		БухИт10 = СоздатьОбъект("БухгалтерскиеИтоги"); БухИт10.ИспользоватьРазделительУчета(ЮрЛицо);
		БухИт10.ИспользоватьСубконто();
		БухИт10.ИспользоватьСубконто();
		БухИт10.ИспользоватьСубконто();
		БухИт10.ВключатьСубсчета(-1, 0);
		БухИт10.ВыполнитьЗапрос(ДатаНач, ДатаКон,, Сч10,, 2,,);
		БухИт10.ВыбратьСчета();
		Пока БухИт10.ПолучитьСчет() = 1 Цикл
			Если БухИт10.Счет.ПринадлежитГруппе(Сч10) = 1 Тогда
			    Продолжить;
			КонецЕсли;
			
			Счет = БухИт10.Счет;
			СписокСубконто = ПолучитьСписокКорректируемыхСубконто(Счет);
			КоличествоСубконто = СписокСубконто.РазмерСписка();
			Если КоличествоСубконто = 0 Тогда
				 СписаниеСчета16_1(БухИт10, Коэффициент, ВсегоСуммаСписания);
				
			Иначе
				Стр = "";
				НомерСубконто1 = СписокСубконто.ПолучитьЗначение(1, Стр);
				БухИт10.ВыбратьСубконто(НомерСубконто1);
				Пока БухИт10.ПолучитьСубконто(НомерСубконто1) = 1 Цикл
					Если КоличествоСубконто = 1 Тогда
						СписаниеСчета16_1(БухИт10, Коэффициент, ВсегоСуммаСписания);
						
					Иначе
						НомерСубконто2 = СписокСубконто.ПолучитьЗначение(2, Стр);
						БухИт10.ВыбратьСубконто(НомерСубконто2);
						Пока БухИт10.ПолучитьСубконто(НомерСубконто2) = 1 Цикл
							
							Если КоличествоСубконто = 2 Тогда
								СписаниеСчета16_1(БухИт10, Коэффициент, ВсегоСуммаСписания);
								
							Иначе
								НомерСубконто3 = СписокСубконто.ПолучитьЗначение(3, Стр);
								БухИт10.ВыбратьСубконто(НомерСубконто3);
								Пока БухИт10.ПолучитьСубконто(НомерСубконто3) = 1 Цикл
									СписаниеСчета16_1(БухИт10, Коэффициент, ВсегоСуммаСписания);
								КонецЦикла;
							КонецЕсли;
						КонецЦикла;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	// Формирование печатной формы
	Если ФормироватьПечатнуюФорму = 1 Тогда
		Если ТаблицаРасшифровкаРегламентнойОперации.КоличествоСтрок() > 0 Тогда
			ТаблицаРасшифровкаРегламентнойОперации.СуммаСписания = ВсегоСуммаСписания;
			
			Расшифровка = СоздатьОбъект("СписокЗначений");
			Расшифровка.ДобавитьЗначение("ЗакрытиеСчета16_1", "Наименование таблицы");
			Расшифровка.ДобавитьЗначение(ТаблицаРасшифровкаРегламентнойОперации, "Таблица данных");
			Расшифровка.ДобавитьЗначение(ДатаДок, "Дата операции");
			
			НаименованиеРегламентнойПодоперации = "Закрытие счета 16.1 ""Отклонение в стоимости материалов""";
			Таб.ВывестиСекцию("ПодоперацияВыполнена");
			
		Иначе
			НаименованиеРегламентнойПодоперации = "По счету 16.1 ""Отклонение в стоимости материалов"" нет отклонения в стоимости материалов";
			Таб.ВывестиСекцию("ПодоперацияНеВыполнена");
		КонецЕсли;
	КонецЕсли;


	ОстатокТовара = БухИтЗаМесяц.СКД(Сч41);
	ОтклонениеВСтоимостиТоваров = БухИтЗаМесяц.СКД(Сч16_2) - БухИтЗаМесяц.СКК(Сч16_2);
	
	СуммаРеализованногоТовара = 0;
	БухИт90_2 = СоздатьОбъект("БухгалтерскиеИтоги"); БухИт90_2.ИспользоватьРазделительУчета(ЮрЛицо);
	БухИт90_2.ИспользоватьСубконто(ВидыСубконто.ВидыНоменклатуры,,,);
	БухИт90_2.ВключатьСубсчета(-1, 0);
	БухИт90_2.ВыполнитьЗапрос(ДатаНач, ДатаКон, Сч90_2, "41, 45, 60",, 2,,);
	БухИт90_2.ВыбратьСубконто(ВидыСубконто.ВидыНоменклатуры,, 1);
	Пока БухИт90_2.ПолучитьСубконто(ВидыСубконто.ВидыНоменклатуры) = 1 Цикл
		Если БухИт90_2.Субконто(ВидыСубконто.ВидыНоменклатуры).ТипНоменклатуры <> Перечисление.ТипыНоменклатуры.Товар Тогда
			Продолжить;   
		КонецЕсли;
		СуммаРеализованногоТовара = СуммаРеализованногоТовара + БухИт90_2.ДО();
	КонецЦикла;
	Если ОстатокТовара + СуммаРеализованногоТовара <> 0 Тогда
		КоэффициентСписания = ОтклонениеВСтоимостиТоваров / (ОстатокТовара + СуммаРеализованногоТовара);
	Иначе
		КоэффициентСписания = 0;
	КонецЕсли;
	
	СуммаСписания = КоэффициентСписания * СуммаРеализованногоТовара;
	
	// Формирование печатной формы
	Если ФормироватьПечатнуюФорму = 1 Тогда
		
		// Формирование таблицы по закрытию счета 16.2
		ИнициализироватьРасшифровкуЗакрытиюСчета16();
		Если СуммаСписания <> 0 Тогда
			ТаблицаРасшифровкаРегламентнойОперации.НоваяСтрока();
			ТаблицаРасшифровкаРегламентнойОперации.СальдоНаКонец         = ОтклонениеВСтоимостиТоваров;
			ТаблицаРасшифровкаРегламентнойОперации.СтоимостьМПЗНаКонец   = ОстатокТовара;
			ТаблицаРасшифровкаРегламентнойОперации.СтоимостьСписанныхМПЗ = СуммаРеализованногоТовара;
			ТаблицаРасшифровкаРегламентнойОперации.Коэффициент           = КоэффициентСписания;
			
			РасшифровкаОборотноСальдоваяВедомостьПоСчету16 = СоздатьОбъект("СписокЗначений");
			ОсновнаяРасшифровкаОСВ.Выгрузить(РасшифровкаОборотноСальдоваяВедомостьПоСчету16);
			РасшифровкаОборотноСальдоваяВедомостьПоСчету16.Установить("Счет", Сч16_2);
			ТаблицаРасшифровкаРегламентнойОперации.РасшифровкаОборотноСальдоваяВедомостьПоСчету16 = РасшифровкаОборотноСальдоваяВедомостьПоСчету16;
			
			РасшифровкаОборотноСальдоваяВедомостьПоСчету = СоздатьОбъект("СписокЗначений");
			ОсновнаяРасшифровкаОСВ.Выгрузить(РасшифровкаОборотноСальдоваяВедомостьПоСчету);
			РасшифровкаОборотноСальдоваяВедомостьПоСчету.Установить("Счет", Сч41);
			ТаблицаРасшифровкаРегламентнойОперации.РасшифровкаОборотноСальдоваяВедомостьПоСчету = РасшифровкаОборотноСальдоваяВедомостьПоСчету;
			
			ТаблицаРасшифровкаРегламентнойОперации.РасшифровкаЗакрытияСчета16 = РасшифровкаЗакрытияСчета16(Сч16_2);
		КонецЕсли;
	КонецЕсли;
	    
	СписаннаяСумма = 0;
	Если СуммаСписания <> 0 Тогда
		СуммаРеализованногоТовараНаКоторуюРаспределенСчет = 0;
		
		БухИт90_2.ВыбратьСчета(, 1);
		Пока БухИт90_2.ПолучитьСчет() = 1 Цикл
			БухИт90_2.ВыбратьСубконто(ВидыСубконто.ВидыНоменклатуры,, 1);
			Пока БухИт90_2.ПолучитьСубконто(ВидыСубконто.ВидыНоменклатуры) = 1 Цикл
				Если БухИт90_2.Субконто(ВидыСубконто.ВидыНоменклатуры).ТипНоменклатуры <> Перечисление.ТипыНоменклатуры.Товар Тогда
					Продолжить;   
				КонецЕсли;
				СуммаРеализованногоТовараПоВН = БухИт90_2.ДО();
				
				СуммаРеализованногоТовараНаКоторуюРаспределенСчет = СуммаРеализованногоТовараНаКоторуюРаспределенСчет + СуммаРеализованногоТовараПоВН;
				СуммаПрводки = Окр(СуммаСписания * (СуммаРеализованногоТовараНаКоторуюРаспределенСчет) / СуммаРеализованногоТовара - СписаннаяСумма, 2, 1);
				СписаннаяСумма = СписаннаяСумма + СуммаПрводки;
				Если СуммаРеализованногоТовараПоВН > 0 Тогда
					Операция.НоваяПроводка(); Операция.РазделительУчета = ЮрЛицо;
					Операция.НомерЖурнала = "ФР";
					Операция.СодержаниеПроводки = "Списание счета 16.2";
					Операция.ПервичныйДокумент  = глПредставлениеПервичногоДокумента(Контекст);
					Операция.Дебет.Счет = БухИт90_2.Счет;
					Операция.Дебет.ВидыНоменклатуры = БухИт90_2.Субконто(ВидыСубконто.ВидыНоменклатуры);
					Операция.Кредит.Счет = Сч16_2;
					Операция.Сумма = СуммаПрводки;
				
					// Формирование печатной формы
					Если ФормироватьПечатнуюФорму = 1 Тогда
						РасшифровкаЗакрытияСчета16_2 = ТаблицаРасшифровкаРегламентнойОперации.РасшифровкаЗакрытияСчета16.Получить("Таблица данных");
						РасшифровкаЗакрытияСчета16_2.НоваяСтрока();
						РасшифровкаЗакрытияСчета16_2.ВидНоменклатуры = БухИт90_2.Субконто(ВидыСубконто.ВидыНоменклатуры);
						РасшифровкаЗакрытияСчета16_2.СтоимостьСписанныхМПЗ = СуммаРеализованногоТовараПоВН;
						РасшифровкаЗакрытияСчета16_2.Коэффициент = КоэффициентСписания;
						РасшифровкаЗакрытияСчета16_2.СуммаСписания = СуммаПрводки;
						
						// формирование расшифровки
						Расшифровка = СоздатьОбъект("СписокЗначений");
						ОсновнаяРасшифровкаОСВ.Выгрузить(Расшифровка);
						Расшифровка.Установить("Счет", БухИт90_2.Счет);
						Расшифровка.Установить("ВидСубконто1", ВидыСубконто.ВидыНоменклатуры);
						Расшифровка.Установить("Субконто1", БухИт90_2.Субконто(ВидыСубконто.ВидыНоменклатуры));
						Расшифровка.Установить("ОтборСубконто1", 1);
						
						РасшифровкаЗакрытияСчета16_2.РасшифровкаОборотноСальдоваяВедомостьПоСчету = Расшифровка;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;
	
	// Формирование печатной формы
	Если ФормироватьПечатнуюФорму = 1 Тогда
		Если ТаблицаРасшифровкаРегламентнойОперации.КоличествоСтрок() > 0 Тогда
			ТаблицаРасшифровкаРегламентнойОперации.СуммаСписания = СписаннаяСумма;
			
			Расшифровка = СоздатьОбъект("СписокЗначений");
			Расшифровка.ДобавитьЗначение("ЗакрытиеСчета16_2", "Наименование таблицы");
			Расшифровка.ДобавитьЗначение(ТаблицаРасшифровкаРегламентнойОперации, "Таблица данных");
			Расшифровка.ДобавитьЗначение(ДатаДок, "Дата операции");
			
			НаименованиеРегламентнойПодоперации = "Закрытие счета 16.2 ""Отклонение в стоимости товаров""";
			Таб.ВывестиСекцию("ПодоперацияВыполнена");
			
		Иначе
			НаименованиеРегламентнойПодоперации = "По счету 16.2 ""Отклонение в стоимости товаров"" нет отклонения в стоимости товаров";
			Таб.ВывестиСекцию("ПодоперацияНеВыполнена");
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // Проц ЗакрытиеСчета16()

//******************************************************************************
// НачислениеНалоговСФОТ()
//
Процедура НачислениеНалоговСФОТ()
	
	Перем ПределыДоходовЕСН[10];
	Перем СтавкиНалогаПФР[10];
	Перем СтавкиНалогаТФОМС[10];
	Перем СтавкиНалогаФФОМС[10];
	Перем СтавкиНалогаФСС[10];
	Перем СтавкиВзносаПФРСтраховаяЧасть[10];
	Перем СтавкиВзносаПФРНакопительнаяЧасть[10];
	
	КонецМесяца = КонМесяца(ДатаДок);
	СтатьяРБП = СоздатьОбъект("Справочник.РасходыБудущихПериодов");
	
	// Если выручка уже была скорректирована, то проводки документа
	// следует записать.
	Если (Операция.КоличествоПроводок() > 0) и (Константа.УчитыватьПокупнуюСтоимостьТоваров.Получить(КонецМесяца) <> Нет) Тогда
		Операция.ЗаписатьПроводки();
	КонецЕсли;
	
    // Считаем, что дата документа является последней датой 
	// месяца и все проводки по начислению зарплаты уже сделаны.
	
	// Сформируем таблицу значений, содержащую суммы начислений,
	// отнесенные к затратам на продажи, не облагаемые ЕНВД.
	
	ТаблицаНачислений = СоздатьОбъект("ТаблицаЗначений"); 
	ТаблицаНачислений.НоваяКолонка("Сотрудник", "Справочник.Сотрудники");
	
	ТаблицаНачислений.НоваяКолонка("Счет", "Счет.Основной");
	ТаблицаНачислений.НоваяКолонка("Субконто1");
	ТаблицаНачислений.НоваяКолонка("Субконто2");
	ТаблицаНачислений.НоваяКолонка("Субконто3");
	ТаблицаНачислений.НоваяКолонка("НомерСубконто");
	ТаблицаНачислений.НоваяКолонка("СтатьяПрочихОтчислений");
	
	ТаблицаНачислений.НоваяКолонка("ВидНачисления");
	ТаблицаНачислений.НоваяКолонка("ЕСН_ФБ", "Число", 1);
	ТаблицаНачислений.НоваяКолонка("ФСС", "Число", 1);
	ТаблицаНачислений.НоваяКолонка("ФОМС", "Число", 1);
	ТаблицаНачислений.НоваяКолонка("ПФР", "Число", 1);
	ТаблицаНачислений.НоваяКолонка("ФСС_НС", "Число", 1);
	ТаблицаНачислений.НоваяКолонка("СО", "Число", 1);
	
	ТаблицаНачислений.НоваяКолонка("ЕНВД", "Число", 1);

	ТаблицаНачислений.НоваяКолонка("Сумма", "Число");
	
	Если Константа.МетодРаспределенияКосвенныхРасходовПоВидамДеятельности.Получить(ДатаДок) = Перечисление.МетодыРаспределенияКосвенныхРасходовПоВидамДеятельности.ЗаМесяц Тогда
		// Определим долю выручки от продаж, облагаемых ЕНВД.
		К = глРасчитатьКоэффициентыРаспределения(НачМесяца(ДатаДок),КонМесяца(ДатаДок),ТекущийДокумент());	
	КонецЕсли;
	
	Сч44_1_1 = СчетПоКоду("44.1.1");
	Сч44_1_2 = СчетПоКоду("44.1.2");
	Сч97 = СчетПоКоду("97");
	Сч20 = СчетПоКоду("20");
	Сч00 = СчетПоКоду("00");
	СчДФЛ_1 = СчетПоКоду("ДФЛ.1");
	СчДФЛ_2 = СчетПоКоду("ДФЛ.2");
			
	// Занесем в таблицу операции начисления зарплаты за текущий месяц.
	Опер = СоздатьОбъект("Операция");
	Опер.ВыбратьОперацииСПроводками(НачМесяца(КонецМесяца), КонецМесяца, СчетПоКоду("70"),, 2);
	Пока Опер.ПолучитьПроводку() = 1 Цикл
		Сч = Опер.Дебет.Счет;
		Если Опер.Дебет.Счет = Сч97 Тогда
			Если ПустоеЗначение(Опер.Дебет.РасходыБудущихПериодов.СчетЗатрат) = 0 Тогда
			    Сч = Опер.Дебет.РасходыБудущихПериодов.СчетЗатрат;
			КонецЕсли;
			
			Если СтатьяРБП.НайтиЭлемент(Опер.Дебет.РасходыБудущихПериодов) = 1 Тогда
				СтатьяРБП.СуммаЕСН_ФБ = 0;
				СтатьяРБП.СуммаФСС = 0;
				СтатьяРБП.СуммаФФОМС = 0;
				СтатьяРБП.СуммаТФОМС = 0;
				СтатьяРБП.СуммаПФР_страх = 0;
				СтатьяРБП.СуммаПФР_нак = 0;
				СтатьяРБП.СуммаФСС_НС = 0;
				СтатьяРБП.СтавкаЕСН_ФБ = 0;
				СтатьяРБП.СтавкаФСС = 0;
				СтатьяРБП.СтавкаФФОМС = 0;
				СтатьяРБП.СтавкаТФОМС = 0;
				СтатьяРБП.СтавкаФФОМС = 0;
				СтатьяРБП.СтавкаПФР_страх = 0;
				СтатьяРБП.СтавкаПФР_нак = 0;
				СтатьяРБП.СтавкаФСС_НС = 0;
				СтатьяРБП.Записать();
			КонецЕсли;
		КонецЕсли;
		
		ПрименяетсяДокНачислениеЗарплаты = 0;
		Если Опер.Документ.Вид() = "НачислениеЗП" Тогда
			ПрименяетсяДокНачислениеЗарплаты = 1;
			
		ИначеЕсли Опер.Документ.Вид() = "Сторно" Тогда
			Если Опер.Документ.СторнируемыйДокумент.Вид() = "НачислениеЗП" Тогда
				ПрименяетсяДокНачислениеЗарплаты = 1;
			КонецЕсли;
		КонецЕсли;
		
		Если Сч = Сч00 Тогда
			Продолжить;
			
		ИначеЕсли Сч = Сч44_1_1 Тогда // не облагаем ЕНВД
			ДобавитьСтрокуВТаблицу(ТаблицаНачислений, Опер, Опер.Сумма, 0);
				
		ИначеЕсли Сч = Сч44_1_2 Тогда // облагаем ЕНВД
			ДобавитьСтрокуВТаблицу(ТаблицаНачислений, Опер, Опер.Сумма, 1);
			
		ИначеЕсли ПрименяетсяДокНачислениеЗарплаты = 1 Тогда
			ВариантРаспределенияРасходов = ?(Опер.Документ.Вид() = "НачислениеЗП",Опер.Документ.ВариантРаспределенияРасходов,Опер.Документ.СторнируемыйДокумент.ВариантРаспределенияРасходов);
			Если ВариантРаспределенияРасходов = 1 Тогда
				ДобавитьСтрокуВТаблицу(ТаблицаНачислений, Опер, Опер.Сумма, 0);
				
			ИначеЕсли ВариантРаспределенияРасходов = 2 Тогда
				ДобавитьСтрокуВТаблицу(ТаблицаНачислений, Опер, Опер.Сумма, 1);
					
			ИначеЕсли ВариантРаспределенияРасходов = 0 Тогда
				Если Опер.Документ.Вид() = "Сторно" Тогда
					К_сторно = глРасчитатьКоэффициентыРаспределения(НачМесяца(Опер.Документ.СторнируемыйДокумент.ДатаДок),КонМесяца(Опер.Документ.СторнируемыйДокумент.ДатаДок),ТекущийДокумент());;
				Иначе
					К_сторно = 0
				КонецЕсли;
								
				ДобавитьСтрокуВТаблицу(ТаблицаНачислений, Опер, ?(К_сторно = 0,К,К_сторно)*Опер.Сумма, 0);
				ДобавитьСтрокуВТаблицу(ТаблицаНачислений, Опер, Опер.Сумма - ?(К_сторно = 0,К,К_сторно)*Опер.Сумма, 1);
			КонецЕсли;
			
		ИначеЕсли Сч = Сч20 Тогда
			
			Если Опер.Дебет.Счет = Сч97 Тогда
				ВидНоменклатуры = Опер.Дебет.РасходыБудущихПериодов.Субконто1;
			Иначе
			    ВидНоменклатуры = Опер.Дебет.ВидыНоменклатуры;
			КонецЕсли;
			
			Если ПустоеЗначение(ВидНоменклатуры) = 0 Тогда
				Если ВидНоменклатуры.ТипНоменклатуры = Перечисление.ТипыНоменклатуры.УслугаЕНВД Тогда
			        ДобавитьСтрокуВТаблицу(ТаблицаНачислений, Опер, Опер.Сумма, 1);
					
				Иначе
					ДобавитьСтрокуВТаблицу(ТаблицаНачислений, Опер, Опер.Сумма, 0);
				КонецЕсли;
				
			Иначе
				ДобавитьСтрокуВТаблицу(ТаблицаНачислений, Опер, Опер.Сумма, 0);
			КонецЕсли;
				
		Иначе   
			
			Если Константа.МетодРаспределенияКосвенныхРасходовПоВидамДеятельности.Получить(ДатаДок) = Перечисление.МетодыРаспределенияКосвенныхРасходовПоВидамДеятельности.ЗаМесяц Тогда
				// распределение: облагается ЕНВД / не облагается ЕНВД
				ДобавитьСтрокуВТаблицу(ТаблицаНачислений, Опер, К*Опер.Сумма, 0);
				ДобавитьСтрокуВТаблицу(ТаблицаНачислений, Опер, Опер.Сумма - К*Опер.Сумма, 1);
			Иначе 
				// не распределяем
				ДобавитьСтрокуВТаблицу(ТаблицаНачислений, Опер, Опер.Сумма, 0);				
			КонецЕсли;
			
		КонецЕсли;
	КонецЦикла;
	
	ТаблицаНачислений.Свернуть("Сотрудник,ВидНачисления,ЕСН_ФБ,ФСС,ФОМС,ПФР,ФСС_НС,СО,Счет,Субконто1,Субконто2,Субконто3,НомерСубконто,СтатьяПрочихОтчислений,ЕНВД", "Сумма");
	ТаблицаНачислений.Сортировать("Сотрудник,ВидНачисления");
	
	ТаблицаНачисленийПоВидам = СоздатьОбъект("ТаблицаЗначений");
	ТаблицаНачислений.Выгрузить(ТаблицаНачисленийПоВидам);
	ТаблицаНачисленийПоВидам.Свернуть("Сотрудник,ВидНачисления,ЕНВД", "Сумма");
	ТаблицаНачисленийПоВидам.ВыбратьСтроки();
	Пока ТаблицаНачисленийПоВидам.ПолучитьСтроку() = 1 Цикл
		Если ПустоеЗначение(ТаблицаНачисленийПоВидам.ВидНачисления) = 0 Тогда
			
			Если ТаблицаНачисленийПоВидам.Сумма = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			Операция.НоваяПроводка(); Операция.РазделительУчета = ЮрЛицо;
			Операция.НомерЖурнала = "ЗП";
			Операция.СодержаниеПроводки = "Начислен доход";
			Операция.ПервичныйДокумент  = глПредставлениеПервичногоДокумента(Контекст);
			Операция.Кредит.Счет = ?(ТаблицаНачисленийПоВидам.ЕНВД = 0, СчДФЛ_1, СчДФЛ_2);
			Операция.Кредит.Сотрудники = ТаблицаНачисленийПоВидам.Сотрудник;
			Операция.Кредит.ВидыНачисленийВыплат = ТаблицаНачисленийПоВидам.ВидНачисления;
			Операция.Сумма = ТаблицаНачисленийПоВидам.Сумма;
		КонецЕсли;
	КонецЦикла;
	
	Если Операция.КоличествоПроводок() > 0 Тогда
		Операция.ЗаписатьПроводки();
	КонецЕсли;
	
	Если ДатаГод(КонецМесяца) < 2010 Тогда
		
		// Определим текущие обороты по налоговой базе, а также
		// суммы налога, исчисленные за предыдущие месяцы.
		БухИтЕСН = СоздатьОбъект("БухгалтерскиеИтоги"); БухИтЕСН.ИспользоватьРазделительУчета(ЮрЛицо);
		БухИтЕСН.ВключатьСубсчета(, -1);
		БухИтЕСН.ИспользоватьСубконто();
		БухИтЕСН.ИспользоватьСубконто();
		БухИтЕСН.ИспользоватьКорСубконто();
		БухИтЕСН.ИспользоватьКорСубконто();
		БухИтЕСН.ИспользоватьКорСубконто();
		БухИтЕСН.ВыполнитьЗапрос(НачГода(ДатаНач), ДатаКон, "69.1,69.2.1,69.2.2,69.2.3,69.3.1,69.3.2",,, 2);
		
		БухИтДФЛ = СоздатьОбъект("БухгалтерскиеИтоги"); БухИтДФЛ.ИспользоватьРазделительУчета(ЮрЛицо);
		БухИтДФЛ.Опции(1, 1);
		БухИтДФЛ.ИспользоватьСубконто(ВидыСубконто.Сотрудники);
		БухИтДФЛ.ИспользоватьСубконто(ВидыСубконто.ВидыНачисленийВыплат);
		
		Если ДатаГод(КонецМесяца) < 2005 Тогда
			БухИтДФЛ.ВыполнитьЗапрос(НачГода(ДатаНач), ДатаКон, "ДФЛ.1,ДФЛ.2",,, 2, "Месяц");
			
		Иначе
			БухИтДФЛ.ВыполнитьЗапрос(ДатаНач, ДатаКон, "ДФЛ.1,ДФЛ.2",,, 2);
		КонецЕсли;
		
		ИсчислятьЕСНпоВидамДеятОблЕНВД = ?(КонецМесяца > '31.07.2002', 0, 1);
		СтавкаФСС_НС = глПолучитьНалог("ФСС_НС").Ставка.Получить(КонецМесяца);
		
		БазаФСС_НС = 0;
		БазаФСС_НС_инв = 0;
		БазаСО = 0;
		
		// Таблица корреспонденций для начислений, облагаемых ЕСН
		НачисленияЕСН = СоздатьОбъект("ТаблицаЗначений");
		НачисленияЕСН.НоваяКолонка("Счет", "Счет.Основной");
		НачисленияЕСН.НоваяКолонка("Субконто1");
		НачисленияЕСН.НоваяКолонка("Субконто2");
		НачисленияЕСН.НоваяКолонка("Субконто3");
		НачисленияЕСН.НоваяКолонка("Сумма", "Число");
		НачисленияЕСН.НоваяКолонка("ЕНВД", "Число");
		
		// Таблица корреспонденций для начислений, облагаемых взносами в ФОМС
		НачисленияФОМС = СоздатьОбъект("ТаблицаЗначений");
		НачисленияФОМС.НоваяКолонка("Счет", "Счет.Основной");
		НачисленияФОМС.НоваяКолонка("Субконто1");
		НачисленияФОМС.НоваяКолонка("Субконто2");
		НачисленияФОМС.НоваяКолонка("Субконто3");
		НачисленияФОМС.НоваяКолонка("Сумма", "Число");
		
		// Таблица корреспонденций для начислений, облагаемых взносами в ФСС
		НачисленияФСС = СоздатьОбъект("ТаблицаЗначений");
		НачисленияФСС.НоваяКолонка("Счет", "Счет.Основной");
		НачисленияФСС.НоваяКолонка("Субконто1");
		НачисленияФСС.НоваяКолонка("Субконто2");
		НачисленияФСС.НоваяКолонка("Субконто3");
		НачисленияФСС.НоваяКолонка("Сумма", "Число");
		
		// Таблица корреспонденций для начислений, облагаемых взносами в ПФР
		НачисленияПФР = СоздатьОбъект("ТаблицаЗначений");
		НачисленияПФР.НоваяКолонка("Счет", "Счет.Основной");
		НачисленияПФР.НоваяКолонка("Субконто1");
		НачисленияПФР.НоваяКолонка("Субконто2");
		НачисленияПФР.НоваяКолонка("Субконто3");
		НачисленияПФР.НоваяКолонка("Сумма", "Число");
		
		НачисленияФСС_НС = СоздатьОбъект("ТаблицаЗначений");
		НачисленияФСС_НС.НоваяКолонка("Счет", "Счет.Основной");
		НачисленияФСС_НС.НоваяКолонка("Субконто1");
		НачисленияФСС_НС.НоваяКолонка("Субконто2");
		НачисленияФСС_НС.НоваяКолонка("Субконто3");
		НачисленияФСС_НС.НоваяКолонка("Сумма", "Число");
		
		НачисленияФСС_НС_инв = СоздатьОбъект("ТаблицаЗначений");
		НачисленияФСС_НС_инв.НоваяКолонка("Счет", "Счет.Основной");
		НачисленияФСС_НС_инв.НоваяКолонка("Субконто1");
		НачисленияФСС_НС_инв.НоваяКолонка("Субконто2");
		НачисленияФСС_НС_инв.НоваяКолонка("Субконто3");
		НачисленияФСС_НС_инв.НоваяКолонка("Сумма", "Число");
		
		НачисленияСО = СоздатьОбъект("ТаблицаЗначений");
		НачисленияСО.НоваяКолонка("Сумма", "Число");
		НачисленияСО.НоваяКолонка("ЕНВД", "Число");
		
		ТаблицаРаспределения = СоздатьОбъект("ТаблицаЗначений");
		СписокКолонок = СоздатьОбъект("СписокЗначений");
		СписокСотрудников = СоздатьОбъект("СписокЗначений");
		
		Если ДатаГод(КонецМесяца) < 2005 Тогда
			БазаЕСН = СоздатьОбъект("ТаблицаЗначений");
			БазаЕСН.НоваяКолонка("Месяц");
			БазаЕСН.НоваяКолонка("Сумма", "Число");
			БазаЕСН.НоваяКолонка("Льгота", "Число");
			БазаЕСН.НоваяКолонка("Инвалид", "Число", 1);
			
			БазаЕСНбезПФР = СоздатьОбъект("ТаблицаЗначений");
			БазаЕСНбезПФР.НоваяКолонка("Месяц");
			БазаЕСНбезПФР.НоваяКолонка("Сумма", "Число");
			БазаЕСНбезПФР.НоваяКолонка("Льгота", "Число");
			БазаЕСНбезПФР.НоваяКолонка("Инвалид", "Число", 1);
			
			БазаФСС = СоздатьОбъект("ТаблицаЗначений");
			БазаФСС.НоваяКолонка("Месяц");
			БазаФСС.НоваяКолонка("Сумма", "Число");
			БазаФСС.НоваяКолонка("Льгота", "Число");
			БазаФСС.НоваяКолонка("Инвалид", "Число", 1);
			
			БазаФОМС = СоздатьОбъект("ТаблицаЗначений");
			БазаФОМС.НоваяКолонка("Месяц");
			БазаФОМС.НоваяКолонка("Сумма", "Число");
			БазаФОМС.НоваяКолонка("Льгота", "Число");
			БазаФОМС.НоваяКолонка("Инвалид", "Число", 1);
			
			БазаПФР = СоздатьОбъект("ТаблицаЗначений");
			БазаПФР.НоваяКолонка("Месяц");
			БазаПФР.НоваяКолонка("Сумма", "Число");
			БазаПФР.НоваяКолонка("Льгота", "Число");
			БазаПФР.НоваяКолонка("Инвалид", "Число", 1);
			
			ТекстЗапроса =
			"//{{ЗАПРОС(СписокСотрудников)
			|Без итогов;
			|Сотрудник = Справочник.Сотрудники.ТекущийЭлемент;
			|Группировка Сотрудник Без Групп Все;
			|"//}}ЗАПРОС
			;
			Запрос = СоздатьОбъект("Запрос");
			Если Запрос.Выполнить(ТекстЗапроса) = 0 Тогда
				Возврат;
			КонецЕсли;
			ВременнаяТаблица = СоздатьОбъект("ТаблицаЗначений");
			Запрос.Выгрузить(ВременнаяТаблица,,0);
			ВременнаяТаблица.Выгрузить(СписокСотрудников,,,"Сотрудник");
			ВременнаяТаблица = "";
			
		Иначе
			ДоходыВычетыНалогиСотрудников = "";
			глСобратьДанныеДляЕСН(ДоходыВычетыНалогиСотрудников, СписокСотрудников, ДатаКон,,, 0);
		КонецЕсли;
		
		// Цикл по сотрудникам.		
		НомерЗначения = 0;
		Пока НомерЗначения < СписокСотрудников.РазмерСписка() Цикл
			НомерЗначения = НомерЗначения + 1;
			Сотрудник = СписокСотрудников.ПолучитьЗначение(НомерЗначения);
			
			Если Сотрудник.НачислятьНалогиСФОТ.Получить(КонецМесяца) = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			// Получим таблицу "Начисления" с начислениями очередного сотрудника.
			СписокКолонок.УдалитьВсе();
			СписокКолонок.Установить("Сотрудник", Сотрудник);
			Начисления = ОтобратьСтрокиТаблицы(ТаблицаНачислений, СписокКолонок);
			
			НачисленияЕСН.УдалитьСтроки();
			НачисленияПФР.УдалитьСтроки();
			НачисленияФСС.УдалитьСтроки();
			НачисленияФОМС.УдалитьСтроки();
			
			Инвалид = ?((Сотрудник.Инвалид.Получить(ДатаКон) = 1) или (Константа.ИнвалиднаяОрганизация.Получить(ДатаКон) = Да), 1, 0);
			НачисленияЕНВД = 0;
			ЕстьБазаФСС_НС = 0;
			ЕстьБазаФСС_НС_инв = 0;
			
			Начисления.ВыбратьСтроки();
			Пока Начисления.ПолучитьСтроку() = 1 Цикл
				Если Начисления.ЕСН_ФБ = 1 Тогда
					Если Константа.ПорядокИсчисленияЕСН.Получить(ДатаКон) = 1 Тогда
						НачисленияЕСН.НоваяСтрока();
						НачисленияЕСН.Счет = Начисления.Счет;
						НачисленияЕСН.Субконто1 = Начисления.Субконто1;
						НачисленияЕСН.Субконто2 = Начисления.Субконто2;
						НачисленияЕСН.Субконто3 = Начисления.Субконто3;
						НачисленияЕСН.Сумма = Начисления.Сумма;
						
						Если Начисления.ЕНВД = 1 Тогда
							НачисленияЕСН.ЕНВД = 1;
							Если ПустоеЗначение(Начисления.НомерСубконто) = 0 Тогда
								НачисленияЕСН.УстановитьЗначение(НачисленияЕСН.НомерСтроки, Начисления.НомерСубконто, Начисления.СтатьяПрочихОтчислений);
							КонецЕсли;
							
							НачисленияЕНВД = НачисленияЕНВД + Начисления.Сумма;
						КонецЕсли;
						
					ИначеЕсли Начисления.ЕНВД = 0 Тогда
						НачисленияЕСН.НоваяСтрока();
						НачисленияЕСН.Счет = Начисления.Счет;
						НачисленияЕСН.Субконто1 = Начисления.Субконто1;
						НачисленияЕСН.Субконто2 = Начисления.Субконто2;
						НачисленияЕСН.Субконто3 = Начисления.Субконто3;
						НачисленияЕСН.Сумма = Начисления.Сумма;
					КонецЕсли;
				КонецЕсли;
				
				Если (Начисления.ФСС = 1) и (Начисления.ЕНВД = 0) Тогда
					НачисленияФСС.НоваяСтрока();
					НачисленияФСС.Счет = Начисления.Счет;
					НачисленияФСС.Субконто1 = Начисления.Субконто1;
					НачисленияФСС.Субконто2 = Начисления.Субконто2;
					НачисленияФСС.Субконто3 = Начисления.Субконто3;
					НачисленияФСС.Сумма = Начисления.Сумма;
				КонецЕсли;
				
				Если (Начисления.ФОМС = 1) и (Начисления.ЕНВД = 0) Тогда
					НачисленияФОМС.НоваяСтрока();
					НачисленияФОМС.Счет = Начисления.Счет;
					НачисленияФОМС.Субконто1 = Начисления.Субконто1;
					НачисленияФОМС.Субконто2 = Начисления.Субконто2;
					НачисленияФОМС.Субконто3 = Начисления.Субконто3;
					НачисленияФОМС.Сумма = Начисления.Сумма;
				КонецЕсли;
				
				Если Начисления.ПФР = 1 Тогда
					НачисленияПФР.НоваяСтрока();
					НачисленияПФР.Счет = Начисления.Счет;
					НачисленияПФР.Субконто1 = Начисления.Субконто1;
					НачисленияПФР.Субконто2 = Начисления.Субконто2;
					НачисленияПФР.Субконто3 = Начисления.Субконто3;
					Если ПустоеЗначение(Начисления.НомерСубконто) = 0 Тогда
						НачисленияПФР.УстановитьЗначение(НачисленияПФР.НомерСтроки, Начисления.НомерСубконто, Начисления.СтатьяПрочихОтчислений);
					КонецЕсли;
					НачисленияПФР.Сумма = Начисления.Сумма;
					
					Если Начисления.ЕСН_ФБ = 0 Тогда
						Если Константа.ПорядокИсчисленияЕСН.Получить(ДатаКон) = 1 Тогда
							НачисленияЕСН.НоваяСтрока();
							НачисленияЕСН.Счет = Начисления.Счет;
							НачисленияЕСН.Субконто1 = Начисления.Субконто1;
							НачисленияЕСН.Субконто2 = Начисления.Субконто2;
							НачисленияЕСН.Субконто3 = Начисления.Субконто3;
							НачисленияЕСН.Сумма = Начисления.Сумма;
							
							Если Начисления.ЕНВД = 1 Тогда
								НачисленияЕСН.ЕНВД = 1;
								Если ПустоеЗначение(Начисления.НомерСубконто) = 0 Тогда
									НачисленияЕСН.УстановитьЗначение(НачисленияЕСН.НомерСтроки, Начисления.НомерСубконто, Начисления.СтатьяПрочихОтчислений);
								КонецЕсли;
							КонецЕсли;
							
							НачисленияЕНВД = НачисленияЕНВД + Начисления.Сумма;
							НачисленияЕСН.ЕНВД = 1;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
				
				Если Начисления.ФСС_НС = 1 Тогда
					Если Инвалид = 1 Тогда
						НачисленияФСС_НС_инв.НоваяСтрока();
						НачисленияФСС_НС_инв.Счет = Начисления.Счет;
						НачисленияФСС_НС_инв.Субконто1 = Начисления.Субконто1;
						НачисленияФСС_НС_инв.Субконто2 = Начисления.Субконто2;
						НачисленияФСС_НС_инв.Субконто3 = Начисления.Субконто3;
						Если ПустоеЗначение(Начисления.НомерСубконто) = 0 Тогда
							НачисленияФСС_НС_инв.УстановитьЗначение(НачисленияФСС_НС_инв.НомерСтроки, Начисления.НомерСубконто, Начисления.СтатьяПрочихОтчислений);
						КонецЕсли;
						НачисленияФСС_НС_инв.Сумма = Начисления.Сумма;
						
					Иначе
						НачисленияФСС_НС.НоваяСтрока();
						НачисленияФСС_НС.Счет = Начисления.Счет;
						НачисленияФСС_НС.Субконто1 = Начисления.Субконто1;
						НачисленияФСС_НС.Субконто2 = Начисления.Субконто2;
						НачисленияФСС_НС.Субконто3 = Начисления.Субконто3;
						Если ПустоеЗначение(Начисления.НомерСубконто) = 0 Тогда
							НачисленияФСС_НС.УстановитьЗначение(НачисленияФСС_НС.НомерСтроки, Начисления.НомерСубконто, Начисления.СтатьяПрочихОтчислений);
						КонецЕсли;
						НачисленияФСС_НС.Сумма = Начисления.Сумма;
					КонецЕсли;
					
					ЕстьБазаФСС_НС = 1;
					ЕстьБазаФСС_НС_инв = 1;
				КонецЕсли;
				
				Если Начисления.СО = 1 Тогда
					НачисленияСО.НоваяСтрока();
					НачисленияСО.ЕНВД = Начисления.ЕНВД;
					НачисленияСО.Сумма = Начисления.Сумма;
				КонецЕсли;
			КонецЦикла;
			
			НачисленияЕСН.Свернуть("Счет,Субконто1,Субконто2,Субконто3,ЕНВД", "Сумма");
			НачисленияФОМС .Свернуть("Счет,Субконто1,Субконто2,Субконто3", "Сумма");
			НачисленияФСС.Свернуть("Счет,Субконто1,Субконто2,Субконто3", "Сумма");
			НачисленияПФР.Свернуть("Счет,Субконто1,Субконто2,Субконто3", "Сумма");
			НачисленияФСС_НС.Свернуть("Счет,Субконто1,Субконто2,Субконто3", "Сумма");
			НачисленияФСС_НС_инв.Свернуть("Счет,Субконто1,Субконто2,Субконто3", "Сумма");
			НачисленияСО.Свернуть("ЕНВД", "Сумма");
			
			ФСС_НС_сотр = 0;
			ФСС_НС_сотр_инв = 0;
			
			Если ДатаГод(КонецМесяца) < 2005 Тогда
				
				// Получим текущую налоговую базу по начислениям сотрудника.
				БазаЕСН.УдалитьСтроки();
				БазаЕСНбезПФР.УдалитьСтроки();
				БазаФСС.УдалитьСтроки();
				БазаФОМС.УдалитьСтроки();
				БазаПФР.УдалитьСтроки();
				
				Если БухИтДФЛ.ПолучитьСубконто(ВидыСубконто.Сотрудники,, Сотрудник) = 1 Тогда
					БухИтДФЛ.ВыбратьПериоды(1);
					Пока БухИтДФЛ.ПолучитьПериод() = 1 Цикл
						БухИтДФЛ.ВыбратьСубконто(ВидыСубконто.ВидыНачисленийВыплат);
						Пока БухИтДФЛ.ПолучитьСубконто(ВидыСубконто.ВидыНачисленийВыплат) = 1 Цикл
							
							ТекМесяц = БухИтДФЛ.КонДата;
							Инвалид = ?((Сотрудник.Инвалид.Получить(ТекМесяц) = 1) или (Константа.ИнвалиднаяОрганизация.Получить(ТекМесяц) = Да), 1, 0);
							
							БухИтДФЛ.ВыбратьСчета();
							Пока БухИтДФЛ.ПолучитьСчет() = 1 Цикл
								Если (БухИтДФЛ.Субконто(ВидыСубконто.ВидыНачисленийВыплат).ЕСН_ФБ = 1) и ((БухИтДФЛ.Счет = СчДФЛ_1) или (ИсчислятьЕСНпоВидамДеятОблЕНВД = 1)) Тогда
									БазаЕСН.НоваяСтрока();
									БазаЕСН.Месяц = БухИтДФЛ.КонДата;
									БазаЕСН.Сумма = БухИтДФЛ.КО();
									БазаЕСН.Инвалид = Инвалид;
									
									Если БухИтДФЛ.Субконто(ВидыСубконто.ВидыНачисленийВыплат).ПФР = 0 Тогда
										БазаЕСНбезПФР.НоваяСтрока();
										БазаЕСНбезПФР.Месяц = БухИтДФЛ.КонДата;
										БазаЕСНбезПФР.Сумма = БухИтДФЛ.КО();
										БазаЕСНбезПФР.Инвалид = Инвалид;
									КонецЕсли;
								КонецЕсли;
								
								Если (БухИтДФЛ.Субконто(ВидыСубконто.ВидыНачисленийВыплат).ЕСН_ФСС = 1) и ((БухИтДФЛ.Счет = СчДФЛ_1) или (ИсчислятьЕСНпоВидамДеятОблЕНВД = 1)) Тогда
									БазаФСС.НоваяСтрока();
									БазаФСС.Месяц = БухИтДФЛ.КонДата;
									БазаФСС.Сумма = БухИтДФЛ.КО();
									БазаФСС.Инвалид = Инвалид;
								КонецЕсли;
								
								Если (БухИтДФЛ.Субконто(ВидыСубконто.ВидыНачисленийВыплат).ЕСН_ФОМС = 1) и ((БухИтДФЛ.Счет = СчДФЛ_1) или (ИсчислятьЕСНпоВидамДеятОблЕНВД = 1)) Тогда
									БазаФОМС.НоваяСтрока();
									БазаФОМС.Месяц = БухИтДФЛ.КонДата;
									БазаФОМС.Сумма = БухИтДФЛ.КО();
									БазаФОМС.Инвалид = Инвалид;
								КонецЕсли;
								
								Если БухИтДФЛ.Субконто(ВидыСубконто.ВидыНачисленийВыплат).ПФР = 1 Тогда
									БазаПФР.НоваяСтрока();
									БазаПФР.Месяц = БухИтДФЛ.КонДата;
									БазаПФР.Сумма = БухИтДФЛ.КО();
								КонецЕсли;
								
								Если ТекМесяц = ДатаКон Тогда
									Если БухИтДФЛ.Субконто(ВидыСубконто.ВидыНачисленийВыплат).ФСС_НС = 1 Тогда
										База = БухИтДФЛ.КО();
										
										Если Инвалид = 1 Тогда
											БазаФСС_НС_инв = БазаФСС_НС_инв + База;
											ФСС_НС_сотр_инв = ФСС_НС_сотр_инв + База * СтавкаФСС_НС;
											
										Иначе
											БазаФСС_НС = БазаФСС_НС + База;
											ФСС_НС_сотр = ФСС_НС_сотр + База * СтавкаФСС_НС;
										КонецЕсли;
									КонецЕсли;
									
									Если БухИтДФЛ.Субконто(ВидыСубконто.ВидыНачисленийВыплат).СО = 1 Тогда
										БазаСО = БазаСО + БухИтДФЛ.КО();
									КонецЕсли;
								КонецЕсли;
							КонецЦикла;
						КонецЦикла;
					КонецЦикла;
				КонецЕсли;
				
				// Учтем начальные данные для расчета налогов.
				ГодКарточки = ДатаГод(Сотрудник.ДатаПриема);
				МесяцДоНачалаУчета = ДатаМесяц(Сотрудник.ДатаПриема) - 1;
				
				Если (ГодКарточки = ДатаГод(КонецМесяца)) и (МесяцДоНачалаУчета < ДатаМесяц(КонецМесяца)) Тогда
					
					ГодКарточки = ДатаГод(Сотрудник.ДатаПриема);
					МесяцДоНачалаУчета = ДатаМесяц(Сотрудник.ДатаПриема) - 1;
					ТекМесяц = "31.01." + ГодКарточки;
					Для НомерМесяца = 1 по МесяцДоНачалаУчета Цикл
						
						ДоходОблагаемыйЕСН = Сотрудник.ДоходОблагаемыйЕСН_СНачалаГода.Получить(ТекМесяц);
						ДоходОблагаемыйФСС = Сотрудник.ДоходОблагаемыйЕСН_ФСС_СНачалаГода.Получить(ТекМесяц);
						ДоходОблагаемыйПФР = Сотрудник.ДоходОблагаемыйПФР_СНачалаГода.Получить(ТекМесяц);
						
						Инвалид = ?((Сотрудник.Инвалид.Получить(ТекМесяц) = 1) или (Константа.ИнвалиднаяОрганизация.Получить(ТекМесяц) = Да), 1, 0);
						
						Если ДоходОблагаемыйЕСН <> 0 Тогда
							БазаЕСН.НоваяСтрока();
							БазаЕСН.Месяц = ТекМесяц;
							БазаЕСН.Сумма = ДоходОблагаемыйЕСН;
							БазаЕСН.Инвалид = Инвалид;
							
							БазаФОМС.НоваяСтрока();
							БазаФОМС.Месяц = ТекМесяц;
							БазаФОМС.Сумма = ДоходОблагаемыйЕСН;
							БазаФОМС.Инвалид = Инвалид;
							
							Если ДоходОблагаемыйПФР = 0 Тогда
								БазаЕСНбезПФР.НоваяСтрока();
								БазаЕСНбезПФР.Месяц = ТекМесяц;
								БазаЕСНбезПФР.Сумма = ДоходОблагаемыйЕСН;
								БазаЕСНбезПФР.Инвалид = Инвалид;
							КонецЕсли;
						КонецЕсли;
						
						Если ДоходОблагаемыйФСС <> 0 Тогда
							БазаФСС.НоваяСтрока();
							БазаФСС.Месяц = ТекМесяц;
							БазаФСС.Сумма = ДоходОблагаемыйФСС;
							БазаФСС.Инвалид = Инвалид;
						КонецЕсли;
						
						Если ДоходОблагаемыйПФР <> 0 Тогда
							БазаПФР.НоваяСтрока();
							БазаПФР.Месяц = ТекМесяц;
							БазаПФР.Сумма = ДоходОблагаемыйПФР;
						КонецЕсли;
						
						ТекМесяц = КонМесяца(ДобавитьМесяц(ТекМесяц, 1));
					КонецЦикла;
					
					НачисленныйЕСН_ПФР_СНачалаГода = Сотрудник.НачисленныйЕСН_ПФР_СНачалаГода;
					НачисленныйЕСН_ФОМС_СНачалаГода = Сотрудник.НачисленныйЕСН_ФОМС_СНачалаГода;
					НачисленныйЕСН_ТОМС_СНачалаГода = Сотрудник.НачисленныйЕСН_ТОМС_СНачалаГода;
					НачисленныйЕСН_ФСС_СНачалаГода = Сотрудник.НачисленныйЕСН_ФСС_СНачалаГода;
					НачисленныйПФР_страх_СНачалаГода = Сотрудник.НачисленныйПФР_страх_СНачалаГода;
					НачисленныйПФР_нак_СНачалаГода = Сотрудник.НачисленныйПФР_нак_СНачалаГода;
					
				Иначе
					НачисленныйЕСН_ПФР_СНачалаГода = 0;
					НачисленныйЕСН_ФОМС_СНачалаГода = 0;
					НачисленныйЕСН_ТОМС_СНачалаГода = 0;
					НачисленныйЕСН_ФСС_СНачалаГода = 0;
					НачисленныйПФР_страх_СНачалаГода = 0;
					НачисленныйПФР_нак_СНачалаГода = 0;
				КонецЕсли;
				
				БазаЕСН.Свернуть("Месяц,Инвалид", "Сумма,Льгота");
				БазаЕСНбезПФР.Свернуть("Месяц,Инвалид", "Сумма,Льгота");
				БазаФСС.Свернуть("Месяц,Инвалид", "Сумма,Льгота");
				БазаФОМС.Свернуть("Месяц,Инвалид", "Сумма,Льгота");
				БазаПФР.Свернуть("Месяц,Инвалид", "Сумма,Льгота");
				
				// Суммы ранее начисленного ЕСН.
				ФСС_Начисленный = 0;
				ЕСН_Начисленный = 0;
				ФФОМС_Начисленный = 0;
				ТФОМС_Начисленный = 0;
				
				ПФР_страх_начисленный = 0;
				ПФР_нак_начисленный = 0;
				
				Если БухИтЕСН.ПолучитьСчет(, СчетПоКоду("69.1")) = 1 Тогда
					Если БухИтЕСН.ПолучитьСубконто(2,, Сотрудник) = 1 Тогда
						Если БухИтЕСН.ПолучитьСубконто(1,, Перечисление.ВидыПлатежейВФонды.Взносы) = 1 Тогда
							ФСС_Начисленный = БухИтЕСН.КО();
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
				
				Если БухИтЕСН.ПолучитьСчет(, СчетПоКоду("69.2.1")) = 1 Тогда
					Если БухИтЕСН.ПолучитьСубконто(2,, Сотрудник) = 1 Тогда
						Если БухИтЕСН.ПолучитьСубконто(1,, Перечисление.ВидыПлатежейВБюджет.Налог) = 1 Тогда
							ЕСН_Начисленный = БухИтЕСН.КО();
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
				
				Если БухИтЕСН.ПолучитьСчет(, СчетПоКоду("69.2.2")) = 1 Тогда
					Если БухИтЕСН.ПолучитьСубконто(2,, Сотрудник) = 1 Тогда
						Если БухИтЕСН.ПолучитьСубконто(1,, Перечисление.ВидыПлатежейВБюджет.Налог) = 1 Тогда
							ПФР_страх_начисленный = БухИтЕСН.КО();
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
				
				Если БухИтЕСН.ПолучитьСчет(, СчетПоКоду("69.2.3")) = 1 Тогда
					Если БухИтЕСН.ПолучитьСубконто(2,, Сотрудник) = 1 Тогда
						Если БухИтЕСН.ПолучитьСубконто(1,, Перечисление.ВидыПлатежейВБюджет.Налог) = 1 Тогда
							ПФР_нак_начисленный = БухИтЕСН.КО();
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
				
				Если БухИтЕСН.ПолучитьСчет(, СчетПоКоду("69.3.1")) = 1 Тогда
					Если БухИтЕСН.ПолучитьСубконто(2,, Сотрудник) = 1 Тогда
						Если БухИтЕСН.ПолучитьСубконто(1,, Перечисление.ВидыПлатежейВБюджет.Налог) = 1 Тогда
							ФФОМС_Начисленный = БухИтЕСН.КО();
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
				
				Если БухИтЕСН.ПолучитьСчет(, СчетПоКоду("69.3.2")) = 1 Тогда
					Если БухИтЕСН.ПолучитьСубконто(2,, Сотрудник) = 1 Тогда
						Если БухИтЕСН.ПолучитьСубконто(1,, Перечисление.ВидыПлатежейВБюджет.Налог) = 1 Тогда
							ТФОМС_Начисленный = БухИтЕСН.КО();
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
				
				// Исчисление сумм налогов нарастающим итогом с начала года.
				// Для ПФР надо сначала определить нужную шкалу.
				ИмяСтавки = ""; 
				Если 	  ((Сотрудник.Пол = Перечисление.Пол.Мужской) и (ДатаГод(Сотрудник.ДатаРождения) <= 1952) и (ПустоеЗначение(Сотрудник.ДатаРождения) = 0)) или
				((Сотрудник.Пол = Перечисление.Пол.Женский) и (ДатаГод(Сотрудник.ДатаРождения) <= 1956) и (ПустоеЗначение(Сотрудник.ДатаРождения) = 0)) Тогда
					ИмяСтавки = "Процент";
					
				ИначеЕсли ((Сотрудник.Пол = Перечисление.Пол.Мужской) и (ДатаГод(Сотрудник.ДатаРождения) >= 1953) и (ДатаГод(Сотрудник.ДатаРождения) <= 1966)) или
				((Сотрудник.Пол = Перечисление.Пол.Женский) и (ДатаГод(Сотрудник.ДатаРождения) >= 1957) и (ДатаГод(Сотрудник.ДатаРождения) <= 1966)) Тогда
					ИмяСтавки = "Процент2";
					
				ИначеЕсли ДатаГод(Сотрудник.ДатаРождения) >= 1967 Тогда
					ИмяСтавки = "Процент3";
					
				Иначе
					ТекстСообщения = "" + Сотрудник + ": Взносы в ПФР и ЕСН в части, зачисляемой в ФБ, не начислены. Не указаны данные (пол или дата рождения), необходимые для определения тарифов.";
					глСообщениеПроведения(ТекстСообщения, ТекущийДокумент(), -1,, Сотрудник.ТекущийЭлемент());
				КонецЕсли;
				
				Если ИмяСтавки = "" Тогда
					ИсчисленныйПФР_страх = 0;
					ИсчисленныйПФР_нак = 0;
					ИсчисленныйЕСН = 0;
					
				Иначе // ОтчислениеВФонд(Сотрудник, КодНалога, Начисления)
					ИсчисленныйПФР_страх = глОтчислениеВФонд(Сотрудник, "ПФР_страх", БазаПФР, ИмяСтавки);
					ИсчисленныйПФР_нак = глОтчислениеВФонд(Сотрудник, "ПФР_нак", БазаПФР, ИмяСтавки);
					ИсчисленныйЕСН = глОтчислениеВФонд(Сотрудник, "ЕСН_ФБ",БазаЕСН, ИмяСтавки);
					Если Константа.ПорядокИсчисленияЕСН.Получить(ДатаКон) = 1 Тогда
						ИсчисленныйЕСН = ИсчисленныйЕСН + ИсчисленныйПФР_страх + ИсчисленныйПФР_нак;
						
					ИначеЕсли Константа.ПорядокИсчисленияЕСН.Получить(ДатаКон) = 2 Тогда
						ИсчисленныйЕСНбезПФР = глОтчислениеВФонд(Сотрудник, "ЕСН_ФБ",БазаЕСНбезПФР, ИмяСтавки);
						ИсчисленныйЕСН = ИсчисленныйЕСН + ИсчисленныйЕСНбезПФР;
					КонецЕсли;
				КонецЕсли;
				
				ИсчисленныйФСС = глОтчислениеВФонд(Сотрудник, "ФСС", БазаФСС);
				ИсчисленныйФФОМС = глОтчислениеВФонд(Сотрудник, "ФФОМС", БазаФОМС);
				ИсчисленныйТФОМС = глОтчислениеВФонд(Сотрудник, "ТФОМС", БазаФОМС);
				
				// Расчет ЕСН за этот месяц.
				ФСС = ИсчисленныйФСС - ФСС_Начисленный - НачисленныйЕСН_ФСС_СНачалаГода;
				ФФОМС = ИсчисленныйФФОМС - ФФОМС_Начисленный - НачисленныйЕСН_ФОМС_СНачалаГода;
				ТФОМС = ИсчисленныйТФОМС - ТФОМС_Начисленный - НачисленныйЕСН_ТОМС_СНачалаГода;
				ЕСН = ИсчисленныйЕСН - ЕСН_начисленный - НачисленныйЕСН_ПФР_СНачалаГода;
				
				// Расчет ПФР за этот месяц.
				ПФР_страх = ИсчисленныйПФР_страх;
				ПФР_нак = ИсчисленныйПФР_нак;
				
				// Получим сумму вычета с начала года, на которую налогоплательщик имеет право.
				Вычет_страх = 0;
				Вычет_нак = 0;
				ИсчисленныйПФР = ИсчисленныйПФР_страх + ИсчисленныйПФР_нак;
				Вычет = Мин(ИсчисленныйЕСН, ИсчисленныйПФР);
				Если (ИсчисленныйПФР <> 0) и (Константа.ПорядокИсчисленияЕСН.Получить(ДатаКон) < 2) Тогда
					К = Вычет / ИсчисленныйПФР;
					Вычет_страх = Окр(К * ИсчисленныйПФР_страх, 2, 1);
					Вычет_нак = Вычет - Вычет_страх;
				КонецЕсли;
				
				// Тогда сумма расхода с начала года по уплате взносов в ПФР:
				Расходы_страх = ИсчисленныйПФР_страх - Вычет_страх;
				Расходы_нак = ИсчисленныйПФР_нак - Вычет_нак;
				
				// Получим сумму вычета и расхода по уплате взносов в ПФР с начала года, начисленную ранее:
				ЕСН_НачисленныйРанее = ЕСН_начисленный + НачисленныйЕСН_ПФР_СНачалаГода;
				ПФР_страх_НачисленныйРанее = ПФР_страх_начисленный + НачисленныйПФР_страх_СНачалаГода;
				ПФР_нак_НачисленныйРанее = ПФР_нак_начисленный + НачисленныйПФР_нак_СНачалаГода;
				ПРФ_НачисленныйРанее = ПФР_страх_НачисленныйРанее + ПФР_нак_НачисленныйРанее;
				
				Вычет_НачисленныйРанее = Мин(ЕСН_НачисленныйРанее, ПРФ_НачисленныйРанее);
				Если (ПРФ_НачисленныйРанее <> 0) и (Константа.ПорядокИсчисленияЕСН.Получить(ДатаКон) < 2) Тогда
					К = Вычет_НачисленныйРанее / ПРФ_НачисленныйРанее;
					Вычет_страх_НачисленныйРанее = Окр(К * ПФР_страх_НачисленныйРанее, 2, 1);
					Вычет_нак_НачисленныйРанее = Вычет_НачисленныйРанее - Вычет_страх_НачисленныйРанее;
					
				Иначе
					Вычет_страх_НачисленныйРанее = 0;
					Вычет_нак_НачисленныйРанее = 0;
				КонецЕсли;
				
				Расходы_страх_НачисленныйРанее = ПФР_страх_НачисленныйРанее - Вычет_страх_НачисленныйРанее;
				Расходы_нак_НачисленныйРанее = ПФР_нак_НачисленныйРанее - Вычет_нак_НачисленныйРанее;
				
				// Тогда сумма вычета и расхода по уплате взносов в ПФР за текущий месяц:
				Вычет_страх = Вычет_страх - Вычет_страх_НачисленныйРанее;
				Вычет_нак = Вычет_нак - Вычет_нак_НачисленныйРанее;
				Расходы_страх = Расходы_страх - Расходы_страх_НачисленныйРанее;
				Расходы_нак = Расходы_нак - Расходы_нак_НачисленныйРанее;
				
			Иначе
				
				Если БухИтДФЛ.ПолучитьСубконто(ВидыСубконто.Сотрудники,, Сотрудник) = 1 Тогда
					БухИтДФЛ.ВыбратьСубконто(ВидыСубконто.ВидыНачисленийВыплат);
					Пока БухИтДФЛ.ПолучитьСубконто(ВидыСубконто.ВидыНачисленийВыплат) = 1 Цикл
						
						Инвалид = ?((Сотрудник.Инвалид.Получить(КонецМесяца) = 1) или (Константа.ИнвалиднаяОрганизация.Получить(КонецМесяца) = Да), 1, 0);
						
						Если БухИтДФЛ.Субконто(ВидыСубконто.ВидыНачисленийВыплат).ФСС_НС = 1 Тогда
							База = БухИтДФЛ.КО();
							
							Если Инвалид = 1 Тогда
								БазаФСС_НС_инв = БазаФСС_НС_инв + База;
								ФСС_НС_сотр_инв = ФСС_НС_сотр_инв + База * СтавкаФСС_НС;
								
							Иначе
								БазаФСС_НС = БазаФСС_НС + База;
								ФСС_НС_сотр = ФСС_НС_сотр + База * СтавкаФСС_НС;
							КонецЕсли;
						КонецЕсли;
						
						Если БухИтДФЛ.Субконто(ВидыСубконто.ВидыНачисленийВыплат).СО = 1 Тогда
							БазаСО = БазаСО + БухИтДФЛ.КО();
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
				
				НомерШкалыВзносов = глНомерШкалыСтраховыхВзносовПФР(Сотрудник);
				
				СписокСтавкиНалогаПФР = глПолучитьСтавкиЕСН(глПолучитьНалог("ЕСН_ФБ"), КонецМесяца,, 1);
				СписокСтавкиНалогаФСС = глПолучитьСтавкиЕСН(глПолучитьНалог("ФСС"), КонецМесяца,, 1);
				СписокСтавкиНалогаФФОМС = глПолучитьСтавкиЕСН(глПолучитьНалог("ФФОМС"), КонецМесяца,, 1);
				СписокСтавкиНалогаТФОМС = глПолучитьСтавкиЕСН(глПолучитьНалог("ТФОМС"), КонецМесяца,, 1);
				СписокСтавкиВзносаПФРСтраховаяЧасть = глПолучитьСтавкиЕСН(глПолучитьНалог("ПФР_страх"), КонецМесяца, НомерШкалыВзносов, 1);
				СписокСтавкиВзносаПФРНакопительнаяЧасть = глПолучитьСтавкиЕСН(глПолучитьНалог("ПФР_нак"), КонецМесяца, НомерШкалыВзносов, 1);
				СписокПределыДоходовЕСН = глПолучитьСтавкиЕСН(глПолучитьНалог("ЕСН_ФБ"), КонецМесяца,, 0, 1);
				
				Для Сч = 1 по 10 Цикл
					СтавкиНалогаПФР[Сч] = СписокСтавкиНалогаПФР.ПолучитьЗначение(Сч);
					СтавкиНалогаФСС[Сч] = СписокСтавкиНалогаФСС.ПолучитьЗначение(Сч);
					СтавкиНалогаФФОМС[Сч] = СписокСтавкиНалогаФФОМС.ПолучитьЗначение(Сч);
					СтавкиНалогаТФОМС[Сч] = СписокСтавкиНалогаТФОМС.ПолучитьЗначение(Сч);
					СтавкиВзносаПФРСтраховаяЧасть[Сч] = СписокСтавкиВзносаПФРСтраховаяЧасть.ПолучитьЗначение(Сч);
					СтавкиВзносаПФРНакопительнаяЧасть[Сч] = СписокСтавкиВзносаПФРНакопительнаяЧасть.ПолучитьЗначение(Сч);
					ПределыДоходовЕСН[Сч] = СписокПределыДоходовЕСН.ПолучитьЗначение(Сч);
				КонецЦикла;
				
				Если НомерШкалыВзносов < 1 Тогда
					ТекстСообщения = "" + Сотрудник + ": Взносы в ПФР и ЕСН в части, зачисляемой в ФБ, не начислены. Не указаны данные (пол или дата рождения), необходимые для определения тарифов.";
					глСообщениеПроведения(ТекстСообщения, ТекущийДокумент(), -1,, Сотрудник.ТекущийЭлемент());
					
					Для Сч = 1 По 10 Цикл
						СтавкиВзносаПФРСтраховаяЧасть[Сч] = 0;
						СтавкиВзносаПФРНакопительнаяЧасть[Сч] = 0;
						СтавкиНалогаПФР[Сч] = 0;
					КонецЦикла;
				КонецЕсли;
				
				КодСотра=Сотрудник.Код;
				КодСотраВтаблице=глПолучитьУникальныйКодСотрудника(КодСотра);
				
				НомерСтрокиСотрудника = 0;
				Если ДоходыВычетыНалогиСотрудников.НайтиЗначение(КодСотраВтаблице+"01", НомерСтрокиСотрудника, 1) = 0 Тогда
					Продолжить;
					
				Иначе
					НомерСтрокиСотрудника = НомерСтрокиСотрудника - 1;
					Период = ДатаМесяц(КонецМесяца);
				КонецЕсли;
				
				ТекущаяСтрокаИтоговойТаблицы = НомерСтрокиСотрудника+Период;
				
				ПФРУд = ДоходыВычетыНалогиСотрудников.ПолучитьЗначение(ТекущаяСтрокаИтоговойТаблицы,5);
				ФФОМСУд = ДоходыВычетыНалогиСотрудников.ПолучитьЗначение(ТекущаяСтрокаИтоговойТаблицы,6);
				ТФОМСУд = ДоходыВычетыНалогиСотрудников.ПолучитьЗначение(ТекущаяСтрокаИтоговойТаблицы,7);
				ФССУд = ДоходыВычетыНалогиСотрудников.ПолучитьЗначение(ТекущаяСтрокаИтоговойТаблицы,8);
				УдержаноПФРнаСтраховуюПенсию = ДоходыВычетыНалогиСотрудников.ПолучитьЗначение(ТекущаяСтрокаИтоговойТаблицы,21);
				УдержаноПФРнаНакопительнуюПенсию = ДоходыВычетыНалогиСотрудников.ПолучитьЗначение(ТекущаяСтрокаИтоговойТаблицы,22);
				
				НачисленоВсего = ДоходыВычетыНалогиСотрудников.ПолучитьЗначение(ТекущаяСтрокаИтоговойТаблицы,10);                          
				НачисленоЕНВД = ДоходыВычетыНалогиСотрудников.ПолучитьЗначение(ТекущаяСтрокаИтоговойТаблицы,25);                          
				ДоговораПодряда = ДоходыВычетыНалогиСотрудников.ПолучитьЗначение(ТекущаяСтрокаИтоговойТаблицы,18);
				НачисленоЗаСчетПрибыли = ДоходыВычетыНалогиСотрудников.ПолучитьЗначение(ТекущаяСтрокаИтоговойТаблицы,13);
				
				НачисленоИностранцу = ДоходыВычетыНалогиСотрудников.ПолучитьЗначение(ТекущаяСтрокаИтоговойТаблицы,33);
				НачисленоВсегоИностранцу = ДоходыВычетыНалогиСотрудников.ПолучитьЗначение(ТекущаяСтрокаИтоговойТаблицы,41);
				
				ЛьготаПоЕСНп1ст236 = ДоходыВычетыНалогиСотрудников.ПолучитьЗначение(ТекущаяСтрокаИтоговойТаблицы,12);
				ЛьготаПоЕСНп2ст238абз2 = Мин(ДоходыВычетыНалогиСотрудников.ПолучитьЗначение(ТекущаяСтрокаИтоговойТаблицы,14),2000);
				ЛьготаПоЕСНп2ст238абз3 = Мин(ДоходыВычетыНалогиСотрудников.ПолучитьЗначение(ТекущаяСтрокаИтоговойТаблицы,15),2000);
				ЛьготаПоЕСНпп13п1ст238 = Мин(ДоходыВычетыНалогиСотрудников.ПолучитьЗначение(ТекущаяСтрокаИтоговойТаблицы,16),10000);
				ПрочихЛьготПоСт238 = ДоходыВычетыНалогиСотрудников.ПолучитьЗначение(ТекущаяСтрокаИтоговойТаблицы,17);
				ПособийЗаСчетФСС = ДоходыВычетыНалогиСотрудников.ПолучитьЗначение(ТекущаяСтрокаИтоговойТаблицы,9);
				ЛьготВсего = ПрочихЛьготПоСт238+ЛьготаПоЕСНп1ст236+ЛьготаПоЕСНпп13п1ст238+ЛьготаПоЕСНп2ст238абз3+ЛьготаПоЕСНп2ст238абз2+ПособийЗаСчетФСС;
				
				ЛьготаПоЕСНп1ст236ПФР = ДоходыВычетыНалогиСотрудников.ПолучитьЗначение(ТекущаяСтрокаИтоговойТаблицы,26);
				ЛьготаПоЕСНп2ст238абз2ПФР = Мин(ДоходыВычетыНалогиСотрудников.ПолучитьЗначение(ТекущаяСтрокаИтоговойТаблицы,27),2000);
				ЛьготаПоЕСНп2ст238абз3ПФР = Мин(ДоходыВычетыНалогиСотрудников.ПолучитьЗначение(ТекущаяСтрокаИтоговойТаблицы,28),2000);
				ЛьготаПоЕСНпп13п1ст238ПФР = Мин(ДоходыВычетыНалогиСотрудников.ПолучитьЗначение(ТекущаяСтрокаИтоговойТаблицы,29),10000);
				ПрочихЛьготПоСт238ПФР = ДоходыВычетыНалогиСотрудников.ПолучитьЗначение(ТекущаяСтрокаИтоговойТаблицы,30);
				ПособийЗаСчетФССПФР = ДоходыВычетыНалогиСотрудников.ПолучитьЗначение(ТекущаяСтрокаИтоговойТаблицы,31);
				ЛьготВсегоПФР = ПрочихЛьготПоСт238ПФР+ЛьготаПоЕСНп1ст236ПФР+ЛьготаПоЕСНпп13п1ст238ПФР+ЛьготаПоЕСНп2ст238абз3ПФР+ЛьготаПоЕСНп2ст238абз2ПФР+ПособийЗаСчетФССПФР;
				
				ЛьготПоСт239ПФР = ДоходыВычетыНалогиСотрудников.ПолучитьЗначение(ТекущаяСтрокаИтоговойТаблицы,"ЛьготаИнвалидуФдБ");
				ЛьготПоСт239ФСС = ДоходыВычетыНалогиСотрудников.ПолучитьЗначение(ТекущаяСтрокаИтоговойТаблицы,"ЛьготаИнвалидуФСС");
				ЛьготПоСт239ОМС = ДоходыВычетыНалогиСотрудников.ПолучитьЗначение(ТекущаяСтрокаИтоговойТаблицы,"ЛьготаИнвалидуОМС");
				
				НеВзиматьФдБ =  ДоходыВычетыНалогиСотрудников.ПолучитьЗначение(ТекущаяСтрокаИтоговойТаблицы, 38);
				НеВзиматьФСС =  ДоходыВычетыНалогиСотрудников.ПолучитьЗначение(ТекущаяСтрокаИтоговойТаблицы, 39);
				НеВзиматьФОМС = ДоходыВычетыНалогиСотрудников.ПолучитьЗначение(ТекущаяСтрокаИтоговойТаблицы, 40);
				НеВзиматьПФР =  ДоходыВычетыНалогиСотрудников.ПолучитьЗначение(ТекущаяСтрокаИтоговойТаблицы, 41);
				
				ОблагаемаяПФРВсего = Макс(НачисленоВсего - ЛьготВсегоПФР - НачисленоЗаСчетПрибыли - НеВзиматьПФР, 0);
				ОБЛ_ПФР_ЕНВД = Макс(НачисленоЕНВД - (НачисленоВсегоИностранцу - НачисленоИностранцу) - (ЛьготВсегоПФР - ЛьготВсего),0);
				ОблагаемаяПФР = Макс(ОблагаемаяПФРВсего - ОБЛ_ПФР_ЕНВД, 0);
				
				ЕСНОблагаемаяФБиОМС = Макс(НачисленоВсего - НачисленоЕНВД - НачисленоЗаСчетПрибыли - ЛьготВсего, 0);
				ЕСНОблагаемаяФСС = Макс(НачисленоВсего - НачисленоЕНВД - НачисленоЗаСчетПрибыли - ДоговораПодряда - ЛьготВсего, 0);
				
				НеПодлежитУплатеФБ = Окр(ЛьготПоСт239ПФР*СтавкиНалогаПФР[1]/100, 2, 1) - Окр(ЛьготПоСт239ПФР*СтавкиВзносаПФРСтраховаяЧасть[1]/100, 2, 1) - Окр(ЛьготПоСт239ПФР*СтавкиВзносаПФРНакопительнаяЧасть[1]/100, 2, 1);
				НеПодлежитУплатеФСС = Окр(ЛьготПоСт239ФСС*СтавкиНалогаФСС[1]/100, 2, 1);
				НеПодлежитУплатеФФОМС = Окр(ЛьготПоСт239ОМС*СтавкиНалогаФФОМС[1]/100, 2, 1);
				НеПодлежитУплатеТФОМС = Окр(ЛьготПоСт239ОМС*СтавкиНалогаТФОМС[1]/100, 2, 1);
				
				ФСС = глРассчитатьЕСНилиВзносыВПФР(ЕСНОблагаемаяФСС-НеВзиматьФСС, СтавкиНалогаФСС, Да, ПределыДоходовЕСН);
				ФФОМС = глРассчитатьЕСНилиВзносыВПФР(ЕСНОблагаемаяФБиОМС-НеВзиматьФОМС, СтавкиНалогаФФОМС, Да, ПределыДоходовЕСН);
				ТФОМС = глРассчитатьЕСНилиВзносыВПФР(ЕСНОблагаемаяФБиОМС-НеВзиматьФОМС, СтавкиНалогаТФОМС, Да, ПределыДоходовЕСН);
				ЕСН = глРассчитатьЕСНилиВзносыВПФР(ЕСНОблагаемаяФБиОМС-НеВзиматьФдБ, СтавкиНалогаПФР, Да, ПределыДоходовЕСН);
				Расходы_страх = глРассчитатьЕСНилиВзносыВПФР(ОблагаемаяПФРВсего, СтавкиВзносаПФРСтраховаяЧасть, Да, ПределыДоходовЕСН);
				Расходы_нак = глРассчитатьЕСНилиВзносыВПФР(ОблагаемаяПФРВсего, СтавкиВзносаПФРНакопительнаяЧасть, Да, ПределыДоходовЕСН);
				
				ФСС = Окр(ФСС, 2, 1);
				ФФОМС = Окр(ФФОМС, 2, 1);
				ТФОМС = Окр(ТФОМС, 2, 1);
				ЕСН = Окр(ЕСН, 2, 1);
				Расходы_страх = Окр(Расходы_страх, 2, 1);
				Расходы_нак = Окр(Расходы_нак, 2, 1);
				
				Расходы_страх = Расходы_страх - УдержаноПФРнаСтраховуюПенсию;
				Расходы_нак = Расходы_нак - УдержаноПФРнаНакопительнуюПенсию;
				
				Вычет_страх =  ДоходыВычетыНалогиСотрудников.ПолучитьЗначение(ТекущаяСтрокаИтоговойТаблицы, 42);
				Вычет_нак =  ДоходыВычетыНалогиСотрудников.ПолучитьЗначение(ТекущаяСтрокаИтоговойТаблицы, 43);
				Вычет_страх = Окр(Вычет_страх, 2, 1);
				Вычет_нак = Окр(Вычет_нак, 2, 1);
				
				ФСС = ФСС - ФССУд - НеПодлежитУплатеФСС;
				ФФОМС = ФФОМС - ФФОМСУд - НеПодлежитУплатеФФОМС;
				ТФОМС = ТФОМС - ТФОМСУд - НеПодлежитУплатеТФОМС;
				//Рассчитаем ЕСН в ФБ с учетом регресса и начислений по ЕНВД
				ОблагаемаяПФРВсегоПредыдМесяца = 0;
				ОБЛ_ПФР_ЕНВДПредыдМесяца = 0;
				ОблагаемаяПФРПредыдМесяца = 0;
				Если Период>1 Тогда
					ТекущаяСтрокаИтоговойТаблицыПредыдМесяца = НомерСтрокиСотрудника+Период-1;	
					НачисленоВсегоПредыдМесяца = ДоходыВычетыНалогиСотрудников.ПолучитьЗначение(ТекущаяСтрокаИтоговойТаблицыПредыдМесяца,10);                          
					НачисленоЕНВДПредыдМесяца = ДоходыВычетыНалогиСотрудников.ПолучитьЗначение(ТекущаяСтрокаИтоговойТаблицыПредыдМесяца,25);                          
					ДоговораПодрядаПредыдМесяца = ДоходыВычетыНалогиСотрудников.ПолучитьЗначение(ТекущаяСтрокаИтоговойТаблицыПредыдМесяца,18);
					НачисленоЗаСчетПрибылиПредыдМесяца = ДоходыВычетыНалогиСотрудников.ПолучитьЗначение(ТекущаяСтрокаИтоговойТаблицыПредыдМесяца,13);
					
					НачисленоИностранцуПредыдМесяца = ДоходыВычетыНалогиСотрудников.ПолучитьЗначение(ТекущаяСтрокаИтоговойТаблицыПредыдМесяца,33);
					НачисленоВсегоИностранцуПредыдМесяца = ДоходыВычетыНалогиСотрудников.ПолучитьЗначение(ТекущаяСтрокаИтоговойТаблицыПредыдМесяца,41);
					
					ЛьготаПоЕСНп1ст236ПредыдМесяца = ДоходыВычетыНалогиСотрудников.ПолучитьЗначение(ТекущаяСтрокаИтоговойТаблицыПредыдМесяца,12);
					ЛьготаПоЕСНп2ст238абз2ПредыдМесяца = ДоходыВычетыНалогиСотрудников.ПолучитьЗначение(ТекущаяСтрокаИтоговойТаблицыПредыдМесяца,14);
					ЛьготаПоЕСНп2ст238абз3ПредыдМесяца = ДоходыВычетыНалогиСотрудников.ПолучитьЗначение(ТекущаяСтрокаИтоговойТаблицыПредыдМесяца,15);
					ЛьготаПоЕСНпп13п1ст238ПредыдМесяца = ДоходыВычетыНалогиСотрудников.ПолучитьЗначение(ТекущаяСтрокаИтоговойТаблицыПредыдМесяца,16);
					ПрочихЛьготПоСт238ПредыдМесяца = ДоходыВычетыНалогиСотрудников.ПолучитьЗначение(ТекущаяСтрокаИтоговойТаблицыПредыдМесяца,17);
					ПособийЗаСчетФССПредыдМесяца = ДоходыВычетыНалогиСотрудников.ПолучитьЗначение(ТекущаяСтрокаИтоговойТаблицыПредыдМесяца,9);
					ЛьготВсегоПредыдМесяца = ПрочихЛьготПоСт238ПредыдМесяца+ЛьготаПоЕСНп1ст236ПредыдМесяца+ЛьготаПоЕСНпп13п1ст238ПредыдМесяца+ЛьготаПоЕСНп2ст238абз3ПредыдМесяца+ЛьготаПоЕСНп2ст238абз2ПредыдМесяца+ПособийЗаСчетФССПредыдМесяца;
					
					ЛьготаПоЕСНп1ст236ПФРПредыдМесяца = ДоходыВычетыНалогиСотрудников.ПолучитьЗначение(ТекущаяСтрокаИтоговойТаблицыПредыдМесяца,26);
					ЛьготаПоЕСНп2ст238абз2ПФРПредыдМесяца = ДоходыВычетыНалогиСотрудников.ПолучитьЗначение(ТекущаяСтрокаИтоговойТаблицыПредыдМесяца,27);
					ЛьготаПоЕСНп2ст238абз3ПФРПредыдМесяца = ДоходыВычетыНалогиСотрудников.ПолучитьЗначение(ТекущаяСтрокаИтоговойТаблицыПредыдМесяца,28);
					ЛьготаПоЕСНпп13п1ст238ПФРПредыдМесяца = ДоходыВычетыНалогиСотрудников.ПолучитьЗначение(ТекущаяСтрокаИтоговойТаблицыПредыдМесяца,29);
					ПрочихЛьготПоСт238ПФРПредыдМесяца = ДоходыВычетыНалогиСотрудников.ПолучитьЗначение(ТекущаяСтрокаИтоговойТаблицыПредыдМесяца,30);
					ПособийЗаСчетФССПФРПредыдМесяца = ДоходыВычетыНалогиСотрудников.ПолучитьЗначение(ТекущаяСтрокаИтоговойТаблицыПредыдМесяца,31);
					ЛьготВсегоПФРПредыдМесяца = ПрочихЛьготПоСт238ПФРПредыдМесяца+ЛьготаПоЕСНп1ст236ПФРПредыдМесяца+ЛьготаПоЕСНпп13п1ст238ПФРПредыдМесяца+ЛьготаПоЕСНп2ст238абз3ПФРПредыдМесяца+ЛьготаПоЕСНп2ст238абз2ПФРПредыдМесяца+ПособийЗаСчетФССПФРПредыдМесяца;
					
					ЛьготПоСт239ПФРПредыдМесяца = ДоходыВычетыНалогиСотрудников.ПолучитьЗначение(ТекущаяСтрокаИтоговойТаблицыПредыдМесяца,"ЛьготаИнвалидуФдБ");
					ЛьготПоСт239ФССПредыдМесяца = ДоходыВычетыНалогиСотрудников.ПолучитьЗначение(ТекущаяСтрокаИтоговойТаблицыПредыдМесяца,"ЛьготаИнвалидуФСС");
					ЛьготПоСт239ОМСПредыдМесяца = ДоходыВычетыНалогиСотрудников.ПолучитьЗначение(ТекущаяСтрокаИтоговойТаблицыПредыдМесяца,"ЛьготаИнвалидуОМС");
					
					НеВзиматьФдБПредыдМесяца =  ДоходыВычетыНалогиСотрудников.ПолучитьЗначение(ТекущаяСтрокаИтоговойТаблицыПредыдМесяца, 38);
					НеВзиматьПФРПредыдМесяца =  ДоходыВычетыНалогиСотрудников.ПолучитьЗначение(ТекущаяСтрокаИтоговойТаблицыПредыдМесяца, 41);
					
					ОблагаемаяПФРВсегоПредыдМесяца = Макс(НачисленоВсегоПредыдМесяца - ЛьготВсегоПФРПредыдМесяца - НачисленоЗаСчетПрибылиПредыдМесяца - НеВзиматьПФРПредыдМесяца, 0);
					ОБЛ_ПФР_ЕНВДПредыдМесяца = Макс(НачисленоЕНВДПредыдМесяца - (НачисленоВсегоИностранцуПредыдМесяца - НачисленоИностранцуПредыдМесяца) - (ЛьготВсегоПФРПредыдМесяца - ЛьготВсегоПредыдМесяца),0);
					ОблагаемаяПФРПредыдМесяца = Макс(ОблагаемаяПФРВсегоПредыдМесяца - ОБЛ_ПФР_ЕНВДПредыдМесяца, 0);
				КонецЕсли;
				СуммавПФРСтраховаяЧастьЕНВД = 0;
				СуммавПФРНакопительнаяЧастьЕНВД = 0; 
				СуммавПФРСтраховаяЧасть = 0;
				СуммавПФРНакопительнаяЧасть = 0; 
				ПеремУдержаноПФРнаСтраховуюПенсию = 0;
				ПеремУдержаноПФРнаНакопительнуюПенсию = 0;
				Если (ОблагаемаяПФР - ОблагаемаяПФРПредыдМесяца) <> 0 Тогда
					СуммавПФРСтраховаяЧасть = глРассчитатьЕСНилиВзносыВПФР(ОблагаемаяПФРВсего,СтавкиВзносаПФРСтраховаяЧасть,Да,ПределыДоходовЕСН);
					СуммавПФРНакопительнаяЧасть = глРассчитатьЕСНилиВзносыВПФР(ОблагаемаяПФРВсего,СтавкиВзносаПФРНакопительнаяЧасть,Да,ПределыДоходовЕСН);
					СуммавПФРСтраховаяЧасть = Окр(СуммавПФРСтраховаяЧасть,2,1);
					СуммавПФРНакопительнаяЧасть = Окр(СуммавПФРНакопительнаяЧасть,2,1);
				КонецЕсли;
				Если (ОблагаемаяПФРВсего - ОблагаемаяПФРВсегоПредыдМесяца) <> 0 Тогда 
					ПеремУдержаноПФРнаСтраховуюПенсию = глРассчитатьЕСНилиВзносыВПФР(ОблагаемаяПФРВсегоПредыдМесяца,СтавкиВзносаПФРСтраховаяЧасть,Да,ПределыДоходовЕСН);
					ПеремУдержаноПФРнаНакопительнуюПенсию = глРассчитатьЕСНилиВзносыВПФР(ОблагаемаяПФРВсегоПредыдМесяца,СтавкиВзносаПФРНакопительнаяЧасть,Да,ПределыДоходовЕСН);
					ПеремУдержаноПФРнаСтраховуюПенсию = Окр(ПеремУдержаноПФРнаСтраховуюПенсию,2,1);
					ПеремУдержаноПФРнаНакопительнуюПенсию = Окр(ПеремУдержаноПФРнаНакопительнуюПенсию,2,1);
					
					СуммавПФРНаОПСЕНВД = ((СуммавПФРСтраховаяЧасть+СуммавПФРНакопительнаяЧасть) - (ПеремУдержаноПФРнаСтраховуюПенсию + ПеремУдержаноПФРнаНакопительнуюПенсию)) * (ОБЛ_ПФР_ЕНВД-ОБЛ_ПФР_ЕНВДПредыдМесяца)/(ОблагаемаяПФРВсего - ОблагаемаяПФРВсегоПредыдМесяца);
					СуммавПФРНаОПСЕНВД = Окр(СуммавПФРНаОПСЕНВД,2,1); 
					СуммавПФРСтраховаяЧастьЕНВД = (СуммавПФРСтраховаяЧасть - ПеремУдержаноПФРнаСтраховуюПенсию)*(ОБЛ_ПФР_ЕНВД-ОБЛ_ПФР_ЕНВДПредыдМесяца)/(ОблагаемаяПФРВсего - ОблагаемаяПФРВсегоПредыдМесяца);
					СуммавПФРСтраховаяЧастьЕНВД = Окр(СуммавПФРСтраховаяЧастьЕНВД,2,1);
					СуммавПФРНакопительнаяЧастьЕНВД = СуммавПФРНаОПСЕНВД - СуммавПФРСтраховаяЧастьЕНВД;
					
				КонецЕсли;  
				
				СуммавПФРСтраховаяЧасть = СуммавПФРСтраховаяЧасть - СуммавПФРСтраховаяЧастьЕНВД - ПеремУдержаноПФРнаСтраховуюПенсию;
				СуммавПФРНакопительнаяЧасть = СуммавПФРНакопительнаяЧасть - СуммавПФРНакопительнаяЧастьЕНВД - ПеремУдержаноПФРнаНакопительнуюПенсию;
				
				ЕСН = ЕСН - ПФРУд - НеПодлежитУплатеФБ - Вычет_страх - Вычет_нак - СуммавПФРСтраховаяЧасть - СуммавПФРНакопительнаяЧасть;
				ЕСН = Окр(ЕСН, 2, 1);
				
				Вычет_страх = 0; Вычет_нак = 0;			
				
			КонецЕсли;
			
			// Если по исчисленным налогам надо формировать проводки, то проверим наличие базы распределения.
			ПроверитьБазуРаспределенияЕСН(Сотрудник, ФСС, НачисленияФСС, НачисленияФСС.КоличествоСтрок(), 1);
			ПроверитьБазуРаспределенияЕСН(Сотрудник, ФФОМС + ТФОМС, НачисленияФОМС, НачисленияФОМС.КоличествоСтрок(), 1);
			ПроверитьБазуРаспределенияЕСН(Сотрудник, ЕСН + Расходы_страх + Расходы_нак, НачисленияЕСН, НачисленияЕСН.КоличествоСтрок(), 1);
			ПроверитьБазуРаспределенияЕСН(Сотрудник, Расходы_страх + Расходы_нак, НачисленияПФР, НачисленияПФР.КоличествоСтрок(), 0);
			ПроверитьБазуРаспределенияЕСН(Сотрудник, ФСС_НС_сотр, НачисленияФСС_НС, ЕстьБазаФСС_НС, 0);
			ПроверитьБазуРаспределенияЕСН(Сотрудник, ФСС_НС_сотр_инв, НачисленияФСС_НС_инв, ЕстьБазаФСС_НС_инв, 0);
			
			Если СтатусВозврата() = 0 Тогда
				Возврат;
			КонецЕсли;
			
			// Распределим суммы исчисленных налогов по таблицам облагаемых 
			// начислений за этот месяц.
			ТаблицаРаспределения.Очистить();
			
			// Распределяем ЕСН.
			// Если исчисленный налог отрицательный, значит налоговая база по каким-либо причинам уменьшилась.
			// В этом случае нам следует сторнировать часть налога начисленного ранее, но в корреспонденции
			// с те ми же счетами, в корреспонденции с которыми налог начислялся.
			Если ЕСН <> 0 Тогда
				РевизитДляРаспределенияЕСН_ФБ = "Сумма";
				Если ЕСН < 0 Тогда
					ТаблицаРаспределения = СчетаЗатратПриНачисленииЕСН(БухИтЕСН, СчетПоКоду("69.2.1"), Перечисление.ВидыПлатежейВБюджет.Налог, Сотрудник);
					
				Иначе
					
					Если Константа.ПорядокИсчисленияЕСН.Получить(ДатаКон) = 1 Тогда
						НачисленияЕСН.Выгрузить(ТаблицаРаспределения);
						
						// Если организация занимается деятельностью облагаемой и не облагаемой ЕНВД,
						// то необходимо подготовить базу для распределения ЕСН ФБ с учетом
						// того, что на ЕНВД начисляются только взносы в ПФР.
						ВсегоНачислений = ТаблицаРаспределения.Итог("Сумма");
						Если (Вычет_страх + Вычет_нак = 0) или (ВсегоНачислений - НачисленияЕНВД = 0) Тогда
							ДополнительныйКоэф = 1;
							
						Иначе                        
							ДополнительныйКоэф = 1 + (ЕСН - Вычет_страх - Вычет_нак)/(Вычет_страх + Вычет_нак)*ВсегоНачислений/(ВсегоНачислений - НачисленияЕНВД);
						КонецЕсли;
						
						ТаблицаРаспределения.НоваяКолонка("ДляРаспределенияЕСН_ФБ", "Число");
						ТаблицаРаспределения.ВыбратьСтроки();
						Пока ТаблицаРаспределения.ПолучитьСтроку() = 1 Цикл
							Сумма = ТаблицаРаспределения.Сумма;
							Если ТаблицаРаспределения.ЕНВД = 0 Тогда
								Сумма = Сумма*ДополнительныйКоэф;
							КонецЕсли;    
							ТаблицаРаспределения.ДляРаспределенияЕСН_ФБ = Сумма;
						КонецЦикла;
						РевизитДляРаспределенияЕСН_ФБ = "ДляРаспределенияЕСН_ФБ";
						
					Иначе
						НачисленияЕСН.Выгрузить(ТаблицаРаспределения);
					КонецЕсли;
				КонецЕсли;
				
				Распределено = 0;
				ТаблицаРаспределения.ВыбратьСтроки();
				Пока ТаблицаРаспределения.ПолучитьСтроку() = 1 Цикл
					СуммаВСтроке = ТаблицаРаспределения.ПолучитьЗначение(ТаблицаРаспределения.НомерСтроки, РевизитДляРаспределенияЕСН_ФБ);
					Если СуммаВСтроке <> 0 Тогда
						Сумма = Окр(ЕСН*(СуммаВСтроке/ТаблицаРаспределения.Итог(РевизитДляРаспределенияЕСН_ФБ)), 2, 1);
						Распределено = Распределено + Сумма;
						СформироватьПроводку("ЕСН_ФБ", Сотрудник,ТаблицаРаспределения, Сумма);
					КонецЕсли;
				КонецЦикла;
				Если Распределено <> 0 Тогда
					Операция.Сумма = Операция.Сумма + ЕСН - Распределено;
				КонецЕсли;
			КонецЕсли;
			
			// Распределение ПФР.
			Если Расходы_страх <> 0 Тогда
				Если Расходы_страх < 0 Тогда
					ТаблицаРаспределения = СчетаЗатратПриНачисленииЕСН(БухИтЕСН, СчетПоКоду("69.2.2"), Перечисление.ВидыПлатежейВБюджет.Налог, Сотрудник);
					
				Иначе
					НачисленияПФР.Выгрузить(ТаблицаРаспределения);
					Если (Константа.ПорядокИсчисленияЕСН.Получить(ДатаКон) = 0) и (ТаблицаРаспределения.КоличествоСтрок() = 0) Тогда
						ТаблицаРаспределения = СчетаЗатратПриНачисленииЕСН(БухИтЕСН, СчетПоКоду("69.2.1"), Перечисление.ВидыПлатежейВБюджет.Налог, Сотрудник);
					КонецЕсли;
				КонецЕсли;
				
				Распределено = 0;
				ТаблицаРаспределения.ВыбратьСтроки();
				Пока ТаблицаРаспределения.ПолучитьСтроку() = 1 Цикл
					СуммаВСтроке = ТаблицаРаспределения.Сумма;
					Если СуммаВСтроке <> 0 Тогда
						Сумма = Окр(Расходы_страх*(СуммаВСтроке/ТаблицаРаспределения.Итог("Сумма")), 2, 1);
						Распределено = Распределено + Сумма;
						СформироватьПроводку("ПФР_страх", Сотрудник, ТаблицаРаспределения, Сумма);
					КонецЕсли;
				КонецЦикла;
				Если Распределено <> 0 Тогда
					Операция.Сумма = Операция.Сумма + Расходы_страх - Распределено;
				КонецЕсли;
			КонецЕсли;
			
			Если Расходы_нак <> 0  Тогда
				Если Расходы_нак < 0 Тогда
					ТаблицаРаспределения = СчетаЗатратПриНачисленииЕСН(БухИтЕСН, СчетПоКоду("69.2.3"), Перечисление.ВидыПлатежейВБюджет.Налог, Сотрудник);
					
				Иначе
					НачисленияПФР.Выгрузить(ТаблицаРаспределения);
					Если (Константа.ПорядокИсчисленияЕСН.Получить(ДатаКон) = 0) и (ТаблицаРаспределения.КоличествоСтрок() = 0) Тогда
						ТаблицаРаспределения = СчетаЗатратПриНачисленииЕСН(БухИтЕСН, СчетПоКоду("69.2.1"), Перечисление.ВидыПлатежейВБюджет.Налог, Сотрудник);
					КонецЕсли;
				КонецЕсли;
				
				Распределено = 0;
				ТаблицаРаспределения.ВыбратьСтроки();
				Пока ТаблицаРаспределения.ПолучитьСтроку() = 1 Цикл
					СуммаВСтроке = ТаблицаРаспределения.Сумма;
					Если СуммаВСтроке <> 0 Тогда
						Сумма = Окр(Расходы_нак*(СуммаВСтроке/ТаблицаРаспределения.Итог("Сумма")), 2, 1);
						Распределено = Распределено + Сумма;
						СформироватьПроводку("ПФР_нак", Сотрудник, ТаблицаРаспределения, Сумма);
					КонецЕсли;
				КонецЦикла;
				Если Распределено <> 0 Тогда
					Операция.Сумма = Операция.Сумма + Расходы_нак - Распределено;
				КонецЕсли;
			КонецЕсли;
			
			Если Вычет_страх <> 0 Тогда
				Операция.НоваяПроводка(); Операция.РазделительУчета = ЮрЛицо;
				Операция.НомерЖурнала = "ЗП";
				Операция.СодержаниеПроводки = "Начислен взнос в ПФР";
				Операция.ПервичныйДокумент  = глПредставлениеПервичногоДокумента(Контекст);
				Операция.Дебет.Счет = СчетПоКоду("69.2.1");
				Операция.Дебет.Сотрудники          = Сотрудник;
				Операция.Дебет.ВидыПлатежейВБюджет = Перечисление.ВидыПлатежейВБюджет.Налог;
				Операция.Кредит.Счет = СчетПоКоду("69.2.2");
				Операция.Кредит.Сотрудники = Сотрудник;
				Операция.Кредит.ВидыПлатежейВБюджет = Перечисление.ВидыПлатежейВБюджет.Налог;
				Операция.Сумма = Вычет_страх;
			КонецЕсли;
			
			Если Вычет_нак <> 0 Тогда
				Операция.НоваяПроводка(); Операция.РазделительУчета = ЮрЛицо;
				Операция.НомерЖурнала = "ЗП";
				Операция.СодержаниеПроводки = "Начислен взнос в ПФР";
				Операция.ПервичныйДокумент  = глПредставлениеПервичногоДокумента(Контекст);
				Операция.Дебет.Счет = СчетПоКоду("69.2.1");
				Операция.Дебет.Сотрудники = Сотрудник;
				Операция.Дебет.ВидыПлатежейВБюджет = Перечисление.ВидыПлатежейВБюджет.Налог;
				Операция.Кредит.Счет = СчетПоКоду("69.2.3");
				Операция.Кредит.Сотрудники = Сотрудник;
				Операция.Кредит.ВидыПлатежейВБюджет = Перечисление.ВидыПлатежейВБюджет.Налог;
				Операция.Сумма = Вычет_нак;
			КонецЕсли;
			
			// Распределение ФОМС.
			Если ФФОМС <> 0 Тогда
				Если ФФОМС < 0 Тогда
					ТаблицаРаспределения = СчетаЗатратПриНачисленииЕСН(БухИтЕСН, СчетПоКоду("69.3.1"), Перечисление.ВидыПлатежейВБюджет.Налог, Сотрудник);
					
				Иначе
					НачисленияФОМС.Выгрузить(ТаблицаРаспределения);
				КонецЕсли;
				
				Распределено = 0;
				ТаблицаРаспределения.ВыбратьСтроки();
				Пока ТаблицаРаспределения.ПолучитьСтроку() = 1 Цикл
					СуммаВСтроке = ТаблицаРаспределения.Сумма;
					Если СуммаВСтроке <> 0 Тогда
						Сумма = Окр(ФФОМС*(СуммаВСтроке/ТаблицаРаспределения.Итог("Сумма")), 2, 1);
						Распределено = Распределено + Сумма;
						СформироватьПроводку("ФФОМС", Сотрудник, ТаблицаРаспределения, Сумма);
					КонецЕсли;
				КонецЦикла;
				Если Распределено <> 0 Тогда
					Операция.Сумма = Операция.Сумма + ФФОМС - Распределено;
				КонецЕсли;
			КонецЕсли;
			
			Если ТФОМС <> 0 Тогда
				Если ТФОМС < 0 Тогда
					ТаблицаРаспределения = СчетаЗатратПриНачисленииЕСН(БухИтЕСН, СчетПоКоду("69.3.2"), Перечисление.ВидыПлатежейВБюджет.Налог, Сотрудник);
					
				Иначе
					НачисленияФОМС.Выгрузить(ТаблицаРаспределения);
				КонецЕсли;
				
				Распределено = 0;
				ТаблицаРаспределения.ВыбратьСтроки();
				Пока ТаблицаРаспределения.ПолучитьСтроку() = 1 Цикл
					СуммаВСтроке = ТаблицаРаспределения.Сумма;
					Если СуммаВСтроке <> 0 Тогда
						Сумма = Окр(ТФОМС*(СуммаВСтроке/ТаблицаРаспределения.Итог("Сумма")), 2, 1);
						Распределено = Распределено + Сумма;
						СформироватьПроводку("ТФОМС", Сотрудник, ТаблицаРаспределения, Сумма);
					КонецЕсли;
				КонецЦикла;
				Если Распределено <> 0 Тогда
					Операция.Сумма = Операция.Сумма + ТФОМС - Распределено;
				КонецЕсли;
			КонецЕсли;	
			
			// Распределение ФСС.
			Если ФСС <> 0 Тогда
				Если ФСС < 0 Тогда
					ТаблицаРаспределения = СчетаЗатратПриНачисленииЕСН(БухИтЕСН, СчетПоКоду("69.1"), Перечисление.ВидыПлатежейВФонды.Взносы, Сотрудник);
					
				Иначе
					НачисленияФСС.Выгрузить(ТаблицаРаспределения);
				КонецЕсли;
				
				Распределено = 0;
				ТаблицаРаспределения.ВыбратьСтроки();
				Пока ТаблицаРаспределения.ПолучитьСтроку() = 1 Цикл
					СуммаВСтроке = ТаблицаРаспределения.Сумма;
					Если СуммаВСтроке <> 0 Тогда
						Сумма = Окр(ФСС*(СуммаВСтроке/ТаблицаРаспределения.Итог("Сумма")), 2, 1);
						Распределено = Распределено + Сумма;
						СформироватьПроводку("ФСС", Сотрудник, ТаблицаРаспределения, Сумма);
					КонецЕсли;
				КонецЦикла;
				Если Распределено <> 0 Тогда
					Операция.Сумма = Операция.Сумма + ФСС - Распределено; 
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		// Расчет взноса в ФСС от НС и ПЗ.
		НачисленияФСС_НС.Свернуть("Счет,Субконто1,Субконто2,Субконто3", "Сумма");
		ФСС_НС = Окр(БазаФСС_НС*СтавкаФСС_НС/100, 2, 1);
		Если ФСС_НС <> 0 Тогда
			Распределено = 0;
			НачисленияФСС_НС.ВыбратьСтроки();
			Пока НачисленияФСС_НС.ПолучитьСтроку() = 1 Цикл
				СуммаВСтроке = НачисленияФСС_НС.Сумма;
				Если СуммаВСтроке <> 0 Тогда
					Сумма = Окр(ФСС_НС*(СуммаВСтроке/НачисленияФСС_НС.Итог("Сумма")), 2, 1);
					Распределено = Распределено + Сумма;
					СформироватьПроводку("ФСС_НС", "", НачисленияФСС_НС, Сумма);
				КонецЕсли;
			КонецЦикла;
			Если Распределено <> 0 Тогда
				Операция.Сумма = Операция.Сумма + ФСС_НС - Распределено; 
			КонецЕсли;
		КонецЕсли;
		
		НачисленияФСС_НС_инв.Свернуть("Счет,Субконто1,Субконто2,Субконто3", "Сумма");
		ФСС_НС = Окр(БазаФСС_НС_инв*СтавкаФСС_НС/100*0.6, 2, 1);
		Если ФСС_НС <> 0 Тогда
			Распределено = 0;
			НачисленияФСС_НС_инв.ВыбратьСтроки();
			Пока НачисленияФСС_НС_инв.ПолучитьСтроку() = 1 Цикл
				СуммаВСтроке = НачисленияФСС_НС_инв.Сумма;
				Если СуммаВСтроке <> 0 Тогда
					Сумма = Окр(ФСС_НС*(СуммаВСтроке/НачисленияФСС_НС_инв.Итог("Сумма")), 2, 1);
					Распределено = Распределено + Сумма;
					СформироватьПроводку("ФСС_НС", "", НачисленияФСС_НС_инв, Сумма);
				КонецЕсли;
			КонецЦикла;
			Если Распределено <> 0 Тогда
				Операция.Сумма = Операция.Сумма + ФСС_НС - Распределено; 
			КонецЕсли;
		КонецЕсли;
		
		// Расчет сбора на образование.
		НачисленияСО.Свернуть("ЕНВД", "Сумма");
		Налог = глПолучитьНалог("Образ");
		Ставка = Налог.Ставка.Получить(КонецМесяца);
		СО = Окр(БазаСО*Ставка/100, 2, 1);
		Если СО <> 0 Тогда
			Распределено = 0;
			НачисленияСО.ВыбратьСтроки();
			Пока НачисленияСО.ПолучитьСтроку() = 1 Цикл
				СуммаВСтроке = НачисленияСО.Сумма;
				Если СуммаВСтроке <> 0 Тогда
					Сумма = Окр(СО*(СуммаВСтроке/НачисленияСО.Итог("Сумма")), 2, 1);
					Распределено = Распределено + Сумма;
					
					Если Сумма <> 0 Тогда
						Операция.НоваяПроводка(); Операция.РазделительУчета = ЮрЛицо;
						Операция.НомерЖурнала = "ЗП";
						Операция.СодержаниеПроводки = "Начислен сбор на образ.";
						Операция.ПервичныйДокумент  = глПредставлениеПервичногоДокумента(Контекст);
						Операция.Дебет.Счет = СчетПоКоду("91.2");
						Операция.Дебет.Субконто(1, ПолучитьСубконто91(НачисленияСО.ЕНВД));
						Операция.Кредит.Счет = Налог.Счет;
						Операция.Кредит.Субконто(1, Налог.Субконто1);
						Операция.Кредит.Субконто(2, Налог.Субконто2);
						Операция.Кредит.Субконто(3, Налог.Субконто3);
						Операция.Сумма = Сумма;
					КонецЕсли;
				КонецЕсли;
				
			КонецЦикла;
			Если Распределено <> 0 Тогда
				Операция.Сумма = Операция.Сумма + СО - Распределено; 
			КонецЕсли;
		КонецЕсли;
		
	Иначе //Расчет страховых взносов с 2010 г.
		
		глРежимТрассировки = ПустоеЗначение(ВосстановитьЗначение("НеКомментироватьВыполняемыеДействия"));

		СтавкаФСС_НС = глПолучитьНалог("ФСС_НС").Ставка.Получить(КонецМесяца);
		
		БазаФСС_НС = 0;
		БазаФСС_НС_инв = 0;		
		
		// Таблица корреспонденций для начислений, облагаемых взносами в ФОМС
		НачисленияФОМС = СоздатьОбъект("ТаблицаЗначений");
		НачисленияФОМС.НоваяКолонка("Счет", "Счет.Основной");
		НачисленияФОМС.НоваяКолонка("Субконто1");
		НачисленияФОМС.НоваяКолонка("Субконто2");
		НачисленияФОМС.НоваяКолонка("Субконто3");
		НачисленияФОМС.НоваяКолонка("Сумма", "Число");
		НачисленияФОМС.НоваяКолонка("СуммаЕНВД", "Число");
		НачисленияФОМС.НоваяКолонка("Инвалид", "Число");
		
		// Таблица корреспонденций для начислений, облагаемых взносами в ФСС
		НачисленияФСС = СоздатьОбъект("ТаблицаЗначений");
		НачисленияФСС.НоваяКолонка("Счет", "Счет.Основной");
		НачисленияФСС.НоваяКолонка("Субконто1");
		НачисленияФСС.НоваяКолонка("Субконто2");
		НачисленияФСС.НоваяКолонка("Субконто3");
		НачисленияФСС.НоваяКолонка("Сумма", "Число");
		НачисленияФСС.НоваяКолонка("СуммаЕНВД", "Число");
		НачисленияФСС.НоваяКолонка("Инвалид", "Число");
		
		// Таблица корреспонденций для начислений, облагаемых взносами в ПФР
		НачисленияПФР = СоздатьОбъект("ТаблицаЗначений");
		НачисленияПФР.НоваяКолонка("Счет", "Счет.Основной");
		НачисленияПФР.НоваяКолонка("Субконто1");
		НачисленияПФР.НоваяКолонка("Субконто2");
		НачисленияПФР.НоваяКолонка("Субконто3");
		НачисленияПФР.НоваяКолонка("Сумма", "Число");
		НачисленияПФР.НоваяКолонка("СуммаЕНВД", "Число");
		НачисленияПФР.НоваяКолонка("Инвалид", "Число");
		
		НачисленияФСС_НС = СоздатьОбъект("ТаблицаЗначений");
		НачисленияФСС_НС.НоваяКолонка("Счет", "Счет.Основной");
		НачисленияФСС_НС.НоваяКолонка("Субконто1");
		НачисленияФСС_НС.НоваяКолонка("Субконто2");
		НачисленияФСС_НС.НоваяКолонка("Субконто3");
		НачисленияФСС_НС.НоваяКолонка("Сумма", "Число");
		
		НачисленияФСС_НС_инв = СоздатьОбъект("ТаблицаЗначений");
		НачисленияФСС_НС_инв.НоваяКолонка("Счет", "Счет.Основной");
		НачисленияФСС_НС_инв.НоваяКолонка("Субконто1");
		НачисленияФСС_НС_инв.НоваяКолонка("Субконто2");
		НачисленияФСС_НС_инв.НоваяКолонка("Субконто3");
		НачисленияФСС_НС_инв.НоваяКолонка("Сумма", "Число");
		
		ТаблицаРаспределения = СоздатьОбъект("ТаблицаЗначений");
		СписокКолонок = СоздатьОбъект("СписокЗначений");
		СписокСотрудников = СоздатьОбъект("СписокЗначений");
        
		ДоходыВычетыНалогиСотрудников = "";
		глСобратьДанныеДляСтраховыхВзносов(ДоходыВычетыНалогиСотрудников, СписокСотрудников, ДатаКон,,, 0);
		
		// Цикл по сотрудникам.		
		НомерЗначения = 0;
		Пока НомерЗначения < СписокСотрудников.РазмерСписка() Цикл
			НомерЗначения = НомерЗначения + 1;
			Сотрудник = СписокСотрудников.ПолучитьЗначение(НомерЗначения);
			
			Если Сотрудник.НачислятьНалогиСФОТ.Получить(КонецМесяца) = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			// Получим таблицу "Начисления" с начислениями очередного сотрудника.
			СписокКолонок.УдалитьВсе();
			СписокКолонок.Установить("Сотрудник", Сотрудник);
			Начисления = ОтобратьСтрокиТаблицы(ТаблицаНачислений, СписокКолонок);
			
			Инвалид = ?((Сотрудник.Инвалид.Получить(ДатаКон) = 1), 1, 0);
			
			НачисленияПФР.УдалитьСтроки();
			НачисленияФСС.УдалитьСтроки();
			НачисленияФОМС.УдалитьСтроки();
			
			//********************
			Начисления.ВыбратьСтроки();
			Пока Начисления.ПолучитьСтроку() = 1 Цикл				
				Если Начисления.ФСС = 1 Тогда
					НачисленияФСС.НоваяСтрока();
					НачисленияФСС.Счет = Начисления.Счет;
					НачисленияФСС.Субконто1 = Начисления.Субконто1;
					НачисленияФСС.Субконто2 = Начисления.Субконто2;
					НачисленияФСС.Субконто3 = Начисления.Субконто3;					
					НачисленияФСС.Инвалид = Инвалид;					
					Если (Начисления.ЕНВД <> 0) И (Инвалид = 0) Тогда
						НачисленияФСС.СуммаЕНВД = Начисления.Сумма;
					Иначе
						НачисленияФСС.Сумма = Начисления.Сумма;
					КонецЕсли;						
				КонецЕсли;
				
				Если Начисления.ФОМС = 1 Тогда
					НачисленияФОМС.НоваяСтрока();
					НачисленияФОМС.Счет = Начисления.Счет;
					НачисленияФОМС.Субконто1 = Начисления.Субконто1;
					НачисленияФОМС.Субконто2 = Начисления.Субконто2;
					НачисленияФОМС.Субконто3 = Начисления.Субконто3;
					НачисленияФОМС.Инвалид = Инвалид;
					Если (Начисления.ЕНВД <> 0) И (Инвалид = 0) Тогда
						НачисленияФОМС.СуммаЕНВД = Начисления.Сумма;
					Иначе
						НачисленияФОМС.Сумма = Начисления.Сумма;
					КонецЕсли;						
				КонецЕсли;
				
				Если Начисления.ПФР = 1 Тогда
					НачисленияПФР.НоваяСтрока();
					НачисленияПФР.Счет = Начисления.Счет;
					НачисленияПФР.Субконто1 = Начисления.Субконто1;
					НачисленияПФР.Субконто2 = Начисления.Субконто2;
					НачисленияПФР.Субконто3 = Начисления.Субконто3;
					//Если ПустоеЗначение(Начисления.НомерСубконто) = 0 Тогда
					//	НачисленияПФР.УстановитьЗначение(НачисленияПФР.НомерСтроки, Начисления.НомерСубконто, Начисления.СтатьяПрочихОтчислений);
					//КонецЕсли;
					НачисленияПФР.Инвалид = Инвалид;
					Если (Начисления.ЕНВД <> 0) И (Инвалид = 0) Тогда
						НачисленияПФР.СуммаЕНВД = Начисления.Сумма;
					Иначе
						НачисленияПФР.Сумма = Начисления.Сумма;
					КонецЕсли;						
				КонецЕсли;
				
				Если Начисления.ФСС_НС = 1 Тогда
					Если Инвалид = 1 Тогда
						НачисленияФСС_НС_инв.НоваяСтрока();
						НачисленияФСС_НС_инв.Счет = Начисления.Счет;
						НачисленияФСС_НС_инв.Субконто1 = Начисления.Субконто1;
						НачисленияФСС_НС_инв.Субконто2 = Начисления.Субконто2;
						НачисленияФСС_НС_инв.Субконто3 = Начисления.Субконто3;
						//Если ПустоеЗначение(Начисления.НомерСубконто) = 0 Тогда
						//	НачисленияФСС_НС_инв.УстановитьЗначение(НачисленияФСС_НС_инв.НомерСтроки, Начисления.НомерСубконто, Начисления.СтатьяПрочихОтчислений);
						//КонецЕсли;
						НачисленияФСС_НС_инв.Сумма = Начисления.Сумма;
					Иначе
						НачисленияФСС_НС.НоваяСтрока();
						НачисленияФСС_НС.Счет = Начисления.Счет;
						НачисленияФСС_НС.Субконто1 = Начисления.Субконто1;
						НачисленияФСС_НС.Субконто2 = Начисления.Субконто2;
						НачисленияФСС_НС.Субконто3 = Начисления.Субконто3;
						//Если ПустоеЗначение(Начисления.НомерСубконто) = 0 Тогда
						//	НачисленияФСС_НС.УстановитьЗначение(НачисленияФСС_НС.НомерСтроки, Начисления.НомерСубконто, Начисления.СтатьяПрочихОтчислений);
						//КонецЕсли;
						НачисленияФСС_НС.Сумма = Начисления.Сумма;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			
			// данные за текущий месяц (нарастающим итогом за год)
			Месяц = ДатаМесяц(ДатаКон);
			СтрокаИтоговойТаблицы=""; 
			ДоходыВычетыНалогиСотрудников.НайтиЗначение(глПолучитьУникальныйКодСотрудника(Сотрудник)+глДополнитьСтроку(Месяц,2),СтрокаИтоговойТаблицы,1);     
			Если СтрокаИтоговойТаблицы = 0 Тогда // работа процедуры глСобратьДанныеДляСтраховыхВзносов была прервана - делать больше нечего
				ТекстСообщения = "" + Сотрудник + ": Не удалось обработать данные о доходах!";
				глСообщениеПроведения(ТекстСообщения, ТекущийДокумент(), -1,, Сотрудник.ТекущийЭлемент());				
				Продолжить;
			КонецЕсли;
			
			//****************************************************************
			//**************Расчет взносов в ПФР
			
			РассчитыватьВзносыВПФР = 1;
			
			НомерШкалыВзносов = глПолучитНомерШкалыСтраховыхВзносовПФР(Сотрудник);
			Если НомерШкалыВзносов = 0 Тогда				
				ТекстСообщения = "" + Сотрудник + ": Взносы в ПФР не начислены. Не указана дата рождения, невозможно получить ставку взносов в ПФР!";
				глСообщениеПроведения(ТекстСообщения, ТекущийДокумент(), -1,, Сотрудник.ТекущийЭлемент());				
				РассчитыватьВзносыВПФР = 0;
			ИначеЕсли НомерШкалыВзносов < 0 Тогда	
				ТекстСообщения = "" + Сотрудник + ": Взносы в ПФР не начислены. Неправильно указана дата рождения, невозможно получить ставку взносов в ПФР!";
				глСообщениеПроведения(ТекстСообщения, ТекущийДокумент(), -1,, Сотрудник.ТекущийЭлемент());				
				РассчитыватьВзносыВПФР = 0;
			КонецЕсли;
			
			Если РассчитыватьВзносыВПФР = 1 Тогда
				
				НачисленияПФР.Свернуть("Счет,Субконто1,Субконто2,Субконто3,Инвалид","Сумма,СуммаЕНВД");
				
				РезультатПФРСтрах = 0;
				РезультатПФРНак = 0;
				
				//**************
				// Страховая часть
				ИмяШкалыВзносов = "ПФРСтрах" + НомерШкалыВзносов;	
				
				ИсчисленоПоТекущийМесяц = 0; // исчислено по основному тарифу
				ОблагаемаяБазаПоТекущийМесяц = 0;
				// получим таблицу значений с базами по основным тарифам
				// нарастающим итогом с начала года
				ОблагаемаяБазаПоТекущийМесяцТаблица	= ДоходыВычетыНалогиСотрудников.ПолучитьЗначение(СтрокаИтоговойТаблицы,"ОграниченнаяБаза");
				
				ОблагаемаяБазаПоТекущийМесяцТаблица.ВыбратьСтроки();
				Пока ОблагаемаяБазаПоТекущийМесяцТаблица.ПолучитьСтроку()=1 Цикл
					// цикл по всем тарифам, которые использовались в организации
					ВидТарифа = ОблагаемаяБазаПоТекущийМесяцТаблица.ВидТарифа;
					СтавкаТарифа =глПолучитьСтавкуВзноса(ВидТарифа,ИмяШкалыВзносов,ДатаКон) / 100;
					ОблагаемаяБазаПоТекущийМесяц = ОблагаемаяБазаПоТекущийМесяц + ОблагаемаяБазаПоТекущийМесяцТаблица.БазаПФР;
					ИсчисленоПоТекущийМесяц = ИсчисленоПоТекущийМесяц + Окр(СтавкаТарифа * ОблагаемаяБазаПоТекущийМесяцТаблица.БазаПФР,2);
				КонецЦикла;
				
				// получим облагаемую базу инвалида
				ОблагаемаяБазаПоТекущийМесяцИнвалид = ДоходыВычетыНалогиСотрудников.ПолучитьЗначение(СтрокаИтоговойТаблицы,"ОграниченнаяБазаПФРИнвалид");
				
				// сумма исчисленных взносов с начала года
				СтавкаТарифаИнвалид = глПолучитьСтавкуВзноса(Перечисление.ТарифыСтраховыхВзносов.ОрганизацияИнвалидов,ИмяШкалыВзносов,ДатаКон) / 100;
				ИсчисленоПоТекущийМесяцИнвалид  =  Окр(ОблагаемаяБазаПоТекущийМесяцИнвалид * СтавкаТарифаИнвалид,2);
				
				//ЕНВД
				// сумма исчисленных взносов с начала года
				ОблагаемаяБазаПоТекущийМесяцЕНВД = ДоходыВычетыНалогиСотрудников.ПолучитьЗначение(СтрокаИтоговойТаблицы,"ОграниченнаяБазаПФРЕНВД");
				СтавкаТарифаЕНВД = глПолучитьСтавкуВзноса(Перечисление.ТарифыСтраховыхВзносов.ЕНВД,ИмяШкалыВзносов,ДатаКон) / 100;
				ИсчисленоПоТекущийМесяцЕНВД =  Окр(ОблагаемаяБазаПоТекущийМесяцЕНВД * СтавкаТарифаЕНВД,2);
				
				ИсчисленоПоПредыдущийМесяц = 0;
				ИсчисленоПоПредыдущийМесяцИнвалид= 0;
				ИсчисленоПоПредыдущийМесяцЕНВД = 0;
				Если Месяц >1 Тогда
					ИсчисленоПоПредыдущийМесяц 		  = ДоходыВычетыНалогиСотрудников.ПолучитьЗначение(СтрокаИтоговойТаблицы-1,"ИсчисленоПФРСтрах");
					ИсчисленоПоПредыдущийМесяцИнвалид = ДоходыВычетыНалогиСотрудников.ПолучитьЗначение(СтрокаИтоговойТаблицы-1,"ИсчисленоПФРСтрахИнвалид");    
					ИсчисленоПоПредыдущийМесяцЕНВД	  = ДоходыВычетыНалогиСотрудников.ПолучитьЗначение(СтрокаИтоговойТаблицы-1,"ИсчисленоПФРСтрахЕНВД");
				КонецЕсли;
				
				// сумма исчисленных взносов текущего месяца
				ИсчисленоВТекущемМесяце 		= ИсчисленоПоТекущийМесяц - ИсчисленоПоПредыдущийМесяц;
				ИсчисленоВТекущемМесяцеИнвалид  = ИсчисленоПоТекущийМесяцИнвалид - ИсчисленоПоПредыдущийМесяцИнвалид;
				ИсчисленоВТекущемМесяцеЕНВД 	= ИсчисленоПоТекущийМесяцЕНВД - ИсчисленоПоПредыдущийМесяцЕНВД;
				
				РезультатПФРСтрах = ИсчисленоВТекущемМесяце + ИсчисленоВТекущемМесяцеИнвалид  + ИсчисленоВТекущемМесяцеЕНВД;;
				
				//**************************************
				Если РезультатПФРСтрах <> 0 Тогда
					ТаблицаРаспределения = РаспределитьВзносыПоНачислениям(РезультатПФРСтрах, НачисленияПФР, СтавкаТарифа, СтавкаТарифаИнвалид, Инвалид, ИмяШкалыВзносов);				
					ТаблицаРаспределения.ВыбратьСтроки();
					Пока ТаблицаРаспределения.ПолучитьСтроку() = 1 Цикл
						СформироватьПроводку("ПФР_страх", Сотрудник, ТаблицаРаспределения, ТаблицаРаспределения.Сумма + ТаблицаРаспределения.СуммаЕНВД);
						СформироватьПроводкуСВЗ("ПФР_страх", Сотрудник, ТаблицаРаспределения.Сумма, ТаблицаРаспределения.СуммаЕНВД)
					КонецЦикла;
				КонецЕсли;
				//**************************************
				
				//**************
				// Накопительная часть 
				
				ИмяШкалыВзносов = "ПФРНак" + НомерШкалыВзносов; 
				
				ИсчисленоПоТекущийМесяц = 0; // исчислено по основному тарифу
				ОблагаемаяБазаПоТекущийМесяц = 0;
				// получим таблицу значений с базами по основным тарифам
				// нарастающим итогом с начала года
				ОблагаемаяБазаПоТекущийМесяцТаблица	= ДоходыВычетыНалогиСотрудников.ПолучитьЗначение(СтрокаИтоговойТаблицы,"ОграниченнаяБаза");
				
				ОблагаемаяБазаПоТекущийМесяцТаблица.ВыбратьСтроки();
				Пока ОблагаемаяБазаПоТекущийМесяцТаблица.ПолучитьСтроку()=1 Цикл
					// цикл по всем тарифам, которые использовались в организации
					ВидТарифа = ОблагаемаяБазаПоТекущийМесяцТаблица.ВидТарифа;
					СтавкаТарифа = глПолучитьСтавкуВзноса(ВидТарифа,ИмяШкалыВзносов,ДатаКон) / 100;
					ОблагаемаяБазаПоТекущийМесяц = ОблагаемаяБазаПоТекущийМесяц + ОблагаемаяБазаПоТекущийМесяцТаблица.БазаПФР;
					ИсчисленоПоТекущийМесяц = ИсчисленоПоТекущийМесяц + Окр(СтавкаТарифа * ОблагаемаяБазаПоТекущийМесяцТаблица.БазаПФР,2);
				КонецЦикла;
				
				// получим облагаемую базу инвалида
				ОблагаемаяБазаПоТекущийМесяцИнвалид = ДоходыВычетыНалогиСотрудников.ПолучитьЗначение(СтрокаИтоговойТаблицы,"ОграниченнаяБазаПФРИнвалид");
				
				// сумма исчисленных взносов с начала года инвалида
				СтавкаТарифаИнвалид = глПолучитьСтавкуВзноса(Перечисление.ТарифыСтраховыхВзносов.ОрганизацияИнвалидов,ИмяШкалыВзносов,ДатаКон) / 100;
				ИсчисленоПоТекущийМесяцИнвалид  =  Окр(ОблагаемаяБазаПоТекущийМесяцИнвалид * СтавкаТарифаИнвалид,2);
				
				//ЕНВД
				// сумма исчисленных взносов с начала года
				ОблагаемаяБазаПоТекущийМесяцЕНВД = ДоходыВычетыНалогиСотрудников.ПолучитьЗначение(СтрокаИтоговойТаблицы,"ОграниченнаяБазаПФРЕНВД");
				СтавкаТарифаЕНВД = глПолучитьСтавкуВзноса(Перечисление.ТарифыСтраховыхВзносов.ЕНВД,ИмяШкалыВзносов,ДатаКон) / 100;
				ИсчисленоПоТекущийМесяцЕНВД =  Окр(ОблагаемаяБазаПоТекущийМесяцЕНВД * СтавкаТарифаЕНВД,2);

				ИсчисленоПоПредыдущийМесяц = 0;
				ИсчисленоПоПредыдущийМесяцИнвалид= 0;
				ИсчисленоПоПредыдущийМесяцЕНВД = 0;
				Если Месяц >1 Тогда
					ИсчисленоПоПредыдущийМесяц 		  = ДоходыВычетыНалогиСотрудников.ПолучитьЗначение(СтрокаИтоговойТаблицы-1,"ИсчисленоПФРНак");
					ИсчисленоПоПредыдущийМесяцИнвалид = ДоходыВычетыНалогиСотрудников.ПолучитьЗначение(СтрокаИтоговойТаблицы-1,"ИсчисленоПФРНакИнвалид");
					ИсчисленоПоПредыдущийМесяцЕНВД	  = ДоходыВычетыНалогиСотрудников.ПолучитьЗначение(СтрокаИтоговойТаблицы-1,"ИсчисленоПФРНакЕНВД");
				КонецЕсли;
				
				// сумма исчисленных взносов текущего месяца
				ИсчисленоВТекущемМесяце 		= ИсчисленоПоТекущийМесяц - ИсчисленоПоПредыдущийМесяц;
				ИсчисленоВТекущемМесяцеИнвалид  = ИсчисленоПоТекущийМесяцИнвалид - ИсчисленоПоПредыдущийМесяцИнвалид;
				ИсчисленоВТекущемМесяцеЕНВД 	= ИсчисленоПоТекущийМесяцЕНВД - ИсчисленоПоПредыдущийМесяцЕНВД;
				
				РезультатПФРНак = ИсчисленоВТекущемМесяце + ИсчисленоВТекущемМесяцеИнвалид + ИсчисленоВТекущемМесяцеЕНВД;
				
				
				//**************************************
				Если РезультатПФРНак <> 0 Тогда
					ТаблицаРаспределения = РаспределитьВзносыПоНачислениям(РезультатПФРНак, НачисленияПФР, СтавкаТарифа, СтавкаТарифаИнвалид, Инвалид, ИмяШкалыВзносов);				
					ТаблицаРаспределения.ВыбратьСтроки();
					Пока ТаблицаРаспределения.ПолучитьСтроку() = 1 Цикл
						СформироватьПроводку("ПФР_нак", Сотрудник, ТаблицаРаспределения, ТаблицаРаспределения.Сумма + ТаблицаРаспределения.СуммаЕНВД);
						СформироватьПроводкуСВЗ("ПФР_нак", Сотрудник, ТаблицаРаспределения.Сумма, ТаблицаРаспределения.СуммаЕНВД)
					КонецЦикла;
				КонецЕсли;
				//**************************************
				
			КонецЕсли;
			
			//****************************************************************
			//**************Расчет взносов в ФОМС
			
			РезультатФФОМС = 0;
			РезультатТФОМС = 0;
			
			ИмяШкалыВзносов = "ФФОМС";	
			
			ИсчисленоПоТекущийМесяц = 0; // исчислено по основному тарифу
			ОблагаемаяБазаПоТекущийМесяц = 0;
			// получим таблицу значений с базами по основным тарифам
			// нарастающим итогом с начала года
			ОблагаемаяБазаПоТекущийМесяцТаблица	= ДоходыВычетыНалогиСотрудников.ПолучитьЗначение(СтрокаИтоговойТаблицы,"ОграниченнаяБаза");
			
			ОблагаемаяБазаПоТекущийМесяцТаблица.ВыбратьСтроки();
			Пока ОблагаемаяБазаПоТекущийМесяцТаблица.ПолучитьСтроку()=1 Цикл
				// цикл по всем тарифам, которые использовались в организации
				ВидТарифа = ОблагаемаяБазаПоТекущийМесяцТаблица.ВидТарифа;
				СтавкаТарифа = глПолучитьСтавкуВзноса(ВидТарифа,ИмяШкалыВзносов,ДатаКон) / 100;
				ОблагаемаяБазаПоТекущийМесяц = ОблагаемаяБазаПоТекущийМесяц + ОблагаемаяБазаПоТекущийМесяцТаблица.БазаФОМС;
				ИсчисленоПоТекущийМесяц = ИсчисленоПоТекущийМесяц + Окр(СтавкаТарифа * ОблагаемаяБазаПоТекущийМесяцТаблица.БазаФОМС,2);
			КонецЦикла;
			
			// получим облагаемую базу инвалида
			ОблагаемаяБазаПоТекущийМесяцИнвалид = ДоходыВычетыНалогиСотрудников.ПолучитьЗначение(СтрокаИтоговойТаблицы,"ОграниченнаяБазаФОМСИнвалид");
			
			// сумма исчисленных взносов с начала года
			СтавкаТарифаИнвалид = глПолучитьСтавкуВзноса(Перечисление.ТарифыСтраховыхВзносов.ОрганизацияИнвалидов,ИмяШкалыВзносов,ДатаКон) / 100;
			ИсчисленоПоТекущийМесяцИнвалид  =  Окр(ОблагаемаяБазаПоТекущийМесяцИнвалид * СтавкаТарифаИнвалид,2); 
			
			//ЕНВД
			// сумма исчисленных взносов с начала года
			ОблагаемаяБазаПоТекущийМесяцЕНВД = ДоходыВычетыНалогиСотрудников.ПолучитьЗначение(СтрокаИтоговойТаблицы,"ОграниченнаяБазаФОМСЕНВД");
			СтавкаТарифаЕНВД = глПолучитьСтавкуВзноса(Перечисление.ТарифыСтраховыхВзносов.ЕНВД,ИмяШкалыВзносов,ДатаКон) / 100;
			ИсчисленоПоТекущийМесяцЕНВД =  Окр(ОблагаемаяБазаПоТекущийМесяцЕНВД * СтавкаТарифаЕНВД,2);
			
			ИсчисленоПоПредыдущийМесяц = 0;
			ИсчисленоПоПредыдущийМесяцИнвалид= 0;
			ИсчисленоПоПредыдущийМесяцЕНВД = 0;
			Если Месяц >1 Тогда
				ИсчисленоПоПредыдущийМесяц 		  = ДоходыВычетыНалогиСотрудников.ПолучитьЗначение(СтрокаИтоговойТаблицы-1,"ИсчисленоФФОМС");
				ИсчисленоПоПредыдущийМесяцИнвалид = ДоходыВычетыНалогиСотрудников.ПолучитьЗначение(СтрокаИтоговойТаблицы-1,"ИсчисленоФФОМСИнвалид");    
				ИсчисленоПоПредыдущийМесяцЕНВД	  = ДоходыВычетыНалогиСотрудников.ПолучитьЗначение(СтрокаИтоговойТаблицы-1,"ИсчисленоФФОМСЕНВД");
			КонецЕсли;
			
			// сумма исчисленных взносов текущего месяца
			ИсчисленоВТекущемМесяце 		= ИсчисленоПоТекущийМесяц - ИсчисленоПоПредыдущийМесяц;
			ИсчисленоВТекущемМесяцеИнвалид  = ИсчисленоПоТекущийМесяцИнвалид - ИсчисленоПоПредыдущийМесяцИнвалид;
			ИсчисленоВТекущемМесяцеЕНВД 	= ИсчисленоПоТекущийМесяцЕНВД - ИсчисленоПоПредыдущийМесяцЕНВД;
			
			РезультатФФОМС = ИсчисленоВТекущемМесяце + ИсчисленоВТекущемМесяцеИнвалид + ИсчисленоВТекущемМесяцеЕНВД ; 
			
			ИмяШкалыВзносов = "ТФОМС";	
			
			ИсчисленоПоТекущийМесяц = 0; // исчислено по основному тарифу
			ОблагаемаяБазаПоТекущийМесяц = 0;
			// получим таблицу значений с базами по основным тарифам
			// нарастающим итогом с начала года
			ОблагаемаяБазаПоТекущийМесяцТаблица	= ДоходыВычетыНалогиСотрудников.ПолучитьЗначение(СтрокаИтоговойТаблицы,"ОграниченнаяБаза");
			
			ОблагаемаяБазаПоТекущийМесяцТаблица.ВыбратьСтроки();
			Пока ОблагаемаяБазаПоТекущийМесяцТаблица.ПолучитьСтроку()=1 Цикл
				// цикл по всем тарифам, которые использовались в организации
				ВидТарифа = ОблагаемаяБазаПоТекущийМесяцТаблица.ВидТарифа;
				СтавкаТарифа = глПолучитьСтавкуВзноса(ВидТарифа,ИмяШкалыВзносов,ДатаКон) / 100;
				ОблагаемаяБазаПоТекущийМесяц = ОблагаемаяБазаПоТекущийМесяц + ОблагаемаяБазаПоТекущийМесяцТаблица.БазаФОМС;
				ИсчисленоПоТекущийМесяц = ИсчисленоПоТекущийМесяц + Окр(СтавкаТарифа * ОблагаемаяБазаПоТекущийМесяцТаблица.БазаФОМС,2);
			КонецЦикла;
			
			// получим облагаемую базу инвалида
			ОблагаемаяБазаПоТекущийМесяцИнвалид = ДоходыВычетыНалогиСотрудников.ПолучитьЗначение(СтрокаИтоговойТаблицы,"ОграниченнаяБазаФОМСИнвалид");
			
			// сумма исчисленных взносов с начала года
			СтавкаТарифаИнвалид = глПолучитьСтавкуВзноса(Перечисление.ТарифыСтраховыхВзносов.ОрганизацияИнвалидов,ИмяШкалыВзносов,ДатаКон) / 100;
			ИсчисленоПоТекущийМесяцИнвалид  =  Окр(ОблагаемаяБазаПоТекущийМесяцИнвалид *СтавкаТарифаИнвалид,2);
			
			//ЕНВД
			// сумма исчисленных взносов с начала года
			ОблагаемаяБазаПоТекущийМесяцЕНВД = ДоходыВычетыНалогиСотрудников.ПолучитьЗначение(СтрокаИтоговойТаблицы,"ОграниченнаяБазаФОМСЕНВД");
			СтавкаТарифаЕНВД = глПолучитьСтавкуВзноса(Перечисление.ТарифыСтраховыхВзносов.ЕНВД,ИмяШкалыВзносов,ДатаКон) / 100;
			ИсчисленоПоТекущийМесяцЕНВД =  Окр(ОблагаемаяБазаПоТекущийМесяцЕНВД * СтавкаТарифаЕНВД,2);
			
			ИсчисленоПоПредыдущийМесяц = 0;
			ИсчисленоПоПредыдущийМесяцИнвалид= 0;
			ИсчисленоПоПредыдущийМесяцЕНВД = 0;
			Если Месяц >1 Тогда
				ИсчисленоПоПредыдущийМесяц 		  = ДоходыВычетыНалогиСотрудников.ПолучитьЗначение(СтрокаИтоговойТаблицы-1,"ИсчисленоТФОМС");
				ИсчисленоПоПредыдущийМесяцИнвалид = ДоходыВычетыНалогиСотрудников.ПолучитьЗначение(СтрокаИтоговойТаблицы-1,"ИсчисленоТФОМСИнвалид"); 
				ИсчисленоПоПредыдущийМесяцЕНВД	  = ДоходыВычетыНалогиСотрудников.ПолучитьЗначение(СтрокаИтоговойТаблицы-1,"ИсчисленоТФОМСЕНВД");
			КонецЕсли;
						
			// сумма исчисленных взносов текущего месяца
			ИсчисленоВТекущемМесяце 		= ИсчисленоПоТекущийМесяц - ИсчисленоПоПредыдущийМесяц;
			ИсчисленоВТекущемМесяцеИнвалид  = ИсчисленоПоТекущийМесяцИнвалид - ИсчисленоПоПредыдущийМесяцИнвалид;
			ИсчисленоВТекущемМесяцеЕНВД 	= ИсчисленоПоТекущийМесяцЕНВД - ИсчисленоПоПредыдущийМесяцЕНВД;
			
			РезультатТФОМС = ИсчисленоВТекущемМесяце + ИсчисленоВТекущемМесяцеИнвалид + ИсчисленоВТекущемМесяцеЕНВД;
			
			//**************************************
			НачисленияФОМС.Свернуть("Счет,Субконто1,Субконто2,Субконто3,Инвалид","Сумма,СуммаЕНВД");
			Если РезультатФФОМС <> 0 Тогда
				ТаблицаРаспределения = РаспределитьВзносыПоНачислениям(РезультатФФОМС, НачисленияФОМС, СтавкаТарифа, СтавкаТарифаИнвалид, Инвалид, ИмяШкалыВзносов);				
				ТаблицаРаспределения.ВыбратьСтроки();
				Пока ТаблицаРаспределения.ПолучитьСтроку() = 1 Цикл
					СформироватьПроводку("ФФОМС", Сотрудник, ТаблицаРаспределения, ТаблицаРаспределения.Сумма + ТаблицаРаспределения.СуммаЕНВД);
					СформироватьПроводкуСВЗ("ФФОМС", Сотрудник, ТаблицаРаспределения.Сумма, ТаблицаРаспределения.СуммаЕНВД)
				КонецЦикла;
			КонецЕсли;
			
			Если РезультатТФОМС <> 0 Тогда
				ТаблицаРаспределения = РаспределитьВзносыПоНачислениям(РезультатТФОМС, НачисленияФОМС, СтавкаТарифа, СтавкаТарифаИнвалид, Инвалид, ИмяШкалыВзносов);				
				ТаблицаРаспределения.ВыбратьСтроки();
				Пока ТаблицаРаспределения.ПолучитьСтроку() = 1 Цикл
					СформироватьПроводку("ТФОМС", Сотрудник, ТаблицаРаспределения, ТаблицаРаспределения.Сумма + ТаблицаРаспределения.СуммаЕНВД);
					СформироватьПроводкуСВЗ("ТФОМС", Сотрудник, ТаблицаРаспределения.Сумма, ТаблицаРаспределения.СуммаЕНВД)
				КонецЦикла;
			КонецЕсли;
			//**************************************
			
			//****************************************************************
			//**************Расчет взносов в ФОМС
			
			РезультатФСС = 0;
			
			ИмяШкалыВзносов = "ФСС";	
			
			ИсчисленоПоТекущийМесяц = 0; // исчислено по основному тарифу
			ОблагаемаяБазаПоТекущийМесяц = 0;
			// получим таблицу значений с базами по основным тарифам
			// нарастающим итогом с начала года
			ОблагаемаяБазаПоТекущийМесяцТаблица	= ДоходыВычетыНалогиСотрудников.ПолучитьЗначение(СтрокаИтоговойТаблицы,"ОграниченнаяБаза");
			
			ОблагаемаяБазаПоТекущийМесяцТаблица.ВыбратьСтроки();
			Пока ОблагаемаяБазаПоТекущийМесяцТаблица.ПолучитьСтроку()=1 Цикл
				// цикл по всем тарифам, которые использовались в организации
				ВидТарифа = ОблагаемаяБазаПоТекущийМесяцТаблица.ВидТарифа;
				СтавкаТарифа = глПолучитьСтавкуВзноса(ВидТарифа,ИмяШкалыВзносов,ДатаКон) / 100;
				ОблагаемаяБазаПоТекущийМесяц = ОблагаемаяБазаПоТекущийМесяц + ОблагаемаяБазаПоТекущийМесяцТаблица.БазаФСС;
				ИсчисленоПоТекущийМесяц = ИсчисленоПоТекущийМесяц + Окр(СтавкаТарифа * ОблагаемаяБазаПоТекущийМесяцТаблица.БазаФСС,2);
			КонецЦикла;
			
			// получим облагаемую базу инвалида
			ОблагаемаяБазаПоТекущийМесяцИнвалид = ДоходыВычетыНалогиСотрудников.ПолучитьЗначение(СтрокаИтоговойТаблицы,"ОграниченнаяБазаФССИнвалид");
			
			// сумма исчисленных взносов с начала года
			СтавкаТарифаИнвалид = глПолучитьСтавкуВзноса(Перечисление.ТарифыСтраховыхВзносов.ОрганизацияИнвалидов,ИмяШкалыВзносов,ДатаКон) / 100;
			ИсчисленоПоТекущийМесяцИнвалид  =  Окр(ОблагаемаяБазаПоТекущийМесяцИнвалид * СтавкаТарифаИнвалид,2);
			
			//ЕНВД
			// сумма исчисленных взносов с начала года
			ОблагаемаяБазаПоТекущийМесяцЕНВД = ДоходыВычетыНалогиСотрудников.ПолучитьЗначение(СтрокаИтоговойТаблицы,"ОграниченнаяБазаФССЕНВД");
			СтавкаТарифаЕНВД = глПолучитьСтавкуВзноса(Перечисление.ТарифыСтраховыхВзносов.ЕНВД,ИмяШкалыВзносов,ДатаКон) / 100;
			ИсчисленоПоТекущийМесяцЕНВД =  Окр(ОблагаемаяБазаПоТекущийМесяцЕНВД * СтавкаТарифаЕНВД,2);
			
			ИсчисленоПоПредыдущийМесяц = 0;
			ИсчисленоПоПредыдущийМесяцИнвалид= 0;
			ИсчисленоПоПредыдущийМесяцЕНВД = 0;
			Если Месяц >1 Тогда
				ИсчисленоПоПредыдущийМесяц 		  = ДоходыВычетыНалогиСотрудников.ПолучитьЗначение(СтрокаИтоговойТаблицы-1,"ИсчисленоФСС");
				ИсчисленоПоПредыдущийМесяцИнвалид = ДоходыВычетыНалогиСотрудников.ПолучитьЗначение(СтрокаИтоговойТаблицы-1,"ИсчисленоФССИнвалид");    
				ИсчисленоПоПредыдущийМесяцЕНВД	  = ДоходыВычетыНалогиСотрудников.ПолучитьЗначение(СтрокаИтоговойТаблицы-1,"ИсчисленоФССЕНВД");
			КонецЕсли;
			
			// сумма исчисленных взносов текущего месяца
			ИсчисленоВТекущемМесяце 		= ИсчисленоПоТекущийМесяц - ИсчисленоПоПредыдущийМесяц;
			ИсчисленоВТекущемМесяцеИнвалид  = ИсчисленоПоТекущийМесяцИнвалид - ИсчисленоПоПредыдущийМесяцИнвалид;
			ИсчисленоВТекущемМесяцеЕНВД		= ИсчисленоПоТекущийМесяцЕНВД - ИсчисленоПоПредыдущийМесяцЕНВД;
			
			РезультатФСС = ИсчисленоВТекущемМесяце + ИсчисленоВТекущемМесяцеИнвалид + ИсчисленоВТекущемМесяцеЕНВД;
			
			//**************************************
			НачисленияФСС.Свернуть("Счет,Субконто1,Субконто2,Субконто3,Инвалид","Сумма,СуммаЕНВД");			
			Если РезультатФСС <> 0 Тогда
				ТаблицаРаспределения = РаспределитьВзносыПоНачислениям(РезультатФСС, НачисленияФСС, СтавкаТарифа, СтавкаТарифаИнвалид, Инвалид, ИмяШкалыВзносов);				
				ТаблицаРаспределения.ВыбратьСтроки();
				Пока ТаблицаРаспределения.ПолучитьСтроку() = 1 Цикл
					СформироватьПроводку("ФСС", Сотрудник, ТаблицаРаспределения, ТаблицаРаспределения.Сумма + ТаблицаРаспределения.СуммаЕНВД);
					СформироватьПроводкуСВЗ("ФСС", Сотрудник, ТаблицаРаспределения.Сумма, ТаблицаРаспределения.СуммаЕНВД)
				КонецЦикла;
			КонецЕсли;
			//**************************************
		КонецЦикла;	
		//****************************************************************
		//**************Расчет взносов в ФСС от НС и ПЗ
		
		НачисленияФСС_НС.Свернуть("Счет,Субконто1,Субконто2,Субконто3", "Сумма");
		БазаФСС_НС = НачисленияФСС_НС.Итог("Сумма");
		ФСС_НС = Окр(БазаФСС_НС*СтавкаФСС_НС/100, 2, 1);
		Если ФСС_НС <> 0 Тогда
			Распределено = 0;
			НачисленияФСС_НС.ВыбратьСтроки();
			Пока НачисленияФСС_НС.ПолучитьСтроку() = 1 Цикл
				СуммаВСтроке = НачисленияФСС_НС.Сумма;
				Если СуммаВСтроке <> 0 Тогда
					Сумма = Окр(ФСС_НС*(СуммаВСтроке/НачисленияФСС_НС.Итог("Сумма")), 2, 1);
					Распределено = Распределено + Сумма;
					СформироватьПроводку("ФСС_НС", "", НачисленияФСС_НС, Сумма);
				КонецЕсли;
			КонецЦикла;
			Если Распределено <> 0 Тогда
				Операция.Сумма = Операция.Сумма + ФСС_НС - Распределено; 
			КонецЕсли;
		КонецЕсли;
		
		НачисленияФСС_НС_инв.Свернуть("Счет,Субконто1,Субконто2,Субконто3", "Сумма");
		БазаФСС_НС_инв = НачисленияФСС_НС_инв.Итог("Сумма");
		ФСС_НС = Окр(БазаФСС_НС_инв*СтавкаФСС_НС/100*0.6, 2, 1);
		Если ФСС_НС <> 0 Тогда
			Распределено = 0;
			НачисленияФСС_НС_инв.ВыбратьСтроки();
			Пока НачисленияФСС_НС_инв.ПолучитьСтроку() = 1 Цикл
				СуммаВСтроке = НачисленияФСС_НС_инв.Сумма;
				Если СуммаВСтроке <> 0 Тогда
					Сумма = Окр(ФСС_НС*(СуммаВСтроке/НачисленияФСС_НС_инв.Итог("Сумма")), 2, 1);
					Распределено = Распределено + Сумма;
					СформироватьПроводку("ФСС_НС", "", НачисленияФСС_НС_инв, Сумма);
				КонецЕсли;
			КонецЦикла;
			Если Распределено <> 0 Тогда
				Операция.Сумма = Операция.Сумма + ФСС_НС - Распределено; 
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	Если Операция.КоличествоПроводок() > 0 Тогда
		Операция.ЗаписатьПроводки();
	КонецЕсли;
	
КонецПроцедуры // НачислениеНалоговСФОТ()

//******************************************************************************
// РаспределитьВзносыПоНачислениям (Сумма, Таб, СтавкаТарифа, СтавкаТарифаИнвалид,Инвалид, ИмяШкалыВзносов)      
// распределяет полученную суму налога по видам начислений для определения счета затрат
Функция РаспределитьВзносыПоНачислениям(Сумма, Таб, СтавкаТарифа, СтавкаТарифаИнвалид, Инвалид, ИмяШкалыВзносов)
	
	ТаблицаРаспределения = СоздатьОбъект("ТаблицаЗначений");
	Таб.Выгрузить(ТаблицаРаспределения);
	ТаблицаРаспределения.УдалитьСтроки();
	
	ВсегоДоходПоОсновномуТарифу = Таб.Итог("Сумма");
	ВсегоДоходПоТарифуЕНВД = Таб.Итог("СуммаЕНВД"); 
	
	СтавкаТарифаЕНВД = глПолучитьСтавкуВзноса(Перечисление.ТарифыСтраховыхВзносов.ЕНВД,ИмяШкалыВзносов,ДатаДок) / 100;
	
	Если Инвалид = 1 Тогда		
		КоэффициентОсновногоТарифа = 1;
	Иначе
		Если (СтавкаТарифа*ВсегоДоходПоОсновномуТарифу + СтавкаТарифаЕНВД*ВсегоДоходПоТарифуЕНВД) = 0 Тогда
			КоэффициентОсновногоТарифа = 1;
		Иначе
			КоэффициентОсновногоТарифа = СтавкаТарифа*ВсегоДоходПоОсновномуТарифу/(СтавкаТарифа*ВсегоДоходПоОсновномуТарифу + СтавкаТарифаЕНВД*ВсегоДоходПоТарифуЕНВД);
		КонецЕсли;
	КонецЕсли;
	
	СуммаВсего = Сумма;
	СуммаПоОсновномуТарифу = Окр(Сумма*КоэффициентОсновногоТарифа,2);
	СуммаПоТарифуЕНВД = Сумма - СуммаПоОсновномуТарифу;	
	
	РаспреденнаяСуммаПоОсновномуТарифу = СуммаПоОсновномуТарифу;
	РаспреденнаяСуммаПоТарифуЕНВД = СуммаПоТарифуЕНВД;
	
	Таб.ВыбратьСтроки();
	Пока Таб.ПолучитьСтроку() = 1 Цикл
		Если СуммаВсего <> 0 Тогда
			Если СуммаПоОсновномуТарифу <> 0 Тогда
				ОсновнойДоход = Таб.Сумма;
				Если (ОсновнойДоход <> 0) И (РаспреденнаяСуммаПоОсновномуТарифу > 0) Тогда
					СуммаРаспределенная = Макс(0,Окр(ОсновнойДоход * СуммаПоОсновномуТарифу / ВсегоДоходПоОсновномуТарифу,2));
					Если СуммаРаспределенная <> 0 Тогда
						ТаблицаРаспределения.НоваяСтрока();
						ТаблицаРаспределения.Счет = Таб.Счет;
						ТаблицаРаспределения.Субконто1 = Таб.Субконто1;
						ТаблицаРаспределения.Субконто2 = Таб.Субконто2;
						ТаблицаРаспределения.Субконто3 = Таб.Субконто3;
						ТаблицаРаспределения.Сумма = СуммаРаспределенная;
						РаспреденнаяСуммаПоОсновномуТарифу = РаспреденнаяСуммаПоОсновномуТарифу - СуммаРаспределенная;
						СуммаВсего = СуммаВсего - СуммаРаспределенная;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		Если СуммаВсего <> 0 Тогда
			Если (СуммаПоТарифуЕНВД <> 0) И  (РаспреденнаяСуммаПоТарифуЕНВД > 0) Тогда
				ДоходПоЕНВД = Таб.СуммаЕНВД;
				Если ДоходПоЕНВД <> 0 Тогда
					СуммаРаспределеннаяЕНВД = Макс(0,Окр(ДоходПоЕНВД * СуммаПоТарифуЕНВД / ВсегоДоходПоТарифуЕНВД,2));
					Если СуммаРаспределеннаяЕНВД <> 0 Тогда
						ТаблицаРаспределения.НоваяСтрока();
						ТаблицаРаспределения.Счет = Таб.Счет;
						ТаблицаРаспределения.Субконто1 = Таб.Субконто1;
						ТаблицаРаспределения.Субконто2 = Таб.Субконто2;
						ТаблицаРаспределения.Субконто3 = Таб.Субконто3;
						ТаблицаРаспределения.СуммаЕНВД = СуммаРаспределеннаяЕНВД;
						РаспреденнаяСуммаПоТарифуЕНВД = РаспреденнаяСуммаПоТарифуЕНВД - СуммаРаспределеннаяЕНВД;						
						СуммаВсего = СуммаВсего - СуммаРаспределеннаяЕНВД;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;

	Если РаспреденнаяСуммаПоТарифуЕНВД + РаспреденнаяСуммаПоОсновномуТарифу <> 0 Тогда //сброс копеек в последнюю строку
		ТаблицаРаспределения.Сумма = ТаблицаРаспределения.Сумма + РаспреденнаяСуммаПоТарифуЕНВД + РаспреденнаяСуммаПоОсновномуТарифу;		
		Если ТаблицаРаспределения.СуммаЕНВД <> 0 Тогда
			ТаблицаРаспределения.СуммаЕНВД = ТаблицаРаспределения.Сумма;
		КонецЕсли;
	КонецЕсли;

	ТаблицаРаспределения.Свернуть("Счет,Субконто1,Субконто2,Субконто3", "Сумма, СуммаЕНВД");
	Возврат ТаблицаРаспределения;
	
КонецФункции 

//******************************************************************************
// СформироватьПроводку(Налог, Сотрудник, Таб, Сумма)
//
// Параметры:
//  Налог - Строка. Код налога по справочнику "Налоги и отчисления".
//  Сотрудник - Справочник.Сотрудники.
//  Таб   - ТаблицаЗначений. Таблица начислений по сотруднику с выбранной строкой.
//  Сумма - Число. Сумма проводки.
//
// Описание:
//  Процедура формирует проводку по ЕСН.
//
Процедура СформироватьПроводкуСВЗ(Налог, Сотрудник, Сумма, СуммаЕНВД)
	
	Если (Сумма = 0) И (СуммаЕНВД = 0) Тогда
		Возврат;
	КонецЕсли;
	
	Если Сумма <> 0 Тогда
		
		Операция.НоваяПроводка(); Операция.РазделительУчета = ЮрЛицо;
		Операция.ПервичныйДокумент  = глПредставлениеПервичногоДокумента(Контекст);

		Если Налог = "ФСС" Тогда
			Операция.Кредит.Счет = СчетПоКоду("СВЗ.01.3");
			Операция.СодержаниеПроводки = "Начислен взнос в ч. ФСС";
			
		ИначеЕсли Налог = "ПФР_страх" Тогда
			Операция.Кредит.Счет = СчетПоКоду("СВЗ.01.1");
			Операция.СодержаниеПроводки = "Начислен взнос в ПФР";
			
		ИначеЕсли Налог = "ПФР_нак" Тогда
			Операция.Кредит.Счет = СчетПоКоду("СВЗ.01.2");
			Операция.СодержаниеПроводки = "Начислен взнос в ПФР";
			
		ИначеЕсли Налог = "ФФОМС" Тогда
			Операция.Кредит.Счет = СчетПоКоду("СВЗ.01.4");
			Операция.СодержаниеПроводки = "Начислен взнос в ч. ФФОМС";
			
		ИначеЕсли Налог = "ТФОМС" Тогда
			Операция.Кредит.Счет = СчетПоКоду("СВЗ.01.5");
			Операция.СодержаниеПроводки = "Начислен взнос в ч. ТФОМС";
			
		КонецЕсли;
		
		Операция.Кредит.Субконто(1, Сотрудник);
		Операция.НомерЖурнала = "ЗП"; 
		
		Операция.Сумма = Сумма;       
	КонецЕсли;
	
	Если СуммаЕНВД <> 0 Тогда
		
		Операция.НоваяПроводка(); Операция.РазделительУчета = ЮрЛицо;
		Операция.ПервичныйДокумент  = глПредставлениеПервичногоДокумента(Контекст);

		Если Налог = "ПФР_страх" Тогда
			Операция.Кредит.Счет = СчетПоКоду("СВЗ.02.1");
			Операция.СодержаниеПроводки = "Начислен взнос в ПФР по деятельности ЕНВД";
			
		ИначеЕсли Налог = "ПФР_нак" Тогда
			Операция.Кредит.Счет = СчетПоКоду("СВЗ.02.2");
			Операция.СодержаниеПроводки = "Начислен взнос в ПФР по деятельности ЕНВД";
			
		КонецЕсли;
		
		Операция.Кредит.Субконто(1, Сотрудник);
		Операция.НомерЖурнала = "ЗП"; 
		
		Операция.Сумма = СуммаЕНВД;       
	КонецЕсли;
				
КонецПроцедуры // СформироватьПроводку()


//******************************************************************************
// ЗакрытиеСчета97()
//
// Параметры:
//  Нет.
//
// Вызывается из формул элементов диалога:
//  Нет.
//
// Описание:
//  Здесь описывается процедура.
//
Процедура ЗакрытиеСчета97()
	
	Перем Субк[3];
	
	Сч97 = СчетПоКоду("97");
	
	// Формирование печатной формы
	Если ФормироватьПечатнуюФорму = 1 Тогда
		НаименованиеРегламентнойОперации = "Закрытие счета 97 ""Расходы будущих периодов""";
		Таб.ВывестиСекцию("РегламентнаяОперация");
		ИнициализироватьРасшифровкуПоЗакрытиюСчета97();
	КонецЕсли;
	
	Если БухИтЗаМесяц.СКД(Сч97) > 0 Тогда
			
		БухИт97 = СоздатьОбъект("БухгалтерскиеИтоги"); БухИт97.ИспользоватьРазделительУчета(ЮрЛицо);
		БухИт97.ИспользоватьСубконто(ВидыСубконто.РасходыБудущихПериодов);
		БухИт97.ВыполнитьЗапрос(ДатаНач, ДатаКон, Сч97,,,,,);
		БухИт97.ВыбратьСубконто();
		Пока БухИт97.ПолучитьСубконто() = 1 Цикл
			ОстатокРасходовБудущихПериодов = БухИт97.СКД();
			Если ОстатокРасходовБудущихПериодов <= 0 Тогда
			    Продолжить;
			КонецЕсли;
			
			СтатьяРасходовБудущихПериодов = БухИт97.Субконто(ВидыСубконто.РасходыБудущихПериодов);
			
			Если ПустоеЗначение(СтатьяРасходовБудущихПериодов.СчетЗатрат) = 1 Тогда
				ТекстСообщения = "" + СтатьяРасходовБудущихПериодов + ": для статьи РБП не указан счет отнесения расходов. Списание расходов по данной статье не будет выполнено.";
				глСообщениеПроведения(ТекстСообщения, ТекущийДокумент(), -1,, СтатьяРасходовБудущихПериодов.ТекущийЭлемент());
				Продолжить;
			КонецЕсли;
            
			НеПринятоКНалоговомуУчету = 0;
			СуммаСписанияЗаМесяц = СуммаСписанияРасходовБудущихПериодовЗаМесяц(СтатьяРасходовБудущихПериодов, ОстатокРасходовБудущихПериодов);
			СуммаСписанияЗаМесяц = Мин(СуммаСписанияЗаМесяц, ОстатокРасходовБудущихПериодов);
			
			СуммаСписанияЗаМесяцЕСН = 0;
			СуммаСписанияЗаМесяцПрочиеНалоги = 0;
			СуммаСписанияНалоговИВзносов = 0;
			
			Если СтатьяРасходовБудущихПериодов.НазначениеСтатьиРасходов = 1 Тогда // оплата труда
				
				Если СтатьяРасходовБудущихПериодов.СпособПризнанияРасходов = Перечисление.СпособыПризнанияРасходов.ПоКалендарнымДням Тогда 
					ПоСправочнику = 0;
				Иначе
					ПоСправочнику = 1;
				КонецЕсли;
				
				ОбщаяСуммаСписанияЕСН = СтатьяРасходовБудущихПериодов.СуммаЕСН_ФБ + 
				СтатьяРасходовБудущихПериодов.СуммаФСС + 
				СтатьяРасходовБудущихПериодов.СуммаФФОМС + 
				СтатьяРасходовБудущихПериодов.СуммаТФОМС;
				
			    СуммаСписанияЗаМесяцЕСН = СуммаСписанияРасходовБудущихПериодовЗаМесяц(СтатьяРасходовБудущихПериодов, ОбщаяСуммаСписанияЕСН, ПоСправочнику);
				
				ОбщаяСуммаСписанияПричиеНалоги = СтатьяРасходовБудущихПериодов.СуммаПФР_страх + 
				СтатьяРасходовБудущихПериодов.СуммаПФР_нак + 
				СтатьяРасходовБудущихПериодов.СуммаФСС_НС;
				
			    СуммаСписанияЗаМесяцПрочиеНалоги = СуммаСписанияРасходовБудущихПериодовЗаМесяц(СтатьяРасходовБудущихПериодов, ОбщаяСуммаСписанияПричиеНалоги, ПоСправочнику);
				
				СуммаСписанияНалоговИВзносов = СуммаСписанияЗаМесяцЕСН + СуммаСписанияЗаМесяцПрочиеНалоги;
				СуммаСписанияНалоговИВзносов = Мин(СуммаСписанияНалоговИВзносов, СуммаСписанияЗаМесяц);
				Если СуммаСписанияНалоговИВзносов = СуммаСписанияЗаМесяц Тогда
					СуммаСписанияНалоговИВзносов = 0;						
				КонецЕсли;
				
				
			КонецЕсли;
			
			СуммаСписанияЗаМесяц = СуммаСписанияЗаМесяц - СуммаСписанияНалоговИВзносов;
			
			
			// Определим сумму постоянных разниц по статье расходов будущих периодов.
			ВсегоПостоянныхРазниц = 0;
			Если ВыполнятьДвиженияПоСчетуНПР = Да Тогда
				ВсегоПостоянныхРазниц = НПР.СКД("НПР.97",,, СтатьяРасходовБудущихПериодов);
				
				// Если РБП не принимаются к налоговому учету, то
				// необходимо чтобы это было отражено на счете НПР.
				Если (СтатьяРасходовБудущихПериодов.НазначениеСтатьиРасходов <> 2) // не расходы на добр. страх.
				   и ((СтатьяРасходовБудущихПериодов.ВидРасхода.Выбран() = 0)
				  или (СтатьяРасходовБудущихПериодов.ВидРасхода = Перечисление.ВидыРасходов.НеПринимаемые)) Тогда
				 	НеОтраженоНаСчетеНПР = ОстатокРасходовБудущихПериодов - ВсегоПостоянныхРазниц;
				 	Если НеОтраженоНаСчетеНПР > 0 Тогда
					    Операция.НоваяПроводка(); Операция.РазделительУчета = ЮрЛицо;
						Операция.НомерЖурнала = "ПР";
						Операция.СодержаниеПроводки = "Не принимаемые расходы";
						Операция.Дебет.Счет = СчетПоКоду("НПР.97");
						Операция.Дебет.РасходыБудущихПериодов = СтатьяРасходовБудущихПериодов;
						Операция.Сумма = НеОтраженоНаСчетеНПР;
					КонецЕсли;
					ВсегоПостоянныхРазниц = ОстатокРасходовБудущихПериодов;
				ИначеЕсли СтатьяРасходовБудущихПериодов.НазначениеСтатьиРасходов = 2 Тогда  
					Если БухИтЗаМесяц.КО("Н04.07",,, СтатьяРасходовБудущихПериодов) > 0 Тогда
						НормаРасхода = ?((СтатьяРасходовБудущихПериодов.ДатаНачалаСписания < '01.01.2008'), 10000, 15000);
						ОтраженоРанее = Мин(НормаРасхода,БухИтЗаГод.КО("Н04.07",,, СтатьяРасходовБудущихПериодов) - БухИтЗаМесяц.КО("Н04.07",,, СтатьяРасходовБудущихПериодов)); 
						МаксСуммаСписанияЗаМесяц = Макс(НормаРасхода - ОтраженоРанее, 0);
						ПринятоКНалоговомуУчету   = Мин(СуммаСписанияЗаМесяц, МаксСуммаСписанияЗаМесяц);
						НеПринятоКНалоговомуУчету = СуммаСписанияЗаМесяц - ПринятоКНалоговомуУчету;
						Если НеПринятоКНалоговомуУчету > 0 Тогда
							Операция.НоваяПроводка(); Операция.РазделительУчета = ЮрЛицо;
							Операция.НомерЖурнала = "ПР";
							Операция.СодержаниеПроводки = "Не принимаемые расходы";
							Операция.Дебет.Счет = СчетПоКоду("НПР.97");
							Операция.Дебет.РасходыБудущихПериодов = СтатьяРасходовБудущихПериодов;
							Операция.Сумма = НеПринятоКНалоговомуУчету;  
							ВсегоПостоянныхРазниц = ОстатокРасходовБудущихПериодов;
						КонецЕсли;
					КонецЕсли; 
				КонецЕсли;
			КонецЕсли;

			Если СуммаСписанияЗаМесяц > 0 Тогда
				Операция.НоваяПроводка(); Операция.РазделительУчета = ЮрЛицо;
				Операция.НомерЖурнала = "ФР";
				Операция.СодержаниеПроводки = "РБП за " + ПериодСтр(ДатаНач, ДатаКон);
				Операция.ПервичныйДокумент  = глПредставлениеПервичногоДокумента(Контекст);
				Операция.Дебет.Счет = СтатьяРасходовБудущихПериодов.СчетЗатрат;
				Операция.Дебет.Субконто(1, СтатьяРасходовБудущихПериодов.Субконто1);
				Операция.Дебет.Субконто(2, СтатьяРасходовБудущихПериодов.Субконто2);
				Операция.Дебет.Субконто(3, СтатьяРасходовБудущихПериодов.Субконто3);
				Операция.Кредит.Счет = Сч97;
				Операция.Кредит.РасходыБудущихПериодов = СтатьяРасходовБудущихПериодов;
				Операция.Сумма = СуммаСписанияЗаМесяц;
				
				// Отражение постоянных разниц
				Если ВыполнятьДвиженияПоСчетуНПР = Да Тогда
					СписатьПостоянныхРазниц = ?(НеПринятоКНалоговомуУчету = 0,Окр(ВсегоПостоянныхРазниц*СуммаСписанияЗаМесяц/ОстатокРасходовБудущихПериодов, 2),НеПринятоКНалоговомуУчету);
					ВсегоПостоянныхРазниц = ВсегоПостоянныхРазниц - СписатьПостоянныхРазниц;
					Если СписатьПостоянныхРазниц <> 0 Тогда
						СчетНПР = глПолучитьСчетДебетаНПР(СтатьяРасходовБудущихПериодов.СчетЗатрат, СтатьяРасходовБудущихПериодов.Субконто1);
						
						Операция.НоваяПроводка(); Операция.РазделительУчета = ЮрЛицо;
						Операция.НомерЖурнала = "ПР";
						Операция.СодержаниеПроводки = "РБП за " + ПериодСтр(ДатаНач, ДатаКон);
						Если ПустоеЗначение(СчетНПР) = 0 Тогда
							Операция.Дебет.Счет = СчетНПР;
							Операция.Дебет.Субконто(1, СтатьяРасходовБудущихПериодов.Субконто1);
							Операция.Дебет.Субконто(2, СтатьяРасходовБудущихПериодов.Субконто2);
							Операция.Дебет.Субконто(3, СтатьяРасходовБудущихПериодов.Субконто3);
						КонецЕсли;
						Операция.Кредит.Счет = СчетПоКоду("НПР.97");
						Операция.Кредит.РасходыБудущихПериодов = СтатьяРасходовБудущихПериодов;
						Операция.Сумма = СписатьПостоянныхРазниц;
					КонецЕсли;
				КонецЕсли;
				
				ОстатокРасходовБудущихПериодов = ОстатокРасходовБудущихПериодов - СуммаСписанияЗаМесяц;
			КонецЕсли;
			
			Если СтатьяРасходовБудущихПериодов.НазначениеСтатьиРасходов = 1 Тогда // оплата труда
				// ЕСН
				Субк[1] = СтатьяРасходовБудущихПериодов.Субконто1;
				Субк[2] = СтатьяРасходовБудущихПериодов.Субконто2;
				Субк[3] = СтатьяРасходовБудущихПериодов.Субконто3;
				НомерСубконто = МожноВыбиратьСтатьюОтчислений(СтатьяРасходовБудущихПериодов.СчетЗатрат);
				Если НомерСубконто <> 0 Тогда
				    Субк[НомерСубконто] = СтатьяРасходовБудущихПериодов.СтатьяОтчисленийНаСоцНужды;
				КонецЕсли;
				
				СуммаСписанияЗаМесяцЕСН = Мин(СуммаСписанияЗаМесяцЕСН, ОстатокРасходовБудущихПериодов);
				Если СуммаСписанияЗаМесяцЕСН > 0 Тогда
					Операция.НоваяПроводка(); Операция.РазделительУчета = ЮрЛицо;
					Операция.НомерЖурнала = "ФР";
					Операция.СодержаниеПроводки = "РБП за " + ПериодСтр(ДатаНач, ДатаКон);
					Операция.ПервичныйДокумент  = глПредставлениеПервичногоДокумента(Контекст);
					Операция.Дебет.Счет = СтатьяРасходовБудущихПериодов.СчетЗатрат;
					Операция.Дебет.Субконто(1, Субк[1]);
					Операция.Дебет.Субконто(2, Субк[2]);
					Операция.Дебет.Субконто(3, Субк[3]);
					Операция.Кредит.Счет = Сч97;
					Операция.Кредит.РасходыБудущихПериодов = СтатьяРасходовБудущихПериодов;
					Операция.Сумма = СуммаСписанияЗаМесяцЕСН;
					
					// Отражение постоянных разниц
					Если ВыполнятьДвиженияПоСчетуНПР = Да Тогда
						СписатьПостоянныхРазниц = Окр(ВсегоПостоянныхРазниц*СуммаСписанияЗаМесяцЕСН/ОстатокРасходовБудущихПериодов, 2);
						ВсегоПостоянныхРазниц = ВсегоПостоянныхРазниц - СписатьПостоянныхРазниц;
						Если СписатьПостоянныхРазниц <> 0 Тогда
							СчетНПР = глПолучитьСчетДебетаНПР(СтатьяРасходовБудущихПериодов.СчетЗатрат, Субк[1]);
							
							Операция.НоваяПроводка(); Операция.РазделительУчета = ЮрЛицо;
							Операция.НомерЖурнала = "ПР";
							Операция.СодержаниеПроводки = "РБП за " + ПериодСтр(ДатаНач, ДатаКон);
							Если ПустоеЗначение(СчетНПР) = 0 Тогда
								Операция.Дебет.Счет = СчетНПР;
								Операция.Дебет.Субконто(1, Субк[1]);
								Операция.Дебет.Субконто(2, Субк[2]);
								Операция.Дебет.Субконто(3, Субк[3]);
							КонецЕсли;
							Операция.Кредит.Счет = СчетПоКоду("НПР.97");
							Операция.Кредит.РасходыБудущихПериодов = СтатьяРасходовБудущихПериодов;
							Операция.Сумма = СписатьПостоянныхРазниц;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
				ОстатокРасходовБудущихПериодов = ОстатокРасходовБудущихПериодов - СуммаСписанияЗаМесяцЕСН;
				
				// Взносы.
				Если НомерСубконто <> 0 Тогда
				    Субк[НомерСубконто] = СтатьяРасходовБудущихПериодов.СтатьяПрочихОтчисленийНаСоцНужды;
				КонецЕсли;
				
				СуммаСписанияЗаМесяцПрочиеНалоги = Мин(СуммаСписанияЗаМесяцПрочиеНалоги, ОстатокРасходовБудущихПериодов);
				Если СуммаСписанияЗаМесяцПрочиеНалоги > 0 Тогда
					Операция.НоваяПроводка(); Операция.РазделительУчета = ЮрЛицо;
					Операция.НомерЖурнала = "ФР";
					Операция.СодержаниеПроводки = "РБП за " + ПериодСтр(ДатаНач, ДатаКон);
					Операция.ПервичныйДокумент  = глПредставлениеПервичногоДокумента(Контекст);
					Операция.Дебет.Счет = СтатьяРасходовБудущихПериодов.СчетЗатрат;
					Операция.Дебет.Субконто(1, Субк[1]);
					Операция.Дебет.Субконто(2, Субк[2]);
					Операция.Дебет.Субконто(3, Субк[3]);
					Операция.Кредит.Счет = Сч97;
					Операция.Кредит.РасходыБудущихПериодов = СтатьяРасходовБудущихПериодов;
					Операция.Сумма = СуммаСписанияЗаМесяцПрочиеНалоги;
					
					// Отражение постоянных разниц
					Если ВыполнятьДвиженияПоСчетуНПР = Да Тогда
						СписатьПостоянныхРазниц = Окр(ВсегоПостоянныхРазниц*СуммаСписанияЗаМесяцПрочиеНалоги/ОстатокРасходовБудущихПериодов, 2);
						ВсегоПостоянныхРазниц = ВсегоПостоянныхРазниц - СписатьПостоянныхРазниц;
						Если СписатьПостоянныхРазниц <> 0 Тогда
							СчетНПР = глПолучитьСчетДебетаНПР(СтатьяРасходовБудущихПериодов.СчетЗатрат, Субк[1]);
							
							Операция.НоваяПроводка(); Операция.РазделительУчета = ЮрЛицо;
							Операция.НомерЖурнала = "ПР";
							Операция.СодержаниеПроводки = "РБП за " + ПериодСтр(ДатаНач, ДатаКон);
							Если ПустоеЗначение(СчетНПР) = 0 Тогда
								Операция.Дебет.Счет = СчетНПР;
								Операция.Дебет.Субконто(1, Субк[1]);
								Операция.Дебет.Субконто(2, Субк[2]);
								Операция.Дебет.Субконто(3, Субк[3]);
							КонецЕсли;
							Операция.Кредит.Счет = СчетПоКоду("НПР.97");
							Операция.Кредит.РасходыБудущихПериодов = СтатьяРасходовБудущихПериодов;
							Операция.Сумма = СписатьПостоянныхРазниц;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
			// Формирование печатной формы
			Если ФормироватьПечатнуюФорму = 1 Тогда
				
				Если СтатьяРасходовБудущихПериодов.НазначениеСтатьиРасходов = 1 Тогда // оплата труда
					ТаблицаРасшифровка = ТаблицаРасшифровкаРегламентнойОперацииДополнительно;
					
					ТаблицаРасшифровка.НоваяСтрока();
					ТаблицаРасшифровка.ЕСН_ФБ = СтатьяРасходовБудущихПериодов.СуммаЕСН_ФБ;
					ТаблицаРасшифровка.ФСС = СтатьяРасходовБудущихПериодов.СуммаФСС;
					ТаблицаРасшифровка.ФФОМС = СтатьяРасходовБудущихПериодов.СуммаФФОМС;
					ТаблицаРасшифровка.ТФОМС = СтатьяРасходовБудущихПериодов.СуммаТФОМС;
					ТаблицаРасшифровка.ВсегоЕСН = ОбщаяСуммаСписанияЕСН;
					ТаблицаРасшифровка.СуммаСписанияЕСН = СуммаСписанияЗаМесяцЕСН;
					ТаблицаРасшифровка.ПФР_страх = СтатьяРасходовБудущихПериодов.СуммаПФР_страх;
					ТаблицаРасшифровка.ПФР_нак = СтатьяРасходовБудущихПериодов.СуммаПФР_нак;
					ТаблицаРасшифровка.ФСС_НС = СтатьяРасходовБудущихПериодов.СуммаФСС_НС;
					ТаблицаРасшифровка.ВсегоПрочихОтчислений = ОбщаяСуммаСписанияПричиеНалоги;
					ТаблицаРасшифровка.СуммаСписанияПрочая = СуммаСписанияЗаМесяцПрочиеНалоги;
					
				Иначе
					ТаблицаРасшифровка = ТаблицаРасшифровкаРегламентнойОперации;
					ТаблицаРасшифровка.НоваяСтрока();
				КонецЕсли;
				
				ТаблицаРасшифровка.СтатьяРБП          = СтатьяРасходовБудущихПериодов;
				ТаблицаРасшифровка.Счет               = СтатьяРасходовБудущихПериодов.СчетЗатрат;
				ТаблицаРасшифровка.Субконто1          = СтатьяРасходовБудущихПериодов.Субконто1;
				ТаблицаРасшифровка.Субконто2          = СтатьяРасходовБудущихПериодов.Субконто2;
				ТаблицаРасшифровка.Субконто3          = СтатьяРасходовБудущихПериодов.Субконто3;
				ТаблицаРасшифровка.ДатаНачала         = СтатьяРасходовБудущихПериодов.ДатаНачалаСписания;
				ТаблицаРасшифровка.ДатаОкончания      = СтатьяРасходовБудущихПериодов.ДатаОкончанияСписания;
				ТаблицаРасшифровка.ОбщаяСуммаРасходов = СтатьяРасходовБудущихПериодов.Сумма;
				ТаблицаРасшифровка.ОстатокНаКонец     = БухИт97.СКД();
				ТаблицаРасшифровка.СуммаСписания      = СуммаСписанияЗаМесяц;
				
				Расшифровка = СоздатьОбъект("СписокЗначений");
				ОсновнаяРасшифровкаОСВ.Выгрузить(Расшифровка);
				Расшифровка.Установить("Счет", Сч97);
				Расшифровка.Установить("ВидСубконто1", ВидыСубконто.РасходыБудущихПериодов);
				Расшифровка.Установить("Субконто1", СтатьяРасходовБудущихПериодов);
				Расшифровка.Установить("ОтборСубконто1", 1);
				ТаблицаРасшифровка.РасшифровкаОборотноСальдоваяВедомостьПоСчету = Расшифровка;
			КонецЕсли;
		КонецЦикла;
		
		// Формирование печатной формы
		Если ФормироватьПечатнуюФорму = 1 Тогда
			Если ТаблицаРасшифровкаРегламентнойОперации.КоличествоСтрок() > 0 Тогда
				Расшифровка = СоздатьОбъект("СписокЗначений");
				Расшифровка.ДобавитьЗначение("ЗакрытиеСчета97_1", "Наименование таблицы");
				Расшифровка.ДобавитьЗначение(ТаблицаРасшифровкаРегламентнойОперации, "Таблица данных");
				Расшифровка.ДобавитьЗначение(ДатаДок, "Дата операции");
				
				НаименованиеРегламентнойПодоперации = "Закрытие счета 97 (кроме статей расходов будущих периодов по оплате труда)";
				Таб.ВывестиСекцию("ПодоперацияВыполнена");
			КонецЕсли;
			
			Если ТаблицаРасшифровкаРегламентнойОперацииДополнительно.КоличествоСтрок() > 0 Тогда
				Расшифровка = СоздатьОбъект("СписокЗначений");
				Расшифровка.ДобавитьЗначение("ЗакрытиеСчета97_2", "Наименование таблицы");
				Расшифровка.ДобавитьЗначение(ТаблицаРасшифровкаРегламентнойОперацииДополнительно, "Таблица данных");
				Расшифровка.ДобавитьЗначение(ДатаДок, "Дата операции");
				
				НаименованиеРегламентнойПодоперации = "Закрытие счета 97 (статьи расходов будущих периодов по расходам на оплату труда)";
				Таб.ВывестиСекцию("ПодоперацияВыполнена");
			КонецЕсли;
		КонецЕсли;
		
	Иначе
		// Формирование печатной формы
		Если ФормироватьПечатнуюФорму = 1 Тогда
			НаименованиеРегламентнойПодоперации = "По счету 97 ""Расходы будущих периодов"" расходов нет";
			Таб.ВывестиСекцию("ПодоперацияНеВыполнена");
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ЗакрытиеСчета97()

//******************************************************************************
// ЗакрытиеСчета25()
//
// Параметры:
//  Нет.
//
// Вызывается из формул элементов диалога:
//  Нет.
//
// Описание:
//  Здесь описывается процедура.
//
Процедура ЗакрытиеСчета25()
	
	Сч10 = СчетПоКоду("10");
	Сч20 = СчетПоКоду("20");
	Сч25 = СчетПоКоду("25");
	Сч70 = СчетПоКоду("70");
	Сч90 = СчетПоКоду("90");
	Сч90_1 = СчетПоКоду("90.1");
	Сч90_3 = СчетПоКоду("90.3");
	Сч90_4 = СчетПоКоду("90.4");
	Сч90_5 = СчетПоКоду("90.5");
	Сч90_6 = СчетПоКоду("90.6");
	
	// Если ранее на счет 25 были отнесены расходы,
	// то проводки документа следует записать.
	Если Операция.КоличествоПроводок() > 0 Тогда
		Операция.ЗаписатьПроводки();
	КонецЕсли;
	
	// Формирование печатной формы
	Если ФормироватьПечатнуюФорму = 1 Тогда
		НаименованиеРегламентнойОперации = "Закрытие счета 25 ""Общепроизводственные расходы""";
		Таб.ВывестиСекцию("РегламентнаяОперация");
		ИнициализироватьРасшифровкуПоЗакрытиюСчета25();
	КонецЕсли;
	
	Если БухИтЗаМесяц.ДО(Сч25) - БухИтЗаМесяц.КО(Сч25) > 0 Тогда
		БазаРаспределенияКосвенныхРасходов = Константа.БазаРаспределенияКосвенныхРасходов.Получить(ДатаКон);
		Если ПустоеЗначение(БазаРаспределенияКосвенныхРасходов) = 1 Тогда
			ТекстСообщения = "Не указана база распределения косвенных расходов (""Сервис - Учетная политика""). Счет 25 не может быть закрыт.";
			глНеПроводить(Контекст, ТекстСообщения, "Обработка.УчетнаяПолитика");
			Возврат;
		КонецЕсли;
		
		Если БазаРаспределенияКосвенныхРасходов = Перечисление.БазаРаспределенияКосвенныхРасходов.Выручка Тогда
			
			ОбщаяТаблицаБазыРаспределения = СоздатьОбъект("ТаблицаЗначений");
			ОбщаяТаблицаБазыРаспределения.НоваяКолонка("ВидНоменклатуры");
			ОбщаяТаблицаБазыРаспределения.НоваяКолонка("БазаРаспределения", "Число");
			
			// Формирование печатной формы
			Если ФормироватьПечатнуюФорму = 1 Тогда
				                                                                                                          
				// колонки для расшифровок
				ОбщаяТаблицаБазыРаспределения.НоваяКолонка("РасшифровкаБазыРаспределенияПоВидуНоменклатуры", "СписокЗначений");
			КонецЕсли;
		
			БухИт90 = СоздатьОбъект("БухгалтерскиеИтоги"); БухИт90.ИспользоватьРазделительУчета(ЮрЛицо);
			БухИт90.ИспользоватьСубконто(ВидыСубконто.ВидыНоменклатуры,,,);
			БухИт90.ВключатьСубсчета(1, 0);
			БухИт90.ВыполнитьЗапрос(ДатаНач, ДатаКон, Сч90,,,,,);
			БухИт90.ВыбратьСубконто(ВидыСубконто.ВидыНоменклатуры);
			Пока БухИт90.ПолучитьСубконто(ВидыСубконто.ВидыНоменклатуры) = 1 Цикл
				Если (БухИт90.Субконто(ВидыСубконто.ВидыНоменклатуры).ТипНоменклатуры = Перечисление.ТипыНоменклатуры.Товар)
					или (БухИт90.Субконто(ВидыСубконто.ВидыНоменклатуры).ТипНоменклатуры = Перечисление.ТипыНоменклатуры.ПосредническаяУслуга) Тогда
					Продолжить;
				КонецЕсли;
				
				Выручка = 0;
				Если БухИт90.ПолучитьСчет(, Сч90_1) = 1 Тогда
					Выручка = БухИт90.КО();
				Иначе
					Выручка = 0;
				КонецЕсли;
				Если БухИт90.ПолучитьСчет(, Сч90_3) = 1 Тогда
				    Выручка = Выручка - БухИт90.ДО();
				КонецЕсли;
				Если БухИт90.ПолучитьСчет(, Сч90_4) = 1 Тогда
				    Выручка = Выручка - БухИт90.ДО();
				КонецЕсли;
				Если БухИт90.ПолучитьСчет(, Сч90_5) = 1 Тогда
				    Выручка = Выручка - БухИт90.ДО();
				КонецЕсли;
				Если БухИт90.ПолучитьСчет(, Сч90_6) = 1 Тогда
				    Выручка = Выручка - БухИт90.ДО();
				КонецЕсли;
				
				Если Выручка > 0 Тогда
				    ОбщаяТаблицаБазыРаспределения.НоваяСтрока();
					ОбщаяТаблицаБазыРаспределения.ВидНоменклатуры = БухИт90.Субконто(ВидыСубконто.ВидыНоменклатуры);
					ОбщаяТаблицаБазыРаспределения.БазаРаспределения = Выручка;
					
					// Формирование печатной формы
					Если ФормироватьПечатнуюФорму = 1 Тогда
						ОбщаяТаблицаБазыРаспределения.РасшифровкаБазыРаспределенияПоВидуНоменклатуры = РасшифровкаБазаРаспредленияПоВыручке(БухИт90, Выручка);
					КонецЕсли;
				КонецЕсли;
				
			КонецЦикла;
			БазаРаспределения = ОбщаяТаблицаБазыРаспределения.Итог("БазаРаспределения");
            ТекстБазаРаспредения = "выручка, отраженная  по кредиту счета 90.1 за минусом налогов";
			
		ИначеЕсли БазаРаспределенияКосвенныхРасходов = Перечисление.БазаРаспределенияКосвенныхРасходов.ЗарплатаПроизводственныхРабочих Тогда
			БухИт20 = СоздатьОбъект("БухгалтерскиеИтоги"); БухИт20.ИспользоватьРазделительУчета(ЮрЛицо);
			БухИт20.ИспользоватьСубконто(ВидыСубконто.Подразделения,,,);
			БухИт20.ИспользоватьСубконто(ВидыСубконто.ВидыНоменклатуры,,,);
			БухИт20.ВключатьСубсчета(0, 0);
			БухИт20.ВыполнитьЗапрос(ДатаНач, ДатаКон, Сч20, Сч70,, 2,,);
			ТекстБазаРаспредения = "затраты, отнесенные в дебет счета 20 с кредита счета 70";

		ИначеЕсли БазаРаспределенияКосвенныхРасходов = Перечисление.БазаРаспределенияКосвенныхРасходов.МатериальныеЗатраты Тогда
			БухИт20 = СоздатьОбъект("БухгалтерскиеИтоги"); БухИт20.ИспользоватьРазделительУчета(ЮрЛицо);
			БухИт20.ИспользоватьСубконто(ВидыСубконто.Подразделения,,,);
			БухИт20.ИспользоватьСубконто(ВидыСубконто.ВидыНоменклатуры,,,);
			БухИт20.ВключатьСубсчета(0, 0);
			БухИт20.ВыполнитьЗапрос(ДатаНач, ДатаКон, Сч20, Сч10,, 2,,); 
			ТекстБазаРаспредения = "затраты, отнесенные в дебет счета 20 с кредита счета 10";

		ИначеЕсли БазаРаспределенияКосвенныхРасходов = Перечисление.БазаРаспределенияКосвенныхРасходов.СуммаПрямыхЗатрат Тогда
			БухИт20 = СоздатьОбъект("БухгалтерскиеИтоги"); БухИт20.ИспользоватьРазделительУчета(ЮрЛицо);
			БухИт20.ИспользоватьСубконто(ВидыСубконто.Подразделения,,,);
			БухИт20.ИспользоватьСубконто(ВидыСубконто.ВидыНоменклатуры,,,);
			БухИт20.ВключатьСубсчета(0, 0);
			БухИт20.ВыполнитьЗапрос(ДатаНач, ДатаКон, Сч20,,,,,);
			ТекстБазаРаспредения = "сумма затрат, отнесенных в дебет счета 20";

		ИначеЕсли БазаРаспределенияКосвенныхРасходов = Перечисление.БазаРаспределенияКосвенныхРасходов.ОтдельныеСтатьиПрямыхЗатрат Тогда
			БухИт20 = СоздатьОбъект("БухгалтерскиеИтоги"); БухИт20.ИспользоватьРазделительУчета(ЮрЛицо);
			БухИт20.ИспользоватьСубконто(ВидыСубконто.Подразделения,,,);
			БухИт20.ИспользоватьСубконто(ВидыСубконто.ВидыНоменклатуры,,,);
			БухИт20.ИспользоватьСубконто(ВидыСубконто.СтатьиЗатратНаПроизводство,,,);
			БухИт20.ВключатьСубсчета(0, 0);
			БухИт20.ВыполнитьЗапрос(ДатаНач, ДатаКон, Сч20,,,,,);
			ТекстБазаРаспредения = "отдельные статьи затрат, отнесенных в дебет счета 20";
		КонецЕсли;
		
		ТекстСообщения = "Закрытие счета 25. База распределения - " + ТекстБазаРаспредения;
		глСообщениеПроведения(ТекстСообщения, ТекущийДокумент(), 0);

		//Общепроизводственные затраты списываются строго по подразделениям
		БухИт25 = СоздатьОбъект("БухгалтерскиеИтоги"); БухИт25.ИспользоватьРазделительУчета(ЮрЛицо);
		БухИт25.ИспользоватьСубконто(ВидыСубконто.Подразделения,,,);
		БухИт25.ИспользоватьСубконто(ВидыСубконто.СтатьиОбщепроизводственныхЗатрат,,,);
		БухИт25.ВыполнитьЗапрос(ДатаНач, ДатаКон, Сч25,,,,,);
		БухИт25.ВыбратьСубконто(ВидыСубконто.Подразделения);
		Пока БухИт25.ПолучитьСубконто(ВидыСубконто.Подразделения) = 1 Цикл
			СуммаСписания = БухИт25.ДО() - БухИт25.КО();
			Если СуммаСписания = 0 Тогда
				Продолжить;
			КонецЕсли;
            
			// Рассчитаем постоянные разницы
			ПостоянныеРазницы = СуммаПостоянныхРазниц(БухИт25,, БухИт25.Субконто(ВидыСубконто.Подразделения));
			
			ТаблицаБазыРаспределения = СоздатьОбъект("ТаблицаЗначений");
			
			Если БазаРаспределенияКосвенныхРасходов <> Перечисление.БазаРаспределенияКосвенныхРасходов.Выручка Тогда
				
				ТаблицаБазыРаспределения.НоваяКолонка("ВидНоменклатуры");
				ТаблицаБазыРаспределения.НоваяКолонка("БазаРаспределения", "Число");
				
				// Формирование печатной формы
				Если ФормироватьПечатнуюФорму = 1 Тогда
					// колонки для расшифровок
					ТаблицаБазыРаспределения.НоваяКолонка("РасшифровкаБазыРаспределенияПоВидуНоменклатуры", "СписокЗначений");
				КонецЕсли;
				
				Если БухИт20.ПолучитьСубконто(ВидыСубконто.Подразделения,, БухИт25.Субконто(ВидыСубконто.Подразделения)) = 1 Тогда
					БухИт20.ВыбратьСубконто(ВидыСубконто.ВидыНоменклатуры);
					Пока БухИт20.ПолучитьСубконто(ВидыСубконто.ВидыНоменклатуры) = 1 Цикл
						Если БазаРаспределенияКосвенныхРасходов = Перечисление.БазаРаспределенияКосвенныхРасходов.ОтдельныеСтатьиПрямыхЗатрат Тогда
							
							ТаблицаБазыРаспределения.НоваяСтрока();
							ТаблицаБазыРаспределения.ВидНоменклатуры = БухИт20.Субконто(ВидыСубконто.ВидыНоменклатуры);
							
							// Формирование печатной формы
							Если ФормироватьПечатнуюФорму = 1 Тогда
								ТаблицаБазыРаспределения.РасшифровкаБазыРаспределенияПоВидуНоменклатуры = РасшифровкаПоОтдельнымСтатьямЗатрат();
								ТаблицаОтдельныхСтатейЗатрат = ТаблицаБазыРаспределения.РасшифровкаБазыРаспределенияПоВидуНоменклатуры.Получить("Таблица данных");
							КонецЕсли;
							
							БухИт20.ВыбратьСубконто(ВидыСубконто.СтатьиЗатратНаПроизводство);
							Пока БухИт20.ПолучитьСубконто(ВидыСубконто.СтатьиЗатратНаПроизводство) = 1 Цикл
								Если (БухИт20.Субконто(ВидыСубконто.СтатьиЗатратНаПроизводство).СтатьяВходитВБазуРаспределенияКосвенныхЗатрат.Получить(ДатаКон) = 1) 
										и (БухИт20.ДО() > 0) Тогда
								    
									ТаблицаБазыРаспределения.БазаРаспределения = ТаблицаБазыРаспределения.БазаРаспределения + БухИт20.ДО();
									
									// Формирование печатной формы
									Если ФормироватьПечатнуюФорму = 1 Тогда
										ТаблицаОтдельныхСтатейЗатрат.НоваяСтрока();
										ТаблицаОтдельныхСтатейЗатрат.СтатьяЗатрат = БухИт20.Субконто(ВидыСубконто.СтатьиЗатратНаПроизводство);
										ТаблицаОтдельныхСтатейЗатрат.СуммаРасходов = БухИт20.ДО();
										
										Расшифровка = СоздатьОбъект("СписокЗначений");
										ОсновнаяРасшифровкаОСВ.Выгрузить(Расшифровка);
										Расшифровка.Установить("Счет", Сч20);
										Расшифровка.Установить("ВидСубконто1", ВидыСубконто.СтатьиЗатратНаПроизводство);
										Расшифровка.Установить("Субконто1", БухИт20.Субконто(ВидыСубконто.СтатьиЗатратНаПроизводство));
										Расшифровка.Установить("ОтборСубконто1", 1);
										Расшифровка.Установить("ВидСубконто2", ВидыСубконто.ВидыНоменклатуры);
										Расшифровка.Установить("Субконто2", БухИт20.Субконто(ВидыСубконто.ВидыНоменклатуры));
										Расшифровка.Установить("ОтборСубконто2", 2);
										Расшифровка.Установить("ВидСубконто3", ВидыСубконто.Подразделения);
										Расшифровка.Установить("Субконто3", БухИт20.Субконто(ВидыСубконто.Подразделения));
										Расшифровка.Установить("ОтборСубконто3", 2);
										
										ТаблицаОтдельныхСтатейЗатрат.РасшифровкаОборотноСальдоваяВедомостьПоСчету = Расшифровка;
									КонецЕсли;
								КонецЕсли;
							КонецЦикла;
							                                                   
							// Если по виду номенклатуры не оказалось расходов,
							// входящих в базу распределения, то не рассматриваем
							// такой вид номенклатуры.
							Если ТаблицаБазыРаспределения.БазаРаспределения = 0 Тогда
							    ТаблицаБазыРаспределения.УдалитьСтроку();
							КонецЕсли;
							
						ИначеЕсли БухИт20.ДО() > 0 Тогда
						    ТаблицаБазыРаспределения.НоваяСтрока();
							ТаблицаБазыРаспределения.ВидНоменклатуры = БухИт20.Субконто(ВидыСубконто.ВидыНоменклатуры);
							ТаблицаБазыРаспределения.БазаРаспределения = БухИт20.ДО();
							
							// Формирование печатной формы
							Если ФормироватьПечатнуюФорму = 1 Тогда
								
								Расшифровка = СоздатьОбъект("СписокЗначений");
								ОсновнаяРасшифровкаОПП.Выгрузить(Расшифровка);
								
								Расшифровка.Установить("ДтКт", 1);
								
								Расшифровка.Установить("Счет", Сч20);
								Расшифровка.Установить("ВидСубконто1", ВидыСубконто.ВидыНоменклатуры);
								Расшифровка.Установить("Субконто1",    БухИт20.Субконто(ВидыСубконто.ВидыНоменклатуры));
								Расшифровка.Установить("ОтборСубконто1", 1);
								Расшифровка.Установить("ВидСубконто3", ВидыСубконто.Подразделения);
								Расшифровка.Установить("Субконто3",    БухИт20.Субконто(ВидыСубконто.Подразделения));
								Расшифровка.Установить("ОтборСубконто3", 2);
								
								Расшифровка.Установить("КорСчет", БухИт20.КорСчет);
								ТаблицаБазыРаспределения.РасшифровкаБазыРаспределенияПоВидуНоменклатуры = Расшифровка;
							КонецЕсли;	
							
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
				
				//Определяем базу распределения по подразделению в целом
				БазаРаспределения = ТаблицаБазыРаспределения.Итог("БазаРаспределения");
				
			Иначе // База распределение - выручка
				ОбщаяТаблицаБазыРаспределения.Выгрузить(ТаблицаБазыРаспределения);
			КонецЕсли;
			
			// Формирование печатной формы
			Если ФормироватьПечатнуюФорму = 1 Тогда
				ТаблицаБазыРаспределения.НоваяКолонка("ВсегоРасходов", "Число");
				ТаблицаБазыРаспределения.НоваяКолонка("Коэффициент", "Число");
				ТаблицаБазыРаспределения.НоваяКолонка("СуммаРасходов", "Число");

				// колонки для расшифровок
				ТаблицаБазыРаспределения.НоваяКолонка("РасшифровкаОборотноСальдоваяВедомостьПоСчету", "СписокЗначений");
			КонецЕсли;
			
			Если БазаРаспределения > 0 Тогда
				
				// Формирование печатной формы                                            	
				Если ФормироватьПечатнуюФорму = 1 Тогда
					ТаблицаРасшифровкаРегламентнойОперации.НоваяСтрока();
					ТаблицаРасшифровкаРегламентнойОперации.Подразделение = БухИт25.Субконто(ВидыСубконто.Подразделения);
					ТаблицаРасшифровкаРегламентнойОперации.СуммаРасходов = СуммаСписания;
					ТаблицаРасшифровкаРегламентнойОперации.БазаРаспределения = БазаРаспределения;
					ТаблицаРасшифровкаРегламентнойОперации.СуммаСписания = СуммаСписания;
					
					// формирование расшифровки
					РасшифровкаПоПодразделению = СоздатьОбъект("СписокЗначений");
					ОсновнаяРасшифровкаОСВ.Выгрузить(РасшифровкаПоПодразделению);
					РасшифровкаПоПодразделению.Установить("Счет", Сч25);
					РасшифровкаПоПодразделению.Установить("ВидСубконто1", ВидыСубконто.Подразделения);
					РасшифровкаПоПодразделению.Установить("Субконто1", БухИт25.Субконто(ВидыСубконто.Подразделения));
					РасшифровкаПоПодразделению.Установить("ОтборСубконто1", 1);
					ТаблицаРасшифровкаРегламентнойОперации.РасшифровкаОборотноСальдоваяВедомостьПоСчету = РасшифровкаПоПодразделению;
					
					Расшифровка = СоздатьОбъект("СписокЗначений");
					Расшифровка.ДобавитьЗначение("ТаблицаРасшифровкаБазаРаспределения", "Наименование таблицы");
					Расшифровка.ДобавитьЗначение(ТаблицаБазыРаспределения, "Таблица данных");
					Расшифровка.ДобавитьЗначение(ДатаДок, "Дата операции");
					Расшифровка.ДобавитьЗначение(БухИт25.Субконто(ВидыСубконто.Подразделения), "Дополнительные данные");
					ТаблицаРасшифровкаРегламентнойОперации.РасшифровкаБазаРаспределения = Расшифровка;
				КонецЕсли;
				
				//Списываем общепроизводственные затраты на счет 20
				Списано = 0;
				УчтеноБазыРаспределения = 0; 
				СписаноПостоянныхРазниц = 0;
				ТаблицаБазыРаспределения.ВыбратьСтроки();
				Пока ТаблицаБазыРаспределения.ПолучитьСтроку() = 1 Цикл
					Коэффициент = ТаблицаБазыРаспределения.БазаРаспределения / БазаРаспределения;
					
					Операция.НоваяПроводка(); Операция.РазделительУчета = ЮрЛицо;
					Операция.НомерЖурнала = "ФР";
					Операция.СодержаниеПроводки = "Списание счета 25";
					Операция.ПервичныйДокумент  = глПредставлениеПервичногоДокумента(Контекст);
					Операция.Дебет.Счет = Сч20;
					Операция.Дебет.Подразделения = БухИт25.Субконто(ВидыСубконто.Подразделения);
					Операция.Дебет.ВидыНоменклатуры = ТаблицаБазыРаспределения.ВидНоменклатуры;
					Операция.Дебет.СтатьиЗатратНаПроизводство = СтатьяЗатратНаПроизводство("Общепроизводственные затраты");
					Операция.Кредит.Счет = Сч25;
					Операция.Кредит.Подразделения = БухИт25.Субконто(ВидыСубконто.Подразделения);
					Операция.Сумма = СуммаСписания * Коэффициент;
				    Списано = Списано + Операция.Сумма;
					Если (ТаблицаБазыРаспределения.НомерСтроки = ТаблицаБазыРаспределения.КоличествоСтрок())
							и (Списано <> СуммаСписания) Тогда
					    Операция.Сумма = Операция.Сумма + СуммаСписания - Списано;
					КонецЕсли;
					
					// Формирование печатной формы                                            	
					Если ФормироватьПечатнуюФорму = 1 Тогда
						ТаблицаБазыРаспределения.ВсегоРасходов = СуммаСписания;
						ТаблицаБазыРаспределения.Коэффициент = Коэффициент;
						ТаблицаБазыРаспределения.СуммаРасходов = Операция.Сумма;
						ТаблицаБазыРаспределения.РасшифровкаОборотноСальдоваяВедомостьПоСчету = РасшифровкаПоПодразделению;
					КонецЕсли;
					
					// Списание постоянных разниц.
					Если ПостоянныеРазницы <> 0 Тогда
						УчтеноБазыРаспределения = УчтеноБазыРаспределения + ТаблицаБазыРаспределения.БазаРаспределения;
						ДолжноБытьСписано  = ПостоянныеРазницы * УчтеноБазыРаспределения / БазаРаспределения;
						СписатьПР = ДолжноБытьСписано - СписаноПостоянныхРазниц;
						Если СписатьПР <> 0 Тогда
							
							СчетНПР = глПолучитьСчетДебетаНПР(Операция.Дебет.Счет, Операция.Дебет.ВидыНоменклатуры);
						
							Операция.НоваяПроводка(); Операция.РазделительУчета = ЮрЛицо;
							Операция.НомерЖурнала = "ПР";
							Операция.СодержаниеПроводки = "Списание постоянных налоговых разниц";
							Если ПустоеЗначение(СчетНПР) = 0 Тогда
								Операция.Дебет.Счет = СчетНПР;    
								Операция.Дебет.Подразделения = БухИт25.Субконто(ВидыСубконто.Подразделения);
								Операция.Дебет.ВидыНоменклатуры = ТаблицаБазыРаспределения.ВидНоменклатуры;
								Операция.Дебет.СтатьиЗатратНаПроизводство = СтатьяЗатратНаПроизводство("Общепроизводственные затраты");
							КонецЕсли;
							Операция.Кредит.Счет = СчетПоКоду("НПР.25");
							Операция.Кредит.Подразделения = БухИт25.Субконто(ВидыСубконто.Подразделения);
							Операция.Сумма = СписатьПР;
							СписаноПостоянныхРазниц = СписаноПостоянныхРазниц + Операция.Сумма;
						КонецЕсли;
					    
					КонецЕсли;
				КонецЦикла;
				
			Иначе
				ТекстСообщения = "Счет 25 автоматически закрыть невозможно, т.к. база распределения расходов по подразделению " + БухИт25.Субконто(ВидыСубконто.Подразделения) + " равна нулю.
							     |База распределения - " + ТекстБазаРаспредения;
				глНеПроводить(Контекст, ТекстСообщения);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	// Формирование печатной формы
	Если ФормироватьПечатнуюФорму = 1 Тогда
                                     
		Если ТаблицаРасшифровкаРегламентнойОперации.КоличествоСтрок() > 0 Тогда
			Расшифровка = СоздатьОбъект("СписокЗначений");
			Расшифровка.ДобавитьЗначение("ЗакрытиеСчета25", "Наименование таблицы");
			Расшифровка.ДобавитьЗначение(ТаблицаРасшифровкаРегламентнойОперации, "Таблица данных");
			Расшифровка.ДобавитьЗначение(ДатаДок, "Дата операции");
			Расшифровка.ДобавитьЗначение(ТекстБазаРаспредения, "Дополнительные данные");
			
			НаименованиеРегламентнойПодоперации = "Закрытие счета 25 ""Общепроизводственные расходы""";
			Таб.ВывестиСекцию("ПодоперацияВыполнена");
			
		Иначе
			НаименованиеРегламентнойПодоперации = "По счету 25 ""Общепроизводственные расходы"" расходов нет";
			Таб.ВывестиСекцию("ПодоперацияНеВыполнена");    
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // ЗакрытиеСчета25()

//******************************************************************************
// БазаРаспределенияДляЗакрытияСчета26(ДиректКостинг, ТекстБазаРаспредения)
//
// Параметры:
//  Нет.
//
// Возвращаемое значение:
//  Здесь описывается возвращаемое значение.
//
// Вызывается из формул элементов диалога:
//  Нет.
//
// Описание:
//  Здесь описывается функция.
//
Функция БазаРаспределенияДляЗакрытияСчета26(ДиректКостинг, ТекстБазаРаспредения)
	
	Сч10 = СчетПоКоду("10");
	Сч20 = СчетПоКоду("20");
	Сч70 = СчетПоКоду("70");
	Сч90 = СчетПоКоду("90");
	Сч90_1 = СчетПоКоду("90.1");
	Сч90_1_1 = СчетПоКоду("90.1.1");
	Сч90_1_2 = СчетПоКоду("90.1.2");
	Сч90_2_1 = СчетПоКоду("90.2.1");
	Сч90_2_2 = СчетПоКоду("90.2.2");
	Сч90_3 = СчетПоКоду("90.3");
	Сч90_4 = СчетПоКоду("90.4");
	Сч90_5 = СчетПоКоду("90.5");
	Сч90_6 = СчетПоКоду("90.6");
	
	ТаблицаБазыРаспределения = СоздатьОбъект("ТаблицаЗначений");
	ТаблицаБазыРаспределения.НоваяКолонка("ВидНоменклатуры");
	ТаблицаБазыРаспределения.НоваяКолонка("БазаРаспределения", "Число");
	
	Если ФормироватьПечатнуюФорму = 1 Тогда
					
		ТаблицаБазыРаспределения.НоваяКолонка("ВсегоРасходов", "Число");
		ТаблицаБазыРаспределения.НоваяКолонка("Коэффициент", "Число");
		ТаблицаБазыРаспределения.НоваяКолонка("СуммаРасходов", "Число");
		ТаблицаБазыРаспределения.НоваяКолонка("СуммаРасходовЕНВД", "Число");
		
		// расшифровки
		ТаблицаБазыРаспределения.НоваяКолонка("РасшифровкаОборотноСальдоваяВедомостьПоСчету", "СписокЗначений");
		ТаблицаБазыРаспределения.НоваяКолонка("РасшифровкаБазыРаспределенияПоВидуНоменклатуры", "СписокЗначений");
	КонецЕсли;
	
	Если ДиректКостинг <> Да Тогда //Общехозяйственные затраты списываются на счет 20
		
		//Определяем базу распределения общехозяйственных затрат 
		//в разрезе видов номенклатуры и подразделений
		БазаРаспределенияКосвенныхРасходов = Константа.БазаРаспределенияКосвенныхРасходов.Получить(ДатаКон);
		Если ПустоеЗначение(БазаРаспределенияКосвенныхРасходов) = 1 Тогда
			ТекстСообщения = "Не указана база распределения косвенных расходов (""Сервис - Учетная политика""). Счет 26 не может быть закрыт.";
			глНеПроводить(Контекст, ТекстСообщения, "Обработка.УчетнаяПолитика");
			Возврат 0;
		КонецЕсли;
		
		ТаблицаБазыРаспределения.НоваяКолонка("Подразделение");

		Если БазаРаспределенияКосвенныхРасходов = Перечисление.БазаРаспределенияКосвенныхРасходов.Выручка Тогда
			ТаблицаПодразделений = СоздатьОбъект("ТаблицаЗначений");
			ТаблицаПодразделений.НоваяКолонка("Подразделение");
			ТаблицаПодразделений.НоваяКолонка("ЗатратыПодразделения");
			
			БухИт20 = СоздатьОбъект("БухгалтерскиеИтоги"); БухИт20.ИспользоватьРазделительУчета(ЮрЛицо);
			БухИт20.ИспользоватьСубконто(ВидыСубконто.Подразделения,,,);
			БухИт20.ВыполнитьЗапрос(ДатаНач, ДатаКон, Сч20,,,,,);
			БухИт20.ВыбратьСубконто(ВидыСубконто.Подразделения);
			Пока БухИт20.ПолучитьСубконто(ВидыСубконто.Подразделения) = 1 Цикл
				ЗатратыПодразделения = БухИт20.ДО();
				Если ЗатратыПодразделения > 0 Тогда
				    ТаблицаПодразделений.НоваяСтрока();
					ТаблицаПодразделений.Подразделение = БухИт20.Субконто(ВидыСубконто.Подразделения);
					ТаблицаПодразделений.ЗатратыПодразделения = ЗатратыПодразделения;
				КонецЕсли;
			КонецЦикла;

			ЗатратыВсехПодразделений = ТаблицаПодразделений.Итог("ЗатратыПодразделения");
			Если ЗатратыВсехПодразделений > 0 Тогда
				БухИт90 = СоздатьОбъект("БухгалтерскиеИтоги"); БухИт90.ИспользоватьРазделительУчета(ЮрЛицо);
				БухИт90.ИспользоватьСубконто(ВидыСубконто.ВидыНоменклатуры,,,);
				БухИт90.ВключатьСубсчета(1, 0);
				БухИт90.ВыполнитьЗапрос(ДатаНач, ДатаКон, Сч90,,,,,);
				БухИт90.ВыбратьСубконто(ВидыСубконто.ВидыНоменклатуры);
				Пока БухИт90.ПолучитьСубконто(ВидыСубконто.ВидыНоменклатуры) = 1 Цикл
					Если (БухИт90.Субконто(ВидыСубконто.ВидыНоменклатуры).ТипНоменклатуры = Перечисление.ТипыНоменклатуры.Товар)
						или (БухИт90.Субконто(ВидыСубконто.ВидыНоменклатуры).ТипНоменклатуры = Перечисление.ТипыНоменклатуры.ПосредническаяУслуга) Тогда
						Продолжить;
					КонецЕсли;
					
					Выручка = 0;
					Если БухИт90.ПолучитьСчет(, Сч90_1) = 1 Тогда
						Выручка = БухИт90.КО();
					Иначе
						Выручка = 0;
					КонецЕсли;
					Если БухИт90.ПолучитьСчет(, Сч90_3) = 1 Тогда
					    Выручка = Выручка - БухИт90.ДО();
					КонецЕсли;
					Если БухИт90.ПолучитьСчет(, Сч90_4) = 1 Тогда
					    Выручка = Выручка - БухИт90.ДО();
					КонецЕсли;
					Если БухИт90.ПолучитьСчет(, Сч90_5) = 1 Тогда
					    Выручка = Выручка - БухИт90.ДО();
					КонецЕсли;
					Если БухИт90.ПолучитьСчет(, Сч90_6) = 1 Тогда
					    Выручка = Выручка - БухИт90.ДО();
					КонецЕсли;
					
					Если Выручка > 0 Тогда
						ТаблицаПодразделений.ВыбратьСтроки();
						Пока ТаблицаПодразделений.ПолучитьСтроку() = 1 Цикл
						    ТаблицаБазыРаспределения.НоваяСтрока();
							ТаблицаБазыРаспределения.ВидНоменклатуры = БухИт90.Субконто(ВидыСубконто.ВидыНоменклатуры);
							ТаблицаБазыРаспределения.Подразделение = ТаблицаПодразделений.Подразделение;
							ТаблицаБазыРаспределения.БазаРаспределения = Выручка * ТаблицаПодразделений.ЗатратыПодразделения / ЗатратыВсехПодразделений;
						КонецЦикла;
						
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			БазаРаспределения = ТаблицаБазыРаспределения.Итог("БазаРаспределения");
			ТекстБазаРаспредения = "выручка, отраженная  по кредиту счета 90.1 за минусом налогов";

		ИначеЕсли БазаРаспределенияКосвенныхРасходов = Перечисление.БазаРаспределенияКосвенныхРасходов.ЗарплатаПроизводственныхРабочих Тогда
			БухИт20 = СоздатьОбъект("БухгалтерскиеИтоги"); БухИт20.ИспользоватьРазделительУчета(ЮрЛицо);
			БухИт20.ИспользоватьСубконто(ВидыСубконто.Подразделения,,,);
			БухИт20.ИспользоватьСубконто(ВидыСубконто.ВидыНоменклатуры,,,);
			БухИт20.ВключатьСубсчета(0, 0);
			БухИт20.ВыполнитьЗапрос(ДатаНач, ДатаКон, Сч20, Сч70,, 2,,);
			ТекстБазаРаспредения = "затраты, отнесенные в дебет счета 20 с кредита счета 70";

		ИначеЕсли БазаРаспределенияКосвенныхРасходов = Перечисление.БазаРаспределенияКосвенныхРасходов.МатериальныеЗатраты Тогда
			БухИт20 = СоздатьОбъект("БухгалтерскиеИтоги"); БухИт20.ИспользоватьРазделительУчета(ЮрЛицо);
			БухИт20.ИспользоватьСубконто(ВидыСубконто.Подразделения,,,);
			БухИт20.ИспользоватьСубконто(ВидыСубконто.ВидыНоменклатуры,,,);
			БухИт20.ВключатьСубсчета(0, 0);
			БухИт20.ВыполнитьЗапрос(ДатаНач, ДатаКон, Сч20, Сч10,, 2,,);
			ТекстБазаРаспредения = "затраты, отнесенные в дебет счета 20 с кредита счета 10";

		ИначеЕсли БазаРаспределенияКосвенныхРасходов = Перечисление.БазаРаспределенияКосвенныхРасходов.СуммаПрямыхЗатрат Тогда
			БухИт20 = СоздатьОбъект("БухгалтерскиеИтоги"); БухИт20.ИспользоватьРазделительУчета(ЮрЛицо);
			БухИт20.ИспользоватьСубконто(ВидыСубконто.Подразделения,,,);
			БухИт20.ИспользоватьСубконто(ВидыСубконто.ВидыНоменклатуры,,,);
			БухИт20.ВключатьСубсчета(0, 0);
			БухИт20.ВыполнитьЗапрос(ДатаНач, ДатаКон, Сч20,,,,,);
			ТекстБазаРаспредения = "сумма затрат, отнесенных в дебет счета 20";

		ИначеЕсли БазаРаспределенияКосвенныхРасходов = Перечисление.БазаРаспределенияКосвенныхРасходов.ОтдельныеСтатьиПрямыхЗатрат Тогда
			БухИт20 = СоздатьОбъект("БухгалтерскиеИтоги"); БухИт20.ИспользоватьРазделительУчета(ЮрЛицо);
			БухИт20.ИспользоватьСубконто(ВидыСубконто.Подразделения,,,);
			БухИт20.ИспользоватьСубконто(ВидыСубконто.ВидыНоменклатуры,,,);
			БухИт20.ИспользоватьСубконто(ВидыСубконто.СтатьиЗатратНаПроизводство,,,);
			БухИт20.ВключатьСубсчета(0, 0);
			БухИт20.ВыполнитьЗапрос(ДатаНач, ДатаКон, Сч20,,,,,);
			ТекстБазаРаспредения = "сумма затрат по отдельным статьям, отнесенных в дебет счета 20";
		КонецЕсли;
		
		ТекстСообщения = "Закрытие счета 26. База распределения - " + ТекстБазаРаспредения;
		глСообщениеПроведения(ТекстСообщения, ТекущийДокумент(), 0);

		Если БазаРаспределенияКосвенныхРасходов <> Перечисление.БазаРаспределенияКосвенныхРасходов.Выручка Тогда
			БухИт20.ВыбратьСубконто(ВидыСубконто.Подразделения);
			Пока БухИт20.ПолучитьСубконто(ВидыСубконто.Подразделения) = 1 Цикл
				БухИт20.ВыбратьСубконто(ВидыСубконто.ВидыНоменклатуры);
				Пока БухИт20.ПолучитьСубконто(ВидыСубконто.ВидыНоменклатуры) = 1 Цикл
					Если БазаРаспределенияКосвенныхРасходов = Перечисление.БазаРаспределенияКосвенныхРасходов.ОтдельныеСтатьиПрямыхЗатрат Тогда
						
						ТаблицаБазыРаспределения.НоваяСтрока();
						ТаблицаБазыРаспределения.ВидНоменклатуры = БухИт20.Субконто(ВидыСубконто.ВидыНоменклатуры);
						ТаблицаБазыРаспределения.Подразделение = БухИт20.Субконто(ВидыСубконто.Подразделения);
						
						// Формирование печатной формы
						Если ФормироватьПечатнуюФорму = 1 Тогда
							ТаблицаБазыРаспределения.РасшифровкаБазыРаспределенияПоВидуНоменклатуры = РасшифровкаПоОтдельнымСтатьямЗатрат();
							ТаблицаОтдельныхСтатейЗатрат = ТаблицаБазыРаспределения.РасшифровкаБазыРаспределенияПоВидуНоменклатуры.Получить("Таблица данных");
						КонецЕсли;
						
						БухИт20.ВыбратьСубконто(ВидыСубконто.СтатьиЗатратНаПроизводство);
						Пока БухИт20.ПолучитьСубконто(ВидыСубконто.СтатьиЗатратНаПроизводство) = 1 Цикл
							Если (БухИт20.Субконто(ВидыСубконто.СтатьиЗатратНаПроизводство).СтатьяВходитВБазуРаспределенияКосвенныхЗатрат.Получить(ДатаКон) = 1) 
									и (БухИт20.ДО() > 0) Тогда
								
								ТаблицаБазыРаспределения.БазаРаспределения = ТаблицаБазыРаспределения.БазаРаспределения + БухИт20.ДО();
								
								// Формирование печатной формы
								Если ФормироватьПечатнуюФорму = 1 Тогда
									ТаблицаОтдельныхСтатейЗатрат.НоваяСтрока();
									ТаблицаОтдельныхСтатейЗатрат.СтатьяЗатрат = БухИт20.Субконто(ВидыСубконто.СтатьиЗатратНаПроизводство);
									ТаблицаОтдельныхСтатейЗатрат.СуммаРасходов = БухИт20.ДО();
									
									Расшифровка = СоздатьОбъект("СписокЗначений");
									ОсновнаяРасшифровкаОСВ.Выгрузить(Расшифровка);
									Расшифровка.Установить("Счет", Сч20);
									Расшифровка.Установить("ВидСубконто1", ВидыСубконто.СтатьиЗатратНаПроизводство);
									Расшифровка.Установить("Субконто1", БухИт20.Субконто(ВидыСубконто.СтатьиЗатратНаПроизводство));
									Расшифровка.Установить("ОтборСубконто1", 1);
									Расшифровка.Установить("ВидСубконто2", ВидыСубконто.ВидыНоменклатуры);
									Расшифровка.Установить("Субконто2", БухИт20.Субконто(ВидыСубконто.ВидыНоменклатуры));
									Расшифровка.Установить("ОтборСубконто2", 2);
									Расшифровка.Установить("ВидСубконто3", ВидыСубконто.Подразделения);
									Расшифровка.Установить("Субконто3", БухИт20.Субконто(ВидыСубконто.Подразделения));
									Расшифровка.Установить("ОтборСубконто3", 2);
									
									ТаблицаОтдельныхСтатейЗатрат.РасшифровкаОборотноСальдоваяВедомостьПоСчету = Расшифровка;
								КонецЕсли;
								
							КонецЕсли;
						КонецЦикла;
						
						// Если по виду номенклатуры не оказалось расходов,
						// входящих в базу распределения, то не рассматриваем
						// такой вид номенклатуры.
						Если ТаблицаБазыРаспределения.БазаРаспределения = 0 Тогда
						    ТаблицаБазыРаспределения.УдалитьСтроку();
						КонецЕсли;

					ИначеЕсли БухИт20.ДО() > 0 Тогда
					    ТаблицаБазыРаспределения.НоваяСтрока();
						ТаблицаБазыРаспределения.Подразделение = БухИт20.Субконто(ВидыСубконто.Подразделения);
						ТаблицаБазыРаспределения.ВидНоменклатуры = БухИт20.Субконто(ВидыСубконто.ВидыНоменклатуры);
						ТаблицаБазыРаспределения.БазаРаспределения = БухИт20.ДО();
						
						// Формирование печатной формы
						Если ФормироватьПечатнуюФорму = 1 Тогда
							
							Расшифровка = СоздатьОбъект("СписокЗначений");
							ОсновнаяРасшифровкаОПП.Выгрузить(Расшифровка);
							
							Расшифровка.Установить("ДтКт", 1);
							
							Расшифровка.Установить("Счет", Сч20);
							Расшифровка.Установить("ВидСубконто1", ВидыСубконто.ВидыНоменклатуры);
							Расшифровка.Установить("ОтборСубконто1", 1);
							Расшифровка.Установить("Субконто1",    БухИт20.Субконто(ВидыСубконто.ВидыНоменклатуры));
							Расшифровка.Установить("ВидСубконто3", ВидыСубконто.Подразделения);
							Расшифровка.Установить("Субконто3",    БухИт20.Субконто(ВидыСубконто.Подразделения));
							Расшифровка.Установить("ОтборСубконто3", 2);
							
							Расшифровка.Установить("КорСчет", БухИт20.КорСчет);
							ТаблицаБазыРаспределения.РасшифровкаБазыРаспределенияПоВидуНоменклатуры = Расшифровка;
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;
			КонецЦикла;

			//Определяем базу распределения по подразделению в целом
			БазаРаспределения = ТаблицаБазыРаспределения.Итог("БазаРаспределения");
		КонецЕсли;
		
	Иначе //ДиректКостинг = Да
		
		//Общехозяйственные затраты списываются на счет 90
		ДиректКостингВидыПродукции = Константа.ДиректКостингВидыПродукции.Получить(ДатаКон);
		ДиректКостингБазаРаспределения = Константа.ДиректКостингБазаРаспределения.Получить(ДатаКон);
		
		ТаблицаБазыРаспределения.НоваяКолонка("БазаРаспределенияЕНВД");

		БухИт90 = СоздатьОбъект("БухгалтерскиеИтоги"); БухИт90.ИспользоватьРазделительУчета(ЮрЛицо);
		БухИт90.ИспользоватьСубконто(ВидыСубконто.ВидыНоменклатуры,,,);
		БухИт90.ВключатьСубсчета(-1,);
		БухИт90.ВыполнитьЗапрос(ДатаНач, ДатаКон, Сч90,,,,,);
		БухИт90.ВыбратьСубконто(ВидыСубконто.ВидыНоменклатуры);
		Пока БухИт90.ПолучитьСубконто(ВидыСубконто.ВидыНоменклатуры) = 1 Цикл
			Если (ДиректКостингВидыПродукции = Перечисление.ДиректКостингВидыПродукции.ТолькоПоПродукции) и
				((БухИт90.Субконто(ВидыСубконто.ВидыНоменклатуры).ТипНоменклатуры = Перечисление.ТипыНоменклатуры.Товар) 
				или (БухИт90.Субконто(ВидыСубконто.ВидыНоменклатуры).ТипНоменклатуры = Перечисление.ТипыНоменклатуры.ПосредническаяУслуга)) Тогда
				Продолжить;
			КонецЕсли;
			
			Выручка = 0;
			ВыручкаЕНВД = 0;
			Себестоимость = 0;
			СебестоимостьЕНВД = 0;

			БухИт90.ВыбратьСчета();
			Пока БухИт90.ПолучитьСчет() = 1 Цикл
				Если ДиректКостингБазаРаспределения = Перечисление.ДиректКостингБазаРаспределения.ВыручкаОтПродаж Тогда

					Если БухИт90.Счет = Сч90_1_1 Тогда
						Выручка = Выручка + БухИт90.КО();

					ИначеЕсли БухИт90.Счет = Сч90_1_2 Тогда
						ВыручкаЕНВД = ВыручкаЕНВД + БухИт90.КО();

					ИначеЕсли БухИт90.Счет = Сч90_2_1 Тогда
						
						// Если установлен режим распределения расходов по видам деятельности
						// пропорционально доле дохода за вычетом покупной стоимости товаров, то
						// необходимо из выручки вычесть покупную стоимость товаров.
						Если Константа.УчитыватьПокупнуюСтоимостьТоваров.Получить(ДатаКон) <> Нет Тогда
							Если БухИт90.Субконто(ВидыСубконто.ВидыНоменклатуры).ТипНоменклатуры = Перечисление.ТипыНоменклатуры.Товар Тогда
								Выручка = Выручка - БухИт90.ДО();
							КонецЕсли;
						КонецЕсли;

					ИначеЕсли БухИт90.Счет = Сч90_2_2 Тогда
					
						// Если установлен режим распределения расходов по видам деятельности
						// пропорционально доле дохода за вычетом покупной стоимости товаров, то
						// необходимо из выручки вычесть покупную стоимость товаров.
						Если Константа.УчитыватьПокупнуюСтоимостьТоваров.Получить(ДатаКон) <> Нет Тогда
							Если БухИт90.Субконто(ВидыСубконто.ВидыНоменклатуры).ТипНоменклатуры = Перечисление.ТипыНоменклатуры.Товар Тогда
								ВыручкаЕНВД = ВыручкаЕНВД - БухИт90.ДО();
							КонецЕсли;
						КонецЕсли;

					ИначеЕсли (БухИт90.Счет = Сч90_3) или (БухИт90.Счет = Сч90_4) 
						или (БухИт90.Счет = Сч90_5) или (БухИт90.Счет = Сч90_6) Тогда
						Выручка = Выручка - БухИт90.ДО();
					КонецЕсли;
					
				Иначе
					Если БухИт90.Счет = Сч90_2_1 Тогда
						Себестоимость = БухИт90.ДО();
						
					ИначеЕсли БухИт90.Счет = Сч90_2_2 Тогда
						СебестоимостьЕНВД = БухИт90.ДО();
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;

			Если Выручка > 0 Тогда
			    ТаблицаБазыРаспределения.НоваяСтрока();
				ТаблицаБазыРаспределения.ВидНоменклатуры = БухИт90.Субконто(ВидыСубконто.ВидыНоменклатуры);
				ТаблицаБазыРаспределения.БазаРаспределения = Выручка;
				ТаблицаБазыРаспределения.БазаРаспределенияЕНВД = 0;
			КонецЕсли;

			Если ВыручкаЕНВД > 0 Тогда
			    ТаблицаБазыРаспределения.НоваяСтрока();
				ТаблицаБазыРаспределения.ВидНоменклатуры = БухИт90.Субконто(ВидыСубконто.ВидыНоменклатуры);
				ТаблицаБазыРаспределения.БазаРаспределения = 0;
				ТаблицаБазыРаспределения.БазаРаспределенияЕНВД = ВыручкаЕНВД;
			КонецЕсли;

			Если Себестоимость > 0 Тогда
			    ТаблицаБазыРаспределения.НоваяСтрока();
				ТаблицаБазыРаспределения.ВидНоменклатуры = БухИт90.Субконто(ВидыСубконто.ВидыНоменклатуры);
				ТаблицаБазыРаспределения.БазаРаспределения = Себестоимость;
				ТаблицаБазыРаспределения.БазаРаспределенияЕНВД = 0;
			КонецЕсли;

			Если СебестоимостьЕНВД > 0 Тогда
			    ТаблицаБазыРаспределения.НоваяСтрока();
				ТаблицаБазыРаспределения.ВидНоменклатуры = БухИт90.Субконто(ВидыСубконто.ВидыНоменклатуры);
				ТаблицаБазыРаспределения.БазаРаспределения = 0;
				ТаблицаБазыРаспределения.БазаРаспределенияЕНВД = СебестоимостьЕНВД;
			КонецЕсли;
		КонецЦикла;
		
		Если ДиректКостингВидыПродукции = Перечисление.ДиректКостингВидыПродукции.ТолькоПоПродукции Тогда
		    ТекстБазаРаспредения = "выручка от реализации продукции, отраженная  по кредиту счета 90.1 за минусом налогов";
			
		Иначе
			ТекстБазаРаспредения = "выручка, отраженная  по кредиту счета 90.1 за минусом налогов";
		КонецЕсли;
	КонецЕсли;
	
	Возврат ТаблицаБазыРаспределения;
	
КонецФункции // БазаРаспределенияДляЗакрытияСчета26()

//******************************************************************************
// РассчитатьСуммуЕСН()
//
Функция РассчитатьСуммуЕСН(БухИт)
	
	СуммаЕСН = 0;
	
	БухИт.ВыбратьСубконто();
	Пока БухИт.ПолучитьСубконто() = 1 Цикл
	    Если БухИт.Субконто(1).ВидРасходовДляНалоговогоУчета = Перечисление.ГруппыВидыРасходов.ЕСН Тогда
	        СуммаЕСН = СуммаЕСН +  БухИт.ДО() - БухИт.КО();
	    КонецЕсли;
	КонецЦикла;
	
	Возврат СуммаЕСН;
	
КонецФункции // РассчитатьСуммуЕСН()

//******************************************************************************
// ЗакрытиеСчета26(ДиректКостинг)
//
// Параметры:
//  Нет.
//
// Вызывается из формул элементов диалога:
//  Нет.
//
// Описание:
//  Здесь описывается процедура.
//
Процедура ЗакрытиеСчета26(ДиректКостинг)
	
	Сч20 = СчетПоКоду("20");
	Сч26 = СчетПоКоду("26");
	Сч90_8_1 = СчетПоКоду("90.8.1");
	Сч90_8_2 = СчетПоКоду("90.8.2");
	
	// Если ранее на счет 26 были отнесены расходы,
	// то проводки документа следует записать.
	Если Операция.КоличествоПроводок() > 0 Тогда
		Операция.ЗаписатьПроводки();
	КонецЕсли;
	          
	// Если ведется учет постоянных разниц, то отразим неотраженные
	// постоянные разницы на счете НПР.26.
	ПостоянныеРазницы = 0;
	Если ВыполнятьДвиженияПоСчетуНПР = Да Тогда
		БухИт26 = СоздатьОбъект("БухгалтерскиеИтоги"); БухИт26.ИспользоватьРазделительУчета(ЮрЛицо);
		БухИт26.ИспользоватьСубконто(ВидыСубконто.СтатьиОбщехозяйственныхЗатрат,,,);
		БухИт26.ВыполнитьЗапрос(ДатаНач, ДатаКон, Сч26,,,,,);    
		ПостоянныеРазницы = СуммаПостоянныхРазниц(БухИт26);
	КонецЕсли;
	
	// Формирование печатной формы
	Если ФормироватьПечатнуюФорму = 1 Тогда
		НаименованиеРегламентнойОперации = "Закрытие счета 26 ""Общехозяйственные расходы""";
		Таб.ВывестиСекцию("РегламентнаяОперация");
	КонецЕсли;
	
	// Если нет расходов в текущем месяце, то распределять ничего не надо
	СуммаСписания = БухИтЗаМесяц.ДО(Сч26) - БухИтЗаМесяц.КО(Сч26);
	Если СуммаСписания > 0 Тогда
		
		// Формирование базы распределения общехозяйственных расходов
		ТекстБазаРаспредения = "";
		ТаблицаБазыРаспределения = БазаРаспределенияДляЗакрытияСчета26(ДиректКостинг, ТекстБазаРаспредения);
		Если СтатусВозврата() = 0 Тогда
		    Возврат;
		КонецЕсли;
		          
		// Общая сумма базы распределения
		Если ДиректКостинг = Да Тогда // закрытие счета 26 в дебет счета 90.8
			БазаРаспределения = ТаблицаБазыРаспределения.Итог("БазаРаспределения") + ТаблицаБазыРаспределения.Итог("БазаРаспределенияЕНВД");
		Иначе  // закрытие счета 26 в дебет счета 20
			БазаРаспределения = ТаблицаБазыРаспределения.Итог("БазаРаспределения");
		КонецЕсли;
		
		// Распределение общехозяйственных расходов пропорционально базе распределения.
		Если БазаРаспределения > 0 Тогда
			
			// Формирование печатной формы                                            	
			Если ФормироватьПечатнуюФорму = 1 Тогда
				РасшифровкаПоСчету26 = СоздатьОбъект("СписокЗначений");
				ОсновнаяРасшифровкаОСВ.Выгрузить(РасшифровкаПоСчету26);
				РасшифровкаПоСчету26.Установить("Счет", Сч26);
			КонецЕсли;
			
			// Если в базе распределения есть строки, относящиеся к ЕНВД, то необходимо
			// учесть, что ЕСН относится к деятельности не облагаемой ЕНВД.
			СуммаЕСН = 0;
			Если ДиректКостинг = Да Тогда
				Если ТаблицаБазыРаспределения.Итог("БазаРаспределенияЕНВД") <> 0 Тогда
					Если Константа.ПорядокИсчисленияЕСН.Получить(ДатаДок) > 1 Тогда
						Если ВыполнятьДвиженияПоСчетуНПР <> Да Тогда
							БухИт26 = СоздатьОбъект("БухгалтерскиеИтоги"); БухИт26.ИспользоватьРазделительУчета(ЮрЛицо);
							БухИт26.ИспользоватьСубконто(ВидыСубконто.СтатьиОбщехозяйственныхЗатрат,,,);
							БухИт26.ВыполнитьЗапрос(ДатаНач, ДатаКон, Сч26,,,,,);    
						КонецЕсли;
						
						СуммаЕСН = РассчитатьСуммуЕСН(БухИт26);
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
			СуммаСписания = СуммаСписания  - СуммаЕСН;
			             
			Если СуммаСписания <> 0 Тогда
				Списано = 0;
				УчтеноБазыРаспределения = 0; 
				СписаноПостоянныхРазниц = 0;
				ТаблицаБазыРаспределения.ВыбратьСтроки();
				Пока ТаблицаБазыРаспределения.ПолучитьСтроку() = 1 Цикл
					
					СуммаСтрокиБазыРаспределения = ТаблицаБазыРаспределения.БазаРаспределения;
					
					Операция.НоваяПроводка(); Операция.РазделительУчета = ЮрЛицо;
					Операция.НомерЖурнала = "ФР";
					Операция.СодержаниеПроводки = "Списание счета 26";
					Операция.ПервичныйДокумент  = глПредставлениеПервичногоДокумента(Контекст);
					
					Если ДиректКостинг = Да Тогда // закрытие счета 26 в дебет счета 90.8
						
						Если ТаблицаБазыРаспределения.БазаРаспределенияЕНВД > 0 Тогда
							Операция.Дебет.Счет = Сч90_8_2;
							СуммаСтрокиБазыРаспределения = ТаблицаБазыРаспределения.БазаРаспределенияЕНВД;
							
						Иначе
							Операция.Дебет.Счет = Сч90_8_1;
						КонецЕсли;
						Операция.Дебет.ВидыНоменклатуры = ТаблицаБазыРаспределения.ВидНоменклатуры;
						
					Иначе // закрытие счета 26 в дебет счета 20
						Операция.Дебет.Счет = Сч20;
						Операция.Дебет.Подразделения = ТаблицаБазыРаспределения.Подразделение;
						Операция.Дебет.ВидыНоменклатуры = ТаблицаБазыРаспределения.ВидНоменклатуры;
						Операция.Дебет.СтатьиЗатратНаПроизводство = СтатьяЗатратНаПроизводство("Общехозяйственные затраты");
					КонецЕсли;
					Коэффициент = СуммаСтрокиБазыРаспределения / БазаРаспределения;
					
					Операция.Кредит.Счет = Сч26;
					Операция.Сумма = СуммаСписания * Коэффициент;
				    Списано = Списано + Операция.Сумма;
					Если (ТаблицаБазыРаспределения.НомерСтроки = ТаблицаБазыРаспределения.КоличествоСтрок())
							и (Списано <> СуммаСписания) Тогда
					    Операция.Сумма = Операция.Сумма + СуммаСписания - Списано;
					КонецЕсли;
					
					// Формирование печатной формы                                            	
					Если ФормироватьПечатнуюФорму = 1 Тогда
						ТаблицаБазыРаспределения.ВсегоРасходов = СуммаСписания;
						ТаблицаБазыРаспределения.Коэффициент = Коэффициент;
						ТаблицаБазыРаспределения.СуммаРасходов = Операция.Сумма;
						
						Если ДиректКостинг = Да Тогда // закрытие счета 26 в дебет счета 90.8
							Если ТаблицаБазыРаспределения.БазаРаспределенияЕНВД > 0 Тогда
								ТаблицаБазыРаспределения.СуммаРасходовЕНВД = Операция.Сумма;
								ТаблицаБазыРаспределения.СуммаРасходов     = 0;
							КонецЕсли;
						КонецЕсли;
							
						ТаблицаБазыРаспределения.РасшифровкаОборотноСальдоваяВедомостьПоСчету = РасшифровкаПоСчету26;
					КонецЕсли;
					
					// Списание постоянных разниц.
					Если ПостоянныеРазницы <> 0 Тогда
						УчтеноБазыРаспределения = УчтеноБазыРаспределения + СуммаСтрокиБазыРаспределения;
						ДолжноБытьСписано  = ПостоянныеРазницы * УчтеноБазыРаспределения / БазаРаспределения;
						СписатьПР = ДолжноБытьСписано - СписаноПостоянныхРазниц;
						Если СписатьПР <> 0 Тогда
							
							СчетНПР = глПолучитьСчетДебетаНПР(Операция.Дебет.Счет, Операция.Дебет.ВидыНоменклатуры);
							
							Операция.НоваяПроводка(); Операция.РазделительУчета = ЮрЛицо;
							Операция.НомерЖурнала = "ПР";
							Операция.СодержаниеПроводки = "Списание постоянных налоговых разниц";
							Если ПустоеЗначение(СчетНПР) = 0 Тогда
								Операция.Дебет.Счет = СчетНПР;
								
								Если ДиректКостинг <> Да Тогда
									Операция.Дебет.Подразделения = ТаблицаБазыРаспределения.Подразделение;
									Операция.Дебет.ВидыНоменклатуры = ТаблицаБазыРаспределения.ВидНоменклатуры;
									Операция.Дебет.СтатьиЗатратНаПроизводство = СтатьяЗатратНаПроизводство("Общехозяйственные затраты");    
								КонецЕсли;
								
							КонецЕсли;
							Операция.Кредит.Счет = СчетПоКоду("НПР.26");
							Операция.Сумма = СписатьПР;
							СписаноПостоянныхРазниц = СписаноПостоянныхРазниц + Операция.Сумма;
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			     
			Если СуммаЕСН <> 0 Тогда
				
				БазаРаспределенияЕСН = СоздатьОбъект("ТаблицаЗначений");
				ТаблицаБазыРаспределения.Выгрузить(БазаРаспределенияЕСН);
				
				// В таблице необходимо оставить только значимые строки.
				КоличествоСтрок = БазаРаспределенияЕСН.КоличествоСтрок();
				Для СчетчикЦикла = 1 По КоличествоСтрок Цикл
					НомерСтрокиТаблицы = КоличествоСтрок - СчетчикЦикла + 1;
					
					Если БазаРаспределенияЕСН.ПолучитьЗначение(НомерСтрокиТаблицы, "БазаРаспределения") > 0 Тогда
					Иначе
						БазаРаспределенияЕСН.УдалитьСтроку(НомерСтрокиТаблицы);
					КонецЕсли;
					
				КонецЦикла;
				
				Списано = 0;
				БазаРаспределения = БазаРаспределенияЕСН.Итог("БазаРаспределения");
				БазаРаспределенияЕСН.ВыбратьСтроки();
				Пока БазаРаспределенияЕСН.ПолучитьСтроку() = 1 Цикл
					        
					Коэффициент = БазаРаспределенияЕСН.БазаРаспределения / БазаРаспределения;
				
					Операция.НоваяПроводка(); Операция.РазделительУчета = ЮрЛицо;
					Операция.НомерЖурнала = "ФР";
					Операция.СодержаниеПроводки = "Списание ЕСН";
					Операция.ПервичныйДокумент  = глПредставлениеПервичногоДокумента(Контекст);
					Операция.Дебет.Счет = Сч90_8_1;
					Операция.Дебет.ВидыНоменклатуры = БазаРаспределенияЕСН.ВидНоменклатуры;
					Операция.Кредит.Счет = Сч26;
					Операция.Сумма = СуммаЕСН * Коэффициент;
				    Списано = Списано + Операция.Сумма;
					
					Если (БазаРаспределенияЕСН.НомерСтроки = БазаРаспределенияЕСН.КоличествоСтрок())
							и (Списано <> СуммаЕСН) Тогда
					    Операция.Сумма = Операция.Сумма + СуммаЕСН - Списано;
					КонецЕсли;
					
					// Формирование печатной формы                                            	
					Если ФормироватьПечатнуюФорму = 1 Тогда
						БазаРаспределенияЕСН.ВсегоРасходов = СуммаЕСН;
						БазаРаспределенияЕСН.Коэффициент = Коэффициент;
						БазаРаспределенияЕСН.СуммаРасходов = Операция.Сумма;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;

		Иначе
			ТекстСообщения = "Счет 26 автоматически закрыть невозможно, т.к. база распределения расходов равна нулю.
							 |База распределения - " + ТекстБазаРаспредения;
			глНеПроводить(Контекст, ТекстСообщения);
			Возврат;
		КонецЕсли;
		
		// Формирование печатной формы
		Если ФормироватьПечатнуюФорму = 1 Тогда
	                                     
			Расшифровка = СоздатьОбъект("СписокЗначений");
			Расшифровка.ДобавитьЗначение(ДатаДок, "Дата операции");
			Расшифровка.ДобавитьЗначение(ТекстБазаРаспредения, "Дополнительные данные");
			    
			Если ДиректКостинг <> Да Тогда //Общехозяйственные затраты списываются на счет 20	
				Расшифровка.ДобавитьЗначение(ТаблицаБазыРаспределения, "Таблица данных");
				Расшифровка.ДобавитьЗначение("ЗакрытиеСчета26", "Наименование таблицы");
				
			Иначе
				
				Если СуммаЕСН = 0 Тогда
					Расшифровка.ДобавитьЗначение(ТаблицаБазыРаспределения, "Таблица данных");
					Расшифровка.ДобавитьЗначение("ЗакрытиеСчета26ДиректКостинг", "Наименование таблицы");
					
				Иначе 
				    ТаблицаРасшифровка = СоздатьОбъект("ТаблицаЗначений");
					ТаблицаРасшифровка.НоваяКолонка("Наименование");
					ТаблицаРасшифровка.НоваяКолонка("Расшифровка");
					
					ТаблицаРасшифровка.НоваяСтрока();
					ТаблицаРасшифровка.Наименование = "Распределение расходов (за исключением начисленного ЕСН)";
					РасшровкаБазыРаспределения = СоздатьОбъект("СписокЗначений");
					РасшровкаБазыРаспределения.ДобавитьЗначение("ЗакрытиеСчета26ДиректКостинг", "Наименование таблицы");
					РасшровкаБазыРаспределения.ДобавитьЗначение(ТаблицаБазыРаспределения, "Таблица данных");
					РасшровкаБазыРаспределения.ДобавитьЗначение(ТекстБазаРаспредения, "Дополнительные данные");
					РасшровкаБазыРаспределения.ДобавитьЗначение(ДатаДок, "Дата операции");
					ТаблицаРасшифровка.Расшифровка  = РасшровкаБазыРаспределения;
					
					ТаблицаРасшифровка.НоваяСтрока();
					ТаблицаРасшифровка.Наименование = "Распределение начисленного ЕСН";
					РасшровкаБазыРаспределения = СоздатьОбъект("СписокЗначений");
					РасшровкаБазыРаспределения.ДобавитьЗначение("ЗакрытиеСчета26ДиректКостингЕСН", "Наименование таблицы");
					РасшровкаБазыРаспределения.ДобавитьЗначение(БазаРаспределенияЕСН, "Таблица данных");
					РасшровкаБазыРаспределения.ДобавитьЗначение(ТекстБазаРаспредения, "Дополнительные данные");
					РасшровкаБазыРаспределения.ДобавитьЗначение(ДатаДок, "Дата операции");
					ТаблицаРасшифровка.Расшифровка  = РасшровкаБазыРаспределения;

					Расшифровка.ДобавитьЗначение(ТаблицаРасшифровка, "Таблица данных");
					Расшифровка.ДобавитьЗначение("ЗакрытиеСчета26ДиректКостингСписок", "Наименование таблицы");					
				КонецЕсли;
			КонецЕсли;
			
			НаименованиеРегламентнойПодоперации = "Закрытие счета 26 ""Общехозяйственные расходы""";
			Таб.ВывестиСекцию("ПодоперацияВыполнена");
		КонецЕсли;
		
	Иначе
		// Формирование печатной формы
		Если ФормироватьПечатнуюФорму = 1 Тогда
			НаименованиеРегламентнойПодоперации = "По счету 26 ""Общехозяйственные расходы"" расходов нет";
			Таб.ВывестиСекцию("ПодоперацияНеВыполнена");
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ЗакрытиеСчета26()

//******************************************************************************
// ЗакрытиеСчета20()
//
// Параметры:
//  Нет.
//
// Вызывается из формул элементов диалога:
//  Нет.
//
// Описание:
//  Здесь описывается процедура.
//
Процедура ЗакрытиеСчета20()
	
	Сч20 = СчетПоКоду("20");
	Сч40 = СчетПоКоду("40");
	Сч90 = СчетПоКоду("90");
	Сч90_1_1 = СчетПоКоду("90.1.1");
	Сч90_1_2 = СчетПоКоду("90.1.2");
	Сч90_2_1 = СчетПоКоду("90.2.1");
	Сч90_2_2 = СчетПоКоду("90.2.2");
	Сч90_3 = СчетПоКоду("90.3");
	Сч90_4 = СчетПоКоду("90.4");
	Сч90_5 = СчетПоКоду("90.5");
	Сч90_6 = СчетПоКоду("90.6");
	
	//Определим остатки незавершенного производства
	ЗапросПоОстаткамНезавершенногоПроизводства = СоздатьОбъект("Запрос");
	ТекстЗапроса =
	"//{{ЗАПРОС(НезавершенноеПроизводство)
	|Период с ДатаНач по ДатаКон;
	|ОбрабатыватьДокументы все;
	|Обрабатывать НеПомеченныеНаУдаление;
	|ВидНоменклатуры = Документ.НезавершенноеПроизводство.ВидНоменклатуры;
	|СтатьяЗатрат = Документ.НезавершенноеПроизводство.СтатьяЗатратНаПроизводство;
	|Подразделение = Документ.НезавершенноеПроизводство.Подразделение;
	|ОстатокДок = Документ.НезавершенноеПроизводство.Остаток;
	|Функция Остаток = Сумма(ОстатокДок);
	|Группировка ВидНоменклатуры;
	|Группировка СтатьяЗатрат;
	|Группировка Подразделение;
	|"//}}ЗАПРОС
	;
	ЗапросПоОстаткамНезавершенногоПроизводства.Выполнить(ТекстЗапроса);
	
	//Если ранее на счет 20 были списаны общепроизводственные или общехозяйственные
	//расходы, запишем проводки, чтобы учесть эти суммы при закрытии счета 20
	Если Операция.КоличествоПроводок() > 0 Тогда
		Операция.ЗаписатьПроводки();
	КонецЕсли;
	
	БухИт90 = СоздатьОбъект("БухгалтерскиеИтоги"); БухИт90.ИспользоватьРазделительУчета(ЮрЛицо);
	БухИт90.ИспользоватьСубконто(ВидыСубконто.ВидыНоменклатуры,,,);
	БухИт90.ВключатьСубсчета(-1,);
	БухИт90.ВыполнитьЗапрос(ДатаНач, ДатаКон, Сч90,,,,,);
	
	БухИт20 = СоздатьОбъект("БухгалтерскиеИтоги"); БухИт20.ИспользоватьРазделительУчета(ЮрЛицо);
	БухИт20.ИспользоватьСубконто(ВидыСубконто.ВидыНоменклатуры,,,);
	БухИт20.ИспользоватьСубконто(ВидыСубконто.Подразделения,,,);
	БухИт20.ИспользоватьСубконто(ВидыСубконто.СтатьиЗатратНаПроизводство,,,);
	БухИт20.ВыполнитьЗапрос(ДатаНач, ДатаКон, Сч20,,,,,);
	БухИт20.ВыбратьСубконто(ВидыСубконто.ВидыНоменклатуры);
	Пока БухИт20.ПолучитьСубконто(ВидыСубконто.ВидыНоменклатуры) = 1 Цикл
		
		// Определим части выручки от реализации работ и услуг, облагаемых и не облагаемые ЕНВД.
		Выручка = 0;
		ВыручкаЕНВД = 0;
		Если (БухИт90.ПолучитьСубконто(ВидыСубконто.ВидыНоменклатуры,, БухИт20.Субконто(ВидыСубконто.ВидыНоменклатуры)) = 1) и
			 ((БухИт20.Субконто(ВидыСубконто.ВидыНоменклатуры).ТипНоменклатуры = Перечисление.ТипыНоменклатуры.Услуга) или
			  (БухИт20.Субконто(ВидыСубконто.ВидыНоменклатуры).ТипНоменклатуры = Перечисление.ТипыНоменклатуры.УслугаЕНВД) или
			  (БухИт20.Субконто(ВидыСубконто.ВидыНоменклатуры).ТипНоменклатуры = Перечисление.ТипыНоменклатуры.Работа)) Тогда
			БухИт90.ВыбратьСчета();
			Пока БухИт90.ПолучитьСчет() = 1 Цикл
				Если БухИт90.Счет = Сч90_1_1 Тогда
					Выручка = Выручка + БухИт90.КО();

				ИначеЕсли БухИт90.Счет = Сч90_1_2 Тогда
					ВыручкаЕНВД = ВыручкаЕНВД + БухИт90.КО();

				ИначеЕсли (БухИт90.Счет = Сч90_3) или (БухИт90.Счет = Сч90_4) 
					или (БухИт90.Счет = Сч90_5) или (БухИт90.Счет = Сч90_6) Тогда
					Выручка = Выручка - БухИт90.ДО();
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		БухИт20.ВыбратьСубконто(ВидыСубконто.Подразделения);
		Пока БухИт20.ПолучитьСубконто(ВидыСубконто.Подразделения) = 1 Цикл
			
			БухИт20.ВыбратьСубконто(ВидыСубконто.СтатьиЗатратНаПроизводство);
			Пока БухИт20.ПолучитьСубконто(ВидыСубконто.СтатьиЗатратНаПроизводство) = 1 Цикл
				СуммаСписания = БухИт20.СКД() - ОстатокНезавершенногоПроизводства(БухИт20.Субконто(ВидыСубконто.ВидыНоменклатуры), БухИт20.Субконто(ВидыСубконто.СтатьиЗатратНаПроизводство), БухИт20.Субконто(ВидыСубконто.Подразделения));
				Если СуммаСписания > 0 Тогда
					
					ПостоянныеРазницы = СуммаПостоянныхРазниц(БухИт20, БухИт20.Субконто(ВидыСубконто.ВидыНоменклатуры), БухИт20.Субконто(ВидыСубконто.СтатьиЗатратНаПроизводство), БухИт20.Субконто(ВидыСубконто.Подразделения));
					СуммаСписанияПостоянныхРазниц = ПостоянныеРазницы * (СуммаСписания/БухИт20.СКД());
					
					// Затраты на производство продукции списываем на счет 40.
					Если (БухИт20.Субконто(ВидыСубконто.ВидыНоменклатуры).ТипНоменклатуры = Перечисление.ТипыНоменклатуры.Продукция) 
					 или (БухИт20.Субконто(ВидыСубконто.ВидыНоменклатуры).ТипНоменклатуры = Перечисление.ТипыНоменклатуры.Полуфабрикат) Тогда
						Операция.НоваяПроводка(); Операция.РазделительУчета = ЮрЛицо;
						Операция.НомерЖурнала = "ФР";
						Операция.СодержаниеПроводки = "Списание счета 20";
						Операция.ПервичныйДокумент  = глПредставлениеПервичногоДокумента(Контекст);
						Операция.Дебет.Счет = Сч40;
						Операция.Дебет.ВидыНоменклатуры = БухИт20.Субконто(ВидыСубконто.ВидыНоменклатуры);
						Операция.Кредит.Счет = Сч20;
						Операция.Кредит.ВидыНоменклатуры = БухИт20.Субконто(ВидыСубконто.ВидыНоменклатуры);
						Операция.Кредит.СтатьиЗатратНаПроизводство = БухИт20.Субконто(ВидыСубконто.СтатьиЗатратНаПроизводство);
						Операция.Кредит.Подразделения = БухИт20.Субконто(ВидыСубконто.Подразделения);
						Операция.Сумма = СуммаСписания;
						
						// Проводки по постоянным разницам.
						Если СуммаСписанияПостоянныхРазниц <> 0 Тогда
						    Операция.НоваяПроводка(); Операция.РазделительУчета = ЮрЛицо;
							Операция.НомерЖурнала = "ПР";
							Операция.СодержаниеПроводки = "Списание постоянных налоговых разниц";
							Операция.Дебет.Счет  = СчетПоКоду("НПР.99");
							Операция.Кредит.Счет = СчетПоКоду("НПР.20");
							Операция.Кредит.ВидыНоменклатуры = БухИт20.Субконто(ВидыСубконто.ВидыНоменклатуры);
							Операция.Кредит.СтатьиЗатратНаПроизводство = БухИт20.Субконто(ВидыСубконто.СтатьиЗатратНаПроизводство);
							Операция.Кредит.Подразделения = БухИт20.Субконто(ВидыСубконто.Подразделения);
							Операция.Сумма = СуммаСписанияПостоянныхРазниц;
						КонецЕсли;
						
					// Затраты по работам и услугам списываем на счет 90.
					ИначеЕсли (БухИт20.Субконто(ВидыСубконто.ВидыНоменклатуры).ТипНоменклатуры = Перечисление.ТипыНоменклатуры.Услуга)
						  или (БухИт20.Субконто(ВидыСубконто.ВидыНоменклатуры).ТипНоменклатуры = Перечисление.ТипыНоменклатуры.УслугаЕНВД)
						  или (БухИт20.Субконто(ВидыСубконто.ВидыНоменклатуры).ТипНоменклатуры = Перечисление.ТипыНоменклатуры.Работа) Тогда
						
						Если (Выручка + ВыручкаЕНВД) <> 0 Тогда
						    СуммаСписанияЕНВД = СуммаСписания*ВыручкаЕНВД/(Выручка + ВыручкаЕНВД);
						Иначе
							СуммаСписанияЕНВД = 0;
						КонецЕсли;
						СуммаСписания = СуммаСписания - СуммаСписанияЕНВД;
						
						Если СуммаСписания <> 0 Тогда
						    Операция.НоваяПроводка(); Операция.РазделительУчета = ЮрЛицо;
							Операция.НомерЖурнала = "ФР";
							Операция.СодержаниеПроводки = "Списание счета 20";
							Операция.ПервичныйДокумент  = глПредставлениеПервичногоДокумента(Контекст);
							Операция.Дебет.Счет = Сч90_2_1;
							Операция.Дебет.ВидыНоменклатуры = БухИт20.Субконто(ВидыСубконто.ВидыНоменклатуры);
							Операция.Кредит.Счет = Сч20;
							Операция.Кредит.ВидыНоменклатуры = БухИт20.Субконто(ВидыСубконто.ВидыНоменклатуры);
							Операция.Кредит.СтатьиЗатратНаПроизводство = БухИт20.Субконто(ВидыСубконто.СтатьиЗатратНаПроизводство);
							Операция.Кредит.Подразделения = БухИт20.Субконто(ВидыСубконто.Подразделения);
							Операция.Сумма = СуммаСписания;
						КонецЕсли;
						
						Если СуммаСписанияЕНВД <> 0 Тогда
						    Операция.НоваяПроводка(); Операция.РазделительУчета = ЮрЛицо;
							Операция.НомерЖурнала = "ФР";
							Операция.СодержаниеПроводки = "Списание счета 20";
							Операция.ПервичныйДокумент  = глПредставлениеПервичногоДокумента(Контекст);
							Операция.Дебет.Счет = Сч90_2_2;
							Операция.Дебет.ВидыНоменклатуры = БухИт20.Субконто(ВидыСубконто.ВидыНоменклатуры);
							Операция.Кредит.Счет = Сч20;
							Операция.Кредит.ВидыНоменклатуры = БухИт20.Субконто(ВидыСубконто.ВидыНоменклатуры);
							Операция.Кредит.СтатьиЗатратНаПроизводство = БухИт20.Субконто(ВидыСубконто.СтатьиЗатратНаПроизводство);
							Операция.Кредит.Подразделения = БухИт20.Субконто(ВидыСубконто.Подразделения);
							Операция.Сумма = СуммаСписанияЕНВД;
						КонецЕсли;
						        
						// Разделим сумму ПР на относящиеся к ЕНВД и не относящиеся к ЕНВД
						СуммаСписанияПостоянныхРазниц_ЕНВД = СуммаСписанияПостоянныхРазниц*(СуммаСписанияЕНВД / (СуммаСписания + СуммаСписанияЕНВД));
						СуммаСписанияПостоянныхРазниц      = СуммаСписанияПостоянныхРазниц - СуммаСписанияПостоянныхРазниц_ЕНВД;
	
						// Проводки по постоянным разницам.
						Если СуммаСписанияПостоянныхРазниц <> 0 Тогда
						    Операция.НоваяПроводка(); Операция.РазделительУчета = ЮрЛицо;
							Операция.НомерЖурнала = "ПР";
							Операция.СодержаниеПроводки = "Списание постоянных налоговых разниц";
							Операция.ПервичныйДокумент  = глПредставлениеПервичногоДокумента(Контекст);
							Операция.Дебет.Счет  = СчетПоКоду("НПР.99");
							Операция.Кредит.Счет = СчетПоКоду("НПР.20");
							Операция.Кредит.ВидыНоменклатуры = БухИт20.Субконто(ВидыСубконто.ВидыНоменклатуры);
							Операция.Кредит.СтатьиЗатратНаПроизводство = БухИт20.Субконто(ВидыСубконто.СтатьиЗатратНаПроизводство);
							Операция.Кредит.Подразделения = БухИт20.Субконто(ВидыСубконто.Подразделения);
							Операция.Сумма = СуммаСписанияПостоянныхРазниц;
						КонецЕсли;
						
						// Проводки по постоянным разницам.
						Если СуммаСписанияПостоянныхРазниц_ЕНВД <> 0 Тогда
						    Операция.НоваяПроводка(); Операция.РазделительУчета = ЮрЛицо;
							Операция.НомерЖурнала = "ПР";
							Операция.СодержаниеПроводки = "Списание постоянных налоговых разниц";
							Операция.Кредит.Счет = СчетПоКоду("НПР.20");
							Операция.Кредит.ВидыНоменклатуры = БухИт20.Субконто(ВидыСубконто.ВидыНоменклатуры);
							Операция.Кредит.СтатьиЗатратНаПроизводство = БухИт20.Субконто(ВидыСубконто.СтатьиЗатратНаПроизводство);
							Операция.Кредит.Подразделения = БухИт20.Субконто(ВидыСубконто.Подразделения);
							Операция.Сумма = СуммаСписанияПостоянныхРазниц_ЕНВД;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры // ЗакрытиеСчета20()

//******************************************************************************
// ЗакрытиеСчета40()
//
// Параметры:
//  Нет.
//
// Вызывается из формул элементов диалога:
//  Нет.
//
// Описание:
//  Здесь описывается процедура.
//
Процедура ЗакрытиеСчета40()
	
	Сч40 = СчетПоКоду("40");
	Сч90_2_1 = СчетПоКоду("90.2.1");
	
	//Если ранее на счет 40 были списаны производственные затраты, 
	//запишем проводки, чтобы учесть эти суммы при закрытии счета 40
	Если Операция.КоличествоПроводок() > 0 Тогда
		Операция.ЗаписатьПроводки();
	КонецЕсли;
	
	СуммаСписания = БухИтЗаМесяц.СКД(Сч40) - БухИтЗаМесяц.СКК(Сч40);
	Если СуммаСписания <> 0 Тогда
		БухИт40 = СоздатьОбъект("БухгалтерскиеИтоги"); БухИт40.ИспользоватьРазделительУчета(ЮрЛицо);
		БухИт40.ИспользоватьСубконто(ВидыСубконто.ВидыНоменклатуры,,,);
		БухИт40.ВыполнитьЗапрос(ДатаНач, ДатаКон, Сч40,,,,,);

		БухИт40.ВыбратьСубконто(ВидыСубконто.ВидыНоменклатуры);
		Пока БухИт40.ПолучитьСубконто(ВидыСубконто.ВидыНоменклатуры) = 1 Цикл
			СуммаСписанияПоВН = БухИт40.СКД() - БухИт40.СКК();
			Если СуммаСписанияПоВН = 0 Тогда
			    Продолжить;
			КонецЕсли;

			Операция.НоваяПроводка(); Операция.РазделительУчета = ЮрЛицо;
			Операция.НомерЖурнала = "ФР";
			Операция.СодержаниеПроводки = "Списание счета 40";
			Операция.ПервичныйДокумент  = глПредставлениеПервичногоДокумента(Контекст);
			Операция.Дебет.Счет = Сч90_2_1;
			Операция.Дебет.ВидыНоменклатуры = БухИт40.Субконто(ВидыСубконто.ВидыНоменклатуры);
			Операция.Кредит.Счет = Сч40;
			Операция.Кредит.ВидыНоменклатуры = БухИт40.Субконто(ВидыСубконто.ВидыНоменклатуры);
			Операция.Сумма = СуммаСписанияПоВН;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры // ЗакрытиеСчета40()

//******************************************************************************
// КоэффициентСписанияТранспортныхРасходов()
//
// Параметры:
//  Нет.
//
// Возвращаемое значение:
//  Число - коэффициент списания.
//
// Вызывается из формул элементов диалога:
//  Нет.
//
// Описание:
//  Рассчитывается коэффициент для расчета транспортных расходов,
//  подлежащих включению в расходы текущего периода.
//
Функция КоэффициентСписанияТранспортныхРасходов()
	
	Сч41   = СчетПоКоду("41");
	Сч42   = СчетПоКоду("42");
	Сч45   = СчетПоКоду("45");
	Сч60   = СчетПоКоду("60");
	Сч90_2 = СчетПоКоду("90.2");
	
	ОстатокТовара = БухИтЗаМесяц.СКД(Сч41) - БухИтЗаМесяц.СКК(Сч42);
	СуммаРеализованногоТовара = БухИтЗаМесяц.ОБ(Сч90_2, Сч41) + БухИтЗаМесяц.ОБ(Сч90_2, Сч60) + БухИтЗаМесяц.ОБ(Сч90_2, Сч42);
	
	// Добавим сумму реализованного товара, который был ранее отгружен без перехода права собственности.
	БухИт45 = СоздатьОбъект("БухгалтерскиеИтоги"); БухИт45.ИспользоватьРазделительУчета(ЮрЛицо);
	БухИт45.ИспользоватьСубконто(ВидыСубконто.Номенклатура);
	БухИт45.ВключатьСубсчета(, 1);
	БухИт45.ВыполнитьЗапрос(ДатаНач, ДатаКон, Сч45,,, 3,, "С");
	БухИт45.ВыбратьСубконто();
	Пока БухИт45.ПолучитьСубконто() = 1 Цикл                     
		
		Если БухИт45.Субконто(ВидыСубконто.Номенклатура).ТипНоменклатуры <> Перечисление.ТипыНоменклатуры.Товар Тогда
			Продолжить;
		КонецЕсли;
		
		ОстатокТовара = ОстатокТовара + БухИт45.СКД();
		
		Если БухИт45.ПолучитьКорСчет(, Сч90_2) = 1 Тогда
			СуммаРеализованногоТовара = СуммаРеализованногоТовара + БухИт45.КорКО();    
		КонецЕсли;
		
	КонецЦикла;
	
	Если ОстатокТовара + СуммаРеализованногоТовара <> 0 Тогда
		КоэффициентСписания = Окр(СуммаРеализованногоТовара / (ОстатокТовара + СуммаРеализованногоТовара), 8);
	Иначе
		КоэффициентСписания = 0;
	КонецЕсли;
	
	Возврат КоэффициентСписания;
	
КонецФункции // КоэффициентСписанияТранспортныхРасходов()

//******************************************************************************
// БазаРаспределенияСчет44_1_1()
//
// Параметры:
//  Нет.
//
// Возвращаемое значение:
//  ТаблицаЗначений - база распределения.
//
// Вызывается из формул элементов диалога:
//  Нет.
//
// Описание:
//  Формируется база распределения для закрытия счета 44.1.1.
//
Функция БазаРаспределенияСчет44_1_1()
	
	Сч90     = СчетПоКоду("90");
	Сч90_1_1 = СчетПоКоду("90.1.1");
	Сч90_2_1 = СчетПоКоду("90.2.1");
	Сч90_3   = СчетПоКоду("90.3");
	Сч90_4   = СчетПоКоду("90.4");
	Сч90_5   = СчетПоКоду("90.5");
	Сч90_6   = СчетПоКоду("90.6");
	
	ТаблицаБазыРаспределения = СоздатьОбъект("ТаблицаЗначений");
	ТаблицаБазыРаспределения.НоваяКолонка("ВидНоменклатуры");
	ТаблицаБазыРаспределения.НоваяКолонка("БазаРаспределения");

	БухИт90 = СоздатьОбъект("БухгалтерскиеИтоги"); БухИт90.ИспользоватьРазделительУчета(ЮрЛицо);
	БухИт90.ИспользоватьСубконто(ВидыСубконто.ВидыНоменклатуры,,,);
	БухИт90.ВключатьСубсчета(-1,);
	БухИт90.ВыполнитьЗапрос(ДатаНач, ДатаКон, Сч90,,,,,);
	БухИт90.ВыбратьСубконто(ВидыСубконто.ВидыНоменклатуры);
	Пока БухИт90.ПолучитьСубконто(ВидыСубконто.ВидыНоменклатуры) = 1 Цикл
		Если (БухИт90.Субконто(ВидыСубконто.ВидыНоменклатуры).ТипНоменклатуры <> Перечисление.ТипыНоменклатуры.Товар)
			и (БухИт90.Субконто(ВидыСубконто.ВидыНоменклатуры).ТипНоменклатуры <> Перечисление.ТипыНоменклатуры.ПосредническаяУслуга) Тогда
		    Продолжить;
		КонецЕсли;
		
		Выручка = 0;
		
		БухИт90.ВыбратьСчета();
		Пока БухИт90.ПолучитьСчет() = 1 Цикл
			Если БухИт90.Счет = Сч90_1_1 Тогда
				Выручка = Выручка + БухИт90.КО();

			ИначеЕсли БухИт90.Счет = Сч90_2_1 Тогда
				
				// Если установлен режим распределения расходов по видам деятельности
				// пропорционально доле дохода за вычетом покупной стоимости товаров, то
				// необходимо из выручки вычесть покупную стоимость товаров.
				Если Константа.УчитыватьПокупнуюСтоимостьТоваров.Получить(ДатаКон) <> Нет Тогда
					Если БухИт90.Субконто(ВидыСубконто.ВидыНоменклатуры).ТипНоменклатуры = Перечисление.ТипыНоменклатуры.Товар Тогда
						Выручка = Выручка - БухИт90.ДО();
					КонецЕсли;
				КонецЕсли;
				
			ИначеЕсли (БухИт90.Счет = Сч90_3) или (БухИт90.Счет = Сч90_4)
				или (БухИт90.Счет = Сч90_5) или (БухИт90.Счет = Сч90_6) Тогда
				Выручка = Выручка - БухИт90.ДО();
			КонецЕсли;
		КонецЦикла;
			
		Если Выручка > 0 Тогда
		    ТаблицаБазыРаспределения.НоваяСтрока();
			ТаблицаБазыРаспределения.ВидНоменклатуры = БухИт90.Субконто(ВидыСубконто.ВидыНоменклатуры);
			ТаблицаБазыРаспределения.БазаРаспределения = Выручка;
		КонецЕсли;
	КонецЦикла;
    
	Возврат ТаблицаБазыРаспределения;
	
КонецФункции // БазаРаспределенияСчет44_1_1()

//******************************************************************************
// БазаРаспределенияСчет44_1_2()
//
// Параметры:
//  Нет.
//
// Возвращаемое значение:
//  ТаблицаЗначений - база распределения.
//
// Вызывается из формул элементов диалога:
//  Нет.
//
// Описание:
//  Формируется база распределения для закрытия счета 44.1.2.
//
Функция БазаРаспределенияСчет44_1_2()
	
	Сч90     = СчетПоКоду("90");
	Сч90_1_2 = СчетПоКоду("90.1.2");
	Сч90_2_2 = СчетПоКоду("90.2.2");
	
	ТаблицаБазыРаспределения = СоздатьОбъект("ТаблицаЗначений");
	ТаблицаБазыРаспределения.НоваяКолонка("ВидНоменклатуры");
	ТаблицаБазыРаспределения.НоваяКолонка("БазаРаспределения");

	БухИт90 = СоздатьОбъект("БухгалтерскиеИтоги"); БухИт90.ИспользоватьРазделительУчета(ЮрЛицо);
	БухИт90.ИспользоватьСубконто(ВидыСубконто.ВидыНоменклатуры,,,);
	БухИт90.ВключатьСубсчета(-1,);
	БухИт90.ВыполнитьЗапрос(ДатаНач, ДатаКон, Сч90,,,,,);
	БухИт90.ВыбратьСубконто(ВидыСубконто.ВидыНоменклатуры);
	Пока БухИт90.ПолучитьСубконто(ВидыСубконто.ВидыНоменклатуры) = 1 Цикл
		Если (БухИт90.Субконто(ВидыСубконто.ВидыНоменклатуры).ТипНоменклатуры <> Перечисление.ТипыНоменклатуры.Товар)
			и (БухИт90.Субконто(ВидыСубконто.ВидыНоменклатуры).ТипНоменклатуры <> Перечисление.ТипыНоменклатуры.ПосредническаяУслуга) Тогда
		    Продолжить;
		КонецЕсли;
		
		Выручка = 0;
		
		БухИт90.ВыбратьСчета();
		Пока БухИт90.ПолучитьСчет() = 1 Цикл
			Если БухИт90.Счет = Сч90_1_2 Тогда
				Выручка = Выручка + БухИт90.КО();

			ИначеЕсли БухИт90.Счет = Сч90_2_2 Тогда
				
				// Если установлен режим распределения расходов по видам деятельности
				// пропорционально доле дохода за вычетом покупной стоимости товаров, то
				// необходимо из выручки вычесть покупную стоимость товаров.
				Если Константа.УчитыватьПокупнуюСтоимостьТоваров.Получить(ДатаКон) <> Нет Тогда
					Если БухИт90.Субконто(ВидыСубконто.ВидыНоменклатуры).ТипНоменклатуры = Перечисление.ТипыНоменклатуры.Товар Тогда
						Выручка = Выручка - БухИт90.ДО();
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
			
		Если Выручка > 0 Тогда
		    ТаблицаБазыРаспределения.НоваяСтрока();
			ТаблицаБазыРаспределения.ВидНоменклатуры = БухИт90.Субконто(ВидыСубконто.ВидыНоменклатуры);
			ТаблицаБазыРаспределения.БазаРаспределения = Выручка;
		КонецЕсли;
	КонецЦикла;
    
	Возврат ТаблицаБазыРаспределения;
	
КонецФункции // БазаРаспределенияСчет44_1_2()

//******************************************************************************
// БазаРаспределенияСчет44_1_3()
//
// Параметры:
//  Нет.
//
// Возвращаемое значение:
//  ТаблицаЗначений - база распределения.
//
// Вызывается из формул элементов диалога:
//  Нет.
//
// Описание:
//  Формируется база распределения для закрытия счета 44.1.3.
//
Функция БазаРаспределенияСчет44_1_3()
	
	Сч90     = СчетПоКоду("90");
	Сч90_1_1 = СчетПоКоду("90.1.1");
	Сч90_1_2 = СчетПоКоду("90.1.2");
	Сч90_2_1 = СчетПоКоду("90.2.1");
	Сч90_2_2 = СчетПоКоду("90.2.2");
	Сч90_3   = СчетПоКоду("90.3");
	Сч90_4   = СчетПоКоду("90.4");
	Сч90_5   = СчетПоКоду("90.5");
	Сч90_6   = СчетПоКоду("90.6");
	
	ТаблицаБазыРаспределения = СоздатьОбъект("ТаблицаЗначений");
	ТаблицаБазыРаспределения.НоваяКолонка("ВидНоменклатуры");
	ТаблицаБазыРаспределения.НоваяКолонка("БазаРаспределения");
	ТаблицаБазыРаспределения.НоваяКолонка("БазаРаспределенияЕНВД");

	БухИт90 = СоздатьОбъект("БухгалтерскиеИтоги"); БухИт90.ИспользоватьРазделительУчета(ЮрЛицо);
	БухИт90.ИспользоватьСубконто(ВидыСубконто.ВидыНоменклатуры,,,);
	БухИт90.ВключатьСубсчета(-1,);
	БухИт90.ВыполнитьЗапрос(ДатаНач, ДатаКон, Сч90,,,,,);
	БухИт90.ВыбратьСубконто(ВидыСубконто.ВидыНоменклатуры);
	Пока БухИт90.ПолучитьСубконто(ВидыСубконто.ВидыНоменклатуры) = 1 Цикл
		Если (БухИт90.Субконто(ВидыСубконто.ВидыНоменклатуры).ТипНоменклатуры <> Перечисление.ТипыНоменклатуры.Товар)
			и (БухИт90.Субконто(ВидыСубконто.ВидыНоменклатуры).ТипНоменклатуры <> Перечисление.ТипыНоменклатуры.ПосредническаяУслуга) Тогда
		    Продолжить;
		КонецЕсли;
		
		Выручка = 0;
		ВыручкаЕНВД = 0;

		БухИт90.ВыбратьСчета();
		Пока БухИт90.ПолучитьСчет() = 1 Цикл
			Если БухИт90.Счет = Сч90_1_1 Тогда
				Выручка = Выручка + БухИт90.КО();

			ИначеЕсли БухИт90.Счет = Сч90_1_2 Тогда
				ВыручкаЕНВД = ВыручкаЕНВД + БухИт90.КО();

			ИначеЕсли БухИт90.Счет = Сч90_2_1 Тогда
				
				// Если установлен режим распределения расходов по видам деятельности
				// пропорционально доле дохода за вычетом покупной стоимости товаров, то
				// необходимо из выручки вычесть покупную стоимость товаров.
				Если Константа.УчитыватьПокупнуюСтоимостьТоваров.Получить(ДатаКон) <> Нет Тогда
					Если БухИт90.Субконто(ВидыСубконто.ВидыНоменклатуры).ТипНоменклатуры = Перечисление.ТипыНоменклатуры.Товар Тогда
						Выручка = Выручка - БухИт90.ДО();
					КонецЕсли;
				КонецЕсли;
				
			ИначеЕсли БухИт90.Счет = Сч90_2_2 Тогда
				
				// Если установлен режим распределения расходов по видам деятельности
				// пропорционально доле дохода за вычетом покупной стоимости товаров, то
				// необходимо из выручки вычесть покупную стоимость товаров.
				Если Константа.УчитыватьПокупнуюСтоимостьТоваров.Получить(ДатаКон) <> Нет Тогда
					Если БухИт90.Субконто(ВидыСубконто.ВидыНоменклатуры).ТипНоменклатуры = Перечисление.ТипыНоменклатуры.Товар Тогда
						ВыручкаЕНВД = ВыручкаЕНВД - БухИт90.ДО();
					КонецЕсли;
				КонецЕсли;
				

			ИначеЕсли (БухИт90.Счет = Сч90_3) или (БухИт90.Счет = Сч90_4)
				или (БухИт90.Счет = Сч90_5) или (БухИт90.Счет = Сч90_6) Тогда
				Выручка = Выручка - БухИт90.ДО();
			КонецЕсли;
		КонецЦикла;
			
		Если Выручка > 0 Тогда
		    ТаблицаБазыРаспределения.НоваяСтрока();
			ТаблицаБазыРаспределения.ВидНоменклатуры = БухИт90.Субконто(ВидыСубконто.ВидыНоменклатуры);
			ТаблицаБазыРаспределения.БазаРаспределения = Выручка;
			ТаблицаБазыРаспределения.БазаРаспределенияЕНВД = 0;
		КонецЕсли;

		Если ВыручкаЕНВД > 0 Тогда
		    ТаблицаБазыРаспределения.НоваяСтрока();
			ТаблицаБазыРаспределения.ВидНоменклатуры = БухИт90.Субконто(ВидыСубконто.ВидыНоменклатуры);
			ТаблицаБазыРаспределения.БазаРаспределения = 0;
			ТаблицаБазыРаспределения.БазаРаспределенияЕНВД = ВыручкаЕНВД;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ТаблицаБазыРаспределения;
	
КонецФункции // БазаРаспределенияСчет44_1_3()

//******************************************************************************
// РаспределениеИздержекОбращения()
//
// Параметры:
//  Субсчет44_1 - закрываемый счет.
//  Субсчет90_7 - счет, на который списываются расходы.
//  ТаблицаБазыРаспределения - таблица значений - база распределения расходов по видам номенклатуры.
//
// Вызывается из формул элементов диалога:
//  Нет.
//
// Описание:
//  Закрывается один из счетов 44.1.1 или 44.1.2.
//
Процедура РаспределениеИздержекОбращения(Субсчет44_1, Субсчет90_7, ТаблицаБазыРаспределения)
	
	СчНПР_44_1 = СчетПоКоду("НПР.44.1");
	
	БухИт44 = СоздатьОбъект("БухгалтерскиеИтоги"); БухИт44.ИспользоватьРазделительУчета(ЮрЛицо);
	БухИт44.ИспользоватьСубконто(ВидыСубконто.СтатьиИздержекОбращения,,,);
	БухИт44.ВключатьСубсчета(-1,);
	БухИт44.ВыполнитьЗапрос(ДатаНач, ДатаКон, Субсчет44_1,,,,,);
	
	// Коэффициент списания для транспортных расходов
	КоэффициентСписанияТР = КоэффициентСписанияТранспортныхРасходов();
	
	БазаРаспределения = ТаблицаБазыРаспределения.Итог("БазаРаспределения");
	
	БухИт44.ВыбратьСубконто(ВидыСубконто.СтатьиИздержекОбращения);
	Пока БухИт44.ПолучитьСубконто(ВидыСубконто.СтатьиИздержекОбращения) = 1 Цикл
		Если БухИт44.Субконто(ВидыСубконто.СтатьиИздержекОбращения).СписыватьИздержкиПропорциональноОстаткуТоваров.Получить(ДатаКон) = 1 Тогда
			СуммаСписания = Окр(КоэффициентСписанияТР * БухИт44.СКД(), 2);
		Иначе
			СуммаСписания = БухИт44.СКД();
		КонецЕсли;
		
		// Рассчитаем постоянные разницы
		ПостоянныеРазницы = СуммаПостоянныхРазниц(БухИт44, БухИт44.Субконто(ВидыСубконто.СтатьиИздержекОбращения),,, 1);
		
		// Формирование печатной формы                                            	
		Если ФормироватьПечатнуюФорму = 1 Тогда
			ТаблицаРасшифровкаРегламентнойОперации.НоваяСтрока();
			ТаблицаРасшифровкаРегламентнойОперации.СтатьяИздержек = БухИт44.Субконто(ВидыСубконто.СтатьиИздержекОбращения);
			ТаблицаРасшифровкаРегламентнойОперации.СуммаРасходовВсего = БухИт44.СКД();
			ТаблицаРасшифровкаРегламентнойОперации.СуммаКСписанию = СуммаСписания;
			ТаблицаРасшифровкаРегламентнойОперации.БазаРаспределения = БазаРаспределения;
			ТаблицаРасшифровкаРегламентнойОперации.СуммаСписания = СуммаСписания;
			
			// формирование расшифровки
			РасшифровкаПоСтатьеИздержек = СоздатьОбъект("СписокЗначений");
			ОсновнаяРасшифровкаОСВ.Выгрузить(РасшифровкаПоСтатьеИздержек);
			РасшифровкаПоСтатьеИздержек.Установить("Счет", Субсчет44_1);
			РасшифровкаПоСтатьеИздержек.Установить("ВидСубконто1", ВидыСубконто.СтатьиИздержекОбращения);
			РасшифровкаПоСтатьеИздержек.Установить("Субконто1", БухИт44.Субконто(ВидыСубконто.СтатьиИздержекОбращения));
			РасшифровкаПоСтатьеИздержек.Установить("ОтборСубконто1", 1);
			ТаблицаРасшифровкаРегламентнойОперации.РасшифровкаОборотноСальдоваяВедомостьПоСчету = РасшифровкаПоСтатьеИздержек;
			
			ТаблицаРасшифровкаРегламентнойОперации.РасшифровкаРаспределенияРасходов = РасшифровкаРаспределенияРасхдодовСчет44(БухИт44.Субконто(ВидыСубконто.СтатьиИздержекОбращения));
		КонецЕсли;
		
		Списано = 0;
		УчтеноБазыРаспределения = 0; 
		СписаноПостоянныхРазниц = 0;
		НомерПроводки = 0;
		НомерПроводкиПР = 0;
				
		//ТаблицаБазыРаспределения.ВыбратьСтроки(); NDline
		//Пока ТаблицаБазыРаспределения.ПолучитьСтроку() = 1 Цикл
		//	Если ТаблицаБазыРаспределения.БазаРаспределения = 0 Тогда
		//		Продолжить;
		//	КонецЕсли; NDline
			
			Коэффициент = 1; //NDline Коэффициент = ТаблицаБазыРаспределения.БазаРаспределения / БазаРаспределения;
			ВидД = ""; //NDline
			СпрВидыДеятельности = СоздатьОбъект("Справочник.ВидыНоменклатуры");
			СпрВидыДеятельности.ВыбратьЭлементы();
			Пока СпрВидыДеятельности.ПолучитьЭлемент() = 1 Цикл
			    Если СпрВидыДеятельности.ЭтоГруппа() = 1 Тогда
			        Продолжить;
				ИначеЕсли СпрВидыДеятельности.ТипНоменклатуры = Перечисление.ТипыНоменклатуры.Услуга Тогда
					ВидД = СпрВидыДеятельности.ТекущийЭлемент();
					Прервать;
				КонецЕсли;
			КонецЦикла; //NDline
			Операция.НоваяПроводка(); Операция.РазделительУчета = ЮрЛицо;
			Операция.НомерЖурнала = "ФР";
			Операция.СодержаниеПроводки = "Списание счета " + Субсчет44_1.Код;
			Операция.ПервичныйДокумент  = глПредставлениеПервичногоДокумента(Контекст);
			Операция.Дебет.Счет = Субсчет90_7;
			Операция.Дебет.ВидыНоменклатуры = ВидД; //NDline Операция.Дебет.ВидыНоменклатуры = ТаблицаБазыРаспределения.ВидНоменклатуры;
			Операция.Кредит.Счет = Субсчет44_1;
			Операция.Кредит.СтатьиИздержекОбращения = БухИт44.Субконто(ВидыСубконто.СтатьиИздержекОбращения);
			Операция.Сумма = СуммаСписания * Коэффициент;
		    Списано = Списано + Операция.Сумма;
			НомерПроводки = Операция.НомерПроводки();
			
			// Списание постоянных разниц.
			//Если ПостоянныеРазницы <> 0 Тогда NDline
			//	УчтеноБазыРаспределения = УчтеноБазыРаспределения + ТаблицаБазыРаспределения.БазаРаспределения;
			//	ДолжноБытьСписано  = ПостоянныеРазницы * УчтеноБазыРаспределения / БазаРаспределения;
			//	СписатьПР = ДолжноБытьСписано - СписаноПостоянныхРазниц;
			//	Если СписатьПР <> 0 Тогда
			//		СчетНПР = глПолучитьСчетДебетаНПР(Операция.Дебет.Счет, Операция.Дебет.ВидыНоменклатуры);
			//		
			//		Операция.НоваяПроводка(); Операция.РазделительУчета = ЮрЛицо;
			//		Операция.НомерЖурнала = "ПР";
			//		Операция.СодержаниеПроводки = "Списание постоянных налоговых разниц";
			//		Если ПустоеЗначение(СчетНПР) = 0 Тогда
			//			Операция.Дебет.Счет = СчетНПР;
			//		КонецЕсли;
			//		Операция.Кредит.Счет = СчНПР_44_1;
			//		Операция.Кредит.СтатьиИздержекОбращения = БухИт44.Субконто(ВидыСубконто.СтатьиИздержекОбращения);
			//		Операция.Сумма = СписатьПР;
			//		СписаноПостоянныхРазниц = СписаноПостоянныхРазниц + Операция.Сумма;
			//		НомерПроводкиПР = Операция.НомерПроводки();
			//	КонецЕсли;
			//КонецЕсли; NDline
			
			// Формирование печатной формы                                            	
			Если ФормироватьПечатнуюФорму = 1 Тогда
				
				РасшифровкаРаспределенияРасходов = ТаблицаРасшифровкаРегламентнойОперации.РасшифровкаРаспределенияРасходов.Получить("Таблица данных");
				
				РасшифровкаРаспределенияРасходов.НоваяСтрока();
				РасшифровкаРаспределенияРасходов.ВидНоменклатуры   = ВидД; //NDline РасшифровкаРаспределенияРасходов.ВидНоменклатуры   = ТаблицаБазыРаспределения.ВидНоменклатуры;
				РасшифровкаРаспределенияРасходов.ВсегоРасходов     = СуммаСписания;
				РасшифровкаРаспределенияРасходов.БазаРаспределения = ТаблицаБазыРаспределения.БазаРаспределения;
				РасшифровкаРаспределенияРасходов.Коэффициент       = Коэффициент;
				РасшифровкаРаспределенияРасходов.СуммаРасходов     = Операция.Сумма;
			КонецЕсли;
			
		//КонецЦикла; NDline
		
		// В результате округления при распределении может остаться
		// несписанной несколько копеек, поэтому добавим эту несписанную
		// сумму к последней проводке.
		Если (Списано <> СуммаСписания) и (Списано <> 0) Тогда
			//корректируем последнюю проводку по бух.учету
			Если НомерПроводкиПР <> 0 Тогда
				Если Операция.ПолучитьПроводкуПоНомеру(НомерПроводки,) = 1 Тогда
					Операция.Сумма = Операция.Сумма + СуммаСписания - Списано;
					Операция.ПолучитьПроводкуПоНомеру(Операция.КоличествоПроводок());
				КонецЕсли; 
			Иначе      
				Операция.Сумма = Операция.Сумма + СуммаСписания - Списано;
			КонецЕсли;
			
			// Формирование печатной формы                                            	
			Если ФормироватьПечатнуюФорму = 1 Тогда
				РасшифровкаРаспределенияРасходов.СуммаРасходов = Операция.Сумма;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры // РаспределениеИздержекОбращения()

//******************************************************************************
// ЗакрытиеСчета44_1_1()
//
// Параметры:
//  Нет.
//
// Вызывается из формул элементов диалога:
//  Нет.
//
// Описание:
//  Здесь описывается процедура.
//
Процедура ЗакрытиеСчета44_1_1()                 
	
	Сч44_1_1   = СчетПоКоду("44.1.1");
	Сч90_7_1   = СчетПоКоду("90.7.1");
	
	// Если ранее на счет 44.1.1 были отнесены расходы,
	// то проводки документа следует записать.
	Если Операция.КоличествоПроводок() > 0 Тогда
		Операция.ЗаписатьПроводки();
	КонецЕсли;
	
	// Формирование печатной формы
	Если ФормироватьПечатнуюФорму = 1 Тогда
		НаименованиеРегламентнойОперации = "Закрытие счета 44.1.1 ""Издержки обращения в организациях, осуществляющих торговую деятельность, не облагаемую ЕНВД""";
		Таб.ВывестиСекцию("РегламентнаяОперация");
		ИнициализироватьРасшифровкуПоЗакрытиюСчета44();
	КонецЕсли;
	
	Если БухИтЗаМесяц.СКД(Сч44_1_1) <> 0 Тогда // если есть на счете сальдо, то будем счет закрывать
		
		ТекстСообщения = "Закрытие счета 44.1.1. База распределения - выручка по товарам, отраженная по кредиту счета 90.1.1 за минусом налогов.";
		глСообщениеПроведения(ТекстСообщения, ТекущийДокумент(), 0);
		
		// Получим базу распределения расходов (за исключением транспортных)
		ТаблицаБазыРаспределения = БазаРаспределенияСчет44_1_1();
		
		//Если ТаблицаБазыРаспределения.Итог("БазаРаспределения") > 0 Тогда // если нет базы распределения, то автоматически закрыть счет невозможно NDline
			РаспределениеИздержекОбращения(Сч44_1_1, Сч90_7_1, ТаблицаБазыРаспределения);
			
		//Иначе NDline
		//	ТекстСообщения = "Счет 44.1.1 автоматически распределить невозможно, т.к. база распределения расходов равна нулю.
		//				     |База распределения - выручка по товарам, отраженная по кредиту счета 90.1.1 за минусом налогов";
		//	глНеПроводить(Контекст, ТекстСообщения);
		//КонецЕсли; NDline
	КонецЕсли;
	
	// Формирование печатной формы
	Если ФормироватьПечатнуюФорму = 1 Тогда
		Если ТаблицаРасшифровкаРегламентнойОперации.КоличествоСтрок() > 0 Тогда
			Расшифровка = СоздатьОбъект("СписокЗначений");
			Расшифровка.ДобавитьЗначение("ЗакрытиеСчета44", "Наименование таблицы");
			Расшифровка.ДобавитьЗначение(ТаблицаРасшифровкаРегламентнойОперации, "Таблица данных");
			Расшифровка.ДобавитьЗначение(ДатаДок, "Дата операции");
			Расшифровка.ДобавитьЗначение("44.1.1", "Дополнительные данные");
			
			НаименованиеРегламентнойПодоперации = "Закрытие счета 44.1.1 ""Издержки обращения в организациях, осуществляющих торговую деятельность, не облагаемую ЕНВД""";
			Таб.ВывестиСекцию("ПодоперацияВыполнена");
			
		Иначе
			НаименованиеРегламентнойПодоперации = "По счету 44.1.1 ""Издержки обращения в организациях, осуществляющих торговую деятельность, не облагаемую ЕНВД"" расходов нет";
			Таб.ВывестиСекцию("ПодоперацияНеВыполнена");    
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ЗакрытиеСчета44_1_1()

//******************************************************************************
// ЗакрытиеСчета44_1_2()
//
// Параметры:
//  Нет.
//
// Вызывается из формул элементов диалога:
//  Нет.
//
// Описание:
//  Здесь описывается процедура.
//
Процедура ЗакрытиеСчета44_1_2()
	
	Сч44_1_2   = СчетПоКоду("44.1.2");
	Сч90_7_2   = СчетПоКоду("90.7.2");
	
	// Если ранее на счет 44.1.2 были отнесены расходы,
	// то проводки документа следует записать.
	Если Операция.КоличествоПроводок() > 0 Тогда
		Операция.ЗаписатьПроводки();
	КонецЕсли;
	
	// Формирование печатной формы
	Если ФормироватьПечатнуюФорму = 1 Тогда
		НаименованиеРегламентнойОперации = "Закрытие счета 44.1.2 ""Издержки обращения в организациях, осуществляющих торговую деятельность, облагаемую ЕНВД""";
		Таб.ВывестиСекцию("РегламентнаяОперация");
		ИнициализироватьРасшифровкуПоЗакрытиюСчета44();
	КонецЕсли;
	
	Если БухИтЗаМесяц.СКД(Сч44_1_2) <> 0 Тогда // если есть на счете сальдо, то будем счет закрывать
		
		ТекстСообщения = "Закрытие счета 44.1.2. База распределения - выручка по товарам, отраженная по кредиту счета 90.1.2.";
		глСообщениеПроведения(ТекстСообщения, ТекущийДокумент(), 0);
		
		// Получим базу распределения расходов (за исключением транспортных)
		ТаблицаБазыРаспределения = БазаРаспределенияСчет44_1_2();
		БазаРаспределения = ТаблицаБазыРаспределения.Итог("БазаРаспределения");
		
		Если БазаРаспределения > 0 Тогда // если нет базы распределения, то автоматически закрыть счет невозможно
			РаспределениеИздержекОбращения(Сч44_1_2, Сч90_7_2, ТаблицаБазыРаспределения);
			
		Иначе
			ТекстСообщения = "Счет 44.1.2 автоматически закрыть невозможно, т.к. база распределения расходов равна нулю.
						     |База распределения - выручка по товарам, отраженная по кредиту счета 90.1.2";
			глНеПроводить(Контекст, ТекстСообщения);
		КонецЕсли;
	КонецЕсли;
	
	// Формирование печатной формы
	Если ФормироватьПечатнуюФорму = 1 Тогда
		Если ТаблицаРасшифровкаРегламентнойОперации.КоличествоСтрок() > 0 Тогда
			Расшифровка = СоздатьОбъект("СписокЗначений");
			Расшифровка.ДобавитьЗначение("ЗакрытиеСчета44", "Наименование таблицы");
			Расшифровка.ДобавитьЗначение(ТаблицаРасшифровкаРегламентнойОперации, "Таблица данных");
			Расшифровка.ДобавитьЗначение(ДатаДок, "Дата операции");
			Расшифровка.ДобавитьЗначение("44.1.2", "Дополнительные данные");
			
			НаименованиеРегламентнойПодоперации = "Закрытие счета 44.1.2 ""Издержки обращения в организациях, осуществляющих торговую деятельность, облагаемую ЕНВД""";
			Таб.ВывестиСекцию("ПодоперацияВыполнена");
			
		Иначе
			НаименованиеРегламентнойПодоперации = "По счету 44.1.2 ""Издержки обращения в организациях, осуществляющих торговую деятельность, облагаемую ЕНВД"" расходов нет";
			Таб.ВывестиСекцию("ПодоперацияНеВыполнена");    
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ЗакрытиеСчета44_1_2()

//******************************************************************************
// ЗакрытиеСчета44_1_3()
//
// Параметры:
//  Нет.
//
// Вызывается из формул элементов диалога:
//  Нет.
//
// Описание:
//  Здесь описывается процедура.
//
Процедура ЗакрытиеСчета44_1_3()
	
	Сч44_1_3   = СчетПоКоду("44.1.3");
	Сч90_7_1   = СчетПоКоду("90.7.1");
	Сч90_7_2   = СчетПоКоду("90.7.2");
	СчНПР_44_1 = СчетПоКоду("НПР.44.1");
	
	// Если ранее на счет 44.1.3 были отнесены расходы,
	// то проводки документа следует записать.
	Если Операция.КоличествоПроводок() > 0 Тогда
		Операция.ЗаписатьПроводки();
	КонецЕсли;
	
	// Формирование печатной формы
	Если ФормироватьПечатнуюФорму = 1 Тогда
		НаименованиеРегламентнойОперации = "Закрытие счета 44.1.3 ""Издержки обращения в организациях, осуществляющих торговую деятельность, подлежащие распределению""";
		Таб.ВывестиСекцию("РегламентнаяОперация");
		ИнициализироватьРасшифровкуПоЗакрытиюСчета44();
	КонецЕсли;
	
	Если БухИтЗаМесяц.СКД(Сч44_1_3) <> 0 Тогда // если есть на счете сальдо, то будем счет закрывать
		
		ТекстСообщения = "Закрытие счета 44.1.3. База распределения - выручка по товарам, отраженная по кредиту счета 90.1 за минусом налогов.";
		глСообщениеПроведения(ТекстСообщения, ТекущийДокумент(), 0);
		
		// Получим базу распределения расходов (за исключением транспортных)
		ОбщаяТаблицаБазыРаспределения = БазаРаспределенияСчет44_1_3();
		БазаРаспределения = ОбщаяТаблицаБазыРаспределения.Итог("БазаРаспределения")
						  + ОбщаяТаблицаБазыРаспределения.Итог("БазаРаспределенияЕНВД");
						  
						  
		Если БазаРаспределения > 0 Тогда // если нет базы распределения, то автоматически закрыть счет невозможно
			
			// Некоторые виды расходов должны распределяться на виды номенклатуры
			// только в рамках деятельности не оплатагаемой ЕНВД.
			// Для таких видов создадим отдельную базу распределения.
			Если ОбщаяТаблицаБазыРаспределения.Итог("БазаРаспределенияЕНВД") = 0  Тогда
			    БазаРаспределенияНеЕНВД = ОбщаяТаблицаБазыРаспределения;
				
			Иначе
				БазаРаспределенияНеЕНВД = СоздатьОбъект("ТаблицаЗначений");
				ОбщаяТаблицаБазыРаспределения.Выгрузить(БазаРаспределенияНеЕНВД);
				
				// В таблице необходимо оставить только значимые строки.
				КоличествоСтрок = БазаРаспределенияНеЕНВД.КоличествоСтрок();
				Для СчетчикЦикла = 1 По КоличествоСтрок Цикл
					НомерСтрокиТаблицы = КоличествоСтрок - СчетчикЦикла + 1;
					
					Если БазаРаспределенияНеЕНВД.ПолучитьЗначение(НомерСтрокиТаблицы, "БазаРаспределения") > 0 Тогда
					Иначе
						БазаРаспределенияНеЕНВД.УдалитьСтроку(НомерСтрокиТаблицы);
					КонецЕсли;
					
				КонецЦикла;
				
			КонецЕсли;
			
			БухИт44 = СоздатьОбъект("БухгалтерскиеИтоги"); БухИт44.ИспользоватьРазделительУчета(ЮрЛицо);
			БухИт44.ИспользоватьСубконто(ВидыСубконто.СтатьиИздержекОбращения,,,);
			БухИт44.ВключатьСубсчета(-1,);
			БухИт44.ВыполнитьЗапрос(ДатаНач, ДатаКон, Сч44_1_3,,,,,);
			
			// Коэффициент списания для транспортных расходов
			КоэффициентСписанияТР = КоэффициентСписанияТранспортныхРасходов();
	
			БухИт44.ВыбратьСубконто(ВидыСубконто.СтатьиИздержекОбращения);
			Пока БухИт44.ПолучитьСубконто(ВидыСубконто.СтатьиИздержекОбращения) = 1 Цикл
				Если БухИт44.Субконто(ВидыСубконто.СтатьиИздержекОбращения).СписыватьИздержкиПропорциональноОстаткуТоваров.Получить(ДатаКон) = 1 Тогда
					СуммаСписания = Окр(КоэффициентСписанияТР * БухИт44.СКД(), 2);
				Иначе
					СуммаСписания = БухИт44.СКД();
				КонецЕсли;
				
				// Рассчитаем постоянные разницы
				ПостоянныеРазницы = СуммаПостоянныхРазниц(БухИт44, БухИт44.Субконто(ВидыСубконто.СтатьиИздержекОбращения),,, 1);
				
				// Формирование печатной формы                                            	
				Если ФормироватьПечатнуюФорму = 1 Тогда
					ТаблицаРасшифровкаРегламентнойОперации.НоваяСтрока();
					ТаблицаРасшифровкаРегламентнойОперации.СтатьяИздержек = БухИт44.Субконто(ВидыСубконто.СтатьиИздержекОбращения);
					ТаблицаРасшифровкаРегламентнойОперации.СуммаРасходовВсего = БухИт44.СКД();
					ТаблицаРасшифровкаРегламентнойОперации.СуммаКСписанию = СуммаСписания;
					ТаблицаРасшифровкаРегламентнойОперации.БазаРаспределения = БазаРаспределения;
					ТаблицаРасшифровкаРегламентнойОперации.СуммаСписания = СуммаСписания;
					
					// формирование расшифровки
					РасшифровкаПоСтатьеИздержек = СоздатьОбъект("СписокЗначений");
					ОсновнаяРасшифровкаОСВ.Выгрузить(РасшифровкаПоСтатьеИздержек);
					РасшифровкаПоСтатьеИздержек.Установить("Счет", Сч44_1_3);
					РасшифровкаПоСтатьеИздержек.Установить("ВидСубконто1", ВидыСубконто.СтатьиИздержекОбращения);
					РасшифровкаПоСтатьеИздержек.Установить("Субконто1", БухИт44.Субконто(ВидыСубконто.СтатьиИздержекОбращения));
					РасшифровкаПоСтатьеИздержек.Установить("ОтборСубконто1", 1);
					ТаблицаРасшифровкаРегламентнойОперации.РасшифровкаОборотноСальдоваяВедомостьПоСчету = РасшифровкаПоСтатьеИздержек;
					
					ТаблицаРасшифровкаРегламентнойОперации.РасшифровкаРаспределенияРасходов = РасшифровкаРаспределенияРасхдодовСчет44(БухИт44.Субконто(ВидыСубконто.СтатьиИздержекОбращения), 1);
				КонецЕсли;
				    
				// ЕСН относится только деятельности облагаемой ЕНВД.
				Если (БухИт44.Субконто(ВидыСубконто.СтатьиИздержекОбращения).ВидРасходовДляНалоговогоУчета = Перечисление.ГруппыВидыРасходов.ЕСН)
				   и (Константа.ПорядокИсчисленияЕСН.Получить(ДатаДок) > 1) Тогда
					ТаблицаБазыРаспределения = БазаРаспределенияНеЕНВД;
					
				Иначе
					ТаблицаБазыРаспределения = ОбщаяТаблицаБазыРаспределения;
				КонецЕсли;
				
				Списано = 0;
				УчтеноБазыРаспределения = 0; 
				СписаноПостоянныхРазниц = 0;
				НомерПроводки = 0;
				НомерПроводкиПР = 0;
				
				ТаблицаБазыРаспределения.ВыбратьСтроки();
				Пока ТаблицаБазыРаспределения.ПолучитьСтроку() = 1 Цикл
					Если ТаблицаБазыРаспределения.БазаРаспределения + ТаблицаБазыРаспределения.БазаРаспределенияЕНВД = 0 Тогда
						Продолжить; 
					КонецЕсли;
					
					Коэффициент = (ТаблицаБазыРаспределения.БазаРаспределения + ТаблицаБазыРаспределения.БазаРаспределенияЕНВД) / БазаРаспределения;
					
					Операция.НоваяПроводка(); Операция.РазделительУчета = ЮрЛицо;
					Операция.НомерЖурнала = "ФР";
					Операция.СодержаниеПроводки = "Списание счета 44.1.3";
					Операция.ПервичныйДокумент  = глПредставлениеПервичногоДокумента(Контекст);
					
					Если ТаблицаБазыРаспределения.БазаРаспределенияЕНВД > 0 Тогда
						Операция.Дебет.Счет = Сч90_7_2; 
					Иначе
						Операция.Дебет.Счет = Сч90_7_1; 
					КонецЕсли;
					
					Операция.Дебет.ВидыНоменклатуры = ТаблицаБазыРаспределения.ВидНоменклатуры;
					Операция.Кредит.Счет = Сч44_1_3;
					Операция.Кредит.СтатьиИздержекОбращения = БухИт44.Субконто(ВидыСубконто.СтатьиИздержекОбращения);
					Операция.Сумма = СуммаСписания * Коэффициент;
				    Списано = Списано + Операция.Сумма;
					НомерПроводки = Операция.НомерПроводки();
					
					// Списание постоянных разниц.
					Если ПостоянныеРазницы <> 0 Тогда
						УчтеноБазыРаспределения = УчтеноБазыРаспределения + ТаблицаБазыРаспределения.БазаРаспределения + ТаблицаБазыРаспределения.БазаРаспределенияЕНВД;
						ДолжноБытьСписано  = ПостоянныеРазницы * УчтеноБазыРаспределения / БазаРаспределения;
						СписатьПР = ДолжноБытьСписано - СписаноПостоянныхРазниц;
						Если СписатьПР <> 0 Тогда
							СчетНПР = глПолучитьСчетДебетаНПР(Операция.Дебет.Счет, Операция.Дебет.ВидыНоменклатуры);
							
							Операция.НоваяПроводка(); Операция.РазделительУчета = ЮрЛицо;
							Операция.НомерЖурнала = "ПР";
							Операция.СодержаниеПроводки = "Списание постоянных налоговых разниц";
							Если ПустоеЗначение(СчетНПР) = 0 Тогда
								Операция.Дебет.Счет = СчетНПР;
							КонецЕсли;
							Операция.Кредит.Счет = СчНПР_44_1;
							Операция.Кредит.СтатьиИздержекОбращения = БухИт44.Субконто(ВидыСубконто.СтатьиИздержекОбращения);
							Операция.Сумма = СписатьПР;
							СписаноПостоянныхРазниц = СписаноПостоянныхРазниц + Операция.Сумма;
							НомерПроводкиПР = Операция.НомерПроводки();
						КонецЕсли;
					КонецЕсли;
					
					// Формирование печатной формы                                            	
					Если ФормироватьПечатнуюФорму = 1 Тогда
						РасшифровкаРаспределенияРасходов = ТаблицаРасшифровкаРегламентнойОперации.РасшифровкаРаспределенияРасходов.Получить("Таблица данных");
						
						РасшифровкаРаспределенияРасходов.НоваяСтрока();
						РасшифровкаРаспределенияРасходов.ВидНоменклатуры   = ТаблицаБазыРаспределения.ВидНоменклатуры;
						РасшифровкаРаспределенияРасходов.ВсегоРасходов     = СуммаСписания;
						РасшифровкаРаспределенияРасходов.Коэффициент       = Коэффициент;
						
						Если ТаблицаБазыРаспределения.БазаРаспределенияЕНВД > 0 Тогда
							РасшифровкаРаспределенияРасходов.БазаРаспределенияЕНВД = ТаблицаБазыРаспределения.БазаРаспределенияЕНВД;
							РасшифровкаРаспределенияРасходов.СуммаРасходовЕНВД     = Операция.Сумма;
						Иначе
							РасшифровкаРаспределенияРасходов.БазаРаспределения = ТаблицаБазыРаспределения.БазаРаспределения;
							РасшифровкаРаспределенияРасходов.СуммаРасходов     = Операция.Сумма;
						КонецЕсли;
					КонецЕсли;
					
				КонецЦикла;
				
				// В результате округления при распределении может остаться
				// несписанной несколько копеек, поэтому добавим эту несписанную
				// сумму к последней проводке.
				Если (Списано <> СуммаСписания) и (Списано <> 0) Тогда
					//корректируем последнюю проводку по бух.учету
					Если НомерПроводкиПР <> 0 Тогда
						Если Операция.ПолучитьПроводкуПоНомеру(НомерПроводки,) = 1 Тогда
							Операция.Сумма = Операция.Сумма + СуммаСписания - Списано;
							Операция.ПолучитьПроводкуПоНомеру(Операция.КоличествоПроводок());
						КонецЕсли; 
					Иначе      
						Операция.Сумма = Операция.Сумма + СуммаСписания - Списано;
					КонецЕсли;
					
				// Формирование печатной формы                                            	
					Если ФормироватьПечатнуюФорму = 1 Тогда
						Если РасшифровкаРаспределенияРасходов.БазаРаспределенияЕНВД > 0 Тогда
							РасшифровкаРаспределенияРасходов.СуммаРасходовЕНВД = Операция.Сумма;
						Иначе
							РасшифровкаРаспределенияРасходов.СуммаРасходов     = Операция.Сумма;
						КонецЕсли;
					КонецЕсли;
					
				КонецЕсли;
			КонецЦикла;
			
		Иначе
			ТекстСообщения = "Счет 44.1.3 автоматически закрыть невозможно, т.к. база распределения расходов равна нулю.
						     |База распределения - выручка по товарам, отраженная  по кредиту счета 90.1 за минусом налогов";
			глНеПроводить(Контекст, ТекстСообщения);
		КонецЕсли;
	КонецЕсли;
	
	// Формирование печатной формы
	Если ФормироватьПечатнуюФорму = 1 Тогда
		Если ТаблицаРасшифровкаРегламентнойОперации.КоличествоСтрок() > 0 Тогда
			Расшифровка = СоздатьОбъект("СписокЗначений");
			Расшифровка.ДобавитьЗначение("ЗакрытиеСчета44", "Наименование таблицы");
			Расшифровка.ДобавитьЗначение(ТаблицаРасшифровкаРегламентнойОперации, "Таблица данных");
			Расшифровка.ДобавитьЗначение(ДатаДок, "Дата операции");
			Расшифровка.ДобавитьЗначение("44.1.3", "Дополнительные данные");
			
			НаименованиеРегламентнойПодоперации = "Закрытие счета 44.1.3 ""Издержки обращения в организациях, осуществляющих торговую деятельность, подлежащие распределению""";
			Таб.ВывестиСекцию("ПодоперацияВыполнена");
			
		Иначе
			НаименованиеРегламентнойПодоперации = "По счету 44.1.3 ""Издержки обращения в организациях, осуществляющих торговую деятельность, подлежащие распределению"" расходов нет";
			Таб.ВывестиСекцию("ПодоперацияНеВыполнена");    
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ЗакрытиеСчета44_1_3()

//******************************************************************************
// ЗакрытиеСчета44_2()
//
// Параметры:
//  Нет.
//
// Вызывается из формул элементов диалога:
//  Нет.
//
// Описание:
//  Здесь описывается процедура.
//
Процедура ЗакрытиеСчета44_2()
	
	Сч44_2   = СчетПоКоду("44.2");
	Сч90     = СчетПоКоду("90");
	Сч90_1_1 = СчетПоКоду("90.1.1");
	Сч90_1_2 = СчетПоКоду("90.1.2");
	Сч90_3   = СчетПоКоду("90.3");
	Сч90_4   = СчетПоКоду("90.4");
	Сч90_5   = СчетПоКоду("90.5");
	Сч90_6   = СчетПоКоду("90.6");
	Сч90_7_1 = СчетПоКоду("90.7.1");
	Сч90_7_2 = СчетПоКоду("90.7.2");
	
	// Если ранее на счет 44 были отнесены расходы,
	// то проводки документа следует записать.
	Если Операция.КоличествоПроводок() > 0 Тогда
		Операция.ЗаписатьПроводки();
	КонецЕсли;
	
	// Формирование печатной формы
	Если ФормироватьПечатнуюФорму = 1 Тогда
		НаименованиеРегламентнойОперации = "Закрытие счета 44.2 ""Коммерческие расходы в организациях, осуществляющих промышленную и иную производственную деятельность""";
		Таб.ВывестиСекцию("РегламентнаяОперация");
		ИнициализироватьРасшифровкуПоЗакрытиюСчета44();
	КонецЕсли;

	ТаблицаБазыРаспределения = СоздатьОбъект("ТаблицаЗначений");
	ТаблицаБазыРаспределения.НоваяКолонка("ВидНоменклатуры");
	ТаблицаБазыРаспределения.НоваяКолонка("БазаРаспределения");

	БухИт90 = СоздатьОбъект("БухгалтерскиеИтоги"); БухИт90.ИспользоватьРазделительУчета(ЮрЛицо);
	БухИт90.ИспользоватьСубконто(ВидыСубконто.ВидыНоменклатуры,,,);
	БухИт90.ВключатьСубсчета(-1,);
	БухИт90.ВыполнитьЗапрос(ДатаНач, ДатаКон, Сч90,,,,,);
	БухИт90.ВыбратьСубконто(ВидыСубконто.ВидыНоменклатуры);
	Пока БухИт90.ПолучитьСубконто(ВидыСубконто.ВидыНоменклатуры) = 1 Цикл
		Если (БухИт90.Субконто(ВидыСубконто.ВидыНоменклатуры).ТипНоменклатуры = Перечисление.ТипыНоменклатуры.Товар)
			или (БухИт90.Субконто(ВидыСубконто.ВидыНоменклатуры).ТипНоменклатуры = Перечисление.ТипыНоменклатуры.ПосредническаяУслуга) Тогда
		    Продолжить;
		КонецЕсли;
		
		Выручка = 0;
		БухИт90.ВыбратьСчета();
		Пока БухИт90.ПолучитьСчет() = 1 Цикл
			
			Если БухИт90.Субконто(ВидыСубконто.ВидыНоменклатуры).ТипНоменклатуры = Перечисление.ТипыНоменклатуры.УслугаЕНВД Тогда
			    Если БухИт90.Счет = Сч90_1_2 Тогда
					Выручка = Выручка + БухИт90.КО();
				КонецЕсли;
				
			Иначе
				Если БухИт90.Счет = Сч90_1_1 Тогда
					Выручка = Выручка + БухИт90.КО();
	
				ИначеЕсли (БухИт90.Счет = Сч90_3) или (БухИт90.Счет = Сч90_4)
					или (БухИт90.Счет = Сч90_5) или (БухИт90.Счет = Сч90_6) Тогда
					Выручка = Выручка - БухИт90.ДО();
				КонецЕсли;
			КонецЕсли;
			
		КонецЦикла;
			
		Если Выручка > 0 Тогда
		    ТаблицаБазыРаспределения.НоваяСтрока();
			ТаблицаБазыРаспределения.ВидНоменклатуры = БухИт90.Субконто(ВидыСубконто.ВидыНоменклатуры);
			ТаблицаБазыРаспределения.БазаРаспределения = Выручка;
		КонецЕсли;
	КонецЦикла;

	БазаРаспределения = ТаблицаБазыРаспределения.Итог("БазаРаспределения");
	
	БухИт44 = СоздатьОбъект("БухгалтерскиеИтоги"); БухИт44.ИспользоватьРазделительУчета(ЮрЛицо);
	БухИт44.ИспользоватьСубконто(ВидыСубконто.СтатьиКоммерческихРасходов,,,);
	БухИт44.ВыполнитьЗапрос(ДатаНач, ДатаКон, Сч44_2,,,,,);
	Если БухИт44.ВыбратьСубконто(ВидыСубконто.СтатьиКоммерческихРасходов) = 1 Тогда
		
		ТекстСообщения = "Закрытие счета 44.2. База распределения - выручка по продукции, работам, услугам, отраженная по кредиту счета 90.1.1 за минусом налогов.";
		глСообщениеПроведения(ТекстСообщения, ТекущийДокумент(), 0);
		
		Если БазаРаспределения > 0 Тогда
			Пока БухИт44.ПолучитьСубконто(ВидыСубконто.СтатьиКоммерческихРасходов) = 1 Цикл
				СуммаСписания = БухИт44.СКД();
				
				// Рассчитаем постоянные разницы
				ПостоянныеРазницы = СуммаПостоянныхРазниц(БухИт44, БухИт44.Субконто(ВидыСубконто.СтатьиКоммерческихРасходов),,, 1);
				
				// Формирование печатной формы                                            	
				Если ФормироватьПечатнуюФорму = 1 Тогда
					ТаблицаРасшифровкаРегламентнойОперации.НоваяСтрока();
					ТаблицаРасшифровкаРегламентнойОперации.СтатьяИздержек = БухИт44.Субконто(ВидыСубконто.СтатьиКоммерческихРасходов);
					ТаблицаРасшифровкаРегламентнойОперации.СуммаРасходовВсего = БухИт44.СКД();
					ТаблицаРасшифровкаРегламентнойОперации.СуммаКСписанию = СуммаСписания;
					ТаблицаРасшифровкаРегламентнойОперации.БазаРаспределения = БазаРаспределения;
					ТаблицаРасшифровкаРегламентнойОперации.СуммаСписания = СуммаСписания;
					
					// формирование расшифровки
					РасшифровкаПоСтатьеИздержек = СоздатьОбъект("СписокЗначений");
					ОсновнаяРасшифровкаОСВ.Выгрузить(РасшифровкаПоСтатьеИздержек);
					РасшифровкаПоСтатьеИздержек.Установить("Счет", Сч44_2);
					РасшифровкаПоСтатьеИздержек.Установить("ВидСубконто1", ВидыСубконто.СтатьиКоммерческихРасходов);
					РасшифровкаПоСтатьеИздержек.Установить("Субконто1", БухИт44.Субконто(ВидыСубконто.СтатьиКоммерческихРасходов));
					РасшифровкаПоСтатьеИздержек.Установить("ОтборСубконто1", 1);
					ТаблицаРасшифровкаРегламентнойОперации.РасшифровкаОборотноСальдоваяВедомостьПоСчету = РасшифровкаПоСтатьеИздержек;
					
					ТаблицаРасшифровкаРегламентнойОперации.РасшифровкаРаспределенияРасходов = РасшифровкаРаспределенияРасхдодовСчет44(БухИт44.Субконто(ВидыСубконто.СтатьиКоммерческихРасходов));
				КонецЕсли;
				
				Списано = 0;
				УчтеноБазыРаспределения = 0; 
				СписаноПостоянныхРазниц = 0;
				ТаблицаБазыРаспределения.ВыбратьСтроки();
				Пока ТаблицаБазыРаспределения.ПолучитьСтроку() = 1 Цикл
					
					Коэффициент = ТаблицаБазыРаспределения.БазаРаспределения / БазаРаспределения;
					
					Операция.НоваяПроводка(); Операция.РазделительУчета = ЮрЛицо;
					Операция.НомерЖурнала = "ФР";
					Операция.СодержаниеПроводки = "Списание счета 44.2";
					Операция.ПервичныйДокумент  = глПредставлениеПервичногоДокумента(Контекст);
					
					Если ТаблицаБазыРаспределения.ВидНоменклатуры.ТипНоменклатуры = Перечисление.ТипыНоменклатуры.УслугаЕНВД Тогда
						Операция.Дебет.Счет = Сч90_7_2;
					Иначе
						Операция.Дебет.Счет = Сч90_7_1;
					КонецЕсли;
					
					Операция.Дебет.ВидыНоменклатуры = ТаблицаБазыРаспределения.ВидНоменклатуры;
					Операция.Кредит.Счет = Сч44_2;
					Операция.Кредит.СтатьиКоммерческихРасходов = БухИт44.Субконто(ВидыСубконто.СтатьиКоммерческихРасходов);
					Операция.Сумма = СуммаСписания * Коэффициент;
				    Списано = Списано + Операция.Сумма;
					Если (ТаблицаБазыРаспределения.НомерСтроки = ТаблицаБазыРаспределения.КоличествоСтрок())
							и (Списано <> СуммаСписания) Тогда
					    Операция.Сумма = Операция.Сумма + СуммаСписания - Списано;
					КонецЕсли;
					
					// Формирование печатной формы                                            	
					Если ФормироватьПечатнуюФорму = 1 Тогда
						
						РасшифровкаРаспределенияРасходов = ТаблицаРасшифровкаРегламентнойОперации.РасшифровкаРаспределенияРасходов.Получить("Таблица данных");
						
						РасшифровкаРаспределенияРасходов.НоваяСтрока();
						РасшифровкаРаспределенияРасходов.ВидНоменклатуры   = ТаблицаБазыРаспределения.ВидНоменклатуры;
						РасшифровкаРаспределенияРасходов.ВсегоРасходов     = СуммаСписания;
						РасшифровкаРаспределенияРасходов.БазаРаспределения = ТаблицаБазыРаспределения.БазаРаспределения;
						РасшифровкаРаспределенияРасходов.Коэффициент       = Коэффициент;
						РасшифровкаРаспределенияРасходов.СуммаРасходов     = Операция.Сумма;
					КонецЕсли;
					
					// Списание постоянных разниц.
					Если ПостоянныеРазницы <> 0 Тогда
						УчтеноБазыРаспределения = УчтеноБазыРаспределения + ТаблицаБазыРаспределения.БазаРаспределения;
						ДолжноБытьСписано  = ПостоянныеРазницы * УчтеноБазыРаспределения / БазаРаспределения;
						СписатьПР = ДолжноБытьСписано - СписаноПостоянныхРазниц;
						Если СписатьПР <> 0 Тогда
							СчетНПР = глПолучитьСчетДебетаНПР(Операция.Дебет.Счет, Операция.Дебет.ВидыНоменклатуры);
							
							Операция.НоваяПроводка(); Операция.РазделительУчета = ЮрЛицо;
							Операция.НомерЖурнала = "ПР";
							Операция.СодержаниеПроводки = "Списание постоянных налоговых разниц";
							Если ПустоеЗначение(СчетНПР) = 0 Тогда
								Операция.Дебет.Счет = СчетНПР;
							КонецЕсли;
							Операция.Кредит.Счет = СчетПоКоду("НПР.44.2");
							Операция.Кредит.СтатьиКоммерческихРасходов = БухИт44.Субконто(ВидыСубконто.СтатьиКоммерческихРасходов);
							Операция.Сумма = СписатьПР;
							СписаноПостоянныхРазниц = СписаноПостоянныхРазниц + Операция.Сумма;
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;
			КонецЦикла;
			
		Иначе
			ТекстСообщения = "Счет 44.2 автоматически закрыть невозможно, т.к. база распределения расходов равна нулю.
						     |База распределения - выручка по продукции, работам, услугам, отраженная по кредиту счета 90.1.1 за минусом налогов";
			глНеПроводить(Контекст, ТекстСообщения);
		КонецЕсли;
	КонецЕсли;
	
	// Формирование печатной формы
	Если ФормироватьПечатнуюФорму = 1 Тогда
		Если ТаблицаРасшифровкаРегламентнойОперации.КоличествоСтрок() > 0 Тогда
			Расшифровка = СоздатьОбъект("СписокЗначений");
			Расшифровка.ДобавитьЗначение("ЗакрытиеСчета44", "Наименование таблицы");
			Расшифровка.ДобавитьЗначение(ТаблицаРасшифровкаРегламентнойОперации, "Таблица данных");
			Расшифровка.ДобавитьЗначение(ДатаДок, "Дата операции");
			Расшифровка.ДобавитьЗначение("44.2", "Дополнительные данные");
			
			НаименованиеРегламентнойПодоперации = "Закрытие счета 44.2 ""Коммерческие расходы в организациях, осуществляющих промышленную и иную производственную деятельность""";
			Таб.ВывестиСекцию("ПодоперацияВыполнена");
			
		Иначе
			НаименованиеРегламентнойПодоперации = "По счету 44.2 ""Коммерческие расходы в организациях, осуществляющих промышленную и иную производственную деятельность"" расходов нет";
			Таб.ВывестиСекцию("ПодоперацияНеВыполнена");    
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ЗакрытиеСчета44_2()

//******************************************************************************
// ЗакрытиеСчета44_3()
//
// Параметры:
//  Нет.
//
// Вызывается из формул элементов диалога:
//  Нет.
//
// Описание:
//  Здесь описывается процедура.
//
Процедура ЗакрытиеСчета44_3()
	
	Сч44_3   = СчетПоКоду("44.3");
	Сч90     = СчетПоКоду("90");
	Сч90_1_1 = СчетПоКоду("90.1.1");
	Сч90_1_2 = СчетПоКоду("90.1.2");
	Сч90_3   = СчетПоКоду("90.3");
	Сч90_4   = СчетПоКоду("90.4");
	Сч90_5   = СчетПоКоду("90.5");
	Сч90_6   = СчетПоКоду("90.6");
	Сч90_7_1 = СчетПоКоду("90.7.1");
	Сч90_7_2 = СчетПоКоду("90.7.2");
	
	// Если ранее на счет 44 были отнесены расходы,
	// то проводки документа следует записать.
	Если Операция.КоличествоПроводок() > 0 Тогда
		Операция.ЗаписатьПроводки();
	КонецЕсли;
	
	// Формирование печатной формы
	Если ФормироватьПечатнуюФорму = 1 Тогда
		НаименованиеРегламентнойОперации = "Закрытие счета 44.3 ""Расходы на продажу в организациях, осуществляющих заготовление и переработку сельскохозяйственной продукции""";
		Таб.ВывестиСекцию("РегламентнаяОперация");
		ИнициализироватьРасшифровкуПоЗакрытиюСчета44();
	КонецЕсли;

	ТаблицаБазыРаспределения = СоздатьОбъект("ТаблицаЗначений");
	ТаблицаБазыРаспределения.НоваяКолонка("ВидНоменклатуры");
	ТаблицаБазыРаспределения.НоваяКолонка("БазаРаспределения");

	БухИт90 = СоздатьОбъект("БухгалтерскиеИтоги"); БухИт90.ИспользоватьРазделительУчета(ЮрЛицо);
	БухИт90.ИспользоватьСубконто(ВидыСубконто.ВидыНоменклатуры,,,);
	БухИт90.ВключатьСубсчета(-1,);
	БухИт90.ВыполнитьЗапрос(ДатаНач, ДатаКон, Сч90,,,,,);
	БухИт90.ВыбратьСубконто(ВидыСубконто.ВидыНоменклатуры);
	Пока БухИт90.ПолучитьСубконто(ВидыСубконто.ВидыНоменклатуры) = 1 Цикл
		Если (БухИт90.Субконто(ВидыСубконто.ВидыНоменклатуры).ТипНоменклатуры = Перечисление.ТипыНоменклатуры.Товар)
			или (БухИт90.Субконто(ВидыСубконто.ВидыНоменклатуры).ТипНоменклатуры = Перечисление.ТипыНоменклатуры.ПосредническаяУслуга) Тогда
		    Продолжить;
		КонецЕсли;
		
		Выручка = 0;
		БухИт90.ВыбратьСчета();
		Пока БухИт90.ПолучитьСчет() = 1 Цикл
			
			Если БухИт90.Субконто(ВидыСубконто.ВидыНоменклатуры).ТипНоменклатуры = Перечисление.ТипыНоменклатуры.УслугаЕНВД Тогда
			    Если БухИт90.Счет = Сч90_1_2 Тогда
					Выручка = Выручка + БухИт90.КО();
				КонецЕсли;
				
			Иначе
				Если БухИт90.Счет = Сч90_1_1 Тогда
					Выручка = Выручка + БухИт90.КО();
	
				ИначеЕсли (БухИт90.Счет = Сч90_3) или (БухИт90.Счет = Сч90_4)
					или (БухИт90.Счет = Сч90_5) или (БухИт90.Счет = Сч90_6) Тогда
					Выручка = Выручка - БухИт90.ДО();
				КонецЕсли;
			КонецЕсли;
			
		КонецЦикла;
			
		Если Выручка > 0 Тогда
		    ТаблицаБазыРаспределения.НоваяСтрока();
			ТаблицаБазыРаспределения.ВидНоменклатуры = БухИт90.Субконто(ВидыСубконто.ВидыНоменклатуры);
			ТаблицаБазыРаспределения.БазаРаспределения = Выручка;
		КонецЕсли;
	КонецЦикла;

	БазаРаспределения = ТаблицаБазыРаспределения.Итог("БазаРаспределения");

	БухИт44 = СоздатьОбъект("БухгалтерскиеИтоги"); БухИт44.ИспользоватьРазделительУчета(ЮрЛицо);
	БухИт44.ИспользоватьСубконто(ВидыСубконто.СтатьиРасходовНаПродажу,,,);
	БухИт44.ВыполнитьЗапрос(ДатаНач, ДатаКон, Сч44_3,,,,,);
	Если БухИт44.ВыбратьСубконто(ВидыСубконто.СтатьиРасходовНаПродажу) = 1 Тогда
		
		ТекстСообщения = "Закрытие счета 44.3. База распределения - выручка по продукции, работам, услугам, отраженная по кредиту счета 90.1.1 за минусом налогов.";
		глСообщениеПроведения(ТекстСообщения, ТекущийДокумент(), 0);
		
		Если БазаРаспределения > 0 Тогда
			Пока БухИт44.ПолучитьСубконто(ВидыСубконто.СтатьиРасходовНаПродажу) = 1 Цикл
				СуммаСписания = БухИт44.СКД();
				
				// Рассчитаем постоянные разницы
				ПостоянныеРазницы = СуммаПостоянныхРазниц(БухИт44, БухИт44.Субконто(ВидыСубконто.СтатьиРасходовНаПродажу),,, 1);
				
				// Формирование печатной формы                                            	
				Если ФормироватьПечатнуюФорму = 1 Тогда
					ТаблицаРасшифровкаРегламентнойОперации.НоваяСтрока();
					ТаблицаРасшифровкаРегламентнойОперации.СтатьяИздержек = БухИт44.Субконто(ВидыСубконто.СтатьиРасходовНаПродажу);
					ТаблицаРасшифровкаРегламентнойОперации.СуммаРасходовВсего = БухИт44.СКД();
					ТаблицаРасшифровкаРегламентнойОперации.СуммаКСписанию = СуммаСписания;
					ТаблицаРасшифровкаРегламентнойОперации.БазаРаспределения = БазаРаспределения;
					ТаблицаРасшифровкаРегламентнойОперации.СуммаСписания = СуммаСписания;
					
					// формирование расшифровки
					РасшифровкаПоСтатьеИздержек = СоздатьОбъект("СписокЗначений");
					ОсновнаяРасшифровкаОСВ.Выгрузить(РасшифровкаПоСтатьеИздержек);
					РасшифровкаПоСтатьеИздержек.Установить("Счет", Сч44_3);
					РасшифровкаПоСтатьеИздержек.Установить("ВидСубконто1", ВидыСубконто.СтатьиРасходовНаПродажу);
					РасшифровкаПоСтатьеИздержек.Установить("Субконто1", БухИт44.Субконто(ВидыСубконто.СтатьиРасходовНаПродажу));
					РасшифровкаПоСтатьеИздержек.Установить("ОтборСубконто1", 1);
					ТаблицаРасшифровкаРегламентнойОперации.РасшифровкаОборотноСальдоваяВедомостьПоСчету = РасшифровкаПоСтатьеИздержек;
					
					ТаблицаРасшифровкаРегламентнойОперации.РасшифровкаРаспределенияРасходов = РасшифровкаРаспределенияРасхдодовСчет44(БухИт44.Субконто(ВидыСубконто.СтатьиРасходовНаПродажу));
				КонецЕсли;
				
				Списано = 0;
				УчтеноБазыРаспределения = 0; 
				СписаноПостоянныхРазниц = 0;
				ТаблицаБазыРаспределения.ВыбратьСтроки();
				Пока ТаблицаБазыРаспределения.ПолучитьСтроку() = 1 Цикл
					
					Коэффициент = ТаблицаБазыРаспределения.БазаРаспределения / БазаРаспределения;
					
					Операция.НоваяПроводка(); Операция.РазделительУчета = ЮрЛицо;
					Операция.НомерЖурнала = "ФР";
					Операция.СодержаниеПроводки = "Списание счета 44.3";
					Операция.ПервичныйДокумент  = глПредставлениеПервичногоДокумента(Контекст);
					
					Если ТаблицаБазыРаспределения.ВидНоменклатуры.ТипНоменклатуры = Перечисление.ТипыНоменклатуры.УслугаЕНВД Тогда
						Операция.Дебет.Счет = Сч90_7_2;
					Иначе
						Операция.Дебет.Счет = Сч90_7_1;
					КонецЕсли;
					
					Операция.Дебет.ВидыНоменклатуры = ТаблицаБазыРаспределения.ВидНоменклатуры;
					Операция.Кредит.Счет = Сч44_3;
					Операция.Кредит.СтатьиРасходовНаПродажу = БухИт44.Субконто(ВидыСубконто.СтатьиРасходовНаПродажу);
					Операция.Сумма = СуммаСписания * ТаблицаБазыРаспределения.БазаРаспределения / БазаРаспределения;
				    Списано = Списано + Операция.Сумма;
					Если (ТаблицаБазыРаспределения.НомерСтроки = ТаблицаБазыРаспределения.КоличествоСтрок())
							и (Списано <> СуммаСписания) Тогда
					    Операция.Сумма = Операция.Сумма + СуммаСписания - Списано;
					КонецЕсли;
					
					// Формирование печатной формы                                            	
					Если ФормироватьПечатнуюФорму = 1 Тогда
						
						РасшифровкаРаспределенияРасходов = ТаблицаРасшифровкаРегламентнойОперации.РасшифровкаРаспределенияРасходов.Получить("Таблица данных");
						
						РасшифровкаРаспределенияРасходов.НоваяСтрока();
						РасшифровкаРаспределенияРасходов.ВидНоменклатуры   = ТаблицаБазыРаспределения.ВидНоменклатуры;
						РасшифровкаРаспределенияРасходов.ВсегоРасходов     = СуммаСписания;
						РасшифровкаРаспределенияРасходов.БазаРаспределения = ТаблицаБазыРаспределения.БазаРаспределения;
						РасшифровкаРаспределенияРасходов.Коэффициент       = Коэффициент;
						РасшифровкаРаспределенияРасходов.СуммаРасходов     = Операция.Сумма;
					КонецЕсли;
					
					// Списание постоянных разниц.
					Если ПостоянныеРазницы <> 0 Тогда
						УчтеноБазыРаспределения = УчтеноБазыРаспределения + ТаблицаБазыРаспределения.БазаРаспределения;
						ДолжноБытьСписано  = ПостоянныеРазницы * УчтеноБазыРаспределения / БазаРаспределения;
						СписатьПР = ДолжноБытьСписано - СписаноПостоянныхРазниц;
						Если СписатьПР <> 0 Тогда
							СчетНПР = глПолучитьСчетДебетаНПР(Операция.Дебет.Счет, Операция.Дебет.ВидыНоменклатуры);
							
							Операция.НоваяПроводка(); Операция.РазделительУчета = ЮрЛицо;
							Операция.НомерЖурнала = "ПР";
							Операция.СодержаниеПроводки = "Списание постоянных налоговых разниц";
							Если ПустоеЗначение(СчетНПР) = 0 Тогда
								Операция.Дебет.Счет = СчетНПР;
							КонецЕсли;
							Операция.Кредит.Счет = СчетПоКоду("НПР.44.3");
							Операция.Кредит.СтатьиРасходовНаПродажу = БухИт44.Субконто(ВидыСубконто.СтатьиРасходовНаПродажу);
							Операция.Сумма = СписатьПР;
							СписаноПостоянныхРазниц = СписаноПостоянныхРазниц + Операция.Сумма;
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;
			КонецЦикла;
		Иначе
			ТекстСообщения = "Счет 44.3 автоматически закрыть невозможно, т.к. база распределения расходов равна нулю.
						     |База распределения - выручка по продукции, работам, услугам, отраженная по кредиту счета 90.1.1 за минусом налогов";
			глНеПроводить(Контекст, ТекстСообщения);
		КонецЕсли;
	КонецЕсли;
	
	// Формирование печатной формы
	Если ФормироватьПечатнуюФорму = 1 Тогда
		Если ТаблицаРасшифровкаРегламентнойОперации.КоличествоСтрок() > 0 Тогда
			Расшифровка = СоздатьОбъект("СписокЗначений");
			Расшифровка.ДобавитьЗначение("ЗакрытиеСчета44", "Наименование таблицы");
			Расшифровка.ДобавитьЗначение(ТаблицаРасшифровкаРегламентнойОперации, "Таблица данных");
			Расшифровка.ДобавитьЗначение(ДатаДок, "Дата операции");
			Расшифровка.ДобавитьЗначение("44.3", "Дополнительные данные");
			
			НаименованиеРегламентнойПодоперации = "Закрытие счета 44.3 ""Расходы на продажу в организациях, осуществляющих заготовление и переработку сельскохозяйственной продукции""";
			Таб.ВывестиСекцию("ПодоперацияВыполнена");
			
		Иначе
			НаименованиеРегламентнойПодоперации = "По счету 44.3 ""Расходы на продажу в организациях, осуществляющих заготовление и переработку сельскохозяйственной продукции"" расходов нет";
			Таб.ВывестиСекцию("ПодоперацияНеВыполнена");    
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ЗакрытиеСчета44_3()

//******************************************************************************
// ЗакрытиеСчета90()
//
// Параметры:
//  Нет.
//
// Вызывается из формул элементов диалога:
//  Нет.
//
// Описание:
//  Здесь описывается процедура.
//
Процедура ЗакрытиеСчета90()
	
	Сч90_1_1 = СчетПоКоду("90.1.1");
	Сч90_1_2 = СчетПоКоду("90.1.2");
	Сч90_2_1 = СчетПоКоду("90.2.1");
	Сч90_2_2 = СчетПоКоду("90.2.2");
	Сч90_3   = СчетПоКоду("90.3");
	Сч90_4   = СчетПоКоду("90.4");
	Сч90_5   = СчетПоКоду("90.5");
	Сч90_6   = СчетПоКоду("90.6");
	Сч90_7_1 = СчетПоКоду("90.7.1");
	Сч90_7_2 = СчетПоКоду("90.7.2");
	Сч90_8_1 = СчетПоКоду("90.8.1");
	Сч90_8_2 = СчетПоКоду("90.8.2");
	Сч90_9   = СчетПоКоду("90.9");
	Сч99_1   = СчетПоКоду("99.1");
	
	//Если ранее на счет 90 были списаны управленческие расходы или расходы на продажу, 
	//а также отнесены на себестоимость производственные затраты, 
	//запишем проводки, чтобы учесть эти суммы при закрытии счета 90
	Если Операция.КоличествоПроводок() > 0 Тогда
		Операция.ЗаписатьПроводки();
	КонецЕсли;
	
	// Формирование печатной формы
	Если ФормироватьПечатнуюФорму = 1 Тогда
		НаименованиеРегламентнойОперации = "Закрытие счета 90 ""Продажи""";
		Таб.ВывестиСекцию("РегламентнаяОперация");
	КонецЕсли;

	ФинансовыйРезультат = БухИтЗаМесяц.КО(Сч90_1_1) - БухИтЗаМесяц.ДО(Сч90_2_1) - БухИтЗаМесяц.ДО(Сч90_3) - БухИтЗаМесяц.ДО(Сч90_4) 
							- БухИтЗаМесяц.ДО(Сч90_5) - БухИтЗаМесяц.ДО(Сч90_6) - БухИтЗаМесяц.ДО(Сч90_7_1) - БухИтЗаМесяц.ДО(Сч90_8_1);
	Если ФинансовыйРезультат > 0 Тогда
		Операция.НоваяПроводка(); Операция.РазделительУчета = ЮрЛицо;
		Операция.НомерЖурнала = "ФР";
		Операция.СодержаниеПроводки = "Прибыль(деят,не обл.ЕНВД)";
		Операция.ПервичныйДокумент  = глПредставлениеПервичногоДокумента(Контекст);
		Операция.Дебет.Счет = Сч90_9;
		Операция.Кредит.Счет = Сч99_1;
		Операция.Кредит.ПрибылиИУбытки = Перечисление.ПрибылиИУбытки.ПрибыльУбытокОтПродаж;
		Операция.Сумма = ФинансовыйРезультат;
	КонецЕсли;
	Если ФинансовыйРезультат < 0 Тогда
		Операция.НоваяПроводка(); Операция.РазделительУчета = ЮрЛицо;
		Операция.НомерЖурнала = "ФР";
		Операция.СодержаниеПроводки = "Убыток(деят,не обл.ЕНВД)";
		Операция.ПервичныйДокумент  = глПредставлениеПервичногоДокумента(Контекст);
		Операция.Дебет.Счет = Сч99_1;
		Операция.Дебет.ПрибылиИУбытки = Перечисление.ПрибылиИУбытки.ПрибыльУбытокОтПродаж;
		Операция.Кредит.Счет = Сч90_9;
		Операция.Сумма = - ФинансовыйРезультат;
	КонецЕсли;

	ФинансовыйРезультатЕНВД = БухИтЗаМесяц.КО(Сч90_1_2) - БухИтЗаМесяц.ДО(Сч90_2_2) - БухИтЗаМесяц.ДО(Сч90_7_2) - БухИтЗаМесяц.ДО(Сч90_8_2);
	Если ФинансовыйРезультатЕНВД > 0 Тогда
		Операция.НоваяПроводка(); Операция.РазделительУчета = ЮрЛицо;
		Операция.НомерЖурнала = "ФР";
		Операция.СодержаниеПроводки = "Прибыль (деят., обл.ЕНВД)";
		Операция.ПервичныйДокумент  = глПредставлениеПервичногоДокумента(Контекст);
		Операция.Дебет.Счет = Сч90_9;
		Операция.Кредит.Счет = Сч99_1;
		Операция.Кредит.ПрибылиИУбытки = Перечисление.ПрибылиИУбытки.ПрибыльУбытокОтПродаж;
		Операция.Сумма = ФинансовыйРезультатЕНВД;
	КонецЕсли;
	Если ФинансовыйРезультатЕНВД < 0 Тогда
		Операция.НоваяПроводка(); Операция.РазделительУчета = ЮрЛицо;
		Операция.НомерЖурнала = "ФР";
		Операция.СодержаниеПроводки = "Убыток (деят., обл.ЕНВД)";
		Операция.ПервичныйДокумент  = глПредставлениеПервичногоДокумента(Контекст);
		Операция.Дебет.Счет = Сч99_1;
		Операция.Дебет.ПрибылиИУбытки = Перечисление.ПрибылиИУбытки.ПрибыльУбытокОтПродаж;
		Операция.Кредит.Счет = Сч90_9;
		Операция.Сумма = - ФинансовыйРезультатЕНВД;
	КонецЕсли;
	
КонецПроцедуры // ЗакрытиеСчета90()

//******************************************************************************
// ЗакрытиеСчета91()
//
// Параметры:
//  Нет.
//
// Вызывается из формул элементов диалога:
//  Нет.
//
// Описание:
//  Здесь описывается процедура.
//
Процедура ЗакрытиеСчета91()
	
	Сч91_1 = СчетПоКоду("91.1");
	Сч91_2 = СчетПоКоду("91.2");
	Сч91_9 = СчетПоКоду("91.9");
	Сч99_1 = СчетПоКоду("99.1");
	
	Если Операция.КоличествоПроводок() > 0 Тогда
		Операция.ЗаписатьПроводки();
	КонецЕсли;
	
	// Формирование печатной формы
	Если ФормироватьПечатнуюФорму = 1 Тогда
		НаименованиеРегламентнойОперации = "Закрытие счета 91 ""Прочие доходы и расходы""";
		Таб.ВывестиСекцию("РегламентнаяОперация");
	КонецЕсли;
	
	СальдоПрочихДоходовРасходов = БухИтЗаМесяц.КО(Сч91_1) - БухИтЗаМесяц.ДО(Сч91_2);
	Если СальдоПрочихДоходовРасходов > 0 Тогда
		Операция.НоваяПроводка(); Операция.РазделительУчета = ЮрЛицо;
		Операция.НомерЖурнала = "ФР";
		Операция.СодержаниеПроводки = "Прибыль";
		Операция.ПервичныйДокумент  = глПредставлениеПервичногоДокумента(Контекст);
		Операция.Дебет.Счет = Сч91_9;
		Операция.Кредит.Счет = Сч99_1;
		Операция.Кредит.ПрибылиИУбытки = Перечисление.ПрибылиИУбытки.СальдоПрочихДоходовРасходов;
		Операция.Сумма = СальдоПрочихДоходовРасходов;
	КонецЕсли;
	Если СальдоПрочихДоходовРасходов < 0 Тогда
		Операция.НоваяПроводка(); Операция.РазделительУчета = ЮрЛицо;
		Операция.НомерЖурнала = "ФР";
		Операция.СодержаниеПроводки = "Убыток";
		Операция.ПервичныйДокумент  = глПредставлениеПервичногоДокумента(Контекст);
		Операция.Дебет.Счет = Сч99_1;
		Операция.Дебет.ПрибылиИУбытки = Перечисление.ПрибылиИУбытки.СальдоПрочихДоходовРасходов;
		Операция.Кредит.Счет = Сч91_9;
		Операция.Сумма = - СальдоПрочихДоходовРасходов;
	КонецЕсли;
	
КонецПроцедуры // ЗакрытиеСчета91()

//******************************************************************************
// РеформацияБаланса()
//
// Параметры:
//  Нет.
//
// Вызывается из формул элементов диалога:
//  Нет.
//
// Описание:
//  Здесь описывается процедура.
//
Процедура РеформацияБаланса()
	
	Сч84_1   = СчетПоКоду("84.1");
	Сч84_2   = СчетПоКоду("84.2");
	Сч90_1_1 = СчетПоКоду("90.1.1");
	Сч90_1_2 = СчетПоКоду("90.1.2");
	Сч90_2_1 = СчетПоКоду("90.2.1");
	Сч90_2_2 = СчетПоКоду("90.2.2");
	Сч90_3   = СчетПоКоду("90.3");
	Сч90_4   = СчетПоКоду("90.4");
	Сч90_5   = СчетПоКоду("90.5");
	Сч90_6   = СчетПоКоду("90.6");
	Сч90_7_1 = СчетПоКоду("90.7.1");
	Сч90_7_2 = СчетПоКоду("90.7.2");
	Сч90_8_1 = СчетПоКоду("90.8.1");
	Сч90_8_2 = СчетПоКоду("90.8.2");
	Сч90_9   = СчетПоКоду("90.9");
	Сч91_1   = СчетПоКоду("91.1");
	Сч91_2   = СчетПоКоду("91.2");
	Сч91_9   = СчетПоКоду("91.9");
	Сч99     = СчетПоКоду("99");
	Сч99_1   = СчетПоКоду("99.1");
	Сч99_2_1 = СчетПоКоду("99.2.1");
	Сч99_2_2 = СчетПоКоду("99.2.2");
	Сч99_2_3 = СчетПоКоду("99.2.3");
	
	Если ДатаМесяц(ДатаДок) = 12 Тогда
		Если Операция.КоличествоПроводок() > 0 Тогда
			Операция.ЗаписатьПроводки();
		КонецЕсли;
		
		// Формирование печатной формы
		Если ФормироватьПечатнуюФорму = 1 Тогда
			НаименованиеРегламентнойОперации = "Реформация баланса";
			Таб.ВывестиСекцию("РегламентнаяОперация");
		КонецЕсли;

		// Закрытие счета 90.
		Если БухИтЗаМесяц.СКК(Сч90_1_1) > 0 Тогда
			Операция.НоваяПроводка(); Операция.РазделительУчета = ЮрЛицо;
			Операция.НомерЖурнала = "ФР";
			Операция.СодержаниеПроводки = "Реформация баланса";
			Операция.ПервичныйДокумент  = глПредставлениеПервичногоДокумента(Контекст);
			Операция.Дебет.Счет = Сч90_1_1;
			Операция.Кредит.Счет = Сч90_9;
			Операция.Сумма = БухИтЗаМесяц.СКК(Сч90_1_1);
		КонецЕсли;
		Если БухИтЗаМесяц.СКК(Сч90_1_2) > 0 Тогда
			Операция.НоваяПроводка(); Операция.РазделительУчета = ЮрЛицо;
			Операция.НомерЖурнала = "ФР";
			Операция.СодержаниеПроводки = "Реформация баланса";
			Операция.ПервичныйДокумент  = глПредставлениеПервичногоДокумента(Контекст);
			Операция.Дебет.Счет = Сч90_1_2;
			Операция.Кредит.Счет = Сч90_9;
			Операция.Сумма = БухИтЗаМесяц.СКК(Сч90_1_2);
		КонецЕсли;
		Если БухИтЗаМесяц.СКД(Сч90_2_1) > 0 Тогда
			Операция.НоваяПроводка(); Операция.РазделительУчета = ЮрЛицо;
			Операция.НомерЖурнала = "ФР";
			Операция.СодержаниеПроводки = "Реформация баланса";
			Операция.ПервичныйДокумент  = глПредставлениеПервичногоДокумента(Контекст);
			Операция.Дебет.Счет = Сч90_9;
			Операция.Кредит.Счет = Сч90_2_1;
			Операция.Сумма = БухИтЗаМесяц.СКД(Сч90_2_1);
		КонецЕсли;
		Если БухИтЗаМесяц.СКД(Сч90_2_2) > 0 Тогда
			Операция.НоваяПроводка(); Операция.РазделительУчета = ЮрЛицо;
			Операция.НомерЖурнала = "ФР";
			Операция.СодержаниеПроводки = "Реформация баланса";
			Операция.ПервичныйДокумент  = глПредставлениеПервичногоДокумента(Контекст);
			Операция.Дебет.Счет = Сч90_9;
			Операция.Кредит.Счет = Сч90_2_2;
			Операция.Сумма = БухИтЗаМесяц.СКД(Сч90_2_2);
		КонецЕсли;
		Если БухИтЗаМесяц.СКД(Сч90_3) > 0 Тогда
			Операция.НоваяПроводка(); Операция.РазделительУчета = ЮрЛицо;
			Операция.НомерЖурнала = "ФР";
			Операция.СодержаниеПроводки = "Реформация баланса";
			Операция.ПервичныйДокумент  = глПредставлениеПервичногоДокумента(Контекст);
			Операция.Дебет.Счет = Сч90_9;
			Операция.Кредит.Счет = Сч90_3;
			Операция.Сумма = БухИтЗаМесяц.СКД(Сч90_3);
		КонецЕсли;
		Если БухИтЗаМесяц.СКД(Сч90_4) > 0 Тогда
			Операция.НоваяПроводка(); Операция.РазделительУчета = ЮрЛицо;
			Операция.НомерЖурнала = "ФР";
			Операция.СодержаниеПроводки = "Реформация баланса";
			Операция.ПервичныйДокумент  = глПредставлениеПервичногоДокумента(Контекст);
			Операция.Дебет.Счет = Сч90_9;
			Операция.Кредит.Счет = Сч90_4;
			Операция.Сумма = БухИтЗаМесяц.СКД(Сч90_4);
		КонецЕсли;
		Если БухИтЗаМесяц.СКД(Сч90_5) > 0 Тогда
			Операция.НоваяПроводка(); Операция.РазделительУчета = ЮрЛицо;
			Операция.НомерЖурнала = "ФР";
			Операция.СодержаниеПроводки = "Реформация баланса";
			Операция.ПервичныйДокумент  = глПредставлениеПервичногоДокумента(Контекст);
			Операция.Дебет.Счет = Сч90_9;
			Операция.Кредит.Счет = Сч90_5;
			Операция.Сумма = БухИтЗаМесяц.СКД(Сч90_5);
		КонецЕсли;
		Если БухИтЗаМесяц.СКД(Сч90_6) > 0 Тогда
			Операция.НоваяПроводка(); Операция.РазделительУчета = ЮрЛицо;
			Операция.НомерЖурнала = "ФР";
			Операция.СодержаниеПроводки = "Реформация баланса";
			Операция.ПервичныйДокумент  = глПредставлениеПервичногоДокумента(Контекст);
			Операция.Дебет.Счет = Сч90_9;
			Операция.Кредит.Счет = Сч90_6;
			Операция.Сумма = БухИтЗаМесяц.СКД(Сч90_6);
		КонецЕсли;
		Если БухИтЗаМесяц.СКД(Сч90_7_1) > 0 Тогда
			Операция.НоваяПроводка(); Операция.РазделительУчета = ЮрЛицо;
			Операция.НомерЖурнала = "ФР";
			Операция.СодержаниеПроводки = "Реформация баланса";
			Операция.ПервичныйДокумент  = глПредставлениеПервичногоДокумента(Контекст);
			Операция.Дебет.Счет = Сч90_9;
			Операция.Кредит.Счет = Сч90_7_1;
			Операция.Сумма = БухИтЗаМесяц.СКД(Сч90_7_1);
		КонецЕсли;
		Если БухИтЗаМесяц.СКД(Сч90_7_2) > 0 Тогда
			Операция.НоваяПроводка(); Операция.РазделительУчета = ЮрЛицо;
			Операция.НомерЖурнала = "ФР";
			Операция.СодержаниеПроводки = "Реформация баланса";
			Операция.ПервичныйДокумент  = глПредставлениеПервичногоДокумента(Контекст);
			Операция.Дебет.Счет = Сч90_9;
			Операция.Кредит.Счет = Сч90_7_2;
			Операция.Сумма = БухИтЗаМесяц.СКД(Сч90_7_2);
		КонецЕсли;
		Если БухИтЗаМесяц.СКД(Сч90_8_1) > 0 Тогда
			Операция.НоваяПроводка(); Операция.РазделительУчета = ЮрЛицо;
			Операция.НомерЖурнала = "ФР";
			Операция.СодержаниеПроводки = "Реформация баланса";
			Операция.ПервичныйДокумент  = глПредставлениеПервичногоДокумента(Контекст);
			Операция.Дебет.Счет = Сч90_9;
			Операция.Кредит.Счет = Сч90_8_1;
			Операция.Сумма = БухИтЗаМесяц.СКД(Сч90_8_1);
		КонецЕсли;
		Если БухИтЗаМесяц.СКД(Сч90_8_2) > 0 Тогда
			Операция.НоваяПроводка(); Операция.РазделительУчета = ЮрЛицо;
			Операция.НомерЖурнала = "ФР";
			Операция.СодержаниеПроводки = "Реформация баланса";
			Операция.ПервичныйДокумент  = глПредставлениеПервичногоДокумента(Контекст);
			Операция.Дебет.Счет = Сч90_9;
			Операция.Кредит.Счет = Сч90_8_2;
			Операция.Сумма = БухИтЗаМесяц.СКД(Сч90_8_2);
		КонецЕсли;
		
		//Закрытие счета 91.
		Если БухИтЗаМесяц.СКК(Сч91_1) > 0 Тогда
			Операция.НоваяПроводка(); Операция.РазделительУчета = ЮрЛицо;
			Операция.НомерЖурнала = "ФР";
			Операция.СодержаниеПроводки = "Реформация баланса";
			Операция.ПервичныйДокумент  = глПредставлениеПервичногоДокумента(Контекст);
			Операция.Дебет.Счет = Сч91_1;                                                  
			Операция.Кредит.Счет = Сч91_9;
			Операция.Сумма = БухИтЗаМесяц.СКК(Сч91_1);
		КонецЕсли;
		Если БухИтЗаМесяц.СКД(Сч91_2) > 0 Тогда
			Операция.НоваяПроводка(); Операция.РазделительУчета = ЮрЛицо;
			Операция.НомерЖурнала = "ФР";
			Операция.СодержаниеПроводки = "Реформация баланса";
			Операция.ПервичныйДокумент  = глПредставлениеПервичногоДокумента(Контекст);
			Операция.Дебет.Счет = Сч91_9;
			Операция.Кредит.Счет = Сч91_2;
			Операция.Сумма = БухИтЗаМесяц.СКД(Сч91_2);
		КонецЕсли;
		                   
		//Закрытие счета 99.
		Если БухИтЗаМесяц.СКД(Сч99_2_1) > 0 Тогда
		    Операция.НоваяПроводка(); Операция.РазделительУчета = ЮрЛицо;
			Операция.НомерЖурнала = "ФР";
			Операция.СодержаниеПроводки = "Реформация баланса";
			Операция.ПервичныйДокумент  = глПредставлениеПервичногоДокумента(Контекст);
			Операция.Дебет.Счет = Сч99_1;
			Операция.Кредит.Счет = Сч99_2_1;
			Операция.Сумма = БухИтЗаМесяц.СКД(Сч99_2_1);
			
		ИначеЕсли БухИтЗаМесяц.СКД(Сч99_2_1) < 0 Тогда
		    Операция.НоваяПроводка(); Операция.РазделительУчета = ЮрЛицо;
			Операция.НомерЖурнала = "ФР";
			Операция.СодержаниеПроводки = "Реформация баланса";
			Операция.ПервичныйДокумент  = глПредставлениеПервичногоДокумента(Контекст);
			Операция.Дебет.Счет = Сч99_2_1;
			Операция.Кредит.Счет = Сч99_1;
			Операция.Сумма = -БухИтЗаМесяц.СКД(Сч99_2_1);
		КонецЕсли;
		
		Если БухИтЗаМесяц.СКК(Сч99_2_2) > 0 Тогда
		    Операция.НоваяПроводка(); Операция.РазделительУчета = ЮрЛицо;
			Операция.НомерЖурнала = "ФР";
			Операция.СодержаниеПроводки = "Реформация баланса";
			Операция.ПервичныйДокумент  = глПредставлениеПервичногоДокумента(Контекст);
			Операция.Дебет.Счет = Сч99_2_2;
			Операция.Кредит.Счет = Сч99_1;
			Операция.Сумма = БухИтЗаМесяц.СКК(Сч99_2_2);
			
		ИначеЕсли БухИтЗаМесяц.СКК(Сч99_2_2) < 0 Тогда
		    Операция.НоваяПроводка(); Операция.РазделительУчета = ЮрЛицо;
			Операция.НомерЖурнала = "ФР";
			Операция.СодержаниеПроводки = "Реформация баланса";
			Операция.ПервичныйДокумент  = глПредставлениеПервичногоДокумента(Контекст);
			Операция.Дебет.Счет = Сч99_1;
			Операция.Кредит.Счет = Сч99_2_2;
			Операция.Сумма = -БухИтЗаМесяц.СКК(Сч99_2_2);
		КонецЕсли;
		
		Если БухИтЗаМесяц.СКД(Сч99_2_3) > 0 Тогда
		    Операция.НоваяПроводка(); Операция.РазделительУчета = ЮрЛицо;
			Операция.НомерЖурнала = "ФР";
			Операция.СодержаниеПроводки = "Реформация баланса";
			Операция.ПервичныйДокумент  = глПредставлениеПервичногоДокумента(Контекст);
			Операция.Кредит.Счет = Сч99_2_3;
			Операция.Дебет.Счет = Сч99_1;
			Операция.Сумма = БухИтЗаМесяц.СКД(Сч99_2_3);
			
		ИначеЕсли БухИтЗаМесяц.СКД(Сч99_2_3) < 0 Тогда
		    Операция.НоваяПроводка(); Операция.РазделительУчета = ЮрЛицо;
			Операция.НомерЖурнала = "ФР";
			Операция.СодержаниеПроводки = "Реформация баланса";
			Операция.ПервичныйДокумент  = глПредставлениеПервичногоДокумента(Контекст);
			Операция.Дебет.Счет = Сч99_2_3;
			Операция.Кредит.Счет = Сч99_1;
			Операция.Сумма = -БухИтЗаМесяц.СКД(Сч99_2_3);
		КонецЕсли;
		
		Если БухИтЗаМесяц.СКК(Сч99) > 0 Тогда // доходы
		    Операция.НоваяПроводка(); Операция.РазделительУчета = ЮрЛицо;
			Операция.НомерЖурнала = "ФР";
			Операция.СодержаниеПроводки = "Реформация баланса";
			Операция.ПервичныйДокумент  = глПредставлениеПервичногоДокумента(Контекст);
			Операция.Дебет.Счет = Сч99_1;
			Операция.Кредит.Счет = Сч84_1;
			Операция.Сумма = БухИтЗаМесяц.СКК(Сч99);
			
		ИначеЕсли БухИтЗаМесяц.СКД(Сч99) > 0 Тогда // расходы
		    Операция.НоваяПроводка(); Операция.РазделительУчета = ЮрЛицо;
			Операция.НомерЖурнала = "ФР";
			Операция.СодержаниеПроводки = "Реформация баланса";
			Операция.ПервичныйДокумент  = глПредставлениеПервичногоДокумента(Контекст);
			Операция.Кредит.Счет = Сч99_1;
			Операция.Дебет.Счет = Сч84_2;
			Операция.Сумма = БухИтЗаМесяц.СКД(Сч99);
		КонецЕсли;
		          
		// Закрытие счета НБ
		Если БухИтЗаМесяц.СКК("НБ") > 0 Тогда
		    Операция.НоваяПроводка(); Операция.РазделительУчета = ЮрЛицо;
			Операция.НомерЖурнала = "ФР";
			Операция.СодержаниеПроводки = "Закрытие счета НБ в конце года";
			Операция.ПервичныйДокумент  = глПредставлениеПервичногоДокумента(Контекст);
			Операция.Дебет.Счет = СчетПоКоду("НБ");
			Операция.Сумма = БухИтЗаМесяц.СКК("НБ");
		КонецЕсли;
		
		// Закрытие счета КВР.УТ
		Если БухИтЗаМесяц.СКК("КВР.УТ") > 0 Тогда
		    Операция.НоваяПроводка(); Операция.РазделительУчета = ЮрЛицо;
			Операция.НомерЖурнала = "ПР";
			Операция.СодержаниеПроводки = "Закрытие счета КВР.УТ в конце года";
			Операция.ПервичныйДокумент  = глПредставлениеПервичногоДокумента(Контекст);
			Операция.Дебет.Счет = СчетПоКоду("КВР.УТ");
			Операция.Сумма = БухИтЗаМесяц.СКК("КВР.УТ");
			
		ИначеЕсли БухИтЗаМесяц.СКД("КВР.УТ") > 0 Тогда
		    Операция.НоваяПроводка(); Операция.РазделительУчета = ЮрЛицо;
			Операция.НомерЖурнала = "ПР";
			Операция.СодержаниеПроводки = "Закрытие счета КВР.УТ в конце года";
			Операция.ПервичныйДокумент  = глПредставлениеПервичногоДокумента(Контекст);
			Операция.Кредит.Счет = СчетПоКоду("КВР.УТ");
			Операция.Сумма = БухИтЗаМесяц.СКД("КВР.УТ");
		КонецЕсли; 
		
		Если (Константа.ПрименяетсяПБУ18.Получить(ДатаДок) = Да) Тогда
			//Закрытие счета НПР.99
			Если БухИтЗаМесяц.СКД("НПР.99") > 0 Тогда
				Операция.НоваяПроводка(); Операция.РазделительУчета = ЮрЛицо;
				Операция.НомерЖурнала = "ПР";
				Операция.СодержаниеПроводки = "Закрытие счета НПР.99 в конце года";
				Операция.ПервичныйДокумент  = глПредставлениеПервичногоДокумента(Контекст);
				Операция.Кредит.Счет = СчетПоКоду("НПР.99");
				Операция.Сумма = БухИтЗаМесяц.СКД("НПР.99");
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // РеформацияБаланса()

//******************************************************************************
// ПостоянныеРазницыПоУбыткамПрошлыхЛет()
//
// Параметры:
//  Нет.
//
// Возвращаемое значение:
//  Здесь описывается возвращаемое значение.
//
// Вызывается из формул элементов диалога:
//  Нет.
//
// Описание:
//  Здесь описывается функция.
//
Функция ПостоянныеРазницыПоУбыткамПрошлыхЛет()
	
	БухИтСНачалаГода = СоздатьОбъект("БухгалтерскиеИтоги"); БухИтСНачалаГода.ИспользоватьРазделительУчета(ЮрЛицо);
	БухИтСНачалаГода.ПериодМНГ(ДатаКон);
	
	ПостояннеРазницы = -БухИтСНачалаГода.СНД("НПР.УП");
	
	Возврат ПостояннеРазницы;
	
КонецФункции // ПостоянныеРазницыПоУбыткамПрошлыхЛет()

//******************************************************************************
// УбыткиПрошлыхЛет(ТипРазниц)
//
Функция УбыткиПрошлыхЛет()
	
	БухИтСНачалаГода = СоздатьОбъект("БухгалтерскиеИтоги"); БухИтСНачалаГода.ИспользоватьРазделительУчета(ЮрЛицо);
	БухИтСНачалаГода.ПериодМНГ(ДатаКон);
	
	// сумма убытка за 1999г.
	Сумма = БухИтСНачалаГода.СНД("Н11.99")
		  + БухИтСНачалаГода.СНД("Н11.00")
		  + БухИтСНачалаГода.СНД("Н11.01")
		  + БухИтСНачалаГода.СНД("Н11.02");
		  
	НомерГода = 2004;
	Пока НомерГода <= ДатаГод(ДатаДок) Цикл
		КодСчета = "Н11." + Прав(НомерГода-1, 2);
		Если СчетПоКоду(КодСчета).Выбран() = 1 Тогда
		    Сумма = Сумма + БухИтСНачалаГода.СНД(КодСчета);
		КонецЕсли;
		НомерГода = НомерГода + 1;
	КонецЦикла;
	
	Сумма = Макс(Сумма, 0);
	
	Возврат Сумма;
	
КонецФункции // УбыткиПрошлыхЛет()

//******************************************************************************
// НаименованиеСчета()
//
Функция НаименованиеСчета(КодСчета, Субконто)
	
	Наименование = КодСчета + " """ + СчетПоКоду(КодСчета).ПолнНаименование + """";
	
	Если ПустоеЗначение(Субконто) = 0 Тогда
	    Наименование = Наименование + " (" + Субконто + ")";
	КонецЕсли;
	
	Возврат Наименование;
	
КонецФункции // НаименованиеСчета()

//******************************************************************************
// ДобавитьСтрокуРасшифровкиНБ()
//
// Параметры:
//  Нет.
//
// Вызывается из формул элементов диалога:
//  Нет.
//
// Описание:
//  Здесь описывается процедура.
//
Процедура ДобавитьСтрокуРасшифровкиНБ(ПризнакДоход, КодСчета, ВидСубконто = "", Субконто = "", Сумма, РасшифровкаНалоговойБазы);
	
	Если Сумма <> 0 Тогда
		
		РасшифровкаНалоговойБазы.НоваяСтрока();
		РасшифровкаНалоговойБазы.Счет = НаименованиеСчета(КодСчета, Субконто);
		
		Если ПризнакДоход = 1 Тогда // доход
			РасшифровкаНалоговойБазы.Доход = Сумма;
			
		Иначе // расход
			РасшифровкаНалоговойБазы.Расход = Сумма;
		КонецЕсли;
		
		Расшифровка = СоздатьОбъект("СписокЗначений");
		ОсновнаяРасшифровкаОСВ.Выгрузить(Расшифровка);
		Расшифровка.Установить("Дата1", НачГода(ДатаДок));
		Расшифровка.Установить("Счет", СчетПоКоду(КодСчета));
		Расшифровка.Установить("ВидСубконто1", ВидСубконто);
		Расшифровка.Установить("Субконто1", Субконто);
		Расшифровка.Установить("ОтборСубконто1", 1);
		РасшифровкаНалоговойБазы.РасшифровкаОборотноСальдоваяВедомостьПоСчету = Расшифровка;
		
	КонецЕсли;
	
КонецПроцедуры // ДобавитьСтрокуРасшифровкиНБ()

//******************************************************************************
// ФормированиеРасшифровкиНалоговойБазы()
//
// Параметры:
//  Нет.
//
// Вызывается из формул элементов диалога:
//  Нет.
//
// Описание:
//  Здесь описывается процедура.
//
Процедура ФормированиеРасшифровкиНалоговойБазы(ТаблицаРасшифровка)
	
	БухИтСНачалаГода = СоздатьОбъект("БухгалтерскиеИтоги"); БухИтСНачалаГода.ИспользоватьРазделительУчета(ЮрЛицо);
	БухИтСНачалаГода.ПериодМНГ(ДатаДок);
	
	ТаблицаРасшифровка.РасшифровкаНалоговойБазы= РасшифровкаНалоговойБазы();
	РасшифровкаНалоговойБазы = ТаблицаРасшифровка.РасшифровкаНалоговойБазы.Получить("Таблица данных");
    
	// Доход
	ДобавитьСтрокуРасшифровкиНБ(1, "Н06",,, БухИтСНачалаГода.КО("Н06"), РасшифровкаНалоговойБазы);
	ДобавитьСтрокуРасшифровкиНБ(1, "Н06.01",ВидыСубконто.УсловияПоступленияИВыбытия, Перечисление.УсловияПоступленияИВыбытия.НеОблагается, - БухИтСНачалаГода.КО("Н06.01",,,, Перечисление.УсловияПоступленияИВыбытия.НеОблагается), РасшифровкаНалоговойБазы);
	ДобавитьСтрокуРасшифровкиНБ(1, "Н06.02",ВидыСубконто.УсловияПоступленияИВыбытия, Перечисление.УсловияПоступленияИВыбытия.НеОблагается, - БухИтСНачалаГода.КО("Н06.02",,,, Перечисление.УсловияПоступленияИВыбытия.НеОблагается), РасшифровкаНалоговойБазы);
	ДобавитьСтрокуРасшифровкиНБ(1, "Н06.03",ВидыСубконто.УсловияПоступленияИВыбытия, Перечисление.УсловияПоступленияИВыбытия.НеОблагается, - БухИтСНачалаГода.КО("Н06.03",,, Перечисление.УсловияПоступленияИВыбытия.НеОблагается), РасшифровкаНалоговойБазы);
	ДобавитьСтрокуРасшифровкиНБ(1, "Н06.04",ВидыСубконто.УсловияПоступленияИВыбытия, Перечисление.УсловияПоступленияИВыбытия.НеОблагается, - БухИтСНачалаГода.КО("Н06.04",,,, Перечисление.УсловияПоступленияИВыбытия.НеОблагается), РасшифровкаНалоговойБазы);
	ДобавитьСтрокуРасшифровкиНБ(1, "Н06.05",ВидыСубконто.УсловияПоступленияИВыбытия, Перечисление.УсловияПоступленияИВыбытия.НеОблагается, - БухИтСНачалаГода.КО("Н06.05",,,, Перечисление.УсловияПоступленияИВыбытия.НеОблагается), РасшифровкаНалоговойБазы);
	ДобавитьСтрокуРасшифровкиНБ(1, "Н06.06",ВидыСубконто.УсловияПоступленияИВыбытия, Перечисление.УсловияПоступленияИВыбытия.НеОблагается, - БухИтСНачалаГода.КО("Н06.06",,,, Перечисление.УсловияПоступленияИВыбытия.НеОблагается), РасшифровкаНалоговойБазы);
	ДобавитьСтрокуРасшифровкиНБ(1, "Н06.07",ВидыСубконто.УсловияПоступленияИВыбытия, Перечисление.УсловияПоступленияИВыбытия.НеОблагается, - БухИтСНачалаГода.КО("Н06.07",,,, Перечисление.УсловияПоступленияИВыбытия.НеОблагается), РасшифровкаНалоговойБазы);
	ДобавитьСтрокуРасшифровкиНБ(1, "Н06.08",ВидыСубконто.УсловияПоступленияИВыбытия, Перечисление.УсловияПоступленияИВыбытия.НеОблагается, - БухИтСНачалаГода.КО("Н06.08",,,, Перечисление.УсловияПоступленияИВыбытия.НеОблагается), РасшифровкаНалоговойБазы);
	ДобавитьСтрокуРасшифровкиНБ(1, "Н06.09",ВидыСубконто.УсловияПоступленияИВыбытия, Перечисление.УсловияПоступленияИВыбытия.НеОблагается, - БухИтСНачалаГода.КО("Н06.09",,,, Перечисление.УсловияПоступленияИВыбытия.НеОблагается), РасшифровкаНалоговойБазы);
	ДобавитьСтрокуРасшифровкиНБ(1, "Н06.10",ВидыСубконто.УсловияПоступленияИВыбытия, Перечисление.УсловияПоступленияИВыбытия.НеОблагается, - БухИтСНачалаГода.КО("Н06.10",,, Перечисление.УсловияПоступленияИВыбытия.НеОблагается), РасшифровкаНалоговойБазы);
	ДобавитьСтрокуРасшифровкиНБ(1, "Н06.11",ВидыСубконто.УсловияПоступленияИВыбытия, Перечисление.УсловияПоступленияИВыбытия.НеОблагается, - БухИтСНачалаГода.КО("Н06.11",,,, Перечисление.УсловияПоступленияИВыбытия.НеОблагается), РасшифровкаНалоговойБазы);
	ДобавитьСтрокуРасшифровкиНБ(1, "Н08",,, БухИтСНачалаГода.КО("Н08"), РасшифровкаНалоговойБазы);
	ДобавитьСтрокуРасшифровкиНБ(1, "Н08",ВидыСубконто.ВнереализационныеДоходы, Перечисление.ВнереализационныеДоходы.НеПринимаемые, - БухИтСНачалаГода.КО("Н08",,, Перечисление.ВнереализационныеДоходы.НеПринимаемые), РасшифровкаНалоговойБазы);
	
	// Расход
	ДобавитьСтрокуРасшифровкиНБ(0, "Н07",,, БухИтСНачалаГода.ДО("Н07"), РасшифровкаНалоговойБазы);
	ДобавитьСтрокуРасшифровкиНБ(0, "Н07.04.2",,, - БухИтСНачалаГода.ДО("Н07.04.2"), РасшифровкаНалоговойБазы);
	ДобавитьСтрокуРасшифровкиНБ(0, "Н07.04.1",ВидыСубконто.ГруппыВидыРасходов, Перечисление.ГруппыВидыРасходов.НеПринимаемые, - БухИтСНачалаГода.ДО("Н07.04.1",,, Перечисление.ГруппыВидыРасходов.НеПринимаемые), РасшифровкаНалоговойБазы);
	ДобавитьСтрокуРасшифровкиНБ(0, "Н09",,, БухИтСНачалаГода.ДО("Н09"), РасшифровкаНалоговойБазы);
	ДобавитьСтрокуРасшифровкиНБ(0, "Н09",ВидыСубконто.ВнереализационныеРасходы, Перечисление.ВнереализационныеРасходы.НеПринимаемые,  - БухИтСНачалаГода.ДО("Н09",,, Перечисление.ВнереализационныеРасходы.НеПринимаемые), РасшифровкаНалоговойБазы);
	
	Дата1 = НачГода(ДатаДок);
	Дата2 = КонМесяца(ДатаДок);
	ИтСубк = СоздатьОбъект("БухгалтерскиеИтоги"); ИтСубк.ИспользоватьРазделительУчета(ЮрЛицо);
	
	ИтСубк.ИспользоватьСубконто(ВидыСубконто.ОсновныеСредства);
	ИтСубк.ВыполнитьЗапрос(Дата1, Дата2, "Н06.05, Н07.07",,,,, 1); 
	ИтСубк.ВыбратьСубконто();
	Пока ИтСубк.ПолучитьСубконто() = 1 Цикл
		КО06_05 = 0;
		ДО07_07 = 0;
		
		Если ИтСубк.ПолучитьСчет(, "Н06.05") = 1 Тогда
			КО06_05 = ИтСубк.КО();
		КонецЕсли;
		
		Если ИтСубк.ПолучитьСчет(, "Н07.07") = 1 Тогда
			ДО07_07 = ИтСубк.ДО();
		КонецЕсли;   
		
		Если (КО06_05 - ДО07_07) < 0 Тогда
			ДобавитьСтрокуРасшифровкиНБ(1, "Н06.05", ВидыСубконто.ОсновныеСредства, ИтСубк.Субконто(), -КО06_05, РасшифровкаНалоговойБазы);
			ДобавитьСтрокуРасшифровкиНБ(0, "Н07.07", ВидыСубконто.ОсновныеСредства, ИтСубк.Субконто(), -ДО07_07, РасшифровкаНалоговойБазы);
		КонецЕсли;
	КонецЦикла;
	
	ИтСубк.ИспользоватьСубконто(ВидыСубконто.НематериальныеАктивы);
	ИтСубк.ВыполнитьЗапрос(Дата1, Дата2, " Н06.06, Н07.08"); 
	ИтСубк.ВыбратьСубконто();
	Пока ИтСубк.ПолучитьСубконто() = 1 Цикл
		КО06_06 = 0;
		ДО07_08 = 0;		
		
		Если ИтСубк.ПолучитьСчет(, "Н06.06") = 1 Тогда
			КО06_06 = ИтСубк.КО();
		КонецЕсли;
		
		Если ИтСубк.ПолучитьСчет(, "Н07.08") = 1 Тогда
			ДО07_08 = ИтСубк.ДО();
		КонецЕсли;   
		
		Если (КО06_06 - ДО07_08) < 0 Тогда
			ДобавитьСтрокуРасшифровкиНБ(1, "Н06.06", ВидыСубконто.НематериальныеАктивы, ИтСубк.Субконто(), -КО06_06, РасшифровкаНалоговойБазы);
			ДобавитьСтрокуРасшифровкиНБ(0, "Н07.08", ВидыСубконто.НематериальныеАктивы, ИтСубк.Субконто(), -ДО07_08, РасшифровкаНалоговойБазы);
		КонецЕсли;
	КонецЦикла;
	
	ИтСубк.ИспользоватьСубконто(ВидыСубконто.Договоры);
	ИтСубк.ВыполнитьЗапрос(Дата1, Дата2, "Н06.07, Н06.08, Н06.09, Н07.09, Н07.10, Н07.12, Н07.11"); 
	ИтСубк.ВыбратьСубконто();
	Пока ИтСубк.ПолучитьСубконто() = 1 Цикл
		
		КО06_07 = 0;
		ДО07_09 = 0;
		Если ИтСубк.ПолучитьСчет(, "Н06.07") = 1 Тогда
			КО06_07 = ИтСубк.КО();
		КонецЕсли;
		
		Если ИтСубк.ПолучитьСчет(, "Н07.09") = 1 Тогда
			ДО07_09 = ИтСубк.ДО();
		КонецЕсли;   
		
		Если (КО06_07 - ДО07_09) < 0 Тогда
			ДобавитьСтрокуРасшифровкиНБ(1, "Н06.07", ВидыСубконто.Договоры, ИтСубк.Субконто(), -КО06_07, РасшифровкаНалоговойБазы);
			ДобавитьСтрокуРасшифровкиНБ(0, "Н07.09", ВидыСубконто.Договоры, ИтСубк.Субконто(), -ДО07_09, РасшифровкаНалоговойБазы);
		КонецЕсли;         
		
		КО06_08 = 0;
		ДО07_10 = 0;
		ДО07_12 = 0;
		Если ИтСубк.ПолучитьСчет(, "Н06.08") = 1 Тогда
			КО06_08 = ИтСубк.КО();
		КонецЕсли;
		
		Если ИтСубк.ПолучитьСчет(, "Н07.10") = 1 Тогда
			ДО07_10 = ИтСубк.ДО();
		КонецЕсли;
		
		Если ИтСубк.ПолучитьСчет(, "Н07.12") = 1 Тогда
			ДО07_12 = ИтСубк.ДО();
		КонецЕсли;
		
		Если (КО06_08 - ДО07_10 + ДО07_12) < 0 Тогда
			ДобавитьСтрокуРасшифровкиНБ(1, "Н06.08", ВидыСубконто.Договоры, ИтСубк.Субконто(), -КО06_08, РасшифровкаНалоговойБазы);
			ДобавитьСтрокуРасшифровкиНБ(0, "Н07.10", ВидыСубконто.Договоры, ИтСубк.Субконто(), -ДО07_10, РасшифровкаНалоговойБазы);
			ДобавитьСтрокуРасшифровкиНБ(0, "Н07.12", ВидыСубконто.Договоры, ИтСубк.Субконто(), ДО07_12, РасшифровкаНалоговойБазы);
		КонецЕсли;              
		
		КО06_09 = 0;
		ДО07_11 = 0;
		Если ИтСубк.ПолучитьСчет(, "Н06.09") = 1 Тогда
			КО06_09 = ИтСубк.КО();
		КонецЕсли;
		
		Если ИтСубк.ПолучитьСчет(, "Н07.11") = 1 Тогда
			ДО07_11 = ИтСубк.ДО();
		КонецЕсли;   
		
		Если (КО06_09 - ДО07_11) < 0 Тогда
			ДобавитьСтрокуРасшифровкиНБ(1, "Н06.09", ВидыСубконто.Договоры, ИтСубк.Субконто(), -КО06_09, РасшифровкаНалоговойБазы);
			ДобавитьСтрокуРасшифровкиНБ(0, "Н07.11", ВидыСубконто.Договоры, ИтСубк.Субконто(), -ДО07_11, РасшифровкаНалоговойБазы);
		КонецЕсли;
		
	КонецЦикла;
	
	ДО07_13 = БухИтСНачалаГода.ДО("Н07.13");
	КО06_10 = БухИтСНачалаГода.КО("Н06.10");
	Если (КО06_10 - ДО07_13) < 0 Тогда
	    ДобавитьСтрокуРасшифровкиНБ(1, "Н06.10",,, -КО06_10, РасшифровкаНалоговойБазы);
		ДобавитьСтрокуРасшифровкиНБ(0, "Н07.13",,, -ДО07_13, РасшифровкаНалоговойБазы);
	КонецЕсли;
	
КонецПроцедуры // ФормированиеРасшифровкиНалоговойБазы()

//******************************************************************************
// БазаДляРасчетаНалогаНаПрибыль()
//
// Параметры:
//  Нет.
//
// Возвращаемое значение:
//  Здесь описывается возвращаемое значение.
//
// Вызывается из формул элементов диалога:
//  Нет.
//
// Описание:
//  Здесь описывается функция.
//
Функция БазаДляРасчетаНалогаНаПрибыль()
	
	БухИтСНачалаГода = СоздатьОбъект("БухгалтерскиеИтоги"); БухИтСНачалаГода.ИспользоватьРазделительУчета(ЮрЛицо);
	БухИтСНачалаГода.ПериодМНГ(ДатаДок);
	
	Доходы = БухИтСНачалаГода.КО("Н06") + БухИтСНачалаГода.КО("Н08")
		   - БухИтСНачалаГода.КО("Н06.01",,,, Перечисление.УсловияПоступленияИВыбытия.НеОблагается)
		   - БухИтСНачалаГода.КО("Н06.02",,,, Перечисление.УсловияПоступленияИВыбытия.НеОблагается)
		   - БухИтСНачалаГода.КО("Н06.03",,, Перечисление.УсловияПоступленияИВыбытия.НеОблагается)
		   - БухИтСНачалаГода.КО("Н06.04",,,, Перечисление.УсловияПоступленияИВыбытия.НеОблагается)
		   - БухИтСНачалаГода.КО("Н06.05",,,, Перечисление.УсловияПоступленияИВыбытия.НеОблагается)
		   - БухИтСНачалаГода.КО("Н06.06",,,, Перечисление.УсловияПоступленияИВыбытия.НеОблагается)
		   - БухИтСНачалаГода.КО("Н06.07",,,, Перечисление.УсловияПоступленияИВыбытия.НеОблагается)
		   - БухИтСНачалаГода.КО("Н06.08",,,, Перечисление.УсловияПоступленияИВыбытия.НеОблагается)
		   - БухИтСНачалаГода.КО("Н06.09",,,, Перечисление.УсловияПоступленияИВыбытия.НеОблагается)
		   - БухИтСНачалаГода.КО("Н06.10",,, Перечисление.УсловияПоступленияИВыбытия.НеОблагается)
		   - БухИтСНачалаГода.КО("Н06.11",,,, Перечисление.УсловияПоступленияИВыбытия.НеОблагается)
		   - БухИтСНачалаГода.КО("Н08",,, Перечисление.ВнереализационныеДоходы.НеПринимаемые);
		   
	Расходы = БухИтСНачалаГода.ДО("Н07") + БухИтСНачалаГода.ДО("Н09")
			- БухИтСНачалаГода.ДО("Н07.04.2")
			- БухИтСНачалаГода.ДО("Н07.04.1",,, Перечисление.ГруппыВидыРасходов.НеПринимаемые)
			- БухИтСНачалаГода.ДО("Н09",,, Перечисление.ВнереализационныеРасходы.НеПринимаемые);
			
	Дата1 = НачГода(ДатаДок);
	Дата2 = КонМесяца(ДатаДок);
	НеПринимаемые = 0;
	ИтСубк = СоздатьОбъект("БухгалтерскиеИтоги"); ИтСубк.ИспользоватьРазделительУчета(ЮрЛицо);
	
	ИтСубк.ИспользоватьСубконто(ВидыСубконто.ОсновныеСредства);
	ИтСубк.ВыполнитьЗапрос(Дата1, Дата2, "Н06.05, Н07.07",,,,, 1); 
	ИтСубк.ВыбратьСубконто();
	Пока ИтСубк.ПолучитьСубконто() = 1 Цикл
		КО06_05 = 0;
		ДО07_07 = 0;
		
		Если ИтСубк.ПолучитьСчет(, "Н06.05") = 1 Тогда
			КО06_05 = ИтСубк.КО();
		КонецЕсли;
		
		Если ИтСубк.ПолучитьСчет(, "Н07.07") = 1 Тогда
			ДО07_07 = ИтСубк.ДО();
		КонецЕсли;   
		
		Если (КО06_05 - ДО07_07) < 0 Тогда
			НеПринимаемые = НеПринимаемые - (КО06_05 - ДО07_07);
		КонецЕсли;
	КонецЦикла;
	
	ИтСубк.ИспользоватьСубконто(ВидыСубконто.НематериальныеАктивы);
	ИтСубк.ВыполнитьЗапрос(Дата1, Дата2, " Н06.06, Н07.08"); 
	ИтСубк.ВыбратьСубконто();
	Пока ИтСубк.ПолучитьСубконто() = 1 Цикл
		КО06_06 = 0;
		ДО07_08 = 0;		
		
		Если ИтСубк.ПолучитьСчет(, "Н06.06") = 1 Тогда
			КО06_06 = ИтСубк.КО();
		КонецЕсли;
		
		Если ИтСубк.ПолучитьСчет(, "Н07.08") = 1 Тогда
			ДО07_08 = ИтСубк.ДО();
		КонецЕсли;   
		
		Если (КО06_06 - ДО07_08) < 0 Тогда
			НеПринимаемые = НеПринимаемые - (КО06_06 - ДО07_08);
		КонецЕсли;
	КонецЦикла;
	
	ИтСубк.ИспользоватьСубконто(ВидыСубконто.Договоры);
	ИтСубк.ВыполнитьЗапрос(Дата1, Дата2, "Н06.07, Н06.08, Н06.09, Н07.09, Н07.10, Н07.12, Н07.11"); 
	ИтСубк.ВыбратьСубконто();
	Пока ИтСубк.ПолучитьСубконто() = 1 Цикл
		
		КО06_07 = 0;
		ДО07_09 = 0;
		Если ИтСубк.ПолучитьСчет(, "Н06.07") = 1 Тогда
			КО06_07 = ИтСубк.КО();
		КонецЕсли;
		
		Если ИтСубк.ПолучитьСчет(, "Н07.09") = 1 Тогда
			ДО07_09 = ИтСубк.ДО();
		КонецЕсли;   
		
		Если (КО06_07 - ДО07_09) < 0 Тогда
			НеПринимаемые = НеПринимаемые - (КО06_07 - ДО07_09);
		КонецЕсли;         
		
		КО06_08 = 0;
		ДО07_10 = 0;
		ДО07_12 = 0;
		Если ИтСубк.ПолучитьСчет(, "Н06.08") = 1 Тогда
			КО06_08 = ИтСубк.КО();
		КонецЕсли;
		
		Если ИтСубк.ПолучитьСчет(, "Н07.10") = 1 Тогда
			ДО07_10 = ИтСубк.ДО();
		КонецЕсли;
		
		Если ИтСубк.ПолучитьСчет(, "Н07.12") = 1 Тогда
			ДО07_12 = ИтСубк.ДО();
		КонецЕсли;
		
		Если (КО06_08 - ДО07_10 + ДО07_12) < 0 Тогда
			НеПринимаемые = НеПринимаемые - (КО06_08 - ДО07_10 + ДО07_12);  
		КонецЕсли;              
		
		КО06_09 = 0;
		ДО07_11 = 0;
		Если ИтСубк.ПолучитьСчет(, "Н06.09") = 1 Тогда
			КО06_09 = ИтСубк.КО();
		КонецЕсли;
		
		Если ИтСубк.ПолучитьСчет(, "Н07.11") = 1 Тогда
			ДО07_11 = ИтСубк.ДО();
		КонецЕсли;   
		
		Если (КО06_09 - ДО07_11) < 0 Тогда
			НеПринимаемые = НеПринимаемые - (КО06_09 - ДО07_11);
		КонецЕсли;
		
	КонецЦикла;
	
	НеПринимаемые = НеПринимаемые + Макс(БухИтСНачалаГода.ДО("Н07.13") - БухИтСНачалаГода.КО("Н06.10"),0);
			
	Возврат Доходы - (Расходы - НеПринимаемые);
	
КонецФункции // БазаДляРасчетаНалогаНаПрибыль()

//******************************************************************************
// НаименованиеОбъекта()
//
// Параметры:
//  Нет.
//
// Возвращаемое значение:
//  Здесь описывается возвращаемое значение.
//
// Вызывается из формул элементов диалога:
//  Нет.
//
// Описание:
//  Здесь описывается функция.
//
Функция НаименованиеОбъекта(БухИт)
	
	Наименование = "";
	
	Для СчетчикЦикла = 1 По 3 Цикл
		Субконто = БухИт.Субконто(СчетчикЦикла);
		Если ПустоеЗначение(Субконто) = 0 Тогда
		    Если ПустоеЗначение(Наименование) = 0 Тогда
		        Наименование = Наименование + "\ ";
			КонецЕсли;
			Наименование = Наименование + Субконто;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Наименование;
	
КонецФункции // НаименованиеОбъекта()

//******************************************************************************
// ДобавитьВТаблицуПостояннуюРазницу()
//
// Параметры:
//  Нет.
//
// Вызывается из формул элементов диалога:
//  Нет.
//
// Описание:
//  Здесь описывается процедура.
//
Процедура ДобавитьВТаблицуПостояннуюРазницу(ВидОбъекта, Объект, НаНачало, Возникло, Списано, Перенесено, СписаноЕНВД, ПостоянныеРазницы)
	
	Если глПолучитьСтрокуПоЗначению(ТаблицаРасшифровкаРегламентнойОперации , ВидОбъекта, "Наименование") = 0 Тогда
	    ТаблицаРасшифровкаРегламентнойОперации.НоваяСтрока();
		ТаблицаРасшифровкаРегламентнойОперации.Наименование = ВидОбъекта;
		ТаблицаРасшифровкаРегламентнойОперации.РасшифровкаПостоянныхРазниц = РасшифровкаПостоянныхРазниц(ВидОбъекта);
	КонецЕсли;
	
	ТаблицаРасшифровкаРегламентнойОперации.НаНачало = ТаблицаРасшифровкаРегламентнойОперации.НаНачало + НаНачало;
	ТаблицаРасшифровкаРегламентнойОперации.Возникло = ТаблицаРасшифровкаРегламентнойОперации.Возникло + Возникло;
	ТаблицаРасшифровкаРегламентнойОперации.Списано  = ТаблицаРасшифровкаРегламентнойОперации.Списано  + Списано;
	ТаблицаРасшифровкаРегламентнойОперации.Перенесено        = ТаблицаРасшифровкаРегламентнойОперации.Перенесено + Перенесено;
	ТаблицаРасшифровкаРегламентнойОперации.СписаноЕНВД       = ТаблицаРасшифровкаРегламентнойОперации.СписаноЕНВД + СписаноЕНВД;
	ТаблицаРасшифровкаРегламентнойОперации.ПостоянныеРазницы = ТаблицаРасшифровкаРегламентнойОперации.ПостоянныеРазницы + ПостоянныеРазницы;
	
	РасшифровкаПостоянныхРазниц = ТаблицаРасшифровкаРегламентнойОперации.РасшифровкаПостоянныхРазниц.Получить("Таблица данных");
	РасшифровкаПостоянныхРазниц.НоваяСтрока();
	РасшифровкаПостоянныхРазниц.Наименование = Объект;
	РасшифровкаПостоянныхРазниц.НаНачало = НаНачало;
	РасшифровкаПостоянныхРазниц.Возникло = Возникло;
	РасшифровкаПостоянныхРазниц.Списано  = Списано;
	РасшифровкаПостоянныхРазниц.Перенесено        = Перенесено;
	РасшифровкаПостоянныхРазниц.СписаноЕНВД       = СписаноЕНВД;
	РасшифровкаПостоянныхРазниц.ПостоянныеРазницы = ПостоянныеРазницы;
	
КонецПроцедуры // ДобавитьВТаблицуПостояннуюРазницу()

//******************************************************************************
// ОтражениеПостоянныхРазниц(БухИт)
//
// Параметры:
//  Нет.
//
// Вызывается из формул элементов диалога:
//  Нет.
//
// Описание:
//  Здесь описывается процедура.
//
Процедура ОтражениеПостоянныхРазниц(БухИт, ВидОбъекта)
	
	СчНПР_99 = СчетПоКоду("НПР.99");
	СчНПР_20 = СчетПоКоду("НПР.20");
	        
	Если БухИт.Счет = СчНПР_99 Тогда
		
		// На счете НПР.99 могут быть вручную отражены прочие постоянные разницы, которые необходимо подхватить
		БухИт.ВыбратьКорСчета(, 1);
		Пока БухИт.ПолучитьКорСчет() = 1 Цикл
		    Если ПустоеЗначение(БухИт.КорСчет) = 1 Тогда
				ПостоянныеРазницы = БухИт.КорДО();
				ВидОбъекта = "Прочие доходы и расходы";
				Объект = "Прочие доходы и расходы";
				ДобавитьВТаблицуПостояннуюРазницу(ВидОбъекта, Объект,,,,,, ПостоянныеРазницы)
		    КонецЕсли;
		КонецЦикла;
		
	Иначе 
		
		ПостоянныеРазницы    = 0;
		ПеренесеноРазниц     = 0;
		СписаниеРазницНаЕНВД = 0;
		
		БухИт.ВыбратьКорСчета(, 2);
		Пока БухИт.ПолучитьКорСчет() = 1 Цикл
		    Если БухИт.КорСчет = СчНПР_99 Тогда // постоянная разница текущего периода
				ПостоянныеРазницы = БухИт.КорКО();
				
			ИначеЕсли ПустоеЗначение(БухИт.КорСчет) = 0 Тогда // списание потенциальной постоянной разницы на другой актив (субсчет НПР)
				ПеренесеноРазниц = ПеренесеноРазниц + БухИт.КорКО();
				
			Иначе // списание потенциальных постоянных разниц на ЕНВД или списание со счета НПР.20
				Если Константа.ОрганизацияЯвляетсяПлательщикомЕНВД = Перечисление.Булево.Да Тогда
					СписаниеРазницНаЕНВД = БухИт.КорКО();	
				Иначе
					ПеренесеноРазниц = БухИт.КорКО();
				КонецЕсли;				
				
				Если БухИт.Счет = СчНПР_20 Тогда
				    Если БухИт.Субконто(1).ТипНоменклатуры <> Перечисление.ТипыНоменклатуры.УслугаЕНВД Тогда
				        СписаниеРазницНаЕНВД = 0;
						ПеренесеноРазниц     = БухИт.КорКО();
				    КонецЕсли;
				КонецЕсли;
		    КонецЕсли;
		КонецЦикла;
		
		Объект = НаименованиеОбъекта(БухИт);
		ДобавитьВТаблицуПостояннуюРазницу(ВидОбъекта, Объект, БухИт.СНД(), БухИт.ДО(), БухИт.КО(), ПеренесеноРазниц, СписаниеРазницНаЕНВД, ПостоянныеРазницы)
	КонецЕсли;
	
КонецПроцедуры // ОтражениеПостоянныхРазниц()

//******************************************************************************
// ФормированиеПечатнойФормыПостоянныхРазницыПоСчетуНПР()
//
// Параметры:
//  Нет.
//
// Вызывается из формул элементов диалога:
//  Нет.
//
// Описание:
//  Здесь описывается процедура.
//
Процедура ФормированиеПечатнойФормыПостоянныхРазницыПоСчетуНПР()
	
	СчНПР    = СчетПоКоду("НПР");
	СчНПР_99 = СчетПоКоду("НПР.99");
	СчНПР_УП = СчетПоКоду("НПР.УП");
	
	ТаблицаРасшифровкаРегламентнойОперации = СоздатьОбъект("ТаблицаЗначений");
	ТаблицаРасшифровкаРегламентнойОперации.НоваяКолонка("Наименование");
	ТаблицаРасшифровкаРегламентнойОперации.НоваяКолонка("НаНачало", "Число");
	ТаблицаРасшифровкаРегламентнойОперации.НоваяКолонка("Возникло", "Число");
	ТаблицаРасшифровкаРегламентнойОперации.НоваяКолонка("Списано", "Число");
	ТаблицаРасшифровкаРегламентнойОперации.НоваяКолонка("Перенесено", "Число");
	ТаблицаРасшифровкаРегламентнойОперации.НоваяКолонка("СписаноЕНВД", "Число");
	ТаблицаРасшифровкаРегламентнойОперации.НоваяКолонка("ПостоянныеРазницы", "Число");
	ТаблицаРасшифровкаРегламентнойОперации.НоваяКолонка("РасшифровкаПостоянныхРазниц", "СписокЗначений");
	
	БухИтНПР = СоздатьОбъект("БухгалтерскиеИтоги"); БухИтНПР.ИспользоватьРазделительУчета(ЮрЛицо);
	БухИтНПР.ИспользоватьСубконто();
	БухИтНПР.ИспользоватьСубконто();
	БухИтНПР.ИспользоватьСубконто();
	БухИтНПР.ВключатьСубсчета(-1, -1);
	БухИтНПР.ВыполнитьЗапрос(ДатаНач, ДатаКон, СчНПР,,, 3,,);
	БухИтНПР.ВыбратьСчета();
	Пока БухИтНПР.ПолучитьСчет() = 1 Цикл
		Счет = БухИтНПР.Счет;
		
		Если Счет = СчНПР_УП Тогда
		    Продолжить;
		КонецЕсли;
		
		ВидОбъекта = Счет.ПолнНаименование;
		
		КоличествоСубконто = Счет.КоличествоСубконто();
		
		Если КоличествоСубконто = 0 Тогда
			ОтражениеПостоянныхРазниц(БухИтНПР, ВидОбъекта);
			
		Иначе
			БухИтНПР.ВыбратьСубконто(1);
			Пока БухИтНПР.ПолучитьСубконто(1) = 1 Цикл
				Если КоличествоСубконто = 1 Тогда
					ОтражениеПостоянныхРазниц(БухИтНПР, ВидОбъекта);
					
				Иначе
					БухИтНПР.ВыбратьСубконто(2);
					Пока БухИтНПР.ПолучитьСубконто(2) = 1 Цикл
						Если КоличествоСубконто = 2 Тогда
							ОтражениеПостоянныхРазниц(БухИтНПР, ВидОбъекта);
							
						Иначе
							БухИтНПР.ВыбратьСубконто(3);
							Пока БухИтНПР.ПолучитьСубконто(3) = 1 Цикл
								ОтражениеПостоянныхРазниц(БухИтНПР, ВидОбъекта);
							КонецЦикла;
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры // ФормированиеПечатнойФормыПостоянныхРазницыПоСчетуНПР()

//******************************************************************************
// УчетПостоянныхРазниц()
//
// Параметры:
//  Нет.
//
// Вызывается из формул элементов диалога:
//  Нет.
//
// Описание:
//  Здесь описывается процедура.
//
Процедура УчетПостоянныхРазниц()
	
	//Запишем проводки, чтобы учесть эти суммы при расчете налога на прибыль.
	Если Операция.КоличествоПроводок() > 0 Тогда
		Операция.ЗаписатьПроводки();
	КонецЕсли;
	
	// Формирование печатной формы
	Если ФормироватьПечатнуюФорму = 1 Тогда
		НаименованиеРегламентнойОперации = "Учет постоянных разниц (ПБУ 18/02)";
		Таб.ВывестиСекцию("РегламентнаяОперация");
	КонецЕсли;
	
	ПостоянныеРазницыТекущегоПериода = 0;
	
	Если ФормироватьПечатнуюФорму = 1 Тогда // Формирование печатной формы
		ФормированиеПечатнойФормыПостоянныхРазницыПоСчетуНПР();
		ПостоянныеРазницыТекущегоПериода = ТаблицаРасшифровкаРегламентнойОперации.Итог("ПостоянныеРазницы");
		
	Иначе
		ПостоянныеРазницыТекущегоПериода = БухИтЗаМесяц.ДО("НПР.99");
	КонецЕСли;
	    
	// Непринимаемые расходы, отраженные на счете 91.2
	// по статьям расходов с видом расхода - непринимаемые к налоговому учету.
	БухИт91 = СоздатьОбъект("БухгалтерскиеИтоги"); БухИт91.ИспользоватьРазделительУчета(ЮрЛицо);
	БухИт91.ИспользоватьСубконто(ВидыСубконто.ПрочиеДоходыИРасходы);
	БухИт91.ВыполнитьЗапрос(ДатаНач, ДатаКон, "91.1, 91.2",,,);
	БухИт91.ВыбратьСубконто(ВидыСубконто.ПрочиеДоходыИРасходы);
	Пока БухИт91.ПолучитьСубконто(ВидыСубконто.ПрочиеДоходыИРасходы) = 1 Цикл
		СтатьяРасходов = БухИт91.Субконто(ВидыСубконто.ПрочиеДоходыИРасходы);
		Если СтатьяРасходов.ВидПрочихДоходовИРасходов = Перечисление.ВидыПрочихДоходовИРасходов.НеПринимаемыеДляЦелейНалогообложения Тогда
			СуммаПостоянныхРазниц = БухИт91.ДО() - БухИт91.КО();
			Если СуммаПостоянныхРазниц > 0 Тогда
				
				ПостоянныеРазницыТекущегоПериода = ПостоянныеРазницыТекущегоПериода + СуммаПостоянныхРазниц;
				
				Если ФормироватьПечатнуюФорму = 1 Тогда // Формирование печатной формы
					ВидОбъекта = "Прочие доходы и расходы";
					ДобавитьВТаблицуПостояннуюРазницу(ВидОбъекта, СтатьяРасходов,,,,,, СуммаПостоянныхРазниц);
				КонецЕСли;
				
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	// Непринимаемые расходы на счете 99.
	СуммаПостоянныхРазниц = БухИтЗаМесяц.ДО("99.1",,, Перечисление.ПрибылиИУбытки.НеПринимаемыеДляЦелейНалогообложения)
						  - БухИтЗаМесяц.КО("99.1",,, Перечисление.ПрибылиИУбытки.НеПринимаемыеДляЦелейНалогообложения);
	Если СуммаПостоянныхРазниц > 0  Тогда
		
		ПостоянныеРазницыТекущегоПериода = ПостоянныеРазницыТекущегоПериода + СуммаПостоянныхРазниц;
		
	    Если ФормироватьПечатнуюФорму = 1 Тогда // Формирование печатной формы
			ВидОбъекта = "Прочие доходы и расходы"; 
			Объект = "Непринимаемые расходы (счет 99.1)";
			ДобавитьВТаблицуПостояннуюРазницу(ВидОбъекта, Объект,,,,,, СуммаПостоянныхРазниц);
		КонецЕСли;
	КонецЕсли;
	
	
	// НОРМИРУЕМЫЕ РАСХОДЫ
	
	// Расходы на рекламу.
	СуммаПостоянныхРазниц = БухИтЗаМесяц.ДО("Н03.04") - БухИтЗаМесяц.ОБ("Н07.04.1", "Н03.04");
	Если СуммаПостоянныхРазниц <> 0  Тогда
		
		ПостоянныеРазницыТекущегоПериода = ПостоянныеРазницыТекущегоПериода + СуммаПостоянныхРазниц;
		
	    Если ФормироватьПечатнуюФорму = 1 Тогда // Формирование печатной формы
			ВидОбъекта = "Прочие доходы и расходы"; 
			Объект = "Расходы на рекламу превышающие норму";
			ДобавитьВТаблицуПостояннуюРазницу(ВидОбъекта, Объект,,,,,, СуммаПостоянныхРазниц);
		КонецЕСли;
	КонецЕсли;
	
	// Представительские расходы.
	СуммаПостоянныхРазниц = БухИтЗаМесяц.ДО("Н03.03") - БухИтЗаМесяц.ОБ("Н07.04.1", "Н03.03");
	Если СуммаПостоянныхРазниц <> 0  Тогда
		
		ПостоянныеРазницыТекущегоПериода = ПостоянныеРазницыТекущегоПериода + СуммаПостоянныхРазниц;
		
	    Если ФормироватьПечатнуюФорму = 1 Тогда // Формирование печатной формы
			ВидОбъекта = "Прочие доходы и расходы"; 
			Объект = "Представительские расходы превышающие норму";
			ДобавитьВТаблицуПостояннуюРазницу(ВидОбъекта, Объект,,,,,, СуммаПостоянныхРазниц);
		КонецЕСли;
	КонецЕсли;
	
	// Расходы на добровольное страхование.
	СуммаПостоянныхРазниц = БухИтЗаМесяц.ДО("Н03.05") + БухИтЗаМесяц.ДО("Н03.06") + БухИтЗаМесяц.ДО("Н03.07")
						  - БухИтЗаМесяц.КО("Н03.05") - БухИтЗаМесяц.КО("Н03.06") - БухИтЗаМесяц.КО("Н03.07");
						  
	// В конце года производится закрытие счетов Н03,
	// необходимо, чтобы это закрытие было не учтено
	// при расчете постоянных разниц
	Если КонГода(ДатаКон) = ДатаКон Тогда
	    Опер = СоздатьОбъект("Операция");
		Опер.ВыбратьОперацииСПроводками(ДатаКон, ДатаКон, "*,Н03.05;*,Н03.06;*,Н03.07",,,);
		Пока Опер.ПолучитьПроводку() = 1 Цикл
		    Если СокрЛП(Опер.СодержаниеПроводки) = "Закрытие счета по окончанию налогового периода" Тогда
				СуммаПостоянныхРазниц = СуммаПостоянныхРазниц + Опер.Сумма;
		    КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если СуммаПостоянныхРазниц <> 0  Тогда
		
		ПостоянныеРазницыТекущегоПериода = ПостоянныеРазницыТекущегоПериода + СуммаПостоянныхРазниц;
		
	    Если ФормироватьПечатнуюФорму = 1 Тогда // Формирование печатной формы
			ВидОбъекта = "Прочие доходы и расходы"; 
			Объект = "Расходы на добровольное страхование";
			ДобавитьВТаблицуПостояннуюРазницу(ВидОбъекта, Объект,,,,,, СуммаПостоянныхРазниц);
		КонецЕСли;
	КонецЕсли;
	
	// Разниы по переоценке авансов в валюте 
	Если ДатаДок >= '01.01.2008' Тогда
		
		//Разницы, зафиксированные из-за различия в переоценке валютных авансов
		СуммаПостоянныхРазниц = 0; 
		СуммаПостоянныхРазницК = 0;
		СуммаПостоянныхРазницД = 0;
		БухИт91КР = СоздатьОбъект("БухгалтерскиеИтоги"); БухИт91КР.ИспользоватьРазделительУчета(ЮрЛицо);
		БухИт91КР.Опции(1, 1);
		БухИт91КР.ИспользоватьСубконто();
		БухИт91КР.ВыполнитьЗапрос(ДатаНач, ДатаКон, "91.1, 91.2",,,);
		
		БухИт91КР.ВыбратьСчета();
		Пока БухИт91КР.ПолучитьСчет() = 1 Цикл
			
			БухИт91КР.ВыбратьСубконто(1);
			Пока БухИт91КР.ПолучитьСубконто(1) = 1 Цикл
				
				Если БухИт91КР.Субконто(1).ВидПрочихДоходовИРасходов <> Перечисление.ВидыПрочихДоходовИРасходов.КурсовыеРазницы Тогда
					Продолжить;
				КонецЕсли;
				
				Если БухИт91КР.Счет = СчетПоКоду("91.2") Тогда
					СуммаПостоянныхРазницД = СуммаПостоянныхРазницД + БухИт91КР.ДО();                  
				ИначеЕсли БухИт91КР.Счет = СчетПоКоду("91.1") Тогда
					СуммаПостоянныхРазницК = СуммаПостоянныхРазницК + БухИт91КР.КО();                  
				КонецЕсли;
				
			КонецЦикла;
		КонецЦикла;
		
		БухИт91КР = СоздатьОбъект("БухгалтерскиеИтоги"); БухИт91КР.ИспользоватьРазделительУчета(ЮрЛицо);
		БухИт91КР.Опции(1, 1);
		БухИт91КР.ИспользоватьСубконто(ВидыСубконто.ВнереализационныеДоходы, Перечисление.ВнереализационныеДоходы.КурсовыеРазницы, 2);
		БухИт91КР.ВыполнитьЗапрос(ДатаНач, ДатаКон, "Н08",,,);
		БухИт91КР.ВыбратьСубконто(ВидыСубконто.ВнереализационныеДоходы);
		Если БухИт91КР.ПолучитьСубконто(ВидыСубконто.ВнереализационныеДоходы,, Перечисление.ВнереализационныеДоходы.КурсовыеРазницы) =  1 Тогда
			СуммаПостоянныхРазницК = СуммаПостоянныхРазницК - БухИт91КР.КО();  
		КонецЕсли; 
		
		БухИт91КР = СоздатьОбъект("БухгалтерскиеИтоги"); БухИт91КР.ИспользоватьРазделительУчета(ЮрЛицо);
		БухИт91КР.Опции(1, 1);
		БухИт91КР.ИспользоватьСубконто(ВидыСубконто.ВнереализационныеРасходы, Перечисление.ВнереализационныеРасходы.КурсовыеРазницы, 2);
		БухИт91КР.ВыполнитьЗапрос(ДатаНач, ДатаКон, "Н09",,,);
		БухИт91КР.ВыбратьСубконто(ВидыСубконто.ВнереализационныеРасходы);
		Если БухИт91КР.ПолучитьСубконто(ВидыСубконто.ВнереализационныеРасходы,, Перечисление.ВнереализационныеРасходы.КурсовыеРазницы) =  1 Тогда
			СуммаПостоянныхРазницД = СуммаПостоянныхРазницД - БухИт91КР.ДО();  
		КонецЕсли;
		
		Если (СуммаПостоянныхРазницД - СуммаПостоянныхРазницК) <> 0 Тогда
			
			ПостоянныеРазницыТекущегоПериода = ПостоянныеРазницыТекущегоПериода + СуммаПостоянныхРазницД - СуммаПостоянныхРазницК;
			
			Если ФормироватьПечатнуюФорму = 1 Тогда // Формирование печатной формы
				ВидОбъекта = "Курсовые разницы по переоценке авансов в валюте";
				ДобавитьВТаблицуПостояннуюРазницу(ВидОбъекта, СтатьяРасходов,,,,,, СуммаПостоянныхРазницД - СуммаПостоянныхРазницК);
			КонецЕСли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	
	// ДОХОДЫ
	
	// Перенос убытков на текущий период.
	СуммаПостоянныхРазниц = БухИтЗаМесяц.ОБ("Н09", "Н11");
	//Наименование = "Расходы на добровольное страхование";
	//ДобавитьПостояннуюРазницу(ПостоянныеРазницыДоходы, СуммаПостоянныхРазниц, Наименование);
	
	// Непринимаемые доходы, отраженные на счете 91,
	// по статьям доходов с видом дохода - непринимаемые к налоговому учету.
	БухИт91 = СоздатьОбъект("БухгалтерскиеИтоги"); БухИт91.ИспользоватьРазделительУчета(ЮрЛицо);
	БухИт91.ИспользоватьСубконто(ВидыСубконто.ПрочиеДоходыИРасходы);
	БухИт91.ВыполнитьЗапрос(ДатаНач, ДатаКон, "91.1,91.2",,,);
	БухИт91.ВыбратьСубконто(ВидыСубконто.ПрочиеДоходыИРасходы);
	Пока БухИт91.ПолучитьСубконто(ВидыСубконто.ПрочиеДоходыИРасходы) = 1 Цикл
		СтатьяДоходов = БухИт91.Субконто(ВидыСубконто.ПрочиеДоходыИРасходы);
		Если СтатьяДоходов.ВидПрочихДоходовИРасходов = Перечисление.ВидыПрочихДоходовИРасходов.НеПринимаемыеДляЦелейНалогообложения Тогда
			СуммаПостоянныхРазниц = БухИт91.КО() - БухИт91.ДО();
			Если СуммаПостоянныхРазниц > 0 Тогда
				
				ПостоянныеРазницыТекущегоПериода = ПостоянныеРазницыТекущегоПериода - СуммаПостоянныхРазниц;
				
			    Если ФормироватьПечатнуюФорму = 1 Тогда // Формирование печатной формы
					ВидОбъекта = "Прочие доходы и расходы"; 
					Объект = СтатьяДоходов;
					ДобавитьВТаблицуПостояннуюРазницу(ВидОбъекта, Объект,,,,,, -СуммаПостоянныхРазниц);
				КонецЕСли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	// Непринимаемые доходы на счете 99.
	СуммаПостоянныхРазниц = БухИтЗаМесяц.КО("99.1",,, Перечисление.ПрибылиИУбытки.НеПринимаемыеДляЦелейНалогообложения)
						  - БухИтЗаМесяц.ДО("99.1",,, Перечисление.ПрибылиИУбытки.НеПринимаемыеДляЦелейНалогообложения);
	Если СуммаПостоянныхРазниц > 0 Тогда
		
		ПостоянныеРазницыТекущегоПериода = ПостоянныеРазницыТекущегоПериода - СуммаПостоянныхРазниц;
		
		Если ФормироватьПечатнуюФорму = 1 Тогда // Формирование печатной формы
			ВидОбъекта = "Прочие доходы и расходы"; 
			Объект = "Непринимаемые доходы (счет 99)";
			ДобавитьВТаблицуПостояннуюРазницу(ВидОбъекта, Объект,,,,,, -СуммаПостоянныхРазниц);
		КонецЕСли;
	КонецЕСли;
	
	// УБЫТКИ ПРОШЛЫХ ЛЕТ
	БазаПоНУ = БазаДляРасчетаНалогаНаПрибыль();
	КорректировкаУбытковТекщих = БухИтЗаМесяц.СКД("КВР.УТ") - БухИтЗаМесяц.СКК("КВР.УТ");
	БазаПоНУ = БазаПоНУ - КорректировкаУбытковТекщих;
	
	ПостоянныеРазницыПоУбыткамПрошлыхЛет = ПостоянныеРазницыПоУбыткамПрошлыхЛет();
	ОтраженоОстатокПостоянныхРазниц  = -БухИтЗаМесяц.СКД("НПР.УП");
	РасчетныйОстатокПостоянныхРазниц = ПостоянныеРазницыПоУбыткамПрошлыхЛет; 
	
	Если ДатаДок < '01.01.2006' Тогда
		Норма = 0.3;
	ИначеЕсли ДатаДок < '01.01.2007' Тогда
		Норма = 0.5;
	Иначе
		Норма = 1;	
	КонецЕсли;
	
	Если БазаПоНУ > 0 Тогда
		Если ПостоянныеРазницыПоУбыткамПрошлыхЛет > 0 Тогда // есть постоянные разницы по убыткам прошлых лет
	
			// рассчитаем сумму убытка, на которую можно уменьшить базу по налогу на прибыль 
		    УбыткиУменьшающиеНБ = Мин(БазаПоНУ*Норма, ПостоянныеРазницыПоУбыткамПрошлыхЛет); // не более нормы
			РасчетныйОстатокПостоянныхРазниц = ПостоянныеРазницыПоУбыткамПрошлыхЛет - УбыткиУменьшающиеНБ;
		КонецЕсли;
	КонецЕсли;
	
	СуммаПостоянныхРазниц = РасчетныйОстатокПостоянныхРазниц - ОтраженоОстатокПостоянныхРазниц;
		      
	Если СуммаПостоянныхРазниц <> 0 Тогда
		
		// Сформируем проводку по счету НПР.УП
		Операция.НоваяПроводка(); Операция.РазделительУчета = ЮрЛицо;
		Операция.НомерЖурнала = "ПР";
		Операция.СодержаниеПроводки = "Списание постоянных разниц";
		Операция.ПервичныйДокумент  = глПредставлениеПервичногоДокумента(Контекст);
		Операция.Кредит.Счет = СчетПоКоду("НПР.УП");
		Операция.Дебет.Счет = СчетПоКоду("НПР.99");
		Операция.Сумма = СуммаПостоянныхРазниц;
		
		ПостоянныеРазницыТекущегоПериода = ПостоянныеРазницыТекущегоПериода + СуммаПостоянныхРазниц;
		
		Если ФормироватьПечатнуюФорму = 1 Тогда // Формирование печатной формы
			ВидОбъекта = "Прочие доходы и расходы"; 
			Объект = "Убытки прошлых лет";
			ДобавитьВТаблицуПостояннуюРазницу(ВидОбъекта, Объект,,,,,, СуммаПостоянныхРазниц);
		КонецЕСли;
	КонецЕСли;
	
    
	// РАСЧЕТ ПОСТОЯННОГО НАЛОГОВОГО АКТИВА (ОБЯЗАТЕЛЬСТВА)
	НалоговыйАктивОбязательство = ПостоянныеРазницыТекущегоПериода * СтавкаНалогаНаПрибыль / 100;
	
	Если НалоговыйАктивОбязательство > 0 Тогда
		СформироватьПроводкиПоНалогуНаПрибыль(НалоговыйАктивОбязательство, СчетПоКоду("99.2.3"),, 1, "Постоянное налоговое обязательство");
		
	Иначе 
		СформироватьПроводкиПоНалогуНаПрибыль(-НалоговыйАктивОбязательство, СчетПоКоду("99.2.3"),, 0, "Постоянный налоговый актив");
	КонецЕсли;
	
	// Вывод печатной формы по постоянным разницам
	// Формирование печатной формы
	Если ФормироватьПечатнуюФорму = 1 Тогда
		
		Если ТаблицаРасшифровкаРегламентнойОперации.КоличествоСтрок() <> 0 Тогда
			Расшифровка = СоздатьОбъект("СписокЗначений");
			Расшифровка.ДобавитьЗначение("УчетПостоянныхРазниц", "Наименование таблицы");
			Расшифровка.ДобавитьЗначение(ТаблицаРасшифровкаРегламентнойОперации, "Таблица данных");
			Расшифровка.ДобавитьЗначение(ДатаДок, "Дата операции");
			                                      
			Если НалоговыйАктивОбязательство >= 0 Тогда
				ДополнительныеДанные = "Постоянное налоговое обязательство " + " (" + ПостоянныеРазницыТекущегоПериода+ "*" + СтавкаНалогаНаПрибыль + "%): " +Формат(НалоговыйАктивОбязательство, "Ч15.2");
				
			Иначе
				ДополнительныеДанные = "Постоянный налоговый актив  " + " (" + (-ПостоянныеРазницыТекущегоПериода)+ "*" + СтавкаНалогаНаПрибыль + "%): " +Формат(-НалоговыйАктивОбязательство, "Ч15.2");
			КонецЕсли;
			
			Расшифровка.ДобавитьЗначение(ДополнительныеДанные, "Дополнительные данные");
			
			НаименованиеРегламентнойПодоперации = "Учет постоянных разниц (ПБУ 18/02)";
			Таб.ВывестиСекцию("ПодоперацияВыполнена");
		
		Иначе
			НаименованиеРегламентнойПодоперации = "Постоянных разниц нет";
			Таб.ВывестиСекцию("ПодоперацияНеВыполнена");
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // УчетПостоянныхРазниц()

//******************************************************************************
// ВременныеРазницыПоУбыткамПрошлыхПериодов(ВременныеРазницы)
//
// Параметры:
//  Нет.
//
// Вызывается из формул элементов диалога:
//  Нет.
//
// Описание:
//  Здесь описывается процедура.
//
Процедура ВременныеРазницыПоУбыткамПрошлыхПериодов(ВременныеРазницы)
	
	Сч09 = СчетПоКоду("09");
	
	БазаПоНУ = БазаДляРасчетаНалогаНаПрибыль();
	КорректировкаУбытковТекщих = БухИтЗаМесяц.СКД("КВР.УТ") - БухИтЗаМесяц.СКК("КВР.УТ");
	БазаПоНУсКорректировкой = БазаПоНУ - КорректировкаУбытковТекщих;
	                                                                      
	 // Временная разница по убыткам прошлых лет.
	УбыткиПрошлыхЛетВсего = УбыткиПрошлыхЛет();
	УбыткиПрошлыхЛетПостоянныеРазницы = ПостоянныеРазницыПоУбыткамПрошлыхЛет(); 
	
	ВременныеРазницыПоУбыткамПрошлыхЛет = УбыткиПрошлыхЛетВсего - УбыткиПрошлыхЛетПостоянныеРазницы;
	КорректировкаУбытковПрошлыхЛет = БухИтЗаМесяц.СКД("КВР.УП") - БухИтЗаМесяц.СКК("КВР.УП");
	ВременныеРазницыПоУбыткамПрошлыхЛет = Макс(0, ВременныеРазницыПоУбыткамПрошлыхЛет + КорректировкаУбытковПрошлыхЛет);
	
	ОстатокНеперенесенногоУбытка = 0;
	Если БазаПоНУсКорректировкой > 0 Тогда
		Если ВременныеРазницыПоУбыткамПрошлыхЛет > 0 Тогда // есть временные разницы по убыткам прошлых лет
			
			// Постоянные разница по убыткам прошлых лет, которые уже уменьшили налоговую базу.
			УчтенныеПостоянныеРазницыПоУбыткуПрошлыхЛет = УбыткиПрошлыхЛетПостоянныеРазницы - (-БухИтЗаМесяц.СКД("НПР.УП"));
	
			// рассчитаем сумму убытка, на которую можно уменьшить базу по налогу на прибыль 
			Если ДатаДок < '01.01.2006' Тогда
				Норма = 0.3;
			ИначеЕсли ДатаДок < '01.01.2007' Тогда
				Норма = 0.5;
			Иначе
				Норма = 1;	
			КонецЕсли;
			
			УбыткиУменьшающиеНБ = Мин(БазаПоНУсКорректировкой*Норма, (ВременныеРазницыПоУбыткамПрошлыхЛет + УчтенныеПостоянныеРазницыПоУбыткуПрошлыхЛет)); // не более 30% налоговой базы
			ВремннаяРазницаУменьшающаяНБ = Мин(УбыткиУменьшающиеНБ - УчтенныеПостоянныеРазницыПоУбыткуПрошлыхЛет, ВременныеРазницыПоУбыткамПрошлыхЛет);
			
			ОстатокНеперенесенногоУбытка = ВременныеРазницыПоУбыткамПрошлыхЛет - ВремннаяРазницаУменьшающаяНБ;
		КонецЕсли;
		
	Иначе
		ОстатокНеперенесенногоУбытка = ВременныеРазницыПоУбыткамПрошлыхЛет + (- БазаПоНУсКорректировкой);
	КонецЕсли;
	
	ОстатокНеперенесенногоУбытка = Макс(ОстатокНеперенесенногоУбытка, 0);
	
	ОтраженныйОтложенныйНалоговыйАктив = БухИтЗаМесяц.СКД(Сч09,,, Перечисление.ВидыАктивовИобязательств.УбыткиПрошлыхПериодов);
	ОтложенныйНалоговыйАктив = Окр(ОстатокНеперенесенногоУбытка * СтавкаНалогаНаПрибыль / 100, 2);
	
	// Отклонение отраженного на счете 09 отложенного налогового актива, от рассчитанного
	Разница = ОтраженныйОтложенныйНалоговыйАктив - ОтложенныйНалоговыйАктив;
	
	Если Разница <> 0 Тогда
		ВидАктивовОбязательств = Перечисление.ВидыАктивовИобязательств.УбыткиПрошлыхПериодов;
		
		ВременныеРазницы.НоваяСтрока();
		ВременныеРазницы.ВидАктивовОбязательств = ВидАктивовОбязательств;
		
		Если Разница < 0 Тогда
			ВременныеРазницы.НалоговыйАктивПризнание = -Разница;
			СформироватьПроводкиПоНалогуНаПрибыль(-Разница, Сч09, ВидАктивовОбязательств, 1, "Признание отложенного налогового актива");	
			
		Иначе
			ВременныеРазницы.НалоговыйАктивПогашение = Разница;
			СформироватьПроводкиПоНалогуНаПрибыль(Разница, Сч09, ВидАктивовОбязательств, 0, "Погашение отложенного налогового актива");	
		КонецЕсли;
		
		// Формирование печатной формы
		Если ФормироватьПечатнуюФорму = 1 Тогда
			ВременныеРазницы.РасшифровкаВременныхРазниц = РасшифровкаУбытковПрошлыхПериодов();
			ТаблицаРасшифровка = ВременныеРазницы.РасшифровкаВременныхРазниц.Получить("Таблица данных");
		
			ТаблицаРасшифровка.НоваяСтрока();
			ТаблицаРасшифровка.БазаНУ = БазаПоНУ;
			ТаблицаРасшифровка.КорректировкаБазы     = КорректировкаУбытковТекщих;
			ТаблицаРасшифровка.УбытокТекущегоПериода = ?(БазаПоНУсКорректировкой<0, -БазаПоНУсКорректировкой, 0);
			ТаблицаРасшифровка.УбыткиПрошлыхЛетВсего = УбыткиПрошлыхЛетВсего;
			ТаблицаРасшифровка.УбыткиПрошлыхЛетПостоянныеРазницы = УбыткиПрошлыхЛетПостоянныеРазницы;
			ТаблицаРасшифровка.УбыткиПрошлыхЛетКорректировка = КорректировкаУбытковПрошлыхЛет;
			ТаблицаРасшифровка.УбыткиПрошлыхЛетВременныеРазницы = ВременныеРазницыПоУбыткамПрошлыхЛет;
			ТаблицаРасшифровка.УбытокУменьшающийНБВсего = УбыткиУменьшающиеНБ;
			ТаблицаРасшифровка.УбытокУменьшающийНБПостоянныеРазницы = УчтенныеПостоянныеРазницыПоУбыткуПрошлыхЛет;
			ТаблицаРасшифровка.УбытокУменьшающийНБВременныеРазницы = ВремннаяРазницаУменьшающаяНБ;
			ТаблицаРасшифровка.ВсегоНеперенесенногоУбытка = ОстатокНеперенесенногоУбытка;
			
			ТаблицаРасшифровка.РассчитанныйОНА      = ОтложенныйНалоговыйАктив;
			ТаблицаРасшифровка.ОтраженныйОНА        = ОтраженныйОтложенныйНалоговыйАктив;
			ТаблицаРасшифровка.ПодлежитПризнаниюОНА = ?(Разница<0, -Разница, 0);
			ТаблицаРасшифровка.ПодлежитПогашениюОНА = ?(Разница>0,  Разница, 0);
			
			ФормированиеРасшифровкиНалоговойБазы(ТаблицаРасшифровка);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ВременныеРазницыПоУбыткамПрошлыхПериодов()

//******************************************************************************
// ПолучитьСуммуОтложенногоНалоговогоАктиваОбязательства()
//
// Параметры:
//  Нет.
//
// Вызывается из формул элементов диалога:
//  Нет.
//
// Описание:
//  Здесь описывается процедура.
//
Функция ПолучитьСуммуОтложенногоНалоговогоАктиваОбязательства(Сч,ВидАктивовОбязательств)
	СуммаОтложенногоАктиваОбязательства = 0;
	БухИт = СоздатьОбъект("БухгалтерскиеИтоги"); БухИт.ИспользоватьРазделительУчета(ЮрЛицо);
	БухИт.ИспользоватьСубконто(ВидыСубконто.ВидыАктивовИобязательств,ВидАктивовОбязательств); 
	Если БухИт.ВыполнитьЗапрос(ДатаНач, ДатаКон, Сч,,,,,) = 1 Тогда
		Если Сч = СчетПоКоду("09") Тогда
			СуммаОтложенногоАктиваОбязательства = СуммаОтложенногоАктиваОбязательства + БухИт.СКД();
		ИначеЕсли Сч = СчетПоКоду("77") Тогда
			СуммаОтложенногоАктиваОбязательства = СуммаОтложенногоАктиваОбязательства + БухИт.СКК();
		КонецЕсли;		
	КонецЕсли;	
	Возврат (СуммаОтложенногоАктиваОбязательства);
КонецФункции

//******************************************************************************
// ОтразитьОтложенныйНалоговыйАктивОбязательство()
//
// Параметры:
//  Нет.
//
// Вызывается из формул элементов диалога:
//  Нет.
//
// Описание:
//  Здесь описывается процедура.
//
Процедура ОтразитьОтложенныйНалоговыйАктивОбязательство(ВременныеРазницы, ВидАктивовОбязательств)
	
 	Сч09 = СчетПоКоду("09");
 	Сч77 = СчетПоКоду("77"); 
	ВычитаемыеВозниклоЕНВД = Окр(ВременныеРазницы.ВычитаемыеВозниклоЕНВД * СтавкаНалогаНаПрибыль / 100, 2, 1);
	ВычитаемыеВозниклоЕНВД = ?(ВычитаемыеВозниклоЕНВД < 0, - ВычитаемыеВозниклоЕНВД, ВычитаемыеВозниклоЕНВД);
	ВычитаемыеУменьшилосьЕНВД = Окр(ВременныеРазницы.ВычитаемыеУменьшилосьЕНВД * СтавкаНалогаНаПрибыль / 100, 2, 1);
	ВычитаемыеУменьшилосьЕНВД = ?(ВычитаемыеУменьшилосьЕНВД < 0, - ВычитаемыеУменьшилосьЕНВД, ВычитаемыеУменьшилосьЕНВД);
	НалогооблагаемыеВозниклоЕНВД = Окр(ВременныеРазницы.НалогооблагаемыеВозниклоЕНВД * СтавкаНалогаНаПрибыль / 100, 2, 1);
	НалогооблагаемыеВозниклоЕНВД = ?(НалогооблагаемыеВозниклоЕНВД < 0, - НалогооблагаемыеВозниклоЕНВД, НалогооблагаемыеВозниклоЕНВД);
	НалогооблагаемыеУменьшилосьЕНВД = Окр(ВременныеРазницы.НалогооблагаемыеУменьшилосьЕНВД * СтавкаНалогаНаПрибыль / 100, 2, 1);
	НалогооблагаемыеУменьшилосьЕНВД = ?(НалогооблагаемыеУменьшилосьЕНВД < 0, - НалогооблагаемыеУменьшилосьЕНВД, НалогооблагаемыеУменьшилосьЕНВД);
	
 	// Образование отложенного налогового актива
	Если ВременныеРазницы.ВычитаемыеВозникло > 0 Тогда
		ОтложенныйНалоговыйАктив = ВременныеРазницы.ВычитаемыеВозникло * СтавкаНалогаНаПрибыль / 100;
	    ВременныеРазницы.НалоговыйАктивПризнание = ОтложенныйНалоговыйАктив;
		СформироватьПроводкиПоНалогуНаПрибыль(ОтложенныйНалоговыйАктив, Сч09, ВидАктивовОбязательств, 1, "Признание отложенного налогового актива");
		СформироватьПроводкиПоСписанию09_77(ВычитаемыеВозниклоЕНВД, Сч09, ВидАктивовОбязательств, 1, "Признание отложенного налогового актива");
	КонецЕсли;
		                                               
	// Погашение отложенного налогового актива
	Если ВременныеРазницы.ВычитаемыеУменьшилось > 0 Тогда
		                                        	    
		Если (ВременныеРазницы.ВычитаемыеНаНачалоМес - ВременныеРазницы.ВычитаемыеУменьшилось - ?(ВременныеРазницы.ВычитаемыеУменьшилосьЕНВД <0, -ВременныеРазницы.ВычитаемыеУменьшилосьЕНВД, ВременныеРазницы.ВычитаемыеУменьшилосьЕНВД)) = 0 Тогда
			ПогашениеОтложенногоНалоговогоАктива= ПолучитьСуммуОтложенногоНалоговогоАктиваОбязательства(Сч09,ВидАктивовОбязательств) - ВычитаемыеУменьшилосьЕНВД;	
		Иначе
			ПогашениеОтложенногоНалоговогоАктива = ВременныеРазницы.ВычитаемыеУменьшилось * СтавкаНалогаНаПрибыль / 100;
		КонецЕсли;
	
		ВременныеРазницы.НалоговыйАктивПогашение = ПогашениеОтложенногоНалоговогоАктива;
		СформироватьПроводкиПоНалогуНаПрибыль(ПогашениеОтложенногоНалоговогоАктива, Сч09, ВидАктивовОбязательств, 0, "Погашение отложенного налогового актива");
		СформироватьПроводкиПоСписанию09_77(ВычитаемыеУменьшилосьЕНВД, Сч09, ВидАктивовОбязательств, 0, "Погашение отложенного налогового актива");
	КонецЕсли;
		                                        
	// Образование отложенного налогового обязательства
	Если ВременныеРазницы.НалогооблагаемыеВозникло > 0 Тогда
		ОтложенноеНалоговоеОбязательство = ВременныеРазницы.НалогооблагаемыеВозникло * СтавкаНалогаНаПрибыль / 100;
	    ВременныеРазницы.НалоговоеОбязательствоПризнание = ОтложенноеНалоговоеОбязательство;
		СформироватьПроводкиПоНалогуНаПрибыль(ОтложенноеНалоговоеОбязательство, Сч77, ВидАктивовОбязательств, 0, "Признание отложенного налогового обязательства");
		СформироватьПроводкиПоСписанию09_77(НалогооблагаемыеВозниклоЕНВД, Сч77, ВидАктивовОбязательств, 0, "Признание отложенного налогового обязательства");
	КонецЕсли;
		                                               
	// Погашение отложенного налогового обязательства
	Если ВременныеРазницы.НалогооблагаемыеУменьшилось > 0 Тогда
		
		Если (ВременныеРазницы.НалогооблагаемыеНаНачалоМес - ВременныеРазницы.НалогооблагаемыеУменьшилось - ?(ВременныеРазницы.НалогооблагаемыеУменьшилосьЕНВД < 0, -ВременныеРазницы.НалогооблагаемыеУменьшилосьЕНВД, ВременныеРазницы.НалогооблагаемыеУменьшилосьЕНВД)) = 0 Тогда
			ПогашениеНалоговогоОбязательства= ПолучитьСуммуОтложенногоНалоговогоАктиваОбязательства(Сч77,ВидАктивовОбязательств) - НалогооблагаемыеУменьшилосьЕНВД;	
		Иначе
			ПогашениеНалоговогоОбязательства = ВременныеРазницы.НалогооблагаемыеУменьшилось * СтавкаНалогаНаПрибыль / 100;
		КонецЕсли;
		
		ВременныеРазницы.НалоговоеОбязательствоПогашение = ПогашениеНалоговогоОбязательства;
		СформироватьПроводкиПоНалогуНаПрибыль(ПогашениеНалоговогоОбязательства, Сч77, ВидАктивовОбязательств, 1, "Погашение отложенного налогового обязательства");
		СформироватьПроводкиПоСписанию09_77(НалогооблагаемыеУменьшилосьЕНВД, Сч77, ВидАктивовОбязательств, 1, "Погашение отложенного налогового обязательства");
	КонецЕсли;
	
КонецПроцедуры // ОтразитьОтложенныйНалоговыйАктивОбязательство() 

//******************************************************************************
// РасчетИздержекОбращения(БухИТ, ТипИтогов)
//
// Параметры:
//  Нет.
//
// Возвращаемое значение:
//  Здесь описывается возвращаемое значение.
//
// Вызывается из формул элементов диалога:
//  Нет.
//
// Описание:
//  Здесь описывается функция.
//
Функция РасчетИздержекОбращения(БухИт, ТипИтогов)
	
	Всего = 0;
	БухИт.ВыбратьСубконто();
	Пока БухИт.ПолучитьСубконто() = 1 Цикл
		Если БухИт.Субконто(1).СписыватьИздержкиПропорциональноОстаткуТоваров.Получить(ДатаДок) = 1 Тогда
			Если ТипИтогов = 1 Тогда // сальдо на начало периода
				Всего = Всего + БухИт.СНД() - БухИт.СНК();
			Иначе // сальдо на конец периода
				Всего = Всего + БухИт.СКД() - БухИт.СКК();
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	Возврат (Всего);
КонецФункции 

//******************************************************************************
// ИтогПоСчетам(СчетаАктив, СчетаПассив)
//
// Параметры:
//  Нет.
//
// Возвращаемое значение:
//  Здесь описывается возвращаемое значение.
//
// Вызывается из формул элементов диалога:
//  Нет.
//
// Описание:
//  Здесь описывается функция.
//
Функция ИтогПоСчетам(БухИт, Счета, ТипИтогов)
	
	Всего = 0;
	
	Если ПустоеЗНачение(Счета) = 1 Тогда
	    Возврат Всего;
	КонецЕсли;
	
	// Список счетов поместим в список значений
	СписокСчетов.УдалитьВсе();
	СчетаВСтроке = """" + СтрЗаменить(Счета, ",", """,""") + """";
	
	СписокСчетов.ИзСтрокиСРазделителями(СчетаВСтроке);
	Для СчетчикЦикла = 1 По СписокСчетов.РазмерСписка() Цикл
		Если БухИт.ПолучитьСчет(, СписокСчетов.ПолучитьЗначение(СчетчикЦикла)) = 1 Тогда
			Если (БухИт.Счет.Код = "44.1") или (БухИт.Счет.Код = "НПР.44.1")
			или (БухИт.Счет.Код = "КВР.44.1") Тогда
				Всего = РасчетИздержекОбращения(БухИт, ТипИтогов);
			Иначе
				Если ТипИтогов = 1 Тогда // сальдо на начало периода
					Всего = Всего + БухИт.СНД() - БухИт.СНК();
				Иначе // сальдо на конец периода
					Всего = Всего + БухИт.СКД() - БухИт.СКК();
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
	КонецЦикла;
	
	Возврат Всего;
	
КонецФункции // ИтогПоСчетам() 

//******************************************************************************
// РасчетВременныхРазниц(СчетаУчетаБУАктив, СчетаУчетаБУПассив, СчетаУчетаНУАктив, СчетаУчетаНУПассив, СчетНПР, СчетКВР, БухИт, ВременныеРазницы, Объект)
//
// Параметры:
//  Нет.
//
// Вызывается из формул элементов диалога:
//  Нет.
//
// Описание:
//  Здесь описывается процедура.
//
Процедура РасчетВременныхРазниц(СчетаУчетаБУ, СчетаУчетаНУ, СчетНПР, СчетКВР, БухИт, ВременныеРазницы, Объект, ВременнаяРазницаЕНВД = 0, ПоправкаНаОССНД = 0, ПоправкаНаОССКД = 0)
	
	// Временные разницы на начало месяца
	ОценкаБУнаНачало = ИтогПоСчетам(БухИт, СчетаУчетаБУ, 1);
	ОценкаНУнаНачало = ИтогПоСчетам(БухИт, СчетаУчетаНУ, 1) + ПоправкаНаОССНД;
	ПРнаНачало       = ИтогПоСчетам(БухИт, СчетНПР, 1);
	КВРнаНачало      = ИтогПоСчетам(БухИт, СчетКВР, 1);
	ОтклонениеНаНачало = ОценкаБУнаНачало - ОценкаНУнаНачало - ПРнаНачало - КВРнаНачало;
	                                     
	// Временные разницы на конец месяца
	ОценкаБУнаКонец = ИтогПоСчетам(БухИт, СчетаУчетаБУ, 2);
	ОценкаНУнаКонец = ИтогПоСчетам(БухИт, СчетаУчетаНУ, 2) + ПоправкаНаОССКД;
	ПРнаКонец       = ИтогПоСчетам(БухИт, СчетНПР, 2);
	КВРнаКонец      = ИтогПоСчетам(БухИт, СчетКВР, 2);
	ОтклонениеНаКонец  = ОценкаБУнаКонец - ОценкаНУнаКонец - ПРнаКонец - КВРнаКонец;
	                                                          
	// Определим на начало месяца существует налогооблагаемая или вычитаемая разница
	НалогооблагаемаяРазницаНаНачало = 0;
	ВычитаемаяРазницаНаНачало       = 0;
	Если ОтклонениеНаНачало > 0 Тогда
		НалогооблагаемаяРазницаНаНачало =  ОтклонениеНаНачало;
	Иначе
		ВычитаемаяРазницаНаНачало       =  -ОтклонениеНаНачало;
	КонецЕсли;
	
	ВременнаяРазница = ОтклонениеНаКонец - ОтклонениеНаНачало - ВременнаяРазницаЕНВД;
	
	ВычитаемаяРазница                 = 0;
	УменьшениеВычитаемойРазницы       = 0;
	НалогооблагаемаяРазница           = 0;
	УменьшениеНалогооблагаемойРазницы = 0;
	
	Если ВременнаяРазница > 0 Тогда // Возникновение налогооблагаемой разницы (уменьшение вычитаемой разницы)
		
		Если ВычитаемаяРазницаНаНачало > 0 Тогда // Уменьшение вычитаемой разницы
			УменьшениеВычитаемойРазницы = Мин(ВременнаяРазница, ВычитаемаяРазницаНаНачало);
		КонецЕсли;
		НалогооблагаемаяРазница = ВременнаяРазница - УменьшениеВычитаемойРазницы;
		
	ИначеЕсли ВременнаяРазница < 0 Тогда // Возникновение вычитаемой разницы (уменьшение налогооблагаемой разницы)
		
		Если НалогооблагаемаяРазницаНаНачало > 0 Тогда // Уменьшение налогооблагаемой разницы
			УменьшениеНалогооблагаемойРазницы = Мин(-ВременнаяРазница, НалогооблагаемаяРазницаНаНачало);
		КонецЕсли;
		ВычитаемаяРазница = -ВременнаяРазница - УменьшениеНалогооблагаемойРазницы;
	КонецЕсли;
	
	ВременныеРазницы.ВычитаемыеВозникло    = ВременныеРазницы.ВычитаемыеВозникло    + ВычитаемаяРазница;
	ВременныеРазницы.ВычитаемыеУменьшилось = ВременныеРазницы.ВычитаемыеУменьшилось + УменьшениеВычитаемойРазницы;
	ВременныеРазницы.НалогооблагаемыеВозникло    = ВременныеРазницы.НалогооблагаемыеВозникло    + НалогооблагаемаяРазница;
	ВременныеРазницы.НалогооблагаемыеУменьшилось = ВременныеРазницы.НалогооблагаемыеУменьшилось + УменьшениеНалогооблагаемойРазницы;
	
	ВременныеРазницы.ВычитаемыеНаНачалоМес = ВременныеРазницы.ВычитаемыеНаНачалоМес + ВычитаемаяРазницаНаНачало;
	ВременныеРазницы.НалогооблагаемыеНаНачалоМес =ВременныеРазницы.НалогооблагаемыеНаНачалоМес + НалогооблагаемаяРазницаНаНачало;
	
	// Формирование печатной формы
	Если ФормироватьПечатнуюФорму = 1 Тогда   
		
		//Для объекта, используемого только по ЕНВД строку не добавляем
		//информация о нем в таблице не нужна. Для ОС и РБП
		ОбъектЕНВД = 0; 
		Если ТипЗначенияСтр(Объект) = "Справочник" Тогда
			Если (Объект.Вид() = "ОсновныеСредства") ИЛИ  (Объект.Вид() = "РасходыБудущихПериодов") Тогда
				Сч44_2 = СчетПоКоду("44.1.2");
				Сч20 = СчетПоКоду("20");
				
				Если Объект.Вид() = "ОсновныеСредства" Тогда
					ПризнакПринадлежностиЕНВД = Объект.СчетЗатрат.Получить(ДатаДок);
				ИначеЕсли Объект.Вид() = "РасходыБудущихПериодов" Тогда            
					ПризнакПринадлежностиЕНВД = Объект.СчетЗатрат;			
				КонецЕсли;
				
				УслугаЕНВД = 0;
				Если ПризнакПринадлежностиЕНВД = Сч20 Тогда
					Если Объект.Вид() = "ОсновныеСредства" Тогда
						УслугаЕНВД = ?(Объект.Субконто1.Получить(ДатаДок).ТипНоменклатуры = Перечисление.ТипыНоменклатуры.УслугаЕНВД, 1, 0);
					ИначеЕсли Объект.Вид() = "РасходыБудущихПериодов" Тогда                                                             
						УслугаЕНВД = ?(Объект.Субконто1.ТипНоменклатуры = Перечисление.ТипыНоменклатуры.УслугаЕНВД, 1, 0);
					КонецЕсли;	
				КонецЕсли;	
				
				Если (ПризнакПринадлежностиЕНВД = Сч44_2) ИЛИ (УслугаЕНВД = 1) Тогда  
					ОбъектЕНВД = 1; 
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		Если ОбъектЕНВД = 0 Тогда 	
			Если (((ОценкаБУнаКонец - ОценкаБУнаНачало) - (ОценкаНУнаКонец - ОценкаНУнаНачало)) <> 0) или
			((ПРнаКонец - ПРнаНачало) <> 0) или
			((КВРнаКонец - КВРнаНачало) <> 0) или
			(ВычитаемаяРазницаНаНачало <> 0) или
			(ВычитаемаяРазница <> 0) или
			(УменьшениеВычитаемойРазницы <> 0) или
			(НалогооблагаемаяРазницаНаНачало <> 0) или
			(НалогооблагаемаяРазница <> 0) или
			(УменьшениеНалогооблагаемойРазницы <> 0) Тогда
				
				ТаблицаРасшифровка = ВременныеРазницы.РасшифровкаВременныхРазниц.Получить("Таблица данных");
				
				ТаблицаРасшифровка.НоваяСтрока();
				ТаблицаРасшифровка.Объект = Объект;
				ТаблицаРасшифровка.ОценкаБУнаНачало = ОценкаБУнаНачало;
				ТаблицаРасшифровка.ОценкаБУнаКонец  = ОценкаБУнаКонец;
				ТаблицаРасшифровка.ОценкаНУнаНачало = ОценкаНУнаНачало;
				ТаблицаРасшифровка.ОценкаНУнаКонец  = ОценкаНУнаКонец;
				
				ТаблицаРасшифровка.РазницаВсего                 = (ОценкаБУнаКонец - ОценкаБУнаНачало) - (ОценкаНУнаКонец - ОценкаНУнаНачало);
				ТаблицаРасшифровка.ПостоянныеРазницы            = ПРнаКонец - ПРнаНачало;
				ТаблицаРасшифровка.КорректировкаВременныхРазниц = КВРнаКонец - КВРнаНачало + ВременнаяРазницаЕНВД;
				
				ТаблицаРасшифровка.ВычитаемыеРазницыНаНачало   = ВычитаемаяРазницаНаНачало;
				ТаблицаРасшифровка.ВычитаемыеРазницыВозникло   = ВычитаемаяРазница;
				ТаблицаРасшифровка.ВычитаемыеРазницыКПогашению = УменьшениеВычитаемойРазницы;
				
				ТаблицаРасшифровка.НалогооблагаемыеРазницыНаНачало   = НалогооблагаемаяРазницаНаНачало;
				ТаблицаРасшифровка.НалогооблагаемыеРазницыВозникло   = НалогооблагаемаяРазница;
				ТаблицаРасшифровка.НалогооблагаемыеРазницыКПогашению = УменьшениеНалогооблагаемойРазницы;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // РасчетВременныхРазниц()  

//******************************************************************************

// РасчетРасходовПоЕНВД(КодСчета, Коэф44, Коэф26)
//
// Параметры:
//  КодСчета - Строка;
//  Коэф44, коэф26     - Коэфициенты распределения между ЕНВД и не ЕНВД.
//
// Возвращаемое значение:
//  Число: Сумма расхода, которая была отнесена на ЕНВД в текущем месяце.
//
// Описание:
//  Рассчитывает сумму расхода, которая была отнесена на ЕНВД которую следует признать в текущем месяце.
//
Процедура РасчетВременныхРазницПоЕНВД(СчетаУчетаБУ,СчетаУчетаНУ, СчетНПР, СчетКВР, БухИт, Объект, ПризнакПринадлежностиЕНВД, Коэф, ВременнаяРазницаЕНВД, КорректировкаВременнойРазницыЕНВД = 0, ВременныеРазницы)  
	
	Сч44_3 = СчетПоКоду("44.1.3");
	Сч44_2 = СчетПоКоду("44.1.2");
	Сч26 = СчетПоКоду("26");
	Сч20 = СчетПоКоду("20");
	
	УслугаЕНВД = 0;
	Если ПризнакПринадлежностиЕНВД = Сч20 Тогда
		Если Объект.Вид() = "ОсновныеСредства" Тогда
			УслугаЕНВД = ?(Объект.Субконто1.Получить(ДатаДок).ТипНоменклатуры = Перечисление.ТипыНоменклатуры.УслугаЕНВД, 1, 0);
		ИначеЕсли Объект.Вид() = "РасходыБудущихПериодов" Тогда                                                             
			УслугаЕНВД = ?(Объект.Субконто1.ТипНоменклатуры = Перечисление.ТипыНоменклатуры.УслугаЕНВД, 1, 0);
		ИначеЕсли Объект.Вид() = "Материалы" Тогда                                                             
			УслугаЕНВД = ?(БухИт.Субконто(2).Субконто1.ТипНоменклатуры = Перечисление.ТипыНоменклатуры.УслугаЕНВД, 1, 0);
		КонецЕсли;	
	КонецЕсли;	
	
	Если (ПризнакПринадлежностиЕНВД <> Сч44_2) И
	(ПризнакПринадлежностиЕНВД <> Сч44_3) И
	(ПризнакПринадлежностиЕНВД <> Сч26) И 
	(УслугаЕНВД <> 1) Тогда  
		ВременнаяРазницаЕНВД = 0; 
	Иначе 
		
		// Временные разницы на начало месяца
		ОценкаБУнаНачало = ИтогПоСчетам(БухИт, СчетаУчетаБУ, 1);
		ОценкаНУнаНачало = ИтогПоСчетам(БухИт, СчетаУчетаНУ, 1);
		ПРнаНачало       = ИтогПоСчетам(БухИт, СчетНПР, 1);
		КВРнаНачало      = ИтогПоСчетам(БухИт, СчетКВР, 1);
		ОтклонениеНаНачало = ОценкаБУнаНачало - ОценкаНУнаНачало - ПРнаНачало - КВРнаНачало;
		
		// Временные разницы на конец месяца
		ОценкаБУнаКонец = ИтогПоСчетам(БухИт, СчетаУчетаБУ, 2);
		ОценкаНУнаКонец = ИтогПоСчетам(БухИт, СчетаУчетаНУ, 2);
		ПРнаКонец       = ИтогПоСчетам(БухИт, СчетНПР, 2);
		КВРнаКонец      = ИтогПоСчетам(БухИт, СчетКВР, 2);
		ОтклонениеНаКонец  = ОценкаБУнаКонец - ОценкаНУнаКонец - ПРнаКонец - КВРнаКонец; 
		
		Если (ОценкаБУнаНачало = ОценкаНУнаНачало) И (ОценкаБУнаКонец = ОценкаНУнаКонец) Тогда
			ВременнаяРазницаЕНВД = 0; 
		КонецЕсли;   
		
		ВременнаяРазницаЕНВД = ОтклонениеНаКонец - ОтклонениеНаНачало;
		
		Если (ПризнакПринадлежностиЕНВД <> Сч44_2) И
		(УслугаЕНВД <> 1) Тогда  
			КорректировкаВременнойРазницыЕНВД = 0; 
		Иначе
			КорректировкаВременнойРазницыЕНВД = ВременнаяРазницаЕНВД;
		КонецЕсли;
		
		Если (ПризнакПринадлежностиЕНВД = Сч44_3) Или (ПризнакПринадлежностиЕНВД = Сч26)  Тогда
			ВременнаяРазницаЕНВД = ВременнаяРазницаЕНВД * (1 - Коэф);
		КонецЕсли;
		
		// Определим на начало месяца существует налогооблагаемая или вычитаемая разница
		НалогооблагаемаяРазницаНаНачало = 0;
		ВычитаемаяРазницаНаНачало       = 0;
		Если ОтклонениеНаНачало > 0 Тогда
			НалогооблагаемаяРазницаНаНачало =  ОтклонениеНаНачало;
		Иначе
			ВычитаемаяРазницаНаНачало       =  -ОтклонениеНаНачало;
		КонецЕсли; 
		
		ВычитаемаяРазница                 = 0;
		УменьшениеВычитаемойРазницы       = 0;
		НалогооблагаемаяРазница           = 0;
		УменьшениеНалогооблагаемойРазницы = 0;
		
		ВременнаяРазница = ВременнаяРазницаЕНВД - КорректировкаВременнойРазницыЕНВД;
		
		Если ВременнаяРазница > 0 Тогда // Возникновение налогооблагаемой разницы (уменьшение вычитаемой разницы)
			
			Если ВычитаемаяРазницаНаНачало > 0 Тогда // Уменьшение вычитаемой разницы
				УменьшениеВычитаемойРазницы = Мин(ВременнаяРазницаЕНВД, ВычитаемаяРазницаНаНачало);
			КонецЕсли;
			НалогооблагаемаяРазница = ВременнаяРазницаЕНВД - УменьшениеВычитаемойРазницы;
			
		ИначеЕсли ВременнаяРазницаЕНВД < 0 Тогда // Возникновение вычитаемой разницы (уменьшение налогооблагаемой разницы)
			
			Если НалогооблагаемаяРазницаНаНачало > 0 Тогда // Уменьшение налогооблагаемой разницы
				УменьшениеНалогооблагаемойРазницы = Мин(-ВременнаяРазницаЕНВД, НалогооблагаемаяРазницаНаНачало);
			КонецЕсли;
			ВычитаемаяРазница = -ВременнаяРазницаЕНВД - УменьшениеНалогооблагаемойРазницы;
		КонецЕсли;
		
		ВременныеРазницы.ВычитаемыеВозниклоЕНВД    = ВременныеРазницы.ВычитаемыеВозниклоЕНВД    + ВычитаемаяРазница;
		ВременныеРазницы.ВычитаемыеУменьшилосьЕНВД = ВременныеРазницы.ВычитаемыеУменьшилосьЕНВД + УменьшениеВычитаемойРазницы;
		ВременныеРазницы.НалогооблагаемыеВозниклоЕНВД    = ВременныеРазницы.НалогооблагаемыеВозниклоЕНВД    + НалогооблагаемаяРазница;
		ВременныеРазницы.НалогооблагаемыеУменьшилосьЕНВД = ВременныеРазницы.НалогооблагаемыеУменьшилосьЕНВД + УменьшениеНалогооблагаемойРазницы;
		
	КонецЕсли; 

КонецПроцедуры // РасчетВременныхРазницПоЕНВД

//******************************************************************************
// УдалитьПустыеСтрокиВТаблицеПоВременнымРазницам()
//
// Параметры:
//  Нет.
//
// Вызывается из формул элементов диалога:
//  Нет.
//
// Описание:
//  Здесь описывается процедура.
//
Процедура УдалитьПустыеСтрокиВТаблицеПоВременнымРазницам(ВременныеРазницы)
	
	// Строки таблицы анализируются начиная с последней строки
	КоличествоСтрок = ВременныеРазницы.КоличествоСтрок();
	Для СчетчикЦикла = 1 По КоличествоСтрок Цикл
		
		ВременныеРазницы.ПолучитьСтрокуПоНомеру(КоличествоСтрок - СчетчикЦикла + 1);
		
		Если (ВременныеРазницы.ВычитаемыеВозникло              = 0)
		   и (ВременныеРазницы.ВычитаемыеУменьшилось           = 0)
		   и (ВременныеРазницы.НалоговыйАктивПризнание         = 0)
		   и (ВременныеРазницы.НалоговыйАктивПогашение         = 0)
		   и (ВременныеРазницы.НалогооблагаемыеВозникло        = 0)
		   и (ВременныеРазницы.НалогооблагаемыеУменьшилось     = 0)
		   и (ВременныеРазницы.НалоговоеОбязательствоПризнание = 0)
		   и (ВременныеРазницы.НалоговоеОбязательствоПогашение = 0) Тогда
		   ВременныеРазницы.УдалитьСтроку();
		КонецЕсли; 
	КонецЦикла;
	
КонецПроцедуры // УдалитьПустыеСтрокиВТаблицеПоВременнымРазницам()

//******************************************************************************
// УчетВременныхРазниц()
//
// Параметры:
//  Нет.
//
// Вызывается из формул элементов диалога:
//  Нет.
//
// Описание:
//  Здесь описывается процедура.
//
Процедура УчетВременныхРазниц()
	
	//Запишем проводки, чтобы учесть эти суммы при расчете налога на прибыль.
	Если Операция.КоличествоПроводок() > 0 Тогда
		Операция.ЗаписатьПроводки();
	КонецЕсли;
	
	// Формирование печатной формы
	Если ФормироватьПечатнуюФорму = 1 Тогда
		НаименованиеРегламентнойОперации = "Учет временных разниц (ПБУ 18/02)";
		Таб.ВывестиСекцию("РегламентнаяОперация");
	КонецЕсли;
	
	СписокСчетов = СоздатьОбъект("СписокЗначений"); //создание этого спсика один раз сильно влияет на скорость расчета временных разниц
	
	ВременныеРазницы = СоздатьОбъект("ТаблицаЗначений");
	ВременныеРазницы.НоваяКолонка("ВидАктивовОбязательств");
	ВременныеРазницы.НоваяКолонка("ВычитаемыеВозникло", "Число");
	ВременныеРазницы.НоваяКолонка("ВычитаемыеУменьшилось", "Число");
	ВременныеРазницы.НоваяКолонка("НалоговыйАктивПризнание", "Число");
	ВременныеРазницы.НоваяКолонка("НалоговыйАктивПогашение", "Число");
	ВременныеРазницы.НоваяКолонка("НалогооблагаемыеВозникло", "Число");
	ВременныеРазницы.НоваяКолонка("НалогооблагаемыеУменьшилось", "Число");
	ВременныеРазницы.НоваяКолонка("НалоговоеОбязательствоПризнание", "Число");
	ВременныеРазницы.НоваяКолонка("НалоговоеОбязательствоПогашение", "Число");  
	ВременныеРазницы.НоваяКолонка("ВычитаемыеВозниклоЕНВД", "Число");
	ВременныеРазницы.НоваяКолонка("ВычитаемыеУменьшилосьЕНВД", "Число");
	ВременныеРазницы.НоваяКолонка("НалогооблагаемыеВозниклоЕНВД", "Число");
	ВременныеРазницы.НоваяКолонка("НалогооблагаемыеУменьшилосьЕНВД", "Число");
	ВременныеРазницы.НоваяКолонка("ВычитаемыеНаНачалоМес", "Число");
	ВременныеРазницы.НоваяКолонка("НалогооблагаемыеНаНачалоМес", "Число");
	
	// Формирование печатной формы
	Если ФормироватьПечатнуюФорму = 1 Тогда
		ВременныеРазницы.НоваяКолонка("РасшифровкаВременныхРазниц", "СписокЗначений");
	КонецЕсли; 
	
	// Расчет коэффициента распределения расходов на ЕНВД и не ЕНВД.
	КоэффициентРаспределения = КоэффициентРаспределенияПоВидамДеятельности();
	
	// -------------------
	// Основные средства 
	ТаблицаОСвНУТМЦвБУ = СоздатьОбъект("ТаблицаЗначений");
	ТаблицаОСвНУТМЦвБУ.НоваяКолонка("ТМЦ",   "Справочник.Материалы");
	ТаблицаОСвНУТМЦвБУ.НоваяКолонка("ОС",    "Справочник.ОсновныеСредства");
	ТаблицаОСвНУТМЦвБУ.НоваяКолонка("КорректСНД", "Число");
	ТаблицаОСвНУТМЦвБУ.НоваяКолонка("КорректСКД", "Число");
	
	БухИт = СоздатьОбъект("БухгалтерскиеИтоги"); БухИт.ИспользоватьРазделительУчета(ЮрЛицо);
	БухИт.ИспользоватьСубконто(ВидыСубконто.ОсновныеСредства);
	Если БухИт.ВыполнитьЗапрос(ДатаНач, ДатаКон, "01, 03, 02, Н05.01, Н05.02, Н05.МЦ, НПР.01, КВР.01",,,,,) = 1 Тогда
		ВидАктивовОбязательств = Перечисление.ВидыАктивовИобязательств.ОсновныеСредства;
	
		ВременныеРазницы.НоваяСтрока();
		ВременныеРазницы.ВидАктивовОбязательств = ВидАктивовОбязательств;  				
		
		// Формирование печатной формы
		Если ФормироватьПечатнуюФорму = 1 Тогда
			ВременныеРазницы.РасшифровкаВременныхРазниц = РасшифровкаВременныхРазниц(ВидАктивовОбязательств);
		КонецЕсли;
		БухИт.ВыбратьСубконто(	ВидыСубконто.ОсновныеСредства);
		Пока БухИт.ПолучитьСубконто(ВидыСубконто.ОсновныеСредства) = 1 Цикл
			
			КорректСНД = 0;
			КорректСКД = 0; 
			
			Объект = БухИт.Субконто(ВидыСубконто.ОсновныеСредства); 
			
			Если Объект.МатериалДляОтраженияВСоставеМПЗ.Выбран() = 1 Тогда
				
				Если БухИт.ПолучитьСчет( ,"Н05.МЦ") = 1 Тогда
					ДатаВводаВЭксплуатацию = Объект.ДатаВводаВЭксплуатацию;					  
					
					Если (((Число(ДатаВводаВЭксплуатацию) = 0) Или (КонМесяца(ДатаВводаВЭксплуатацию) >= КонМесяца(ДатаДок))) и (БухИт.КО() = 0))
					или ((БухИт.КО() <> 0) и (Число(ДатаВводаВЭксплуатацию) <> 0) и (КонМесяца(ДатаВводаВЭксплуатацию) = КонМесяца(Объект.ДатаВыбытия))) Тогда  
						ТаблицаОСвНУТМЦвБУ.НоваяСтрока(); 
						ТаблицаОСвНУТМЦвБУ.ТМЦ = Объект.МатериалДляОтраженияВСоставеМПЗ; 
						ТаблицаОСвНУТМЦвБУ.ОС  = Объект; 
						ТаблицаОСвНУТМЦвБУ.КорректСНД = БухИт.СНД(); 
						Если КонМесяца(ДатаВводаВЭксплуатацию) <> КонМесяца(ДатаДок) Тогда  
							ТаблицаОСвНУТМЦвБУ.КорректСКД = БухИт.СКД();
							КорректСКД = - БухИт.СКД(); 
						КонецЕсли;
						КорректСНД = - БухИт.СНД();
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли;
			ВременнаяРазницаЕНВД = 0;
			КорректировкаВременнойРазницыЕНВД = 0;
			РасчетВременныхРазницПоЕНВД("01,02", "Н05.01,Н05.02","НПР.01", "КВР.01", 
			БухИт, Объект, Объект.СчетЗатрат.Получить(ДатаДок),
			КоэффициентРаспределения, ВременнаяРазницаЕНВД, КорректировкаВременнойРазницыЕНВД, ВременныеРазницы);
			
			РасчетВременныхРазниц("01,02, 03", "Н05.01, Н05.02, Н05.МЦ",
								  "НПР.01", "КВР.01", 
								  БухИт, ВременныеРазницы, Объект, ВременнаяРазницаЕНВД, КорректСНД, КорректСКД);
		КонецЦикла;
		ОтразитьОтложенныйНалоговыйАктивОбязательство(ВременныеРазницы, ВидАктивовОбязательств); 
	КонецЕсли;
	
	// -------------------
	// НМА 
	БухИт.ИспользоватьСубконто(ВидыСубконто.НематериальныеАктивы);
	Если БухИт.ВыполнитьЗапрос(ДатаНач, ДатаКон, "04.1, 05, Н05.03, Н05.04, НПР.04, КВР.04") = 1 Тогда
		ВидАктивовОбязательств = Перечисление.ВидыАктивовИобязательств.НематериальныеАктивы;
	
		ВременныеРазницы.НоваяСтрока();
		ВременныеРазницы.ВидАктивовОбязательств = ВидАктивовОбязательств;
		
		// Формирование печатной формы
		Если ФормироватьПечатнуюФорму = 1 Тогда
			ВременныеРазницы.РасшифровкаВременныхРазниц = РасшифровкаВременныхРазниц(ВидАктивовОбязательств);
		КонецЕсли;
	
		БухИт.ВыбратьСубконто(	ВидыСубконто.НематериальныеАктивы);
		Пока БухИт.ПолучитьСубконто(ВидыСубконто.НематериальныеАктивы) = 1 Цикл
			
			Если БухИт.Субконто(ВидыСубконто.НематериальныеАктивы).ВидОбъектаУчета = 1 Тогда
				Продолжить;
			КонецЕсли;
			
			Объект = БухИт.Субконто(ВидыСубконто.НематериальныеАктивы);
			РасчетВременныхРазниц("04.1, 05", "Н05.03, Н05.04",
								  "НПР.04", "КВР.04", 
								  БухИт, ВременныеРазницы, Объект);
		КонецЦикла;
		ОтразитьОтложенныйНалоговыйАктивОбязательство(ВременныеРазницы, ВидАктивовОбязательств);
	КонецЕсли;
	
	// -------------------
	// Оборудование
	БухИт.ИспользоватьСубконто(ВидыСубконто.Оборудование);
	Если БухИт.ВыполнитьЗапрос(ДатаНач, ДатаКон, "07, Н01.02, НПР.07, КВР.07") = 1 Тогда
		ВидАктивовОбязательств = Перечисление.ВидыАктивовИобязательств.Оборудование;
	
		ВременныеРазницы.НоваяСтрока();
		ВременныеРазницы.ВидАктивовОбязательств = ВидАктивовОбязательств;
		
		// Формирование печатной формы
		Если ФормироватьПечатнуюФорму = 1 Тогда
			ВременныеРазницы.РасшифровкаВременныхРазниц = РасшифровкаВременныхРазниц(ВидАктивовОбязательств);
		КонецЕсли;
	
		БухИт.ВыбратьСубконто(	ВидыСубконто.Оборудование);
		Пока БухИт.ПолучитьСубконто(ВидыСубконто.Оборудование) = 1 Цикл
			
			Объект = БухИт.Субконто(ВидыСубконто.Оборудование);
			РасчетВременныхРазниц("07", "Н01.02",
								  "НПР.07", "КВР.07", 
								  БухИт, ВременныеРазницы, Объект);
		КонецЦикла;
		ОтразитьОтложенныйНалоговыйАктивОбязательство(ВременныеРазницы, ВидАктивовОбязательств);
	КонецЕсли;
	
	// -------------------
	// Внеоборотные активы
	БухИт.ИспользоватьСубконто(ВидыСубконто.ОбъектыСтроительства);
	Если БухИт.ВыполнитьЗапрос(ДатаНач, ДатаКон, "08.1, 08.2, 08.3, 08.4, 08.5, 08.8, Н01.01, Н01.03, Н01.08, Н01.09, НПР.08, КВР.08") = 1 Тогда
		ВидАктивовОбязательств = Перечисление.ВидыАктивовИобязательств.ВнеоборотныеАктивы;
	
		ВременныеРазницы.НоваяСтрока();
		ВременныеРазницы.ВидАктивовОбязательств = ВидАктивовОбязательств;
		
		// Формирование печатной формы
		Если ФормироватьПечатнуюФорму = 1 Тогда
			ВременныеРазницы.РасшифровкаВременныхРазниц = РасшифровкаВременныхРазниц(ВидАктивовОбязательств);
		КонецЕсли;
	
		БухИт.ВыбратьСубконто(ВидыСубконто.ОбъектыСтроительства);
		Пока БухИт.ПолучитьСубконто(ВидыСубконто.ОбъектыСтроительства) = 1 Цикл
			
			Объект = БухИт.Субконто(ВидыСубконто.ОбъектыСтроительства);
			РасчетВременныхРазниц("08.1,08.2,08.3,08.4,08.5,08.8", "Н01.01,Н01.03,Н01.08,Н01.09",
								  "НПР.08", "КВР.08", 
								  БухИт, ВременныеРазницы, Объект);
		КонецЦикла;
		ОтразитьОтложенныйНалоговыйАктивОбязательство(ВременныеРазницы, ВидАктивовОбязательств);
	КонецЕсли;
	
	// -------------------
	// Материалы
	БухИт.ИспользоватьСубконто(ВидыСубконто.Материалы);
	Если БухИт.ВыполнитьЗапрос(ДатаНач, ДатаКон, "10, Н02.01, Н02.09, НПР.10, КВР.10") = 1 Тогда
		ВидАктивовОбязательств = Перечисление.ВидыАктивовИобязательств.Материалы; 
		Сч10_10	 = СчетПоКоду("10.10");
		Сч44_1_2 = СчетПоКоду("44.1.2");
		Сч20	 = СчетПоКоду("20");
	
		ВременныеРазницы.НоваяСтрока();
		ВременныеРазницы.ВидАктивовОбязательств = ВидАктивовОбязательств;
		
		// Формирование печатной формы
		Если ФормироватьПечатнуюФорму = 1 Тогда
			ВременныеРазницы.РасшифровкаВременныхРазниц = РасшифровкаВременныхРазниц(ВидАктивовОбязательств);
		КонецЕсли;
		
		БухИт10 = СоздатьОбъект("БухгалтерскиеИтоги"); БухИт10.ИспользоватьРазделительУчета(ЮрЛицо);
		БухИт10.ИспользоватьСубконто(ВидыСубконто.Материалы, ,1);
		БухИт10.ИспользоватьСубконто(ВидыСубконто.НазначенияИспользования, , 1);
		БухИт10.ВыполнитьЗапрос(ДатаНач, ДатаКон, "10.11");
	
		БухИт.ВыбратьСубконто(ВидыСубконто.Материалы);
		Пока БухИт.ПолучитьСубконто(ВидыСубконто.Материалы) = 1 Цикл
			
			Объект = БухИт.Субконто(ВидыСубконто.Материалы);  
			ПоправкаНаОССНД = 0; 
			ПоправкаНаОССКД = 0; 
            			
			ТаблицаОСвНУТМЦвБУ.ВыбратьСтроки();
			Пока ТаблицаОСвНУТМЦвБУ.ПолучитьСтроку() = 1 Цикл
				Если ТаблицаОСвНУТМЦвБУ.ТМЦ = Объект Тогда 
					
					ПоправкаНаОССНД = ПоправкаНаОССНД + ТаблицаОСвНУТМЦвБУ.КорректСНД;
					ПоправкаНаОССКД = ПоправкаНаОССКД + ТаблицаОСвНУТМЦвБУ.КорректСКД;
				КонецЕсли; 
			КонецЦикла; 
			
            ВсегоВременнаяРазницаЕНВД = 0;
			Если Объект.СубСчет10 = Сч10_10 Тогда 
				ВсегоВременнаяРазницаЕНВД = 0;
				БухИт10.ВыбратьСубконто(ВидыСубконто.Материалы);				
				Если БухИт10.ПолучитьСубконто(1, , Объект) = 1 Тогда
					БухИт10.ВыбратьСубконто(2, 0);				
					Пока БухИт10.ПолучитьСубконто(2) = 1 Цикл						
						ВременнаяРазницаЕНВД = 0;
						КорректировкаВременнойРазницыЕНВД = 0;
						РасчетВременныхРазницПоЕНВД("10.11", ,"НПР.10.2", "КВР.10.2", 
						БухИт10, Объект, БухИт10.Субконто(2).СчетЗатрат,
						КоэффициентРаспределения, ВременнаяРазницаЕНВД, КорректировкаВременнойРазницыЕНВД, ВременныеРазницы);						
						ВсегоВременнаяРазницаЕНВД = ВсегоВременнаяРазницаЕНВД + ВременнаяРазницаЕНВД;						
					КонецЦикла;
				КонецЕсли;  
			КонецЕсли;

			РасчетВременныхРазниц("10", "Н02.01,Н02.09",
								  "НПР.10", "КВР.10", 
								  БухИт, ВременныеРазницы, Объект, ВсегоВременнаяРазницаЕНВД, ПоправкаНаОССНД , ПоправкаНаОССКД );

		КонецЦикла;
		
		ОтразитьОтложенныйНалоговыйАктивОбязательство(ВременныеРазницы, ВидАктивовОбязательств);
	КонецЕсли;
	
	// -------------------
	// НЗП
	БухИт.ИспользоватьСубконто(ВидыСубконто.ВидыНоменклатуры);
	Если БухИт.ВыполнитьЗапрос(ДатаНач, ДатаКон, "20, Н01.05, НПР.20, КВР.20") = 1 Тогда
		ВидАктивовОбязательств = Перечисление.ВидыАктивовИобязательств.НезавершенноеПроизводство;
	
		ВременныеРазницы.НоваяСтрока();
		ВременныеРазницы.ВидАктивовОбязательств = ВидАктивовОбязательств;
		
		// Формирование печатной формы
		Если ФормироватьПечатнуюФорму = 1 Тогда
			ВременныеРазницы.РасшифровкаВременныхРазниц = РасшифровкаВременныхРазниц(ВидАктивовОбязательств);
		КонецЕсли;
	
		БухИт.ВыбратьСубконто(ВидыСубконто.ВидыНоменклатуры);
		Пока БухИт.ПолучитьСубконто(ВидыСубконто.ВидыНоменклатуры) = 1 Цикл
			
			Если БухИт.Субконто(ВидыСубконто.ВидыНоменклатуры).ТипНоменклатуры = Перечисление.ТипыНоменклатуры.УслугаЕНВД Тогда
				Продолжить;
			КонецЕсли;
			
			Объект = БухИт.Субконто(ВидыСубконто.ВидыНоменклатуры);
			РасчетВременныхРазниц("20", "Н01.05",
								  "НПР.20", "КВР.20", 
								  БухИт, ВременныеРазницы, Объект);
		КонецЦикла;
		ОтразитьОтложенныйНалоговыйАктивОбязательство(ВременныеРазницы, ВидАктивовОбязательств);
	КонецЕсли;
	
	// -------------------
	// Продукция
	БухИт.ИспользоватьСубконто(ВидыСубконто.Номенклатура);
	Если БухИт.ВыполнитьЗапрос(ДатаНач, ДатаКон, "43, Н02.03, НПР.43, КВР.43") = 1 Тогда
		ВидАктивовОбязательств = Перечисление.ВидыАктивовИобязательств.ГотоваяПродукция;
	
		ВременныеРазницы.НоваяСтрока();
		ВременныеРазницы.ВидАктивовОбязательств = ВидАктивовОбязательств;
		
		// Формирование печатной формы
		Если ФормироватьПечатнуюФорму = 1 Тогда
			ВременныеРазницы.РасшифровкаВременныхРазниц = РасшифровкаВременныхРазниц(ВидАктивовОбязательств);
		КонецЕсли;
	
		БухИт.ВыбратьСубконто(ВидыСубконто.Номенклатура);
		Пока БухИт.ПолучитьСубконто(ВидыСубконто.Номенклатура) = 1 Цикл
			
			Объект = БухИт.Субконто(ВидыСубконто.Номенклатура);
			РасчетВременныхРазниц("43", "Н02.03",
								  "НПР.43", "КВР.43", 
								  БухИт, ВременныеРазницы, Объект);
		КонецЦикла;
		ОтразитьОтложенныйНалоговыйАктивОбязательство(ВременныеРазницы, ВидАктивовОбязательств);
	КонецЕсли;
	
	// -------------------
	// Полуфабрикаты
	БухИт.ИспользоватьСубконто(ВидыСубконто.Номенклатура);
	Если БухИт.ВыполнитьЗапрос(ДатаНач, ДатаКон, "21, Н02.07, НПР.21, КВР.21") = 1 Тогда
		ВидАктивовОбязательств = Перечисление.ВидыАктивовИобязательств.Полуфабрикаты;
	
		ВременныеРазницы.НоваяСтрока();
		ВременныеРазницы.ВидАктивовОбязательств = ВидАктивовОбязательств;
		
		// Формирование печатной формы
		Если ФормироватьПечатнуюФорму = 1 Тогда
			ВременныеРазницы.РасшифровкаВременныхРазниц = РасшифровкаВременныхРазниц(ВидАктивовОбязательств);
		КонецЕсли;
	
		БухИт.ВыбратьСубконто(ВидыСубконто.Номенклатура);
		Пока БухИт.ПолучитьСубконто(ВидыСубконто.Номенклатура) = 1 Цикл
			
			Объект = БухИт.Субконто(ВидыСубконто.Номенклатура);
			РасчетВременныхРазниц("21", "Н02.07",
								  "НПР.21", "КВР.21", 
								  БухИт, ВременныеРазницы, Объект);
		КонецЦикла;
		ОтразитьОтложенныйНалоговыйАктивОбязательство(ВременныеРазницы, ВидАктивовОбязательств);
	КонецЕсли;
	
	// -------------------
	// РБП  
	БухИт.ИспользоватьСубконто(ВидыСубконто.РасходыБудущихПериодов);
	Если БухИт.ВыполнитьЗапрос(ДатаНач, ДатаКон, "97, Н04.02, Н04.04, Н04.05, Н04.06, Н04.07, Н04.08, Н04.09, Н04.10, Н04.11, НПР.97, КВР.97") = 1 Тогда
		ВидАктивовОбязательств = Перечисление.ВидыАктивовИобязательств.РасходыБудущихПериодов;
		
		ВременныеРазницы.НоваяСтрока();
		ВременныеРазницы.ВидАктивовОбязательств = ВидАктивовОбязательств;
		
		// Формирование печатной формы
		Если ФормироватьПечатнуюФорму = 1 Тогда
			ВременныеРазницы.РасшифровкаВременныхРазниц = РасшифровкаВременныхРазниц(ВидАктивовОбязательств);
		КонецЕсли;
		БухИт.ВыбратьСубконто(ВидыСубконто.РасходыБудущихПериодов);
		Пока БухИт.ПолучитьСубконто(ВидыСубконто.РасходыБудущихПериодов) = 1 Цикл
			
			Объект = БухИт.Субконто(ВидыСубконто.РасходыБудущихПериодов);  
			ВременнаяРазницаЕНВД = 0;
			КорректировкаВременнойРазницыЕНВД = 0;
			РасчетВременныхРазницПоЕНВД("97","Н04.02, Н04.04, Н04.05, Н04.06, Н04.07, Н04.08, Н04.09, Н04.10, Н04.11",  "НПР.97", "КВР.97",
			                                              БухИт, Объект, Объект.СчетЗатрат,
														  КоэффициентРаспределения, ВременнаяРазницаЕНВД, КорректировкаВременнойРазницыЕНВД, ВременныеРазницы);
								  
			РасчетВременныхРазниц("97" ,"Н04.02, Н04.04, Н04.05, Н04.06, Н04.07, Н04.08, Н04.09, Н04.10, Н04.11",
								  "НПР.97", "КВР.97", 
								  БухИт, ВременныеРазницы, Объект, ВременнаяРазницаЕНВД); 								  
		КонецЦикла; 
		ОтразитьОтложенныйНалоговыйАктивОбязательство(ВременныеРазницы, ВидАктивовОбязательств); 
	КонецЕсли;
    
	// -------------------
	// Товары
	
	// Если учет товаров ведется по продажным ценам то не формируем пообъектную расшифровку
	Если (БухИтЗаМесяц.КО("42") <> 0) или (БухИтЗаМесяц.СКК("42") <> 0) Тогда
		УчетПоПродажнымЦенам = 1;
	Иначе
		УчетПоПродажнымЦенам = 0;
	КонецЕсли;
	
	Если УчетПоПродажнымЦенам = 0 Тогда // учет товаров ведется не по продажным ценам
		БухИт.ИспользоватьСубконто(ВидыСубконто.Номенклатура);
	КонецЕсли;
	
	Если БухИт.ВыполнитьЗапрос(ДатаНач, ДатаКон, "41, 42, Н02.02, НПР.41, КВР.41") = 1 Тогда
		ВидАктивовОбязательств = Перечисление.ВидыАктивовИобязательств.Товары;
	
		ВременныеРазницы.НоваяСтрока();
		ВременныеРазницы.ВидАктивовОбязательств = ВидАктивовОбязательств;
		
		// Формирование печатной формы
		Если ФормироватьПечатнуюФорму = 1 Тогда
			ВременныеРазницы.РасшифровкаВременныхРазниц = РасшифровкаВременныхРазниц(ВидАктивовОбязательств);
		КонецЕсли;
		
	    Если УчетПоПродажнымЦенам = 0 Тогда // учет товаров ведется не по продажным ценам
			БухИт.ВыбратьСубконто(ВидыСубконто.Номенклатура);
			Пока БухИт.ПолучитьСубконто(ВидыСубконто.Номенклатура) = 1 Цикл
				
				Объект = БухИт.Субконто(ВидыСубконто.Номенклатура);
				РасчетВременныхРазниц("41", "Н02.02",
									  "НПР.41", "КВР.41", 
									  БухИт, ВременныеРазницы, Объект);
			КонецЦикла;
							
		Иначе  // учет товаров ведется по продажным ценам
			Объект = "Покупные товары";
			РасчетВременныхРазниц("41,42", "Н02.02",
								  "НПР.41", "КВР.41", 
								  БухИт, ВременныеРазницы, Объект);
		КонецЕсли;
		ОтразитьОтложенныйНалоговыйАктивОбязательство(ВременныеРазницы, ВидАктивовОбязательств);
	КонецЕсли;
	
	// -------------------
	// Товары отгруженные
	БухИт.ИспользоватьСубконто(ВидыСубконто.Номенклатура);
	Если БухИт.ВыполнитьЗапрос(ДатаНач, ДатаКон, "45, Н02.04, НПР.45, КВР.45") = 1 Тогда
		ВидАктивовОбязательств = Перечисление.ВидыАктивовИобязательств.ТоварыОтгруженные;
	
		ВременныеРазницы.НоваяСтрока();
		ВременныеРазницы.ВидАктивовОбязательств = ВидАктивовОбязательств;
		
		// Формирование печатной формы
		Если ФормироватьПечатнуюФорму = 1 Тогда
			ВременныеРазницы.РасшифровкаВременныхРазниц = РасшифровкаВременныхРазниц(ВидАктивовОбязательств);
		КонецЕсли;
	
		БухИт.ВыбратьСубконто(ВидыСубконто.Номенклатура);
		Пока БухИт.ПолучитьСубконто(ВидыСубконто.Номенклатура) = 1 Цикл
			
			Объект = БухИт.Субконто(ВидыСубконто.Номенклатура);
			РасчетВременныхРазниц("45", "Н02.04",
								  "НПР.45", "КВР.45", 
								  БухИт, ВременныеРазницы, Объект);
		КонецЦикла;
		ОтразитьОтложенныйНалоговыйАктивОбязательство(ВременныеРазницы, ВидАктивовОбязательств);
	КонецЕсли;
	
	// -------------------
	// Ценные бумаги
	БухИт.ИспользоватьСубконто(ВидыСубконто.ЦенныеБумаги);
	Если БухИт.ВыполнитьЗапрос(ДатаНач, ДатаКон, "58.1.2,58.2,Н02.05,НПР.58.2,КВР.58.2") = 1 Тогда
		ВидАктивовОбязательств = Перечисление.ВидыАктивовИобязательств.ФинансовыеВложения;
	
		ВременныеРазницы.НоваяСтрока();
		ВременныеРазницы.ВидАктивовОбязательств = ВидАктивовОбязательств;
		
		// Формирование печатной формы
		Если ФормироватьПечатнуюФорму = 1 Тогда
			ВременныеРазницы.РасшифровкаВременныхРазниц = РасшифровкаВременныхРазниц(ВидАктивовОбязательств);
		КонецЕсли;
	
		БухИт.ВыбратьСубконто(ВидыСубконто.ЦенныеБумаги);
		Пока БухИт.ПолучитьСубконто(ВидыСубконто.ЦенныеБумаги) = 1 Цикл
			
			Объект = БухИт.Субконто(ВидыСубконто.ЦенныеБумаги);
			РасчетВременныхРазниц("58.1.2, 58.2", "Н02.05",
								  "НПР.58.2", "КВР.58.2", 
								  БухИт, ВременныеРазницы, Объект);
		КонецЦикла;
		ОтразитьОтложенныйНалоговыйАктивОбязательство(ВременныеРазницы, ВидАктивовОбязательств);
	КонецЕсли;
	
	// -------------------
	// Паи
	БухИт.ИспользоватьСубконто(ВидыСубконто.Контрагенты);
	Если БухИт.ВыполнитьЗапрос(ДатаНач, ДатаКон, "58.1.1,Н02.08,НПР.58.1,КВР.58.1") = 1 Тогда
		ВидАктивовОбязательств = Перечисление.ВидыАктивовИобязательств.Паи;
	
		ВременныеРазницы.НоваяСтрока();
		ВременныеРазницы.ВидАктивовОбязательств = ВидАктивовОбязательств;
		
		// Формирование печатной формы
		Если ФормироватьПечатнуюФорму = 1 Тогда
			ВременныеРазницы.РасшифровкаВременныхРазниц = РасшифровкаВременныхРазниц(ВидАктивовОбязательств);
		КонецЕсли;
	
		БухИт.ВыбратьСубконто(ВидыСубконто.Контрагенты);
		Пока БухИт.ПолучитьСубконто(ВидыСубконто.Контрагенты) = 1 Цикл
			
			Объект = БухИт.Субконто(ВидыСубконто.Контрагенты);
			РасчетВременныхРазниц("58.1.1", "Н02.08",
								  "НПР.58.1", "КВР.58.1", 
								  БухИт, ВременныеРазницы, Объект);
		КонецЦикла;
		ОтразитьОтложенныйНалоговыйАктивОбязательство(ВременныеРазницы, ВидАктивовОбязательств);
	КонецЕсли;
	
	// -------------------
	// Приобретенные права требования
	БухИт.ИспользоватьСубконто(ВидыСубконто.Договоры);
	Если БухИт.ВыполнитьЗапрос(ДатаНач, ДатаКон, "58.5, Н02.06, НПР.58.5, КВР.58.5") = 1 Тогда
		ВидАктивовОбязательств = Перечисление.ВидыАктивовИобязательств.ПраваТребования;
	
		ВременныеРазницы.НоваяСтрока();
		ВременныеРазницы.ВидАктивовОбязательств = ВидАктивовОбязательств;
		
		// Формирование печатной формы
		Если ФормироватьПечатнуюФорму = 1 Тогда
			ВременныеРазницы.РасшифровкаВременныхРазниц = РасшифровкаВременныхРазниц(ВидАктивовОбязательств);
		КонецЕсли;
	
		БухИт.ВыбратьСубконто(ВидыСубконто.Договоры);
		Пока БухИт.ПолучитьСубконто(ВидыСубконто.Договоры) = 1 Цикл
			
			Объект = БухИт.Субконто(ВидыСубконто.Договоры);
			Объект = ""+ Объект.Владелец + ", " + Объект;
			РасчетВременныхРазниц("58.5", "Н02.06",
								  "НПР.58.5", "КВР.58.5", 
								  БухИт, ВременныеРазницы, Объект);
		КонецЦикла;
		ОтразитьОтложенныйНалоговыйАктивОбязательство(ВременныеРазницы, ВидАктивовОбязательств);
	КонецЕсли;

	// -------------------
	//Издержки обращения 
	БухИт.ИспользоватьСубконто();
	Если БухИт.ВыполнитьЗапрос(ДатаНач, ДатаКон, "44.1, Н01.07, НПР.44.1, КВР.44.1") = 1 Тогда
		ВидАктивовОбязательств = Перечисление.ВидыАктивовИобязательств.ИздержкиОбращения;
	
		ВременныеРазницы.НоваяСтрока();
		ВременныеРазницы.ВидАктивовОбязательств = ВидАктивовОбязательств;
		
		// Формирование печатной формы
		Если ФормироватьПечатнуюФорму = 1 Тогда
			ВременныеРазницы.РасшифровкаВременныхРазниц = РасшифровкаВременныхРазниц(ВидАктивовОбязательств);
		КонецЕсли;
	
		Объект = "Издержки обращения";
		РасчетВременныхРазниц("44.1", "Н01.07",
							  "НПР.44.1", "КВР.44.1",
							  БухИт, ВременныеРазницы, Объект);
							  
		ОтразитьОтложенныйНалоговыйАктивОбязательство(ВременныеРазницы, ВидАктивовОбязательств);
	КонецЕсли;
	          
	// -------------------
	//Недостачи и потери от порчи ценностей
	Если БухИт.ВыполнитьЗапрос(ДатаНач, ДатаКон, "94, Н16, НПР.94, КВР.94") = 1 Тогда
		ВидАктивовОбязательств = Перечисление.ВидыАктивовИобязательств.НедостачиПотери;
	
		ВременныеРазницы.НоваяСтрока();
		ВременныеРазницы.ВидАктивовОбязательств = ВидАктивовОбязательств;
		
		// Формирование печатной формы
		Если ФормироватьПечатнуюФорму = 1 Тогда
			ВременныеРазницы.РасшифровкаВременныхРазниц = РасшифровкаВременныхРазниц(ВидАктивовОбязательств);
		КонецЕсли;
	
		Объект = "Недостачи и потери от порчи ценностей";
		РасчетВременныхРазниц("94", "Н16",
							  "НПР.94", "КВР.94",
							  БухИт, ВременныеРазницы, Объект);
							  
		ОтразитьОтложенныйНалоговыйАктивОбязательство(ВременныеРазницы, ВидАктивовОбязательств);
	КонецЕсли;
	
	// -------------------
	//Резервы сомнительных долгов
	Если БухИт.ВыполнитьЗапрос(ДатаНач, ДатаКон, "63, Н03.08, НПР.63, КВР.63") = 1 Тогда
		ВидАктивовОбязательств = Перечисление.ВидыАктивовИобязательств.РезервыСомнительныхДолгов;
	
		ВременныеРазницы.НоваяСтрока();
		ВременныеРазницы.ВидАктивовОбязательств = ВидАктивовОбязательств;
		
		// Формирование печатной формы
		Если ФормироватьПечатнуюФорму = 1 Тогда
			ВременныеРазницы.РасшифровкаВременныхРазниц = РасшифровкаВременныхРазниц(ВидАктивовОбязательств);
		КонецЕсли;
	
		Объект = "Резервы сомнительных долгов";
		РасчетВременныхРазниц("63", "Н03.08",
							  "НПР.63", "КВР.63",
							  БухИт, ВременныеРазницы, Объект);
							  
		ОтразитьОтложенныйНалоговыйАктивОбязательство(ВременныеРазницы, ВидАктивовОбязательств);
	КонецЕсли;
	
	// -------------------
	// Доходы будущих периодов
	Если БухИт.ВыполнитьЗапрос(ДатаНач, ДатаКон, "98.2, НПР.98, КВР.98") = 1 Тогда
		ВидАктивовОбязательств = Перечисление.ВидыАктивовИобязательств.ДоходыБудущихПериодов;
	
		ВременныеРазницы.НоваяСтрока();
		ВременныеРазницы.ВидАктивовОбязательств = ВидАктивовОбязательств;
		
		// Формирование печатной формы
		Если ФормироватьПечатнуюФорму = 1 Тогда
			ВременныеРазницы.РасшифровкаВременныхРазниц = РасшифровкаВременныхРазниц(ВидАктивовОбязательств);
		КонецЕсли;
	
		Объект = "Безвозмездно полученное имущество";
		РасчетВременныхРазниц("98.2",,
							  "НПР.98", "КВР.98",
							  БухИт, ВременныеРазницы, Объект);
							  
		ОтразитьОтложенныйНалоговыйАктивОбязательство(ВременныеРазницы, ВидАктивовОбязательств);
	КонецЕсли;
	
	// -------------------
	// Убытки прошлых периодов
	ВременныеРазницыПоУбыткамПрошлыхПериодов(ВременныеРазницы);
	
	// -------------------
	// Временные разницы по расчетам в у.е.
	Если ДатаДок > '01.01.2007' Тогда 

		//Расчет ВР по расчетам в у.е.
		Если БухИт.ВыполнитьЗапрос(ДатаНач, ДатаКон, "60.6,62.6,76.6,УЕ.60,УЕ.62") = 1 Тогда
			ВидАктивовОбязательств = Перечисление.ВидыАктивовИобязательств.КурсовыеРазницыПриОплатеВРублях;
			
			ВременныеРазницы.НоваяСтрока();
			ВременныеРазницы.ВидАктивовОбязательств = ВидАктивовОбязательств;
			
			// Формирование печатной формы
			Если ФормироватьПечатнуюФорму = 1 Тогда
				ВременныеРазницы.РасшифровкаВременныхРазниц = РасшифровкаВременныхРазниц(ВидАктивовОбязательств);
			КонецЕсли; 
			
			Объект = "Курсовые разницы при оплате в рублях (по расчетам с поставщиками и покупателями)";
			РасчетВременныхРазниц("60.6,62.6,76.6","УЕ.60,УЕ.62",,, БухИт, ВременныеРазницы, Объект,,,);											  
			
		    ОтразитьОтложенныйНалоговыйАктивОбязательство(ВременныеРазницы, ВидАктивовОбязательств);
		КонецЕсли;  

	КонецЕсли;
	
	// Формирование печатной формы
	Если ФормироватьПечатнуюФорму = 1 Тогда
		УдалитьПустыеСтрокиВТаблицеПоВременнымРазницам(ВременныеРазницы);
		
		Если ВременныеРазницы.КоличествоСтрок() <> 0 Тогда
			Расшифровка = СоздатьОбъект("СписокЗначений");
			Расшифровка.ДобавитьЗначение("УчетВременныхРазниц", "Наименование таблицы");
			Расшифровка.ДобавитьЗначение(ВременныеРазницы, "Таблица данных");
			Расшифровка.ДобавитьЗначение(ДатаДок, "Дата операции");
			
			НаименованиеРегламентнойПодоперации = "Учет временных разниц (ПБУ 18/02)";
			Таб.ВывестиСекцию("ПодоперацияВыполнена");
			
		Иначе
			НаименованиеРегламентнойПодоперации = "Временных разниц нет";
			Таб.ВывестиСекцию("ПодоперацияНеВыполнена");
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // УчетВременныхРазниц()

//******************************************************************************
// СуммаЕНВД()
//
// Параметры:
//  Нет.
//
// Возвращаемое значение:
//  Здесь описывается возвращаемое значение.
//
// Вызывается из формул элементов диалога:
//  Нет.
//
// Описание:
//  Рассчитывает сумму начисленного ЕНВД.
//
Функция СуммаЕНВД()
	
	Сумма = 0;
	
	// В коде элемент, соответствующему налогу ЕНВД должна быть строка "ЕНВД",
	// по этой строке найдем элемент справочника "Налоги и отчисления".
	НалогиИОтчисления = СоздатьОбъект("Справочник.НалогиИОтчисления");
	НалогиИОтчисления.ВыбратьЭлементы();
	Пока НалогиИОтчисления.ПолучитьЭлемент() = 1 Цикл
	    Если (Найти(НалогиИОтчисления.Код, "ЕНВД") > 0)
		 или (Найти(НалогиИОтчисления.Наименование, "ЕНВД") > 0) Тогда
	        БухИт = СоздатьОбъект("БухгалтерскиеИтоги"); БухИт.ИспользоватьРазделительУчета(ЮрЛицо);
			БухИт.ПериодМНГ(ДатаДок);
	        Сумма = БухИт.КО(НалогиИОтчисления.Счет,,, НалогиИОтчисления.Субконто1, НалогиИОтчисления.Субконто2, НалогиИОтчисления.Субконто3);
            Прервать;
	    КонецЕсли;
	КонецЦикла;
	
	Возврат Сумма;
	
КонецФункции // СуммаЕНВД()

//******************************************************************************
// РасчетНалогаНаПрибыль()
//
// Параметры:
//  Нет.
//
// Вызывается из формул элементов диалога:
//  Нет.
//
// Описание:
//  Здесь описывается процедура.
//
Процедура РасчетНалогаНаПрибыль()
	
	Сч90_1_2 = СчетПоКоду("90.1.2");
	Сч90_2_2 = СчетПоКоду("90.2.2");
	Сч90_7_2 = СчетПоКоду("90.7.2");
	Сч90_8_2 = СчетПоКоду("90.8.2");
	Сч99_1   = СчетПоКоду("99.1");
	Сч99_2_1 = СчетПоКоду("99.2.1");
	Сч99_2_2 = СчетПоКоду("99.2.2");	
	
	//Запишем проводки, чтобы учесть эти суммы при расчете налога на прибыль.
	Если Операция.КоличествоПроводок() > 0 Тогда
		Операция.ЗаписатьПроводки();
	КонецЕсли;
	
	// Налоговые санкции на счете 99.
	ИсключаемыеИзРасчетаСуммы = БухИтЗаГод.ДО(Сч99_1,,, Перечисление.ПрибылиИУбытки.НалоговыеСанкции)
						      - БухИтЗаГод.КО(Сч99_1,,, Перечисление.ПрибылиИУбытки.НалоговыеСанкции)
							  + БухИтЗаГод.ДО(Сч99_1,,, Перечисление.ПрибылиИУбытки.ПрибыльУбытокПоСпецРежимам)
						      - БухИтЗаГод.КО(Сч99_1,,, Перечисление.ПрибылиИУбытки.ПрибыльУбытокПоСпецРежимам)
							  + БухИтЗаГод.ДО(Сч99_1,,, Перечисление.ПрибылиИУбытки.НалогНаПрибыль)
							  - БухИтЗаГод.КО(Сч99_1,,, Перечисление.ПрибылиИУбытки.НалогНаПрибыль); 
							  
	СуммаПрибылиУбыткаВсего = БухИтЗаМесяц.СКК(Сч99_1) - (БухИтЗаМесяц.СКД(Сч99_1) - ИсключаемыеИзРасчетаСуммы);
	СуммаПрибылиУбыткаЕНВД  = БухИтЗаМесяц.СКК(Сч90_1_2) - БухИтЗаМесяц.СКД(Сч90_2_2) - БухИтЗаМесяц.СКД(Сч90_7_2) - БухИтЗаМесяц.СКД(Сч90_8_2) - СуммаЕНВД();
	СуммаПрибылиУбытка      = СуммаПрибылиУбыткаВсего - СуммаПрибылиУбыткаЕНВД;
	
	ВсегоУсловноНалога = СуммаПрибылиУбытка * СтавкаНалогаНаПрибыль /100;
	ОтраженУсловныйНалог = БухИтЗаМесяц.СКД(Сч99_2_1) - БухИтЗаМесяц.СКК(Сч99_2_2);
	СуммаНалогаКДоначислению = ВсегоУсловноНалога - ОтраженУсловныйНалог;
	Если СуммаНалогаКДоначислению > 0 Тогда
		СформироватьПроводкиПоНалогуНаПрибыль(СуммаНалогаКДоначислению, Сч99_2_1,, 1, "Условный расход по налогу на прибыль");
		
	Иначе
		СформироватьПроводкиПоНалогуНаПрибыль(-СуммаНалогаКДоначислению, Сч99_2_2,, 0, "Условный доход по налогу на прибыль");
	КонецЕсли;
	
	// Формирование печатной формы
	Если ФормироватьПечатнуюФорму = 1 Тогда
		
		НаименованиеРегламентнойОперации = "Расчет налога на прибыль (ПБУ 18/02)";
		Таб.ВывестиСекцию("РегламентнаяОперация");
		
		ИнициализироватьРасшифровкуРасчетаНалогаНаПрибыль();
		
		ТаблицаРасшифровкаРегламентнойОперации.НоваяСтрока();
		ТаблицаРасшифровкаРегламентнойОперации.СуммаПрибылиУбыткаВсего = СуммаПрибылиУбыткаВсего;
		ТаблицаРасшифровкаРегламентнойОперации.СуммаПрибылиУбыткаЕНВД  = СуммаПрибылиУбыткаЕНВД;
		ТаблицаРасшифровкаРегламентнойОперации.СуммаПрибылиУбытка      = СуммаПрибылиУбытка;
		ТаблицаРасшифровкаРегламентнойОперации.Ставка                  = СтавкаНалоганаПрибыль;
		ТаблицаРасшифровкаРегламентнойОперации.УсловныйРасходДоход     = ВсегоУсловноНалога;
		ТаблицаРасшифровкаРегламентнойОперации.ОтраженныйУсловныйРасход= ?(ОтраженУсловныйНалог>0, ОтраженУсловныйНалог, 0);
		ТаблицаРасшифровкаРегламентнойОперации.ОтраженныйУсловныйДоход = ?(ОтраженУсловныйНалог<0, -ОтраженУсловныйНалог, 0);
		ТаблицаРасшифровкаРегламентнойОперации.ПодлежитОтражениюУсловныйРасход = ?(СуммаНалогаКДоначислению>0, СуммаНалогаКДоначислению, 0);
		ТаблицаРасшифровкаРегламентнойОперации.ПодлежитОтражениюУсловныйДоход  = ?(СуммаНалогаКДоначислению<0,-СуммаНалогаКДоначислению, 0);
		
		Расшифровка = СоздатьОбъект("СписокЗначений");
		Расшифровка.ДобавитьЗначение("РасчетНалогаНаПрибыль", "Наименование таблицы");
		Расшифровка.ДобавитьЗначение(ТаблицаРасшифровкаРегламентнойОперации, "Таблица данных");
		Расшифровка.ДобавитьЗначение(ДатаДок, "Дата операции");
		
		НаименованиеРегламентнойПодоперации = "Расчет налога на прибыль (ПБУ 18/02)";
		Таб.ВывестиСекцию("ПодоперацияВыполнена");
	КонецЕсли;
	
КонецПроцедуры // РасчетНалогаНаПрибыль()

//******************************************************************************
// ПроверитьОперации()
//
Процедура ПроверитьОперации(СписокВыполняемыхДействий, СписокДокументов)
	
	РазмерСпискаДокументов = СписокДокументов.РазмерСписка();
	РазмерСпикаДействий    = СписокВыполняемыхДействий.РазмерСписка();
	НаименованиеОперации   = "";
	
	Для НомерДействия = 1 По РазмерСпикаДействий Цикл
		Идентификатор = СписокВыполняемыхДействий.ПолучитьЗначение(НомерДействия, НаименованиеОперации);
		                                                       
		// Если в текущем документе действие не выполняется то проверять в других документах не надо
		Если ТекущийДокумент().ПолучитьАтрибут(Идентификатор) = 0 Тогда
		    Продолжить;
		КонецЕсли;
		
		Для НомерДокумента = 1 По РазмерСпискаДокументов Цикл
			Документ = СписокДокументов.ПолучитьЗначение(НомерДокумента);
			Если Документ.ПолучитьАтрибут(Идентификатор) = 1 Тогда
				ТекстСообщения = "Регламентная операция """ + НаименованиеОперации + """ уже выполнена документом " + Документ;
				глНеПроводить(Контекст, ТекстСообщения, Документ.ТекущийДокумент());
			    Возврат;
			КонецЕсли;
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры // ПроверитьОперации()

//******************************************************************************
// ПрвоверкаНаВыполнениеРегламентныхОперацийРанее()
//
// Описание:
// Проверяется не выполнялись ли в этом месяце другими документами
// "Регламентные операции по налоговому учету" отмеченные регламентные операции.
// Если выполнялись, то необходимо об этом сообщить и документ не проводить.
//
Процедура ПрвоверкаНаВыполнениеРегламентныхОперацийРанее()
	
	СписокДокументов = СоздатьОбъект("СписокЗначений");
	         
	// Формирование списка документов
	Док = СоздатьОбъект("Документ.ЗакрытиеМесяца");	
	Док.УстановитьФильтр(1, 0,,,);
	Док.ВыбратьДокументы(ДатаНач, ДатаКон);
	Пока Док.ПолучитьДокумент() = 1 Цикл
		Если Док.ТекущийДокумент() <> ТекущийДокумент() Тогда
		     СписокДокументов.ДобавитьЗначение(Док.ТекущийДокумент());
		КонецЕсли;
	КонецЦикла;
	    
	// Если документов нет, то проверять нечего
	Если СписокДокументов.РазмерСписка() = 0 Тогда
	    Возврат;
	КонецЕсли;
	
	СписокВыполняемыхДействий = СоздатьОбъект("СписокЗначений");
	Если (Константа.ПрименяетсяПБУ18.Получить(ДатаДок) = Да) 
	 или (Константа.МетодРасчетаСебестоимостиМатериалов.Получить(ДатаДок) = Перечисление.МетодыРасчетаСебестоимости.ПоСредневзвешеннойСтоимости) Тогда
		СписокВыполняемыхДействий.ДобавитьЗначение("КорректировкаСреднейСтоимостиМатериалов", "Расчет (корректировка) фактической стоимости материалов");    
	КонецЕсли;
	
	Если (Константа.ПрименяетсяПБУ18.Получить(ДатаДок) = Да)
	 или (Константа.МетодРасчетаСебестоимостиТоваров.Получить(ДатаДок) = Перечисление.МетодыРасчетаСебестоимости.ПоСредневзвешеннойСтоимости) Тогда
		СписокВыполняемыхДействий.ДобавитьЗначение("КорректировкаСреднейСтоимостиТоваров", "Расчет (корректировка) фактической стоимости товаров");
	КонецЕсли;
	
	СписокВыполняемыхДействий.ДобавитьЗначение("РасчетТорговойНаценки", "Расчет торговой наценки по проданным товарам");
	СписокВыполняемыхДействий.ДобавитьЗначение("Счет16", "Закрытие счета 16");
	СписокВыполняемыхДействий.ДобавитьЗначение("НачислятьНалогиСФОТ", "Начисление налогов с фонда оплаты труда");
	СписокВыполняемыхДействий.ДобавитьЗначение("Счет97", "Закрытие счета 97");
	СписокВыполняемыхДействий.ДобавитьЗначение("Счет25", "Закрытие счета 25");
	СписокВыполняемыхДействий.ДобавитьЗначение("Счет26", "Закрытие счета 26");

	Если Константа.СпособУчетаГПиПФ.Получить(ДатаДок) <> Перечисление.СпособыУчетаГПиПФ.ПоПлановойСтоимости Тогда
		СписокВыполняемыхДействий.ДобавитьЗначение("Счет20", "Расчет и корректировка себестоимости ГП и ПФ");

	Иначе
		СписокВыполняемыхДействий.ДобавитьЗначение("Счет20", "Закрытие счета 20");
		СписокВыполняемыхДействий.ДобавитьЗначение("Счет40", "Закрытие счета 40");
	КонецЕсли;

	СписокВыполняемыхДействий.ДобавитьЗначение("Счет44_1", "Закрытие счета 44.1.1");
	СписокВыполняемыхДействий.ДобавитьЗначение("Счет44_1_2", "Закрытие счета 44.1.2");
	СписокВыполняемыхДействий.ДобавитьЗначение("Счет44_1_3", "Закрытие счета 44.1.3");
	СписокВыполняемыхДействий.ДобавитьЗначение("Счет44_2", "Закрытие счета 44.2");
	СписокВыполняемыхДействий.ДобавитьЗначение("Счет44_3", "Закрытие счета 44.3");
	СписокВыполняемыхДействий.ДобавитьЗначение("Счет90", "Закрытие счета 90");
	СписокВыполняемыхДействий.ДобавитьЗначение("Счет91", "Закрытие счета 91");
	
	Если Константа.ПрименяетсяПБУ18.Получить(ДатаДок) = Да Тогда
		СписокВыполняемыхДействий.ДобавитьЗначение("УчетПостоянныхРазниц", "Учет постоянных разниц (ПБУ 18/02)");
		СписокВыполняемыхДействий.ДобавитьЗначение("УчетВременныхРазниц", "Учет временных разниц (ПБУ 18/02)");
		СписокВыполняемыхДействий.ДобавитьЗначение("РасчетНалогаНаПрибыль", "Расчет налога на прибыль (ПБУ 18/02)");
	КонецЕсли;

	Если ДатаМесяц(ДатаДок) = 12 Тогда
		СписокВыполняемыхДействий.ДобавитьЗначение("РеформацияБаланса", "Реформация баланса");
	КонецЕсли;
	
	ПроверитьОперации(СписокВыполняемыхДействий, СписокДокументов);
	
КонецПроцедуры // ПрвоверкаНаВыполнениеРегламентныхОперацийРанее()

//******************************************************************************
Процедура ОбработкаПроведения()
	
	ДатаНач = НачМесяца(ДатаДок);
	ДатаКон = КонМесяца(ДатаДок);
	
	// Необходимо проверить не выполнялись в этом месяце другими документами
	// "Закрытие месяца" отмеченные регламентные операции.
	// Если выполнялись, то необходимо об этом сообщить и документ не проводить.
	ПрвоверкаНаВыполнениеРегламентныхОперацийРанее();
	Если СтатусВозврата() = 0 Тогда
	    Возврат;
	КонецЕсли;
	
	БухИтЗаМесяц = СоздатьОбъект("БухгалтерскиеИтоги"); БухИтЗаМесяц.ИспользоватьРазделительУчета(ЮрЛицо);
	БухИтЗаМесяц.ПериодМ(ДатаДок);
	
	БухИтЗаГод = СоздатьОбъект("БухгалтерскиеИтоги"); БухИтЗаГод.ИспользоватьРазделительУчета(ЮрЛицо);
	БухИтЗаГод.ПериодМНГ(ДатаДок);
	
	НПР = СоздатьОбъект("БухгалтерскиеИтоги"); НПР.ИспользоватьРазделительУчета(ЮрЛицо);
	НПР.ПериодМ(ДатаДок);
	
	ВыполнятьДвиженияПоСчетуНПР = Константа.ПрименяетсяПБУ18.Получить(ДатаДок);
	
	// Формирование печатной формы
	Если ФормироватьПечатнуюФорму = 1 Тогда
		Таб = СоздатьОбъект("Таблица");
		Таб.ИсходнаяТаблица("ЗакрытиеМесяца");
		НазваниеОтчета = "Отчет по закрытию месяца № " + СокрЛП(НомерДок) + " за " + СокрЛП(Нрег(Формат(ДатаДок, "Д ММММГГГГ")));
		Таб.ВывестиСекцию("СписокРегламентныхОпераций");
		
		ФормированиеОсновныхРасшифровок();
	КонецЕсли;
	
	// Расчет (корректировка) фактической стоимости материалов
	Если КорректировкаСреднейСтоимостиМатериалов = 1 Тогда
		КорректировкаСреднейСтоимостиМатериалов();
		Если СтатусВозврата() = 0 Тогда
		    Возврат;
		КонецЕсли;
	КонецЕсли;
	
	// Расчет (корректировка) фактической стоимости товаров
	Если КорректировкаСреднейСтоимостиТоваров = 1 Тогда
		КорректировкаСреднейСтоимостиТоваров();
		Если СтатусВозврата() = 0 Тогда
		    Возврат;
		КонецЕсли;
	КонецЕсли;
	
	// Расчет торговой наценки по проданным товарам
	Если РасчетТорговойНаценки = 1 Тогда
		РасчетТорговойНаценки();
		Если СтатусВозврата() = 0 Тогда
		    Возврат;
		КонецЕсли;
	КонецЕсли;
	                   
	// Закрытие счета 16
	Если Счет16 = 1 Тогда
		ЗакрытиеСчета16();
		Если СтатусВозврата() = 0 Тогда
		    Возврат;
		КонецЕсли;
	КонецЕсли;
	
	// Начисление налогов с фонда оплаты труда
	Если НачислятьНалогиСФОТ = 1 Тогда
		НачислениеНалоговСФОТ();
		Если СтатусВозврата() = 0 Тогда
		    Возврат;
		КонецЕсли;
	КонецЕсли;
	
	// Закрытие счета 97
	Если Счет97 = 1 Тогда
		ЗакрытиеСчета97();
		Если СтатусВозврата() = 0 Тогда
		    Возврат;
		КонецЕсли;
	КонецЕсли;
	
	// Закрытие счета 25
	Если Счет25 = 1 Тогда
		ЗакрытиеСчета25();
		Если СтатусВозврата() = 0 Тогда
		    Возврат;
		КонецЕсли;
	КонецЕсли;
	                    
	// Закрытие счета 26 (директ-костинг = "Нет")
	Если (Счет26 = 1) и (Константа.ДиректКостинг.Получить(ДатаКон) <> Да) Тогда
		ЗакрытиеСчета26(Нет);
		Если СтатусВозврата() = 0 Тогда
		    Возврат;
		КонецЕсли;
	КонецЕсли;
	                    
	// Расчет стоимости продукции и полуфабрикатов (закрытие счетов 20 и 40)
	Если Константа.СпособУчетаГПиПФ.Получить(ДатаДок) <> Перечисление.СпособыУчетаГПиПФ.ПоПлановойСтоимости Тогда
		
		// Расчет стоимости продукции (полуфабрикатов)
		Если Счет20 = 1 Тогда
			РасчетСебестоимостиПродукцииИПолуфабрикатовБУ();
			Если СтатусВозврата() = 0 Тогда
			    Возврат;
			КонецЕсли;
		КонецЕсли;

	Иначе
		
		// Закрытие счета 20
		Если Счет20 = 1 Тогда
			ЗакрытиеСчета20();
			Если СтатусВозврата() = 0 Тогда
			    Возврат;
			КонецЕсли;
		КонецЕсли;
		
		// Закрытие счета 40
		Если Счет40 = 1 Тогда
			ЗакрытиеСчета40();
			Если СтатусВозврата() = 0 Тогда
			    Возврат;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	// Закрытие счета 26 (директ-костинг = "Да")
	Если (Счет26 = 1) и (Константа.ДиректКостинг.Получить(ДатаКон) = Да) Тогда
		ЗакрытиеСчета26(Да);
		Если СтатусВозврата() = 0 Тогда
		    Возврат;
		КонецЕсли;
	КонецЕсли;
	
	// Закрытие счета 44.1.1
	Если Счет44_1 = 1 Тогда
		ЗакрытиеСчета44_1_1();
		Если СтатусВозврата() = 0 Тогда
		    Возврат;
		КонецЕсли;
	КонецЕсли;
	
	// Закрытие счета 44.1.2
	Если Счет44_1_2 = 1 Тогда
		ЗакрытиеСчета44_1_2();
		Если СтатусВозврата() = 0 Тогда
		    Возврат;
		КонецЕсли;
	КонецЕсли;
	
	// Закрытие счета 44.1.3
	Если Счет44_1_3 = 1 Тогда
		ЗакрытиеСчета44_1_3();
		Если СтатусВозврата() = 0 Тогда
		    Возврат;
		КонецЕсли;
	КонецЕсли;
	
	// Закрытие счета 44.2
	Если Счет44_2 = 1 Тогда
		ЗакрытиеСчета44_2();
		Если СтатусВозврата() = 0 Тогда
		    Возврат;
		КонецЕсли;
	КонецЕсли;
                          
	// Закрытие счета 44.3
	Если Счет44_3 = 1 Тогда
		ЗакрытиеСчета44_3();
		Если СтатусВозврата() = 0 Тогда
		    Возврат;
		КонецЕсли;
	КонецЕсли;
	
	// Закрытие счета 90
	Если Счет90 = 1 Тогда
		ЗакрытиеСчета90();
		Если СтатусВозврата() = 0 Тогда
		    Возврат;
		КонецЕсли;
	КонецЕсли;
	
	// Закрытие счета 91
	Если Счет91 = 1 Тогда
		ЗакрытиеСчета91();
		Если СтатусВозврата() = 0 Тогда
		    Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Если ВыполнятьДвиженияПоСчетуНПР = Да Тогда
		
		// Получим ставку налога на прибыль.
		СтавкаНалогаНаПрибыль = глПолучитьСтавкуНалога("ПрибФед", ДатаДок)
		       				  + глПолучитьСтавкуНалога("ПрибРесп", ДатаДок)
			   				  + глПолучитьСтавкуНалога("ПрибМест", ДатаДок);
				   				  
		// Учет постоянных разниц (ПБУ 18/02)
		Если УчетПостоянныхРазниц = 1 Тогда
			УчетПостоянныхРазниц();
			Если СтатусВозврата() = 0 Тогда
			    Возврат;
			КонецЕсли;
		КонецЕсли;
		
		// Учет временных разниц (ПБУ 18/02)
		Если УчетВременныхРазниц = 1 Тогда
			УчетВременныхРазниц();
			Если СтатусВозврата() = 0 Тогда
			    Возврат;
			КонецЕсли;
		КонецЕсли;
		
		// Расчет налога на прибыль
		Если РасчетНалогаНаПрибыль = 1 Тогда
			РасчетНалогаНаПрибыль();
			Если СтатусВозврата() = 0 Тогда
			    Возврат;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли; // конец секции по учету ПБУ 18
	
	// Реформация баланса
	Если РеформацияБаланса = 1 Тогда
		РеформацияБаланса();
		Если СтатусВозврата() = 0 Тогда
		    Возврат;
		КонецЕсли;
	КонецЕсли;
    	
	Операция.Записать();
	
	// Формирование печатной формы
	Если ФормироватьПечатнуюФорму = 1 Тогда 
		Таб.Опции(0, 0, 0, 0, "Печать закрытие месяца", "Окно закрытие месяца");
		Таб.ОбластьПечати(,,, 20);
		Таб.ТолькоПросмотр(1);
		Таб.Показать("Отчет по закрытию месяца № " + СокрЛП(НомерДок) + " за " + СокрЛП(Нрег(Формат(ДатаДок, "Д ММММГГГГ"))), "");
	КонецЕсли;
	
	ТекстСообщения = "Документ проведен.";
	глСообщениеПроведения(ТекстСообщения, ТекущийДокумент(), 0);
	глПриПроведении(Контекст);
	
КонецПроцедуры

СубконтоВидовПродукцииИУслуг = ВидыСубконто.ВидыНоменклатуры;