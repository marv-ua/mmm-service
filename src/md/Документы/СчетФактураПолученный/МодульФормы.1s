////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ
//

Перем НачальнаяДатаДокумента;
Перем Новый;
Перем СписокДействий;
Перем ТекДоговор;

Процедура УправлениеДиалогом() Далее
Процедура ПриВыбореСчета() Далее

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ МОДУЛЯ
//  
//******************************************************************************
Процедура СчетФактураНаВозврат()    
	
	Если  СчетФактураНаВозврат = 1 Тогда
		Форма.РамкаСчетДебета.Заголовок("Счет кредита");
		Форма.РамкаСчетКредита.Заголовок("Счет дебета, аналитика");
	Иначе
		Форма.РамкаСчетДебета.Заголовок("Счет дебета");
		Форма.РамкаСчетКредита.Заголовок("Счет кредита, аналитика");
	КонецЕсли;	

КонецПроцедуры

//******************************************************************************
Процедура ПриВыбореВидаОперации()
	
	Если ВидОперации = Перечисление.ВидыОперацийСчетаФактурыПолученного.Возврат Тогда
		СчетФактураНаВозврат = 1;
	Иначе
		СчетФактураНаВозврат = 0;
	КонецЕсли;
	
	Если ВидОперации = Перечисление.ВидыОперацийСчетаФактурыПолученного.Аванс Тогда
		Счет = СчетПоКоду("68.2");
		ПриВыбореСчета();
		Субконто1 =  Перечисление.ВидыПлатежейВБюджет.Налог;
		ВключатьВКнигуПокупок = 1;
	Иначе
		Если ПустоеЗначение(ДокументОприходования) = 0 Тогда
			Если (ДокументОприходования.Вид() = "Выписка") или (ДокументОприходования.Вид() = "РасходныйОрдер") Тогда
				ДокументОприходования = "";
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	УправлениеДиалогом();
		
КонецПроцедуры

//******************************************************************************
Функция ИнформацияОПроводке()
	
	ОграничениеДлиныНаименования = 50;
	
	Если ВидОперации = Перечисление.ВидыОперацийСчетаФактурыПолученного.Аванс Тогда
		СчетДебета = Счет;
		СчетКредита = СчетПоКоду("76.ВА");
	ИначеЕсли ВидОперации = Перечисление.ВидыОперацийСчетаФактурыПолученного.Возврат Тогда
		СчетДебета = Счет;
		СчетКредита = Субсчет19;
	Иначе		
		СчетДебета = Субсчет19;
		СчетКредита = Счет;
	КонецЕсли;
	
	Инф = "Дт "+СчетДебета.Код+" ("+
	Лев(СчетДебета.Наименование,ОграничениеДлиныНаименования)+
	?(СтрДлина(СчетДебета.Наименование)>ОграничениеДлиныНаименования,"...","")+")";
	
	Если ВидОперации <> Перечисление.ВидыОперацийСчетаФактурыПолученного.Приобретение Тогда
		Если ТипЗначения(Субконто1)=0 Тогда
		Иначе
			Инф = Инф+" / "+?(ПустоеЗначение(Субконто1) = 1, "<...>", Лев(Субконто1, 30));
			Если ТипЗначения(Субконто2)=0 Тогда
			Иначе
				Инф = Инф+" / "+?(ПустоеЗначение(Субконто2) = 1, "<...>", Лев(Субконто2, 30));
				Если ТипЗначения(Субконто3)=0 Тогда
				Иначе
					Инф = Инф+" / "+?(ПустоеЗначение(Субконто3) = 1, "<...>", Лев(Субконто3, 30));
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		Инф = Инф + РазделительСтрок;
	Иначе
		
		Инф = Инф+" / "+?(ПустоеЗначение(Контрагент) = 1, "<...>", Лев(Контрагент, 40));
		Инф = Инф+" / "+?(Выбран() = 0, "<...>", Лев(ТекущийДокумент(), 40));
		
		Инф = Инф + РазделительСтрок;
	КонецЕсли;
	
	Инф = Инф+"Кт "+СчетКредита.Код+" ("+
	Лев(СчетКредита.Наименование,ОграничениеДлиныНаименования)+
	?(СтрДлина(СчетКредита.Наименование)>ОграничениеДлиныНаименования,"...","")+")";
	
	Если ВидОперации = Перечисление.ВидыОперацийСчетаФактурыПолученного.Приобретение Тогда
		Если ТипЗначения(Субконто1)=0 Тогда
		Иначе
			Инф = Инф+" / "+?(ПустоеЗначение(Субконто1) = 1, "<...>", Лев(Субконто1, 30));
			Если ТипЗначения(Субконто2)=0 Тогда
			Иначе
				Инф = Инф+" / "+?(ПустоеЗначение(Субконто2) = 1, "<...>", Лев(Субконто2, 30));
				Если ТипЗначения(Субконто3)=0 Тогда
				Иначе
					Инф = Инф+" / "+?(ПустоеЗначение(Субконто3) = 1, "<...>", Лев(Субконто3, 30));
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	Иначе
		
		Инф = Инф+" / "+?(ПустоеЗначение(Контрагент) = 1, "<...>", Лев(Контрагент, 40));
		Инф = Инф+" / "+?(Выбран() = 0, "<...>", Лев(ТекущийДокумент(), 40));
	КонецЕсли;
	
	Возврат Инф;

КонецФункции // ИнформацияОПроводке()

//******************************************************************************
// УправлениеРеквизитомФормироватьПроводки()
//
// Параметры:
//  Нет.
//
// Вызывается из формул элементов диалога:
//  Нет.
//
// Описание:
//  .
//
Процедура УправлениеРеквизитомФормироватьПроводки()
	
	Доступность = 1;
	Если ДокументОприходования.Выбран() = 1 Тогда
		Если Метаданные.Документ(ДокументОприходования.Вид()).РеквизитШапки("НДСвключатьВСтоимость").Выбран() = 1 Тогда
		    Если ДокументОприходования.НДСвключатьВСтоимость = 1 Тогда
		        Доступность = 0;
		    КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Форма.ФормироватьПроводки.Доступность(Доступность);
	
	Если (Доступность = 0) и (ФормироватьПроводки = 1) Тогда
	    ФормироватьПроводки = 0;
	КонецЕсли;
	
КонецПроцедуры // УправлениеРеквизитомФормироватьПроводки()

//*****************************************************************************
// ПриВыбореДокумента()
//
// Вызывается из формул элемента диалога:
//  Поле ввода "ДокументОприходования".
//
// Описание:
//  Управляет дуступностью элементов диалога.
//
Процедура ПриВыбореДокумента()
	
	Если ДокументОприходования.Выбран() = 0 Тогда
		Форма.НДСпоСтавкеНольПроцентов.Доступность(1);
		//Форма.ИспользоватьЗакладки(1);
	КонецЕсли;
	
	УправлениеРеквизитомФормироватьПроводки();
	
КонецПроцедуры // ПриВыбореДокумента()

//*****************************************************************************
// ПриВыбореСубсчета19()
//
// Вызывается из формул элементов диалога:
//  Поле со списком "СписокСубсчетов19".
//
// Описание:
//  Устанавливает значение реквизита Субсчет19 в зависимости от выбранного 
// элемента списка "СписокСубсчетов19".
//
Процедура ПриВыбореСубсчета19()
	
	Субсчет19 = СписокСубсчетов19.ПолучитьЗначение(СписокСубсчетов19.ТекущаяСтрока());
	
КонецПроцедуры // ПриВыбореСубсчета19()

//*****************************************************************************
// ПриВыбореСтавкиНольПроцентов()
//
// Вызывается из формул элементов диалога:
//  Флажок "НДСпоСтавкеНольПроцентов".
//
// Описание:
//  Устанавливает значение реквизита Субсчет19 в зависимости от выбранного 
// элемента списка "СписокСубсчетов19".
//
Процедура ПриВыбореСтавкиНольПроцентов(Режим = 0)                                       
	
	Если НДСпоСтавкеНольПроцентов = 1 Тогда
		Форма.СуммаБезНДС20.Доступность(0);
		Форма.НДС20.Доступность(0);
		Форма.СуммаБезНДС10.Доступность(0);
		Форма.НДС10.Доступность(0);
		Форма.СуммаСовсемБезНДС.Доступность(0);
		Если Режим = 1 Тогда
			СуммаБезНДС20 = 0;
			НДС20 = 0;
			СуммаБезНДС10 = 0;
			НДС10 = 0;
			СуммаСовсемБезНДС = 0;
		КонецЕсли;
	Иначе
		Форма.СуммаБезНДС20.Доступность(1);
		Форма.НДС20.Доступность(1);
		Форма.СуммаБезНДС10.Доступность(1);
		Форма.НДС10.Доступность(1);
		Форма.СуммаСовсемБезНДС.Доступность(1);
	КонецЕсли;
	
КонецПроцедуры // ПриВыбореСтавкиНольПроцентов()

//******************************************************************************
// ДобавитьСчетВ_Список(Сч)
//
// Параметры:
//  Сч - Строка. Код счета.
//
// Описание:
//  Формирует значение списка "СписокСубсчетов19".
//
Процедура ДобавитьСчетВ_Список(Сч)
	
	Значение = СчетПоКоду(Сч);
	Представление = Значение.Код + " """+ Значение.Наименование + """";
	СписокСубсчетов19.ДобавитьЗначение(Значение, Представление);
	
КонецПроцедуры // ДобавитьСчетВ_Список()

//******************************************************************************
// ИнформацияОДоговоре()
//
// Возвращаемое значение:
//  Строка - Наименование валюты договора и валюты оплаты.
//
// Вызывается из формул элементов диалога:
//  Текст "ИнформацияОДоговоре".
//
// Описание:
//  Формирует строку, содержащую наименование валюты договора и валюты оплаты.
//
Функция ИнформацияОДоговоре() 
	
	Стр = "";
	Если Договор.Выбран() = 1 Тогда
		Если Договор.ВалютаДоговора.Выбран() = 1 Тогда
		    Стр = "Валюта договора: " + Договор.ВалютаДоговора;
		КонецЕсли;	    
	КонецЕсли;
	Возврат Стр;
	
КонецФункции // ИнформацияОДоговоре()

//******************************************************************************
// УправлениеКурсом(ИзменитьКурс)
//
// Параметры:
//  ИзменитьКурс - Число. 1 - установить новый курс валюты, 0 - не изменять.
//
// Описание:
//  При выбранной иностранной валюте делает видимым поле "Курс" и записывает
// в него значение из справочника.
//
Процедура УправлениеКурсом(ИзменитьКурс=0)
	
	ВидимостьКурса = Договор.ВалютаДоговора.Выбран();
	Форма.ПодписьКурса.Видимость(ВидимостьКурса);
	Форма.Курс.Видимость(ВидимостьКурса);
	
	Если ИзменитьКурс = 1 Тогда
		Если ВидимостьКурса = 1 Тогда 
		    Курс = Договор.ВалютаДоговора.Курс.Получить(ДатаДок);
		Иначе
			Курс = 0;
		КонецЕсли;
	КонецЕсли;
	
	ВидимостьФлагаЗКП = ?((Договор.Выбран() = 1) и (Договор.АвтоОбработкаНДС = 0), 1, 0);
	Если ВидОперации = Перечисление.ВидыОперацийСчетаФактурыПолученного.Аванс Тогда
		ВидимостьФлагаЗКП = 1;
	КонецЕсли;
	
	Форма.ВключатьВКнигуПокупок.Видимость(ВидимостьФлагаЗКП);
	
КонецПроцедуры // УправлениеКурсом()

//*****************************************************************************
// ПриВыбореДоговора()
//
// Вызывается из формул элементов диалога:
//  Поле ввода "Договор"
// 
// Описание:
//  Проверяет соответствие договора выбранному контрагенту.
//
Процедура ПриВыбореДоговора()
	
	Если ВидОперации = Перечисление.ВидыОперацийСчетаФактурыПолученного.Аванс Тогда
		ВыбиратьСлужебныйДоговор = 1;
	Иначе                        
		ВыбиратьСлужебныйДоговор = 0;
	КонецЕсли;

	глПриВыбореДоговора(Контрагент, Договор, ВыбиратьСлужебныйДоговор);
	УправлениеКурсом(1); // при изменении договора могла измениться валюта
	
	Если ТипЗначенияСтр(Субконто2) = "Справочник" Тогда
		Если Субконто2.Вид() = "Договоры" Тогда
			Субконто2 = Договор;
		КонецЕсли;
	КонецЕсли;
	
	Если Договор <> ТекДоговор Тогда
		Если (Договор.Выбран() = 1) и (Договор.АвтоОбработкаНДС = 0) Тогда
		    ВключатьВКнигуПокупок = 1;
			
		Иначе
			ВключатьВКнигуПокупок = 0;
		КонецЕсли;
	КонецЕсли;
	
	ТекДоговор = Договор;
	
КонецПроцедуры // ПриВыбореДоговора()

//*****************************************************************************
// ПриВыбореКонтрагента()
//
// Вызывается из формул элементов диалога:
//  Поле ввода "Контрагент".
//
// Описание:
//  Проверяет соответствие договора выбранному контрагенту.
//
Процедура ПриВыбореКонтрагента()
	
	Если Контрагент.Выбран() = 1 Тогда
		Если Договор.Владелец <> Контрагент Тогда
			Договор = "";
		КонецЕсли;
		Если (ПустоеЗначение(ДокументОприходования) = 0) и (ДокументОприходования.Вид() <> "АвансовыйОтчет") и (ДокументОприходования.Вид() <> "Выписка") Тогда
		    Если ДокументОприходования.Контрагент <> Контрагент Тогда
			    ДокументОприходования = "";
				ПриВыбореДокумента();
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	УправлениеКурсом(1);
	
	Если ТипЗначенияСтр(Субконто1) = "Справочник" Тогда
		Если Субконто1.Вид() = "Контрагенты" Тогда
			Субконто1 = Контрагент;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ПриВыбореКонтрагента()

//*****************************************************************************
// ПриВыбореСчета()
//
// Вызывается из формул элементов диалога:
//  Поле со списком "Счет".
//
// Описание:
//  Назначает тип реквизитам неопределенного вида "Субконто1", "Субконто2" и
// "Субконто3".
//
Процедура ПриВыбореСчета()
	
	Для А = 1 По 3 Цикл
		НазначитьТип("Субконто"+А,Счет.ВидСубконто(А));
	КонецЦикла;
	
КонецПроцедуры // ПриВыбореСчета()

//******************************************************************************
// ПриВыбореСубконто()
//
// Параметры:
//  Нет.
//
// Вызывается из формул элементов диалога:
//  Субконто1, Субконто2, Субконто3.
//
// Описание:
//  Проверяется соотвествие контрагента и договора, указанного в аналитике.
//
Процедура ПриВыбореСубконто()
	
	ИдентификаторРеквизита = Форма.АктивныйЭлемент();
	ЗначениеРеквизита = ПолучитьАтрибут(ИдентификаторРеквизита);
	НомерСубконто = Число(Прав(ИдентификаторРеквизита, 1));
	Если ТипЗначенияСтр(ЗначениеРеквизита) = "Справочник" Тогда
		Если ЗначениеРеквизита.Вид() = "Контрагенты" Тогда
			Если НомерСубконто < 3 Тогда
				ИдентификаторСледующегоРеквизита = Лев(ИдентификаторРеквизита, СтрДлина(ИдентификаторРеквизита)-1) + (НомерСубконто + 1);
				ЗначениеСледующегоРеквизита = ПолучитьАтрибут(ИдентификаторСледующегоРеквизита);
				Если ТипЗначенияСтр(ЗначениеСледующегоРеквизита) = "Справочник" Тогда
					Если ЗначениеСледующегоРеквизита.Вид() = "Договоры" Тогда
						Если ЗначениеРеквизита <> ЗначениеСледующегоРеквизита.Владелец Тогда
						    УстановитьАтрибут(ИдентификаторСледующегоРеквизита, ЗначениеРеквизита.ОсновнойДоговор);
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
		ИначеЕсли ЗначениеРеквизита.Вид() = "Договоры" Тогда
			Если (ПустоеЗначение(ЗначениеРеквизита) = 0) и (НомерСубконто > 1) Тогда
				ИдентификаторПредыдущегоРеквизита = Лев(ИдентификаторРеквизита, СтрДлина(ИдентификаторРеквизита)-1) + (НомерСубконто - 1);
				ЗначениеПредыдущегоРеквизита = ПолучитьАтрибут(ИдентификаторПредыдущегоРеквизита);
				Если ТипЗначенияСтр(ЗначениеПредыдущегоРеквизита) = "Справочник" Тогда
					Если ЗначениеПредыдущегоРеквизита.Вид() = "Контрагенты" Тогда
						Если ЗначениеРеквизита.Владелец <> ЗначениеПредыдущегоРеквизита Тогда
						    УстановитьАтрибут(ИдентификаторПредыдущегоРеквизита, ЗначениеРеквизита.Владелец);
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ПриВыбореСубконто()

//*****************************************************************************
// Заполнить(ДокОсн)
//
// Параметры:
//  ДокОсн - Документ, на основании которого будут заполнены 
//           реквизиты счета-фактуры.
//
// Описание:
//  Заполняет счет-фактуру на основании документа поступления.
//
Функция Заполнить(ДокОсн)
	
	Если (ДокОсн.Вид() = "Выписка") или (ДокОсн.Вид() = "РасходныйОрдер") Тогда
		ВидОперации = Перечисление.ВидыОперацийСчетаФактурыПолученного.Аванс;
	Иначе
		ВидОперации = Перечисление.ВидыОперацийСчетаФактурыПолученного.Приобретение;
		
		Если ДокОсн.Вид() = "АвансовыйОтчет" Тогда		
		ИначеЕсли ПустоеЗначение(ДокОсн.ДатаНомерСчетаФактуры) = 0 Тогда
			Предупреждение("Полученный счет-фактура уже зарегистрирован 
			|документом оприходования.");
			Возврат 0;
		КонецЕсли; 
		
		Если ДокОсн.Вид() = "ПоступлениеТоваров" Тогда
			Если (ДокОсн.ВидПоступления = 13) и (ДокОсн.ПокупателемВыставляетсяСчетФактураНаВозврат = 0) Тогда
				Предупреждение("По указанному документу возврата
				|счет-фактура не выставляется.");
				Возврат 0;
			КонецЕсли; 
		КонецЕсли; 
	КонецЕсли;

	УдалитьСтроки();
	ДокументОприходования = ДокОсн;
	
	НДСпоСтавкеНольПроцентов = 0;
	ПриВыбореСтавкиНольПроцентов();
	ДатаОприходования = ДокОсн.ДатаДок;
	Субсчет19 = СчетПоКоду("19.3");
	
	// На основании документов Выписка или РасходныйОрдер вводятся
	// счета-фактуры на аванс.
	Если (ДокОсн.Вид() = "Выписка") или (ДокОсн.Вид() = "РасходныйОрдер") Тогда
		
		Если ДокОсн.Проведен() = 0 Тогда
			Предупреждение("Счет-фактура на аванс вводится только
			|на основании проведенного документа 
			|""" + ?(ДокОсн.Вид() = "Выписка", "Выписка", 
			"Расходный кассовый ордер") + """.");
			Возврат 0;
		КонецЕсли;
		
		Счет = СчетПоКоду("68.2");
		ПриВыбореСчета();
		Субконто1 =  Перечисление.ВидыПлатежейВБюджет.Налог;
		
		ФормироватьПроводки = 1;
		ВключатьВКнигуПокупок = 1;
		
		// Если аванс проведен выпиской, то заполним реквизиты на 
		// основании операции документа.
		Опер = СоздатьОбъект("Операция");
		Если ДокОсн.Вид() = "Выписка" Тогда
			
			// Соберем проводки Выписки по полученным авансам в таблицу значений.
			Авансы = СоздатьОбъект("ТаблицаЗначений");
			Авансы.НоваяКолонка("Контрагент", "Справочник",,, "Контрагент", 20);
			Авансы.НоваяКолонка("Договор", "Справочник",,, "Договор", 12);
			Авансы.НоваяКолонка("ПервичныйДокумент",  "Строка");
			Авансы.НоваяКолонка("Сумма",,,, "Сумма аванса", 15);
			Авансы.НоваяКолонка("СуммаВВалютеДоговора", "Число");
			Авансы.НоваяКолонка("Тип",,,,"Тип записи", 21);
			Авансы.НоваяКолонка("Строка",,,,, 6);
			
			Авансы.ВидимостьКолонки("Строка",0,); 									
			Авансы.ВидимостьКолонки("ПервичныйДокумент", 0);
			Авансы.ВидимостьКолонки("СуммаВВалютеДоговора", 0);
			
			Опер.НайтиОперацию(ДокОсн);
			СписокПроводок =    "60.2,51;
			|60.7,51;
			|60.22,51;";
			Опер.ВыбратьОперацииСПроводками(ДокОсн, ДокОсн, СписокПроводок);
			Пока Опер.ПолучитьПроводку() = 1 Цикл
				Авансы.НоваяСтрока();
				Если (Опер.Дебет.Счет = СчетПокоду("60.2")) или (Опер.Дебет.Счет = СчетПокоду("60.7")) или (Опер.Дебет.Счет = СчетПокоду("60.22")) Тогда
					Авансы.Контрагент = Опер.Дебет.Контрагенты;
					Авансы.Договор = Опер.Дебет.Договоры;
				Иначе
					Авансы.Контрагент = Опер.Кредит.Контрагенты;
					Авансы.Договор = Опер.Кредит.Договоры;
				КонецЕсли;
				
				Если (Опер.Дебет.Счет = СчетПокоду("60.7")) или (Опер.Кредит.Счет = СчетПокоду("60.7")) Тогда
					Авансы.Сумма = Опер.Сумма;
					Авансы.СуммаВВалютеДоговора = Опер.Сумма;
					
				Иначе
					Авансы.Сумма = ?(Опер.ВалСумма=0, Опер.Сумма, Опер.ВалСумма);
					
					Если (Опер.Валюта.Выбран() = 1) и (Авансы.Договор.ВалютаДоговора <> Опер.Валюта) Тогда
						Авансы.СуммаВВалютеДоговора = Опер.Сумма;
						
					Иначе
						Авансы.СуммаВВалютеДоговора = Авансы.Сумма;
					КонецЕсли;
				КонецЕсли;
				
				Авансы.ПервичныйДокумент = СокРЛП(Опер.ПервичныйДокумент);
				Авансы.Тип = "Аванс";
				
			КонецЦикла; 
			
			//*****************************************
			
			
			Если Авансы.КоличествоСтрок() = 0  Тогда
				Предупреждение("Документ "+глПредставлениеДокумента(ДокОсн)+"
				|не содержит авансов.");
				Возврат 0;
				
				// Если Выпиской проведено более одного аванса, предложим
				// пользователю выбрать один их них.
			ИначеЕсли Авансы.КоличествоСтрок() = 1 Тогда
				Стр = 1;
			Иначе
				Стр = 0;
				Если Авансы.ВыбратьСтроку(Стр, "Выберите контрагента документа оплаты") = 0 Тогда
					Возврат 0;
				КонецЕсли;
				Если Стр = 0 Тогда
					Возврат 0;
				КонецЕсли;
			КонецЕсли;
			
			// Введем значения реквизитов счета-фактуры на основании
			// выбранного аванса.
			Авансы.ПолучитьСтрокуПоНомеру(Стр);                     
			Аванс = 1; 
			Авансы.ПолучитьСтрокуПоНомеру(Стр);
			Контрагент = Авансы.Контрагент;
			Договор = Авансы.Договор;
			ПриВыбореДоговора();
			
			СуммаБезНДС20=0;
			СуммаБезНДС10=0;
			НДС20=0;
			НДС10=0;
			СуммаСовсемБезНДС=0;
			
			СтавкаНалога = глЗначениеПоУмолчанию("ОсновнаяСтавкаНДС").Ставка;
			Если СтавкаНалога > 10 Тогда
				НДС20 = Окр(Авансы.СуммаВВалютеДоговора*глЗначениеПоУмолчанию("ОсновнаяСтавкаНДС").Ставка/(100+глЗначениеПоУмолчанию("ОсновнаяСтавкаНДС").Ставка) ,2,1);
				СуммаБезНДС20=Авансы.СуммаВВалютеДоговора - НДС20;
			ИначеЕсли СтавкаНалога > 0 Тогда
				НДС10 = Окр(Авансы.СуммаВВалютеДоговора*глЗначениеПоУмолчанию("ОсновнаяСтавкаНДС").Ставка/(100+глЗначениеПоУмолчанию("ОсновнаяСтавкаНДС").Ставка) ,2,1);
				СуммаБезНДС10=Авансы.СуммаВВалютеДоговора - НДС10;
			Иначе
				СуммаСовсемБезНДС = Авансы.СуммаВВалютеДоговора;
			КонецЕсли;
			
			Всего=СуммаБезНДС20+НДС20+СуммаБезНДС10+НДС10+СуммаСовсемБезНДС;
			Возврат 1;
			
		Иначе
			// Введем значения реквизитов счета-фактуры на основании
			// аванса, проведенного РКО. 
			//*****************************************
			Если ((ДокОсн.КоррСчет <> СчетПоКоду("60.2")) и (ДокОсн.КоррСчет <> СчетПоКоду("60.7")) и (ДокОсн.КоррСчет <> СчетПоКоду("60.22"))) Тогда
				Предупреждение("Документ "+глПредставлениеДокумента(ДокОсн)+"
				|не содержит авансов.");
				Возврат 0;
			КонецЕсли;
			
			Контрагент = ДокОсн.Субконто1;
			Договор = ДокОсн.Субконто2;
			ПриВыбореДоговора();
			СуммаДокументаОснования = ДокОсн.Сумма;
			Если (ДокОсн.Валюта.Выбран() = 1) и (Договор.ВалютаДоговора <> ДокОсн.Валюта) Тогда
				КурсПересчета = ДокОсн.Валюта.Курс.Получить(ДокОсн.ДатаДок);
				Кратность = ДокОсн.Валюта.Кратность.Получить(ДокОсн.ДатаДок);
				Кратность = ?(Кратность = 0, 1, Кратность);
				Сумма = СуммаДокументаОснования * КурсПересчета / Кратность;	
				
			Иначе
				Сумма = СуммаДокументаОснования;
			КонецЕсли;
			
			СуммаБезНДС20=0;
			СуммаБезНДС10=0;
			НДС20=0;
			НДС10=0;
			СуммаСовсемБезНДС=0;
			
			СтавкаНалога = глЗначениеПоУмолчанию("ОсновнаяСтавкаНДС").Ставка;
			Если СтавкаНалога > 10 Тогда
				НДС20 = Окр(Сумма*глЗначениеПоУмолчанию("ОсновнаяСтавкаНДС").Ставка/(100+глЗначениеПоУмолчанию("ОсновнаяСтавкаНДС").Ставка) ,2,1);
				СуммаБезНДС20=Сумма - НДС20;
			ИначеЕсли СтавкаНалога > 0 Тогда
				НДС10 = Окр(Сумма*глЗначениеПоУмолчанию("ОсновнаяСтавкаНДС").Ставка/(100+глЗначениеПоУмолчанию("ОсновнаяСтавкаНДС").Ставка) ,2,1);
				СуммаБезНДС10=Сумма - НДС10;
			Иначе
				СуммаСовсемБезНДС = Сумма;
			КонецЕсли;
			
			Всего=СуммаБезНДС20+НДС20+СуммаБезНДС10+НДС10+СуммаСовсемБезНДС;
			Возврат 1;
			
		КонецЕсли;
		
	ИначеЕсли ДокОсн.Вид() = "АвансовыйОтчет" Тогда	
		Если ПустоеЗначение(ДокОсн.Валюта) = 1 Тогда
			Счет = СчетПоКоду("71.1");
		Иначе
			Счет = СчетПоКоду("71.11");
		КонецЕсли;
		
		ПриВыбореСчета();
		Субконто1 = ДокОсн.Сотрудник;
		ФормироватьПроводки = 1;
		Возврат 1;
		
	Иначе
		ФормироватьПроводки = ?(ДокОсн.НДСвключатьВСтоимость = 1, 0, 1);
		Контрагент = ДокОсн.Контрагент;
		Договор = ДокОсн.Договор;
		Курс = Договор.ВалютаДоговора.Курс.Получить(ДатаДок);
		ЦеныВДоговоре = 1; //в рублях
		Если Договор.Выбран() = 1 Тогда
			ОплатаДоговора = Договор.ОплатаДоговора; //1 - врублях, 2 - в валюте
		КонецЕсли;
		
		ВестиУчетРасчетовУЕ = 0;
		Если Договор.Выбран() = 1 Тогда
		    ВестиУчетРасчетовУЕ = Договор.ВестиУчетРасчетовУЕ;
		КонецЕсли;
			
		Если ДокОсн.Вид() = "УслугиСтороннихОрганизаций" Тогда
			Если ОплатаДоговора = 2 Тогда
			    Если ДокОсн.ТипИсполнителя = 1 Тогда
				    Счет = СчетПоКоду("60.11");
				Иначе
					Счет = СчетПоКоду("76.55");
				КонецЕсли;
			Иначе
				Если ДокОсн.ТипИсполнителя = 1 Тогда
				    Счет = ?(ВестиУчетРасчетовУЕ = 0, СчетПоКоду("60.1"), СчетПоКоду("60.6"));
				Иначе
					Счет = ?(ВестиУчетРасчетовУЕ = 0, СчетПоКоду("76.5"), СчетПоКоду("76.6"));
				КонецЕсли;
			КонецЕсли;
		Иначе
			Если ОплатаДоговора = 2 Тогда
			    Счет = СчетПоКоду("60.11");
			Иначе
			    Счет = ?(ВестиУчетРасчетовУЕ = 0, СчетПоКоду("60.1"), СчетПоКоду("60.6"));
			КонецЕсли;
			Если ДокОсн.Вид() = "ПоступлениеТоваров" Тогда
				Если ДокОсн.ВидПоступления = 13 Тогда  
					Счет = СчетПоКоду("90.3");
				КонецЕсли;
			КонецЕсли;				
		КонецЕсли;
		ПриВыбореСчета();
		Субконто1 = ДокОсн.Контрагент;
		Субконто2 = ДокОсн.Договор;
		
		ДатаОприходования=ДокОсн.ДатаДок;
		Субсчет19 = СчетПоКоду("19.3");
		Если ДокОсн.Вид() = "ПоступлениеОС" Тогда
			Субсчет19 = СчетПоКоду("19.1");
		ИначеЕсли ДокОсн.Вид() = "ПоступлениеНМА" Тогда
			Субсчет19 = СчетПоКоду("19.2");
		ИначеЕсли ДокОсн.Вид() = "ПоступлениеОборудования" Тогда
			Субсчет19 = СчетПоКоду("19.1");
		ИначеЕсли ДокОсн.Вид() = "УслугиСтороннихОрганизаций" Тогда
			Если ДокОсн.ДокументПоступления.Выбран() = 1 Тогда
				Если (ДокОсн.ДокументПоступления.Вид() = "ПоступлениеОС") или 
					(ДокОсн.ДокументПоступления.Вид() = "ПоступлениеОборудования") Тогда
					Субсчет19 = СчетПоКоду("19.1");
				ИначеЕсли ДокОсн.ДокументПоступления.Вид() = "ПоступлениеНМА" Тогда
					Субсчет19 = СчетПоКоду("19.2");
				КонецЕсли;
			КонецЕсли; 
		ИначеЕсли ДокОсн.Вид() = "ПоступлениеТоваров" Тогда
			Если ДокОсн.ВидПоступления = 13 Тогда
				СчетФактураНаВозврат = ДокОсн.ВариантОтраженияВозврата;
				Если СчетФактураНаВозврат = 1 Тогда
					ВидОперации = Перечисление.ВидыОперацийСчетаФактурыПолученного.Возврат;
				КонецЕсли;
				СчетФактураНаВозврат();
				Сообщить("Сумму без НДС и сумму НДС, а также аналитику счета 90.3 необходимо указать вручную.","!");
				Возврат 1;
			Иначе
				СчетФактураНаВозврат = 0;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

	СуммаБезНДС20=0;
	СуммаБезНДС10=0;
	НДС20=0;
	НДС10=0;
	СуммаСовсемБезНДС=0;
	
	ДокОсн.ВыбратьСтроки();
	Пока ДокОсн.ПолучитьСтроку() = 1 Цикл
		Если ДокОсн.Вид() = "ПоступлениеТоваров" Тогда
			Если (ДокОсн.Товар.СтранаПроисхожд = 0) Тогда 
				НоваяСтрока();
				Товар = ДокОсн.Товар;
				Количество = ДокОсн.Количество;
			КонецЕсли;
			Если ДокОсн.Товар.ТипТовара = Перечисление.ТипыТоваров.НаКомиссии Тогда
				Продолжить;
			КонецЕсли;
        КонецЕсли;

		СуммаБезНалогов = ДокОсн.Всего - ДокОсн.НДС - ДокОсн.НП;

		Если СуммаБезНалогов > 0 Тогда
			СтавкаНДС = 100*ДокОсн.НДС/СуммаБезНалогов;
		Иначе
			СтавкаНДС = 20;
		КонецЕсли;

		Если СтавкаНДС>10.5 Тогда
			НДС20=НДС20+ДокОсн.НДС;
		    СуммаБезНДС20=СуммаБезНДС20+СуммаБезНалогов;
		ИначеЕсли СтавкаНДС>0 Тогда
			НДС10=НДС10+ДокОсн.НДС;
			СуммаБезНДС10=СуммаБезНДС10+СуммаБезНалогов;
		Иначе
			СуммаСовсемБезНДС=СуммаСовсемБезНДС+СуммаБезНалогов;
		КонецЕсли;
	КонецЦикла;
	Всего=СуммаБезНДС20+НДС20+СуммаБезНДС10+НДС10+СуммаСовсемБезНДС;
	Возврат 1;
	
КонецФункции // Заполнить()

//*****************************************************************************
// ПриВыбореТовара()
// 
// Вызывается из формул элементов диалога:
//  Колонка "Товар".
//
// Описание:
//  Выдает предупреждение, если выбранный товар не является импортным.
//
Процедура ПриВыбореТовара()
	Если Товар.Выбран() = 1 Тогда
		Если (Товар.ТипНоменклатуры <> Перечисление.ТипыНоменклатуры.Товар) или (Товар.СтранаПроисхожд = 1) Тогда
		    Предупреждение("Выбранный товар не является импортным
							|(указана страна происхождения Россия).");
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры // ПриВыбореТовара()

//*****************************************************************************
// УправлениеДиалогом()
//
// Описание:
//  Управляет диалогом при изменении документа-основания и при открытии формы.
//
Процедура УправлениеДиалогом() 
	
	Если ВидОперации <> Перечисление.ВидыОперацийСчетаФактурыПолученного.Аванс Тогда
		Форма.ИспользоватьЗакладки(1);
		Форма.Закладки.УдалитьВсе();
		Форма.Закладки.ДобавитьЗначение("Основной, Суммы", "Суммы");
		Форма.Закладки.ДобавитьЗначение("Основной, Корреспонденции", "Корреспондирующие счета");
		Форма.Закладки.ДобавитьЗначение("Основной, ИмпортныеТовары", "Импортные товары");
		Форма.НДСпоСтавкеНольПроцентов.Доступность(1);		
	Иначе
		Форма.ИспользоватьЗакладки(0);
		
		Если НДСпоСтавкеНольПроцентов = 1 Тогда
			НДСпоСтавкеНольПроцентов = 0;			
		КонецЕсли;
		Форма.НДСпоСтавкеНольПроцентов.Доступность(0);		
	КонецЕсли;	
	Форма.ИспользоватьСлой("Основной, Суммы", 2);

	Если (Счет.ПринадлежитГруппе(СчетПоКоду("19")) = 1) и
		 (ТипЗначенияСтр(Субконто2) = "Справочник") Тогда
		Субконто2.ИспользоватьВладельца(Контрагент);
	КонецЕсли;
	
	СписокСубсчетов19.ТекущаяСтрока(СписокСубсчетов19.НайтиЗначение(Субсчет19));
	ПриВыбореСтавкиНольПроцентов();
	УправлениеКурсом();
	УправлениеРеквизитомФормироватьПроводки();
	СчетФактураНаВозврат();
	
КонецПроцедуры // УправлениеДиалогом()

//*****************************************************************************
// ЗаполнитьНаОсновании(ДокОсн)
//
// Параметры:
//  ДокОсн - Документ. Документ-основание.
//
// Возвращаемое значение:
//  Число  - 1 - реквизиты заполнены, 0 - не заполнены.
//
// Вызывается из формул элементов диалога:
//  Кнопка "КнопкаЗаполнить".
//
// Описание:
//  Устанавливает значения реквизитов документа в зависимости от значений
// реквизитов документа основания.
//
Функция ЗаполнитьНаОсновании(ДокОсн="")
	
	Если ДокОсн = "" Тогда
	    ДокОсн = ДокументОприходования;
	КонецЕсли;
	
	Если ПустоеЗначение(ДокОсн) = 1 Тогда
	    Предупреждение("Выберите документ-основание!");
		Возврат 0;
	КонецЕсли;
	
	Если Вопрос("Счет-фактура будет заполнен на основании
				|выбранного документа. Продолжить?", "Да+Нет" ) = "Да" Тогда
		Док = СоздатьОбъект("Документ");
		Док.НайтиДокумент(ДокОсн);
	    Если Заполнить(Док.ТекущийДокумент()) = 1 Тогда
	        УправлениеДиалогом();
			Возврат 1;
		КонецЕсли;
	КонецЕсли;
	
	Возврат 0;
	
КонецФункции // ЗаполнитьНаОсновании()

//*****************************************************************************
// ЗаполнитьДатаНомер()
// 
// Вызывается из формул элементов диалога:
//  Поле ввода "НомерДок",
//  Поле ввода "ДатаОприходования".
//
// Описание:
//  Формирует значение реквизита "ДатаНомерСчетаФактуры".
//
Процедура ЗаполнитьДатаНомер()
	
	Если ПустоеЗначение(ДатаНомерСчетаФактуры) = 1 Тогда
		Если (ПустоеЗначение(ДатаОприходования) = 0) и (ПустоеЗначение(НомерДок) = 0) Тогда
		    ДатаНомерСчетаФактуры = Формат(ДатаОприходования,"Д") + " №" +
				СокрЛП(глПреобразоватьНомерДок(НомерДок, 0, 0));
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьДатаНомер()


////////////////////////////////////////////////////////////////////////////////
// ПРЕДОПРЕДЕЛЕННЫЕ ПРОЦЕДУРЫ
//

//*****************************************************************************
// Предопределенна процедура
//
Процедура ВводНового(Копирование)
	глЗаполнитьШапку(Контекст, Копирование);
	Новый = 1;
	ВерсияОбъекта = Константа.НомерРелиза;
	Если Копирование = 1 Тогда
		Возврат;
	КонецЕсли;
	Если ПустоеЗначение(Форма.Параметр) = 0 Тогда
	    Контрагент = Форма.Параметр.Получить("Контрагент");
	КонецЕсли;
	ФормироватьПроводки = 1;
	Субсчет19 = СчетПоКоду("19.3");
	Счет = СчетПоКоду("60.1");
	ВидОперации = Перечисление.ВидыОперацийСчетаФактурыПолученного.Приобретение;
	ПриВыбореСчета();
	
КонецПроцедуры // ВводНового()

//*****************************************************************************
// Предопределенная процедура
//
Процедура ВводНаОсновании(ДокОсн)
	
	Новый = 1;
	ВерсияОбъекта = Константа.НомерРелиза;
	Если Заполнить(ДокОсн) = 0 Тогда
		СтатусВозврата(0);
		Возврат;
	КонецЕсли;
	Комментарий = "Введен на основании: "+ГлПредставлениеДокумента(ДокОсн);	
	
КонецПроцедуры // ВводНаОсновании()

//*****************************************************************************
// Предопределенна процедура
//
Процедура ПриВыбореЗакладки(Номер, Значение)
    
	Форма.ИспользоватьСлой(Значение, 2);
	Если Номер = 1 Тогда
	    УправлениеКурсом();
	КонецЕсли;
	
КонецПроцедуры // ПриВыбореЗакладки()

//*****************************************************************************
// Предопределенна процедура
//
Процедура ПриОткрытии()
	
	ПриЗаписиПерепроводить(1);
	глПроверкаРазрешенияРедактирования(Контекст);
	Если Форма.ТолькоПросмотр() = 1 Тогда
		Форма.КнопкаОК.Доступность(0);
		Форма.КнопкаЗаписать.Доступность(0);
		Форма.КнопкаЗаполнить.Доступность(0);
		Форма.кнОчиститьОснование.Доступность(0);
	КонецЕсли;
	НачальнаяДатаДокумента = ДатаДок;
	
	ДобавитьСчетВ_Список("19.1");
	ДобавитьСчетВ_Список("19.2");
	ДобавитьСчетВ_Список("19.3");
	ДобавитьСчетВ_Список("19.4");
	
	УправлениеДиалогом();
	
	ТекДоговор = Договор;
	
КонецПроцедуры // ПриОткрытии()

//*****************************************************************************
// Предопределенна процедура
//
Процедура ПриНачалеВыбораЗначения(ЭлементДиалога, Флаг)
	
	Если ЭлементДиалога = "ДокументОприходования" Тогда
		Меню = СоздатьОбъект("СписокЗначений");
		Для А = 1 По Метаданные.Документ() Цикл
			Для Б = 1 По Метаданные.Документ(А).ВводимыеНаОснованииДокументы.Количество() Цикл
				Если Метаданные.Документ(А).ВводимыеНаОснованииДокументы.Получить(Б).Идентификатор = "СчетФактураПолученный" Тогда
					Меню.ДобавитьЗначение(Метаданные.Документ(А).Идентификатор, Строка(Метаданные.Документ(А)));
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
	    ВидДок = ДокументОприходования.Вид();
		Флаг = 0;
		Если Меню.ВыбратьЗначение(ВидДок,,,,2) = 1 Тогда
			Конт = ПолучитьПустоеЗначение("");
			ОткрытьФорму("Журнал.Общий", Конт);
			Конт.УстановитьОтбор(ВидДок);
			Конт.АктивизироватьОбъект(ДокументОприходования);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ПриНачалеВыбораЗначения()

//*****************************************************************************
// Предопределенная процедура
//
Процедура ОбработкаВыбораЗначения(ВыбЗначение, ЭлементДиалога, Флаг)
	
	Если ЭлементДиалога = "ДокументОприходования" Тогда
		Флаг = ЗаполнитьНаОсновании(ВыбЗначение);
	КонецЕсли;

КонецПроцедуры // ОбработкаВыбораЗначения()

//*****************************************************************************
// Предопределенна процедура
//
Процедура ПриЗаписи()
	
	Если глМожноЗаписатьДокумент(Контекст) = 0 Тогда
		СтатусВозврата(0);
		Возврат;
	ИначеЕсли глКонтрольДатыДокумента(Контекст, НачальнаяДатаДокумента) = 1 Тогда
		СтатусВозврата(0);
		Возврат;
	КонецЕсли;
	Операция.СуммаОперации = Всего;
	Операция.Содержание = "Сч.-факт. поставщика: "+Контрагент;
	
КонецПроцедуры // ПриЗаписи()

//******************************************************************************
// Предопределенная процедура
//
Процедура ПриЗакрытии()
	
	Если ПустоеЗначение(Форма.Параметр) = 0 Тогда
		КонтекстЖурнала = Форма.Параметр.Получить("КонтекстЖурнала");
		Если ПустоеЗначение(КонтекстЖурнала) = 0 Тогда
			КонтекстЖурнала.Активизировать(КонтекстЖурнала.Форма.ТекущаяКолонка(), 0);
			
		Иначе
			глОткрытьЖурнал(Контекст, Новый);
		КонецЕсли;
		
	Иначе
		глОткрытьЖурнал(Контекст, Новый);
	КонецЕсли;	
	
КонецПроцедуры // ПриЗакрытии()

//******************************************************************************
Новый = 0;

СписокДействий = СоздатьОбъект("СписокЗначений");
СписокДействий.ДобавитьЗначение("Отчет о движениях документа");
СписокДействий.ДобавитьЗначение("Структура подчиненности");
СписокДействий.ДобавитьЗначение("Ввести на основании");
СписокДействий.ДобавитьЗначение("Перейти  в журнал");
