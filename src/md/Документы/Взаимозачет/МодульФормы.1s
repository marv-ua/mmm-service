////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ
//
Перем ТаблицаПечФорм;  // список печатных форм документа
Перем НомерТекущейФормы;
Перем Новый;
Перем СписокДействий;
Перем НачальнаяДатаДокумента;
Перем СписокСчетовДляВыбора;

//*****************************************************************************
// УправлениеДиалогом()
//
// Параметры:
//	Нет.
//
// Вызывается из формул элементов диалога:
//  Нет.
//
// Описание:
//  Управляет диалогом
//
Процедура УправлениеДиалогом()
	
	Если ВидКорректировки = 0 Тогда
		Форма.СчетСписания.Редактирование(0);
		Форма.ИспользоватьВспомогательныйСчет.Видимость(1);
		
		Форма.Дебитор.Видимость(1);
		Форма.подписьДебитор.Видимость(1);
		Форма.кнопкаДебитор.Видимость(1);
		Форма.Кредитор.Видимость(1);
		Форма.подписьКредитор.Видимость(1);
		Форма.кнопкаКредитор.Видимость(1);
		
		Форма.СуммаДеб.Видимость(1);
		Форма.СуммаКред.Видимость(1);
		Форма.СуммаНДС.Видимость(0);
		Форма.СуммаНУ.Видимость(0);
		Форма.СуммаНДСНУ.Видимость(0);
		Форма.ВидЗадолженности.Видимость(1);
		Форма.СуммаЗадолженности.Видимость(1);
		Форма.СуммаКред.Заголовок("Кредит сумма");
		Форма.СуммаДеб.Заголовок("Дебет сумма");
	Иначе	
	    Форма.СчетСписания.Редактирование(1);
		Форма.ИспользоватьВспомогательныйСчет.Видимость(0);
		Форма.ВидЗадолженности.Видимость(0); 
		Форма.СуммаЗадолженности.Видимость(0);
		
		Если ВидКорректировки = 1 Тогда // корректировка дебиторской задолж.
			Форма.СуммаНУ.Видимость(0);
			Форма.СуммаНДС.Видимость(0);
			Форма.СуммаНДСНУ.Видимость(0);
			
		ИначеЕсли ВидКорректировки = 2 Тогда // корректировка кредиторской задолж.
			Форма.СуммаНУ.Видимость(0);
			Форма.СуммаНДС.Видимость(0);
			Форма.СуммаНДСНУ.Видимость(0);
			
		ИначеЕсли ВидКорректировки = 3 Тогда // списание дебиторской задолж.
			Форма.СуммаНУ.Видимость(1);
			Форма.СуммаНДС.Видимость(0);
			Форма.СуммаНДСНУ.Видимость(0);
			
		ИначеЕсли ВидКорректировки = 4 Тогда // списание кредиторской задолж.
			Форма.СуммаНУ.Видимость(1);
			Форма.СуммаНДС.Видимость(1);
			Форма.СуммаНДСНУ.Видимость(1);
			
		КонецЕсли;	
		
		Если (ВидКорректировки = 1) или (ВидКорректировки = 3) Тогда // дебиторская задолж. 
			Форма.Дебитор.Видимость(1);
			Форма.подписьДебитор.Видимость(1);
			Форма.кнопкаДебитор.Видимость(1);
			Форма.Кредитор.Видимость(0);
			Форма.подписьКредитор.Видимость(0);
			Форма.кнопкаКредитор.Видимость(0);
			
			Форма.СуммаДеб.Видимость(1);
			Форма.СуммаДеб.Заголовок("Сумма");
			Форма.СуммаКред.Видимость(0);
			
		Иначе // кредиторская задолж. 
			Форма.Дебитор.Видимость(0);
			Форма.подписьДебитор.Видимость(0);
			Форма.кнопкаДебитор.Видимость(0);
			Форма.Кредитор.Видимость(1);
			Форма.подписьКредитор.Видимость(1);
			Форма.кнопкаКредитор.Видимость(1);
			
			Форма.СуммаДеб.Видимость(0);
			Форма.СуммаКред.Видимость(1);
			Форма.СуммаКред.Заголовок("Сумма");
			
		КонецЕсли;	
			
	КонецЕсли; 
	
	Если ВидКорректировки = 0 Тогда
		Форма.РамкаГруппыСчетСписания.Заголовок("Вспомогательный счет");
	ИначеЕсли (ВидКорректировки = 1) или (ВидКорректировки = 2) Тогда
		Форма.РамкаГруппыСчетСписания.Заголовок("Счет переноса задолженности");
	Иначе
		Форма.РамкаГруппыСчетСписания.Заголовок("Счет списания задолженности");
	КонецЕсли;	
	
	Если (ИспользоватьВспомогательныйСчет = 0) и (ВидКорректировки = 0) Тогда
		Форма.СчетСписания.Доступность(0);
		Форма.Субконто1.Доступность(0);
		Форма.Субконто2.Доступность(0);
		Форма.Субконто3.Доступность(0);
	    Форма.РамкаГруппыСчетСписания.Доступность(0);
		Форма.подписьСчетСписания.Доступность(0);
		
	Иначе	
		Форма.СчетСписания.Доступность(1);
		Форма.Субконто1.Доступность(1);
		Форма.Субконто2.Доступность(1);
		Форма.Субконто3.Доступность(1);
	    Форма.РамкаГруппыСчетСписания.Доступность(1);
		Форма.подписьСчетСписания.Доступность(1);
		
		Если (ВидКорректировки = 3) или (ВидКорректировки = 4) Тогда
			Форма.СчетСписания.Доступность(0);
		Иначе
			Форма.СчетСписания.Доступность(1);
		КонецЕсли;	
			
	КонецЕсли;
	
КонецПроцедуры //УправлениеДиалогом()

//******************************************************************************
// УправлениеДоступностьюГраф()
//
// Параметры:
//  Нет.
//
// Вызывается из формул элементов диалога:
//  Нет.
//
// Описание:
//  Управление доступностью граф табличной части документа.
//
Процедура УправлениеДоступностьюГраф()

	Если ВидКорректировки = 0 Тогда
		Если СокрЛП(ВидЗадолженности) = "Кредиторская" Тогда
			Форма.СуммаДеб.Доступность(0);
			Форма.СуммаКред.Доступность(1);
	
		ИначеЕсли СокрЛП(ВидЗадолженности) = "Дебиторская" Тогда
	
			Форма.СуммаДеб.Доступность(1);
			Форма.СуммаКред.Доступность(0);
		КонецЕсли;
	Иначе
		Форма.СуммаДеб.Доступность(1);
		Форма.СуммаКред.Доступность(1);
	КонецЕсли;	

КонецПроцедуры // УправлениеДоступностьюГраф()

//******************************************************************************
// ПриИзмененииСчетаСписания()
//
// Параметры:
//  Нет.
//
// Вызывается из формул элементов диалога:
//  - поле "Счет" для списания задолженности.
//
// Описание:
//	 Обработка изменения значения поля.
//
Процедура ПриИзмененииСчетаСписания()

	НазначитьТип("Субконто1", СчетСписания.ВидСубконто(1));
	НазначитьТип("Субконто2", СчетСписания.ВидСубконто(2));
	НазначитьТип("Субконто3", СчетСписания.ВидСубконто(3));

КонецПроцедуры // ПриИзмененииСчетаСписания()

//******************************************************************************
// ФормированиеСпискаСчетов()
//
// Параметры:
//  Нет.
//
// Возвращаемое значение:
//  Здесь описывается возвращаемое значение.
//
// Вызывается из формул элементов диалога:
//  Нет.
//
// Описание:
//  Здесь описывается функция.
//
Функция ФормированиеСпискаСчетов()
	
	СписокСчетовДляВыбора  = СоздатьОбъект("СписокЗначений");
	
	// Формируем список счетов на которых может образовываться кредиторская задолженность
	Счета = СоздатьОбъект("Счет");
	Счета.ВыбратьСчета();
	Пока Счета.ПолучитьСчет() = 1 Цикл
		Если Счета.Забалансовый = 1 Тогда
			Продолжить;
			
		ИначеЕсли Счета.ЭтоГруппа() = 1 Тогда
			Продолжить;
			
		КонецЕсли;
		
		Если (Счета.Код < "60") или (Счета.Код >= "77") Тогда
			Продолжить;
		КонецЕсли;	
		
		Если Счета.ПринадлежитГруппе(СчетПоКоду("76.Н")) = 1 Тогда
			Продолжить;
		КонецЕсли;
		
		Если Счета.Валютный = 1 Тогда // нельзя использовать валютные счета
			Продолжить;
		КонецЕсли;
			
		Если (Счета.ВидСубконто(1) <> ВидыСубконто.Контрагенты)
		 или (Счета.ВидСубконто(2) <> ВидыСубконто.Договоры) Тогда
		 	Продолжить;
		КонецЕсли;
		 
		Наименование = Лев(Счета.Код+"        ",7) + " """ + Счета.ПолнНаименование + """";
		
		СписокСчетовДляВыбора.ДобавитьЗначение(Счета.ТекущийСчет(), Наименование);
	КонецЦикла;
	
	Возврат СписокСчетовДляВыбора;
	
КонецФункции // ФормированиеСпискаСчетов()

//******************************************************************************
// ПриВыбореИспользоватьВспомогательныйСчет()
//
// Вызывается из формул элементов диалога:
//	- флажок ИспользоватьВспомогательныйСчет.
//
Процедура ПриВыбореИспользоватьВспомогательныйСчет()
	
	Если (ИспользоватьВспомогательныйСчет = 0) и (ВидКорректировки = 0) Тогда
		СчетСписания = "";
		ПриИзмененииСчетаСписания();
	КонецЕсли;
	
	УправлениеДиалогом();
	
КонецПроцедуры // ПриВыбореИспользоватьВспомогательныйСчет()	

//******************************************************************************
// ПриИзмененииКредитора()
//
// Параметры:
//  Нет.
//
// Вызывается из формул элементов диалога:
//  - поле "Контрагент" (кредитора).
//
// Описание:
//  Обработка изменения значения поля.
//
Процедура ПриИзмененииКредитора()

	ТекВидКорректировки = СписокВидовКорректировки.ТекущаяСтрока();
	Если Дебитор.Выбран() = 0 Тогда
		Дебитор = Кредитор;
	Иначе
		Если (ТекВидКорректировки = 3) или (ТекВидКорректировки = 5) Тогда // кредиторская задолж. 
			Дебитор = Кредитор;		
		КонецЕсли;
	КонецЕсли;


КонецПроцедуры // ПриИзмененииКредитора()

//******************************************************************************
// ПриИзмененииДебитора()
//
// Параметры:
//  Нет.
//
// Вызывается из формул элементов диалога:
//  - поле "Контрагент" (дебитора).
//
// Описание:
//  Обработка изменения значения поля.
//
Процедура ПриИзмененииДебитора()
    	
	ТекВидКорректировки = СписокВидовКорректировки.ТекущаяСтрока();
	Если Кредитор.Выбран() = 0 Тогда
		Кредитор = Дебитор;
	Иначе
		Если (ТекВидКорректировки = 2) или (ТекВидКорректировки = 4) Тогда // дебиторская задолж. 
			Кредитор = Дебитор;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ПриИзмененииДебитора()

////******************************************************************************
//// ПриИзмененииСчета()
////
//// Параметры:
////  Нет.
////
//// Вызывается из формул элементов диалога:
////  - поле "Счет" для списания задолженности.
////
//// Описание:
////	 Обработка изменения значения поля.
////
Процедура ПриИзмененииСчета()

    НазначитьТип("ВидРасчетов", Счет.ВидСубконто(3));
	
КонецПроцедуры // ПриИзмененииСчетаСписанияДеб()

//******************************************************************************
// ПриИзмененииВидаЗадолженности()
//
// Параметры:
//  Нет.
//
// Вызывается из формул элементов диалога:
//  - графа "Вид задолж.".
//
// Описание:
//  Обработка изменения значения графы документа.
//
Процедура ПриИзмененииВидаЗадолженности()

	Если СокрЛП(ВидЗадолженности) = "Кредиторская" Тогда
		СуммаКред = СуммаДеб;
		СуммаДеб = 0;
		
	ИначеЕсли СокрЛП(ВидЗадолженности) = "Дебиторская" Тогда
		СуммаДеб = СуммаКред;
		СуммаКред = 0;
		
	КонецЕсли;
	
	УправлениеДоступностьюГраф();

КонецПроцедуры // ПриИзмененииВидаЗадолженности()

//******************************************************************************
// ПриВыбореВидаКорректировки()
//
// Вызывается из формул элементов диалога:
//	- поле со списком СписокВидовКорректировки.
//
Процедура ПриВыбореВидаКорректировки()
	
	поз = СписокВидовКорректировки.ТекущаяСтрока();
	Если поз <> 0 Тогда
		ТекВидКорректировки = СписокВидовКорректировки.ПолучитьЗначение(поз);
	КонецЕсли;
	
	Если (КоличествоСтрок() > 0) и (ТекВидКорректировки <> ВидКорректировки) Тогда
		
		Если ((ТекВидКорректировки = 1) или (ТекВидКорректировки = 3)) и // дебиторская задолж. 
			 ((ВидКорректировки = 0) или (ВидКорректировки = 2) или (ВидКорректировки = 4)) Тогда
			
			Если ВидКорректировки = 0 Тогда
			 	Если Вопрос("Строки документа, относящиеся к кредиторской задолженности, будут удалены."+РазделительСтрок+"Продолжить?", "Да+Нет") = "Нет" Тогда
					СписокВидовКорректировки.ТекущаяСтрока(ВидКорректировки+1);
					ФлагСтандартнойОбработки = 0;
					Возврат;
				КонецЕсли;
				
			Иначе
				Дебитор = Кредитор;
			КонецЕсли;	
			
			КоличествоСтрок = КоличествоСтрок();
			Для СчетчикЦикла = 1 По КоличествоСтрок Цикл
				НомерСтр = КоличествоСтрок - СчетчикЦикла + 1;
				ПолучитьСтрокуПоНомеру(НомерСтр);
				Если СокрЛП(ВидЗадолженности) = "Кредиторская" Тогда
					Если ВидКорректировки = 0 Тогда
						УдалитьСтроку();
					Иначе
						ВидЗадолженности = "Дебиторская";
						СуммаДеб = СуммаКред;
						СуммаКред = 0;
					КонецЕсли;	
				КонецЕсли;
			КонецЦикла;
			
		ИначеЕсли ((ТекВидКорректировки = 2) или (ТекВидКорректировки = 4)) и // кредиторская задолж. 
				  ((ВидКорректировки = 0) или (ВидКорректировки = 1) или (ВидКорректировки = 3)) Тогда
			
			Если ВидКорректировки = 0 Тогда
				Если Вопрос("Строки документа, относящиеся к дебиторской задолженности, будут удалены."+РазделительСтрок+"Продолжить?", "Да+Нет") = "Нет" Тогда
					СписокВидовКорректировки.ТекущаяСтрока(ВидКорректировки+1);
					ФлагСтандартнойОбработки = 0;
					Возврат;
				КонецЕсли;
				
			Иначе
				Кредитор = Дебитор;
			КонецЕсли;	
            
			КоличествоСтрок = КоличествоСтрок();
			Для СчетчикЦикла = 1 По КоличествоСтрок Цикл
				НомерСтр = КоличествоСтрок - СчетчикЦикла + 1;
				ПолучитьСтрокуПоНомеру(НомерСтр);
				Если СокрЛП(ВидЗадолженности) = "Дебиторская" Тогда
					Если ВидКорректировки = 0 Тогда
						УдалитьСтроку();
					Иначе
						ВидЗадолженности = "Кредиторская";
						СуммаКред = СуммаДеб;
						СуммаДеб = 0;
					КонецЕсли;	
				КонецЕсли;
			КонецЦикла;
			
		КонецЕсли;	
		
	КонецЕсли;
	
	ВидКорректировки = ТекВидКорректировки;
	
	Если (ИспользоватьВспомогательныйСчет = 0) и (ВидКорректировки = 0) Тогда
		СчетСписания = "";
		ПриИзмененииСчетаСписания();
		
	ИначеЕсли ВидКорректировки < 3 Тогда
		Если (СчетСписания = СчетПоКоду("91.1")) или (СчетСписания = СчетПоКоду("91.2")) Тогда
			СчетСписания = "";
			ПриИзмененииСчетаСписания();
		КонецЕсли;	
	
	ИначеЕсли ВидКорректировки = 3 Тогда
		СчетСписания = СчетПоКоду("91.2");
		ПриИзмененииСчетаСписания();
		Субконто1 = "";
		
	ИначеЕсли ВидКорректировки = 4 Тогда
		СчетСписания = СчетПоКоду("91.1");
		ПриИзмененииСчетаСписания();
		Субконто1 = "";
		
	КонецЕсли;
	
	УправлениеДиалогом();
	
КонецПроцедуры

//******************************************************************************
// ДобавитьСтрокуВТаблицу()
//
// Параметры:
//  Нет.
//
// Вызывается из формул элементов диалога:
//  Нет.
//
// Описание:
//  Здесь описывается процедура.
//
Процедура ДобавитьСтрокуВТаблицу(БухИт)
	            
	Контрагент = БухИт.Субконто(ВидыСубконто.Контрагенты);
	Сальдо = БухИт.СНК() - БухИт.СНД();
	
	Если Сальдо > 0 Тогда
		Если Контрагент = Кредитор Тогда
		    НоваяСтрока();
			ВидЗадолженности = "Кредиторская";
			Счет             = БухИт.Счет;
			ПриИзмененииСчета();
			Договор          = БухИт.Субконто(2);
			ВидРасчетов      = БухИт.Субконто(3);
			СуммаКред        = Сальдо;
			СуммаЗадолженности	 = Сальдо;
		КонецЕсли;
		
	ИначеЕсли Сальдо < 0 Тогда
		Если Контрагент = Дебитор Тогда
			НоваяСтрока();
			ВидЗадолженности = "Дебиторская";
			Счет             = БухИт.Счет;
			ПриИзмененииСчета();
			Договор          = БухИт.Субконто(2);
			ВидРасчетов      = БухИт.Субконто(3);
			
			СуммаДеб         = -Сальдо;
			СуммаЗадолженности	 = -Сальдо;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ДобавитьСтрокуВТаблицу()

//******************************************************************************
// Заполнить()
//
// Параметры:
//  Нет.
//
// Вызывается из формул элементов диалога:
//  - кнопка "Заполнить".
//
// Описание:
//  Заполняет табличную часть документа.
//
Процедура Заполнить()
                     
	Если (Выбран() = 0) или (Модифицированность() = 1) Тогда
	    Предупреждение("Перед заполнением документ необходимо записать!", 60);
		Возврат;
	КонецЕсли;
	
	Если КоличествоСтрок() = 0 Тогда
	ИначеЕсли Вопрос("Таблица будет очищена, а существующие строки удалены."+РазделительСтрок+"
					|Продолжить?","Да+Нет") = "Да" Тогда
		УдалитьСтроки();
		
	Иначе
		Возврат;
	КонецЕсли;
	    
	ДебиторКредитор = СоздатьОбъект("СписокЗначений");
	Если ВидКорректировки = 0 Тогда // взаимозачет
		ДебиторКредитор.ДобавитьЗначение(Кредитор);
		ДебиторКредитор.ДобавитьЗначение(Дебитор);    
		
	ИначеЕсли (ВидКорректировки = 1) или (ВидКорректировки = 3) Тогда
		ДебиторКредитор.ДобавитьЗначение(Дебитор);
		
	Иначе
		ДебиторКредитор.ДобавитьЗначение(Кредитор);
	КонецЕсли;
	
	БухИт = СоздатьОбъект("БухгалтерскиеИтоги"); БухИт.ИспользоватьРазделительУчета(ЮрЛицо);
	БухИт.ВключатьСубсчета(-1,);
	БухИт.ИспользоватьСубконто(ВидыСубконто.Контрагенты, ДебиторКредитор);
	БухИт.ИспользоватьСубконто(ВидыСубконто.Договоры);
	БухИт.ИспользоватьСубконто();
	БухИт.ВыполнитьЗапрос(ТекущийДокумент(),, СписокСчетовДляВыбора,,,,, "С");
	                          	
	БухИт.ВыбратьСубконто(ВидыСубконто.Договоры);
	Пока БухИт.ПолучитьСубконто(ВидыСубконто.Договоры) = 1 Цикл
		
		БухИт.ВыбратьСчета();
		Пока БухИт.ПолучитьСчет() = 1 Цикл
			
		    БухИт.ВыбратьСубконто(ВидыСубконто.Контрагенты);
			Пока БухИт.ПолучитьСубконто(ВидыСубконто.Контрагенты) = 1 Цикл
				
				Если БухИт.Счет.КоличествоСубконто() = 3 Тогда
					
				    БухИт.ВыбратьСубконто(3);
					Пока БухИт.ПолучитьСубконто(3) = 1 Цикл
						ДобавитьСтрокуВТаблицу(БухИт);
					КонецЦикла;
					
				Иначе
					ДобавитьСтрокуВТаблицу(БухИт);
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЦикла;

КонецПроцедуры // Заполнить

//******************************************************************************
// ПечатьВстроенная()
//
// Параметры:
//  Нет.
//
// Вызывается из формул элементов диалога:
// 	Вызывается по кнопке "Печать"  
//
// Описание:
//  Формирование печатной формы.
//
Процедура Печать()

	Если Кредитор <> Дебитор Тогда
		Предупреждение("Печатная форма акта предназначена только для двустороннего
		               |взаимозачета. Для оформления многостороннего взаимозачета
		               |можно воспользоваться ей как образцом.");
	КонецЕсли;

	Таб = СоздатьОбъект("Таблица");
	Таб.ИсходнаяТаблица("АктВзаимозачета");

	СтрокаДокументовКред = "";
	СтрокаДокументовДеб = "";
    
	СтрокиДокумента = СоздатьОбъект("ТаблицаЗначений");
	ВыгрузитьТабличнуюЧасть(СтрокиДокумента, "ВидЗадолженности, Договор, СуммаДеб, СуммаКред, СуммаЗадолженности");
	СтрокиДокумента.Свернуть("ВидЗадолженности, Договор", "СуммаДеб, СуммаКред, СуммаЗадолженности");
	
	ЗадолженностьДеб = 0;
	ЗадолженностьКред = 0;
	
	СтрокиДокумента.ВыбратьСтроки();
	Пока СтрокиДокумента.ПолучитьСтроку() = 1 Цикл

		Если СокрЛП(СтрокиДокумента.ВидЗадолженности) = "Кредиторская" Тогда
            ЗадолженностьКред = ЗадолженностьКред + СтрокиДокумента.СуммаЗадолженности;
			глДобавитьРеквизит(СтрокаДокументовКред, ?(ПустаяСтрока(СтрокаДокументовКред) = 1, "", "; "), СтрокиДокумента.Договор);

		ИначеЕсли СокрЛП(СтрокиДокумента.ВидЗадолженности) = "Дебиторская" Тогда
            ЗадолженностьДеб = ЗадолженностьДеб + СтрокиДокумента.СуммаЗадолженности;
			глДобавитьРеквизит(СтрокаДокументовДеб, ?(ПустаяСтрока(СтрокаДокументовДеб) = 1, "", "; "), СтрокиДокумента.Договор);

		КонецЕсли;

	КонецЦикла;

	СтрокаДокументовКред = СтрокаДокументовКред + ?(Прав(СтрокаДокументовКред, 1) = ".", "", ".");
	СтрокаДокументовДеб = СтрокаДокументовДеб + ?(Прав(СтрокаДокументовДеб, 1) = ".", "", ".");

	Если Итог("СуммаКред") = Итог("СуммаДеб") Тогда
		СуммаВзаимозачета = Итог("СуммаКред");
	Иначе
		СуммаВзаимозачета = 0;
	КонецЕсли;

	Таб.Вывести();
	Таб.ТолькоПросмотр(1);
	Таб.Опции(0, 0, 0, 0, "АктВзаимозачета", "АктВзаимозачета");
	Таб.ОбластьПечати(, 2, , );
	Таб.ПараметрыСтраницы(, , , , , , , , , , 1, );
	Таб.Показать("Акт взаимозачета");

КонецПроцедуры // ПечатьВстроенная()

//******************************************************************************
// ПоКнопкеПечать()
// 
// Вызывается из формул элементов диалога:
//  Кнопка "кнПечать".
//
// Описание:
//  Определяется соответствующая печатная форма.
// 	
Процедура ПоКнопкеПечать(СразуНаПринтер = 0,КолЭкз = 1)
	
	Если  ПустоеЗначение(НомерТекущейФормы) = 1  Тогда
		НомерТекущейФормы = 1;
		Форма.кнПечать.Заголовок(ТаблицаПечФорм.ПолучитьЗначение(НомерТекущейФормы, "Кнопка"));
	КонецЕсли;
	
	Если НомерТекущейФормы = 1  Тогда
		Печать();
		
	Иначе
		Параметры = СоздатьОбъект("СписокЗначений");
		Параметры.ДобавитьЗначение(Контекст, "Контекст");
		Параметры.ДобавитьЗначение(СразуНаПринтер, "Устройство");
		Параметры.ДобавитьЗначение(КолЭкз, "КоличествоКопий");
		
		ОткрытьФорму("Отчет", Параметры, глКаталогПечФорм+ТаблицаПечФорм.ПолучитьЗначение(НомерТекущейФормы,"Файл"));
	КонецЕсли;
	
КонецПроцедуры // ПоКнопкеПечать()

//******************************************************************************
// ПоКнопкеВыборПечатнойФормы()
//
// Вызывается из формул элементов диалога:
//  Кнопка "кнВыбПечать".
//
// Описание:
//  - открывает список для выбора способа печати. 
//  - формирует таблицу по выбранному способу.
//
Процедура ПоКнопкеВыборПечатнойФормы()
	
    ВыбНомер = глВыборПечатнойФормы("Документ." + Вид(), ТаблицаПечФорм);
	Если ВыбНомер > 0 Тогда
		НомерТекущейФормы = ВыбНомер;
		Форма.кнПечать.Заголовок(ТаблицаПечФорм.ПолучитьЗначение(НомерТекущейФормы, "Кнопка"));
		ПоКнопкеПечать();
	КонецЕсли;

КонецПроцедуры // ПоКнопкеВыборПечатнойФормы()

//******************************************************************************
// Предопределенная процедура
// 
Процедура ВводНового(Копирование)
	глЗаполнитьШапку(Контекст, Копирование);
	Новый = 1;
	Если Копирование = 1 Тогда	//копирование документа
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

//******************************************************************************
// Предопределенная процедура
// 
Процедура ПриОткрытии()
    
	НачальнаяДатаДокумента = ДатаДок;
	ПриЗаписиПерепроводить(1);
	глПроверкаРазрешенияРедактирования(Контекст);
	
	Форма.ВидЗадолженности.ВыполнятьФормулуТолькоПриИзменении(1);
	Форма.Счет.ВыполнятьФормулуТолькоПриИзменении(1);
	
	УправлениеДиалогом();
	
	Если Форма.ТолькоПросмотр() = 1 Тогда
		Форма.КнопкаЗаполнить.Доступность(0);
		Форма.КнопкаЗаписать.Доступность(0);
		Форма.КнопкаПровести.Доступность(0);
		Форма.КнопкаОК.Доступность(0);
		Форма.КнопкаПоУмолчанию("КнопкаЗакрыть");
	КонецЕсли;
	
	СписокСчетовДляВыбора = ФормированиеСпискаСчетов();
	
	СписокВидовКорректировки.ТекущаяСтрока(ВидКорректировки+1);
	
	// Заполним таблицу для выбора печатной формы
	НомерТекущейФормы = глУстановкаКнопкиПечать(Контекст, "Документ." + Вид(),ТаблицаПечФорм);

КонецПроцедуры // ПриОткрытии()

//******************************************************************************
// Предопределенная процедура
// 
Процедура ПриНачалеРедактированияСтроки()

	УправлениеДоступностьюГраф();

КонецПроцедуры // ПриНачалеРедактированияСтроки

//******************************************************************************
// Предопределенная процедура
// 
Процедура ПриРедактированииНовойСтроки()
	
	Если ПустаяСтрока(ВидЗадолженности) = 1 Тогда
		Если (ВидКорректировки = 1) или (ВидКорректировки = 3) Тогда // дебиторская задолж. 
			ВидЗадолженности = "Дебиторская";
		Иначе	
			ВидЗадолженности = "Кредиторская";
		КонецЕсли;	
	КонецЕсли;
	УправлениеДоступностьюГраф();
	
КонецПроцедуры

//******************************************************************************
// Предопределенная процедура
// 
Процедура ПриНачалеВыбораЗначения(ИдентЭлементаДиалога, ФлагСтандартнойОбработки)
    
	Если ИдентЭлементаДиалога = "ВидЗадолженности" Тогда
		
		Если (ПустоеЗначение(Договор) = 0) и (Дебитор <> Кредитор) Тогда
			Если Вопрос("Договор будет очищен."+РазделительСтрок+"Продолжить?", "Да+Нет") = "Нет" Тогда
				ФлагСтандартнойОбработки = 0;
				Возврат;
			КонецЕсли;
		КонецЕсли;	
		
		Если СокрЛП(ВидЗадолженности) = "Кредиторская" Тогда
			ВидЗадолженности = "Дебиторская";
			
		Иначе
			ВидЗадолженности = "Кредиторская";
		КонецЕсли;
		ПриИзмененииВидаЗадолженности();
		
	ИначеЕсли ИдентЭлементаДиалога = "Счет" Тогда
		
		ФлагСтандартнойОбработки = 0;                             
		СписокСчетовДляВыбора.ВыбратьЗначение(Счет,,,60,2);
		ПриИзмененииСчета();
		
	ИначеЕсли ИдентЭлементаДиалога = "СчетСписания" Тогда
		
		Если ВидКорректировки = 0 Тогда
			ФлагСтандартнойОбработки = 0;                             
			СписокСчетовДляВыбора.ВыбратьЗначение(СчетСписания,,,60,2);
			ПриИзмененииСчетаСписания();
		КонецЕсли;	
		
	ИначеЕсли ИдентЭлементаДиалога = "Субконто1" Тогда
		
		Если СчетСписания = СчетПоКоду("91.1") Тогда
			ФлагСтандартнойОбработки = 0;
			конт = Перечисление.ВидыПрочихДоходовИРасходов.СписаннаяКредиторскаяЗадолженность;
			ОткрытьФорму("Справочник.ПрочиеДоходыИРасходы",Конт);
		
		ИначеЕсли СчетСписания = СчетПоКоду("91.2") Тогда
			ФлагСтандартнойОбработки = 0;
			конт = Перечисление.ВидыПрочихДоходовИРасходов.СписаннаяДебиторскаяЗадолженность;
			ОткрытьФорму("Справочник.ПрочиеДоходыИРасходы",Конт);
		    
		КонецЕсли;
		
	ИначеЕсли ИдентЭлементаДиалога = "Договор" Тогда

		Если (ПустоеЗначение(ВидЗадолженности) = 1) и (ВидКорректировки = 0) Тогда

			Предупреждение("Необходимо выбрать вид задолженности.",60);
			Активизировать("ВидЗадолженности");
			ФлагСтандартнойОбработки = 0;
			Возврат;

		ИначеЕсли (СокрЛП(ВидЗадолженности) = "Кредиторская") или (ВидКорректировки = 2) или (ВидКорректировки = 4) Тогда
            
			Если Кредитор.Выбран() = 0 Тогда
				Спр = СоздатьОбъект("Справочник.Контрагенты");
				Если Спр.Выбрать("Выберите контрагента-кредитора!","ФормаСписка") = 1 Тогда
					Кредитор = Спр.ТекущийЭлемент();
				Иначе
					ФлагСтандартнойОбработки = 0;
					Возврат;
				КонецЕсли;	
			КонецЕсли;
			
			Договор.ИспользоватьВладельца(Кредитор);

		ИначеЕсли (СокрЛП(ВидЗадолженности) = "Дебиторская") или (ВидКорректировки = 1) или (ВидКорректировки = 3) Тогда

			Если Дебитор.Выбран() = 0 Тогда
				Спр = СоздатьОбъект("Справочник.Контрагенты");
				Если Спр.Выбрать("Выберите контрагента-дебитора!","ФормаСписка") = 1 Тогда
					Дебитор = Спр.ТекущийЭлемент();
				Иначе
					ФлагСтандартнойОбработки = 0;
					Возврат;
				КонецЕсли;	
			КонецЕсли;
			
			Договор.ИспользоватьВладельца(Дебитор);

		КонецЕсли;
	
	КонецЕсли;

КонецПроцедуры // ПриНачалеВыбораЗначения()

//******************************************************************************
// Предопределенная процедура
//
Процедура ОбработкаВыбораЗначения(Выбор, ИдентЭлементаДиалога, ФлагСтандартнойОбработки)

	Если ИдентЭлементаДиалога = "Дебитор" Тогда

		Если (ПустоеЗначение(Дебитор) = 1) или (Выбор = Дебитор) Тогда
			Возврат;
		КонецЕсли;	
			
		Если КоличествоСтрок() > 0 Тогда

			Если Вопрос("Строки документа, относящиеся к дебиторской задолженности, будут очищены."+РазделительСтрок+"Продолжить?", "Да+Нет") = "Нет" Тогда
				ФлагСтандартнойОбработки = 0;
				Возврат;
			КонецЕсли;

			ВыбратьСтроки();
			Пока ПолучитьСтроку() = 1 Цикл
				Если СокрЛП(ВидЗадолженности) = "Дебиторская" Тогда
					Счет        = 0;
					Договор     = 0;
					ВтдРасчетов = 0;
					СуммаДеб    = 0;
				КонецЕсли;
			КонецЦикла;

		КонецЕсли;

	ИначеЕсли ИдентЭлементаДиалога = "Кредитор" Тогда

		Если (ПустоеЗначение(Кредитор) = 1) или (Выбор = Кредитор) Тогда
			Возврат;
		КонецЕсли;	
		
		Если КоличествоСтрок() > 0 Тогда

			Если Вопрос("Строки документа, относящиеся к кредиторской задолженности, будут очищены."+РазделительСтрок+"Продолжить?", "Да+Нет") = "Нет" Тогда
				ФлагСтандартнойОбработки = 0;
				Возврат;
			КонецЕсли;

			ВыбратьСтроки();
			Пока ПолучитьСтроку() = 1 Цикл
				Если СокрЛП(ВидЗадолженности) = "Кредиторская" Тогда
					Счет        = 0;
					Договор     = 0;
					ВидРасчетов = 0;
					СуммаКред   = 0;
				КонецЕсли;
			КонецЦикла;

		КонецЕсли;

	ИначеЕсли ИдентЭлементаДиалога = "Договор" Тогда

		Если ВидКорректировки = 0 Тогда
			Если СокрЛП(ВидЗадолженности) = "Кредиторская" Тогда
	            Если Выбор.Владелец <> Кредитор Тогда
	                СтатусВозврата(0);
					Возврат;
	            КонецЕсли;
	
			ИначеЕсли СокрЛП(ВидЗадолженности) = "Дебиторская" Тогда
				Если Выбор.Владелец <> Дебитор Тогда
	                СтатусВозврата(0);
					Возврат;
	            КонецЕсли;
	
			Иначе
				СтатусВозврата(0);
			КонецЕсли;
		КонецЕсли;	
	
	ИначеЕсли ИдентЭлементаДиалога = "СчетСписания" Тогда
		
		Если (ВидКорректировки = 1) или (ВидКорректировки = 2) Тогда
			Если (Выбор = СчетПоКоду("91.1")) или (Выбор = СчетПоКоду("91.2")) Тогда
				Предупреждение("При переносе задолженности нельзя указывать счет "+Выбор+"!");
			    СтатусВозврата(0);
				Возврат;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры // ОбработкаВыбораЗначения

//*****************************************************************************
// Предопределенная процедура
//
Процедура ПриВыбореЗакладки(НомерЗакладки, ЗначениеЗакладки)
	
	Форма.ИспользоватьСлой("Основной, " + ЗначениеЗакладки, 2);
	
КонецПроцедуры //ПриВыбореЗакладки()

//*****************************************************************************
// Предопределенная процедура
//
Процедура ПриЗаписи()

	Если глМожноЗаписатьДокумент(Контекст) = 0 Тогда
		СтатусВозврата(0);
		Возврат;     
		
	ИначеЕсли глКонтрольДатыДокумента(Контекст, НачальнаяДатаДокумента) = 1 Тогда
		СтатусВозврата(0);
		Возврат;
	КонецЕсли;

	Если ВидКорректировки = 0 Тогда //Взаимозачет
		Операция.Содержание = "Взаимозачет";
		
	ИначеЕсли ВидКорректировки = 1 Тогда //Перенос дебиторской задолж.
		Операция.Содержание = "Перенос дебиторской задолж.";
		
	ИначеЕсли ВидКорректировки = 2 Тогда //Перенос кредиторской задолж.
		Операция.Содержание = "Перенос кредиторской задолж.";
		
	ИначеЕсли ВидКорректировки = 3 Тогда //Списание дебиторской задолж.
		Операция.Содержание = "Списание дебиторской задолж.";
		
	ИначеЕсли ВидКорректировки = 4 Тогда //Списание кредиторской задолж.
		Операция.Содержание = "Списание кредиторской задолж.";
		
	Иначе
		Операция.Содержание = "";
	КонецЕсли;
		
	Если Итог("СуммаДеб") = Итог("СуммаКред") Тогда
		Операция.СуммаОперации = Итог("СуммаДеб");
	Иначе
		Операция.СуммаОперации = 0;
	КонецЕсли;

КонецПроцедуры // ПриЗаписи()

//******************************************************************************
// Предопределенная процедура
//
Процедура ПриЗакрытии()
	
	глОткрытьЖурнал(Контекст, Новый);	
	
КонецПроцедуры // ПриЗакрытии()
//******************************************************************************
// 
Новый = 0;

СписокВидовКорректировки.ДобавитьЗначение(0, "Взаимозачет");
СписокВидовКорректировки.ДобавитьЗначение(1, "Перенос дебиторской задолж.");
СписокВидовКорректировки.ДобавитьЗначение(2, "Перенос кредиторской задолж.");
СписокВидовКорректировки.ДобавитьЗначение(3, "Списание дебиторской задолж.");
СписокВидовКорректировки.ДобавитьЗначение(4, "Списание кредиторской задолж.");
	
ТаблицаПечФорм		= СоздатьОбъект("ТаблицаЗначений");
ТаблицаПечФорм.НоваяКолонка("Название","Строка",,,,30);
ТаблицаПечФорм.НоваяКолонка("Файл","Строка",,,"Файл",10);
ТаблицаПечФорм.НоваяКолонка("Кнопка","Строка",,,,10); 
ТаблицаПечФорм.НоваяКолонка("ФайлОписания","Строка");
	
// добавим информацию о встроенной форме
ТаблицаПечФорм.НоваяСтрока();
ТаблицаПечФорм.Название     = "Акт взаимозачета";
ТаблицаПечФорм.Кнопка       = "Печать";

СписокДействий = СоздатьОбъект("СписокЗначений");
СписокДействий.ДобавитьЗначение("Отчет о движениях документа");
СписокДействий.ДобавитьЗначение("Структура подчиненности");
СписокДействий.ДобавитьЗначение("Ввести на основании"); 
СписокДействий.ДобавитьЗначение("Перейти  в журнал");