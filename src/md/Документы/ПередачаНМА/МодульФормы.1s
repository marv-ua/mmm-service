////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ
//

Перем НачальнаяДатаДокумента;
Перем Новый;
Перем СписокДействий;


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ МОДУЛЯ
//

//******************************************************************************
// ИнформацияОДоговоре()
//
// Возвращаемое значение:
//  Строка - Наименование валюты договора и валюты оплаты.
//
// Вызывается из формул элементов диалога:
//  Текст "ИнформацияОДоговоре".
//
// Описание:
//  Формирует строку, содержащую наименование валюты договора и валюты оплаты.
//
Функция ИнформацияОДоговоре() 
	
	Стр = "";
	Если Договор.Выбран() = 1 Тогда
		Если Договор.ВалютаДоговора.Выбран() = 1 Тогда
		    Стр = "Валюта договора: " + Договор.ВалютаДоговора;
		КонецЕсли;	    
	КонецЕсли;
	Возврат Стр;
	
КонецФункции // ИнформацияОДоговоре()

//******************************************************************************
// УправлениеКурсом(ИзменитьКурс)
//
// Параметры:
//  ИзменитьКурс - Число. 1 - установить новый курс валюты, 0 - не изменять.
//
// Описание:
//  При выбранной иностранной валюте делает видимым поле "Курс" и записывает
// в него значение из справочника.
//
Процедура УправлениеКурсом(ИзменитьКурс=0)
	
	ВидимостьКурса = Договор.ВалютаДоговора.Выбран();
	Форма.ПодписьКурса.Видимость(ВидимостьКурса);
	Форма.Курс.Видимость(ВидимостьКурса);
	
	Если ИзменитьКурс = 1 Тогда
		Если ВидимостьКурса = 1 Тогда
		    Курс = Договор.ВалютаДоговора.Курс.Получить(ДатаДок);
			
		Иначе
			Курс = 0;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // УправлениеКурсом()

//*****************************************************************************
// ПриВыбореДоговора()
//
// Вызывается из формул элементов диалога:
//  Поле ввода "Договор"
// 
// Описание:
//  Проверяет соответствие договора выбранному контрагенту.
//
Процедура ПриВыбореДоговора()

	глПриВыбореДоговора(Контрагент, Договор);
	УправлениеКурсом(1); // при изменении договора могла измениться валюта
	
КонецПроцедуры // ПриВыбореДоговора()

//*****************************************************************************
// ПриВыбореКонтрагента()
//
// Вызывается из формул элементов диалога:
//  Поле ввода "Контрагент".
//
// Описание:
//  Проверяет соответствие договора выбранному контрагенту.
//
Процедура ПриВыбореКонтрагента()
	
	глПриВыбореКонтрагента(Контрагент, Договор);
	УправлениеКурсом(1);
	
КонецПроцедуры // ПриВыбореКонтрагента()

//_____________________________________________________________________________
Процедура ПриВыбореВариантаЗачетаАванса()
	ЗачитыватьАванс = ВариантЗачетаАванса.ПолучитьЗначение(ВариантЗачетаАванса.ТекущаяСтрока());
КонецПроцедуры //ПриВыбореВариантаЗачетаАванса

//******************************************************************************
// РассчитатьНалоги()
//
// Описание:
//  Пересчитывает значение стоимости выбытия и налогов.
//
Процедура РассчитатьНалоги()
	
	НДС = глПоказательДокумента(Контекст, "НДС");
	НП = глПоказательДокумента(Контекст, "НП");
	Стоимость = глПоказательДокумента(Контекст, "СуммаСНалогами");
	УчитыватьНП = глПризнакУчетаНалога(Контекст, "НП");
	УчитыватьНДС = глПризнакУчетаНалога(Контекст, "НДС");
	Форма.НДС.Доступность(УчитыватьНДС);
	Форма.НП.Доступность(УчитыватьНП);
	Форма.ПодписьСуммыНДС.Доступность(УчитыватьНДС);
	Форма.ПодписьСуммыНП.Доступность(УчитыватьНП);
	
КонецПроцедуры // РассчитатьНалоги()

//*****************************************************************************
// ПриВыбореВариантаРасчетаНалогов()
//
// Вызывается из формул элементов диалога:
//  Поле ввода "ВариантРасчетаНалогов".
//
// Описание:
//  Пересчитывает суммы в документе при смене варианта расчета налогов.
//
Процедура ПриВыбореВариантаРасчетаНалогов()
	
	РассчитатьНалоги();
	
КонецПроцедуры // ПриВыбореВариантаРасчетаНалогов()

//*****************************************************************************
// Пересчет(ИмяРеквизита)
//
// Параметры:
//  ИмяРеквизита - Строка. Идентификатор колонки из формулы которой вызывается
//                 процедура.
//
// Вызывается из формул элементов диалога:
//  Колонка "Цена",
//  Колонка "НДС",
//  Колонка "НП".
//
// Описание:
//  Пересчитывает значение стоимости выбытия и налогов.
//
Процедура Пересчет(ИмяРеквизита="")
	
	Если ИмяРеквизита = "" Тогда // вызов из формулы колонки табличной части
	    ИмяРеквизита = Форма.АктивныйЭлемент();
	КонецЕсли;
	
	Если (Форма.АктивныйЭлемент() = "Цена") Тогда
		РассчитатьНалоги();
		
	ИначеЕсли (Форма.АктивныйЭлемент() = "НДС") или (Форма.АктивныйЭлемент() = "НП") Тогда
		Стоимость = глПоказательДокумента(Контекст, "СуммаСНалогами");
	КонецЕсли;
	
КонецПроцедуры // Пересчет()

//_____________________________________________________________________________
Процедура ВводНового(Копирование) //предопределенная
	глЗаполнитьШапку(Контекст, Копирование);
	Новый = 1;
	ВерсияОбъекта = Константа.НомерРелиза;
	Если Копирование = 1 Тогда
	    Возврат;
	КонецЕсли;

	СтавкаНДС = глЗначениеПоУмолчанию("ОсновнаяСтавкаНДС");
	СтавкаНП = глБезНалога("НП");
	ЗачитыватьАванс = 0;
	
	ВРН = Константа.ОсновнойВариантРасчетаНалоговОтгрузки;
	Если (ВРН.СтавкаНП.Выбран() = 1) и
		 (ВРН.СтавкаНДС.Выбран() = 1) Тогда
		ВариантРасчетаНалогов = ВРН;

	Иначе // попробуем найти подходящий из существующих вариантов расчета налогов
		СтНДС = глЗначениеПоУмолчанию("ОсновнаяСтавкаНДС").Ставка;
		СтНП  = глЗначениеПоУмолчанию("ОсновнаяСтавкаНП").Ставка;
		
		СпрВариант = СоздатьОбъект("Справочник.ВариантыРасчетаНалогов");
		СпрВариант.ВыбратьЭлементы();
		Пока СпрВариант.ПолучитьЭлемент() = 1 Цикл
			
			Если ((ВРН.СтавкаНДС.Выбран() = 1)
			    и (СпрВариант.СтавкаНДС = ВРН.СтавкаНДС)
			    и (СпрВариант.СуммаВключаетНДС = ВРН.СуммаВключаетНДС))
				
			 или ((ВРН.СтавкаНДС.Выбран() = 0)
				и (СпрВариант.СтавкаНДС.Ставка = СтНДС)
			    и (СпрВариант.СуммаВключаетНДС = ВРН.СуммаВключаетНДС)) Тогда
					
				Если ((ВРН.СтавкаНП.Выбран() = 1)
				    и (СпрВариант.СтавкаНП = ВРН.СтавкаНП)
				    и (СпрВариант.СуммаВключаетНП = ВРН.СуммаВключаетНП))
					
				 или ((ВРН.СтавкаНП.Выбран() = 0)
					и (СпрВариант.СтавкаНП.Ставка  = СтНП)
				    и (СпрВариант.СуммаВключаетНП = ВРН.СуммаВключаетНП)) Тогда
		
					ВариантРасчетаНалогов = СпрВариант.ТекущийЭлемент();
					Прервать;
				КонецЕсли;
			КонецЕсли;
			
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры //ВводНового
//_____________________________________________________________________________
Процедура ПриОткрытии() //предопределенная
	ПриЗаписиПерепроводить(1);
	глПроверкаРазрешенияРедактирования(Контекст);
	Если Форма.ТолькоПросмотр() = 1 Тогда
		Форма.КнопкаЗаписать.Доступность(0);
		Форма.КнопкаОК.Доступность(0);
	КонецЕсли;
	
	УчитыватьНП = глПризнакУчетаНалога(Контекст, "НП");
	УчитыватьНДС = глПризнакУчетаНалога(Контекст, "НДС");
	Форма.НДС.Доступность(УчитыватьНДС);
	Форма.НП.Доступность(УчитыватьНП);
	Форма.ПодписьСуммыНДС.Доступность(УчитыватьНДС);
	Форма.ПодписьСуммыНП.Доступность(УчитыватьНП);

	ВариантЗачетаАванса.ДобавитьЗначение(1, "не зачитывать");
	ВариантЗачетаАванса.ДобавитьЗначение(2, "только по договору");
	ВариантЗачетаАванса.ДобавитьЗначение(0, "без указания договора");
	ВариантЗачетаАванса.ТекущаяСтрока(ВариантЗачетаАванса.НайтиЗначение(ЗачитыватьАванс));
	НачальнаяДатаДокумента = ДатаДок;
	УправлениеКурсом();
КонецПроцедуры //ПриОткрытии

//*****************************************************************************
// Предопределенная процедура
//
Процедура ПриНачалеВыбораЗначения(ЭлементДиалога, Флаг)
	
	Если ЭлементДиалога = "СтатьяПрочихДоходовИРасходов" Тогда
	    ОткрытьФорму("Справочник.ПрочиеДоходыИРасходы", Перечисление.ВидыПрочихДоходовИРасходов.ВыбытиеНМА);
		Флаг = 0;
	
	ИначеЕсли ЭлементДиалога = "ВариантРасчетаНалогов" Тогда
		Флаг = 0;
		СписокВариантов = СоздатьОбъект("СписокЗначений");
		СпрВариант = СоздатьОбъект("Справочник.ВариантыРасчетаНалогов");
		СпрВариант.ВыбратьЭлементы();
		Пока СпрВариант.ПолучитьЭлемент() = 1 Цикл
			Если (СпрВариант.СтавкаНП.Выбран() = 1) и
				 (СпрВариант.СтавкаНДС.Выбран() = 1) Тогда
				СписокВариантов.ДобавитьЗначение(СпрВариант.ТекущийЭлемент());
			КонецЕсли;
		КонецЦикла;
		Значение = ВариантРасчетаНалогов;
		Если СписокВариантов.ВыбратьЗначение(Значение, , , , 2) = 0 Тогда
			Возврат;
		КонецЕсли;
		ВариантРасчетаНалогов = Значение;
		ПриВыбореВариантаРасчетаНалогов();
		
	ИначеЕсли ЭлементДиалога = "НМА" Тогда
	    ОткрытьФорму("Справочник.НематериальныеАктивы.ДляВыбора", "НМА");
		Флаг = 0;
	КонецЕсли;
	
КонецПроцедуры // ПриНачалеВыбораЗначения()

//_____________________________________________________________________________
Процедура ПриЗаписи() //предопределенная
	Если глМожноЗаписатьДокумент(Контекст) = 0 Тогда
		СтатусВозврата(0);
		Возврат;
		
	ИначеЕсли глКонтрольДатыДокумента(Контекст, НачальнаяДатаДокумента) = 1 Тогда
		СтатусВозврата(0);
		Возврат;
	КонецЕсли;

	Если НМА.Выбран() = 0 Тогда
		Если Вопрос("Не выбран выбывающий нематериальный актив.
					|Вернуться к редактированию документа?","Да+Нет") = "Да" Тогда
			Активизировать("НМА");
			СтатусВозврата(0);
			Возврат;
		КонецЕсли;
	КонецЕсли;

	ЦеныВДоговоре = 1; // в рублях
	Если Договор.Выбран() = 1 Тогда
	    Если ПустоеЗначение(Договор.ВалютаДоговора) = 0 Тогда
			ЦеныВДоговоре = 2; // в валюте
		КонецЕсли;
	КонецЕсли;
	
	Если ЦеныВДоговоре = 2 Тогда
		Валюта = Договор.ВалютаДоговора;
		Кратность = Валюта.Кратность.Получить(ДатаДок);
		Кратность = ?(Кратность=0, 1, Кратность);
		Если Договор.ВестиУчетРасчетовУЕ = 1 Тогда
			Кратность = Кратность * 100 / (100 + Договор.ПроцентКорректировкиКурсаУЕ);
		КонецЕсли;
		Операция.СуммаОперации = Окр(Стоимость*Курс/Кратность, 2, 1);
	Иначе
		Операция.СуммаОперации = Стоимость;
	КонецЕсли;
	Операция.Содержание = "Передача НМА: "+НМА;
	
КонецПроцедуры // ПриЗаписи()

//******************************************************************************
// Предопределенная процедура
//
Процедура ПриЗакрытии()
	
	глОткрытьЖурнал(Контекст, Новый);	
	
КонецПроцедуры // ПриЗакрытии()

//*****************************************************************************
Новый = 0;

СписокДействий = СоздатьОбъект("СписокЗначений");
СписокДействий.ДобавитьЗначение("Отчет о движениях документа");
СписокДействий.ДобавитьЗначение("Структура подчиненности");
СписокДействий.ДобавитьЗначение("Ввести на основании");
СписокДействий.ДобавитьЗначение("Перейти  в журнал");