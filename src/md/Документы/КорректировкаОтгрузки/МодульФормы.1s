////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ
//

Перем НачальнаяДатаДокумента;
Перем Новый;
Перем СписокДействий;


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ МОДУЛЯ
//

//******************************************************************************
// ИнформацияОДоговоре()
//
// Возвращаемое значение:
//  Строка - Наименование валюты договора и валюты оплаты.
//
// Вызывается из формул элементов диалога:
//  Текст "ИнформацияОДоговоре".
//
// Описание:
//  Формирует строку, содержащую наименование валюты договора и валюты оплаты.
//
Функция ИнформацияОДоговоре() 
	
	Стр = "";
	Если Договор.Выбран() = 1 Тогда
		Если Договор.ВалютаДоговора.Выбран() = 1 Тогда
		    Стр = "Валюта договора: " + Договор.ВалютаДоговора;
		КонецЕсли;	    
	КонецЕсли;
	Возврат Стр;
	
КонецФункции // ИнформацияОДоговоре()

//******************************************************************************
// УправлениеКурсом(ИзменитьКурс)
//
// Параметры:
//  ИзменитьКурс - Число. 1 - установить новый курс валюты, 0 - не изменять.
//
// Описание:
//  При выбранной иностранной валюте делает видимым поле "Курс" и записывает
// в него значение из справочника.
//
Процедура УправлениеКурсом(ИзменитьКурс=0)
	
	ВидимостьКурса = Договор.ВалютаДоговора.Выбран();
	Форма.ПодписьКурса.Видимость(ВидимостьКурса);
	Форма.Курс.Видимость(ВидимостьКурса);
	
	Если ИзменитьКурс = 1 Тогда
		Если ВидимостьКурса = 1 Тогда
		    Курс = Договор.ВалютаДоговора.Курс.Получить(ДатаДок);
			
		Иначе
			Курс = 0;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // УправлениеКурсом()

//*****************************************************************************
// ПриВыбореДоговора()
//
// Вызывается из формул элементов диалога:
//  Поле ввода "Договор"
// 
// Описание:
//  Проверяет соответствие договора выбранному контрагенту.
//
Процедура ПриВыбореДоговора()

	глПриВыбореДоговора(Контрагент, Договор);
	УправлениеКурсом(1); // при изменении договора могла измениться валюта
	
КонецПроцедуры // ПриВыбореДоговора()

//*****************************************************************************
// ПриВыбореВидаРеализации(Очистить)
//
// Параметры:
//  Очистить - Число. 1 - очистить табличную часть, 0 - не очищать.
//
// Вызывается из формул элементов диалога:
//  Список "Вид реализации",
//
// Описание:
//  Очищает табличную часть документа и управляет видимостью колонок.
//
Процедура ПриВыбореВидаРеализации(Очистить=0)
	
	Если (Очистить = 1) и (КоличествоСтрок() > 0) Тогда
		НачКоличествоСтрок = КоличествоСтрок();
		глОчиститьТабличнуюЧасть(Контекст);
		Если (НачКоличествоСтрок = 0) или (НачКоличествоСтрок = КоличествоСтрок()) Тогда
			СписокВидовРеализации.ТекущаяСтрока(ВидРеализации);
		    Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Если ВидРеализации = СписокВидовРеализации.ТекущаяСтрока() Тогда
	Иначе
		ВидРеализации = СписокВидовРеализации.ТекущаяСтрока();
	КонецЕсли;
	
	Флаг = 0;
	Если ВидРеализации = 1 Тогда
		Если ДокументОтгрузки.Выбран() = 1 Тогда
			Если (ДокументОтгрузки.Вид() = "РасходнаяНакладная") или
				 (ДокументОтгрузки.Вид() = "РеализацияОтгруженнойПродукции") Тогда
				ДокументОтгрузки.ВыбратьСтроки();
				Пока ДокументОтгрузки.ПолучитьСтроку() = 1 Цикл
				    Если ДокументОтгрузки.Товар.ТипТовара = 
							Перечисление.ТипыТоваров.НаКомиссии Тогда
						Флаг = 1;
						Прервать;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		Иначе
			Флаг = 1;
		КонецЕсли;
	КонецЕсли;
	Форма.Комитент.Видимость(Флаг);
	Форма.ДоговорКомиссии.Видимость(Флаг);
	
КонецПроцедуры // ПриВыбореВидаРеализации()

//*****************************************************************************
// ПриВыбореОснования()
//
// Вызывается из формул элементов диалога:
//  Поле ввода "ДокументОтгрузки".
//
// Описание:
//  При выборе документа устанавливает доступность реквизита "ВидРеализации".
//
Процедура ПриВыбореОснования()
	
	ФлагДоступности = ?(ДокументОтгрузки.Выбран() = 1, 0, 1);
	Форма.СписокВидовРеализации.Доступность(ФлагДоступности);
	
	ПриВыбореВидаРеализации();
	
КонецПроцедуры // ПриВыбореОснования()

//*****************************************************************************
// ПриВыбореКонтрагента()
//
// Вызывается из формул элементов диалога:
//  Поле ввода "Контрагент".
//
// Описание:
//  Проверяет соответствие договора выбранному контрагенту.
//
Процедура ПриВыбореКонтрагента()
	
	глПриВыбореКонтрагента(Контрагент, Договор, ДокументОтгрузки);
	ПриВыбореОснования();
	УправлениеКурсом(1);
	
КонецПроцедуры // ПриВыбореКонтрагента()

//*****************************************************************************
// Пересчет()
//
// Описание:
//  При изменении какого-либо реквизита табличной части рассчитывает значения
// остальных реквизитов табличной части.
//
Процедура Пересчет()
	
	Если (Форма.ТекущаяКолонка() = "СуммаОтгрузки") или
		 (Форма.ТекущаяКолонка() = "СтавкаНП") Тогда
		НП = СуммаОтгрузки*СтавкаНП.Ставка/100;
		Всего = СуммаОтгрузки + НП;
	
	ИначеЕсли (Форма.ТекущаяКолонка() = "НП") Тогда
		Всего = СуммаОтгрузки + НП;
		
	ИначеЕсли (Форма.ТекущаяКолонка() = "Всего") Тогда
		СуммаОтгрузки = 100*Всего/(100+СтавкаНП.Ставка);	
		НП = Всего - СуммаОтгрузки;
	КонецЕсли;
	
КонецПроцедуры // Пересчет()

//*****************************************************************************
// ИтоговаяСтрока()
//
// Вызывается из формул элементов диалога:
//  Текст ИтоговаяСтрока.
//
// Описание:
//  Формирует текстовую строку, содержащую итоговые суммы колонок табличной 
// части документа.
//
Функция ИтоговаяСтрока()
	
	ИтСтр = "Сумма задолженности: " + СокрЛ(Формат(Итог("Всего"),"Ч20.2-,"));
	Если Итог("НП") > 0 Тогда
		ИтСтр = ИтСтр + ", в т.ч. НП: " + СокрЛ(Формат(Итог("НП"),"Ч20.2-,"));
	КонецЕсли;
    Возврат ИтСтр;
	
КонецФункции // ИтоговаяСтрока()

//*****************************************************************************
// Заполнить(ДокОсн)
//
// Параметры:
//  ДокОсн - Документ, на основании которого будут заполнены 
//           реквизиты корректировки.
//
// Описание:
//  Заполняет реквизиты документа значениями на основании документа отгрузки.
// По документам вида "ОплатаЭтапаРабот" и "ЗавершениеРабот" корректировка
// отгрузки не водится, так как на момент ввода данных документов оплата уже
// произведена. Налог с продаж начисляется сразу. 
//
Функция Заполнить(ДокОсн)
	
	// Проверим корректность начисления НП для произведенной отгрузки.
	Если ДокОсн.Вид() = "РасходнаяНакладная" Тогда
		Если (ДокОсн.ВидОтгрузки = 2) или (ДокОсн.ВидОтгрузки = 12) Тогда
			Предупреждение("Выбранная отгрузка не является продажей
						   |Начисление налога с продаж не обоснованно");
			Возврат 0;
		КонецЕсли;
		
	ИначеЕсли глПризнакУчетаНалога(ДокОсн, "НП") = 1 Тогда
		Предупреждение("В выбранном документе уже выполнено 
					   |начисление налога с продаж");
		Возврат 0;
	КонецЕсли;
	
	// Заполним реквизиты шапки.
	УдалитьСтроки(); // при продаже ОС и НМА табличная часть заполняется сразу.
	
	Если (ДокОсн.Вид() = "РасходнаяНакладная") или
		 (ДокОсн.Вид() = "РеализацияОтгруженнойПродукции") или
		 (ДокОсн.Вид() = "ВыполнениеЭтапаРабот") Тогда	
		ВидРеализации = 1;
         
	ИначеЕсли (ДокОсн.Вид() = "ОказаниеУслуг") Тогда
		Если ДокОсн.ТипУслуги = 3 Тогда
		    ВидРеализации = 2;
		Иначе
			ВидРеализации = 1;
		КонецЕсли;
		
	ИначеЕсли (ДокОсн.Вид() = "ОтпускМатериаловНаСторону") Тогда
		ВидРеализации = 2;
		
	ИначеЕсли (ДокОсн.Вид() = "ПередачаОС") или
		 	  (ДокОсн.Вид() = "ПередачаНМА") Тогда
		ВидРеализации = 2;
		Кол = ?(ДокОсн.КоличествоСтрок() = 0, 1, ДокОсн.КоличествоСтрок());
		НоваяСтрока();
		НазначитьВид(Субконто1, "ПрочиеДоходыИРасходы");
		Субконто1 = ДокОсн.СтатьяПрочихДоходовИРасходов;
		СтавкаНДС = глСтавкаНалога(ДокОсн, "НДС");
		СуммаОтгрузки = ДокОсн.Стоимость*Кол;
	    СтавкаНП = глЗначениеПоУмолчанию("ОсновнаяСтавкаНП");
		НП = СуммаОтгрузки*СтавкаНП.Ставка/100;
		Всего = СуммаОтгрузки + НП;
	КонецЕсли;
	СписокВидовРеализации.ТекущаяСтрока(ВидРеализации);

	ТаблицаВвода = СоздатьОбъект("ТаблицаЗначений");
	ТаблицаВвода.НоваяКолонка("Субконто1");
	ТаблицаВвода.НоваяКолонка("СтавкаНДС");
	ТаблицаВвода.НоваяКолонка("СтавкаНП");
	ТаблицаВвода.НоваяКолонка("СуммаОтгрузки");
	ТаблицаВвода.НоваяКолонка("НП");
	ТаблицаВвода.НоваяКолонка("Комитент");
	ТаблицаВвода.НоваяКолонка("ДоговорКомиссии");

	Если (ДокОсн.Вид() = "РасходнаяНакладная") или
		 (ДокОсн.Вид() = "РеализацияОтгруженнойПродукции") Тогда
		Товар = "Товар";
	ИначеЕсли (ДокОсн.Вид() = "ОказаниеУслуг") Тогда
		Товар = "Услуга";
	ИначеЕсли (ДокОсн.Вид() = "ВыполнениеЭтапаРабот") Тогда
		Товар = "Работа";
	ИначеЕсли (ДокОсн.Вид() = "ОтпускМатериаловНаСторону") Тогда
		Товар = "Материал";
	Иначе
		Товар = "";
	КонецЕсли;
	
	Если ПустоеЗначение(Товар) = 0 Тогда
		ДокОсн.ВыбратьСтроки();
		Пока ДокОсн.ПолучитьСтроку() = 1 Цикл
			Если ДокОсн.ПолучитьАтрибут(Товар).Выбран() = 1 Тогда
				ТаблицаВвода.НоваяСтрока();
				Если (ДокОсн.Вид() = "ОтпускМатериаловНаСторону") или
					((ДокОсн.Вид() = "ОказаниеУслуг") и (ВидРеализации = 2)) Тогда
					ТаблицаВвода.Субконто1 = ДокОсн.СтатьяПрочихДоходовИРасходов;
				Иначе
					ТаблицаВвода.Субконто1 = ДокОсн.ПолучитьАтрибут(Товар).ВидНоменклатуры;
				КонецЕсли;
				ТаблицаВвода.СтавкаНДС = глСтавкаНалога(ДокОсн, "НДС");
				Если Товар = "Материал" Тогда
				    ТаблицаВвода.СтавкаНП = глЗначениеПоУмолчанию("ОсновнаяСтавкаНП");
				Иначе
			    	ТаблицаВвода.СтавкаНП = ДокОсн.ПолучитьАтрибут(Товар).СтавкаНП.Получить(ДокОсн.ДатаДок);
				КонецЕсли;
				ТаблицаВвода.СуммаОтгрузки = ДокОсн.Всего;
				ТаблицаВвода.НП = ТаблицаВвода.СуммаОтгрузки*ТаблицаВвода.СтавкаНП.Ставка/100;
				
				Если (ДокОсн.Вид() = "РасходнаяНакладная") или
		 			 (ДокОсн.Вид() = "РеализацияОтгруженнойПродукции") Тогда
		 			ТаблицаВвода.Комитент = ДокОсн.Комитент;
		 			ТаблицаВвода.ДоговорКомиссии = ДокОсн.ДоговорКомиссии;
		 		КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если ТаблицаВвода.КоличествоСтрок() > 0 Тогда
	    ТаблицаВвода.Свернуть("Субконто1,СтавкаНДС,СтавкаНП,Комитент,ДоговорКомиссии", "СуммаОтгрузки,НП,Всего");
		ТаблицаВвода.ВыбратьСтроки();
		Пока ТаблицаВвода.ПолучитьСтроку() = 1 Цикл
		    НоваяСтрока();
			НазначитьВид(Субконто1, ТаблицаВвода.Субконто1.Вид());
			Субконто1 = ТаблицаВвода.Субконто1;
			СтавкаНДС = ТаблицаВвода.СтавкаНДС;
			СтавкаНП = ТаблицаВвода.СтавкаНП;
			СуммаОтгрузки = ТаблицаВвода.СуммаОтгрузки;
			НП = ТаблицаВвода.НП;
			Всего = СуммаОтгрузки + НП;
			Комитент = ТаблицаВвода.Комитент;
			ДоговорКомиссии = ТаблицаВвода.ДоговорКомиссии;
		КонецЦикла;
	КонецЕсли;

	ДокументОтгрузки = ДокОсн;
	Контрагент = ДокОсн.Контрагент;
	Договор = ДокОсн.Договор;
	Если Договор.ВалютаДоговора.Выбран() = 1 Тогда
	    Курс = Договор.ВалютаДоговора.Курс.Получить(ДатаДок);
	КонецЕсли;
	УправлениеКурсом(1);
	ЗачитыватьАванс = ДокОсн.ЗачитыватьАванс;
	Возврат 1;
	
КонецФункции // Заполнить()

//*****************************************************************************
// УправлениеДиалогом()
//
// Описание:
//  Управляет видимостью элементов диалога при выборе документа-основания в
// диалоге документа.
//
Процедура УправлениеДиалогом()
	
	Если ВидРеализации = 1 Тогда
	    Форма.Субконто1.Заголовок("Вид номенклатуры");
	Иначе
		Форма.Субконто1.Заголовок("Прочие доходы и расходы");
	КонецЕсли;
	
	ПриВыбореОснования();
	
	ФлагВидимости = ?(ПустоеЗначение(Договор.ВалютаДоговора) = 0, 1, 0);
	Форма.Курс.Видимость(ФлагВидимости);
	Форма.ПодписьКурса.Видимость(ФлагВидимости);
	
	ПриВыбореВидаРеализации();
	УправлениеКурсом();
	
КонецПроцедуры // УправлениеДиалогом()

//*****************************************************************************
// ЗаполнитьНаОсновании(ДокОсн)
//
// Параметры:
//  ДокОсн - Документ. Документ-основание.
//
// Возвращаемое значение:
//  Число  - 1 - реквизиты заполнены, 0 - не заполнены.
//
// Вызывается из формул элементов диалога:
//  Кнопка "КнопкаЗаполнить".
//
// Описание:
//  Устанавливает значения реквизитов документа в зависимости от значений
// реквизитов документа основания.
//
Функция ЗаполнитьНаОсновании(ДокОсн="")
	
	Если ДокОсн = "" Тогда
	    ДокОсн = ДокументОтгрузки;
	КонецЕсли;
	
	Если ПустоеЗначение(ДокОсн) = 1 Тогда
	    Предупреждение("Выберите документ-основание!");
		Возврат 0;
	КонецЕсли;
	
	Если Вопрос("Корректировка отгрузки будет заполнена на основании
				|выбранного документа. Продолжить?", "Да+Нет" ) = "Да" Тогда
		Док = СоздатьОбъект("Документ");
		Док.НайтиДокумент(ДокОсн);
	    Если Заполнить(Док.ТекущийДокумент()) = 1 Тогда
	        УправлениеДиалогом();
			Возврат 1;
		КонецЕсли;
	КонецЕсли;
	
	Возврат 0;
	
КонецФункции // ЗаполнитьНаОсновании()


////////////////////////////////////////////////////////////////////////////////
// ПРЕДОПРЕДЕЛЕННЫЕ ПРОЦЕДУРЫ
//

//*****************************************************************************
// Предопределенная процедура
//
// Описание:
//  Устанавливает значения реквизитов документа при создании нового документа.
//
Процедура ВводНового(Копирование)
	глЗаполнитьШапку(Контекст, Копирование);
	Новый = 1;
	Если Копирование = 1 Тогда
	    Возврат;
	КонецЕсли;
	
	ВидРеализации = 1;
	ЗачитыватьАванс = 0;
	
КонецПроцедуры // ВводНового()

//*****************************************************************************
// Предопределенная процедура
//
// Описание:
//  Устанавливает значения реквизитов документа при создании нового документа
// в режиме ввода на основании другого документа.
//
Процедура ВводНаОсновании(ДокОсн)
	
	Новый = 1;
	Если Заполнить(ДокОсн) = 0 Тогда
		СтатусВозврата(0);
		Возврат;
	КонецЕсли;
	Комментарий = "Введен на основании: "+ГлПредставлениеДокумента(ДокОсн);
	
КонецПроцедуры // ВводНаОсновании()

//*****************************************************************************
// Предопределенна процедура
//
// Описание:
//  Устанавливает видимость элементов диалога при открытии формы.
//
Процедура ПриОткрытии()
	
	ПриЗаписиПерепроводить(1);
	глПроверкаРазрешенияРедактирования(Контекст);
	Если Форма.ТолькоПросмотр() = 1 Тогда
		Форма.КнопкаОК.Доступность(0);
		Форма.КнопкаЗаписать.Доступность(0);
		Форма.кнОчиститьОснование.Доступность(0);
	КонецЕсли;
	Форма.Субконто1.НеИзменятьВид(1);
	НачальнаяДатаДокумента = ДатаДок;
	
	СписокВидовРеализации.ДобавитьЗначение(1, "Продажа (счет 90)");
	СписокВидовРеализации.ДобавитьЗначение(2, "Прочие доходы (счет 91)");
	СписокВидовРеализации.ТекущаяСтрока(ВидРеализации);
	УправлениеДиалогом();
	
КонецПроцедуры // ПриОткрытии()

//*****************************************************************************
// Предопределенна процедура
//
// Описание:
//  "Перехватывает" стандартный системный выбор значений для некоторых
// элементов диалога.
//
Процедура ПриНачалеВыбораЗначения(ЭлементДиалога, Флаг)
	
	// При выборе документа-основания предлагается указать вид документа основания,
	// затем открывается форма журнала для выбора документов, выбранного вида.
	Если ЭлементДиалога = "ДокументОтгрузки" Тогда
		Меню = СоздатьОбъект("СписокЗначений");
		Для А = 1 По Метаданные.Документ() Цикл
			Для Б = 1 По Метаданные.Документ(А).ВводимыеНаОснованииДокументы.Количество() Цикл
				Если Метаданные.Документ(А).ВводимыеНаОснованииДокументы.Получить(Б).Идентификатор = "КорректировкаОтгрузки" Тогда
					Меню.ДобавитьЗначение(Метаданные.Документ(А).Идентификатор, Строка(Метаданные.Документ(А)));
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
	    ВидДок = ДокументОтгрузки.Вид();
		Флаг = 0;
		Если Меню.ВыбратьЗначение(ВидДок,,,,2) = 1 Тогда
			Конт = ПолучитьПустоеЗначение("");
			ОткрытьФорму("Журнал.Общий", Конт);
			Конт.УстановитьОтбор(ВидДок);
			Конт.АктивизироватьОбъект(ДокументОтгрузки);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ПриНачалеВыбораЗначения()

//*****************************************************************************
// Предопределенная процедура
//
Процедура ОбработкаВыбораЗначения(ВыбЗначение, ЭлементДиалога, Флаг)
	
	Если ЭлементДиалога = "ДокументОтгрузки" Тогда
		Если Вопрос("Корректировка отгрузки будет заполнена на основании
					|выбранного документа. Продолжить?", "Да+Нет" ) = "Да" Тогда
		    Если Заполнить(ВыбЗначение) = 1 Тогда
		        УправлениеДиалогом();
			Иначе
				Флаг = 0;
			КонецЕсли;
		Иначе
			Флаг = 0;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры // ОбработкаВыбораЗначения()

//*****************************************************************************
// Предопределенная процедура
//
Процедура ПриРедактированииНовойСтроки()

	Если ВидРеализации = 1 Тогда
		НазначитьВид(Субконто1, "ВидыНоменклатуры");
	Иначе
		НазначитьВид(Субконто1, "ПрочиеДоходыИРасходы");
	КонецЕсли;
	СтавкаНДС = глЗначениеПоУмолчанию("ОсновнаяСтавкаНДС");
	СтавкаНП = глЗначениеПоУмолчанию("ОсновнаяСтавкаНП");

КонецПроцедуры // ПриРедактированииНовойСтроки()
	
//*****************************************************************************
// Предопределенная процедура
//
Процедура ПриЗаписи()
	
	Если глМожноЗаписатьДокумент(Контекст) = 0 Тогда
		СтатусВозврата(0);
		Возврат;
	ИначеЕсли глКонтрольДатыДокумента(Контекст, НачальнаяДатаДокумента) = 1 Тогда
		СтатусВозврата(0);
		Возврат;
	КонецЕсли;

	ЦеныВДоговоре = 1; //в рублях
	Если Договор.Выбран() = 1 Тогда
	    Если ПустоеЗначение(Договор.ВалютаДоговора) = 0 Тогда
			ЦеныВДоговоре = 2; //в валюте
		КонецЕсли;
	КонецЕсли;
	
	Если ЦеныВДоговоре = 2 Тогда
		Валюта = Договор.ВалютаДоговора;
		Кратность = Валюта.Кратность.Получить(ДатаДок);
		Кратность = ?(Кратность=0, 1, Кратность);
		Операция.СуммаОперации = Окр(Итог("Всего")*Курс/Кратность, 2, 1);
	Иначе
		Операция.СуммаОперации = Итог("Всего");
	КонецЕсли;
	
	Операция.Содержание = "Коррект.отгр.тов.(прод.)";
	
КонецПроцедуры // ПриЗаписи()

//******************************************************************************
// Предопределенная процедура
//
Процедура ПриЗакрытии()
	
	глОткрытьЖурнал(Контекст, Новый);	
	
КонецПроцедуры // ПриЗакрытии()

//******************************************************************************
Новый = 0;

СписокДействий = СоздатьОбъект("СписокЗначений");
СписокДействий.ДобавитьЗначение("Отчет о движениях документа");
СписокДействий.ДобавитьЗначение("Структура подчиненности");
СписокДействий.ДобавитьЗначение("Ввести на основании");
СписокДействий.ДобавитьЗначение("Перейти  в журнал");