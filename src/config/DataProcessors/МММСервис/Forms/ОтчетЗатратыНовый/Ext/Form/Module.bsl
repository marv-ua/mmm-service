#Область СобытияФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если НЕ ЗначениеЗаполнено(Объект.ПериодРегистрации) Тогда
		Объект.ПериодРегистрации = ДобавитьМесяц(ТекущаяДатаСеанса(), -1);
	КонецЕсли;	
	
	Затирать = Ложь;
	
	ПериодРегистрацииПриИзменении();
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	МесяцРегистрацииСтрокойПриОткрытии();
	ПапкаДляСохранения = КаталогДокументов()+"\ObmenZatraty\";
	НеЗатиратьОтправленные = Ложь;
	
КонецПроцедуры
#КонецОбласти

#Область СобытияЭлементовФормы
#Область МесяцРегистрации

&НаКлиенте
Процедура МесяцРегистрацииСтрокойПриОткрытии()
	
	Если НЕ ЗначениеЗаполнено(Объект.ПериодРегистрации) Тогда
		Объект.ПериодРегистрации = НачалоМесяца(НачалоМесяца(ТекущаяДата())-1);
	КонецЕсли;	
	
	Если ЗначениеЗаполнено(Объект.ПериодРегистрации) Тогда 
		ЭтаФорма.МесяцРегистрацииСтрокой = Формат(Объект.ПериодРегистрации,"ДФ=""ММММ гггг""");	
	КонецЕсли;	
	
КонецПроцедуры	

&НаКлиенте
Процедура МесяцРегистрацииСтрокойПриИзменении(Элемент)
	ЗарплатаКадрыКлиент.ВводМесяцаПриИзменении(ЭтаФорма, "Объект.ПериодРегистрации", "МесяцРегистрацииСтрокой");	
	ПериодРегистрацииПриИзменении();
КонецПроцедуры

&НаКлиенте
Процедура МесяцРегистрацииСтрокойНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	Оповещение = Новый ОписаниеОповещения("ПериодРегистрацииНачалоВыбораЗавершение", ЭтотОбъект);
	ЗарплатаКадрыКлиент.ВводМесяцаНачалоВыбора(ЭтаФорма, ЭтаФорма, "Объект.ПериодРегистрации", "МесяцРегистрацииСтрокой", , Оповещение);
КонецПроцедуры

&НаКлиенте
Процедура МесяцРегистрацииСтрокойРегулирование(Элемент, Направление, СтандартнаяОбработка)
	ЗарплатаКадрыКлиент.ВводМесяцаРегулирование(ЭтаФорма, "Объект.ПериодРегистрации", "МесяцРегистрацииСтрокой", Направление,,);	
	Объект.ПериодРегистрации = НачалоМесяца(Объект.ПериодРегистрации);
	ПериодРегистрацииПриИзменении();
КонецПроцедуры

&НаКлиенте
Процедура МесяцРегистрацииСтрокойАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	ЗарплатаКадрыКлиент.ВводМесяцаАвтоПодборТекста(Текст, ДанныеВыбора, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура МесяцРегистрацииСтрокойОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	ЗарплатаКадрыКлиент.ВводМесяцаОкончаниеВводаТекста(Текст, ДанныеВыбора, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура ПериодРегистрацииНачалоВыбораЗавершение(ЗначениеВыбрано, ДополнительныеПараметры) Экспорт
	
	ПериодРегистрацииПриИзменении();
	
КонецПроцедуры

&НаСервере
Процедура ПериодРегистрацииПриИзменении()
	
	Очередь.Параметры.УстановитьЗначениеПараметра("ПериодЗатрат", Объект.ПериодРегистрации);
	
	ЗатратыКлиентСервер.ОрганизацияПриИзменении(ЭтаФорма);	
	//Объект.КредитныеДоговора.Очистить();
	//Объект.Итоги.Очистить();
КонецПроцедуры

#КонецОбласти
#КонецОбласти

/////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ПОЛЯ ТАБЛИЧНОГО ДОКУМЕНТА

&НаКлиенте
Процедура ОтправитьВыделенные(Команда)
		
	ПоказатьВопрос(Новый ОписаниеОповещения("ВопросОтправкиВ7", ЭтотОбъект, Элементы.Очередь.ВыделенныеСтроки),
		"Отправить выделенные строки в 7?",
		РежимДиалогаВопрос.ДаНет,
		,
		КодВозвратаДиалога.Да,
		"Отправить данныые?"
	);	

КонецПроцедуры

&НаКлиенте
Процедура РезультатПриАктивизации(Элемент)
	
	БухгалтерскиеОтчетыКлиент.НачатьРасчетСуммыВыделенныхЯчеек(
	Элементы.Результат,
	ЭтотОбъект,
	"Подключаемый_РезультатПриАктивизацииПодключаемый");
	
КонецПроцедуры

&НаКлиенте
Процедура Сформировать(Команда)
	
	ОчиститьСообщения();

	//////////////////////////////////////////////////////////////
	//
 	СтруктураФоновогоЗадания = ЗапуститьВыполнениеВФоне(УникальныйИдентификатор);
	
	ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);		
	ПараметрыОжидания.ВыводитьОкноОжидания = Истина;
	ПараметрыОжидания.ВыводитьПрогрессВыполнения = Истина;
	// указываем интервал обновления состояния в секундах, если не указать, 
	// то интервал будет увеличиваться при каждой итерации в 1.4 раза.
	ПараметрыОжидания.Интервал = 3;		
	ДлительныеОперацииКлиент.ОжидатьЗавершение(СтруктураФоновогоЗадания,
		Новый ОписаниеОповещения("ФоновоеЗаполненияЗавершено", ЭтотОбъект),
		ПараметрыОжидания
	);	
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////////////////////////////
&НаСервере
Функция ЗапуститьВыполнениеВФоне(ИдентификаторФормы, Многопоточно = Ложь)
	
	ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеИспользовать");
	ПараметрыОтчета = ПодготовитьПараметрыОтчета();
	АдресХранилища = ПоместитьВоВременноеХранилище(Неопределено, Новый УникальныйИдентификатор);
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияФункции(ИдентификаторФормы);
	ПараметрыВыполнения.ЗапуститьВФоне = Истина;
	ПараметрыВыполнения.ЗапуститьВФоне = Ложь;
	ПараметрыВыполнения.ПрерватьВыполнениеЕслиОшибка = Истина;
	
	Если Многопоточно Тогда
		ПараметрыПроцедуры = Новый Массив;
		ПараметрыПроцедуры.Добавить(ПараметрыОтчета);
		ПараметрыПроцедуры.Добавить(АдресХранилища);
		с = Новый Соответствие;
		с.Вставить("Параметры", ПараметрыПроцедуры);
		Возврат ДлительныеОперации.ВыполнитьПроцедуруВНесколькоПотоков("ЗатратыСервер.СформироватьЭтотОтчет",
			ПараметрыВыполнения,
			с
		);
	Иначе	
		Возврат ДлительныеОперации.ВыполнитьПроцедуру(ПараметрыВыполнения, 
			"ЗатратыСервер.СформироватьЭтотОтчет", 
			ПараметрыОтчета, 
			АдресХранилища
		);	
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура ФоновоеЗаполненияЗавершено(Результат, ДополнительныеПараметры) Экспорт

	Если Результат = Неопределено Тогда
		Возврат;
	ИначеЕсли Результат.Статус = "Ошибка" Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Результат.ПодробноеПредставлениеОшибки);
	ИначеЕсли Результат.Статус = "Выполнено" Тогда
		// обрабатываем результат				
		Кодировка = "windows-1251"; // КодировкаТекста.ANSI;
		РезультатВыполнения = ОбработатьДанныеНаСервере(Результат.АдресРезультата);
		ОбновитьОтображениеДанных();
		Рез = ПолучитьИзВременногоХранилища(АдресХранилища);
		
		ИмяОрганизации = ?(Организация.Количество()=1, СокрЛП(Организация[0].Значение), "МММ");
		ТаблДокумент = Рез.ТаблДокумент;
		
		Каталог = ?(ПустаяСтрока(ПутьКФайлам), КаталогДокументов()+"\ОтчетыНМУ\", ПутьКФайлам+"\");
	
		ПолноеИмяФайла = Каталог+Формат(Объект.ПериодРегистрации, "ДФ=гггг_ММ_")+СокрЛП("НМУ_"+ИмяОрганизации)+"_"+Формат(ТекущаяДата(), "ДФ=yy-MM-dd")+".xls";

		Попытка
			ТаблДокумент.Записать(ПолноеИмяФайла, ТипФайлаТабличногоДокумента.XLS97);

			Сообщить("Файл отчета успешно сформирован. Путь к файлу: "+ПолноеИмяФайла);
		Исключение
		КонецПопытки;
		
		Рез.Лог.Показать();
		
КонецЕсли;

КонецПроцедуры

&НаКлиенте
Функция ПроверитьСуществованиеФайла(ЛокПолноеИмяФайла) Экспорт
	
	ВыбФайл = Новый Файл(ЛокПолноеИмяФайла);		
	Возврат ВыбФайл.Существует();
	
КонецФункции 

&НаКлиенте
Процедура ПрогрессОбратныйВызов(ПомещаемыйФайл, Помещено, ОтказОтПомещенияФайла, ДополнительныеПараметры) Экспорт
	Текст = НСтр("uk = 'Розмір файлу %1 байт'; ru = 'Размер файла %1 байт""'");
	Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Текст, ПомещаемыйФайл.Размер());
    Состояние("Файл " + ПомещаемыйФайл.Имя, Помещено, Текст, БиблиотекаКартинок.Документ);
КонецПроцедуры
		

&НаСервере
Функция ОбработатьДанныеНаСервере(АдресРезультата)

	ПериодРегистрацииПриИзменении();
	
	ЗагрузитьПодготовленныеДанные();
	РезультатВыполнения = Новый Структура("ЗаданиеВыполнено,АдресХранилища", Истина, АдресРезультата);
	
	Возврат РезультатВыполнения;
	
	
	//Данные = ПолучитьИзВременногоХранилища(АдресРезультата);
	//Если НЕ Данные = Неопределено Тогда
	//	Объект.Остатки.Очистить();
	//	тз = Объект.Остатки.Выгрузить();
	//	тз.Очистить();
	//	Для Каждого ТекД Из Данные Цикл
	//		Если ТекД.Значение.Статус = "Выполнено" Тогда
	//			Результат = ПолучитьИзВременногоХранилища(ТекД.Значение.АдресРезультата);	
	//			ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(Результат, тз);			
	//	    КонецЕсли;
	//	КонецЦикла;
	//	тз.Свернуть("Счет, Организация, Счет7", "СуммаОстатка");
	//	Объект.Остатки.Загрузить(тз);
	//КонецЕсли;	
	
КонецФункции	
////////////////////////////////////////////////////////////////////////////////////////////////////////

&НаСервере
Процедура ЗагрузитьПодготовленныеДанные()
	
	Результат.Очистить();
	
	Результат.Вывести(ПолучитьИзВременногоХранилища(АдресХранилища).ТаблДокумент);
	
	//Отчет.НомерОтчета = Отчет.НомерОтчета + 1;
	ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеИспользовать");
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

&НаСервере
Функция ПодготовитьПараметрыОтчета()
	
	ПараметрыОтчета = Новый Структура;
	ПараметрыОтчета.Вставить("ТолькоДанныеВыгрузки"				 , ТолькоДанныеВыгрузки);
	ПараметрыОтчета.Вставить("НеФормироватьДанныеДляВыгрузки"				 , НеФормироватьДанныеДляВыгрузки);
	ПараметрыОтчета.Вставить("Организация"                       , Организация.ВыгрузитьЗначения());
	ПараметрыОтчета.Вставить("НачалоПериода"                     , НачалоДня(Объект.ПериодРегистрации));
	ПараметрыОтчета.Вставить("КонецПериода"                      , КонецМесяца(Объект.ПериодРегистрации));
	ПараметрыОтчета.Вставить("Склад"                             , Неопределено);
	ПараметрыОтчета.Вставить("НомерОтчета"                       , Неопределено);
	ПараметрыОтчета.Вставить("ВключатьОбособленныеПодразделения" , Ложь);
	ПараметрыОтчета.Вставить("НеЗатиратьОтправленные" , НеЗатиратьОтправленные);
	
	//тзО = ОрганизацииСОшибками.Выгрузить();
	//МассивСтрок = тзО.НайтиСтроки(Новый Структура("Пометка", Истина));
	//тзО1 = тзО.Скопировать(МассивСтрок, "Организация");
	//
	//Если Элементы.ОрганизацииСОшибками.Видимость И	тзО1.Количество() Тогда
	//	ПараметрыОтчета.Организация = тзО1.ВыгрузитьКолонку("Организация");
	//КонецЕсли;	
	
	Возврат ПараметрыОтчета;
	
КонецФункции

&НаСервере
Процедура ВычислитьСуммуВыделенныхЯчеекТабличногоДокументаВКонтекстеНаСервере()
	
	ПолеСумма = БухгалтерскиеОтчетыВызовСервера.ВычислитьСуммуВыделенныхЯчеекТабличногоДокумента(
	Результат, КэшВыделеннойОбласти);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_РезультатПриАктивизацииПодключаемый()
	
	НеобходимоВычислятьНаСервере = Ложь;
	БухгалтерскиеОтчетыКлиент.ВычислитьСуммуВыделенныхЯчеекТабличногоДокумента(
	ПолеСумма, Результат, Элементы.Результат, КэшВыделеннойОбласти, НеобходимоВычислятьНаСервере);
	
	Если НеобходимоВычислятьНаСервере Тогда
		ВычислитьСуммуВыделенныхЯчеекТабличногоДокументаВКонтекстеНаСервере();
	КонецЕсли;
	
	ОтключитьОбработчикОжидания("Подключаемый_РезультатПриАктивизацииПодключаемый");
	
КонецПроцедуры

&НаКлиенте
Функция ПроверитьСуществованиеКаталога(ИмяКаталога) Экспорт
	
	КаталогНаДиске = Новый Файл(ИмяКаталога);
	Если КаталогНаДиске.Существует() Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура ВопросОтправкиВ7(Ответ, ДопПараметры) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		ЗатратыКлиент.ОтправитьДанныев7(ДопПараметры, ЭтаФорма, Элементы);
		ПериодРегистрацииПриИзменении();
		ОбновитьОтображениеДанных();		
	КонецЕсли;	
	
КонецПроцедуры	

&НаКлиенте
Процедура ЗатратыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Элемент.ТекущийЭлемент.Имя = "ОчередьКоманда" ИЛИ Элемент.ТекущийЭлемент.Имя = "ОчередьСтатус" Тогда
		СтандартнаяОбработка = Ложь;
		
		ПоказатьВопрос(Новый ОписаниеОповещения("ВопросОтправкиВ7", ЭтотОбъект, ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Элементы.Очередь.ТекущиеДанные)),
			"Отправить данные в 7?",
			РежимДиалогаВопрос.ДаНет,
			,
			КодВозвратаДиалога.Да,
			"Отправить данныые?"
		);	
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОчередьСтатусНажатие(Элемент, СтандартнаяОбработка)
	

КонецПроцедуры

&НаКлиенте
Процедура ГруппаСтраницыПриСменеСтраницы(Элемент, ТекущаяСтраница)
	ПериодРегистрацииПриИзменении();
	ОбновитьОтображениеДанных();	
КонецПроцедуры

&НаКлиенте
Процедура ТолькоНеОтправленные(Команда)
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Очередь, "Статус", 1, ВидСравненияКомпоновкиДанных.НеРавно,, Истина, РежимОтображенияЭлементаНастройкиКомпоновкиДанных.БыстрыйДоступ,);
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьВсе(Команда)
	ОбщегоНазначенияКлиентСервер.УдалитьЭлементыГруппыОтбораДинамическогоСписка(Очередь, "Статус");
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	ЗатратыКлиентСервер.ОрганизацияПриИзменении(ЭтаФорма);
КонецПроцедуры

&НаСервере
Процедура ОчиститьВсеСтатусыНаСервере()
	Набор = РегистрыСведений.ДанныеКВыгрузкеВ7.СоздатьНаборЗаписей();
	Набор.Отбор.Период.Установить(Объект.ПериодРегистрации);
	Набор.Прочитать();
	тз = Набор.Выгрузить();
	тз.ЗаполнитьЗначения("", "Комментарий,ОшибкаВыгрузки");
	тз.ЗаполнитьЗначения(ЗатратыКлиентСервер.СтатусОтправки_НеОтправлено(), "Статус");
	Набор.Загрузить(тз);
	Набор.Записать();
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьВсеСтатусы(Команда)
	ПоказатьВопрос(Новый ОписаниеОповещения("ПослеВопросаОчиститьВсеСтатусы", ЭтотОбъект), "Очистить все статусы?", РежимДиалогаВопрос.ДаНет, ,);
КонецПроцедуры

&НаКлиенте
Процедура ПослеВопросаОчиститьВсеСтатусы(Ответ, ДопПарам) Экспорт
	Если Ответ = КодВозвратаДиалога.Да Тогда
		
		ОчиститьВсеСтатусыНаСервере();

	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура ПутьКФайламНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
    СтандартнаяОбработка = ЛОЖЬ;

    Режим = РежимДиалогаВыбораФайла.ВыборКаталога; 
    ДиалогОткрытия = Новый ДиалогВыбораФайла(Режим); 
    ДиалогОткрытия.Каталог = ПутьКФайлам;  
    ДиалогОткрытия.Заголовок = "Выберите каталог"; 
        
    Параметр = "";
    Оповещение = Новый ОписаниеОповещения("ВыборКаталога_Завершение", ЭтотОбъект, Параметр );
    ДиалогОткрытия.Показать(Оповещение);
КонецПроцедуры

&НаКлиенте
Процедура ВыборКаталога_Завершение(Результат, Параметр) Экспорт
    Если Результат = Неопределено Тогда
         Сообщить("Каталог не выбран");
         Возврат;
     КонецЕсли;
    ПутьКФайлам = Результат[0]
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьУслугиСтороннихОрганизаций(Команда)
	ЗатратыКлиент.ЗаполнитьУслугиСтороннихОрганизаций(Объект.ПериодРегистрации);
КонецПроцедуры



