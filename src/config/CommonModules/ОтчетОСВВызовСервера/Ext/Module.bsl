#Область ПрограммныйИнтерфейс

Процедура СформироватьОтчетОСВ(ПараметрыОтчета, АдресХранилища) Экспорт
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	Макет = Обработки.МММСервис.ПолучитьМакет("МакетОСВ");
	
	ТаблицаЗначений = Неопределено;
	Если ПараметрыОтчета.Свойство("КолокиТаблицыЗначений") Тогда
		ТаблицаЗначений = Новый ТаблицаЗначений;
		МассивКолонок = СтрРазделить(ПараметрыОтчета.КолокиТаблицыЗначений, ",", Ложь);
		Для Каждого СтрКолонка Из МассивКолонок Цикл
			ТаблицаЗначений.Колонки.Добавить(СтрКолонка,
				?(СтрНайти(СтрКолонка, "Сумма") > 0 ИЛИ СтрНайти(СтрКолонка, "Оборот") > 0,
					Новый ОписаниеТипов("Число"),
					Новый ОписаниеТипов("Строка")
				)
			);
		КонецЦикла;
	КонецЕсли;
	/////////////////////////////////////////////////////////
	// Выведем шапку
	
	ОбластьМакета = Макет.ПолучитьОбласть("ОтборПериод");
	ОбластьМакета.Параметры.Период = ""+Формат(ПараметрыОтчета.НачалоПериода, "ДФ=dd.MM.yyyy") + " - " + Формат(ПараметрыОтчета.КонецПериода, "ДФ=dd.MM.yyyy");
	ВысотаЗаголовка = ОбластьМакета.ВысотаТаблицы;                                      			
	ТабличныйДокумент.Вывести(ОбластьМакета);
	
	ОбластьМакета = Макет.ПолучитьОбласть("Шапка");
	ТабличныйДокумент.Вывести(ОбластьМакета);

	ТаблицаБаз = мммСервер.ПолучитьТаблицуСерверов(ПараметрыОтчета.НачалоПериода, ПараметрыОтчета.Организация);

	Прогон = 1;
	МассивОрганизацийСОшибками = Новый Массив;

	Для Каждого ВыборкаДетальныеЗаписи Из ТаблицаБаз Цикл
		ДлительныеОперации.СообщитьПрогресс(Окр(100*Прогон/ТаблицаБаз.Количество()), СокрЛП(ВыборкаДетальныеЗаписи.Ссылка.НаименованиеСокращенное),);
		Если НЕ ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.Сервер)
			ИЛИ НЕ ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.База)
			ИЛИ НЕ ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.Пользователь) Тогда
			Продолжить;
		КонецЕсли;
		
		Если Не ВыборкаДетальныеЗаписи.Пометка Тогда
			Продолжить;
		КонецЕсли;

		Попытка
			СоединениеУстановлено = Ложь;
			Для сч = 1 По 3 Цикл
				Попытка
					Прокси = мммСервер.ПолучитьПрокси(ВыборкаДетальныеЗаписи.Сервер, 
						ВыборкаДетальныеЗаписи.База,
						ВыборкаДетальныеЗаписи.Пользователь,
						ВыборкаДетальныеЗаписи.Пароль
					);
					СоединениеУстановлено = Истина;
					Прервать;
				Исключение
				КонецПопытки;		
			КонецЦикла;
			Если НЕ СоединениеУстановлено Тогда
				Продолжить;
			КонецЕсли;			
			
			/////////////////////////////////////////////////////////
			// Формирование данных

			Запрос = мммСервер.ЗапросПрокси();
			Запрос.ТекстЗапроса = "";
			ОтборСубконто1 = Ложь;
			Если (Лев(ПараметрыОтчета.Счета[0],2) = "60"
				ИЛИ Лев(ПараметрыОтчета.Счета[0],2) = "62"
				ИЛИ Лев(ПараметрыОтчета.Счета[0],2) = "57"
				ИЛИ Лев(ПараметрыОтчета.Счета[0],2) = "58"
				ИЛИ Лев(ПараметрыОтчета.Счета[0],2) = "67"
				ИЛИ Лев(ПараметрыОтчета.Счета[0],2) = "76")
				И НЕ ПустаяСтрока(ПараметрыОтчета.Субконто1) Тогда
				Запрос.ТекстЗапроса = Запрос.ТекстЗапроса + "
					|ВЫБРАТЬ Т.Ссылка ПОМЕСТИТЬ ВТСубконто1 ИЗ Справочник.Контрагенты КАК Т ГДЕ Т.ЭтоГруппа И Т.Наименование ПОДОБНО &ОтборСубконто
					|;";
				
				ОтборСубконто1 = Истина;
			КонецЕсли;
			
			Запрос.ТекстЗапроса = Запрос.ТекстЗапроса + "
				|ВЫБРАТЬ Т.Ссылка КАК Счет
				|ПОМЕСТИТЬ ВТСчета
				|ИЗ ПланСчетов.Хозрасчетный КАК Т
				|ГДЕ Т.Код В (&Счета)
				|	ИЛИ Т.Родитель.Код В (&Счета)
				|	ИЛИ Т.Родитель.Родитель.Код В (&Счета)
				|	ИЛИ Т.Родитель.Родитель.Родитель.Код В (&Счета)
				|	ИЛИ Т.Родитель.Родитель.Родитель.Родитель.Код В (&Счета)
				|	ИЛИ Т.Родитель.Родитель.Родитель.Родитель.Родитель.Код В (&Счета)
				|;
				|ВЫБРАТЬ
				//	|	ВЫРАЗИТЬ(&Счета КАК СТРОКА(20)) КАК Счет,
				|	ПРЕДСТАВЛЕНИЕ(Т.Организация) КАК Организация,
				|	"+?(ВыборкаДетальныеЗаписи.БазаУТП, " ""43519967"" ", "ЕСТЬNULL(Орг.ИНН, ""0000000000"")")+" КАК ИНН,
				|	СУММА(Т.СуммаНачальныйОстатокДт) КАК СуммаНачальныйОстатокДт,
				|	СУММА(Т.СуммаНачальныйОстатокКт) КАК СуммаНачальныйОстатокКт,
				|	СУММА(Т.СуммаОборотДт) КАК СуммаОборотДт,
				|	СУММА(Т.СуммаОборотКт) КАК СуммаОборотКт,
				|	СУММА(Т.СуммаКонечныйОстатокДт) КАК СуммаКонечныйОстатокДт,
				|	СУММА(Т.СуммаКонечныйОстатокКт) КАК СуммаКонечныйОстатокКт
				|ИЗ
				|	РегистрБухгалтерии.Хозрасчетный.ОстаткиИОбороты(&НачалоПериода, &КонецПериода, Месяц, , Счет В (ВЫБРАТЬ ВТСчета.Счет ИЗ ВТСчета), , Организация.ИНН В (&Организации)) КАК Т
				|	ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Организации КАК Орг
				|	ПО Орг.Ссылка = Т.Организация
				|СГРУППИРОВАТЬ ПО
				|	"+?(ВыборкаДетальныеЗаписи.БазаУТП, "", "Орг.ИНН,")+"
				|	ПРЕДСТАВЛЕНИЕ(Т.Организация)
				|";
			Если ОтборСубконто1 Тогда
				Запрос.ТекстЗапроса = СтрЗаменить(Запрос.ТекстЗапроса, "Организация.ИНН В (&Организации)", "Организация.ИНН В (&Организации) И Субконто1 В ИЕРАРХИИ (ВЫБРАТЬ ТС1.Ссылка Из ВТСубконто1 КАК ТС1)");
				Запрос.Параметры.Вставить("ОтборСубконто", "%"+СокрЛП(ПараметрыОтчета.Субконто1)+"%");
			КонецЕсли;
			Если ВыборкаДетальныеЗаписи.БазаУТП Тогда
				Запрос.ТекстЗапроса = СтрЗаменить(Запрос.ТекстЗапроса, "Организация.ИНН В (&Организации) И ", "");
				Запрос.ТекстЗапроса = СтрЗаменить(Запрос.ТекстЗапроса, "Организация.ИНН В (&Организации)", "");
			КонецЕсли;
			

			Запрос.Параметры.Вставить("Счета", ПараметрыОтчета.Счета);
			Запрос.Параметры.Вставить("Организации", ВыборкаДетальныеЗаписи.Ссылка.ИНН);
			Запрос.Параметры.Вставить("НачалоПериода", НачалоДня(ПараметрыОтчета.НачалоПериода));
			Запрос.Параметры.Вставить("КонецПериода", Новый Граница(ПараметрыОтчета.КонецПериода, ВидГраницы.Включая));
			
			Ответ = мммСервер.ДеСериализовать(
				Прокси.RunQuery(мммСервер.Сериализовать(Запрос))
			);

			ОбластьМакета = Макет.ПолучитьОбласть("СтрокаОрганизация");
			Таблица = Ответ.Результат;
			Если НЕ Ответ.Ошибка Тогда
				Если Ответ.Результат.Количество() > 0 Тогда
					Для каждого стр  Из Таблица Цикл
					
						ЗаполнитьЗначенияСвойств(ОбластьМакета.Параметры, стр);
						ОбластьМакета.Параметры.Организация = ОбластьМакета.Параметры.Организация + ", " + стр.ИНН;
						ТабличныйДокумент.Вывести(ОбластьМакета);
						
						Если Не ТаблицаЗначений = Неопределено Тогда
							ЗаполнитьЗначенияСвойств(ТаблицаЗначений.Добавить(), стр);
						КонецЕсли;
					
					КонецЦикла; 
				КонецЕсли;
			КонецЕсли;
			
		Исключение
			МассивОрганизацийСОшибками.Добавить(ВыборкаДетальныеЗаписи.Ссылка);
			ЗаписьЖурналаРегистрации("Отчет затраты", УровеньЖурналаРегистрации.Ошибка, ,,ОписаниеОшибки());
		КонецПопытки;
		Прогон = Прогон + 1;
	КонецЦикла;
	
	ПарамФайлов = Новый Структура("ТаблДокумент,ИмяОрганизации,МассивОрганизацийСОшибками,ТаблицаЗначений", 
		ТабличныйДокумент, "", МассивОрганизацийСОшибками, ТаблицаЗначений
	);
	
	ПоместитьВоВременноеХранилище(ПарамФайлов, АдресХранилища);	
	
КонецПроцедуры

Процедура Обмен8() Экспорт
	
	АдресХранилища = ПоместитьВоВременноеХранилище(Неопределено, Новый УникальныйИдентификатор);

	ЗаполнитьОСВИз8(ПодготовитьПараметрыОтчета(НачалоМесяца(НачалоМесяца(ТекущаяДата()-1))), АдресХранилища);
	ЗаполнитьОСВИз8(ПодготовитьПараметрыОтчета(НачалоМесяца(ТекущаяДата())), АдресХранилища);
	
КонецПроцедуры	

Функция ПодготовитьПараметрыОтчета(Период = Неопределено)
	
	Если Период  = Неопределено Тогда
		Период = НачалоМесяца(ТекущаяДата());
	КонецЕсли;	
	
	Набор = РегистрыСведений.Обороты8.СоздатьНаборЗаписей();
	тз = Набор.Выгрузить();
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	Организации.Ссылка КАК Организация
	               |ИЗ
	               |	Справочник.Организации КАК Организации
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АктуальностьОрганизаций.СрезПоследних(&Период) КАК АктуальностьОрганизацийСрезПоследних
	               |		ПО Организации.Ссылка = АктуальностьОрганизацийСрезПоследних.Организация
	               |ГДЕ
	               |	НЕ Организации.ПометкаУдаления
	               |	И АктуальностьОрганизацийСрезПоследних.Активна";
	Запрос.УстановитьПараметр("Период", Период);
	тз1 = Запрос.Выполнить().Выгрузить();
	
	ПараметрыОтчета = Новый Структура;
	ПараметрыОтчета.Вставить("Организация"                       , тз1.ВыгрузитьКолонку("Организация"));
	ПараметрыОтчета.Вставить("НачалоПериода"                     , Период);
	ПараметрыОтчета.Вставить("КонецПериода"                      , КонецМесяца(Период));
	ПараметрыОтчета.Вставить("тзДанных", тз);
	ПараметрыОтчета.Вставить("ОтборСчета", Новый Структура("сч50,сч51,сч60,сч62", Истина, Истина, Истина, Истина));

	ПараметрыОтчета.Вставить("ОбновитьДанные" , Истина);
	
	Возврат ПараметрыОтчета;
	
КонецФункции

Процедура ЗаполнитьОСВИз8(ПараметрыОтчета, АдресХранилища) Экспорт

	Если ПараметрыОтчета.ОбновитьДанные Тогда

		ТаблицаБаз = мммСервер.ПолучитьТаблицуСерверов(КонецМесяца(ПараметрыОтчета.НачалоПериода), ?(ПараметрыОтчета.Организация.Количество() > 0, ПараметрыОтчета.Организация, Неопределено));
		тзОстатки = ПараметрыОтчета.тзДанных;
		ПроцентВыполнения = 0;
		Для Каждого База Из ТаблицаБаз Цикл
			ПроцентВыполнения = ПроцентВыполнения + 1;
			
			Для сч = 1 По 3 Цикл
				Если База.Пометка Тогда	

					Актуальность = РегистрыСведений.АктуальностьОрганизаций.ПолучитьПоследнее(КонецМесяца(ПараметрыОтчета.НачалоПериода), Новый Структура("Организация", База.Организация));
					Если НЕ Актуальность.Активна Тогда
						Продолжить;
					КонецЕсли;

					ПопыткаУдачно = Ложь;
					// попытка 1
					Попытка
						Прокси = мммСервер.ПолучитьПрокси(База.Сервер, База.База, База.Пользователь, База.Пароль); 
						ПопыткаУдачно = Истина;
					Исключение
					КонецПопытки;
					// попытка 2
					Если НЕ ПопыткаУдачно Тогда
						Попытка
							Прокси = мммСервер.ПолучитьПрокси(База.Сервер, База.База, База.Пользователь, База.Пароль); 
							ПопыткаУдачно = Истина;
						Исключение
						КонецПопытки;
					КонецЕсли;
					// попытка 3
					Если НЕ ПопыткаУдачно Тогда
						Попытка
							Прокси = мммСервер.ПолучитьПрокси(База.Сервер, База.База, База.Пользователь, База.Пароль); 
							ПопыткаУдачно = Истина;
						Исключение
						КонецПопытки;
					КонецЕсли;

					Если ПопыткаУдачно Тогда

						ТекстЗапроса = "ВЫБРАТЬ
|	Хозрасчетный.Ссылка КАК Счет
|ПОМЕСТИТЬ ВТСчета
|ИЗ
|	ПланСчетов.Хозрасчетный КАК Хозрасчетный
|ГДЕ
|	(ЛОЖЬ
|			ИЛИ Хозрасчетный.Код В (&Коды)
|			ИЛИ Хозрасчетный.Родитель.Код В (&Коды)
|			ИЛИ Хозрасчетный.Родитель.Родитель.Код В (&Коды)
|			ИЛИ Хозрасчетный.Родитель.Родитель.Родитель.Код В (&Коды))
|;
|
|////////////////////////////////////////////////////////////////////////////////
|ВЫБРАТЬ
|	Контрагенты.Ссылка КАК Ссылка,
|	""ПОСТАВЩИКИ"" КАК Аналитика
|ПОМЕСТИТЬ ВТПоставщикиТовара
|ИЗ
|	Справочник.Контрагенты КАК Контрагенты
|ГДЕ
|	ИСТИНА
|	И (ЛОЖЬ
|			ИЛИ Контрагенты.Родитель.Наименование ПОДОБНО &Контрагент1
|			ИЛИ Контрагенты.Родитель.Родитель.Наименование ПОДОБНО &Контрагент1
|			ИЛИ Контрагенты.Родитель.Родитель.Родитель.Наименование ПОДОБНО &Контрагент1
|			ИЛИ Контрагенты.Родитель.Родитель.Родитель.Родитель.Родитель.Наименование ПОДОБНО &Контрагент1)
|	И НЕ Контрагенты.ЭтоГруппа
|;
|
|////////////////////////////////////////////////////////////////////////////////
|ВЫБРАТЬ
|	Контрагенты.Ссылка КАК Ссылка,
|	""РЕКЛАМА"" КАК Аналитика
|ПОМЕСТИТЬ ВТРеклама
|ИЗ
|	Справочник.Контрагенты КАК Контрагенты
|ГДЕ
|	ИСТИНА
|	И (ЛОЖЬ
|			ИЛИ Контрагенты.Родитель.Наименование ПОДОБНО &Контрагент2
|			ИЛИ Контрагенты.Родитель.Родитель.Наименование ПОДОБНО &Контрагент2
|			ИЛИ Контрагенты.Родитель.Родитель.Родитель.Наименование ПОДОБНО &Контрагент2
|			ИЛИ Контрагенты.Родитель.Родитель.Родитель.Родитель.Родитель.Наименование ПОДОБНО &Контрагент2)
|	И НЕ Контрагенты.ЭтоГруппа
|;
|
|////////////////////////////////////////////////////////////////////////////////
|ВЫБРАТЬ
|	ВЫБОР
|		КОГДА ХозрасчетныйОстаткиИОбороты.Счет.Код ПОДОБНО """+РегистрыСведений.Меппинг.ПолучитьЗамену(База.Организация, "60")+".%""
|			ТОГДА """+РегистрыСведений.Меппинг.ПолучитьЗамену(База.Организация, "60")+"""
|		КОГДА ХозрасчетныйОстаткиИОбороты.Счет.Код ПОДОБНО """+РегистрыСведений.Меппинг.ПолучитьЗамену(База.Организация, "50")+".%""
|			ТОГДА """+РегистрыСведений.Меппинг.ПолучитьЗамену(База.Организация, "50")+"""
|		ИНАЧЕ ХозрасчетныйОстаткиИОбороты.Счет.Код
|	КОНЕЦ КАК Счет,
|	ПРЕДСТАВЛЕНИЕ(ХозрасчетныйОстаткиИОбороты.Организация) КАК Организация,
|	"+?(База.Организация.БазаУТП,""+База.Организация.ИНН+"", "ХозрасчетныйОстаткиИОбороты.Организация.ИНН")+" КАК ИНН,
|	(ВЫРАЗИТЬ(ЕСТЬNULL(ВТПоставщикиТовара.Аналитика, """") КАК СТРОКА(10))) + (ВЫРАЗИТЬ(ЕСТЬNULL(ВТРеклама.Аналитика, """") КАК СТРОКА(10))) КАК Аналитика,
|	СУММА(ХозрасчетныйОстаткиИОбороты.СуммаНачальныйОстатокДт) КАК СуммаНачальныйОстатокДт,
|	СУММА(ХозрасчетныйОстаткиИОбороты.СуммаНачальныйОстатокКт) КАК СуммаНачальныйОстатокКт,
|	СУММА(ХозрасчетныйОстаткиИОбороты.СуммаКонечныйОстатокДт) КАК СуммаКонечныйОстатокДт,
|	СУММА(ХозрасчетныйОстаткиИОбороты.СуммаКонечныйОстатокКт) КАК СуммаКонечныйОстатокКт,
|	0 КАК СуммаОборотДт,
|	0 КАК СуммаОборотКт,
|	NULL КАК Поле1
|ИЗ
|	РегистрБухгалтерии.Хозрасчетный.ОстаткиИОбороты(НАЧАЛОПЕРИОДА(&Период, МЕСЯЦ), КОНЕЦПЕРИОДА(&Период, МЕСЯЦ), , , , , "+?(База.Организация.БазаУТП, "", "Организация.ИНН = &Организация")+") КАК ХозрасчетныйОстаткиИОбороты
|		ЛЕВОЕ СОЕДИНЕНИЕ ВТПоставщикиТовара КАК ВТПоставщикиТовара
|		ПО ((ВЫРАЗИТЬ(ХозрасчетныйОстаткиИОбороты.Субконто1 КАК Справочник.Контрагенты)) = ВТПоставщикиТовара.Ссылка)
|		ЛЕВОЕ СОЕДИНЕНИЕ ВТРеклама КАК ВТРеклама
|		ПО ((ВЫРАЗИТЬ(ХозрасчетныйОстаткиИОбороты.Субконто1 КАК Справочник.Контрагенты)) = ВТРеклама.Ссылка)
|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТСчета КАК ВТ
|		ПО (ВТ.Счет = ХозрасчетныйОстаткиИОбороты.Счет)
|ГДЕ
|	ВЫБОР
|			КОГДА ТИПЗНАЧЕНИЯ(ХозрасчетныйОстаткиИОбороты.Субконто1) = ТИП(Справочник.Контрагенты)
|					И (ХозрасчетныйОстаткиИОбороты.Счет.Код ПОДОБНО """+РегистрыСведений.Меппинг.ПолучитьЗамену(База.Организация, "60")+".%""
|						ИЛИ ХозрасчетныйОстаткиИОбороты.Счет.Код = """+РегистрыСведений.Меппинг.ПолучитьЗамену(База.Организация, "62.01")+""")
|					И НЕ ХозрасчетныйОстаткиИОбороты.Счет.Код = """+РегистрыСведений.Меппинг.ПолучитьЗамену(База.Организация, "62.05")+"""
|				ТОГДА ХозрасчетныйОстаткиИОбороты.Субконто1 В
|							(ВЫБРАТЬ
|								ВТПоставщикиТовара.Ссылка КАК Ссылка
|							ИЗ
|								ВТПоставщикиТовара КАК ВТПоставщикиТовара)
|						ИЛИ ХозрасчетныйОстаткиИОбороты.Субконто1 В
|							(ВЫБРАТЬ
|								ВТРеклама.Ссылка КАК Ссылка
|							ИЗ
|								ВТРеклама КАК ВТРеклама)
|			ИНАЧЕ ИСТИНА
|		КОНЕЦ
|
|СГРУППИРОВАТЬ ПО
|	"+?(База.Организация.БазаУТП,"", "ХозрасчетныйОстаткиИОбороты.Организация.ИНН,")+"
|	ВЫБОР
|		КОГДА ХозрасчетныйОстаткиИОбороты.Счет.Код ПОДОБНО """+РегистрыСведений.Меппинг.ПолучитьЗамену(База.Организация, "60")+".%""
|			ТОГДА """+РегистрыСведений.Меппинг.ПолучитьЗамену(База.Организация, "60")+"""
|		КОГДА ХозрасчетныйОстаткиИОбороты.Счет.Код ПОДОБНО """+РегистрыСведений.Меппинг.ПолучитьЗамену(База.Организация, "50")+".%""
|			ТОГДА """+РегистрыСведений.Меппинг.ПолучитьЗамену(База.Организация, "50")+"""
|		ИНАЧЕ ХозрасчетныйОстаткиИОбороты.Счет.Код
|	КОНЕЦ,
|	(ВЫРАЗИТЬ(ЕСТЬNULL(ВТПоставщикиТовара.Аналитика, """") КАК СТРОКА(10))) + (ВЫРАЗИТЬ(ЕСТЬNULL(ВТРеклама.Аналитика, """") КАК СТРОКА(10))),
|	ПРЕДСТАВЛЕНИЕ(ХозрасчетныйОстаткиИОбороты.Организация)
|
|ОБЪЕДИНИТЬ ВСЕ
|
|ВЫБРАТЬ
|	ВЫБОР
|		КОГДА ХозрасчетныйОбороты.Счет.Код ПОДОБНО """+РегистрыСведений.Меппинг.ПолучитьЗамену(База.Организация, "60")+".%""
|			ТОГДА """+РегистрыСведений.Меппинг.ПолучитьЗамену(База.Организация, "60")+"""
|		КОГДА ХозрасчетныйОбороты.Счет.Код ПОДОБНО """+РегистрыСведений.Меппинг.ПолучитьЗамену(База.Организация, "50")+".%""
|			ТОГДА """+РегистрыСведений.Меппинг.ПолучитьЗамену(База.Организация, "50")+"""
|		ИНАЧЕ ХозрасчетныйОбороты.Счет.Код
|	КОНЕЦ,
|	ПРЕДСТАВЛЕНИЕ(ХозрасчетныйОбороты.Организация),
|	"+?(База.Организация.БазаУТП,""+База.Организация.ИНН+"", "ХозрасчетныйОбороты.Организация.ИНН")+",
|	(ВЫРАЗИТЬ(ЕСТЬNULL(ВТПоставщикиТовара.Аналитика, """") КАК СТРОКА(10))) + (ВЫРАЗИТЬ(ЕСТЬNULL(ВТРеклама.Аналитика, """") КАК СТРОКА(10))),
|	0,
|	0,
|	0,
|	0,
|	СУММА(ХозрасчетныйОбороты.СуммаОборотДт),
|	СУММА(ХозрасчетныйОбороты.СуммаОборотКт),
|	ХозрасчетныйОбороты.КорСчет.Код
|ИЗ
|	РегистрБухгалтерии.Хозрасчетный.Обороты(НАЧАЛОПЕРИОДА(&Период, МЕСЯЦ), КОНЕЦПЕРИОДА(&Период, МЕСЯЦ), , , , "+?(База.Организация.БазаУТП, "", "Организация.ИНН = &Организация")+", , ) КАК ХозрасчетныйОбороты
|		ЛЕВОЕ СОЕДИНЕНИЕ ВТПоставщикиТовара КАК ВТПоставщикиТовара
|		ПО ((ВЫРАЗИТЬ(ХозрасчетныйОбороты.Субконто1 КАК Справочник.Контрагенты)) = ВТПоставщикиТовара.Ссылка)
|		ЛЕВОЕ СОЕДИНЕНИЕ ВТРеклама КАК ВТРеклама
|		ПО ((ВЫРАЗИТЬ(ХозрасчетныйОбороты.Субконто1 КАК Справочник.Контрагенты)) = ВТРеклама.Ссылка)
|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТСчета КАК ВТ
|		ПО (ВТ.Счет = ХозрасчетныйОбороты.Счет)
|ГДЕ
|	ВЫБОР
|			КОГДА ТИПЗНАЧЕНИЯ(ХозрасчетныйОбороты.Субконто1) = ТИП(Справочник.Контрагенты)
|					И (ХозрасчетныйОбороты.Счет.Код ПОДОБНО """+РегистрыСведений.Меппинг.ПолучитьЗамену(База.Организация, "60")+".%""
|						ИЛИ ХозрасчетныйОбороты.Счет.Код = """+РегистрыСведений.Меппинг.ПолучитьЗамену(База.Организация, "62.01")+""")
|					И НЕ ХозрасчетныйОбороты.Счет.Код = """+РегистрыСведений.Меппинг.ПолучитьЗамену(База.Организация, "62.05")+"""
|				ТОГДА ХозрасчетныйОбороты.Субконто1 В
|							(ВЫБРАТЬ
|								ВТПоставщикиТовара.Ссылка КАК Ссылка
|							ИЗ
|								ВТПоставщикиТовара КАК ВТПоставщикиТовара)
|						ИЛИ ХозрасчетныйОбороты.Субконто1 В
|							(ВЫБРАТЬ
|								ВТРеклама.Ссылка КАК Ссылка
|							ИЗ
|								ВТРеклама КАК ВТРеклама)
|			ИНАЧЕ ИСТИНА
|		КОНЕЦ
|	И ВЫБОР
|			КОГДА ХозрасчетныйОбороты.Счет.Код ПОДОБНО """+РегистрыСведений.Меппинг.ПолучитьЗамену(База.Организация, "50")+".%""
|					И ХозрасчетныйОбороты.КорСчет.Код ПОДОБНО """+РегистрыСведений.Меппинг.ПолучитьЗамену(База.Организация, "50")+".%""
|				ТОГДА ЛОЖЬ
|			КОГДА ХозрасчетныйОбороты.Счет.Код ПОДОБНО """+РегистрыСведений.Меппинг.ПолучитьЗамену(База.Организация, "51")+"%""
|					И ХозрасчетныйОбороты.КорСчет.Код ПОДОБНО """+РегистрыСведений.Меппинг.ПолучитьЗамену(База.Организация, "51")+"%""
|				ТОГДА ЛОЖЬ
|			ИНАЧЕ ИСТИНА
|		КОНЕЦ
|
|СГРУППИРОВАТЬ ПО
|	(ВЫРАЗИТЬ(ЕСТЬNULL(ВТПоставщикиТовара.Аналитика, """") КАК СТРОКА(10))) + (ВЫРАЗИТЬ(ЕСТЬNULL(ВТРеклама.Аналитика, """") КАК СТРОКА(10))),
|	ВЫБОР
|		КОГДА ХозрасчетныйОбороты.Счет.Код ПОДОБНО """+РегистрыСведений.Меппинг.ПолучитьЗамену(База.Организация, "60")+".%""
|			ТОГДА """+РегистрыСведений.Меппинг.ПолучитьЗамену(База.Организация, "60")+"""
|		КОГДА ХозрасчетныйОбороты.Счет.Код ПОДОБНО """+РегистрыСведений.Меппинг.ПолучитьЗамену(База.Организация, "50")+".%""
|			ТОГДА """+РегистрыСведений.Меппинг.ПолучитьЗамену(База.Организация, "50")+"""
|		ИНАЧЕ ХозрасчетныйОбороты.Счет.Код
|	КОНЕЦ,
|	"+?(База.Организация.БазаУТП,"", "ХозрасчетныйОбороты.Организация.ИНН,")+"
|	ХозрасчетныйОбороты.КорСчет.Код,
|	ПРЕДСТАВЛЕНИЕ(ХозрасчетныйОбороты.Организация)
|";
						МассивКодов = Новый Массив;
						МассивКодов.Добавить(РегистрыСведений.Меппинг.ПолучитьЗамену(База.Организация, "50"));
						МассивКодов.Добавить(РегистрыСведений.Меппинг.ПолучитьЗамену(База.Организация, "51"));
						МассивКодов.Добавить(РегистрыСведений.Меппинг.ПолучитьЗамену(База.Организация, "60"));
						МассивКодов.Добавить(РегистрыСведений.Меппинг.ПолучитьЗамену(База.Организация, "62.01"));
						МассивКодов.Добавить(РегистрыСведений.Меппинг.ПолучитьЗамену(База.Организация, "62.05"));
						
						ПараметрыЗапроса = Новый Структура("Коды", МассивКодов);
						ПараметрыЗапроса.Вставить("Период", ПараметрыОтчета.НачалоПериода);
						ПараметрыЗапроса.Вставить("Организация", База.Организация.ИНН);
						ПараметрыЗапроса.Вставить("Контрагент1", "%Поставщики%"); // <Строка>[%Поставщики товара%]
						ПараметрыЗапроса.Вставить("Контрагент2", "%Реклама%"); // <Строка>[%Реклама%]
						
						ПараметрыПрокси = Новый Структура("ТекстЗапроса, Параметры", ТекстЗапроса, ПараметрыЗапроса);
						
						Набор = РегистрыСведений.Обороты8.СоздатьНаборЗаписей();
						Набор.Отбор.Период.Установить(ПараметрыОтчета.НачалоПериода);
						Набор.Отбор.Организация.Установить(База.Организация);
						Набор.Записать();

						Удачно = Ложь;
						Попытка
							Ответ = мммСервер.ДеСериализовать(
								Прокси.RunQuery(мммСервер.Сериализовать(ПараметрыПрокси))
							);
							Удачно = Истина;
						Исключение
						КонецПопытки;
						
						Если НЕ Удачно Тогда
							ОбновлениеИнформационнойБазыСлужебный.Пауза(10);
							Попытка
								Ответ = мммСервер.ДеСериализовать(
									Прокси.RunQuery(мммСервер.Сериализовать(ПараметрыПрокси))
								);
								Удачно = Истина;
							Исключение
							КонецПопытки;
						КонецЕсли;
						
						Если НЕ Удачно Тогда
							ОбновлениеИнформационнойБазыСлужебный.Пауза(20);
							Попытка
								Ответ = мммСервер.ДеСериализовать(
									Прокси.RunQuery(мммСервер.Сериализовать(ПараметрыПрокси))
								);
								Удачно = Истина;
							Исключение
							КонецПопытки;
						КонецЕсли;
						
						Если НЕ Удачно Тогда
							ОбщегоНазначения.СообщитьПользователю("При подключении к базе с организацией "+База.Организация+ " возникла ошибка. Остатки по этой организации загружены не будут.");
							Продолжить;
						КонецЕсли;

						Если Ответ.Ошибка Тогда
							ОбщегоНазначения.СообщитьПользователю("При получении данных произошла ошибка"+Символы.ПС+Ответ.ОписаниеОшибки);
							ЖурналРегистрации.ДобавитьСообщениеДляЖурналаРегистрации("Загрузка остатков и оборотов 8", 
								УровеньЖурналаРегистрации.Ошибка, 
								Метаданные.Документы.ЗагрузкаОстатков, 
								, 
								"При получении данных произошла ошибка"+Символы.ПС+Ответ.ОписаниеОшибки
							);
						Иначе

							Ответ.Результат.Свернуть("Счет, Организация, ИНН, Аналитика", "СуммаНачальныйОстатокДт, СуммаНачальныйОстатокКт,СуммаКонечныйОстатокДт,СуммаКонечныйОстатокКт,СуммаОборотДт,СуммаОборотКт");
							Для Каждого СтрокаОтвета Из Ответ.Результат Цикл
								ТекОрганизация = Справочники.Организации.НайтиОрганизацию(СтрокаОтвета);
								Если ЗначениеЗаполнено(ТекОрганизация) Тогда
									НоваяСтрока = тзОстатки.Добавить();
									ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаОтвета);
									НоваяСтрока.Организация = ТекОрганизация;
									НоваяСтрока.Период = ПараметрыОтчета.НачалоПериода;
									
									МенеджерЗаписи = РегистрыСведений.Обороты8.СоздатьМенеджерЗаписи();
									ЗаполнитьЗначенияСвойств(МенеджерЗаписи, НоваяСтрока);
									Попытка
										МенеджерЗаписи.Записать();
									Исключение
										ЖурналРегистрации.ДобавитьСообщениеДляЖурналаРегистрации("Загрузка остатков и оборотов 8", 
											УровеньЖурналаРегистрации.Ошибка, 
											Метаданные.Документы.ЗагрузкаОстатков, 
											, 
											ОписаниеОшибки()
										);
									КонецПопытки;

									ДлительныеОперации.СообщитьПрогресс(Окр(100*ПроцентВыполнения/ТаблицаБаз.Количество(),1), ""+База.Сервер+": "+ ТекОрганизация.Наименование);

								Иначе
									ОбщегоНазначения.СообщитьПользователю("При получении данных произошла ошибка: Не найдена организация "+СтрокаОтвета);
									ЖурналРегистрации.ДобавитьСообщениеДляЖурналаРегистрации("Загрузка остатков и оборотов 8", 
										УровеньЖурналаРегистрации.Ошибка, 
										Метаданные.Документы.ЗагрузкаОстатков, 
										, 
										"При получении данных произошла ошибка"+Символы.ПС+"Не найдена организация"+Символы.ПС+СтрокаОтвета
									);
								КонецЕсли;
							КонецЦикла;

							База.Пометка = Ложь;
						КонецЕсли;
					КонецЕсли;
					
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;

	Данные = Новый Структура("ТаблицаДанных", тзОстатки);
	ПоместитьВоВременноеХранилище(Данные, АдресХранилища);

КонецПроцедуры

Процедура ЗаписатьВРегистрОбороты7(м) Экспорт
	
	Для Каждого стр Из м Цикл
		
		Менеджер = РегистрыСведений.Обороты7.СоздатьМенеджерЗаписи();
		ЗаполнитьЗначенияСвойств(Менеджер, стр);
		Менеджер.Записать();
		
	КонецЦикла;	
	
КонецПроцедуры

Процедура ОчиститьРегистрОбороты7(Период) Экспорт
	
	Набор = РегистрыСведений.Обороты7.СоздатьНаборЗаписей();
	Набор.Отбор.Период.Установить(Период);
	Набор.Записать();
	
КонецПроцедуры	

#Область ПрограммныйИнтерфейс

Процедура СформироватьЭтотОтчет(ПараметрыОтчета, АдресХранилища) Экспорт
	Лог = Неопределено;
	
	Данные = Новый Соответствие;
	
	ТаблицаБаз = мммСервер.ПолучитьТаблицуСерверов(ПараметрыОтчета.НачалоПериода, ПараметрыОтчета.Организация);

	Прогон = 1;
	МассивОрганизацийСОшибками = Новый Массив;
	//Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
	Для Каждого ВыборкаДетальныеЗаписи Из ТаблицаБаз Цикл
		Если Не ВыборкаДетальныеЗаписи.Пометка Тогда
			Продолжить;
		КонецЕсли;

		ЗатратыСервер.ЗаписатьВЛог(ВыборкаДетальныеЗаписи.Ссылка, Лог);

		ДлительныеОперации.СообщитьПрогресс(Окр(100*Прогон/ТаблицаБаз.Количество()), СокрЛП(ВыборкаДетальныеЗаписи.Ссылка.НаименованиеСокращенное),);
		Если НЕ ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.Сервер)
			ИЛИ НЕ ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.База)
			ИЛИ НЕ ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.Пользователь) Тогда
			Продолжить;
		КонецЕсли;	

		Актуальность = РегистрыСведений.АктуальностьОрганизаций.ПолучитьПоследнее(ПараметрыОтчета.КонецПериода, Новый Структура("Организация", ВыборкаДетальныеЗаписи.Ссылка));
		Если НЕ Актуальность.Активна Тогда 
			Продолжить;
		КонецЕсли;	
		
		Попытка
			СоединениеУстановлено = Ложь;
			Для сч = 1 По 3 Цикл
				Попытка
					Прокси = мммСервер.ПолучитьПрокси(ВыборкаДетальныеЗаписи.Сервер, 
						ВыборкаДетальныеЗаписи.База,
						ВыборкаДетальныеЗаписи.Пользователь,
						ВыборкаДетальныеЗаписи.Пароль
					);
					СоединениеУстановлено = Истина;
					Прервать;
				Исключение
					Если Сч = 3 Тогда
						ЗатратыСервер.ЗаписатьВЛог(ВыборкаДетальныеЗаписи.Ссылка, Лог, Истина, ОписаниеОшибки());
					КонецЕсли;
				КонецПопытки;
			КонецЦикла;
			Если НЕ СоединениеУстановлено Тогда
				Продолжить;
			КонецЕсли;
			
			Если НЕ ПараметрыОтчета.Тестирование Тогда
			
				ТабличныйДокумент = Новый ТабличныйДокумент;
				Макет = Обработки.МММСервис.ПолучитьМакет("МакетОСВ");
				/////////////////////////////////////////////////////////
				// Выведем шапку
				
				ОбластьМакета = Макет.ПолучитьОбласть("ЗголовокОтчета");
				ОбластьРазделитель = Макет.ПолучитьОбласть("Разделитель");
				ТабличныйДокумент.Вывести(ОбластьМакета);
				ТабличныйДокумент.Вывести(ОбластьРазделитель);
				ОбластьМакета = Макет.ПолучитьОбласть("ОтборПериод");
				ОбластьМакета.Параметры.Период = ""+Формат(ПараметрыОтчета.НачалоПериода, "ДФ=dd.MM.yyyy") + " - " + Формат(ПараметрыОтчета.КонецПериода, "ДФ=dd.MM.yyyy");
				//ВысотаЗаголовка = ОбластьМакета.ВысотаТаблицы;                                      			
				ТабличныйДокумент.Вывести(ОбластьМакета);
				
				ОбластьМакета = Макет.ПолучитьОбласть("ШапкаО");
				ОбластьМакета.Параметры.Организация = ВыборкаДетальныеЗаписи.Ссылка.НаименованиеСокращенное;
				ТабличныйДокумент.Вывести(ОбластьМакета);				
				
				/////////////////////////////////////////////////////////
				// Формирование данных
				
				ПоСчету50(ВыборкаДетальныеЗаписи.Ссылка, ТабличныйДокумент, ПараметрыОтчета, Прокси, Макет);
				
				ОбластьМакета = Макет.ПолучитьОбласть("ШапкаО");
				ОбластьМакета.Параметры.Организация = ВыборкаДетальныеЗаписи.Ссылка.НаименованиеСокращенное;
				ТабличныйДокумент.Вывести(ОбластьМакета);	
				
				ПоСчету51(ВыборкаДетальныеЗаписи.Ссылка, ТабличныйДокумент, ПараметрыОтчета, Прокси, Макет);
				
				ОбластьМакета = Макет.ПолучитьОбласть("ШапкаО");
				ОбластьМакета.Параметры.Организация = ВыборкаДетальныеЗаписи.Ссылка.НаименованиеСокращенное;
				ТабличныйДокумент.Вывести(ОбластьМакета);	
				
				ПоСчету60(ВыборкаДетальныеЗаписи.Ссылка, ТабличныйДокумент, ПараметрыОтчета, Прокси, Макет);
				
				
				ОбластьМакета = Макет.ПолучитьОбласть("ШапкаО");
				ОбластьМакета.Параметры.Организация = ВыборкаДетальныеЗаписи.Ссылка.НаименованиеСокращенное;
				ТабличныйДокумент.Вывести(ОбластьМакета);	
				
				ПоСчету62(ВыборкаДетальныеЗаписи.Ссылка, ТабличныйДокумент, ПараметрыОтчета, Прокси, Макет);			
				
				Данные.Вставить(ВыборкаДетальныеЗаписи.Ссылка, Новый Структура("ТабДок,Поток",ТабличныйДокумент, Неопределено));
			
			Иначе
				
				ОСКД = Обработки.МММСервис.ПолучитьМакет("МакетобОроты50516062");	
				
				// сериализуем
				ЗаписьXML = Новый ЗаписьXML;
				ЗаписьXML.УстановитьСтроку();
				СериализаторXDTO.ЗаписатьXML(ЗаписьXML, ОСКД);
				стрОСКД = ЗаписьXML.Закрыть();

				Если ВыборкаДетальныеЗаписи.Ссылка.БазаУТП Тогда
					стрОСКД = СтрЗаменить(стрОСКД, "РасчетныеСчета", РегистрыСведений.Меппинг.ПолучитьЗамену(ВыборкаДетальныеЗаписи.Ссылка, "РасчетныеСчета"));
					стрОСКД = СтрЗаменить(стрОСКД, "<dcsset:comparisonType>Equal</dcsset:comparisonType>", "<dcsset:comparisonType>InHierarchy</dcsset:comparisonType>");
				КонецЕсли;

				ВыполняемыйКод = СтрШаблон("
					|// десериализуем макет
					|ЧтениеXML = Новый ЧтениеXML;
					|ЧтениеXML.УстановитьСтроку(""%1"");
					|ОСКД = СериализаторXDTO.ПрочитатьXML(ЧтениеXML);
					|
					|НастройкиОСКД = ОСКД.НастройкиПоУмолчанию;
					|
					|ТаблДокум = Новый ТабличныйДокумент;
					|ПараметрыДанныхОСКД = НастройкиОСКД.ПараметрыДанных.Элементы;
					|ЭлементОрганизация = ПараметрыДанныхОСКД.Найти(""Организация"");
					|ЭлементОрганизация.Использование = Истина;
					|"+?(ВыборкаДетальныеЗаписи.Ссылка.БазаУТП,"
					|Выборка = Справочники.Организации.Выбрать();
					|Выборка.Следующий();
					|ЭлементОрганизация.Значение = Выборка.Ссылка;","
					|ЭлементОрганизация.Значение = Справочники.Организации.НайтиПоРеквизиту(""ИНН"", ""%2"");
					|")+"
					|ЭлементНачалоПериода = ПараметрыДанныхОСКД.Найти(""НачалоПериода"");
					|ЭлементНачалоПериода.Использование = Истина;
					|ЭлементНачалоПериода.Значение = НачалоДня(Дата(%3));
					|
					|ЭлементКонецПериода = ПараметрыДанныхОСКД.Найти(""КонецПериода"");
					|ЭлементКонецПериода.Использование = Истина;
				//	|ЭлементКонецПериода.Значение = Новый Граница(КонецДня(Дата(%4)),ВидГраницы.Включая);					
					|ЭлементКонецПериода.Значение = КонецДня(Дата(%4));					
					|
					|КомпоновщикМакетаОСКД = Новый КомпоновщикМакетаКомпоновкиДанных;
					|Макет = КомпоновщикМакетаОСКД.Выполнить(ОСКД, НастройкиОСКД);
					|
					|ПроцессорКомпоновкиОСКД = Новый ПроцессорКомпоновкиДанных;
					|ПроцессорКомпоновкиОСКД.Инициализировать(Макет);
					|
					|ПроцессорВыводаОСКД = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
					|ПроцессорВыводаОСКД.УстановитьДокумент(ТаблДокум);
					|ПроцессорВыводаОСКД.Вывести(ПроцессорКомпоновкиОСКД);
					|
					|КоличествоУровней = ТаблДокум.КоличествоУровнейГруппировокСтрок();
					|Для Уровень = 1 По КоличествоУровней - 1 Цикл
					|	ТаблДокум.ПоказатьУровеньГруппировокСтрок(КоличествоУровней - Уровень);
					|КонецЦикла;
					|
					|ЗаписьXML = Новый ЗаписьXML;
					|ЗаписьXML.УстановитьСтроку();
					|СериализаторXDTO.ЗаписатьXML(ЗаписьXML, ТаблДокум);
					|стрОСКД = ЗаписьXML.Закрыть();	
					|
					|ВозвращаемоеЗначение = стрОСКД;
					|"
					, СтрЗаменить(СтрЗаменить(стрОСКД,"""",""""""), Символы.ПС, Символы.ПС+"|")
					, ВыборкаДетальныеЗаписи.Ссылка.ИНН
					, Формат(ПараметрыОтчета.НачалоПериода, "ДФ=yyyy,MM,dd")
					, Формат(ПараметрыОтчета.КонецПериода, "ДФ=yyyy,MM,dd")
				);  
				
				Ответ = мммСервер.ДеСериализовать(
					Прокси.RunCode(ВыполняемыйКод)
				);
				
				Если НЕ Ответ.Ошибка Тогда
					ЧтениеXML = Новый ЧтениеXML;
					ЧтениеXML.УстановитьСтроку(Ответ.Результат);
					ТабДок = СериализаторXDTO.ПрочитатьXML(ЧтениеXML);

					Если ВыборкаДетальныеЗаписи.Ссылка.БазаУТП Тогда
						Область = ТабДок.НайтиТекст("Организация: Бернуллі компані");
						Если Не Область = Неопределено Тогда
							Область.Текст = "Организация: "+ВыборкаДетальныеЗаписи.Ссылка;
						КонецЕсли;
					КонецЕсли;

					Данные.Вставить(ВыборкаДетальныеЗаписи.Ссылка, Новый Структура("ТабДок,Поток", ТабДок, Неопределено));
				Иначе
					ЗатратыСервер.ЗаписатьВЛог(ВыборкаДетальныеЗаписи.Ссылка, Лог, Истина, Ответ.ОписаниеОшибки);
				КонецЕсли;
			КонецЕсли;
			
		Исключение
			МассивОрганизацийСОшибками.Добавить(ВыборкаДетальныеЗаписи.Ссылка);
			ЗатратыСервер.ЗаписатьВЛог(ВыборкаДетальныеЗаписи.Ссылка, Лог, Истина, ОписаниеОшибки());
			ЗаписьЖурналаРегистрации("Отчет затраты", УровеньЖурналаРегистрации.Ошибка, ,,ОписаниеОшибки());
		КонецПопытки;
		ЗатратыСервер.ЗаписатьВЛог(ВыборкаДетальныеЗаписи.Ссылка, Лог, Ложь);
		Прогон = Прогон + 1;
	КонецЦикла;
	
	ПарамФайлов = Новый Структура("ТаблДокумент,ИмяОрганизации,МассивОрганизацийСОшибками,Лог", 
		Данные, "", МассивОрганизацийСОшибками, ЗатратыСервер.СформироватьТабДокЛог(Лог)
	);
	
	ПоместитьВоВременноеХранилище(ПарамФайлов, АдресХранилища);	
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ПоСчету50(Организация, ТабличныйДокумент, ПараметрыОтчета, Прокси, Макет)
	
	ВыполняемыйКод = "Запрос = Новый Запрос;
		|Запрос.УстановитьПараметр(""НачалоПериода"", 		НачалоДня(Дата("+Формат(ПараметрыОтчета.НачалоПериода,"ДФ=yyyy,MM,dd")+")));
		|Запрос.УстановитьПараметр(""КонецПериода"", 	Новый Граница(КонецДня(Дата("+Формат(ПараметрыОтчета.КонецПериода,"ДФ=yyyy,MM,dd")+")), ВидГраницы.Включая));
		|Запрос.УстановитьПараметр(""Организация"", 	"""+Организация.ИНН+""");
	    |Запрос.Текст = ""ВЫБРАТЬ
		||	ПРЕДСТАВЛЕНИЕ(ХозрасчетныйОбороты.Организация) КАК Организация,
		||	ХозрасчетныйОбороты.Счет.Код КАК Счет,
		||	ПРЕДСТАВЛЕНИЕ(ХозрасчетныйОбороты.Субконто1) КАК Субконто1,
		||	ХозрасчетныйОбороты.КорСчет.Код КАК КорСчет,
		||	ПРЕДСТАВЛЕНИЕ(ХозрасчетныйОбороты.КорСубконто1) КАК КорСубконто1,
		||	ХозрасчетныйОбороты.СуммаОборотДт КАК ОборотДт,
		||	ХозрасчетныйОбороты.СуммаОборотКт КАК ОборотКт,
		||	ПРЕДСТАВЛЕНИЕ(ХозрасчетныйОбороты.Субконто2) КАК Субконто2,
		||	NULL КАК СуммаНачальныйОстатокДт,
		||	NULL КАК СуммаНачальныйОстатокКт,
		||	NULL КАК СуммаКонечныйОстатокДт,
		||	NULL КАК СуммаКонечныйОстатокКт,
		||	""""Обороты"""" КАК Поле1,
		||	ХозрасчетныйОбороты.Период КАК Период
		||ИЗ
		||	РегистрБухгалтерии.Хозрасчетный.Обороты(&НачалоПериода, &КонецПериода, Месяц, Счет В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.Касса)), , Организация.ИНН = &Организация, , ) КАК ХозрасчетныйОбороты
		||
		||ОБЪЕДИНИТЬ ВСЕ
		||
		||ВЫБРАТЬ
		||	ПРЕДСТАВЛЕНИЕ(ХозрасчетныйОстаткиИОбороты.Организация),
		||	ХозрасчетныйОстаткиИОбороты.Счет.Код,
		||	ПРЕДСТАВЛЕНИЕ(ХозрасчетныйОстаткиИОбороты.Субконто1),
		||	NULL,
		||	NULL,
		||	NULL,
		||	NULL,
		||	ПРЕДСТАВЛЕНИЕ(ХозрасчетныйОстаткиИОбороты.Субконто2),
		||	ХозрасчетныйОстаткиИОбороты.СуммаНачальныйОстатокДт,
		||	ХозрасчетныйОстаткиИОбороты.СуммаНачальныйОстатокКт,
		||	ХозрасчетныйОстаткиИОбороты.СуммаКонечныйОстатокДт,
		||	ХозрасчетныйОстаткиИОбороты.СуммаКонечныйОстатокКт,
		||	""""Остатки"""",
		||	ХозрасчетныйОстаткиИОбороты.Период
		||ИЗ
		||	РегистрБухгалтерии.Хозрасчетный.ОстаткиИОбороты(&НачалоПериода, &КонецПериода, Месяц, , Счет В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.Касса)), , Организация.ИНН = &Организация) КАК ХозрасчетныйОстаткиИОбороты
		||ИТОГИ
		||	СУММА(ОборотДт),
		||	СУММА(ОборотКт),
		||	СУММА(СуммаНачальныйОстатокДт),
		||	СУММА(СуммаНачальныйОстатокКт),
		||	СУММА(СуммаКонечныйОстатокДт),
		||	СУММА(СуммаКонечныйОстатокКт)
		||ПО
		||	Период ПЕРИОДАМИ(МЕСЯЦ, , ),
		||	Счет ИЕРАРХИЯ,
		||	Субконто1,
		||	КорСчет ИЕРАРХИЯ,
		||	КорСубконто1"";
		|РезультатЗапроса = Запрос.Выполнить();
		|СпособОбхода = ОбходРезультатаЗапроса.ПоГруппировкамСИерархией;
		|ВозвращаемоеЗначение =  РезультатЗапроса.Выгрузить(СпособОбхода);";
	Ответ = мммСервер.ДеСериализовать(
		Прокси.RunCode(ВыполняемыйКод)
	);
	
	Если НЕ Ответ.Ошибка Тогда
		ОбластьИтог = Макет.ПолучитьОбласть("Итог");
		ТабличныйДокумент.НачатьАвтогруппировкуСтрок();
		ВывестиДерево(ТабличныйДокумент, Ответ.Результат.Строки, Макет, ОбластьИтог);
		ТабличныйДокумент.ЗакончитьАвтогруппировкуСтрок();
		ТабличныйДокумент.Вывести(ОбластьИтог);
	КонецЕсли;	
	
КонецПроцедуры	

Процедура ПоСчету51(Организация, ТабличныйДокумент, ПараметрыОтчета, Прокси, Макет)
	
	ВыполняемыйКод = "Запрос = Новый Запрос;
		|Запрос.УстановитьПараметр(""НачалоПериода"", 		НачалоДня(Дата("+Формат(ПараметрыОтчета.НачалоПериода,"ДФ=yyyy,MM,dd")+")));
		|Запрос.УстановитьПараметр(""КонецПериода"", 	Новый Граница(КонецДня(Дата("+Формат(ПараметрыОтчета.КонецПериода,"ДФ=yyyy,MM,dd")+")), ВидГраницы.Включая));
		|Запрос.УстановитьПараметр(""Организация"", 	"""+Организация.ИНН+""");
	    |Запрос.Текст = ""ВЫБРАТЬ
		||	ПРЕДСТАВЛЕНИЕ(ХозрасчетныйОбороты.Организация) КАК Организация,
		||	ХозрасчетныйОбороты.Счет.Код КАК Счет,
		||	ПРЕДСТАВЛЕНИЕ(ХозрасчетныйОбороты.Субконто2) КАК Субконто1,
		||	ХозрасчетныйОбороты.КорСчет.Код КАК КорСчет,
		||	ПРЕДСТАВЛЕНИЕ(ХозрасчетныйОбороты.КорСубконто1) КАК КорСубконто1,
		||	ХозрасчетныйОбороты.СуммаОборотДт КАК ОборотДт,
		||	ХозрасчетныйОбороты.СуммаОборотКт КАК ОборотКт,
		||	ПРЕДСТАВЛЕНИЕ(ХозрасчетныйОбороты.Субконто2) КАК Субконто2,
		||	NULL КАК СуммаНачальныйОстатокДт,
		||	NULL КАК СуммаНачальныйОстатокКт,
		||	NULL КАК СуммаКонечныйОстатокДт,
		||	NULL КАК СуммаКонечныйОстатокКт,
		||	""""Обороты"""" КАК Поле1,
		||	ХозрасчетныйОбороты.Период КАК Период
		||ИЗ
		||	РегистрБухгалтерии.Хозрасчетный.Обороты(&НачалоПериода, &КонецПериода, Месяц, Счет В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетныеСчета)), , Организация.ИНН = &Организация, , ) КАК ХозрасчетныйОбороты
		||
		||ОБЪЕДИНИТЬ ВСЕ
		||
		||ВЫБРАТЬ
		||	ПРЕДСТАВЛЕНИЕ(ХозрасчетныйОстаткиИОбороты.Организация),
		||	ХозрасчетныйОстаткиИОбороты.Счет.Код,
		||	ПРЕДСТАВЛЕНИЕ(ХозрасчетныйОстаткиИОбороты.Субконто2),
		||	NULL,
		||	NULL,
		||	NULL,
		||	NULL,
		||	ПРЕДСТАВЛЕНИЕ(ХозрасчетныйОстаткиИОбороты.Субконто2),
		||	ХозрасчетныйОстаткиИОбороты.СуммаНачальныйОстатокДт,
		||	ХозрасчетныйОстаткиИОбороты.СуммаНачальныйОстатокКт,
		||	ХозрасчетныйОстаткиИОбороты.СуммаКонечныйОстатокДт,
		||	ХозрасчетныйОстаткиИОбороты.СуммаКонечныйОстатокКт,
		||	""""Остатки"""",
		||	ХозрасчетныйОстаткиИОбороты.Период
		||ИЗ
		||	РегистрБухгалтерии.Хозрасчетный.ОстаткиИОбороты(&НачалоПериода, &КонецПериода, Месяц, , Счет В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетныеСчета)), , Организация.ИНН = &Организация) КАК ХозрасчетныйОстаткиИОбороты
		||ИТОГИ
		||	СУММА(ОборотДт),
		||	СУММА(ОборотКт),
		||	СУММА(СуммаНачальныйОстатокДт),
		||	СУММА(СуммаНачальныйОстатокКт),
		||	СУММА(СуммаКонечныйОстатокДт),
		||	СУММА(СуммаКонечныйОстатокКт)
		||ПО
		||	Период ПЕРИОДАМИ(МЕСЯЦ, , ),
		||	Счет ИЕРАРХИЯ,
		||	Субконто2,
		||	КорСчет ИЕРАРХИЯ,
		||	КорСубконто1"";
		|РезультатЗапроса = Запрос.Выполнить();
		|СпособОбхода = ОбходРезультатаЗапроса.ПоГруппировкамСИерархией;
		|ВозвращаемоеЗначение =  РезультатЗапроса.Выгрузить(СпособОбхода);";
	Ответ = мммСервер.ДеСериализовать(
		Прокси.RunCode(ВыполняемыйКод)
	);
	
	Если НЕ Ответ.Ошибка Тогда
		ОбластьИтог = Макет.ПолучитьОбласть("Итог");
		ТабличныйДокумент.НачатьАвтогруппировкуСтрок();
		ВывестиДерево(ТабличныйДокумент, Ответ.Результат.Строки, Макет, ОбластьИтог);
		ТабличныйДокумент.ЗакончитьАвтогруппировкуСтрок();
		ТабличныйДокумент.Вывести(ОбластьИтог);
	КонецЕсли;	
	
КонецПроцедуры

Процедура ПоСчету60(Организация, ТабличныйДокумент, ПараметрыОтчета, Прокси, Макет)
	
	ВыполняемыйКод = "Запрос = Новый Запрос;
		|Запрос.УстановитьПараметр(""НачалоПериода"", 		НачалоДня(Дата("+Формат(ПараметрыОтчета.НачалоПериода,"ДФ=yyyy,MM,dd")+")));
		|Запрос.УстановитьПараметр(""КонецПериода"", 	Новый Граница(КонецДня(Дата("+Формат(ПараметрыОтчета.КонецПериода,"ДФ=yyyy,MM,dd")+")), ВидГраницы.Включая));
		|Запрос.УстановитьПараметр(""Организация"", 	"""+Организация.ИНН+""");
	    |Запрос.Текст = ""ВЫБРАТЬ
		||	ПРЕДСТАВЛЕНИЕ(ХозрасчетныйОбороты.Организация) КАК Организация,
		||	ХозрасчетныйОбороты.Счет.Код КАК Счет,
		||	ПРЕДСТАВЛЕНИЕ(ХозрасчетныйОбороты.Субконто1) КАК Субконто1,
		||	ХозрасчетныйОбороты.СуммаОборотДт КАК ОборотДт,
		||	ХозрасчетныйОбороты.СуммаОборотКт КАК ОборотКт,
		||	NULL КАК СуммаНачальныйОстатокДт,
		||	NULL КАК СуммаНачальныйОстатокКт,
		||	NULL КАК СуммаКонечныйОстатокДт,
		||	NULL КАК СуммаКонечныйОстатокКт,
		||	""""Обороты"""" КАК Поле1,
		||	ХозрасчетныйОбороты.Период КАК Период
		||ИЗ
		||	РегистрБухгалтерии.Хозрасчетный.Обороты(&НачалоПериода, &КонецПериода, Месяц, Счет В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыСПоставщикамиИПодрядчиками)), , Организация.ИНН = &Организация, , ) КАК ХозрасчетныйОбороты
		||
		||ОБЪЕДИНИТЬ ВСЕ
		||
		||ВЫБРАТЬ
		||	ПРЕДСТАВЛЕНИЕ(ХозрасчетныйОстаткиИОбороты.Организация),
		||	ХозрасчетныйОстаткиИОбороты.Счет.Код,
		||	ПРЕДСТАВЛЕНИЕ(ХозрасчетныйОстаткиИОбороты.Субконто1),
		||	NULL,
		||	NULL,
		||	ХозрасчетныйОстаткиИОбороты.СуммаНачальныйОстатокДт,
		||	ХозрасчетныйОстаткиИОбороты.СуммаНачальныйОстатокКт,
		||	ХозрасчетныйОстаткиИОбороты.СуммаКонечныйОстатокДт,
		||	ХозрасчетныйОстаткиИОбороты.СуммаКонечныйОстатокКт,
		||	""""Остатки"""",
		||	ХозрасчетныйОстаткиИОбороты.Период
		||ИЗ
		||	РегистрБухгалтерии.Хозрасчетный.ОстаткиИОбороты(&НачалоПериода, &КонецПериода, Месяц, , Счет В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыСПоставщикамиИПодрядчиками)), , Организация.ИНН = &Организация) КАК ХозрасчетныйОстаткиИОбороты
		||ИТОГИ
		||	СУММА(ОборотДт),
		||	СУММА(ОборотКт),
		||	СУММА(СуммаНачальныйОстатокДт),
		||	СУММА(СуммаНачальныйОстатокКт),
		||	СУММА(СуммаКонечныйОстатокДт),
		||	СУММА(СуммаКонечныйОстатокКт)
		||ПО
		||	Период ПЕРИОДАМИ(МЕСЯЦ, , ),
		||	Счет ИЕРАРХИЯ,
		||	Субконто1"";
		|РезультатЗапроса = Запрос.Выполнить();
		|СпособОбхода = ОбходРезультатаЗапроса.ПоГруппировкамСИерархией;
		|ВозвращаемоеЗначение =  РезультатЗапроса.Выгрузить(СпособОбхода);";
	Ответ = мммСервер.ДеСериализовать(
		Прокси.RunCode(ВыполняемыйКод)
	);
	
	Если НЕ Ответ.Ошибка Тогда
		ОбластьИтог = Макет.ПолучитьОбласть("Итог");
		ТабличныйДокумент.НачатьАвтогруппировкуСтрок();
		ВывестиДерево(ТабличныйДокумент, Ответ.Результат.Строки, Макет, ОбластьИтог);
		ТабличныйДокумент.ЗакончитьАвтогруппировкуСтрок();
		ТабличныйДокумент.Вывести(ОбластьИтог);
	КонецЕсли;	
	
КонецПроцедуры

Процедура ПоСчету62(Организация, ТабличныйДокумент, ПараметрыОтчета, Прокси, Макет)
	
	ВыполняемыйКод = "Запрос = Новый Запрос;
		|Запрос.УстановитьПараметр(""НачалоПериода"", 		НачалоДня(Дата("+Формат(ПараметрыОтчета.НачалоПериода,"ДФ=yyyy,MM,dd")+")));
		|Запрос.УстановитьПараметр(""КонецПериода"", 	Новый Граница(КонецДня(Дата("+Формат(ПараметрыОтчета.КонецПериода,"ДФ=yyyy,MM,dd")+")), ВидГраницы.Включая));
		|Запрос.УстановитьПараметр(""Организация"", 	"""+Организация.ИНН+""");
	    |Запрос.Текст = ""ВЫБРАТЬ
		||	ПРЕДСТАВЛЕНИЕ(ХозрасчетныйОбороты.Организация) КАК Организация,
		||	ХозрасчетныйОбороты.Счет.Код КАК Счет,
		||	ХозрасчетныйОбороты.Субконто1.Наименование КАК Субконто1,
		||	ХозрасчетныйОбороты.СуммаОборотДт КАК ОборотДт,
		||	ХозрасчетныйОбороты.СуммаОборотКт КАК ОборотКт,
		||	NULL КАК СуммаНачальныйОстатокДт,
		||	NULL КАК СуммаНачальныйОстатокКт,
		||	NULL КАК СуммаКонечныйОстатокДт,
		||	NULL КАК СуммаКонечныйОстатокКт,
		||	""""Обороты"""" КАК Поле1,
		||	ХозрасчетныйОбороты.Период КАК Период
		||ИЗ
		||	РегистрБухгалтерии.Хозрасчетный.Обороты(&НачалоПериода, &КонецПериода, Месяц, Счет В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыСПокупателямиИЗаказчиками)), , Организация.ИНН = &Организация, , ) КАК ХозрасчетныйОбороты
		||
		||ОБЪЕДИНИТЬ ВСЕ
		||
		||ВЫБРАТЬ
		||	ПРЕДСТАВЛЕНИЕ(ХозрасчетныйОстаткиИОбороты.Организация),
		||	ХозрасчетныйОстаткиИОбороты.Счет.Код,
		||	ХозрасчетныйОстаткиИОбороты.Субконто1.Наименование,
		||	NULL,
		||	NULL,
		||	ХозрасчетныйОстаткиИОбороты.СуммаНачальныйОстатокДт,
		||	ХозрасчетныйОстаткиИОбороты.СуммаНачальныйОстатокКт,
		||	ХозрасчетныйОстаткиИОбороты.СуммаКонечныйОстатокДт,
		||	ХозрасчетныйОстаткиИОбороты.СуммаКонечныйОстатокКт,
		||	""""Остатки"""",
		||	ХозрасчетныйОстаткиИОбороты.Период
		||ИЗ
		||	РегистрБухгалтерии.Хозрасчетный.ОстаткиИОбороты(&НачалоПериода, &КонецПериода, Месяц, , Счет В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыСПокупателямиИЗаказчиками)), , Организация.ИНН = &Организация) КАК ХозрасчетныйОстаткиИОбороты
		||ИТОГИ
		||	СУММА(ОборотДт),
		||	СУММА(ОборотКт),
		||	СУММА(СуммаНачальныйОстатокДт),
		||	СУММА(СуммаНачальныйОстатокКт),
		||	СУММА(СуммаКонечныйОстатокДт),
		||	СУММА(СуммаКонечныйОстатокКт)
		||ПО
		||	Период ПЕРИОДАМИ(МЕСЯЦ, , ),
		||	Счет,
		||	Субконто1 ИЕРАРХИЯ"";
		|РезультатЗапроса = Запрос.Выполнить();
		|СпособОбхода = ОбходРезультатаЗапроса.ПоГруппировкамСИерархией;
		|ВозвращаемоеЗначение =  РезультатЗапроса.Выгрузить(СпособОбхода);";
	Ответ = мммСервер.ДеСериализовать(
		Прокси.RunCode(ВыполняемыйКод)
	);
	
	Если НЕ Ответ.Ошибка Тогда
		ОбластьИтог = Макет.ПолучитьОбласть("Итог");
		ТабличныйДокумент.НачатьАвтогруппировкуСтрок();
		ВывестиДерево62(ТабличныйДокумент, Ответ.Результат.Строки, Макет, ОбластьИтог);
		ТабличныйДокумент.ЗакончитьАвтогруппировкуСтрок();
		ТабличныйДокумент.Вывести(ОбластьИтог);
	КонецЕсли;	
	
КонецПроцедуры

Процедура ВывестиДерево(ТабличныйДокумент, СтрокиДерева, Макет, ОбластьИтог = Неопределено)
	

	
	Для Каждого стрДерева из СтрокиДерева Цикл 
		
		Если стрДерева.Уровень() = 0 Тогда
			ЗаполнитьЗначенияСвойств(ОбластьИтог.Параметры, стрДерева);
						
		ИначеЕсли стрДерева.Уровень() = 1 Тогда
			Область = Макет.ПолучитьОбласть("Уровень0"); 
			ЗаполнитьЗначенияСвойств(Область.Параметры, стрДерева);
			Область.Параметры.Счет = Лев(стрДерева.Счет, ?(СтрНайти(стрДерева.Счет, ".") = 0, СтрДлина(стрДерева.Счет), СтрНайти(стрДерева.Счет, ".") - 1));
			ВывестиСтроку(Область, ТабличныйДокумент, стрДерева);		
			
		ИначеЕсли стрДерева.Уровень() = 2 Тогда
			Область = Макет.ПолучитьОбласть("Субконто1"); 
			ЗаполнитьЗначенияСвойств(Область.Параметры, стрДерева);
			ВывестиСтроку(Область, ТабличныйДокумент, стрДерева);	
			
		ИначеЕсли стрДерева.Уровень() = 3 Тогда	
			Попытка
				Область = Макет.ПолучитьОбласть("КорСчет"); 
				ЗаполнитьЗначенияСвойств(Область.Параметры, стрДерева);
				Область.Параметры.КорСчет = Лев(стрДерева.КорСчет, ?(СтрНайти(стрДерева.КорСчет, ".") = 0, СтрДлина(стрДерева.КорСчет), СтрНайти(стрДерева.КорСчет, ".") - 1));
				ВывестиСтроку(Область, ТабличныйДокумент, стрДерева);
			Исключение
			КонецПопытки;
			
		ИначеЕсли стрДерева.Уровень() = 4 Тогда
			Попытка
				Область = Макет.ПолучитьОбласть("КорСубконто1"); 
				ЗаполнитьЗначенияСвойств(Область.Параметры, стрДерева);
				ВывестиСтроку(Область, ТабличныйДокумент, стрДерева);
			Исключение
			КонецПопытки;

		КонецЕсли;	

		Если стрДерева.Строки.Количество() <> 0 Тогда 
			ВывестиДерево(ТабличныйДокумент, стрДерева.Строки, Макет);
		КонецЕсли;	
				
	КонецЦикла;	
	
КонецПроцедуры	

Процедура ВывестиДерево62(ТабличныйДокумент, СтрокиДерева, Макет, ОбластьИтог = Неопределено)
	

	
	Для Каждого стрДерева из СтрокиДерева Цикл 
		
		Если стрДерева.Уровень() = 0 Тогда
			ЗаполнитьЗначенияСвойств(ОбластьИтог.Параметры, стрДерева);
						
		ИначеЕсли стрДерева.Уровень() = 1 Тогда
			Область = Макет.ПолучитьОбласть("Уровень0"); 
			ЗаполнитьЗначенияСвойств(Область.Параметры, стрДерева);
			Область.Параметры.Счет = стрДерева.Счет;
			ВывестиСтроку(Область, ТабличныйДокумент, стрДерева);		
			
		ИначеЕсли стрДерева.Уровень() = 2 Тогда
			Область = Макет.ПолучитьОбласть("Субконто1"); 
			ЗаполнитьЗначенияСвойств(Область.Параметры, стрДерева);
			ВывестиСтроку(Область, ТабличныйДокумент, стрДерева);	
			
		ИначеЕсли стрДерева.Уровень() = 3 Тогда	
			Попытка
				Область = Макет.ПолучитьОбласть("КорСчет"); 
				ЗаполнитьЗначенияСвойств(Область.Параметры, стрДерева);
				Область.Параметры.КорСчет = Лев(стрДерева.КорСчет, ?(СтрНайти(стрДерева.КорСчет, ".") = 0, СтрДлина(стрДерева.КорСчет), СтрНайти(стрДерева.КорСчет, ".") - 1));
				ВывестиСтроку(Область, ТабличныйДокумент, стрДерева);
			Исключение
			КонецПопытки;
			
		ИначеЕсли стрДерева.Уровень() = 4 Тогда
			Попытка
				Область = Макет.ПолучитьОбласть("КорСубконто1"); 
				ЗаполнитьЗначенияСвойств(Область.Параметры, стрДерева);
				ВывестиСтроку(Область, ТабличныйДокумент, стрДерева);
			Исключение
			КонецПопытки;

		КонецЕсли;	

		Если стрДерева.Строки.Количество() <> 0 Тогда 
			ВывестиДерево62(ТабличныйДокумент, стрДерева.Строки, Макет);
		КонецЕсли;	
				
	КонецЦикла;	
	
КонецПроцедуры	

Процедура ВывестиСтроку(Область, ТабличныйДокумент, стрДерева)
	
	Если ЗначениеЗаполнено(стрДерева.ОборотДт) 
		ИЛИ ЗначениеЗаполнено(стрДерева.ОборотКт)
		ИЛИ ЗначениеЗаполнено(стрДерева.СуммаНачальныйОстатокДт)
		ИЛИ ЗначениеЗаполнено(стрДерева.СуммаНачальныйОстатокКт)
		ИЛИ ЗначениеЗаполнено(стрДерева.СуммаКонечныйОстатокДт)
		ИЛИ ЗначениеЗаполнено(стрДерева.СуммаКонечныйОстатокКт) Тогда						
		
		ТабличныйДокумент.Вывести(Область, стрДерева.Уровень());
	КонецЕсли;	
	
КонецПроцедуры	

#КонецОбласти




#КонецОбласти

#Область СлужебныеПроцедурыИФункции
#КонецОбласти



