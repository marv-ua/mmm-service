#Область ПрограммныйИнтерфейс

Процедура СформироватьЭтотОтчет(ПараметрыОтчета, АдресХранилища) Экспорт	
	
	Данные = Новый Соответствие;
	
    ТаблицаБаз = мммСервер.ПолучитьТаблицуСерверов(ПараметрыОтчета.НачалоПериода, ПараметрыОтчета.Организация);
	//Запрос = Новый Запрос;
	//Запрос.Текст = 
	//"ВЫБРАТЬ
	//|	Организации.Ссылка КАК Ссылка,
	//|	РасположениеФирмСрезПоследних.Сервер КАК Сервер,
	//|	РасположениеФирмСрезПоследних.ИмяБазы КАК База,
	//|	РасположениеФирмСрезПоследних.Логин КАК Логин,
	//|	РасположениеФирмСрезПоследних.Пароль КАК Пароль
	//|ИЗ
	//|	Справочник.Организации КАК Организации
	//|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РасположениеФирм.СрезПоследних КАК РасположениеФирмСрезПоследних
	//|		ПО Организации.Ссылка = РасположениеФирмСрезПоследних.Организация
	//|ГДЕ
	//|	Организации.ПометкаУдаления = ЛОЖЬ
	//|";
	//Если ЗначениеЗаполнено(ПараметрыОтчета.Организация) Тогда
	//	Запрос.Текст = Запрос.Текст + "
	//	|	И Организации.Ссылка В ИЕРАРХИИ (&Ссылка)";
	//	Запрос.УстановитьПараметр("Ссылка", ПараметрыОтчета.Организация);
	//КонецЕсли;
	//Запрос.Текст = Запрос.Текст + Символы.ПС + "УПОРЯДОЧИТЬ ПО
	//|	Организации.Наименование";
	//
	//РезультатЗапроса = Запрос.Выполнить();
	//
	//ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();

	Прогон = 1;
	МассивОрганизацийСОшибками = Новый Массив;
	//Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
	Для Каждого ВыборкаДетальныеЗаписи Из ТаблицаБаз Цикл
		Если Не ВыборкаДетальныеЗаписи.Пометка Тогда
			Продолжить;
		КонецЕсли;

		ДлительныеОперации.СообщитьПрогресс(Окр(100*Прогон/ТаблицаБаз.Количество()), СокрЛП(ВыборкаДетальныеЗаписи.Ссылка.НаименованиеСокращенное),);
		Если НЕ ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.Сервер)
			ИЛИ НЕ ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.База)
			ИЛИ НЕ ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.Пользователь) Тогда
			Продолжить;
		КонецЕсли;	

		Актуальность = РегистрыСведений.АктуальностьОрганизаций.ПолучитьПоследнее(ПараметрыОтчета.КонецПериода, Новый Структура("Организация", ВыборкаДетальныеЗаписи.Ссылка));
		Если НЕ Актуальность.Активна Тогда 
			Продолжить;
		КонецЕсли;	
		
		Попытка
			СоединениеУстановлено = Ложь;
			Для сч = 1 По 3 Цикл
				Попытка
					Прокси = мммСервер.ПолучитьПрокси(ВыборкаДетальныеЗаписи.Сервер, 
						ВыборкаДетальныеЗаписи.База,
						ВыборкаДетальныеЗаписи.Пользователь,
						ВыборкаДетальныеЗаписи.Пароль
					);
					СоединениеУстановлено = Истина;
					Прервать;
				Исключение
				КонецПопытки;		
			КонецЦикла;
			Если НЕ СоединениеУстановлено Тогда
				Продолжить;
			КонецЕсли;		
			
			Если НЕ ПараметрыОтчета.Тестирование Тогда
			
				ТабличныйДокумент = Новый ТабличныйДокумент;
				Макет = Обработки.МММСервис.ПолучитьМакет("МакетОСВ");
				/////////////////////////////////////////////////////////
				// Выведем шапку
				
				ОбластьМакета = Макет.ПолучитьОбласть("ЗголовокОтчета");
				ОбластьРазделитель = Макет.ПолучитьОбласть("Разделитель");
				ТабличныйДокумент.Вывести(ОбластьМакета);
				ТабличныйДокумент.Вывести(ОбластьРазделитель);
				ОбластьМакета = Макет.ПолучитьОбласть("ОтборПериод");
				ОбластьМакета.Параметры.Период = ""+Формат(ПараметрыОтчета.НачалоПериода, "ДФ=dd.MM.yyyy") + " - " + Формат(ПараметрыОтчета.КонецПериода, "ДФ=dd.MM.yyyy");
				//ВысотаЗаголовка = ОбластьМакета.ВысотаТаблицы;                                      			
				ТабличныйДокумент.Вывести(ОбластьМакета);
				
				ОбластьМакета = Макет.ПолучитьОбласть("ШапкаО");
				ОбластьМакета.Параметры.Организация = ВыборкаДетальныеЗаписи.Ссылка.НаименованиеСокращенное;
				ТабличныйДокумент.Вывести(ОбластьМакета);				
				
				/////////////////////////////////////////////////////////
				// Формирование данных
				
				ПоСчету50(ВыборкаДетальныеЗаписи.Ссылка, ТабличныйДокумент, ПараметрыОтчета, Прокси, Макет);
				
				ОбластьМакета = Макет.ПолучитьОбласть("ШапкаО");
				ОбластьМакета.Параметры.Организация = ВыборкаДетальныеЗаписи.Ссылка.НаименованиеСокращенное;
				ТабличныйДокумент.Вывести(ОбластьМакета);	
				
				ПоСчету51(ВыборкаДетальныеЗаписи.Ссылка, ТабличныйДокумент, ПараметрыОтчета, Прокси, Макет);
				
				ОбластьМакета = Макет.ПолучитьОбласть("ШапкаО");
				ОбластьМакета.Параметры.Организация = ВыборкаДетальныеЗаписи.Ссылка.НаименованиеСокращенное;
				ТабличныйДокумент.Вывести(ОбластьМакета);	
				
				ПоСчету60(ВыборкаДетальныеЗаписи.Ссылка, ТабличныйДокумент, ПараметрыОтчета, Прокси, Макет);
				
				
				ОбластьМакета = Макет.ПолучитьОбласть("ШапкаО");
				ОбластьМакета.Параметры.Организация = ВыборкаДетальныеЗаписи.Ссылка.НаименованиеСокращенное;
				ТабличныйДокумент.Вывести(ОбластьМакета);	
				
				ПоСчету62(ВыборкаДетальныеЗаписи.Ссылка, ТабличныйДокумент, ПараметрыОтчета, Прокси, Макет);			
				
				Данные.Вставить(ВыборкаДетальныеЗаписи.Ссылка, Новый Структура("ТабДок,Поток",ТабличныйДокумент, Неопределено));
			
			Иначе
				
				ОСКД = Обработки.МММСервис.ПолучитьМакет("МакетобОроты50516062");	
				
				// сериализуем
				ЗаписьXML = Новый ЗаписьXML;
				ЗаписьXML.УстановитьСтроку();
				СериализаторXDTO.ЗаписатьXML(ЗаписьXML, ОСКД);
				стрОСКД = ЗаписьXML.Закрыть();

				Если ВыборкаДетальныеЗаписи.Ссылка.БазаУТП Тогда
					стрОСКД = СтрЗаменить(стрОСКД, "РасчетныеСчета", РегистрыСведений.Меппинг.ПолучитьЗамену(ВыборкаДетальныеЗаписи.Ссылка, "РасчетныеСчета"));
					стрОСКД = СтрЗаменить(стрОСКД, "<dcsset:comparisonType>Equal</dcsset:comparisonType>", "<dcsset:comparisonType>InHierarchy</dcsset:comparisonType>");
				КонецЕсли;

				ВыполняемыйКод = СтрШаблон("
					|// десериализуем макет
					|ЧтениеXML = Новый ЧтениеXML;
					|ЧтениеXML.УстановитьСтроку(""%1"");
					|ОСКД = СериализаторXDTO.ПрочитатьXML(ЧтениеXML);
					|
					|НастройкиОСКД = ОСКД.НастройкиПоУмолчанию;
					|
					|ТаблДокум = Новый ТабличныйДокумент;
					|ПараметрыДанныхОСКД = НастройкиОСКД.ПараметрыДанных.Элементы;
					|ЭлементОрганизация = ПараметрыДанныхОСКД.Найти(""Организация"");
					|ЭлементОрганизация.Использование = Истина;
					|"+?(ВыборкаДетальныеЗаписи.Ссылка.БазаУТП,"
					|Выборка = Справочники.Организации.Выбрать();
					|Выборка.Следующий();
					|ЭлементОрганизация.Значение = Выборка.Ссылка;","
					|ЭлементОрганизация.Значение = Справочники.Организации.НайтиПоРеквизиту(""ИНН"", ""%2"");
					|")+"
					|ЭлементНачалоПериода = ПараметрыДанныхОСКД.Найти(""НачалоПериода"");
					|ЭлементНачалоПериода.Использование = Истина;
					|ЭлементНачалоПериода.Значение = НачалоДня(Дата(%3));
					|
					|ЭлементКонецПериода = ПараметрыДанныхОСКД.Найти(""КонецПериода"");
					|ЭлементКонецПериода.Использование = Истина;
				//	|ЭлементКонецПериода.Значение = Новый Граница(КонецДня(Дата(%4)),ВидГраницы.Включая);					
					|ЭлементКонецПериода.Значение = КонецДня(Дата(%4));					
					|
					|КомпоновщикМакетаОСКД = Новый КомпоновщикМакетаКомпоновкиДанных;
					|Макет = КомпоновщикМакетаОСКД.Выполнить(ОСКД, НастройкиОСКД);
					|
					|ПроцессорКомпоновкиОСКД = Новый ПроцессорКомпоновкиДанных;
					|ПроцессорКомпоновкиОСКД.Инициализировать(Макет);
					|
					|ПроцессорВыводаОСКД = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
					|ПроцессорВыводаОСКД.УстановитьДокумент(ТаблДокум);
					|ПроцессорВыводаОСКД.Вывести(ПроцессорКомпоновкиОСКД);
					|
					|КоличествоУровней = ТаблДокум.КоличествоУровнейГруппировокСтрок();
					|Для Уровень = 1 По КоличествоУровней - 1 Цикл
					|	ТаблДокум.ПоказатьУровеньГруппировокСтрок(КоличествоУровней - Уровень);
					|КонецЦикла;
					|
					|ЗаписьXML = Новый ЗаписьXML;
					|ЗаписьXML.УстановитьСтроку();
					|СериализаторXDTO.ЗаписатьXML(ЗаписьXML, ТаблДокум);
					|стрОСКД = ЗаписьXML.Закрыть();	
					|
					|ВозвращаемоеЗначение = стрОСКД;
					|"
					, СтрЗаменить(СтрЗаменить(стрОСКД,"""",""""""), Символы.ПС, Символы.ПС+"|")
					, ВыборкаДетальныеЗаписи.Ссылка.ИНН
					, Формат(ПараметрыОтчета.НачалоПериода, "ДФ=yyyy,MM,dd")
					, Формат(ПараметрыОтчета.КонецПериода, "ДФ=yyyy,MM,dd")
				);  
				
				Ответ = мммСервер.ДеСериализовать(
					Прокси.RunCode(ВыполняемыйКод)
				);
				
				Если НЕ Ответ.Ошибка Тогда
					ЧтениеXML = Новый ЧтениеXML;
					ЧтениеXML.УстановитьСтроку(Ответ.Результат);
					ТабДок = СериализаторXDTO.ПрочитатьXML(ЧтениеXML);

					Если ВыборкаДетальныеЗаписи.Ссылка.БазаУТП Тогда
						Область = ТабДок.НайтиТекст("Организация: Бернуллі компані");
						Если Не Область = Неопределено Тогда
							Область.Текст = "Организация: "+ВыборкаДетальныеЗаписи.Ссылка;
						КонецЕсли;
					КонецЕсли;

					Данные.Вставить(ВыборкаДетальныеЗаписи.Ссылка, Новый Структура("ТабДок,Поток", ТабДок, Неопределено));
				КонецЕсли;	
			КонецЕсли;
			
		Исключение
			МассивОрганизацийСОшибками.Добавить(ВыборкаДетальныеЗаписи.Ссылка);
			ЗаписьЖурналаРегистрации("Отчет затраты", УровеньЖурналаРегистрации.Ошибка, ,,ОписаниеОшибки());
		КонецПопытки;
		Прогон = Прогон + 1;
	КонецЦикла;
	
	ПарамФайлов = Новый Структура("ТаблДокумент,ИмяОрганизации,МассивОрганизацийСОшибками", 
		Данные, "", МассивОрганизацийСОшибками
	);
	
	ПоместитьВоВременноеХранилище(ПарамФайлов, АдресХранилища);	
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ПоСчету50(Организация, ТабличныйДокумент, ПараметрыОтчета, Прокси, Макет)
	
	ВыполняемыйКод = "Запрос = Новый Запрос;
		|Запрос.УстановитьПараметр(""НачалоПериода"", 		НачалоДня(Дата("+Формат(ПараметрыОтчета.НачалоПериода,"ДФ=yyyy,MM,dd")+")));
		|Запрос.УстановитьПараметр(""КонецПериода"", 	Новый Граница(КонецДня(Дата("+Формат(ПараметрыОтчета.КонецПериода,"ДФ=yyyy,MM,dd")+")), ВидГраницы.Включая));
		|Запрос.УстановитьПараметр(""Организация"", 	"""+Организация.ИНН+""");
	    |Запрос.Текст = ""ВЫБРАТЬ
		||	ПРЕДСТАВЛЕНИЕ(ХозрасчетныйОбороты.Организация) КАК Организация,
		||	ХозрасчетныйОбороты.Счет.Код КАК Счет,
		||	ПРЕДСТАВЛЕНИЕ(ХозрасчетныйОбороты.Субконто1) КАК Субконто1,
		||	ХозрасчетныйОбороты.КорСчет.Код КАК КорСчет,
		||	ПРЕДСТАВЛЕНИЕ(ХозрасчетныйОбороты.КорСубконто1) КАК КорСубконто1,
		||	ХозрасчетныйОбороты.СуммаОборотДт КАК ОборотДт,
		||	ХозрасчетныйОбороты.СуммаОборотКт КАК ОборотКт,
		||	ПРЕДСТАВЛЕНИЕ(ХозрасчетныйОбороты.Субконто2) КАК Субконто2,
		||	NULL КАК СуммаНачальныйОстатокДт,
		||	NULL КАК СуммаНачальныйОстатокКт,
		||	NULL КАК СуммаКонечныйОстатокДт,
		||	NULL КАК СуммаКонечныйОстатокКт,
		||	""""Обороты"""" КАК Поле1,
		||	ХозрасчетныйОбороты.Период КАК Период
		||ИЗ
		||	РегистрБухгалтерии.Хозрасчетный.Обороты(&НачалоПериода, &КонецПериода, Месяц, Счет В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.Касса)), , Организация.ИНН = &Организация, , ) КАК ХозрасчетныйОбороты
		||
		||ОБЪЕДИНИТЬ ВСЕ
		||
		||ВЫБРАТЬ
		||	ПРЕДСТАВЛЕНИЕ(ХозрасчетныйОстаткиИОбороты.Организация),
		||	ХозрасчетныйОстаткиИОбороты.Счет.Код,
		||	ПРЕДСТАВЛЕНИЕ(ХозрасчетныйОстаткиИОбороты.Субконто1),
		||	NULL,
		||	NULL,
		||	NULL,
		||	NULL,
		||	ПРЕДСТАВЛЕНИЕ(ХозрасчетныйОстаткиИОбороты.Субконто2),
		||	ХозрасчетныйОстаткиИОбороты.СуммаНачальныйОстатокДт,
		||	ХозрасчетныйОстаткиИОбороты.СуммаНачальныйОстатокКт,
		||	ХозрасчетныйОстаткиИОбороты.СуммаКонечныйОстатокДт,
		||	ХозрасчетныйОстаткиИОбороты.СуммаКонечныйОстатокКт,
		||	""""Остатки"""",
		||	ХозрасчетныйОстаткиИОбороты.Период
		||ИЗ
		||	РегистрБухгалтерии.Хозрасчетный.ОстаткиИОбороты(&НачалоПериода, &КонецПериода, Месяц, , Счет В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.Касса)), , Организация.ИНН = &Организация) КАК ХозрасчетныйОстаткиИОбороты
		||ИТОГИ
		||	СУММА(ОборотДт),
		||	СУММА(ОборотКт),
		||	СУММА(СуммаНачальныйОстатокДт),
		||	СУММА(СуммаНачальныйОстатокКт),
		||	СУММА(СуммаКонечныйОстатокДт),
		||	СУММА(СуммаКонечныйОстатокКт)
		||ПО
		||	Период ПЕРИОДАМИ(МЕСЯЦ, , ),
		||	Счет ИЕРАРХИЯ,
		||	Субконто1,
		||	КорСчет ИЕРАРХИЯ,
		||	КорСубконто1"";
		|РезультатЗапроса = Запрос.Выполнить();
		|СпособОбхода = ОбходРезультатаЗапроса.ПоГруппировкамСИерархией;
		|ВозвращаемоеЗначение =  РезультатЗапроса.Выгрузить(СпособОбхода);";
	Ответ = мммСервер.ДеСериализовать(
		Прокси.RunCode(ВыполняемыйКод)
	);
	
	Если НЕ Ответ.Ошибка Тогда
		ОбластьИтог = Макет.ПолучитьОбласть("Итог");
		ТабличныйДокумент.НачатьАвтогруппировкуСтрок();
		ВывестиДерево(ТабличныйДокумент, Ответ.Результат.Строки, Макет, ОбластьИтог);
		ТабличныйДокумент.ЗакончитьАвтогруппировкуСтрок();
		ТабличныйДокумент.Вывести(ОбластьИтог);
	КонецЕсли;	
	
КонецПроцедуры	

Процедура ПоСчету51(Организация, ТабличныйДокумент, ПараметрыОтчета, Прокси, Макет)
	
	ВыполняемыйКод = "Запрос = Новый Запрос;
		|Запрос.УстановитьПараметр(""НачалоПериода"", 		НачалоДня(Дата("+Формат(ПараметрыОтчета.НачалоПериода,"ДФ=yyyy,MM,dd")+")));
		|Запрос.УстановитьПараметр(""КонецПериода"", 	Новый Граница(КонецДня(Дата("+Формат(ПараметрыОтчета.КонецПериода,"ДФ=yyyy,MM,dd")+")), ВидГраницы.Включая));
		|Запрос.УстановитьПараметр(""Организация"", 	"""+Организация.ИНН+""");
	    |Запрос.Текст = ""ВЫБРАТЬ
		||	ПРЕДСТАВЛЕНИЕ(ХозрасчетныйОбороты.Организация) КАК Организация,
		||	ХозрасчетныйОбороты.Счет.Код КАК Счет,
		||	ПРЕДСТАВЛЕНИЕ(ХозрасчетныйОбороты.Субконто2) КАК Субконто1,
		||	ХозрасчетныйОбороты.КорСчет.Код КАК КорСчет,
		||	ПРЕДСТАВЛЕНИЕ(ХозрасчетныйОбороты.КорСубконто1) КАК КорСубконто1,
		||	ХозрасчетныйОбороты.СуммаОборотДт КАК ОборотДт,
		||	ХозрасчетныйОбороты.СуммаОборотКт КАК ОборотКт,
		||	ПРЕДСТАВЛЕНИЕ(ХозрасчетныйОбороты.Субконто2) КАК Субконто2,
		||	NULL КАК СуммаНачальныйОстатокДт,
		||	NULL КАК СуммаНачальныйОстатокКт,
		||	NULL КАК СуммаКонечныйОстатокДт,
		||	NULL КАК СуммаКонечныйОстатокКт,
		||	""""Обороты"""" КАК Поле1,
		||	ХозрасчетныйОбороты.Период КАК Период
		||ИЗ
		||	РегистрБухгалтерии.Хозрасчетный.Обороты(&НачалоПериода, &КонецПериода, Месяц, Счет В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетныеСчета)), , Организация.ИНН = &Организация, , ) КАК ХозрасчетныйОбороты
		||
		||ОБЪЕДИНИТЬ ВСЕ
		||
		||ВЫБРАТЬ
		||	ПРЕДСТАВЛЕНИЕ(ХозрасчетныйОстаткиИОбороты.Организация),
		||	ХозрасчетныйОстаткиИОбороты.Счет.Код,
		||	ПРЕДСТАВЛЕНИЕ(ХозрасчетныйОстаткиИОбороты.Субконто2),
		||	NULL,
		||	NULL,
		||	NULL,
		||	NULL,
		||	ПРЕДСТАВЛЕНИЕ(ХозрасчетныйОстаткиИОбороты.Субконто2),
		||	ХозрасчетныйОстаткиИОбороты.СуммаНачальныйОстатокДт,
		||	ХозрасчетныйОстаткиИОбороты.СуммаНачальныйОстатокКт,
		||	ХозрасчетныйОстаткиИОбороты.СуммаКонечныйОстатокДт,
		||	ХозрасчетныйОстаткиИОбороты.СуммаКонечныйОстатокКт,
		||	""""Остатки"""",
		||	ХозрасчетныйОстаткиИОбороты.Период
		||ИЗ
		||	РегистрБухгалтерии.Хозрасчетный.ОстаткиИОбороты(&НачалоПериода, &КонецПериода, Месяц, , Счет В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетныеСчета)), , Организация.ИНН = &Организация) КАК ХозрасчетныйОстаткиИОбороты
		||ИТОГИ
		||	СУММА(ОборотДт),
		||	СУММА(ОборотКт),
		||	СУММА(СуммаНачальныйОстатокДт),
		||	СУММА(СуммаНачальныйОстатокКт),
		||	СУММА(СуммаКонечныйОстатокДт),
		||	СУММА(СуммаКонечныйОстатокКт)
		||ПО
		||	Период ПЕРИОДАМИ(МЕСЯЦ, , ),
		||	Счет ИЕРАРХИЯ,
		||	Субконто2,
		||	КорСчет ИЕРАРХИЯ,
		||	КорСубконто1"";
		|РезультатЗапроса = Запрос.Выполнить();
		|СпособОбхода = ОбходРезультатаЗапроса.ПоГруппировкамСИерархией;
		|ВозвращаемоеЗначение =  РезультатЗапроса.Выгрузить(СпособОбхода);";
	Ответ = мммСервер.ДеСериализовать(
		Прокси.RunCode(ВыполняемыйКод)
	);
	
	Если НЕ Ответ.Ошибка Тогда
		ОбластьИтог = Макет.ПолучитьОбласть("Итог");
		ТабличныйДокумент.НачатьАвтогруппировкуСтрок();
		ВывестиДерево(ТабличныйДокумент, Ответ.Результат.Строки, Макет, ОбластьИтог);
		ТабличныйДокумент.ЗакончитьАвтогруппировкуСтрок();
		ТабличныйДокумент.Вывести(ОбластьИтог);
	КонецЕсли;	
	
КонецПроцедуры

Процедура ПоСчету60(Организация, ТабличныйДокумент, ПараметрыОтчета, Прокси, Макет)
	
	ВыполняемыйКод = "Запрос = Новый Запрос;
		|Запрос.УстановитьПараметр(""НачалоПериода"", 		НачалоДня(Дата("+Формат(ПараметрыОтчета.НачалоПериода,"ДФ=yyyy,MM,dd")+")));
		|Запрос.УстановитьПараметр(""КонецПериода"", 	Новый Граница(КонецДня(Дата("+Формат(ПараметрыОтчета.КонецПериода,"ДФ=yyyy,MM,dd")+")), ВидГраницы.Включая));
		|Запрос.УстановитьПараметр(""Организация"", 	"""+Организация.ИНН+""");
	    |Запрос.Текст = ""ВЫБРАТЬ
		||	ПРЕДСТАВЛЕНИЕ(ХозрасчетныйОбороты.Организация) КАК Организация,
		||	ХозрасчетныйОбороты.Счет.Код КАК Счет,
		||	ПРЕДСТАВЛЕНИЕ(ХозрасчетныйОбороты.Субконто1) КАК Субконто1,
		||	ХозрасчетныйОбороты.СуммаОборотДт КАК ОборотДт,
		||	ХозрасчетныйОбороты.СуммаОборотКт КАК ОборотКт,
		||	NULL КАК СуммаНачальныйОстатокДт,
		||	NULL КАК СуммаНачальныйОстатокКт,
		||	NULL КАК СуммаКонечныйОстатокДт,
		||	NULL КАК СуммаКонечныйОстатокКт,
		||	""""Обороты"""" КАК Поле1,
		||	ХозрасчетныйОбороты.Период КАК Период
		||ИЗ
		||	РегистрБухгалтерии.Хозрасчетный.Обороты(&НачалоПериода, &КонецПериода, Месяц, Счет В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыСПоставщикамиИПодрядчиками)), , Организация.ИНН = &Организация, , ) КАК ХозрасчетныйОбороты
		||
		||ОБЪЕДИНИТЬ ВСЕ
		||
		||ВЫБРАТЬ
		||	ПРЕДСТАВЛЕНИЕ(ХозрасчетныйОстаткиИОбороты.Организация),
		||	ХозрасчетныйОстаткиИОбороты.Счет.Код,
		||	ПРЕДСТАВЛЕНИЕ(ХозрасчетныйОстаткиИОбороты.Субконто1),
		||	NULL,
		||	NULL,
		||	ХозрасчетныйОстаткиИОбороты.СуммаНачальныйОстатокДт,
		||	ХозрасчетныйОстаткиИОбороты.СуммаНачальныйОстатокКт,
		||	ХозрасчетныйОстаткиИОбороты.СуммаКонечныйОстатокДт,
		||	ХозрасчетныйОстаткиИОбороты.СуммаКонечныйОстатокКт,
		||	""""Остатки"""",
		||	ХозрасчетныйОстаткиИОбороты.Период
		||ИЗ
		||	РегистрБухгалтерии.Хозрасчетный.ОстаткиИОбороты(&НачалоПериода, &КонецПериода, Месяц, , Счет В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыСПоставщикамиИПодрядчиками)), , Организация.ИНН = &Организация) КАК ХозрасчетныйОстаткиИОбороты
		||ИТОГИ
		||	СУММА(ОборотДт),
		||	СУММА(ОборотКт),
		||	СУММА(СуммаНачальныйОстатокДт),
		||	СУММА(СуммаНачальныйОстатокКт),
		||	СУММА(СуммаКонечныйОстатокДт),
		||	СУММА(СуммаКонечныйОстатокКт)
		||ПО
		||	Период ПЕРИОДАМИ(МЕСЯЦ, , ),
		||	Счет ИЕРАРХИЯ,
		||	Субконто1"";
		|РезультатЗапроса = Запрос.Выполнить();
		|СпособОбхода = ОбходРезультатаЗапроса.ПоГруппировкамСИерархией;
		|ВозвращаемоеЗначение =  РезультатЗапроса.Выгрузить(СпособОбхода);";
	Ответ = мммСервер.ДеСериализовать(
		Прокси.RunCode(ВыполняемыйКод)
	);
	
	Если НЕ Ответ.Ошибка Тогда
		ОбластьИтог = Макет.ПолучитьОбласть("Итог");
		ТабличныйДокумент.НачатьАвтогруппировкуСтрок();
		ВывестиДерево(ТабличныйДокумент, Ответ.Результат.Строки, Макет, ОбластьИтог);
		ТабличныйДокумент.ЗакончитьАвтогруппировкуСтрок();
		ТабличныйДокумент.Вывести(ОбластьИтог);
	КонецЕсли;	
	
КонецПроцедуры

Процедура ПоСчету62(Организация, ТабличныйДокумент, ПараметрыОтчета, Прокси, Макет)
	
	ВыполняемыйКод = "Запрос = Новый Запрос;
		|Запрос.УстановитьПараметр(""НачалоПериода"", 		НачалоДня(Дата("+Формат(ПараметрыОтчета.НачалоПериода,"ДФ=yyyy,MM,dd")+")));
		|Запрос.УстановитьПараметр(""КонецПериода"", 	Новый Граница(КонецДня(Дата("+Формат(ПараметрыОтчета.КонецПериода,"ДФ=yyyy,MM,dd")+")), ВидГраницы.Включая));
		|Запрос.УстановитьПараметр(""Организация"", 	"""+Организация.ИНН+""");
	    |Запрос.Текст = ""ВЫБРАТЬ
		||	ПРЕДСТАВЛЕНИЕ(ХозрасчетныйОбороты.Организация) КАК Организация,
		||	ХозрасчетныйОбороты.Счет.Код КАК Счет,
		||	ХозрасчетныйОбороты.Субконто1.Наименование КАК Субконто1,
		||	ХозрасчетныйОбороты.СуммаОборотДт КАК ОборотДт,
		||	ХозрасчетныйОбороты.СуммаОборотКт КАК ОборотКт,
		||	NULL КАК СуммаНачальныйОстатокДт,
		||	NULL КАК СуммаНачальныйОстатокКт,
		||	NULL КАК СуммаКонечныйОстатокДт,
		||	NULL КАК СуммаКонечныйОстатокКт,
		||	""""Обороты"""" КАК Поле1,
		||	ХозрасчетныйОбороты.Период КАК Период
		||ИЗ
		||	РегистрБухгалтерии.Хозрасчетный.Обороты(&НачалоПериода, &КонецПериода, Месяц, Счет В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыСПокупателямиИЗаказчиками)), , Организация.ИНН = &Организация, , ) КАК ХозрасчетныйОбороты
		||
		||ОБЪЕДИНИТЬ ВСЕ
		||
		||ВЫБРАТЬ
		||	ПРЕДСТАВЛЕНИЕ(ХозрасчетныйОстаткиИОбороты.Организация),
		||	ХозрасчетныйОстаткиИОбороты.Счет.Код,
		||	ХозрасчетныйОстаткиИОбороты.Субконто1.Наименование,
		||	NULL,
		||	NULL,
		||	ХозрасчетныйОстаткиИОбороты.СуммаНачальныйОстатокДт,
		||	ХозрасчетныйОстаткиИОбороты.СуммаНачальныйОстатокКт,
		||	ХозрасчетныйОстаткиИОбороты.СуммаКонечныйОстатокДт,
		||	ХозрасчетныйОстаткиИОбороты.СуммаКонечныйОстатокКт,
		||	""""Остатки"""",
		||	ХозрасчетныйОстаткиИОбороты.Период
		||ИЗ
		||	РегистрБухгалтерии.Хозрасчетный.ОстаткиИОбороты(&НачалоПериода, &КонецПериода, Месяц, , Счет В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыСПокупателямиИЗаказчиками)), , Организация.ИНН = &Организация) КАК ХозрасчетныйОстаткиИОбороты
		||ИТОГИ
		||	СУММА(ОборотДт),
		||	СУММА(ОборотКт),
		||	СУММА(СуммаНачальныйОстатокДт),
		||	СУММА(СуммаНачальныйОстатокКт),
		||	СУММА(СуммаКонечныйОстатокДт),
		||	СУММА(СуммаКонечныйОстатокКт)
		||ПО
		||	Период ПЕРИОДАМИ(МЕСЯЦ, , ),
		||	Счет,
		||	Субконто1 ИЕРАРХИЯ"";
		|РезультатЗапроса = Запрос.Выполнить();
		|СпособОбхода = ОбходРезультатаЗапроса.ПоГруппировкамСИерархией;
		|ВозвращаемоеЗначение =  РезультатЗапроса.Выгрузить(СпособОбхода);";
	Ответ = мммСервер.ДеСериализовать(
		Прокси.RunCode(ВыполняемыйКод)
	);
	
	Если НЕ Ответ.Ошибка Тогда
		ОбластьИтог = Макет.ПолучитьОбласть("Итог");
		ТабличныйДокумент.НачатьАвтогруппировкуСтрок();
		ВывестиДерево62(ТабличныйДокумент, Ответ.Результат.Строки, Макет, ОбластьИтог);
		ТабличныйДокумент.ЗакончитьАвтогруппировкуСтрок();
		ТабличныйДокумент.Вывести(ОбластьИтог);
	КонецЕсли;	
	
КонецПроцедуры

Процедура ВывестиДерево(ТабличныйДокумент, СтрокиДерева, Макет, ОбластьИтог = Неопределено)
	

	
	Для Каждого стрДерева из СтрокиДерева Цикл 
		
		Если стрДерева.Уровень() = 0 Тогда
			ЗаполнитьЗначенияСвойств(ОбластьИтог.Параметры, стрДерева);
						
		ИначеЕсли стрДерева.Уровень() = 1 Тогда
			Область = Макет.ПолучитьОбласть("Уровень0"); 
			ЗаполнитьЗначенияСвойств(Область.Параметры, стрДерева);
			Область.Параметры.Счет = Лев(стрДерева.Счет, ?(СтрНайти(стрДерева.Счет, ".") = 0, СтрДлина(стрДерева.Счет), СтрНайти(стрДерева.Счет, ".") - 1));
			ВывестиСтроку(Область, ТабличныйДокумент, стрДерева);		
			
		ИначеЕсли стрДерева.Уровень() = 2 Тогда
			Область = Макет.ПолучитьОбласть("Субконто1"); 
			ЗаполнитьЗначенияСвойств(Область.Параметры, стрДерева);
			ВывестиСтроку(Область, ТабличныйДокумент, стрДерева);	
			
		ИначеЕсли стрДерева.Уровень() = 3 Тогда	
			Попытка
				Область = Макет.ПолучитьОбласть("КорСчет"); 
				ЗаполнитьЗначенияСвойств(Область.Параметры, стрДерева);
				Область.Параметры.КорСчет = Лев(стрДерева.КорСчет, ?(СтрНайти(стрДерева.КорСчет, ".") = 0, СтрДлина(стрДерева.КорСчет), СтрНайти(стрДерева.КорСчет, ".") - 1));
				ВывестиСтроку(Область, ТабличныйДокумент, стрДерева);
			Исключение
			КонецПопытки;
			
		ИначеЕсли стрДерева.Уровень() = 4 Тогда
			Попытка
				Область = Макет.ПолучитьОбласть("КорСубконто1"); 
				ЗаполнитьЗначенияСвойств(Область.Параметры, стрДерева);
				ВывестиСтроку(Область, ТабличныйДокумент, стрДерева);
			Исключение
			КонецПопытки;

		КонецЕсли;	

		Если стрДерева.Строки.Количество() <> 0 Тогда 
			ВывестиДерево(ТабличныйДокумент, стрДерева.Строки, Макет);
		КонецЕсли;	
				
	КонецЦикла;	
	
КонецПроцедуры	

Процедура ВывестиДерево62(ТабличныйДокумент, СтрокиДерева, Макет, ОбластьИтог = Неопределено)
	

	
	Для Каждого стрДерева из СтрокиДерева Цикл 
		
		Если стрДерева.Уровень() = 0 Тогда
			ЗаполнитьЗначенияСвойств(ОбластьИтог.Параметры, стрДерева);
						
		ИначеЕсли стрДерева.Уровень() = 1 Тогда
			Область = Макет.ПолучитьОбласть("Уровень0"); 
			ЗаполнитьЗначенияСвойств(Область.Параметры, стрДерева);
			Область.Параметры.Счет = стрДерева.Счет;
			ВывестиСтроку(Область, ТабличныйДокумент, стрДерева);		
			
		ИначеЕсли стрДерева.Уровень() = 2 Тогда
			Область = Макет.ПолучитьОбласть("Субконто1"); 
			ЗаполнитьЗначенияСвойств(Область.Параметры, стрДерева);
			ВывестиСтроку(Область, ТабличныйДокумент, стрДерева);	
			
		ИначеЕсли стрДерева.Уровень() = 3 Тогда	
			Попытка
				Область = Макет.ПолучитьОбласть("КорСчет"); 
				ЗаполнитьЗначенияСвойств(Область.Параметры, стрДерева);
				Область.Параметры.КорСчет = Лев(стрДерева.КорСчет, ?(СтрНайти(стрДерева.КорСчет, ".") = 0, СтрДлина(стрДерева.КорСчет), СтрНайти(стрДерева.КорСчет, ".") - 1));
				ВывестиСтроку(Область, ТабличныйДокумент, стрДерева);
			Исключение
			КонецПопытки;
			
		ИначеЕсли стрДерева.Уровень() = 4 Тогда
			Попытка
				Область = Макет.ПолучитьОбласть("КорСубконто1"); 
				ЗаполнитьЗначенияСвойств(Область.Параметры, стрДерева);
				ВывестиСтроку(Область, ТабличныйДокумент, стрДерева);
			Исключение
			КонецПопытки;

		КонецЕсли;	

		Если стрДерева.Строки.Количество() <> 0 Тогда 
			ВывестиДерево62(ТабличныйДокумент, стрДерева.Строки, Макет);
		КонецЕсли;	
				
	КонецЦикла;	
	
КонецПроцедуры	

Процедура ВывестиСтроку(Область, ТабличныйДокумент, стрДерева)
	
	Если ЗначениеЗаполнено(стрДерева.ОборотДт) 
		ИЛИ ЗначениеЗаполнено(стрДерева.ОборотКт)
		ИЛИ ЗначениеЗаполнено(стрДерева.СуммаНачальныйОстатокДт)
		ИЛИ ЗначениеЗаполнено(стрДерева.СуммаНачальныйОстатокКт)
		ИЛИ ЗначениеЗаполнено(стрДерева.СуммаКонечныйОстатокДт)
		ИЛИ ЗначениеЗаполнено(стрДерева.СуммаКонечныйОстатокКт) Тогда						
		
		ТабличныйДокумент.Вывести(Область, стрДерева.Уровень());
	КонецЕсли;	
	
КонецПроцедуры	

#КонецОбласти



