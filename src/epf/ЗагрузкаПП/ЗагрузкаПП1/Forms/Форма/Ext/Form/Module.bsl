&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	НаименованиеКлючаСвязи = "УИДСтроки";
	ДатаПП = ТекущаяДата();
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьФайл(Команда)
	ПараметрыДиалога = Новый ПараметрыДиалогаПомещенияФайлов;
    ПараметрыДиалога.Заголовок = "Выбор файла";
    ПараметрыДиалога.МножественныйВыбор = Ложь;
    ПараметрыДиалога.Фильтр = "Excel файли (*.xls;*.xlsx)|*.xls;*.xlsx";	
	НачатьПомещениеФайлаНаСервер(Новый ОписаниеОповещения("ВыбратьФайлЗавершение", ЭтотОбъект),,,, ПараметрыДиалога, ЭтаФорма.УникальныйИдентификатор);

КонецПроцедуры

&НаКлиенте
Процедура ВыбратьФайлЗавершение(ПомещенныеФайлы, ПустойПараметр) Экспорт

	Если ПомещенныеФайлы = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ПомещенныеФайлы.ПомещениеФайлаОтменено Тогда
		Возврат;
	КонецЕсли;
	
	ТабДок = ПрочитатьФайлНаСервере(ПомещенныеФайлы.Адрес, ПомещенныеФайлы.СсылкаНаФайл.Расширение);
	
	Если НЕ ТабДок = Неопределено Тогда
		ЗаполнитьТаблицуСФайлаНаСервере(ТабДок);
	КонецЕсли;	
	
КонецПроцедуры	

&НаСервере
Процедура ЗаполнитьТаблицуСФайлаНаСервере(ТабДок)
	
	ВФайле.Очистить();
	ДокументРасчетов.Очистить();
	
	Если ТабДок.ВысотаТаблицы < 2 Тогда 
		Возврат;
	КонецЕсли;
	// определим начальную строку и колонки с которых будут грузиться данные
	НачальнаяСтрока = 8;      
	КолонкаСумма = 5;
	КолонкаТовар = 8;
	ТекЗначение = ТабДок.Область(4,1).Текст;
	Если СтрНайти(НРег(ТекЗначение), "поставщик,") > 0 Тогда
		НачальнаяСтрока = 5;
		КолонкаСумма = 7;
	КонецЕсли;
	
	смещение = 0;
	ТекЗначение = ТабДок.Область(4,4).Текст;
	Если СтрНайти(НРег(ТекЗначение), "ттн") > 0 Тогда
		смещение = 1;
	КонецЕсли; 
	
	ТекЗначение = ТабДок.Область(4,4).Текст;
	Если СтрНайти(НРег(ТекЗначение), "документ") > 0 Тогда
		КолонкаСумма = 8;
	КонецЕсли;	
	ТекЗначение = ТабДок.Область(8,4).Текст;
	Если СтрНайти(НРег(ТекЗначение), "оплата") > 0 Тогда
		ТекЗначение = ТабДок.Область(9,4).Текст;
		Если СтрНайти(НРег(ТекЗначение), "дебет") > 0 Тогда
			КолонкаСумма = 4;
		КонецЕсли;	
	КонецЕсли;
	ТекЗначение = ТабДок.Область(4,8).Текст;
	Если СтрНайти(НРег(ТекЗначение), "товар") > 0 Тогда 
	Иначе
		КолонкаТовар = 9;
	КонецЕсли;
	
	КолонкаСумма = КолонкаСумма + смещение;
	КолонкаТовар = КолонкаТовар + смещение;
	
	// заполним таблицу
	Для сч = НачальнаяСтрока По ТабДок.ВысотаТаблицы Цикл
		ТекЗначение = ТабДок.Область(сч,1).Текст;
		Если СтрНайти(ТекЗначение, "Контрагент") > 0 Тогда
			Продолжить;
		КонецЕсли;
		
		ИндексЗапятой = СтрНайти(ТекЗначение, ",", НаправлениеПоиска.СКонца);
		Если НЕ ИндексЗапятой = 0 Тогда
			КодКонтрагента = СокрЛП(Прав(ТекЗначение, СтрДлина(ТекЗначение) - ИндексЗапятой));
			спрКонтрагент = Справочники.Контрагенты.НайтиПоКоду(КодКонтрагента);
			
			Если НЕ ЗначениеЗаполнено(спрКонтрагент) Тогда
				Продолжить;
			КонецЕсли;	
			
			НоваяСтрока = ВФайле.Добавить();
			НоваяСтрока.КодКонтрагента = КодКонтрагента;
			НоваяСтрока.Контрагент = спрКонтрагент;
			НоваяСтрока.Сумма = СтроковыеФункцииКлиентСервер.СтрокаВЧисло(ТабДок.Область(сч, КолонкаСумма).Текст);
			Если ЗначениеЗаполнено(НоваяСтрока.Контрагент) И НоваяСтрока.Сумма <> 0 Тогда 
				НоваяСтрока.Пометка = Истина;
			КонецЕсли;		
			НоваяСтрока.УИДСтроки = Новый УникальныйИдентификатор;
			НоваяСтрока.Товар = СокрЛП(ТабДок.Область(сч,КолонкаТовар).Текст);
		КонецЕсли;	 
	КонецЦикла;
	
	ПодобратьДокументыНаСервере();
	Если ВФайле.Количество() > 0 Тогда
		Элементы.ВФайле.ТекущаяСтрока = ВФайле[0].ПолучитьИдентификатор();
	КонецЕсли;	
	
КонецПроцедуры	

&НаСервереБезКонтекста
Функция ПрочитатьФайлНаСервере(АдресФайла, РасширениеФайла)
	
	ДвоичныеДанные = ПолучитьИзВременногоХранилища(АдресФайла);
	ПолноеИмяФайла = ПолучитьИмяВременногоФайла(РасширениеФайла);
	
	Если НЕ ЗначениеЗаполнено(ДвоичныеДанные) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ДвоичныеДанные.Записать(ПолноеИмяФайла);
	ТабДок = Новый ТабличныйДокумент;
	ТабДок.Очистить();
	Попытка
		ТабДок.Прочитать(ПолноеИмяФайла);
	Исключение
		Возврат Неопределено;
	КонецПопытки;	
	
	Возврат ТабДок;
	
КонецФункции	

&НаКлиенте
Процедура СформироватьПП(Команда)
	
	//Для Каждого Строка Из ВФайле Цикл
	//	Если НЕ Строка.Пометка Тогда
	//		Продолжить;
	//	КонецЕсли;

	//	//Форма = ПолучитьФорму("Документ.ПлатежноеПоручение.ФормаОбъекта");
	//	//ДанныеФормы = Форма.Объект;
	//	Ссылка = СформироватьППНаСервере(Строка.Контрагент, Строка.Сумма, Строка.УИДСтроки); //ДанныеФормы);
	//	//КопироватьДанныеФормы(ДанныеФормы, Форма.Объект);
	//	//Форма.Открыть();
	//	Строка.ПП = Ссылка;
	//	
	//КонецЦикла;
	СформироватьППНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура СформироватьППНаСервере();//Контрагент, Сумма, УИДСтроки, док= Неопределено)
	
	Для Каждого Строка Из ВФайле Цикл
		Если НЕ Строка.Пометка Тогда
			Продолжить;
		КонецЕсли;
		Если ЗначениеЗаполнено(Строка.ПП) Тогда
			Продолжить;
		КонецЕсли;
		
		
		док = Документы.ПлатежноеПоручение.СоздатьДокумент();
		док.Заполнить(Неопределено);
		док.Дата = ДатаПП;
		док.Организация = Организация;
		Если ЗначениеЗаполнено(СчетОрганизации) Тогда
			док.СчетОрганизации = СчетОрганизации;
		Иначе
			док.СчетОрганизации = док.Организация.ОсновнойБанковскийСчет;
		КонецЕсли;	
		Если НЕ ЗначениеЗаполнено(док.ИННПлательщика) Тогда
			док.ИННПлательщика = док.Организация.ИНН;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(док.ТекстПлательщика) Тогда
			док.ТекстПлательщика = док.Организация.НаименованиеПолное;
		КонецЕсли;
		
		//Если НЕ ЗначениеЗаполнено(док.КПППлательщика) Тогда
		//	док.СчетОрганизации = док.Организация.КПП;
		//КонецЕсли;		
		
		док.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ОплатаПоставщику;
		док.Контрагент = Строка.Контрагент;
		Если ЗначениеЗаполнено(Строка.Контрагент.Затр_СтатьяРасходов) Тогда
			док.Затр_СтатьяРасходов = Строка.Контрагент.Затр_СтатьяРасходов;
		ИначеЕсли ЗначениеЗаполнено(Строка.Контрагент.Родитель.Затр_СтатьяРасходов)	Тогда
			док.Затр_СтатьяРасходов = Строка.Контрагент.Родитель.Затр_СтатьяРасходов;	
		ИначеЕсли ЗначениеЗаполнено(Строка.Контрагент.Родитель.Родитель.Затр_СтатьяРасходов)	Тогда
			док.Затр_СтатьяРасходов = Строка.Контрагент.Родитель.Родитель.Затр_СтатьяРасходов;
		ИначеЕсли ЗначениеЗаполнено(Строка.Контрагент.Родитель.Родитель.Родитель.Затр_СтатьяРасходов)	Тогда
			док.Затр_СтатьяРасходов = Строка.Контрагент.Родитель.Родитель.Родитель.Затр_СтатьяРасходов;
		ИначеЕсли ЗначениеЗаполнено(Строка.Контрагент.Родитель.Родитель.Родитель.Родитель.Затр_СтатьяРасходов)	Тогда
			док.Затр_СтатьяРасходов = Строка.Контрагент.Родитель.Родитель.Родитель.Родитель.Затр_СтатьяРасходов;
		ИначеЕсли ЗначениеЗаполнено(Строка.Контрагент.Родитель.Родитель.Родитель.Родитель.Родитель.Затр_СтатьяРасходов)	Тогда
			док.Затр_СтатьяРасходов = Строка.Контрагент.Родитель.Родитель.Родитель.Родитель.Родитель.Затр_СтатьяРасходов;			
		КонецЕсли;	
		док.ИННПолучателя = Строка.Контрагент.ИНН;
		док.КПППолучателя = Строка.Контрагент.КПП;
		док.ТекстПолучателя = Строка.Контрагент.НаименованиеПолное;
		док.СчетКонтрагента = Строка.Контрагент.ОсновнойБанковскийСчет;
		док.СтатьяДвиженияДенежныхСредств = ПредопределенноеЗначение("Справочник.СтатьиДвиженияДенежныхСредств.ОплатаПоставщику");
		док.СуммаДокумента = Строка.СуммаПодобранных;
		
		МассивСтрок = ДокументРасчетов.НайтиСтроки(Новый Структура("УИДСтроки, Пометка", Строка.УИДСтроки, Истина)); 
		Если МассивСтрок.Количество() > 0 Тогда
			
			док.СтавкаНДС = ОпределитьСтавкуНДСДокумента(МассивСтрок[0].Документ);
		КонецЕсли;
		док.СуммаНДС = ПересчитатьСуммуНДС(Док.СуммаДокумента, Док.СтавкаНДС);
		Если док.СуммаПроцентов > док.СуммаДокумента Тогда
			док.СуммаПроцентов = док.СуммаДокумента;
		КонецЕсли;
		
		док.РасшифровкаПлатежа.Очистить();

		Для Каждого Эл Из МассивСтрок Цикл
			НоваяСтрока = док.РасшифровкаПлатежа.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Эл);
			НоваяСтрока.Сделка = Эл.Документ;
			НоваяСтрока.СуммаПлатежа = Эл.Сумма;

		КонецЦикла;
		
		Документы.ПлатежноеПоручение.NDline_СформироватьНазначениеПлатежаНаСервере(док, Ложь, АдресХранилищаРасшифровкаПлатежа);
		
		Если НЕ ПустаяСтрока(Строка.Товар) Тогда
		Док.НазначениеПлатежа = СтрЗаменить(Док.НазначениеПлатежа
			, "Оплата за товар по накл."
			, СтрШаблон("Оплата за %1 по накл.", СокрЛП(Строка.Товар))
		);	
		КонецЕсли;	
		
		док.Записать(РежимЗаписиДокумента.Запись);
		
		Строка.ПП = док.Ссылка;
	
	КонецЦикла;

	//Возврат док.Ссылка;
		
КонецПроцедуры	

&НаКлиентеНаСервереБезКонтекста
Функция ПересчитатьСуммуНДС(СуммаДокумента, СтавкаНДС)
	
	ПроцентНДС = УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(СтавкаНДС);
	СуммаНДС   = Окр(СуммаДокумента * ПроцентНДС / (100 + ПроцентНДС), 2);
	
	Возврат СуммаНДС;
	
КонецФункции


&НаКлиенте
Процедура ВФайлеПриАктивизацииСтроки(Элемент)
	ТекДанные = Элемент.ТекущиеДанные;
	УстановитьОтборПоКлючу(ТекДанные,Элементы.ДокументРасчетов,НаименованиеКлючаСвязи);	
	
	ОбновитьДельту(ТекДанные);
КонецПроцедуры

&НаКлиенте
Процедура ВФайлеПередУдалением(Элемент, Отказ)
	ОбщаяПроцедураУдалитьСтроки(Элемент.ТекущиеДанные, ДокументРасчетов, НаименованиеКлючаСвязи);
КонецПроцедуры

&НаКлиенте
Процедура ВФайлеПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	ТекДанные = Элемент.ТекущиеДанные;
	
	ТекНаименованиеКлюча = НаименованиеКлючаСвязи;
	
	//Если ТекДанные[ТекНаименованиеКлюча] <> ТекДанные[ТекНаименованиеКлюча + "Начальный"] Тогда
	//	
	//	ПерезаполнитьЗначениеКлюча(ТекДанные[ТекНаименованиеКлюча+"Начальный"],ТекДанные[ТекНаименованиеКлюча],"Товары",ТекНаименованиеКлюча);
	//	
	//	ТекДанные[ТекНаименованиеКлюча + "Начальный"] = ТекДанные[ТекНаименованиеКлюча];
	//	
	//КонецЕсли;
	
	УстановитьОтборПоКлючу(ТекДанные,Элементы.ДокументРасчетов,ТекНаименованиеКлюча);
КонецПроцедуры

&НаКлиенте
Процедура УстановитьОтборПоКлючу(ТекДанные,ТекЭлем,НаименованиеКлюча)
	Если ТекДанные = Неопределено Тогда
 		Возврат;
	КонецЕсли;

	// Создаем структуру отбора
	Отбор = Новый Структура;
	Отбор.Вставить(НаименованиеКлюча, ТекДанные[НаименованиеКлюча]);
	// Задаем фиксированную структуру отбора для таблицы формы
	ТекЭлем.ОтборСтрок = Новый ФиксированнаяСтруктура(Отбор);
КонецПроцедуры

&НаКлиенте 
Процедура ОбщаяПроцедураУдалитьСтроки(ТекДанные,ТекЭлем,НаименованиеКлюча)
	Если ТекДанные <> Неопределено Тогда
		МассивСтрок = ТекЭлем.НайтиСтроки(Новый Структура (НаименованиеКлюча,ТекДанные[НаименованиеКлюча]));
		Для Каждого СтрМассива ИЗ МассивСтрок Цикл
			ТекЭлем.Удалить(СтрМассива);
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

&НаСервере 
Процедура ОбщаяПроцедураУдалитьСтрокиНаСервере(ТекДанные,ТекЭлем,НаименованиеКлюча)
	Если ТекДанные <> Неопределено Тогда
		МассивСтрок = ТекЭлем.НайтиСтроки(Новый Структура (НаименованиеКлюча,ТекДанные[НаименованиеКлюча]));
		Для Каждого СтрМассива ИЗ МассивСтрок Цикл
			ТекЭлем.Удалить(СтрМассива);
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры


&НаСервере
Процедура ПерезаполнитьЗначениеКлюча (ЗначениеКлючаНачальный,ЗначениеКлюча,НаименованиеТабЧасти,НаименованиеКлюча)
	Если ЗначениеЗаполнено(ЗначениеКлючаНачальный) Тогда
		ТекЭлем = Объект[НаименованиеТабЧасти];
		МассивСтрок = ТекЭлем.НайтиСтроки(Новый Структура (НаименованиеКлюча,ЗначениеКлючаНачальный));
		Для Каждого СтрМассива ИЗ МассивСтрок Цикл
			СтрМассива[НаименованиеКлюча] = ЗначениеКлюча;
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры


&НаКлиенте
Процедура ДокументРасчетовПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	Если Элементы.ВФайле.ТекущиеДанные = Неопределено Тогда
		Отказ = Истина;
	КонецЕсли;
КонецПроцедуры


&НаКлиенте
Процедура ДокументРасчетовПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	Если НоваяСтрока И НЕ Копирование Тогда
		Элемент.ТекущиеДанные[НаименованиеКлючаСвязи] = Элементы.ВФайле.ТекущиеДанные[НаименованиеКлючаСвязи];
	КонецЕсли;
КонецПроцедуры


&НаКлиенте
Процедура ОчиститьОтбор(Команда)
	//СнятьОтборСЭлементов(Элементы.ДокументРасчетов);
КонецПроцедуры


&НаКлиенте
Процедура ПодобробратьДокументы(Команда)
	ПодобратьДокументыНаСервере();
КонецПроцедуры

&НаСервере 
Процедура ПодобратьДокументыНаСервере()
	
	Для Каждого Строка Из ВФайле Цикл
		Если НЕ Строка.Пометка Тогда
			Продолжить;
		КонецЕсли;	
		Если НЕ ЗначениеЗаполнено(ДатаПП) ИЛИ НЕ ЗначениеЗаполнено(Организация) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Заполните дату и Организацию");
			Возврат;
		КонецЕсли;	
		
		ОбщаяПроцедураУдалитьСтрокиНаСервере(Строка, ДокументРасчетов, НаименованиеКлючаСвязи);
	//РасшифровкаПлатежа.Очистить();
	//
	ДанныеДляЗаполненияРасшифровкиПлатежа = Документы.ПлатежноеПоручение.ДанныеДляЗаполненияРасшифровкиПлатежа(Организация, Строка.Контрагент, ДатаПП);
	Выборка = ДанныеДляЗаполненияРасшифровкиПлатежа.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Если Не ЗначениеЗаполнено(Выборка.Договор) Или Выборка.Сумма <= 0 Тогда
			Продолжить;
		КонецЕсли;
		
		НоваяСтрока = ДокументРасчетов.Добавить();
		НоваяСтрока.ДоговорКонтрагента = Выборка.Договор;
		НоваяСтрока.Документ = Выборка.Сделка;
		
		НоваяСтрока.Сумма = Выборка.Сумма;
		
		Если Выборка.Сумма = Выборка.СуммаДокумента Тогда
			НоваяСтрока.СуммаНДС = Выборка.СуммаНДСДокумента;
			
		Иначе
			Попытка
				НоваяСтрока.СуммаНДС = Окр(Выборка.СуммаНДСДокумента*Выборка.Сумма/Выборка.СуммаДокумента, 2);
			Исключение
				НоваяСтрока.СуммаНДС = 0;
			КонецПопытки;
		КонецЕсли;
		НоваяСтрока.УИДСтроки = Строка.УИДСтроки;
	КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры	

&НаКлиенте
Процедура ПодобратьПоСуммам(Команда)
	ПодобратьПоСуммамНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ПодобратьПоСуммамНаСервере()
	
	Для Каждого Строка Из ВФайле Цикл
		Если НЕ Строка.Пометка Тогда
			Продолжить;
		КонецЕсли;
		НакапливаемаяСумма =0;
		МассивСтрок = ДокументРасчетов.НайтиСтроки(Новый Структура("УИДСтроки", Строка.УИДСтроки));
		сп = Новый СписокЗначений;
		сп.ЗагрузитьЗначения(МассивСтрок);
		
		Результат = ПодобратьЧисла(сп, Строка.Сумма);
		Если не Результат = Неопределено Тогда
			Для Каждого Позиция Из Результат Цикл
				МассивСтрок[Позиция.Значение-1].Пометка = Истина;				
			КонецЦикла;	
		КонецЕсли;
	КонецЦикла; 	
	
КонецПроцедуры

&НаКлиенте
Функция ПодобратьЧисла(Список, Сумма, Позиция = 1) Экспорт
	Перем РезалтЛист;
	Перем СабЛист;
	Перем СабРезалтЛист;
		
	РезалтЛист = Новый СписокЗначений;
	//Сообщить();
	
	Если Сумма <= 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если Список.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Первый = Список.Получить(0).Значение.Сумма;
	
	Если Первый = Сумма Тогда
		РезалтЛист.Добавить(Позиция);
		Возврат РезалтЛист;
	КонецЕсли;
	
	Если Список.Количество() = 1 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	СабЛист = Новый СписокЗначений;
	МассивЗначений = Список.ВыгрузитьЗначения();
	МассивЗначений.Удалить(0);
	СабЛист.ЗагрузитьЗначения(МассивЗначений);
	
	СабРезалтЛист = ПодобратьЧисла(СабЛист, Сумма - Первый, Позиция + 1);
	Если НЕ СабРезалтЛист = Неопределено Тогда
		СабРезалтЛист.Вставить(1, Позиция);
		Возврат СабРезалтЛист;
	КонецЕсли;
	
	СабРезалтЛист = ПодобратьЧисла(СабЛист, Сумма, Позиция + 1);
	Если НЕ СабРезалтЛист = Неопределено Тогда
		Возврат СабРезалтЛист;
	КонецЕсли;
	
	Возврат Неопределено;
КонецФункции	

&НаКлиенте
Процедура УстановитьПометки(Команда)
	
	Для Каждого стр иЗ ВФайле Цикл
		стр.Пометка = Истина;
	КонецЦикла;	
	
КонецПроцедуры

&НаКлиенте
Процедура СнятьПометки(Команда)
	
	Для Каждого стр иЗ ВФайле Цикл
		стр.Пометка = Ложь;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ДокументРасчетовСуммаПриИзменении(Элемент)
	
	ТекДанные = Элементы.ДокументРасчетов.ТекущиеДанные;
	ТекДанные.СуммаНДС = ПересчитатьСуммуНДС(ТекДанные.Сумма, ОпределитьСтавкуНДСДокумента(ТекДанные.Документ));

КонецПроцедуры

&НаСервере 
Функция ОпределитьСтавкуНДСДокумента(Док)
	
	Если ТипЗнч(Док) = Тип("ДокументСсылка.ПоступлениеТоваровУслуг") Тогда
		Если Док.Товары.Количество() > 0 Тогда
			Возврат Док.Товары[0].СтавкаНДС;
		КонецЕсли;	
	КонецЕсли;	
	
	Возврат ПредопределенноеЗначение("Перечисление.СтавкиНДС.НДС20"); 
	
КонецФункции	

&НаКлиенте
Процедура ДокументРасчетовПриИзменении(Элемент)
	
	ПересчитатьСуммыПодобранных();
	
	ОбновитьДельту(Элементы.ВФайле.ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура ПересчитатьСуммыПодобранных()
	
	Для Каждого Строка Из ВФайле Цикл
		Строка.СуммаПодобранных = 0;
		Если НЕ Строка.Пометка Тогда 
			Продолжить;
		КонецЕсли;
		
		МассивСтрок = ДокументРасчетов.НайтиСтроки(Новый Структура("УИДСтроки", Строка.УИДСтроки));
		
		Для Каждого Стр Из МассивСтрок Цикл
			Если НЕ Стр.Пометка Тогда 
				Продолжить;
			КонецЕсли;
			
			Строка.СуммаПодобранных = Строка.СуммаПодобранных  +  Стр.Сумма;
		КонецЦикла;	
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьДельту(ТекДанные)
	
	Попытка
		Дельта = ТекДанные.Сумма - ТекДанные.СуммаПодобранных;	
	Исключение
		Дельта = 0;
	КонецПопытки;	
	
КонецПроцедуры	

&НаКлиенте
Процедура ВФайлеСчетОрганизацииНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	
	Отбор = Новый Структура("Владелец", Организация);
	Парам = Новый Структура("Отбор",Отбор);
	ОткрытьФорму("Справочник.БанковскиеСчета.ФормаВыбора", Парам, Элементы.СчетОрганизации);

КонецПроцедуры


